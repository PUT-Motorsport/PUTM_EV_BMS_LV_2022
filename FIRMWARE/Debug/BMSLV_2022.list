
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  080167b0  080167b0  000267b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171b4  080171b4  0003056c  2**0
                  CONTENTS
  4 .ARM          00000000  080171b4  080171b4  0003056c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080171b4  080171b4  0003056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080171b4  080171b4  000271b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080171c4  080171c4  000271c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000056c  20000000  080171c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092f0  2000056c  08017734  0003056c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000985c  08017734  0003985c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003056c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c722  00000000  00000000  0003059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008887  00000000  00000000  0007ccbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b00  00000000  00000000  00085548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002808  00000000  00000000  00088048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b99c  00000000  00000000  0008a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036f31  00000000  00000000  000c61ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014e957  00000000  00000000  000fd11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024ba74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c88c  00000000  00000000  0024bac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000056c 	.word	0x2000056c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016798 	.word	0x08016798

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000570 	.word	0x20000570
 80001fc:	08016798 	.word	0x08016798

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <_Z20discharge_cells_tailRi>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int &i){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(5 == i || 6 == i)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d003      	beq.n	8000c90 <_Z20discharge_cells_tailRi+0x18>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	d106      	bne.n	8000c9e <_Z20discharge_cells_tailRi+0x26>
		return i = -1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f04f 32ff 	mov.w	r2, #4294967295
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	e001      	b.n	8000ca2 <_Z20discharge_cells_tailRi+0x2a>
	else
		return i;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d817      	bhi.n	8000cf2 <_Z18set_discharge_cellRhRi+0x42>
	{
		data.charging.cell_discharge[i] = true;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <_Z18set_discharge_cellRhRi+0x64>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	f7ff ffc6 	bl	8000c78 <_Z20discharge_cells_tailRi>
 8000cec:	4602      	mov	r2, r0
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	601a      	str	r2, [r3, #0]
	}
	data.charging.discharge_activation = true;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_Z18set_discharge_cellRhRi+0x64>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000cfa:	f004 fa17 	bl	800512c <HAL_GetTick>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000d04:	3310      	adds	r3, #16
 8000d06:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <_Z18set_discharge_cellRhRi+0x64>)
 8000d08:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20001424 	.word	0x20001424

08000d18 <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d818      	bhi.n	8000d64 <_Z22set_discharge_cell_maxRhRiRb+0x4c>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d34:	8bdb      	ldrh	r3, [r3, #30]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d50:	8bdb      	ldrh	r3, [r3, #30]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f7ff ff8d 	bl	8000c78 <_Z20discharge_cells_tailRi>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	601a      	str	r2, [r3, #0]
	}

	data.charging.discharge_activation = true;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000d6c:	f004 f9de 	bl	800512c <HAL_GetTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000d76:	3310      	adds	r3, #16
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d7a:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20001424 	.word	0x20001424

08000d8c <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	75fb      	strb	r3, [r7, #23]
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	757b      	strb	r3, [r7, #21]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73bb      	strb	r3, [r7, #14]
 8000da6:	2300      	movs	r3, #0
 8000da8:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d83c      	bhi.n	8000e2e <_Z15balance_controlv+0xa2>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000db4:	4b94      	ldr	r3, [pc, #592]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000db6:	8b9b      	ldrh	r3, [r3, #28]
 8000db8:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d807      	bhi.n	8000dd0 <_Z15balance_controlv+0x44>
 8000dc0:	4b91      	ldr	r3, [pc, #580]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000dc2:	8b9b      	ldrh	r3, [r3, #28]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b90      	ldr	r3, [pc, #576]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000dc8:	8b5b      	ldrh	r3, [r3, #26]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b32      	cmp	r3, #50	; 0x32
 8000dce:	dd01      	ble.n	8000dd4 <_Z15balance_controlv+0x48>
		{
			max_voltage_discharge_activation= true;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000dd4:	4b8c      	ldr	r3, [pc, #560]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000dd6:	8b9b      	ldrh	r3, [r3, #28]
 8000dd8:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d901      	bls.n	8000de4 <_Z15balance_controlv+0x58>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000de0:	2301      	movs	r3, #1
 8000de2:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000de4:	4a88      	ldr	r2, [pc, #544]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d902      	bls.n	8000dfa <_Z15balance_controlv+0x6e>
		{
			charged_cells++;
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	3301      	adds	r3, #1
 8000df8:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000dfa:	4a83      	ldr	r2, [pc, #524]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e02:	f24a 32c0 	movw	r2, #41920	; 0xa3c0
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d902      	bls.n	8000e10 <_Z15balance_controlv+0x84>
		{
			nearly_charged_cells++;
 8000e0a:	7dbb      	ldrb	r3, [r7, #22]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000e10:	4a7d      	ldr	r2, [pc, #500]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e18:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d902      	bls.n	8000e26 <_Z15balance_controlv+0x9a>
		{
			cell_overcharged++;
 8000e20:	7d7b      	ldrb	r3, [r7, #21]
 8000e22:	3301      	adds	r3, #1
 8000e24:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	e7bf      	b.n	8000dae <_Z15balance_controlv+0x22>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d926      	bls.n	8000e82 <_Z15balance_controlv+0xf6>
 8000e34:	4b74      	ldr	r3, [pc, #464]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000e36:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8000e3e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800100c <_Z15balance_controlv+0x280>
 8000e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d51a      	bpl.n	8000e82 <_Z15balance_controlv+0xf6>
 8000e4c:	7dbb      	ldrb	r3, [r7, #22]
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d117      	bne.n	8000e82 <_Z15balance_controlv+0xf6>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2104      	movs	r1, #4
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f007 fa4b 	bl	80082f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	486a      	ldr	r0, [pc, #424]	; (8001010 <_Z15balance_controlv+0x284>)
 8000e66:	f007 fa45 	bl	80082f4 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000e6a:	486a      	ldr	r0, [pc, #424]	; (8001014 <_Z15balance_controlv+0x288>)
 8000e6c:	f003 f9c4 	bl	80041f8 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000e70:	4b65      	ldr	r3, [pc, #404]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000e78:	4b63      	ldr	r3, [pc, #396]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000e80:	e043      	b.n	8000f0a <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1 && data.charging.discharge_activation == 0)
 8000e82:	7d7b      	ldrb	r3, [r7, #21]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d919      	bls.n	8000ebc <_Z15balance_controlv+0x130>
 8000e88:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000e8a:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d114      	bne.n	8000ebc <_Z15balance_controlv+0x130>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2104      	movs	r1, #4
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f007 fa2b 	bl	80082f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	485a      	ldr	r0, [pc, #360]	; (8001010 <_Z15balance_controlv+0x284>)
 8000ea6:	f007 fa25 	bl	80082f4 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000eaa:	4b57      	ldr	r3, [pc, #348]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000eba:	e026      	b.n	8000f0a <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch on
	else if(!data.charging.charger_plugged && nearly_charged_cells < 6 && cell_overcharged == 0 && data.charging.discharge_activation == 0)// && acuState == 0
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000ebe:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8000ec2:	f083 0301 	eor.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01e      	beq.n	8000f0a <_Z15balance_controlv+0x17e>
 8000ecc:	7dbb      	ldrb	r3, [r7, #22]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d81b      	bhi.n	8000f0a <_Z15balance_controlv+0x17e>
 8000ed2:	7d7b      	ldrb	r3, [r7, #21]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d118      	bne.n	8000f0a <_Z15balance_controlv+0x17e>
 8000ed8:	4b4b      	ldr	r3, [pc, #300]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000eda:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d113      	bne.n	8000f0a <_Z15balance_controlv+0x17e>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f007 fa03 	bl	80082f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	4846      	ldr	r0, [pc, #280]	; (8001010 <_Z15balance_controlv+0x284>)
 8000ef6:	f007 f9fd 	bl	80082f4 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 1;
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state) //charging on
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f0c:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d144      	bne.n	8000f9e <_Z15balance_controlv+0x212>
	{
		if(false == data.charging.discharge_activation)
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f16:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d16f      	bne.n	8000ffe <_Z15balance_controlv+0x272>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	dc6a      	bgt.n	8000ffe <_Z15balance_controlv+0x272>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d109      	bne.n	8000f42 <_Z15balance_controlv+0x1b6>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000f2e:	f107 020e 	add.w	r2, r7, #14
 8000f32:	f107 0108 	add.w	r1, r7, #8
 8000f36:	f107 030f 	add.w	r3, r7, #15
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff feec 	bl	8000d18 <_Z22set_discharge_cell_maxRhRiRb>
 8000f40:	e029      	b.n	8000f96 <_Z15balance_controlv+0x20a>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	4a30      	ldr	r2, [pc, #192]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d908      	bls.n	8000f64 <_Z15balance_controlv+0x1d8>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fea7 	bl	8000cb0 <_Z18set_discharge_cellRhRi>
 8000f62:	e018      	b.n	8000f96 <_Z15balance_controlv+0x20a>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4a28      	ldr	r2, [pc, #160]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f70:	8b5b      	ldrh	r3, [r3, #26]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b32      	cmp	r3, #50	; 0x32
 8000f76:	dd08      	ble.n	8000f8a <_Z15balance_controlv+0x1fe>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	f107 030f 	add.w	r3, r7, #15
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe94 	bl	8000cb0 <_Z18set_discharge_cellRhRi>
 8000f88:	e005      	b.n	8000f96 <_Z15balance_controlv+0x20a>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	e7c1      	b.n	8000f22 <_Z15balance_controlv+0x196>
		}
	}
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(false == data.charging.discharge_activation)
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000fa0:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d12a      	bne.n	8000ffe <_Z15balance_controlv+0x272>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	dc25      	bgt.n	8000ffe <_Z15balance_controlv+0x272>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d108      	bne.n	8000fca <_Z15balance_controlv+0x23e>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000fb8:	f107 020d 	add.w	r2, r7, #13
 8000fbc:	1d39      	adds	r1, r7, #4
 8000fbe:	f107 030f 	add.w	r3, r7, #15
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fea8 	bl	8000d18 <_Z22set_discharge_cell_maxRhRiRb>
 8000fc8:	e015      	b.n	8000ff6 <_Z15balance_controlv+0x26a>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd2:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d907      	bls.n	8000fea <_Z15balance_controlv+0x25e>
				{
					set_discharge_cell(discharge_at_once, i);
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	f107 030f 	add.w	r3, r7, #15
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fe64 	bl	8000cb0 <_Z18set_discharge_cellRhRi>
 8000fe8:	e005      	b.n	8000ff6 <_Z15balance_controlv+0x26a>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <_Z15balance_controlv+0x27c>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	e7d6      	b.n	8000fac <_Z15balance_controlv+0x220>
			}
		}
	}
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20001424 	.word	0x20001424
 800100c:	3e99999a 	.word	0x3e99999a
 8001010:	48000800 	.word	0x48000800
 8001014:	200015f8 	.word	0x200015f8

08001018 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <_Z31balance_activation_deactivationv+0x90>)
 8001020:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8001024:	2b01      	cmp	r3, #1
 8001026:	d114      	bne.n	8001052 <_Z31balance_activation_deactivationv+0x3a>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b05      	cmp	r3, #5
 8001030:	dc0f      	bgt.n	8001052 <_Z31balance_activation_deactivationv+0x3a>
		{
			if(true == data.charging.cell_discharge[i])
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <_Z31balance_activation_deactivationv+0x90>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d103      	bne.n	800104a <_Z31balance_activation_deactivationv+0x32>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 8001042:	491a      	ldr	r1, [pc, #104]	; (80010ac <_Z31balance_activation_deactivationv+0x94>)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f001 fd89 	bl	8002b5c <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	e7ec      	b.n	800102c <_Z31balance_activation_deactivationv+0x14>
			}
		}

	}
	if(data.charging.discharge_tick_end <= HAL_GetTick())
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_Z31balance_activation_deactivationv+0x90>)
 8001054:	f8d3 429c 	ldr.w	r4, [r3, #668]	; 0x29c
 8001058:	f004 f868 	bl	800512c <HAL_GetTick>
 800105c:	4603      	mov	r3, r0
 800105e:	429c      	cmp	r4, r3
 8001060:	bf94      	ite	ls
 8001062:	2301      	movls	r3, #1
 8001064:	2300      	movhi	r3, #0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d019      	beq.n	80010a0 <_Z31balance_activation_deactivationv+0x88>
	{
		data.charging.discharge_activation = 0;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <_Z31balance_activation_deactivationv+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b05      	cmp	r3, #5
 800107c:	dc0a      	bgt.n	8001094 <_Z31balance_activation_deactivationv+0x7c>
		{
			data.charging.cell_discharge[i] = false;
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <_Z31balance_activation_deactivationv+0x90>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	e7f1      	b.n	8001078 <_Z31balance_activation_deactivationv+0x60>
		}
		LTC_turn_off_discharge();
 8001094:	f001 fe52 	bl	8002d3c <_Z22LTC_turn_off_dischargev>
		osDelay(1500);
 8001098:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800109c:	f00e ffde 	bl	801005c <osDelay>
	}
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	20001424 	.word	0x20001424
 80010ac:	200016b4 	.word	0x200016b4

080010b0 <_Z22start_balance_functionPv>:

void start_balance_function(void *argument){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010b8:	2104      	movs	r1, #4
 80010ba:	4815      	ldr	r0, [pc, #84]	; (8001110 <_Z22start_balance_functionPv+0x60>)
 80010bc:	f007 f902 	bl	80082c4 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_Z22start_balance_functionPv+0x64>)
 80010ce:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for(;;){
		osDelay(30);
 80010d2:	201e      	movs	r0, #30
 80010d4:	f00e ffc2 	bl	801005c <osDelay>
		if(!data.charging.charger_plugged) //charger is plugged
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <_Z22start_balance_functionPv+0x64>)
 80010da:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00a      	beq.n	80010fe <_Z22start_balance_functionPv+0x4e>
		{
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	480a      	ldr	r0, [pc, #40]	; (8001118 <_Z22start_balance_functionPv+0x68>)
 80010f0:	f007 f900 	bl	80082f4 <HAL_GPIO_WritePin>

			balance_control();
 80010f4:	f7ff fe4a 	bl	8000d8c <_Z15balance_controlv>
			balance_activation_deactivation();
 80010f8:	f7ff ff8e 	bl	8001018 <_Z31balance_activation_deactivationv>
 80010fc:	e7e9      	b.n	80010d2 <_Z22start_balance_functionPv+0x22>

		}
		else	//charger is unplugged
		{
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <_Z22start_balance_functionPv+0x68>)
 8001106:	f007 f8f5 	bl	80082f4 <HAL_GPIO_WritePin>
			balance_activation_deactivation();
 800110a:	f7ff ff85 	bl	8001018 <_Z31balance_activation_deactivationv>
		osDelay(30);
 800110e:	e7e0      	b.n	80010d2 <_Z22start_balance_functionPv+0x22>
 8001110:	48000400 	.word	0x48000400
 8001114:	20001424 	.word	0x20001424
 8001118:	48000800 	.word	0x48000800

0800111c <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
 8001120:	2300      	movs	r3, #0
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
    {
    }
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
    {
    }
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	461a      	mov	r2, r3
 8001188:	2300      	movs	r3, #0
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	6053      	str	r3, [r2, #4]
 800118e:	6093      	str	r3, [r2, #8]
 8001190:	60d3      	str	r3, [r2, #12]
 8001192:	6113      	str	r3, [r2, #16]
 8001194:	6153      	str	r3, [r2, #20]
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	331c      	adds	r3, #28
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	331c      	adds	r3, #28
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f006 f83d 	bl	800722a <HAL_CAN_GetRxMessage>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
    this->status =
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	791a      	ldrb	r2, [r3, #4]
 80011d0:	795b      	ldrb	r3, [r3, #5]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	4313      	orrs	r3, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f000 fce2 	bl	8001bc4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE5beginEv>
 8001200:	6178      	str	r0, [r7, #20]
 8001202:	6938      	ldr	r0, [r7, #16]
 8001204:	f000 fcea 	bl	8001bdc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE3endEv>
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	429a      	cmp	r2, r3
 8001210:	d01f      	beq.n	8001252 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffd2 	bl	80011c4 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 8001220:	4602      	mov	r2, r0
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00a      	beq.n	800124a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	4610      	mov	r0, r2
 8001244:	4798      	blx	r3
        return true;
 8001246:	2301      	movs	r3, #1
 8001248:	e004      	b.n	8001254 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3304      	adds	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e7db      	b.n	800120a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8001252:	2300      	movs	r3, #0
  }
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff83 	bl	8001178 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8001272:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4619      	mov	r1, r3
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001282:	f7ff ffb1 	bl	80011e8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000

08001294 <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 800129e:	230a      	movs	r3, #10
 80012a0:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 80012be:	230a      	movs	r3, #10
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <_Z8can_initv+0x50>)
 80012c8:	f005 fdd1 	bl	8006e6e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012cc:	2102      	movs	r1, #2
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <_Z8can_initv+0x50>)
 80012d0:	f006 f8bd 	bl	800744e <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <_Z8can_initv+0x50>)
 80012d6:	f005 fe94 	bl	8007002 <HAL_CAN_Start>

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20001a58 	.word	0x20001a58

080012e8 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 7> errors_vector;
 80012ee:	463b      	mov	r3, r7
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fc8d 	bl	8001c10 <_ZN3etl6vectorI15Error_conditionLj7EEC1Ev>

	for(auto& error : error_conditions){
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <_Z11error_checkv+0xcc>)
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <_Z11error_checkv+0xcc>)
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <_Z11error_checkv+0xd0>)
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	429a      	cmp	r2, r3
 8001308:	d041      	beq.n	800138e <_Z11error_checkv+0xa6>
 800130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
		if(error.min <= error.value && error.value <= error.max){
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	ed93 7a01 	vldr	s14, [r3, #4]
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	edd3 7a03 	vldr	s15, [r3, #12]
 800131a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	d825      	bhi.n	8001370 <_Z11error_checkv+0x88>
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	ed93 7a03 	vldr	s14, [r3, #12]
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d81a      	bhi.n	8001370 <_Z11error_checkv+0x88>
			errors_vector.emplace_back(error.error);
 800133a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800133c:	463b      	mov	r3, r7
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fc8a 	bl	8001c5a <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	7d1a      	ldrb	r2, [r3, #20]
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <_Z11error_checkv+0xd4>)
 800134c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
			if(false == error.flag)
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	7f1b      	ldrb	r3, [r3, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d116      	bne.n	8001386 <_Z11error_checkv+0x9e>
			{
				error.timer = HAL_GetTick() + error.error_time;
 8001358:	f003 fee8 	bl	800512c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	441a      	add	r2, r3
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	619a      	str	r2, [r3, #24]
				error.flag = true;
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	2201      	movs	r2, #1
 800136c:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 800136e:	e00a      	b.n	8001386 <_Z11error_checkv+0x9e>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 8001370:	f003 fedc 	bl	800512c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	441a      	add	r2, r3
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	619a      	str	r2, [r3, #24]
			error.flag = false;
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001388:	3320      	adds	r3, #32
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
 800138c:	e7b9      	b.n	8001302 <_Z11error_checkv+0x1a>
		}
	}

	if(errors_vector.empty())
 800138e:	463b      	mov	r3, r7
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fc7d 	bl	8001c90 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <_Z11error_checkv+0xd4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	etl::vector<Error_condition, 7> errors_vector;
 80013a4:	463b      	mov	r3, r7
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fc46 	bl	8001c38 <_ZN3etl6vectorI15Error_conditionLj7EED1Ev>
	}

	/*for (auto error : errors_vector){
		// do sth
	}*/
}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	; 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000590 	.word	0x20000590
 80013b8:	20000670 	.word	0x20000670
 80013bc:	20001424 	.word	0x20001424

080013c0 <_Z13error_executev>:

void error_execute(){
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 80013c6:	f003 feb1 	bl	800512c <HAL_GetTick>
 80013ca:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <_Z13error_executev+0x9c>)
 80013ce:	699c      	ldr	r4, [r3, #24]
 80013d0:	f003 feac 	bl	800512c <HAL_GetTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	429c      	cmp	r4, r3
 80013d8:	bf94      	ite	ls
 80013da:	2301      	movls	r3, #1
 80013dc:	2300      	movhi	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00a      	beq.n	80013fa <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2104      	movs	r1, #4
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f006 ff82 	bl	80082f4 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013f0:	2101      	movs	r1, #1
 80013f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013f6:	f008 f955 	bl	80096a4 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 7; i++){
 80013fa:	2303      	movs	r3, #3
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b06      	cmp	r3, #6
 8001402:	d819      	bhi.n	8001438 <_Z13error_executev+0x78>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <_Z13error_executev+0x9c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	015b      	lsls	r3, r3, #5
 800140a:	4413      	add	r3, r2
 800140c:	3318      	adds	r3, #24
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f003 fe8c 	bl	800512c <HAL_GetTick>
 8001414:	4603      	mov	r3, r0
 8001416:	429c      	cmp	r4, r3
 8001418:	bf94      	ite	ls
 800141a:	2301      	movls	r3, #1
 800141c:	2300      	movhi	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <_Z13error_executev+0x70>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f006 ff62 	bl	80082f4 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 7; i++){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3301      	adds	r3, #1
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e7e2      	b.n	80013fe <_Z13error_executev+0x3e>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 8001438:	2104      	movs	r1, #4
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f006 ff41 	bl	80082c4 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <_Z13error_executev+0xa0>)
 8001450:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000590 	.word	0x20000590
 8001460:	20001424 	.word	0x20001424

08001464 <_Z11serialPrintv>:

void serialPrint()
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b08d      	sub	sp, #52	; 0x34
 8001468:	af02      	add	r7, sp, #8
	static char tab[3500];
	uint16_t n=0;
 800146a:	2300      	movs	r3, #0
 800146c:	84fb      	strh	r3, [r7, #38]	; 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	48ab      	ldr	r0, [pc, #684]	; (8001724 <_Z11serialPrintv+0x2c0>)
 8001476:	f00a f82d 	bl	800b4d4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	48a8      	ldr	r0, [pc, #672]	; (8001724 <_Z11serialPrintv+0x2c0>)
 8001484:	f00a f910 	bl	800b6a8 <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10000;
 8001488:	4ba7      	ldr	r3, [pc, #668]	; (8001728 <_Z11serialPrintv+0x2c4>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001494:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800172c <_Z11serialPrintv+0x2c8>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a2:	4aa3      	ldr	r2, [pc, #652]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80014a4:	1898      	adds	r0, r3, r2
 80014a6:	783b      	ldrb	r3, [r7, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	787b      	ldrb	r3, [r7, #1]
 80014ac:	4619      	mov	r1, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	460b      	mov	r3, r1
 80014b4:	499f      	ldr	r1, [pc, #636]	; (8001734 <_Z11serialPrintv+0x2d0>)
 80014b6:	f013 f8bb 	bl	8014630 <siprintf>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c0:	4413      	add	r3, r2
 80014c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 80014c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c6:	4a9a      	ldr	r2, [pc, #616]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80014c8:	4413      	add	r3, r2
 80014ca:	4a97      	ldr	r2, [pc, #604]	; (8001728 <_Z11serialPrintv+0x2c4>)
 80014cc:	f892 22a0 	ldrb.w	r2, [r2, #672]	; 0x2a0
 80014d0:	4999      	ldr	r1, [pc, #612]	; (8001738 <_Z11serialPrintv+0x2d4>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f013 f8ac 	bl	8014630 <siprintf>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014de:	4413      	add	r3, r2
 80014e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014e4:	4a92      	ldr	r2, [pc, #584]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4994      	ldr	r1, [pc, #592]	; (800173c <_Z11serialPrintv+0x2d8>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f013 f8a0 	bl	8014630 <siprintf>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f6:	4413      	add	r3, r2
 80014f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014fc:	4a8c      	ldr	r2, [pc, #560]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80014fe:	4413      	add	r3, r2
 8001500:	498f      	ldr	r1, [pc, #572]	; (8001740 <_Z11serialPrintv+0x2dc>)
 8001502:	4618      	mov	r0, r3
 8001504:	f013 f894 	bl	8014630 <siprintf>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800150e:	4413      	add	r3, r2
 8001510:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001514:	4a86      	ldr	r2, [pc, #536]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001516:	4413      	add	r3, r2
 8001518:	4988      	ldr	r1, [pc, #544]	; (800173c <_Z11serialPrintv+0x2d8>)
 800151a:	4618      	mov	r0, r3
 800151c:	f013 f888 	bl	8014630 <siprintf>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001526:	4413      	add	r3, r2
 8001528:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "0- all good");
 800152a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800152c:	4a80      	ldr	r2, [pc, #512]	; (8001730 <_Z11serialPrintv+0x2cc>)
 800152e:	4413      	add	r3, r2
 8001530:	4984      	ldr	r1, [pc, #528]	; (8001744 <_Z11serialPrintv+0x2e0>)
 8001532:	4618      	mov	r0, r3
 8001534:	f013 f87c 	bl	8014630 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800153e:	4413      	add	r3, r2
 8001540:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001544:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001546:	4413      	add	r3, r2
 8001548:	497c      	ldr	r1, [pc, #496]	; (800173c <_Z11serialPrintv+0x2d8>)
 800154a:	4618      	mov	r0, r3
 800154c:	f013 f870 	bl	8014630 <siprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001556:	4413      	add	r3, r2
 8001558:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "1- charging");
 800155a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800155c:	4a74      	ldr	r2, [pc, #464]	; (8001730 <_Z11serialPrintv+0x2cc>)
 800155e:	4413      	add	r3, r2
 8001560:	4979      	ldr	r1, [pc, #484]	; (8001748 <_Z11serialPrintv+0x2e4>)
 8001562:	4618      	mov	r0, r3
 8001564:	f013 f864 	bl	8014630 <siprintf>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156e:	4413      	add	r3, r2
 8001570:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001574:	4a6e      	ldr	r2, [pc, #440]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001576:	4413      	add	r3, r2
 8001578:	4970      	ldr	r1, [pc, #448]	; (800173c <_Z11serialPrintv+0x2d8>)
 800157a:	4618      	mov	r0, r3
 800157c:	f013 f858 	bl	8014630 <siprintf>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001586:	4413      	add	r3, r2
 8001588:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 800158a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800158c:	4a68      	ldr	r2, [pc, #416]	; (8001730 <_Z11serialPrintv+0x2cc>)
 800158e:	4413      	add	r3, r2
 8001590:	496e      	ldr	r1, [pc, #440]	; (800174c <_Z11serialPrintv+0x2e8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f013 f84c 	bl	8014630 <siprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159e:	4413      	add	r3, r2
 80015a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a4:	4a62      	ldr	r2, [pc, #392]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80015a6:	4413      	add	r3, r2
 80015a8:	4964      	ldr	r1, [pc, #400]	; (800173c <_Z11serialPrintv+0x2d8>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f013 f840 	bl	8014630 <siprintf>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b6:	4413      	add	r3, r2
 80015b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 80015ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015bc:	4a5c      	ldr	r2, [pc, #368]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80015be:	4413      	add	r3, r2
 80015c0:	4963      	ldr	r1, [pc, #396]	; (8001750 <_Z11serialPrintv+0x2ec>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f013 f834 	bl	8014630 <siprintf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ce:	4413      	add	r3, r2
 80015d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015d4:	4a56      	ldr	r2, [pc, #344]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4958      	ldr	r1, [pc, #352]	; (800173c <_Z11serialPrintv+0x2d8>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f013 f828 	bl	8014630 <siprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e6:	4413      	add	r3, r2
 80015e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	4a50      	ldr	r2, [pc, #320]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80015ee:	4413      	add	r3, r2
 80015f0:	4958      	ldr	r1, [pc, #352]	; (8001754 <_Z11serialPrintv+0x2f0>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f013 f81c 	bl	8014630 <siprintf>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fe:	4413      	add	r3, r2
 8001600:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001606:	4413      	add	r3, r2
 8001608:	494c      	ldr	r1, [pc, #304]	; (800173c <_Z11serialPrintv+0x2d8>)
 800160a:	4618      	mov	r0, r3
 800160c:	f013 f810 	bl	8014630 <siprintf>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001616:	4413      	add	r3, r2
 8001618:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 800161a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <_Z11serialPrintv+0x2cc>)
 800161e:	4413      	add	r3, r2
 8001620:	494d      	ldr	r1, [pc, #308]	; (8001758 <_Z11serialPrintv+0x2f4>)
 8001622:	4618      	mov	r0, r3
 8001624:	f013 f804 	bl	8014630 <siprintf>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800162e:	4413      	add	r3, r2
 8001630:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001634:	4a3e      	ldr	r2, [pc, #248]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001636:	4413      	add	r3, r2
 8001638:	4940      	ldr	r1, [pc, #256]	; (800173c <_Z11serialPrintv+0x2d8>)
 800163a:	4618      	mov	r0, r3
 800163c:	f012 fff8 	bl	8014630 <siprintf>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001646:	4413      	add	r3, r2
 8001648:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 800164a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800164c:	4a38      	ldr	r2, [pc, #224]	; (8001730 <_Z11serialPrintv+0x2cc>)
 800164e:	4413      	add	r3, r2
 8001650:	4942      	ldr	r1, [pc, #264]	; (800175c <_Z11serialPrintv+0x2f8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f012 ffec 	bl	8014630 <siprintf>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165e:	4413      	add	r3, r2
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001662:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001664:	4a32      	ldr	r2, [pc, #200]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001666:	4413      	add	r3, r2
 8001668:	4934      	ldr	r1, [pc, #208]	; (800173c <_Z11serialPrintv+0x2d8>)
 800166a:	4618      	mov	r0, r3
 800166c:	f012 ffe0 	bl	8014630 <siprintf>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001676:	4413      	add	r3, r2
 8001678:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "7- too high current");
 800167a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800167c:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <_Z11serialPrintv+0x2cc>)
 800167e:	4413      	add	r3, r2
 8001680:	4937      	ldr	r1, [pc, #220]	; (8001760 <_Z11serialPrintv+0x2fc>)
 8001682:	4618      	mov	r0, r3
 8001684:	f012 ffd4 	bl	8014630 <siprintf>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800168e:	4413      	add	r3, r2
 8001690:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001696:	4413      	add	r3, r2
 8001698:	4928      	ldr	r1, [pc, #160]	; (800173c <_Z11serialPrintv+0x2d8>)
 800169a:	4618      	mov	r0, r3
 800169c:	f012 ffc8 	bl	8014630 <siprintf>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a6:	4413      	add	r3, r2
 80016a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 80016aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80016ae:	4413      	add	r3, r2
 80016b0:	492c      	ldr	r1, [pc, #176]	; (8001764 <_Z11serialPrintv+0x300>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f012 ffbc 	bl	8014630 <siprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016be:	4413      	add	r3, r2
 80016c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n\n");
 80016c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80016c6:	4413      	add	r3, r2
 80016c8:	4927      	ldr	r1, [pc, #156]	; (8001768 <_Z11serialPrintv+0x304>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f012 ffb0 	bl	8014630 <siprintf>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016d6:	4413      	add	r3, r2
 80016d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 80016da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <_Z11serialPrintv+0x2cc>)
 80016de:	189c      	adds	r4, r3, r2
 80016e0:	69f8      	ldr	r0, [r7, #28]
 80016e2:	f7fe ff49 	bl	8000578 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4920      	ldr	r1, [pc, #128]	; (800176c <_Z11serialPrintv+0x308>)
 80016ec:	4620      	mov	r0, r4
 80016ee:	f012 ff9f 	bl	8014630 <siprintf>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016f8:	4413      	add	r3, r2
 80016fa:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80016fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001700:	4413      	add	r3, r2
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <_Z11serialPrintv+0x2d8>)
 8001704:	4618      	mov	r0, r3
 8001706:	f012 ff93 	bl	8014630 <siprintf>
 800170a:	4603      	mov	r3, r0
 800170c:	b29a      	uxth	r2, r3
 800170e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001710:	4413      	add	r3, r2
 8001712:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 8001714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <_Z11serialPrintv+0x2cc>)
 8001718:	189c      	adds	r4, r3, r2
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <_Z11serialPrintv+0x2c4>)
 800171c:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8001720:	e028      	b.n	8001774 <_Z11serialPrintv+0x310>
 8001722:	bf00      	nop
 8001724:	20001a80 	.word	0x20001a80
 8001728:	20001424 	.word	0x20001424
 800172c:	461c4000 	.word	0x461c4000
 8001730:	20000670 	.word	0x20000670
 8001734:	080167b0 	.word	0x080167b0
 8001738:	080167c4 	.word	0x080167c4
 800173c:	080167e0 	.word	0x080167e0
 8001740:	080167e4 	.word	0x080167e4
 8001744:	08016800 	.word	0x08016800
 8001748:	0801680c 	.word	0x0801680c
 800174c:	08016818 	.word	0x08016818
 8001750:	08016850 	.word	0x08016850
 8001754:	08016878 	.word	0x08016878
 8001758:	0801688c 	.word	0x0801688c
 800175c:	080168a0 	.word	0x080168a0
 8001760:	080168b8 	.word	0x080168b8
 8001764:	080168cc 	.word	0x080168cc
 8001768:	080168dc 	.word	0x080168dc
 800176c:	080168e0 	.word	0x080168e0
 8001770:	42c80000 	.word	0x42c80000
 8001774:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001770 <_Z11serialPrintv+0x30c>
 8001778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177c:	ee17 0a90 	vmov	r0, s15
 8001780:	f7fe fefa 	bl	8000578 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	496b      	ldr	r1, [pc, #428]	; (8001938 <_Z11serialPrintv+0x4d4>)
 800178a:	4620      	mov	r0, r4
 800178c:	f012 ff50 	bl	8014630 <siprintf>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001796:	4413      	add	r3, r2
 8001798:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800179a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800179c:	4a67      	ldr	r2, [pc, #412]	; (800193c <_Z11serialPrintv+0x4d8>)
 800179e:	4413      	add	r3, r2
 80017a0:	4967      	ldr	r1, [pc, #412]	; (8001940 <_Z11serialPrintv+0x4dc>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f012 ff44 	bl	8014630 <siprintf>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ae:	4413      	add	r3, r2
 80017b0:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	dc68      	bgt.n	800188e <_Z11serialPrintv+0x42a>
	{
		float cell_value = (float)data.voltages.cells[i] / 10000;
 80017bc:	4a61      	ldr	r2, [pc, #388]	; (8001944 <_Z11serialPrintv+0x4e0>)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001948 <_Z11serialPrintv+0x4e4>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i);
 80017d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017da:	4a58      	ldr	r2, [pc, #352]	; (800193c <_Z11serialPrintv+0x4d8>)
 80017dc:	4413      	add	r3, r2
 80017de:	6a3a      	ldr	r2, [r7, #32]
 80017e0:	495a      	ldr	r1, [pc, #360]	; (800194c <_Z11serialPrintv+0x4e8>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f012 ff24 	bl	8014630 <siprintf>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ee:	4413      	add	r3, r2
 80017f0:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 80017f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <_Z11serialPrintv+0x4d8>)
 80017f6:	189c      	adds	r4, r3, r2
 80017f8:	69b8      	ldr	r0, [r7, #24]
 80017fa:	f7fe febd 	bl	8000578 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4850      	ldr	r0, [pc, #320]	; (8001944 <_Z11serialPrintv+0x4e0>)
 8001804:	6a39      	ldr	r1, [r7, #32]
 8001806:	4401      	add	r1, r0
 8001808:	f501 7124 	add.w	r1, r1, #656	; 0x290
 800180c:	7809      	ldrb	r1, [r1, #0]
 800180e:	2900      	cmp	r1, #0
 8001810:	d101      	bne.n	8001816 <_Z11serialPrintv+0x3b2>
 8001812:	2120      	movs	r1, #32
 8001814:	e000      	b.n	8001818 <_Z11serialPrintv+0x3b4>
 8001816:	212a      	movs	r1, #42	; 0x2a
 8001818:	9100      	str	r1, [sp, #0]
 800181a:	494d      	ldr	r1, [pc, #308]	; (8001950 <_Z11serialPrintv+0x4ec>)
 800181c:	4620      	mov	r0, r4
 800181e:	f012 ff07 	bl	8014630 <siprintf>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001828:	4413      	add	r3, r2
 800182a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i != 5)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	2b05      	cmp	r3, #5
 8001830:	d01d      	beq.n	800186e <_Z11serialPrintv+0x40a>
		{
		n += sprintf(&tab[n], " -T.%d-\t", i);
 8001832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001834:	4a41      	ldr	r2, [pc, #260]	; (800193c <_Z11serialPrintv+0x4d8>)
 8001836:	4413      	add	r3, r2
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	4946      	ldr	r1, [pc, #280]	; (8001954 <_Z11serialPrintv+0x4f0>)
 800183c:	4618      	mov	r0, r3
 800183e:	f012 fef7 	bl	8014630 <siprintf>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001848:	4413      	add	r3, r2
 800184a:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
 800184c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800184e:	4a3b      	ldr	r2, [pc, #236]	; (800193c <_Z11serialPrintv+0x4d8>)
 8001850:	1898      	adds	r0, r3, r2
 8001852:	4a3c      	ldr	r2, [pc, #240]	; (8001944 <_Z11serialPrintv+0x4e0>)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	4413      	add	r3, r2
 8001858:	3320      	adds	r3, #32
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	493e      	ldr	r1, [pc, #248]	; (8001958 <_Z11serialPrintv+0x4f4>)
 8001860:	f012 fee6 	bl	8014630 <siprintf>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800186a:	4413      	add	r3, r2
 800186c:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		n += sprintf(&tab[n], "\r\n");
 800186e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001870:	4a32      	ldr	r2, [pc, #200]	; (800193c <_Z11serialPrintv+0x4d8>)
 8001872:	4413      	add	r3, r2
 8001874:	4932      	ldr	r1, [pc, #200]	; (8001940 <_Z11serialPrintv+0x4dc>)
 8001876:	4618      	mov	r0, r3
 8001878:	f012 feda 	bl	8014630 <siprintf>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001882:	4413      	add	r3, r2
 8001884:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	3301      	adds	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	e793      	b.n	80017b6 <_Z11serialPrintv+0x352>
	}

	n += sprintf(&tab[n], "\r\n");
 800188e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001890:	4a2a      	ldr	r2, [pc, #168]	; (800193c <_Z11serialPrintv+0x4d8>)
 8001892:	4413      	add	r3, r2
 8001894:	492a      	ldr	r1, [pc, #168]	; (8001940 <_Z11serialPrintv+0x4dc>)
 8001896:	4618      	mov	r0, r3
 8001898:	f012 feca 	bl	8014630 <siprintf>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018a2:	4413      	add	r3, r2
 80018a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 80018a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <_Z11serialPrintv+0x4d8>)
 80018aa:	189c      	adds	r4, r3, r2
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <_Z11serialPrintv+0x4e0>)
 80018ae:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe60 	bl	8000578 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4927      	ldr	r1, [pc, #156]	; (800195c <_Z11serialPrintv+0x4f8>)
 80018be:	4620      	mov	r0, r4
 80018c0:	f012 feb6 	bl	8014630 <siprintf>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ca:	4413      	add	r3, r2
 80018cc:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d0:	4a1a      	ldr	r2, [pc, #104]	; (800193c <_Z11serialPrintv+0x4d8>)
 80018d2:	4413      	add	r3, r2
 80018d4:	491a      	ldr	r1, [pc, #104]	; (8001940 <_Z11serialPrintv+0x4dc>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f012 feaa 	bl	8014630 <siprintf>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018e2:	4413      	add	r3, r2
 80018e4:	84fb      	strh	r3, [r7, #38]	; 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 80018e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_Z11serialPrintv+0x4d8>)
 80018ea:	189c      	adds	r4, r3, r2
 80018ec:	2104      	movs	r1, #4
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f006 fce7 	bl	80082c4 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4919      	ldr	r1, [pc, #100]	; (8001960 <_Z11serialPrintv+0x4fc>)
 80018fc:	4620      	mov	r0, r4
 80018fe:	f012 fe97 	bl	8014630 <siprintf>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001908:	4413      	add	r3, r2
 800190a:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800190c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <_Z11serialPrintv+0x4d8>)
 8001910:	4413      	add	r3, r2
 8001912:	490b      	ldr	r1, [pc, #44]	; (8001940 <_Z11serialPrintv+0x4dc>)
 8001914:	4618      	mov	r0, r3
 8001916:	f012 fe8b 	bl	8014630 <siprintf>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001920:	4413      	add	r3, r2
 8001922:	84fb      	strh	r3, [r7, #38]	; 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 8001924:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001926:	4619      	mov	r1, r3
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <_Z11serialPrintv+0x4d8>)
 800192a:	f011 f8f5 	bl	8012b18 <CDC_Transmit_FS>
}
 800192e:	bf00      	nop
 8001930:	372c      	adds	r7, #44	; 0x2c
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	08016900 	.word	0x08016900
 800193c:	20000670 	.word	0x20000670
 8001940:	080167e0 	.word	0x080167e0
 8001944:	20001424 	.word	0x20001424
 8001948:	461c4000 	.word	0x461c4000
 800194c:	0801691c 	.word	0x0801691c
 8001950:	08016924 	.word	0x08016924
 8001954:	08016930 	.word	0x08016930
 8001958:	0801693c 	.word	0x0801693c
 800195c:	08016940 	.word	0x08016940
 8001960:	08016958 	.word	0x08016958

08001964 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001980:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3318      	adds	r3, #24
 8001988:	2206      	movs	r2, #6
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f012 f8a6 	bl	8013ade <memcpy>
  }
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bdb0      	pop	{r4, r5, r7, pc}

0800199c <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019b8:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3318      	adds	r3, #24
 80019c0:	2208      	movs	r2, #8
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f012 f88a 	bl	8013ade <memcpy>
  }
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}

080019d4 <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b096      	sub	sp, #88	; 0x58
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

	can_init();
 80019dc:	f7ff fc5a 	bl	8001294 <_Z8can_initv>
	for(;;){
		osDelay(20);
 80019e0:	2014      	movs	r0, #20
 80019e2:	f00e fb3b 	bl	801005c <osDelay>

		error_conditions[0].value = data.current.value;
 80019e6:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 80019e8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80019ec:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 80019ee:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 80019f0:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 80019f2:	8b9b      	ldrh	r3, [r3, #28]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b6c      	ldr	r3, [pc, #432]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 80019f8:	8b5b      	ldrh	r3, [r3, #26]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a04:	4b69      	ldr	r3, [pc, #420]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 8001a06:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a18:	4b64      	ldr	r3, [pc, #400]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 8001a1a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 8001a1e:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a20:	8b5b      	ldrh	r3, [r3, #26]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 8001a2c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 8001a30:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a32:	8b9b      	ldrh	r3, [r3, #28]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3c:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 8001a3e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 8001a42:	4b59      	ldr	r3, [pc, #356]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a44:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a50:	4b56      	ldr	r3, [pc, #344]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 8001a52:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		error_conditions[6].value = data.current.value;
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a58:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001a5c:	4a53      	ldr	r2, [pc, #332]	; (8001bac <_Z23start_comm_err_functionPv+0x1d8>)
 8001a5e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

		PUTM_CAN::BMS_LV_main can_message_main{
			data.voltages.total_can,
 8001a62:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a64:	8b1b      	ldrh	r3, [r3, #24]
			data.soc.value_can,
			data.temperatures.average,
			(uint8_t)data.current.value,
			static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)
		};
 8001a66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			data.soc.value_can,
 8001a6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a6c:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
		};
 8001a70:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			data.temperatures.average,
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a76:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001a7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			(uint8_t)data.current.value,
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a80:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a88:	edc7 7a00 	vstr	s15, [r7]
 8001a8c:	783b      	ldrb	r3, [r7, #0]
 8001a8e:	b2db      	uxtb	r3, r3
		};
 8001a90:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001a96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
		};
 8001a9a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		PUTM_CAN::BMS_LV_temperature can_message_temp{
 8001a9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 8001aae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 8001ab8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001abe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 8001ac2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001ac8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 8001acc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 8001ad0:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 8001ad6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		if(serial_tick < HAL_GetTick())
 8001ada:	f003 fb27 	bl	800512c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <_Z23start_comm_err_functionPv+0x1dc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	bf8c      	ite	hi
 8001ae8:	2301      	movhi	r3, #1
 8001aea:	2300      	movls	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <_Z23start_comm_err_functionPv+0x130>
		{
			serialPrint();
 8001af2:	f7ff fcb7 	bl	8001464 <_Z11serialPrintv>
			serial_tick = HAL_GetTick() + 500; //0.5s
 8001af6:	f003 fb19 	bl	800512c <HAL_GetTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <_Z23start_comm_err_functionPv+0x1dc>)
 8001b02:	6013      	str	r3, [r2, #0]
		}

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_main>(can_message_main, PUTM_CAN::can_tx_header_BMS_LV_MAIN);
 8001b04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <_Z23start_comm_err_functionPv+0x1e0>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff28 	bl	8001964 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_temperature>(can_message_temp, PUTM_CAN::can_tx_header_BMS_LV_TEMPERATURE);
 8001b14:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <_Z23start_comm_err_functionPv+0x1e4>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff3c 	bl	800199c <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		if(can_main_tick < HAL_GetTick())
 8001b24:	f003 fb02 	bl	800512c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <_Z23start_comm_err_functionPv+0x1e8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	bf8c      	ite	hi
 8001b32:	2301      	movhi	r3, #1
 8001b34:	2300      	movls	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <_Z23start_comm_err_functionPv+0x186>
		{
			auto status_main = can_message_main_frame.send(hcan1);
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	491f      	ldr	r1, [pc, #124]	; (8001bc0 <_Z23start_comm_err_functionPv+0x1ec>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f8b8 	bl	8001cb8 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			can_main_tick = HAL_GetTick() + 40; //0.04s
 8001b4e:	f003 faed 	bl	800512c <HAL_GetTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	3328      	adds	r3, #40	; 0x28
 8001b56:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <_Z23start_comm_err_functionPv+0x1e8>)
 8001b58:	6013      	str	r3, [r2, #0]
		}
		if(can_main_tick < HAL_GetTick())
 8001b5a:	f003 fae7 	bl	800512c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <_Z23start_comm_err_functionPv+0x1e8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	bf8c      	ite	hi
 8001b68:	2301      	movhi	r3, #1
 8001b6a:	2300      	movls	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00e      	beq.n	8001b90 <_Z23start_comm_err_functionPv+0x1bc>
		{
			auto status_temp = can_message_temp_frame.send(hcan1);
 8001b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b76:	4912      	ldr	r1, [pc, #72]	; (8001bc0 <_Z23start_comm_err_functionPv+0x1ec>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f8b1 	bl	8001ce0 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			can_main_tick = HAL_GetTick() + 200; //0.2s
 8001b84:	f003 fad2 	bl	800512c <HAL_GetTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	33c8      	adds	r3, #200	; 0xc8
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <_Z23start_comm_err_functionPv+0x1e8>)
 8001b8e:	6013      	str	r3, [r2, #0]
		}
		if(data.charging.charger_plugged) //charger is unplugged
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <_Z23start_comm_err_functionPv+0x1d4>)
 8001b92:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f43f af22 	beq.w	80019e0 <_Z23start_comm_err_functionPv+0xc>
		{
		error_check();
 8001b9c:	f7ff fba4 	bl	80012e8 <_Z11error_checkv>

		error_execute();
 8001ba0:	f7ff fc0e 	bl	80013c0 <_Z13error_executev>
		}
	}
 8001ba4:	e71c      	b.n	80019e0 <_Z23start_comm_err_functionPv+0xc>
 8001ba6:	bf00      	nop
 8001ba8:	20001424 	.word	0x20001424
 8001bac:	20000590 	.word	0x20000590
 8001bb0:	20000588 	.word	0x20000588
 8001bb4:	08016a14 	.word	0x08016a14
 8001bb8:	08016a2c 	.word	0x08016a2c
 8001bbc:	2000058c 	.word	0x2000058c
 8001bc0:	20001a58 	.word	0x20001a58

08001bc4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f89b 	bl	8001d08 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE4dataEv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f88f 	bl	8001d08 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE4dataEv>
 8001bea:	4603      	mov	r3, r0
 8001bec:	337c      	adds	r3, #124	; 0x7c
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff faae 	bl	8001162 <_ZN3etl11vector_baseD1Ev>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZN3etl6vectorI15Error_conditionLj7EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	2207      	movs	r2, #7
 8001c20:	4619      	mov	r1, r3
 8001c22:	f000 f87e 	bl	8001d22 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f890 	bl	8001d4e <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN3etl6vectorI15Error_conditionLj7EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f897 	bl	8001d76 <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ffd3 	bl	8001bf6 <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001c5a:	b590      	push	{r4, r7, lr}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f000 f891 	bl	8001d8c <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	681c      	ldr	r4, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4619      	mov	r1, r3
 8001c74:	2004      	movs	r0, #4
 8001c76:	f7ff fa59 	bl	800112c <_ZnwjPv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	601c      	str	r4, [r3, #0]
      ++p_end;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
    }
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}

08001c90 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
    }
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f103 0218 	add.w	r2, r3, #24
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f005 f9dc 	bl	800708a <HAL_CAN_AddTxMessage>
 8001cd2:	4603      	mov	r3, r0
  }
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000141c 	.word	0x2000141c

08001ce0 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f103 0218 	add.w	r2, r3, #24
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f005 f9c8 	bl	800708a <HAL_CAN_AddTxMessage>
 8001cfa:	4603      	mov	r3, r0
  }
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20001420 	.word	0x20001420

08001d08 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj31EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f845 	bl	8001da2 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj31EE6_S_ptrERA31_KS2_>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa06 	bl	8001144 <_ZN3etl11vector_baseC1Ej>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	609a      	str	r2, [r3, #8]
    }
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f000 f829 	bl	8001db8 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
    }
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
      initialise();
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffe5 	bl	8001d4e <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001d94:	687b      	ldr	r3, [r7, #4]
  }
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj31EE6_S_ptrERA31_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f804 	bl	8001dd2 <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f804 	bl	8001dec <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001df6:	f7ff f991 	bl	800111c <_ZSt21is_constant_evaluatedv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f808 	bl	8001e18 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001e08:	e003      	b.n	8001e12 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f81b 	bl	8001e48 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d00a      	beq.n	8001e40 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f817 	bl	8001e5e <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f81e 	bl	8001e74 <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e7f0      	b.n	8001e22 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xa>
	}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f804 	bl	8001e8a <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
    }
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 80ac 	bne.w	800200a <_Z41__static_initialization_and_destruction_0ii+0x16a>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	f040 80a6 	bne.w	800200a <_Z41__static_initialization_and_destruction_0ii+0x16a>
};
 8001ebe:	4b56      	ldr	r3, [pc, #344]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8001ec0:	2206      	movs	r2, #6
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4a55      	ldr	r2, [pc, #340]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	4a55      	ldr	r2, [pc, #340]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8001eca:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001ecc:	4a55      	ldr	r2, [pc, #340]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001ece:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	751a      	strb	r2, [r3, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4a50      	ldr	r2, [pc, #320]	; (800202c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	4a50      	ldr	r2, [pc, #320]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8001ef0:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001ef2:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001ef4:	8b92      	ldrh	r2, [r2, #28]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4a4a      	ldr	r2, [pc, #296]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001efa:	8b52      	ldrh	r2, [r2, #26]
 8001efc:	1a8a      	subs	r2, r1, r2
 8001efe:	ee07 2a90 	vmov	s15, r2
 8001f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001f06:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	2202      	movs	r2, #2
 8001f12:	751a      	strb	r2, [r3, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
 8001f1c:	3320      	adds	r3, #32
 8001f1e:	2203      	movs	r2, #3
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	4a44      	ldr	r2, [pc, #272]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	4a44      	ldr	r2, [pc, #272]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8001f28:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001f2c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001f30:	ee07 2a90 	vmov	s15, r2
 8001f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f38:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	2203      	movs	r2, #3
 8001f44:	751a      	strb	r2, [r3, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	771a      	strb	r2, [r3, #28]
 8001f4e:	3320      	adds	r3, #32
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	4a38      	ldr	r2, [pc, #224]	; (800203c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8001f5c:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001f60:	8b52      	ldrh	r2, [r2, #26]
 8001f62:	ee07 2a90 	vmov	s15, r2
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f6a:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f72:	611a      	str	r2, [r3, #16]
 8001f74:	2204      	movs	r2, #4
 8001f76:	751a      	strb	r2, [r3, #20]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
 8001f80:	3320      	adds	r3, #32
 8001f82:	2202      	movs	r2, #2
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8001f8c:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001f8e:	4a25      	ldr	r2, [pc, #148]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001f90:	8b92      	ldrh	r2, [r2, #28]
 8001f92:	ee07 2a90 	vmov	s15, r2
 8001f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f9a:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	751a      	strb	r2, [r3, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
 8001fb0:	3320      	adds	r3, #32
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	4a23      	ldr	r2, [pc, #140]	; (8002048 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8001fbc:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001fc0:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001fc4:	ee07 2a90 	vmov	s15, r2
 8001fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001fcc:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	2206      	movs	r2, #6
 8001fd8:	751a      	strb	r2, [r3, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	771a      	strb	r2, [r3, #28]
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4a18      	ldr	r2, [pc, #96]	; (800204c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001fee:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001ff2:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	2207      	movs	r2, #7
 8002000:	751a      	strb	r2, [r3, #20]
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
 8002006:	2200      	movs	r2, #0
 8002008:	771a      	strb	r2, [r3, #28]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000590 	.word	0x20000590
 800201c:	be99999a 	.word	0xbe99999a
 8002020:	3e99999a 	.word	0x3e99999a
 8002024:	20001424 	.word	0x20001424
 8002028:	00124f80 	.word	0x00124f80
 800202c:	44fa0000 	.word	0x44fa0000
 8002030:	47435000 	.word	0x47435000
 8002034:	42400000 	.word	0x42400000
 8002038:	425c0000 	.word	0x425c0000
 800203c:	46ea6000 	.word	0x46ea6000
 8002040:	4724d800 	.word	0x4724d800
 8002044:	48f42400 	.word	0x48f42400
 8002048:	42f00000 	.word	0x42f00000
 800204c:	41a00000 	.word	0x41a00000
 8002050:	42c80000 	.word	0x42c80000

08002054 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	7993      	ldrb	r3, [r2, #6]
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1dd8      	adds	r0, r3, #7
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	331c      	adds	r3, #28
 8002070:	2203      	movs	r2, #3
 8002072:	4619      	mov	r1, r3
 8002074:	f011 fd33 	bl	8013ade <memcpy>
  }
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
    new_data = true;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	7993      	ldrb	r3, [r2, #6]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3307      	adds	r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	321c      	adds	r2, #28
 800209c:	8812      	ldrh	r2, [r2, #0]
 800209e:	b292      	uxth	r2, r2
 80020a0:	801a      	strh	r2, [r3, #0]
  }
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	7993      	ldrb	r3, [r2, #6]
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3307      	adds	r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	321c      	adds	r2, #28
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	601a      	str	r2, [r3, #0]
  }
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	7993      	ldrb	r3, [r2, #6]
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1dd8      	adds	r0, r3, #7
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	331c      	adds	r3, #28
 80020f6:	2206      	movs	r2, #6
 80020f8:	4619      	mov	r1, r3
 80020fa:	f011 fcf0 	bl	8013ade <memcpy>
  }
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	7993      	ldrb	r3, [r2, #6]
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1dd8      	adds	r0, r3, #7
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	331c      	adds	r3, #28
 8002122:	2206      	movs	r2, #6
 8002124:	4619      	mov	r1, r3
 8002126:	f011 fcda 	bl	8013ade <memcpy>
  }
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	7993      	ldrb	r3, [r2, #6]
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1dd8      	adds	r0, r3, #7
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	331c      	adds	r3, #28
 800214e:	2206      	movs	r2, #6
 8002150:	4619      	mov	r1, r3
 8002152:	f011 fcc4 	bl	8013ade <memcpy>
  }
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	7993      	ldrb	r3, [r2, #6]
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1dd8      	adds	r0, r3, #7
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	331c      	adds	r3, #28
 800217a:	2208      	movs	r2, #8
 800217c:	4619      	mov	r1, r3
 800217e:	f011 fcae 	bl	8013ade <memcpy>
  }
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	7993      	ldrb	r3, [r2, #6]
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3307      	adds	r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	321c      	adds	r2, #28
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	601a      	str	r2, [r3, #0]
  }
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	7993      	ldrb	r3, [r2, #6]
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	1dd8      	adds	r0, r3, #7
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	331c      	adds	r3, #28
 80021d2:	2208      	movs	r2, #8
 80021d4:	4619      	mov	r1, r3
 80021d6:	f011 fc82 	bl	8013ade <memcpy>
  }
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	7993      	ldrb	r3, [r2, #6]
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	1dd8      	adds	r0, r3, #7
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	331c      	adds	r3, #28
 80021fe:	2203      	movs	r2, #3
 8002200:	4619      	mov	r1, r3
 8002202:	f011 fc6c 	bl	8013ade <memcpy>
  }
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	7993      	ldrb	r3, [r2, #6]
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1dd8      	adds	r0, r3, #7
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	331c      	adds	r3, #28
 800222a:	2203      	movs	r2, #3
 800222c:	4619      	mov	r1, r3
 800222e:	f011 fc56 	bl	8013ade <memcpy>
  }
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	7993      	ldrb	r3, [r2, #6]
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3307      	adds	r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	321c      	adds	r2, #28
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	601a      	str	r2, [r3, #0]
  }
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	7993      	ldrb	r3, [r2, #6]
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1dd8      	adds	r0, r3, #7
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	331c      	adds	r3, #28
 8002282:	2208      	movs	r2, #8
 8002284:	4619      	mov	r1, r3
 8002286:	f011 fc2a 	bl	8013ade <memcpy>
  }
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	7993      	ldrb	r3, [r2, #6]
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1dd8      	adds	r0, r3, #7
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	331c      	adds	r3, #28
 80022ae:	2208      	movs	r2, #8
 80022b0:	4619      	mov	r1, r3
 80022b2:	f011 fc14 	bl	8013ade <memcpy>
  }
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	7993      	ldrb	r3, [r2, #6]
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	1dd8      	adds	r0, r3, #7
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	331c      	adds	r3, #28
 80022da:	2208      	movs	r2, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	f011 fbfe 	bl	8013ade <memcpy>
  }
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	7993      	ldrb	r3, [r2, #6]
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1dd8      	adds	r0, r3, #7
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	331c      	adds	r3, #28
 8002306:	2208      	movs	r2, #8
 8002308:	4619      	mov	r1, r3
 800230a:	f011 fbe8 	bl	8013ade <memcpy>
  }
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	7993      	ldrb	r3, [r2, #6]
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	1dd8      	adds	r0, r3, #7
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	331c      	adds	r3, #28
 8002332:	2203      	movs	r2, #3
 8002334:	4619      	mov	r1, r3
 8002336:	f011 fbd2 	bl	8013ade <memcpy>
  }
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	7993      	ldrb	r3, [r2, #6]
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3307      	adds	r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	321c      	adds	r2, #28
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	b292      	uxth	r2, r2
 8002362:	801a      	strh	r2, [r3, #0]
  }
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    new_data = true;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	7993      	ldrb	r3, [r2, #6]
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3307      	adds	r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	321c      	adds	r2, #28
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	701a      	strb	r2, [r3, #0]
  }
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	7993      	ldrb	r3, [r2, #6]
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3307      	adds	r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	321c      	adds	r2, #28
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	601a      	str	r2, [r3, #0]
  }
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7993      	ldrb	r3, [r2, #6]
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3307      	adds	r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	321c      	adds	r2, #28
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	701a      	strb	r2, [r3, #0]
  }
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	7993      	ldrb	r3, [r2, #6]
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3307      	adds	r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	321c      	adds	r2, #28
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	b292      	uxth	r2, r2
 8002414:	801a      	strh	r2, [r3, #0]
  }
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	7993      	ldrb	r3, [r2, #6]
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	1dd8      	adds	r0, r3, #7
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	331c      	adds	r3, #28
 800243e:	2208      	movs	r2, #8
 8002440:	4619      	mov	r1, r3
 8002442:	f011 fb4c 	bl	8013ade <memcpy>
  }
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	7993      	ldrb	r3, [r2, #6]
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3307      	adds	r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	321c      	adds	r2, #28
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	701a      	strb	r2, [r3, #0]
  }
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	7993      	ldrb	r3, [r2, #6]
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	1dd8      	adds	r0, r3, #7
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	331c      	adds	r3, #28
 8002496:	2208      	movs	r2, #8
 8002498:	4619      	mov	r1, r3
 800249a:	f011 fb20 	bl	8013ade <memcpy>
  }
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	7993      	ldrb	r3, [r2, #6]
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1dd8      	adds	r0, r3, #7
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	331c      	adds	r3, #28
 80024c2:	2206      	movs	r2, #6
 80024c4:	4619      	mov	r1, r3
 80024c6:	f011 fb0a 	bl	8013ade <memcpy>
  }
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	7993      	ldrb	r3, [r2, #6]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1dd8      	adds	r0, r3, #7
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	331c      	adds	r3, #28
 80024ee:	2208      	movs	r2, #8
 80024f0:	4619      	mov	r1, r3
 80024f2:	f011 faf4 	bl	8013ade <memcpy>
  }
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	7993      	ldrb	r3, [r2, #6]
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1dd8      	adds	r0, r3, #7
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	331c      	adds	r3, #28
 800251a:	2206      	movs	r2, #6
 800251c:	4619      	mov	r1, r3
 800251e:	f011 fade 	bl	8013ade <memcpy>
  }
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	7993      	ldrb	r3, [r2, #6]
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	1dd8      	adds	r0, r3, #7
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	331c      	adds	r3, #28
 8002546:	2206      	movs	r2, #6
 8002548:	4619      	mov	r1, r3
 800254a:	f011 fac8 	bl	8013ade <memcpy>
  }
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	7993      	ldrb	r3, [r2, #6]
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	1dd8      	adds	r0, r3, #7
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	331c      	adds	r3, #28
 8002572:	2206      	movs	r2, #6
 8002574:	4619      	mov	r1, r3
 8002576:	f011 fab2 	bl	8013ade <memcpy>
  }
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	7993      	ldrb	r3, [r2, #6]
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1dd8      	adds	r0, r3, #7
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	331c      	adds	r3, #28
 800259e:	2205      	movs	r2, #5
 80025a0:	4619      	mov	r1, r3
 80025a2:	f011 fa9c 	bl	8013ade <memcpy>
  }
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff fc72 	bl	8001ea0 <_Z41__static_initialization_and_destruction_0ii>
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ffe7 	bl	80025be <_ZN22Battery_characteristicC1Ev>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ffeb 	bl	80025e0 <_ZN7SoC_EKFC1Ev>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_ZN4DataC1Ev>:
	bool charging_state;
	bool discharge_activation;
	uint32_t discharge_tick_end;
};

struct Data{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ffe9 	bl	80025fa <_ZN15State_of_ChargeC1Ev>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264a:	4293      	cmp	r3, r2
 800264c:	d102      	bne.n	8002654 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800264e:	4803      	ldr	r0, [pc, #12]	; (800265c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002650:	f7ff ffe0 	bl	8002614 <_ZN4DataC1Ev>
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20001424 	.word	0x20001424

08002660 <_GLOBAL__sub_I_data>:
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
 8002664:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff ffe3 	bl	8002634 <_Z41__static_initialization_and_destruction_0ii>
 800266e:	bd80      	pop	{r7, pc}

08002670 <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2bff      	cmp	r3, #255	; 0xff
 800267e:	dc26      	bgt.n	80026ce <_Z16init_PEC15_Tablev+0x5e>
	{
		remainder = i << 7;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	b29b      	uxth	r3, r3
 8002684:	01db      	lsls	r3, r3, #7
 8002686:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002688:	2308      	movs	r3, #8
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	dd14      	ble.n	80026bc <_Z16init_PEC15_Tablev+0x4c>
		{
			if (remainder & 0x4000)
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <_Z16init_PEC15_Tablev+0x3e>
			{
				remainder = ((remainder << 1));
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <_Z16init_PEC15_Tablev+0x6c>)
 80026a4:	881a      	ldrh	r2, [r3, #0]
 80026a6:	89fb      	ldrh	r3, [r7, #14]
 80026a8:	4053      	eors	r3, r2
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	e002      	b.n	80026b4 <_Z16init_PEC15_Tablev+0x44>
			}
			else
			{
				remainder = ((remainder << 1));
 80026ae:	89fb      	ldrh	r3, [r7, #14]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	e7e7      	b.n	800268c <_Z16init_PEC15_Tablev+0x1c>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 80026bc:	4908      	ldr	r1, [pc, #32]	; (80026e0 <_Z16init_PEC15_Tablev+0x70>)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	89fa      	ldrh	r2, [r7, #14]
 80026c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	e7d5      	b.n	800267a <_Z16init_PEC15_Tablev+0xa>
	}
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	200001f4 	.word	0x200001f4
 80026e0:	200016c8 	.word	0x200016c8

080026e4 <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 80026ee:	2310      	movs	r3, #16
 80026f0:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	da1a      	bge.n	8002734 <_Z5pec15Pci+0x50>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80026fe:	8afb      	ldrh	r3, [r7, #22]
 8002700:	09db      	lsrs	r3, r3, #7
 8002702:	b29a      	uxth	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	440b      	add	r3, r1
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4053      	eors	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 8002716:	8afb      	ldrh	r3, [r7, #22]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	89fb      	ldrh	r3, [r7, #14]
 800271e:	490a      	ldr	r1, [pc, #40]	; (8002748 <_Z5pec15Pci+0x64>)
 8002720:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4053      	eors	r3, r2
 8002728:	b21b      	sxth	r3, r3
 800272a:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3301      	adds	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e7e0      	b.n	80026f6 <_Z5pec15Pci+0x12>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8002734:	8afb      	ldrh	r3, [r7, #22]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	b29b      	uxth	r3, r3
}
 800273a:	4618      	mov	r0, r3
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200016c8 	.word	0x200016c8

0800274c <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 8002752:	23ff      	movs	r3, #255	; 0xff
 8002754:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800275c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002760:	f005 fdc8 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 8002764:	1d39      	adds	r1, r7, #4
 8002766:	2301      	movs	r3, #1
 8002768:	2202      	movs	r2, #2
 800276a:	4807      	ldr	r0, [pc, #28]	; (8002788 <_Z11LTC_wake_upv+0x3c>)
 800276c:	f009 f961 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277a:	f005 fdbb 	bl	80082f4 <HAL_GPIO_WritePin>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20001ab4 	.word	0x20001ab4

0800278c <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 8002792:	f248 0301 	movw	r3, #32769	; 0x8001
 8002796:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80027a8:	463b      	mov	r3, r7
 80027aa:	2102      	movs	r1, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff99 	bl	80026e4 <_Z5pec15Pci>
 80027b2:	4603      	mov	r3, r0
 80027b4:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 80027b6:	89bb      	ldrh	r3, [r7, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 80027c0:	89bb      	ldrh	r3, [r7, #12]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <_Z18LTC_start_cell_adcv+0x11c>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <_Z18LTC_start_cell_adcv+0x11c>)
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <_Z18LTC_start_cell_adcv+0x11c>)
 80027d4:	789b      	ldrb	r3, [r3, #2]
 80027d6:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <_Z18LTC_start_cell_adcv+0x11c>)
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <_Z18LTC_start_cell_adcv+0x11c>)
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <_Z18LTC_start_cell_adcv+0x11c>)
 80027e6:	795b      	ldrb	r3, [r3, #5]
 80027e8:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 80027ea:	463b      	mov	r3, r7
 80027ec:	3304      	adds	r3, #4
 80027ee:	2106      	movs	r1, #6
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff77 	bl	80026e4 <_Z5pec15Pci>
 80027f6:	4603      	mov	r3, r0
 80027f8:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 80027fa:	89bb      	ldrh	r3, [r7, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002804:	89bb      	ldrh	r3, [r7, #12]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 800280a:	f7ff ff9f 	bl	800274c <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002818:	f005 fd6c 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 800281c:	4639      	mov	r1, r7
 800281e:	2314      	movs	r3, #20
 8002820:	220c      	movs	r2, #12
 8002822:	4822      	ldr	r0, [pc, #136]	; (80028ac <_Z18LTC_start_cell_adcv+0x120>)
 8002824:	f009 f905 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002828:	2201      	movs	r2, #1
 800282a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800282e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002832:	f005 fd5f 	bl	80082f4 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 8002836:	463b      	mov	r3, r7
 8002838:	220c      	movs	r2, #12
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f011 f976 	bl	8013b2e <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 8002842:	f44f 731c 	mov.w	r3, #624	; 0x270
 8002846:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29b      	uxth	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002858:	463b      	mov	r3, r7
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff41 	bl	80026e4 <_Z5pec15Pci>
 8002862:	4603      	mov	r3, r0
 8002864:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8002866:	89bb      	ldrh	r3, [r7, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	b29b      	uxth	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800287c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002880:	f005 fd38 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 8002884:	4639      	mov	r1, r7
 8002886:	2314      	movs	r3, #20
 8002888:	2204      	movs	r2, #4
 800288a:	4808      	ldr	r0, [pc, #32]	; (80028ac <_Z18LTC_start_cell_adcv+0x120>)
 800288c:	f009 f8d1 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289a:	f005 fd2b 	bl	80082f4 <HAL_GPIO_WritePin>
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200001f8 	.word	0x200001f8
 80028ac:	20001ab4 	.word	0x20001ab4

080028b0 <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0b8      	sub	sp, #224	; 0xe0
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 80028b8:	f248 0304 	movw	r3, #32772	; 0x8004
 80028bc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 80028c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028c4:	220c      	movs	r2, #12
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f011 f930 	bl	8013b2e <memset>
	tab[0] = (cmd>>8);
 80028ce:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80028dc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80028e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028ea:	2102      	movs	r1, #2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fef9 	bl	80026e4 <_Z5pec15Pci>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80028f8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002906:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 8002910:	f7ff ff1c 	bl	800274c <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800291a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291e:	f005 fce9 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002922:	f107 020c 	add.w	r2, r7, #12
 8002926:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800292a:	2314      	movs	r3, #20
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	230c      	movs	r3, #12
 8002930:	4849      	ldr	r0, [pc, #292]	; (8002a58 <_Z18LTC_get_values_adcPt+0x1a8>)
 8002932:	f009 f9ec 	bl	800bd0e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f005 fcd8 	bl	80082f4 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002944:	7c3b      	ldrb	r3, [r7, #16]
 8002946:	b21a      	sxth	r2, r3
 8002948:	7c7b      	ldrb	r3, [r7, #17]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	b21b      	sxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	b21b      	sxth	r3, r3
 8002952:	b29a      	uxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002958:	7cbb      	ldrb	r3, [r7, #18]
 800295a:	b21a      	sxth	r2, r3
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	b21b      	sxth	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b21a      	sxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3302      	adds	r3, #2
 800296a:	b292      	uxth	r2, r2
 800296c:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 800296e:	7d3b      	ldrb	r3, [r7, #20]
 8002970:	b21a      	sxth	r2, r3
 8002972:	7d7b      	ldrb	r3, [r7, #21]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	b21b      	sxth	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b21a      	sxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	b292      	uxth	r2, r2
 8002982:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 8002984:	f248 0306 	movw	r3, #32774	; 0x8006
 8002988:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 800298c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002990:	220c      	movs	r2, #12
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f011 f8ca 	bl	8013b2e <memset>
	tab[0] = (cmd>>8);
 800299a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80029a8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80029b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029b6:	2102      	movs	r1, #2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fe93 	bl	80026e4 <_Z5pec15Pci>
 80029be:	4603      	mov	r3, r0
 80029c0:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80029c4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 80029d2:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f005 fc85 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 80029ea:	f107 020c 	add.w	r2, r7, #12
 80029ee:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80029f2:	2314      	movs	r3, #20
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	230c      	movs	r3, #12
 80029f8:	4817      	ldr	r0, [pc, #92]	; (8002a58 <_Z18LTC_get_values_adcPt+0x1a8>)
 80029fa:	f009 f988 	bl	800bd0e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80029fe:	2201      	movs	r2, #1
 8002a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a08:	f005 fc74 	bl	80082f4 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002a0c:	7c3b      	ldrb	r3, [r7, #16]
 8002a0e:	b21a      	sxth	r2, r3
 8002a10:	7c7b      	ldrb	r3, [r7, #17]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	b292      	uxth	r2, r2
 8002a20:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002a22:	7cbb      	ldrb	r3, [r7, #18]
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b21a      	sxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3308      	adds	r3, #8
 8002a34:	b292      	uxth	r2, r2
 8002a36:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002a38:	7d3b      	ldrb	r3, [r7, #20]
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	7d7b      	ldrb	r3, [r7, #21]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	330a      	adds	r3, #10
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	801a      	strh	r2, [r3, #0]


}
 8002a4e:	bf00      	nop
 8002a50:	37d8      	adds	r7, #216	; 0xd8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20001ab4 	.word	0x20001ab4

08002a5c <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 8002a62:	f248 0328 	movw	r3, #32808	; 0x8028
 8002a66:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002a68:	463b      	mov	r3, r7
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f011 f85d 	bl	8013b2e <memset>
	tab[0] = (cmd>>8);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002a84:	463b      	mov	r3, r7
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fe2b 	bl	80026e4 <_Z5pec15Pci>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002a92:	88bb      	ldrh	r3, [r7, #4]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002a9c:	88bb      	ldrh	r3, [r7, #4]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002aa2:	f7ff fe53 	bl	800274c <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab0:	f005 fc20 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002ab4:	4639      	mov	r1, r7
 8002ab6:	2364      	movs	r3, #100	; 0x64
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <_Z8mute_disv+0x7c>)
 8002abc:	f008 ffb9 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f005 fc13 	bl	80082f4 <HAL_GPIO_WritePin>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20001ab4 	.word	0x20001ab4

08002adc <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 8002ae2:	f248 0329 	movw	r3, #32809	; 0x8029
 8002ae6:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2204      	movs	r2, #4
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f011 f81d 	bl	8013b2e <memset>
	tab[0] = (cmd>>8);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b04:	463b      	mov	r3, r7
 8002b06:	2102      	movs	r1, #2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fdeb 	bl	80026e4 <_Z5pec15Pci>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002b12:	88bb      	ldrh	r3, [r7, #4]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002b1c:	88bb      	ldrh	r3, [r7, #4]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002b22:	f7ff fe13 	bl	800274c <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b30:	f005 fbe0 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b34:	4639      	mov	r1, r7
 8002b36:	2364      	movs	r3, #100	; 0x64
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4807      	ldr	r0, [pc, #28]	; (8002b58 <_Z10unmute_disv+0x7c>)
 8002b3c:	f008 ff79 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b40:	2201      	movs	r2, #1
 8002b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4a:	f005 fbd3 	bl	80082f4 <HAL_GPIO_WritePin>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20001ab4 	.word	0x20001ab4

08002b5c <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002b66:	f7ff ffb9 	bl	8002adc <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002b6a:	f248 0314 	movw	r3, #32788	; 0x8014
 8002b6e:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002b70:	f107 0308 	add.w	r3, r7, #8
 8002b74:	220c      	movs	r2, #12
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f010 ffd8 	bl	8013b2e <memset>
	tab[0] = (cmd>>8);
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fda5 	bl	80026e4 <_Z5pec15Pci>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002b9e:	8abb      	ldrh	r3, [r7, #20]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002ba8:	8abb      	ldrh	r3, [r7, #20]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b25a      	sxtb	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3302      	adds	r3, #2
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	3303      	adds	r3, #3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	3304      	adds	r3, #4
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b25a      	sxtb	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3305      	adds	r3, #5
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2106      	movs	r1, #6
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fd68 	bl	80026e4 <_Z5pec15Pci>
 8002c14:	4603      	mov	r3, r0
 8002c16:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002c18:	8abb      	ldrh	r3, [r7, #20]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002c22:	8abb      	ldrh	r3, [r7, #20]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002c28:	f7ff fd90 	bl	800274c <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c36:	f005 fb5d 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002c3a:	f107 0108 	add.w	r1, r7, #8
 8002c3e:	2364      	movs	r3, #100	; 0x64
 8002c40:	220c      	movs	r2, #12
 8002c42:	483c      	ldr	r0, [pc, #240]	; (8002d34 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002c44:	f008 fef5 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c52:	f005 fb4f 	bl	80082f4 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002c56:	f248 0301 	movw	r3, #32769	; 0x8001
 8002c5a:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002c5c:	f107 0308 	add.w	r3, r7, #8
 8002c60:	220c      	movs	r2, #12
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f010 ff62 	bl	8013b2e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002c74:	8afb      	ldrh	r3, [r7, #22]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fd2f 	bl	80026e4 <_Z5pec15Pci>
 8002c86:	4603      	mov	r3, r0
 8002c88:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002c8a:	8abb      	ldrh	r3, [r7, #20]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002c94:	8abb      	ldrh	r3, [r7, #20]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002ca8:	789b      	ldrb	r3, [r3, #2]
 8002caa:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cae:	78db      	ldrb	r3, [r3, #3]
 8002cb0:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b06      	cmp	r3, #6
 8002cb6:	dc0c      	bgt.n	8002cd2 <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	b25a      	sxtb	r2, r3
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cd0:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cda:	795b      	ldrb	r3, [r3, #5]
 8002cdc:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002cde:	f107 0308 	add.w	r3, r7, #8
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	2106      	movs	r1, #6
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fcfc 	bl	80026e4 <_Z5pec15Pci>
 8002cec:	4603      	mov	r3, r0
 8002cee:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002cf0:	8abb      	ldrh	r3, [r7, #20]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002cfa:	8abb      	ldrh	r3, [r7, #20]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0a:	f005 faf3 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002d0e:	f107 0108 	add.w	r1, r7, #8
 8002d12:	2364      	movs	r3, #100	; 0x64
 8002d14:	220c      	movs	r2, #12
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002d18:	f008 fe8b 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d26:	f005 fae5 	bl	80082f4 <HAL_GPIO_WritePin>


}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20001ab4 	.word	0x20001ab4
 8002d38:	200001f8 	.word	0x200001f8

08002d3c <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b09a      	sub	sp, #104	; 0x68
 8002d40:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002d42:	f248 0314 	movw	r3, #32788	; 0x8014
 8002d46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f010 feec 	bl	8013b2e <memset>
	tab[0] = (cmd>>8);
 8002d56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002d62:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fcb8 	bl	80026e4 <_Z5pec15Pci>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002d7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002d86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002da6:	463b      	mov	r3, r7
 8002da8:	3304      	adds	r3, #4
 8002daa:	2106      	movs	r1, #6
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fc99 	bl	80026e4 <_Z5pec15Pci>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002db8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002dc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002dcc:	f7ff fcbe 	bl	800274c <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dda:	f005 fa8b 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002dde:	4639      	mov	r1, r7
 8002de0:	2364      	movs	r3, #100	; 0x64
 8002de2:	220c      	movs	r2, #12
 8002de4:	4838      	ldr	r0, [pc, #224]	; (8002ec8 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002de6:	f008 fe24 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df4:	f005 fa7e 	bl	80082f4 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002df8:	f248 0301 	movw	r3, #32769	; 0x8001
 8002dfc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002e00:	463b      	mov	r3, r7
 8002e02:	220c      	movs	r2, #12
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f010 fe91 	bl	8013b2e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002e0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002e18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002e20:	463b      	mov	r3, r7
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fc5d 	bl	80026e4 <_Z5pec15Pci>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002e30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002e3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e58:	789b      	ldrb	r3, [r3, #2]
 8002e5a:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e5e:	78db      	ldrb	r3, [r3, #3]
 8002e60:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e64:	791b      	ldrb	r3, [r3, #4]
 8002e66:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <_Z22LTC_turn_off_dischargev+0x190>)
 8002e6a:	795b      	ldrb	r3, [r3, #5]
 8002e6c:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002e6e:	463b      	mov	r3, r7
 8002e70:	3304      	adds	r3, #4
 8002e72:	2106      	movs	r1, #6
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fc35 	bl	80026e4 <_Z5pec15Pci>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002e80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002e8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9e:	f005 fa29 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	2364      	movs	r3, #100	; 0x64
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002eaa:	f008 fdc2 	bl	800ba32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb8:	f005 fa1c 	bl	80082f4 <HAL_GPIO_WritePin>

	mute_dis();
 8002ebc:	f7ff fdce 	bl	8002a5c <_Z8mute_disv>
}
 8002ec0:	bf00      	nop
 8002ec2:	3768      	adds	r7, #104	; 0x68
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20001ab4 	.word	0x20001ab4
 8002ecc:	200001f8 	.word	0x200001f8

08002ed0 <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b1b      	cmp	r3, #27
 8002eea:	d862      	bhi.n	8002fb2 <_Z24temperature_calculationst+0xe2>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002eec:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <_Z24temperature_calculationst+0xf4>)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d356      	bcc.n	8002faa <_Z24temperature_calculationst+0xda>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 8002efc:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <_Z24temperature_calculationst+0xf4>)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0e:	ee17 0a90 	vmov	r0, s15
 8002f12:	f7fd fb31 	bl	8000578 <__aeabi_f2d>
 8002f16:	4604      	mov	r4, r0
 8002f18:	460d      	mov	r5, r1
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <_Z24temperature_calculationst+0xf4>)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f38:	ee17 0a90 	vmov	r0, s15
 8002f3c:	f7fd fb1c 	bl	8000578 <__aeabi_f2d>
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <_Z24temperature_calculationst+0xf8>)
 8002f46:	f7fd fb6f 	bl	8000628 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <_Z24temperature_calculationst+0xf4>)
 8002f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <_Z24temperature_calculationst+0xf4>)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f78:	ee17 0a90 	vmov	r0, s15
 8002f7c:	f7fd fafc 	bl	8000578 <__aeabi_f2d>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4640      	mov	r0, r8
 8002f86:	4649      	mov	r1, r9
 8002f88:	f7fd fc78 	bl	800087c <__aeabi_ddiv>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f990 	bl	80002b8 <__aeabi_dsub>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fd fe1a 	bl	8000bd8 <__aeabi_d2f>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]
			break;
 8002fa8:	e003      	b.n	8002fb2 <_Z24temperature_calculationst+0xe2>
	for(unsigned int i = 1; i < 28; i++)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	e799      	b.n	8002ee6 <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	ee07 3a90 	vmov	s15, r3
}
 8002fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fc4:	08016bb8 	.word	0x08016bb8
 8002fc8:	40140000 	.word	0x40140000

08002fcc <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d829      	bhi.n	8003038 <_Z16get_temperaturesv+0x6c>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[7-i]);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 8002fec:	3314      	adds	r3, #20
 8002fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff6b 	bl	8002ed0 <_Z24temperature_calculationst>
 8002ffa:	eef0 7a40 	vmov.f32	s15, s0
 8002ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003002:	ee17 3a90 	vmov	r3, s15
 8003006:	b29b      	uxth	r3, r3
 8003008:	b2d9      	uxtb	r1, r3
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	3320      	adds	r3, #32
 8003012:	460a      	mov	r2, r1
 8003014:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 8003018:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	440b      	add	r3, r1
 8003022:	3320      	adds	r3, #32
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 800302c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3301      	adds	r3, #1
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	e7d2      	b.n	8002fde <_Z16get_temperaturesv+0x12>
	}
	data.temperatures.average = data.temperatures.average / 6;
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 800303a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800303e:	4a07      	ldr	r2, [pc, #28]	; (800305c <_Z16get_temperaturesv+0x90>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <_Z16get_temperaturesv+0x8c>)
 800304a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20001424 	.word	0x20001424
 800305c:	aaaaaaab 	.word	0xaaaaaaab

08003060 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 800306c:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 8003074:	839a      	strh	r2, [r3, #28]
	for(unsigned int i = 1; i < NUMBER_OF_CELLS; i++)
 8003076:	2301      	movs	r3, #1
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d823      	bhi.n	80030c8 <_Z15min_max_voltagev+0x68>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 8003082:	8b5a      	ldrh	r2, [r3, #26]
 8003084:	4913      	ldr	r1, [pc, #76]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800308c:	429a      	cmp	r2, r3
 800308e:	d905      	bls.n	800309c <_Z15min_max_voltagev+0x3c>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 8003090:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 800309a:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 800309e:	8b9a      	ldrh	r2, [r3, #28]
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d209      	bcs.n	80030c0 <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 80030ac:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 80030b6:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <_Z15min_max_voltagev+0x74>)
 80030be:	83da      	strh	r2, [r3, #30]
	for(unsigned int i = 1; i < NUMBER_OF_CELLS; i++)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3301      	adds	r3, #1
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	e7d8      	b.n	800307a <_Z15min_max_voltagev+0x1a>
		}
	}
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20001424 	.word	0x20001424

080030d8 <_Z19min_max_temperaturev>:


void min_max_temperature(){
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <_Z19min_max_temperaturev+0x84>)
 80030e0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <_Z19min_max_temperaturev+0x84>)
 80030e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <_Z19min_max_temperaturev+0x84>)
 80030ec:	f893 2020 	ldrb.w	r2, [r3, #32]
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <_Z19min_max_temperaturev+0x84>)
 80030f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 80030f6:	2301      	movs	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d827      	bhi.n	8003150 <_Z19min_max_temperaturev+0x78>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <_Z19min_max_temperaturev+0x84>)
 8003102:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003106:	4915      	ldr	r1, [pc, #84]	; (800315c <_Z19min_max_temperaturev+0x84>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	440b      	add	r3, r1
 800310c:	3320      	adds	r3, #32
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d907      	bls.n	8003124 <_Z19min_max_temperaturev+0x4c>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <_Z19min_max_temperaturev+0x84>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	3320      	adds	r3, #32
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <_Z19min_max_temperaturev+0x84>)
 8003120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <_Z19min_max_temperaturev+0x84>)
 8003126:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800312a:	490c      	ldr	r1, [pc, #48]	; (800315c <_Z19min_max_temperaturev+0x84>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	440b      	add	r3, r1
 8003130:	3320      	adds	r3, #32
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_Z19min_max_temperaturev+0x70>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 8003138:	4a08      	ldr	r2, [pc, #32]	; (800315c <_Z19min_max_temperaturev+0x84>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3320      	adds	r3, #32
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <_Z19min_max_temperaturev+0x84>)
 8003144:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e7d4      	b.n	80030fa <_Z19min_max_temperaturev+0x22>
		}
	}
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	20001424 	.word	0x20001424

08003160 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b05      	cmp	r3, #5
 8003174:	dc1c      	bgt.n	80031b0 <_Z16voltage_can_calcv+0x50>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4915      	ldr	r1, [pc, #84]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003182:	4413      	add	r3, r2
 8003184:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 8003186:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <_Z16voltage_can_calcv+0x74>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2d9      	uxtb	r1, r3
 800319c:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	330c      	adds	r3, #12
 80031a4:	460a      	mov	r2, r1
 80031a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3301      	adds	r3, #1
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	e7df      	b.n	8003170 <_Z16voltage_can_calcv+0x10>
	}

	data.voltages.total_can = data.voltages.total / 100;
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <_Z16voltage_can_calcv+0x78>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <_Z16voltage_can_calcv+0x70>)
 80031c0:	831a      	strh	r2, [r3, #24]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20001424 	.word	0x20001424
 80031d4:	10624dd3 	.word	0x10624dd3
 80031d8:	51eb851f 	.word	0x51eb851f

080031dc <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 80031e4:	f7ff fa44 	bl	8002670 <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 80031e8:	2001      	movs	r0, #1
 80031ea:	f00c ff37 	bl	801005c <osDelay>
		LTC_start_cell_adc();
 80031ee:	f7ff facd 	bl	800278c <_Z18LTC_start_cell_adcv>
		osDelay(30);
 80031f2:	201e      	movs	r0, #30
 80031f4:	f00c ff32 	bl	801005c <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 80031f8:	4805      	ldr	r0, [pc, #20]	; (8003210 <_Z18start_ltc_functionPv+0x34>)
 80031fa:	f7ff fb59 	bl	80028b0 <_Z18LTC_get_values_adcPt>

		voltage_can_calc();
 80031fe:	f7ff ffaf 	bl	8003160 <_Z16voltage_can_calcv>

		min_max_voltage();
 8003202:	f7ff ff2d 	bl	8003060 <_Z15min_max_voltagev>

		get_temperatures();
 8003206:	f7ff fee1 	bl	8002fcc <_Z16get_temperaturesv>

		min_max_temperature();
 800320a:	f7ff ff65 	bl	80030d8 <_Z19min_max_temperaturev>
		osDelay(1);
 800320e:	e7eb      	b.n	80031e8 <_Z18start_ltc_functionPv+0xc>
 8003210:	20001424 	.word	0x20001424

08003214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003218:	f001 ff5b 	bl	80050d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800321c:	f000 f892 	bl	8003344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003220:	f000 fcac 	bl	8003b7c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003224:	f000 fc6c 	bl	8003b00 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8003228:	f000 f8f0 	bl	800340c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800322c:	f000 fa0c 	bl	8003648 <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 8003230:	f000 fa78 	bl	8003724 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8003234:	f000 fab2 	bl	800379c <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8003238:	f000 fb20 	bl	800387c <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 800323c:	f000 fb60 	bl	8003900 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8003240:	f000 fbbc 	bl	80039bc <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8003244:	f000 fbfa 	bl	8003a3c <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003248:	f00c fe2c 	bl	800fea4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <main+0xd8>)
 800324e:	2100      	movs	r1, #0
 8003250:	4827      	ldr	r0, [pc, #156]	; (80032f0 <main+0xdc>)
 8003252:	f00c fe71 	bl	800ff38 <osThreadNew>
 8003256:	4603      	mov	r3, r0
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <main+0xe0>)
 800325a:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <main+0xe4>)
 800325e:	2100      	movs	r1, #0
 8003260:	4826      	ldr	r0, [pc, #152]	; (80032fc <main+0xe8>)
 8003262:	f00c fe69 	bl	800ff38 <osThreadNew>
 8003266:	4603      	mov	r3, r0
 8003268:	4a25      	ldr	r2, [pc, #148]	; (8003300 <main+0xec>)
 800326a:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <main+0xf0>)
 800326e:	2100      	movs	r1, #0
 8003270:	4825      	ldr	r0, [pc, #148]	; (8003308 <main+0xf4>)
 8003272:	f00c fe61 	bl	800ff38 <osThreadNew>
 8003276:	4603      	mov	r3, r0
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <main+0xf8>)
 800327a:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 800327c:	4a24      	ldr	r2, [pc, #144]	; (8003310 <main+0xfc>)
 800327e:	2100      	movs	r1, #0
 8003280:	4824      	ldr	r0, [pc, #144]	; (8003314 <main+0x100>)
 8003282:	f00c fe59 	bl	800ff38 <osThreadNew>
 8003286:	4603      	mov	r3, r0
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <main+0x104>)
 800328a:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <main+0x108>)
 800328e:	2100      	movs	r1, #0
 8003290:	4823      	ldr	r0, [pc, #140]	; (8003320 <main+0x10c>)
 8003292:	f00c fe51 	bl	800ff38 <osThreadNew>
 8003296:	4603      	mov	r3, r0
 8003298:	4a22      	ldr	r2, [pc, #136]	; (8003324 <main+0x110>)
 800329a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  HAL_Delay(2000);
 800329c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032a0:	f001 ff50 	bl	8005144 <HAL_Delay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 80032a4:	2201      	movs	r2, #1
 80032a6:	2104      	movs	r1, #4
 80032a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ac:	f005 f822 	bl	80082f4 <HAL_GPIO_WritePin>
  //canInit();
  HAL_TIM_Base_Start_IT(&htim3);
 80032b0:	481d      	ldr	r0, [pc, #116]	; (8003328 <main+0x114>)
 80032b2:	f009 f963 	bl	800c57c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80032b6:	481d      	ldr	r0, [pc, #116]	; (800332c <main+0x118>)
 80032b8:	f009 f8f8 	bl	800c4ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80032bc:	481c      	ldr	r0, [pc, #112]	; (8003330 <main+0x11c>)
 80032be:	f009 f8f5 	bl	800c4ac <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80032c2:	217f      	movs	r1, #127	; 0x7f
 80032c4:	481b      	ldr	r0, [pc, #108]	; (8003334 <main+0x120>)
 80032c6:	f003 fba1 	bl	8006a0c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80032ca:	217f      	movs	r1, #127	; 0x7f
 80032cc:	481a      	ldr	r0, [pc, #104]	; (8003338 <main+0x124>)
 80032ce:	f003 fb9d 	bl	8006a0c <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 80032d2:	2208      	movs	r2, #8
 80032d4:	4919      	ldr	r1, [pc, #100]	; (800333c <main+0x128>)
 80032d6:	4817      	ldr	r0, [pc, #92]	; (8003334 <main+0x120>)
 80032d8:	f002 fada 	bl	8005890 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 80032dc:	2264      	movs	r2, #100	; 0x64
 80032de:	4918      	ldr	r1, [pc, #96]	; (8003340 <main+0x12c>)
 80032e0:	4815      	ldr	r0, [pc, #84]	; (8003338 <main+0x124>)
 80032e2:	f002 fad5 	bl	8005890 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80032e6:	f00c fe01 	bl	800feec <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 80032ea:	e7fe      	b.n	80032ea <main+0xd6>
 80032ec:	08016c88 	.word	0x08016c88
 80032f0:	08003ca1 	.word	0x08003ca1
 80032f4:	20001bfc 	.word	0x20001bfc
 80032f8:	08016cac 	.word	0x08016cac
 80032fc:	080031dd 	.word	0x080031dd
 8003300:	20001c00 	.word	0x20001c00
 8003304:	08016cd0 	.word	0x08016cd0
 8003308:	0800464d 	.word	0x0800464d
 800330c:	200024c0 	.word	0x200024c0
 8003310:	08016cf4 	.word	0x08016cf4
 8003314:	080010b1 	.word	0x080010b1
 8003318:	20002d80 	.word	0x20002d80
 800331c:	08016d18 	.word	0x08016d18
 8003320:	080019d5 	.word	0x080019d5
 8003324:	20003640 	.word	0x20003640
 8003328:	20001b18 	.word	0x20001b18
 800332c:	20001b64 	.word	0x20001b64
 8003330:	20001bb0 	.word	0x20001bb0
 8003334:	200018c8 	.word	0x200018c8
 8003338:	20001930 	.word	0x20001930
 800333c:	2000144c 	.word	0x2000144c
 8003340:	2000145c 	.word	0x2000145c

08003344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b098      	sub	sp, #96	; 0x60
 8003348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800334a:	f107 0318 	add.w	r3, r7, #24
 800334e:	2248      	movs	r2, #72	; 0x48
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f010 fbeb 	bl	8013b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003366:	f44f 7000 	mov.w	r0, #512	; 0x200
 800336a:	f006 f9d3 	bl	8009714 <HAL_PWREx_ControlVoltageScaling>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <SystemClock_Config+0x3e>
  {
    Error_Handler();
 800337e:	f000 fcab 	bl	8003cd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8003382:	2329      	movs	r3, #41	; 0x29
 8003384:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800338a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800338c:	2301      	movs	r3, #1
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003390:	2301      	movs	r3, #1
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003394:	2302      	movs	r3, #2
 8003396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003398:	2303      	movs	r3, #3
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800339c:	2302      	movs	r3, #2
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80033a0:	2310      	movs	r3, #16
 80033a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033a4:	2302      	movs	r3, #2
 80033a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033a8:	2302      	movs	r3, #2
 80033aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033ac:	2302      	movs	r3, #2
 80033ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b0:	f107 0318 	add.w	r3, r7, #24
 80033b4:	4618      	mov	r0, r3
 80033b6:	f006 fab7 	bl	8009928 <HAL_RCC_OscConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80033ca:	f000 fc85 	bl	8003cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ce:	230f      	movs	r3, #15
 80033d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033d2:	2303      	movs	r3, #3
 80033d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	2103      	movs	r1, #3
 80033e8:	4618      	mov	r0, r3
 80033ea:	f006 ff19 	bl	800a220 <HAL_RCC_ClockConfig>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80033fe:	f000 fc6b 	bl	8003cd8 <Error_Handler>
  }
}
 8003402:	bf00      	nop
 8003404:	3760      	adds	r7, #96	; 0x60
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003412:	f107 031c 	add.w	r3, r7, #28
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
 800342c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800342e:	4b7c      	ldr	r3, [pc, #496]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003430:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <_ZL12MX_ADC1_Initv+0x218>)
 8003432:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003434:	4b7a      	ldr	r3, [pc, #488]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003436:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800343a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800343c:	4b78      	ldr	r3, [pc, #480]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003442:	4b77      	ldr	r3, [pc, #476]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003448:	4b75      	ldr	r3, [pc, #468]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 800344a:	2201      	movs	r2, #1
 800344c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800344e:	4b74      	ldr	r3, [pc, #464]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003450:	2204      	movs	r2, #4
 8003452:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003454:	4b72      	ldr	r3, [pc, #456]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003456:	2200      	movs	r2, #0
 8003458:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800345a:	4b71      	ldr	r3, [pc, #452]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 800345c:	2201      	movs	r2, #1
 800345e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8003460:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003462:	2208      	movs	r2, #8
 8003464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003466:	4b6e      	ldr	r3, [pc, #440]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003474:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003476:	2200      	movs	r2, #0
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800347a:	4b69      	ldr	r3, [pc, #420]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003482:	4b67      	ldr	r3, [pc, #412]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003488:	4b65      	ldr	r3, [pc, #404]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003490:	4863      	ldr	r0, [pc, #396]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003492:	f002 f8ab 	bl	80055ec <HAL_ADC_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 80034a6:	f000 fc17 	bl	8003cd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	4619      	mov	r1, r3
 80034b4:	485a      	ldr	r0, [pc, #360]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 80034b6:	f003 fb3b 	bl	8006b30 <HAL_ADCEx_MultiModeConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80034ca:	f000 fc05 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80034ce:	4b56      	ldr	r3, [pc, #344]	; (8003628 <_ZL12MX_ADC1_Initv+0x21c>)
 80034d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034d2:	2306      	movs	r3, #6
 80034d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80034d6:	2306      	movs	r3, #6
 80034d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034da:	237f      	movs	r3, #127	; 0x7f
 80034dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034de:	2304      	movs	r3, #4
 80034e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	484d      	ldr	r0, [pc, #308]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 80034ec:	f002 fcc6 	bl	8005e7c <HAL_ADC_ConfigChannel>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8003500:	f000 fbea 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <_ZL12MX_ADC1_Initv+0x220>)
 8003506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003508:	230c      	movs	r3, #12
 800350a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4843      	ldr	r0, [pc, #268]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003512:	f002 fcb3 	bl	8005e7c <HAL_ADC_ConfigChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 8003526:	f000 fbd7 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <_ZL12MX_ADC1_Initv+0x224>)
 800352c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800352e:	2312      	movs	r3, #18
 8003530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	4619      	mov	r1, r3
 8003536:	483a      	ldr	r0, [pc, #232]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003538:	f002 fca0 	bl	8005e7c <HAL_ADC_ConfigChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 800354c:	f000 fbc4 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <_ZL12MX_ADC1_Initv+0x228>)
 8003552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003554:	2318      	movs	r3, #24
 8003556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4830      	ldr	r0, [pc, #192]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 800355e:	f002 fc8d 	bl	8005e7c <HAL_ADC_ConfigChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 8003572:	f000 fbb1 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <_ZL12MX_ADC1_Initv+0x22c>)
 8003578:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800357a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800357e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4826      	ldr	r0, [pc, #152]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 8003586:	f002 fc79 	bl	8005e7c <HAL_ADC_ConfigChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 800359a:	f000 fb9d 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <_ZL12MX_ADC1_Initv+0x230>)
 80035a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80035a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80035a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	481c      	ldr	r0, [pc, #112]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 80035ae:	f002 fc65 	bl	8005e7c <HAL_ADC_ConfigChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 80035c2:	f000 fb89 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <_ZL12MX_ADC1_Initv+0x234>)
 80035c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80035ca:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80035ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4812      	ldr	r0, [pc, #72]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 80035d6:	f002 fc51 	bl	8005e7c <HAL_ADC_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 80035ea:	f000 fb75 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <_ZL12MX_ADC1_Initv+0x238>)
 80035f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80035f2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80035f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4808      	ldr	r0, [pc, #32]	; (8003620 <_ZL12MX_ADC1_Initv+0x214>)
 80035fe:	f002 fc3d 	bl	8005e7c <HAL_ADC_ConfigChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 8003612:	f000 fb61 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	3728      	adds	r7, #40	; 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	200018c8 	.word	0x200018c8
 8003624:	50040000 	.word	0x50040000
 8003628:	21800100 	.word	0x21800100
 800362c:	25b00200 	.word	0x25b00200
 8003630:	2a000400 	.word	0x2a000400
 8003634:	2e300800 	.word	0x2e300800
 8003638:	32601000 	.word	0x32601000
 800363c:	36902000 	.word	0x36902000
 8003640:	3ac04000 	.word	0x3ac04000
 8003644:	3ef08000 	.word	0x3ef08000

08003648 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800364e:	463b      	mov	r3, r7
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
 800365c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003660:	4a2e      	ldr	r2, [pc, #184]	; (800371c <_ZL12MX_ADC2_Initv+0xd4>)
 8003662:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003666:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800366a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003680:	2204      	movs	r2, #4
 8003682:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003686:	2200      	movs	r2, #0
 8003688:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800368a:	4b23      	ldr	r3, [pc, #140]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 800368c:	2201      	movs	r2, #1
 800368e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003692:	2201      	movs	r2, #1
 8003694:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036c0:	4815      	ldr	r0, [pc, #84]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036c2:	f001 ff93 	bl	80055ec <HAL_ADC_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 80036d6:	f000 faff 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <_ZL12MX_ADC2_Initv+0xd8>)
 80036dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036de:	2306      	movs	r3, #6
 80036e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80036e2:	2306      	movs	r3, #6
 80036e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036e6:	237f      	movs	r3, #127	; 0x7f
 80036e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036f2:	463b      	mov	r3, r7
 80036f4:	4619      	mov	r1, r3
 80036f6:	4808      	ldr	r0, [pc, #32]	; (8003718 <_ZL12MX_ADC2_Initv+0xd0>)
 80036f8:	f002 fbc0 	bl	8005e7c <HAL_ADC_ConfigChannel>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 800370c:	f000 fae4 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20001930 	.word	0x20001930
 800371c:	50040100 	.word	0x50040100
 8003720:	43210000 	.word	0x43210000

08003724 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 800372a:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <_ZL12MX_CAN1_Initv+0x74>)
 800372c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003730:	2202      	movs	r2, #2
 8003732:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 800373c:	2200      	movs	r2, #0
 800373e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003742:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003746:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 800374a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800374e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003752:	2200      	movs	r2, #0
 8003754:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003758:	2200      	movs	r2, #0
 800375a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 800375e:	2200      	movs	r2, #0
 8003760:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003764:	2200      	movs	r2, #0
 8003766:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 800376a:	2200      	movs	r2, #0
 800376c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003770:	2200      	movs	r2, #0
 8003772:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003774:	4807      	ldr	r0, [pc, #28]	; (8003794 <_ZL12MX_CAN1_Initv+0x70>)
 8003776:	f003 fa7f 	bl	8006c78 <HAL_CAN_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 800378a:	f000 faa5 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20001a58 	.word	0x20001a58
 8003798:	40006400 	.word	0x40006400

0800379c <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037b0:	2300      	movs	r3, #0
 80037b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037b4:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <_ZL11MX_RTC_Initv+0xdc>)
 80037b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037c2:	227f      	movs	r2, #127	; 0x7f
 80037c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80037c6:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037c8:	22ff      	movs	r2, #255	; 0xff
 80037ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037d8:	4b26      	ldr	r3, [pc, #152]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037de:	4b25      	ldr	r3, [pc, #148]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037e4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80037e6:	4b23      	ldr	r3, [pc, #140]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037ec:	4821      	ldr	r0, [pc, #132]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 80037ee:	f007 fd41 	bl	800b274 <HAL_RTC_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8003802:	f000 fa69 	bl	8003cd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003806:	2300      	movs	r3, #0
 8003808:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800380a:	2300      	movs	r3, #0
 800380c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800380e:	2300      	movs	r3, #0
 8003810:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	2201      	movs	r2, #1
 800381e:	4619      	mov	r1, r3
 8003820:	4814      	ldr	r0, [pc, #80]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 8003822:	f007 fdb7 	bl	800b394 <HAL_RTC_SetTime>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8003836:	f000 fa4f 	bl	8003cd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800383a:	2301      	movs	r3, #1
 800383c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800383e:	2301      	movs	r3, #1
 8003840:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003842:	2301      	movs	r3, #1
 8003844:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003846:	2300      	movs	r3, #0
 8003848:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800384a:	463b      	mov	r3, r7
 800384c:	2201      	movs	r2, #1
 800384e:	4619      	mov	r1, r3
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <_ZL11MX_RTC_Initv+0xd8>)
 8003852:	f007 fea1 	bl	800b598 <HAL_RTC_SetDate>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 8003866:	f000 fa37 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20001a80 	.word	0x20001a80
 8003878:	40002800 	.word	0x40002800

0800387c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <_ZL12MX_SPI1_Initv+0x80>)
 8003884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800388c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800389a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 800389e:	2202      	movs	r2, #2
 80038a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038b2:	2228      	movs	r2, #40	; 0x28
 80038b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ca:	2207      	movs	r2, #7
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038da:	4807      	ldr	r0, [pc, #28]	; (80038f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80038dc:	f008 f806 	bl	800b8ec <HAL_SPI_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80038f0:	f000 f9f2 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20001ab4 	.word	0x20001ab4
 80038fc:	40013000 	.word	0x40013000

08003900 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003906:	f107 0310 	add.w	r3, r7, #16
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <_ZL12MX_TIM3_Initv+0xb8>)
 8003922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003926:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800392a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003934:	2231      	movs	r2, #49	; 0x31
 8003936:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003944:	481b      	ldr	r0, [pc, #108]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003946:	f008 fd59 	bl	800c3fc <HAL_TIM_Base_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800395a:	f000 f9bd 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800395e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003964:	f107 0310 	add.w	r3, r7, #16
 8003968:	4619      	mov	r1, r3
 800396a:	4812      	ldr	r0, [pc, #72]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800396c:	f008 ff95 	bl	800c89a <HAL_TIM_ConfigClockSource>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8003980:	f000 f9aa 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003992:	f009 f9a7 	bl	800cce4 <HAL_TIMEx_MasterConfigSynchronization>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80039a6:	f000 f997 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039aa:	bf00      	nop
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20001b18 	.word	0x20001b18
 80039b8:	40000400 	.word	0x40000400

080039bc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <_ZL12MX_TIM6_Initv+0x7c>)
 80039d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 80039d4:	f640 125f 	movw	r2, #2399	; 0x95f
 80039d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 80039e2:	2209      	movs	r2, #9
 80039e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039ec:	4811      	ldr	r0, [pc, #68]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 80039ee:	f008 fd05 	bl	800c3fc <HAL_TIM_Base_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003a02:	f000 f969 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a06:	2320      	movs	r3, #32
 8003a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4808      	ldr	r0, [pc, #32]	; (8003a34 <_ZL12MX_TIM6_Initv+0x78>)
 8003a14:	f009 f966 	bl	800cce4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003a28:	f000 f956 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20001b64 	.word	0x20001b64
 8003a38:	40001000 	.word	0x40001000

08003a3c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a5a:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a5c:	4a27      	ldr	r2, [pc, #156]	; (8003afc <_ZL12MX_TIM8_Initv+0xc0>)
 8003a5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003a60:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a62:	225f      	movs	r2, #95	; 0x5f
 8003a64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003a6c:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a6e:	2231      	movs	r2, #49	; 0x31
 8003a70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003a84:	481c      	ldr	r0, [pc, #112]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a86:	f008 fcb9 	bl	800c3fc <HAL_TIM_Base_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003a9a:	f000 f91d 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4813      	ldr	r0, [pc, #76]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003aac:	f008 fef5 	bl	800c89a <HAL_TIM_ConfigClockSource>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003ac0:	f000 f90a 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003ac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003acc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4808      	ldr	r0, [pc, #32]	; (8003af8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003ad8:	f009 f904 	bl	800cce4 <HAL_TIMEx_MasterConfigSynchronization>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8003aec:	f000 f8f4 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003af0:	bf00      	nop
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20001bb0 	.word	0x20001bb0
 8003afc:	40013400 	.word	0x40013400

08003b00 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6493      	str	r3, [r2, #72]	; 0x48
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6493      	str	r3, [r2, #72]	; 0x48
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	6493      	str	r3, [r2, #72]	; 0x48
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <_ZL11MX_DMA_Initv+0x78>)
 8003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	607b      	str	r3, [r7, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2105      	movs	r1, #5
 8003b52:	200b      	movs	r0, #11
 8003b54:	f003 ff88 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b58:	200b      	movs	r0, #11
 8003b5a:	f003 ffa1 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2105      	movs	r1, #5
 8003b62:	2038      	movs	r0, #56	; 0x38
 8003b64:	f003 ff80 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003b68:	2038      	movs	r0, #56	; 0x38
 8003b6a:	f003 ff99 	bl	8007aa0 <HAL_NVIC_EnableIRQ>

}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000

08003b7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b92:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	4a3f      	ldr	r2, [pc, #252]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	4a39      	ldr	r2, [pc, #228]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be6:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <_ZL12MX_GPIO_Initv+0x118>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f248 0104 	movw	r1, #32772	; 0x8004
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfc:	f004 fb7a 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUSE_VOLTAGE_GPIO_Port, FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c06:	4824      	ldr	r0, [pc, #144]	; (8003c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8003c08:	f004 fb74 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003c12:	4822      	ldr	r0, [pc, #136]	; (8003c9c <_ZL12MX_GPIO_Initv+0x120>)
 8003c14:	f004 fb6e 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003c18:	f248 0304 	movw	r3, #32772	; 0x8004
 8003c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c34:	f004 f9b4 	bl	8007fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERLOCK_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c40:	2301      	movs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4813      	ldr	r0, [pc, #76]	; (8003c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8003c4c:	f004 f9a8 	bl	8007fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = FUSE_VOLTAGE_Pin;
 8003c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FUSE_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	480b      	ldr	r0, [pc, #44]	; (8003c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8003c6a:	f004 f999 	bl	8007fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003c6e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c74:	2301      	movs	r3, #1
 8003c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4619      	mov	r1, r3
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <_ZL12MX_GPIO_Initv+0x120>)
 8003c88:	f004 f98a 	bl	8007fa0 <HAL_GPIO_Init>

}
 8003c8c:	bf00      	nop
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	48000400 	.word	0x48000400
 8003c9c:	48000800 	.word	0x48000800

08003ca0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003ca8:	f00e fe78 	bl	801299c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00c f9d5 	bl	801005c <osDelay>
 8003cb2:	e7fb      	b.n	8003cac <_Z16StartDefaultTaskPv+0xc>

08003cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cc6:	f001 fa1d 	bl	8005104 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40014400 	.word	0x40014400

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cdc:	b672      	cpsid	i
}
 8003cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <Error_Handler+0x8>
	...

08003ce4 <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d06:	eeb1 7a67 	vneg.f32	s14, s15
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d14:	eeb0 0a66 	vmov.f32	s0, s13
 8003d18:	f00f fc8a 	bl	8013630 <expf>
 8003d1c:	eef0 7a40 	vmov.f32	s15, s0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d2c:	eeb1 7a67 	vneg.f32	s14, s15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d3a:	eeb0 0a66 	vmov.f32	s0, s13
 8003d3e:	f00f fc77 	bl	8013630 <expf>
 8003d42:	eef0 7a40 	vmov.f32	s15, s0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d52:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d6a:	eef1 6a67 	vneg.f32	s13, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d78:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003e24 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d80:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003e24 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003d84:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	ed93 7a05 	vldr	s14, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	ed93 7a06 	vldr	s14, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a0f      	ldr	r2, [pc, #60]	; (8003e2c <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003dee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 8003df6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 8003e16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	42700000 	.word	0x42700000
 8003e28:	3ba3d70a 	.word	0x3ba3d70a
 8003e2c:	3dcccccd 	.word	0x3dcccccd
 8003e30:	3951b717 	.word	0x3951b717
 8003e34:	48f42400 	.word	0x48f42400

08003e38 <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6178      	str	r0, [r7, #20]
 8003e40:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e44:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e48:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e4c:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	; 0x30
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	edd3 6a00 	vldr	s13, [r3]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	edd3 6a00 	vldr	s13, [r3]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	edd3 6a00 	vldr	s13, [r3]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f103 0020 	add.w	r0, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	33a8      	adds	r3, #168	; 0xa8
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2109      	movs	r1, #9
 8003f92:	f000 f99a 	bl	80042ca <_Z6hornerPKfjS0_>
 8003f96:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003fce:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	edd3 6a00 	vldr	s13, [r3]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	ed93 7a00 	vldr	s14, [r3]
 8004010:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004018:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	33a8      	adds	r3, #168	; 0xa8
 8004026:	461a      	mov	r2, r3
 8004028:	2108      	movs	r1, #8
 800402a:	f000 f94e 	bl	80042ca <_Z6hornerPKfjS0_>
 800402e:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8004038:	edd7 7a08 	vldr	s15, [r7, #32]
 800403c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004040:	edd7 7a08 	vldr	s15, [r7, #32]
 8004044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800404e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004052:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800405c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004064:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004068:	edd7 6a07 	vldr	s13, [r7, #28]
 800406c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004074:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800407e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004082:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 8004094:	ed97 7a06 	vldr	s14, [r7, #24]
 8004098:	edd7 7a08 	vldr	s15, [r7, #32]
 800409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	33a8      	adds	r3, #168	; 0xa8
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	613a      	str	r2, [r7, #16]
 80040c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040c6:	617a      	str	r2, [r7, #20]
 80040c8:	f107 0214 	add.w	r2, r7, #20
 80040cc:	f107 0110 	add.w	r1, r7, #16
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f928 	bl	8004326 <_ZSt5clampIfERKT_S2_S2_S2_>
 80040d6:	4603      	mov	r3, r0
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80040e0:	bf00      	nop
 80040e2:	3730      	adds	r7, #48	; 0x30
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 80040f2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004170 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x88>
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f88d 	bl	8004216 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fdf1 	bl	8003ce4 <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 8004102:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8004174 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8004106:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8004174 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 800410a:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004178 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x90>
 800410e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fe90 	bl	8003e38 <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004122:	4293      	cmp	r3, r2
 8004124:	dc0d      	bgt.n	8004142 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x5a>
        update(0, Voltage);
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	f107 0308 	add.w	r3, r7, #8
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fea1 	bl	8003e7c <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3301      	adds	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e7ec      	b.n	800411c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x34>
    }

    set_filter_covariance();
 8004142:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8004174 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8004146:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8004174 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 800414a:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004178 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x90>
 800414e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800417c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x94>
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fe70 	bl	8003e38 <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 8004158:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004180 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f85a 	bl	8004216 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fdbe 	bl	8003ce4 <_ZN7SoC_EKF17set_update_matrixEv>
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	42c80000 	.word	0x42c80000
 8004174:	3dcccccd 	.word	0x3dcccccd
 8004178:	3951b717 	.word	0x3951b717
 800417c:	48f42400 	.word	0x48f42400
 8004180:	3d4ccccd 	.word	0x3d4ccccd

08004184 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f8ef 	bl	8004374 <_ZSt12__miter_baseIPKfET_S2_>
 8004196:	4604      	mov	r4, r0
 8004198:	68b8      	ldr	r0, [r7, #8]
 800419a:	f000 f8eb 	bl	8004374 <_ZSt12__miter_baseIPKfET_S2_>
 800419e:	4603      	mov	r3, r0
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4620      	mov	r0, r4
 80041a6:	f000 f8f0 	bl	800438a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80041aa:	4603      	mov	r3, r0
    }
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}

080041b4 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f103 0118 	add.w	r1, r3, #24
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3308      	adds	r3, #8
 80041c8:	461a      	mov	r2, r3
 80041ca:	6838      	ldr	r0, [r7, #0]
 80041cc:	f7ff ffda 	bl	8004184 <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004206:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	671a      	str	r2, [r3, #112]	; 0x70
};
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
};
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	18d1      	adds	r1, r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3320      	adds	r3, #32
 8004274:	461a      	mov	r2, r3
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f7ff ff84 	bl	8004184 <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	429a      	cmp	r2, r3
 8004288:	d21b      	bcs.n	80042c2 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x66>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4413      	add	r3, r2
 80042a2:	edd3 7a00 	vldr	s15, [r3]
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3310      	adds	r3, #16
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3301      	adds	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e7de      	b.n	8004280 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x24>
    }
};
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b087      	sub	sp, #28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
    float s = 0;
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d214      	bcs.n	8004312 <_Z6hornerPKfjS0_+0x48>
        s = s*(*x) + arry[i];
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	ed93 7a00 	vldr	s14, [r3]
 80042ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80042f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004306:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	3301      	adds	r3, #1
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	e7e6      	b.n	80042e0 <_Z6hornerPKfjS0_+0x16>
    }
    return s;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	ee07 3a90 	vmov	s15, r3
}
 8004318:	eeb0 0a67 	vmov.f32	s0, s15
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	ed93 7a00 	vldr	s14, [r3]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	edd3 7a00 	vldr	s15, [r3]
 800433e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	d501      	bpl.n	800434c <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	e00d      	b.n	8004368 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	ed93 7a00 	vldr	s14, [r3]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	edd3 7a00 	vldr	s15, [r3]
 8004358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	d501      	bpl.n	8004366 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	e000      	b.n	8004368 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004366:	68fb      	ldr	r3, [r7, #12]
    }
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800438a:	b5b0      	push	{r4, r5, r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f81a 	bl	80043d0 <_ZSt12__niter_baseIPKfET_S2_>
 800439c:	4604      	mov	r4, r0
 800439e:	68b8      	ldr	r0, [r7, #8]
 80043a0:	f000 f816 	bl	80043d0 <_ZSt12__niter_baseIPKfET_S2_>
 80043a4:	4605      	mov	r5, r0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f81c 	bl	80043e6 <_ZSt12__niter_baseIPfET_S1_>
 80043ae:	4603      	mov	r3, r0
 80043b0:	461a      	mov	r2, r3
 80043b2:	4629      	mov	r1, r5
 80043b4:	4620      	mov	r0, r4
 80043b6:	f000 f821 	bl	80043fc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80043ba:	4602      	mov	r2, r0
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f82b 	bl	800441c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80043c6:	4603      	mov	r3, r0
    }
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}

080043d0 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
    { return __it; }
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f811 	bl	8004434 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8004412:	4603      	mov	r3, r0
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8004440:	f7fc fe6c 	bl	800111c <_ZSt21is_constant_evaluatedv>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f80d 	bl	800446e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8004454:	4603      	mov	r3, r0
 8004456:	e006      	b.n	8004466 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f829 	bl	80044b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004462:	4603      	mov	r3, r0
 8004464:	bf00      	nop
    }
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	109b      	asrs	r3, r3, #2
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	dd0d      	ble.n	80044a6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
	      ++__first;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e7ee      	b.n	8004484 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x16>
	  return __result;
 80044a6:	687b      	ldr	r3, [r7, #4]
	}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	109b      	asrs	r3, r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	461a      	mov	r2, r3
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f00f fb0e 	bl	8013afa <memmove>
	  return __result + _Num;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
	}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eeb0 0a67 	vmov.f32	s0, s15
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 8004526:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b63      	cmp	r3, #99	; 0x63
 8004530:	dc3f      	bgt.n	80045b2 <_Z17calculate_currentv+0xa2>
	{
		int16_t raw_value = data.current.adc[i];
 8004532:	4a42      	ldr	r2, [pc, #264]	; (800463c <_Z17calculate_currentv+0x12c>)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	330e      	adds	r3, #14
 8004538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453c:	80fb      	strh	r3, [r7, #6]
		raw_sum += raw_value;
 800453e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800454a:	ed97 7a05 	vldr	s14, [r7, #20]
 800454e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004552:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 8004556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004562:	ed97 7a04 	vldr	s14, [r7, #16]
 8004566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456e:	d507      	bpl.n	8004580 <_Z17calculate_currentv+0x70>
 8004570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457c:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 8004580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004598:	dd07      	ble.n	80045aa <_Z17calculate_currentv+0x9a>
 800459a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a6:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	e7bc      	b.n	800452c <_Z17calculate_currentv+0x1c>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 80045b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80045b6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004640 <_Z17calculate_currentv+0x130>
 80045ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045be:	edc7 7a00 	vstr	s15, [r7]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 80045c2:	edd7 7a00 	vldr	s15, [r7]
 80045c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004644 <_Z17calculate_currentv+0x134>
 80045ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ce:	edc7 7a00 	vstr	s15, [r7]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 80045d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004644 <_Z17calculate_currentv+0x134>
 80045da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045de:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 80045e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80045e6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004644 <_Z17calculate_currentv+0x134>
 80045ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ee:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <_Z17calculate_currentv+0x138>)
 80045f4:	ed93 7a00 	vldr	s14, [r3]
 80045f8:	edd7 7a00 	vldr	s15, [r7]
 80045fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <_Z17calculate_currentv+0x12c>)
 8004602:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
	data.current.value_max = (float)raw_max * output_current_factor;
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <_Z17calculate_currentv+0x138>)
 8004608:	ed93 7a00 	vldr	s14, [r3]
 800460c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <_Z17calculate_currentv+0x12c>)
 8004616:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	data.current.value_min = (float)raw_min * output_current_factor;
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <_Z17calculate_currentv+0x138>)
 800461c:	ed93 7a00 	vldr	s14, [r3]
 8004620:	edd7 7a03 	vldr	s15, [r7, #12]
 8004624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <_Z17calculate_currentv+0x12c>)
 800462a:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20001424 	.word	0x20001424
 8004640:	42c80000 	.word	0x42c80000
 8004644:	4501b000 	.word	0x4501b000
 8004648:	20003f00 	.word	0x20003f00

0800464c <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 8004654:	4936      	ldr	r1, [pc, #216]	; (8004730 <_Z18start_soc_functionPv+0xe4>)
 8004656:	4837      	ldr	r0, [pc, #220]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 8004658:	f7ff fdac 	bl	80041b4 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 800465c:	2209      	movs	r2, #9
 800465e:	4936      	ldr	r1, [pc, #216]	; (8004738 <_Z18start_soc_functionPv+0xec>)
 8004660:	4834      	ldr	r0, [pc, #208]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 8004662:	f7ff fdfb 	bl	800425c <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 3);
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	2303      	movs	r3, #3
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	f107 0218 	add.w	r2, r7, #24
 8004672:	f107 0314 	add.w	r3, r7, #20
 8004676:	4619      	mov	r1, r3
 8004678:	482e      	ldr	r0, [pc, #184]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 800467a:	f7ff fddb 	bl	8004234 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.05f);
 800467e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800473c <_Z18start_soc_functionPv+0xf0>
 8004682:	482c      	ldr	r0, [pc, #176]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 8004684:	f7ff fdc7 	bl	8004216 <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 8004688:	482a      	ldr	r0, [pc, #168]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 800468a:	f7ff fb2b 	bl	8003ce4 <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 800468e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004692:	4828      	ldr	r0, [pc, #160]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 8004694:	f7ff fda0 	bl	80041d8 <_ZN7SoC_EKF15set_initial_SoCEf>
	bool first_init_soc = true;
 8004698:	2301      	movs	r3, #1
 800469a:	77fb      	strb	r3, [r7, #31]

	for(;;){
		osDelay(30);
 800469c:	201e      	movs	r0, #30
 800469e:	f00b fcdd 	bl	801005c <osDelay>

		calculate_current();
 80046a2:	f7ff ff35 	bl	8004510 <_Z17calculate_currentv>

		if(first_init_soc){
 80046a6:	7ffb      	ldrb	r3, [r7, #31]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d014      	beq.n	80046d6 <_Z18start_soc_functionPv+0x8a>
			float temp_voltage = (float)data.voltages.cells[0] / 10000.0f;
 80046ac:	4b24      	ldr	r3, [pc, #144]	; (8004740 <_Z18start_soc_functionPv+0xf4>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004744 <_Z18start_soc_functionPv+0xf8>
 80046bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046c0:	edc7 7a04 	vstr	s15, [r7, #16]
			data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 80046c4:	f107 0310 	add.w	r3, r7, #16
 80046c8:	4619      	mov	r1, r3
 80046ca:	481a      	ldr	r0, [pc, #104]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 80046cc:	f7ff fd0c 	bl	80040e8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>
			first_init_soc = false;
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e7e2      	b.n	800469c <_Z18start_soc_functionPv+0x50>
		}else{
			float temp_voltage = (float)data.voltages.cells[0] / 10000.0f;
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <_Z18start_soc_functionPv+0xf4>)
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046e2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004744 <_Z18start_soc_functionPv+0xf8>
 80046e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ea:	edc7 7a03 	vstr	s15, [r7, #12]
			data.soc.main.update(data.current.value, temp_voltage);
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	461a      	mov	r2, r3
 80046f4:	4914      	ldr	r1, [pc, #80]	; (8004748 <_Z18start_soc_functionPv+0xfc>)
 80046f6:	480f      	ldr	r0, [pc, #60]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 80046f8:	f7ff fbc0 	bl	8003e7c <_ZN7SoC_EKF6updateERKfS1_>
			data.soc.value = data.soc.main.get_SoC();
 80046fc:	480d      	ldr	r0, [pc, #52]	; (8004734 <_Z18start_soc_functionPv+0xe8>)
 80046fe:	f7ff fef6 	bl	80044ee <_ZN7SoC_EKF7get_SoCEv>
 8004702:	eef0 7a40 	vmov.f32	s15, s0
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <_Z18start_soc_functionPv+0xf4>)
 8004708:	edc3 7aa2 	vstr	s15, [r3, #648]	; 0x288
			data.soc.value_can = (uint8_t)(data.soc.value * 100);
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <_Z18start_soc_functionPv+0xf4>)
 800470e:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8004712:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800474c <_Z18start_soc_functionPv+0x100>
 8004716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800471a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471e:	edc7 7a00 	vstr	s15, [r7]
 8004722:	783b      	ldrb	r3, [r7, #0]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <_Z18start_soc_functionPv+0xf4>)
 8004728:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
		}

	}
 800472c:	e7b6      	b.n	800469c <_Z18start_soc_functionPv+0x50>
 800472e:	bf00      	nop
 8004730:	08016d3c 	.word	0x08016d3c
 8004734:	200015f8 	.word	0x200015f8
 8004738:	08016d54 	.word	0x08016d54
 800473c:	3d4ccccd 	.word	0x3d4ccccd
 8004740:	20001424 	.word	0x20001424
 8004744:	461c4000 	.word	0x461c4000
 8004748:	200015ec 	.word	0x200015ec
 800474c:	42c80000 	.word	0x42c80000

08004750 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d12d      	bne.n	80047bc <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004766:	4293      	cmp	r3, r2
 8004768:	d128      	bne.n	80047bc <_Z41__static_initialization_and_destruction_0ii+0x6c>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fb ff02 	bl	8000578 <__aeabi_f2d>
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800477a:	f7fc f87f 	bl	800087c <__aeabi_ddiv>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4614      	mov	r4, r2
 8004784:	461d      	mov	r5, r3
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fb fef4 	bl	8000578 <__aeabi_f2d>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	490d      	ldr	r1, [pc, #52]	; (80047d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800479a:	f7fc f86f 	bl	800087c <__aeabi_ddiv>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb ff3f 	bl	8000628 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	f7fc fa11 	bl	8000bd8 <__aeabi_d2f>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4a06      	ldr	r2, [pc, #24]	; (80047d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bdb0      	pop	{r4, r5, r7, pc}
 80047c4:	20000200 	.word	0x20000200
 80047c8:	40b00000 	.word	0x40b00000
 80047cc:	20000204 	.word	0x20000204
 80047d0:	3ff00000 	.word	0x3ff00000
 80047d4:	20003f00 	.word	0x20003f00

080047d8 <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047e0:	2001      	movs	r0, #1
 80047e2:	f7ff ffb5 	bl	8004750 <_Z41__static_initialization_and_destruction_0ii>
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_MspInit+0x4c>)
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_MspInit+0x4c>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6613      	str	r3, [r2, #96]	; 0x60
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_MspInit+0x4c>)
 80047fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_MspInit+0x4c>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_MspInit+0x4c>)
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004810:	6593      	str	r3, [r2, #88]	; 0x58
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <HAL_MspInit+0x4c>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	210f      	movs	r1, #15
 8004822:	f06f 0001 	mvn.w	r0, #1
 8004826:	f003 f91f 	bl	8007a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000

08004838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b0b4      	sub	sp, #208	; 0xd0
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004854:	2298      	movs	r2, #152	; 0x98
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f00f f968 	bl	8013b2e <memset>
  if(hadc->Instance==ADC1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a97      	ldr	r2, [pc, #604]	; (8004ac0 <HAL_ADC_MspInit+0x288>)
 8004864:	4293      	cmp	r3, r2
 8004866:	f040 80ad 	bne.w	80049c4 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800486a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004870:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487c:	4618      	mov	r0, r3
 800487e:	f005 ffa5 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8004888:	f7ff fa26 	bl	8003cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800488c:	4b8d      	ldr	r3, [pc, #564]	; (8004ac4 <HAL_ADC_MspInit+0x28c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	4a8c      	ldr	r2, [pc, #560]	; (8004ac4 <HAL_ADC_MspInit+0x28c>)
 8004894:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004896:	4b8b      	ldr	r3, [pc, #556]	; (8004ac4 <HAL_ADC_MspInit+0x28c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10b      	bne.n	80048b6 <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 800489e:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	4a89      	ldr	r2, [pc, #548]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b6:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	4a83      	ldr	r2, [pc, #524]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048c2:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ce:	4b7e      	ldr	r3, [pc, #504]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d2:	4a7d      	ldr	r2, [pc, #500]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048da:	4b7b      	ldr	r3, [pc, #492]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e6:	4b78      	ldr	r3, [pc, #480]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	4a77      	ldr	r2, [pc, #476]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f2:	4b75      	ldr	r3, [pc, #468]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 80048fe:	23f8      	movs	r3, #248	; 0xf8
 8004900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004904:	230b      	movs	r3, #11
 8004906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004910:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004914:	4619      	mov	r1, r3
 8004916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800491a:	f003 fb41 	bl	8007fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 800491e:	2330      	movs	r3, #48	; 0x30
 8004920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004924:	230b      	movs	r3, #11
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004930:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004934:	4619      	mov	r1, r3
 8004936:	4865      	ldr	r0, [pc, #404]	; (8004acc <HAL_ADC_MspInit+0x294>)
 8004938:	f003 fb32 	bl	8007fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 800493c:	2301      	movs	r3, #1
 800493e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004942:	230b      	movs	r3, #11
 8004944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 800494e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004952:	4619      	mov	r1, r3
 8004954:	485e      	ldr	r0, [pc, #376]	; (8004ad0 <HAL_ADC_MspInit+0x298>)
 8004956:	f003 fb23 	bl	8007fa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800495a:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 800495c:	4a5e      	ldr	r2, [pc, #376]	; (8004ad8 <HAL_ADC_MspInit+0x2a0>)
 800495e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004960:	4b5c      	ldr	r3, [pc, #368]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 8004962:	2205      	movs	r2, #5
 8004964:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004966:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800496c:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004972:	4b58      	ldr	r3, [pc, #352]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004978:	4b56      	ldr	r3, [pc, #344]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 800497a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004980:	4b54      	ldr	r3, [pc, #336]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 8004982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004986:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004988:	4b52      	ldr	r3, [pc, #328]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 800498a:	2220      	movs	r2, #32
 800498c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800498e:	4b51      	ldr	r3, [pc, #324]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 8004990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004996:	484f      	ldr	r0, [pc, #316]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 8004998:	f003 f890 	bl	8007abc <HAL_DMA_Init>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 80049a2:	f7ff f999 	bl	8003cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 80049aa:	651a      	str	r2, [r3, #80]	; 0x50
 80049ac:	4a49      	ldr	r2, [pc, #292]	; (8004ad4 <HAL_ADC_MspInit+0x29c>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2105      	movs	r1, #5
 80049b6:	2012      	movs	r0, #18
 80049b8:	f003 f856 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80049bc:	2012      	movs	r0, #18
 80049be:	f003 f86f 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80049c2:	e079      	b.n	8004ab8 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a44      	ldr	r2, [pc, #272]	; (8004adc <HAL_ADC_MspInit+0x2a4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d174      	bne.n	8004ab8 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80049ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80049d4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80049d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f005 fef3 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80049ec:	f7ff f974 	bl	8003cd8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80049f0:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_ADC_MspInit+0x28c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	4a33      	ldr	r2, [pc, #204]	; (8004ac4 <HAL_ADC_MspInit+0x28c>)
 80049f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80049fa:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <HAL_ADC_MspInit+0x28c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10b      	bne.n	8004a1a <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004a02:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	4a30      	ldr	r2, [pc, #192]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 8004a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a26:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <HAL_ADC_MspInit+0x290>)
 8004a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004a32:	2302      	movs	r3, #2
 8004a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004a38:	230b      	movs	r3, #11
 8004a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004a44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4821      	ldr	r0, [pc, #132]	; (8004ad0 <HAL_ADC_MspInit+0x298>)
 8004a4c:	f003 faa8 	bl	8007fa0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004a50:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <HAL_ADC_MspInit+0x2ac>)
 8004a54:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a58:	2206      	movs	r2, #6
 8004a5a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a5c:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a74:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a76:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a7c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a80:	2220      	movs	r2, #32
 8004a82:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004a8c:	4814      	ldr	r0, [pc, #80]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004a8e:	f003 f815 	bl	8007abc <HAL_DMA_Init>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004a98:	f7ff f91e 	bl	8003cd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
 8004aa2:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <HAL_ADC_MspInit+0x2a8>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2105      	movs	r1, #5
 8004aac:	2012      	movs	r0, #18
 8004aae:	f002 ffdb 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004ab2:	2012      	movs	r0, #18
 8004ab4:	f002 fff4 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
}
 8004ab8:	bf00      	nop
 8004aba:	37d0      	adds	r7, #208	; 0xd0
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	50040000 	.word	0x50040000
 8004ac4:	20003f04 	.word	0x20003f04
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	48000800 	.word	0x48000800
 8004ad0:	48000400 	.word	0x48000400
 8004ad4:	20001998 	.word	0x20001998
 8004ad8:	40020008 	.word	0x40020008
 8004adc:	50040100 	.word	0x50040100
 8004ae0:	200019f8 	.word	0x200019f8
 8004ae4:	40020408 	.word	0x40020408

08004ae8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <HAL_CAN_MspInit+0x8c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d130      	bne.n	8004b6c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_CAN_MspInit+0x90>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_CAN_MspInit+0x90>)
 8004b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b14:	6593      	str	r3, [r2, #88]	; 0x58
 8004b16:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <HAL_CAN_MspInit+0x90>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <HAL_CAN_MspInit+0x90>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <HAL_CAN_MspInit+0x90>)
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_CAN_MspInit+0x90>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004b4c:	2309      	movs	r3, #9
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	4619      	mov	r1, r3
 8004b56:	4809      	ldr	r0, [pc, #36]	; (8004b7c <HAL_CAN_MspInit+0x94>)
 8004b58:	f003 fa22 	bl	8007fa0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2105      	movs	r1, #5
 8004b60:	2013      	movs	r0, #19
 8004b62:	f002 ff81 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004b66:	2013      	movs	r0, #19
 8004b68:	f002 ff9a 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004b6c:	bf00      	nop
 8004b6e:	3728      	adds	r7, #40	; 0x28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40006400 	.word	0x40006400
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	48000400 	.word	0x48000400

08004b80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b0aa      	sub	sp, #168	; 0xa8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b88:	f107 0310 	add.w	r3, r7, #16
 8004b8c:	2298      	movs	r2, #152	; 0x98
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f00e ffcc 	bl	8013b2e <memset>
  if(hrtc->Instance==RTC)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_RTC_MspInit+0x74>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d124      	bne.n	8004bea <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ba4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bae:	f107 0310 	add.w	r3, r7, #16
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f005 fe0a 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004bbe:	f7ff f88b 	bl	8003cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <HAL_RTC_MspInit+0x78>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <HAL_RTC_MspInit+0x78>)
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_RTC_MspInit+0x78>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <HAL_RTC_MspInit+0x78>)
 8004bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_RTC_MspInit+0x78>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bea:	bf00      	nop
 8004bec:	37a8      	adds	r7, #168	; 0xa8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40002800 	.word	0x40002800
 8004bf8:	40021000 	.word	0x40021000

08004bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <HAL_SPI_MspInit+0x9c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d137      	bne.n	8004c8e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_SPI_MspInit+0xa0>)
 8004c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c22:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <HAL_SPI_MspInit+0xa0>)
 8004c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c28:	6613      	str	r3, [r2, #96]	; 0x60
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <HAL_SPI_MspInit+0xa0>)
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c36:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_SPI_MspInit+0xa0>)
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_SPI_MspInit+0xa0>)
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_SPI_MspInit+0xa0>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004c4e:	2328      	movs	r3, #40	; 0x28
 8004c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	2302      	movs	r3, #2
 8004c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c5e:	2305      	movs	r3, #5
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	4619      	mov	r1, r3
 8004c68:	480d      	ldr	r0, [pc, #52]	; (8004ca0 <HAL_SPI_MspInit+0xa4>)
 8004c6a:	f003 f999 	bl	8007fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c6e:	2310      	movs	r3, #16
 8004c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c72:	2302      	movs	r3, #2
 8004c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c76:	2301      	movs	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c7e:	2305      	movs	r3, #5
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c82:	f107 0314 	add.w	r3, r7, #20
 8004c86:	4619      	mov	r1, r3
 8004c88:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <HAL_SPI_MspInit+0xa4>)
 8004c8a:	f003 f989 	bl	8007fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c8e:	bf00      	nop
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40013000 	.word	0x40013000
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	48000400 	.word	0x48000400

08004ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <HAL_TIM_Base_MspInit+0x9c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d114      	bne.n	8004ce0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2105      	movs	r1, #5
 8004cd2:	201d      	movs	r0, #29
 8004cd4:	f002 fec8 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cd8:	201d      	movs	r0, #29
 8004cda:	f002 fee1 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004cde:	e02a      	b.n	8004d36 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <HAL_TIM_Base_MspInit+0xa4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d114      	bne.n	8004d14 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004cf0:	f043 0310 	orr.w	r3, r3, #16
 8004cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2105      	movs	r1, #5
 8004d06:	2036      	movs	r0, #54	; 0x36
 8004d08:	f002 feae 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d0c:	2036      	movs	r0, #54	; 0x36
 8004d0e:	f002 fec7 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
}
 8004d12:	e010      	b.n	8004d36 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HAL_TIM_Base_MspInit+0xa8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10b      	bne.n	8004d36 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d28:	6613      	str	r3, [r2, #96]	; 0x60
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_TIM_Base_MspInit+0xa0>)
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40001000 	.word	0x40001000
 8004d4c:	40013400 	.word	0x40013400

08004d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	2019      	movs	r0, #25
 8004d66:	f002 fe7f 	bl	8007a68 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d6a:	2019      	movs	r0, #25
 8004d6c:	f002 fe98 	bl	8007aa0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_InitTick+0x9c>)
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_InitTick+0x9c>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_InitTick+0x9c>)
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d88:	f107 0210 	add.w	r2, r7, #16
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f005 fc2a 	bl	800a5ec <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004d98:	f005 fc12 	bl	800a5c0 <HAL_RCC_GetPCLK2Freq>
 8004d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <HAL_InitTick+0xa0>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0c9b      	lsrs	r3, r3, #18
 8004da8:	3b01      	subs	r3, #1
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_InitTick+0xa4>)
 8004dae:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <HAL_InitTick+0xa8>)
 8004db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_InitTick+0xa4>)
 8004db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004db8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <HAL_InitTick+0xa4>)
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <HAL_InitTick+0xa4>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_InitTick+0xa4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8004dcc:	4809      	ldr	r0, [pc, #36]	; (8004df4 <HAL_InitTick+0xa4>)
 8004dce:	f007 fb15 	bl	800c3fc <HAL_TIM_Base_Init>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d104      	bne.n	8004de2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004dd8:	4806      	ldr	r0, [pc, #24]	; (8004df4 <HAL_InitTick+0xa4>)
 8004dda:	f007 fbcf 	bl	800c57c <HAL_TIM_Base_Start_IT>
 8004dde:	4603      	mov	r3, r0
 8004de0:	e000      	b.n	8004de4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3730      	adds	r7, #48	; 0x30
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	431bde83 	.word	0x431bde83
 8004df4:	20003f08 	.word	0x20003f08
 8004df8:	40014400 	.word	0x40014400

08004dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e00:	e7fe      	b.n	8004e00 <NMI_Handler+0x4>

08004e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e06:	e7fe      	b.n	8004e06 <HardFault_Handler+0x4>

08004e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e0c:	e7fe      	b.n	8004e0c <MemManage_Handler+0x4>

08004e0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e12:	e7fe      	b.n	8004e12 <BusFault_Handler+0x4>

08004e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e18:	e7fe      	b.n	8004e18 <UsageFault_Handler+0x4>

08004e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e2c:	4802      	ldr	r0, [pc, #8]	; (8004e38 <DMA1_Channel1_IRQHandler+0x10>)
 8004e2e:	f002 ff68 	bl	8007d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20001998 	.word	0x20001998

08004e3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e40:	4803      	ldr	r0, [pc, #12]	; (8004e50 <ADC1_2_IRQHandler+0x14>)
 8004e42:	f000 fdd9 	bl	80059f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004e46:	4803      	ldr	r0, [pc, #12]	; (8004e54 <ADC1_2_IRQHandler+0x18>)
 8004e48:	f000 fdd6 	bl	80059f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200018c8 	.word	0x200018c8
 8004e54:	20001930 	.word	0x20001930

08004e58 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <CAN1_TX_IRQHandler+0x10>)
 8004e5e:	f002 fb1c 	bl	800749a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20001a58 	.word	0x20001a58

08004e6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e70:	4802      	ldr	r0, [pc, #8]	; (8004e7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004e72:	f007 fbf3 	bl	800c65c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20003f08 	.word	0x20003f08

08004e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e84:	4802      	ldr	r0, [pc, #8]	; (8004e90 <TIM3_IRQHandler+0x10>)
 8004e86:	f007 fbe9 	bl	800c65c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20001b18 	.word	0x20001b18

08004e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e98:	4802      	ldr	r0, [pc, #8]	; (8004ea4 <TIM6_DAC_IRQHandler+0x10>)
 8004e9a:	f007 fbdf 	bl	800c65c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20001b64 	.word	0x20001b64

08004ea8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004eac:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <DMA2_Channel1_IRQHandler+0x10>)
 8004eae:	f002 ff28 	bl	8007d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200019f8 	.word	0x200019f8

08004ebc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ec0:	4802      	ldr	r0, [pc, #8]	; (8004ecc <OTG_FS_IRQHandler+0x10>)
 8004ec2:	f003 fb82 	bl	80085ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20009120 	.word	0x20009120

08004ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
	return 1;
 8004ed4:	2301      	movs	r3, #1
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <_kill>:

int _kill(int pid, int sig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004eea:	f00e fcd5 	bl	8013898 <__errno>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2216      	movs	r2, #22
 8004ef2:	601a      	str	r2, [r3, #0]
	return -1;
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_exit>:

void _exit (int status)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f08:	f04f 31ff 	mov.w	r1, #4294967295
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffe7 	bl	8004ee0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f12:	e7fe      	b.n	8004f12 <_exit+0x12>

08004f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e00a      	b.n	8004f3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f26:	f3af 8000 	nop.w
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	60ba      	str	r2, [r7, #8]
 8004f32:	b2ca      	uxtb	r2, r1
 8004f34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	dbf0      	blt.n	8004f26 <_read+0x12>
	}

return len;
 8004f44:	687b      	ldr	r3, [r7, #4]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e009      	b.n	8004f74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	60ba      	str	r2, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	dbf1      	blt.n	8004f60 <_write+0x12>
	}
	return len;
 8004f7c:	687b      	ldr	r3, [r7, #4]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_close>:

int _close(int file)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
	return -1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fae:	605a      	str	r2, [r3, #4]
	return 0;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <_isatty>:

int _isatty(int file)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
	return 1;
 8004fc6:	2301      	movs	r3, #1
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
	return 0;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ff8:	4a14      	ldr	r2, [pc, #80]	; (800504c <_sbrk+0x5c>)
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <_sbrk+0x60>)
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <_sbrk+0x64>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <_sbrk+0x64>)
 800500e:	4a12      	ldr	r2, [pc, #72]	; (8005058 <_sbrk+0x68>)
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <_sbrk+0x64>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005020:	f00e fc3a 	bl	8013898 <__errno>
 8005024:	4603      	mov	r3, r0
 8005026:	220c      	movs	r2, #12
 8005028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	e009      	b.n	8005044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <_sbrk+0x64>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <_sbrk+0x64>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <_sbrk+0x64>)
 8005040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20050000 	.word	0x20050000
 8005050:	00000400 	.word	0x00000400
 8005054:	20003f54 	.word	0x20003f54
 8005058:	20009860 	.word	0x20009860

0800505c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <SystemInit+0x20>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	4a05      	ldr	r2, [pc, #20]	; (800507c <SystemInit+0x20>)
 8005068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800506c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005084:	f7ff ffea 	bl	800505c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005088:	480c      	ldr	r0, [pc, #48]	; (80050bc <LoopForever+0x6>)
  ldr r1, =_edata
 800508a:	490d      	ldr	r1, [pc, #52]	; (80050c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800508c:	4a0d      	ldr	r2, [pc, #52]	; (80050c4 <LoopForever+0xe>)
  movs r3, #0
 800508e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005090:	e002      	b.n	8005098 <LoopCopyDataInit>

08005092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005096:	3304      	adds	r3, #4

08005098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800509a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800509c:	d3f9      	bcc.n	8005092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050a0:	4c0a      	ldr	r4, [pc, #40]	; (80050cc <LoopForever+0x16>)
  movs r3, #0
 80050a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050a4:	e001      	b.n	80050aa <LoopFillZerobss>

080050a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050a8:	3204      	adds	r2, #4

080050aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050ac:	d3fb      	bcc.n	80050a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050ae:	f00e fcef 	bl	8013a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050b2:	f7fe f8af 	bl	8003214 <main>

080050b6 <LoopForever>:

LoopForever:
    b LoopForever
 80050b6:	e7fe      	b.n	80050b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80050b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80050bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c0:	2000056c 	.word	0x2000056c
  ldr r2, =_sidata
 80050c4:	080171c8 	.word	0x080171c8
  ldr r2, =_sbss
 80050c8:	2000056c 	.word	0x2000056c
  ldr r4, =_ebss
 80050cc:	2000985c 	.word	0x2000985c

080050d0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050d0:	e7fe      	b.n	80050d0 <CAN1_RX0_IRQHandler>

080050d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050dc:	2003      	movs	r0, #3
 80050de:	f002 fcb8 	bl	8007a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050e2:	200f      	movs	r0, #15
 80050e4:	f7ff fe34 	bl	8004d50 <HAL_InitTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	71fb      	strb	r3, [r7, #7]
 80050f2:	e001      	b.n	80050f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050f4:	f7ff fb78 	bl	80047e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050f8:	79fb      	ldrb	r3, [r7, #7]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_IncTick+0x20>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_IncTick+0x24>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4413      	add	r3, r2
 8005114:	4a04      	ldr	r2, [pc, #16]	; (8005128 <HAL_IncTick+0x24>)
 8005116:	6013      	str	r3, [r2, #0]
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000210 	.word	0x20000210
 8005128:	20003f58 	.word	0x20003f58

0800512c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return uwTick;
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <HAL_GetTick+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20003f58 	.word	0x20003f58

08005144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800514c:	f7ff ffee 	bl	800512c <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d005      	beq.n	800516a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_Delay+0x44>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800516a:	bf00      	nop
 800516c:	f7ff ffde 	bl	800512c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	429a      	cmp	r2, r3
 800517a:	d8f7      	bhi.n	800516c <HAL_Delay+0x28>
  {
  }
}
 800517c:	bf00      	nop
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000210 	.word	0x20000210

0800518c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3360      	adds	r3, #96	; 0x60
 8005206:	461a      	mov	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <LL_ADC_SetOffset+0x44>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	03fff000 	.word	0x03fff000

0800523c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3360      	adds	r3, #96	; 0x60
 800524a:	461a      	mov	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3360      	adds	r3, #96	; 0x60
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	431a      	orrs	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	615a      	str	r2, [r3, #20]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b087      	sub	sp, #28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3330      	adds	r3, #48	; 0x30
 80052fa:	461a      	mov	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	4413      	add	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	211f      	movs	r1, #31
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	43db      	mvns	r3, r3
 800531c:	401a      	ands	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0e9b      	lsrs	r3, r3, #26
 8005322:	f003 011f 	and.w	r1, r3, #31
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	431a      	orrs	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3314      	adds	r3, #20
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	0e5b      	lsrs	r3, r3, #25
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	4413      	add	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	0d1b      	lsrs	r3, r3, #20
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2107      	movs	r1, #7
 8005396:	fa01 f303 	lsl.w	r3, r1, r3
 800539a:	43db      	mvns	r3, r3
 800539c:	401a      	ands	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0d1b      	lsrs	r3, r3, #20
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	431a      	orrs	r2, r3
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f003 0318 	and.w	r3, r3, #24
 80053e2:	4908      	ldr	r1, [pc, #32]	; (8005404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80053e4:	40d9      	lsrs	r1, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	400b      	ands	r3, r1
 80053ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	0007ffff 	.word	0x0007ffff

08005408 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 031f 	and.w	r3, r3, #31
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6093      	str	r3, [r2, #8]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005478:	d101      	bne.n	800547e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800549c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054c8:	d101      	bne.n	80054ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054f0:	f043 0201 	orr.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005518:	f043 0202 	orr.w	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <LL_ADC_IsEnabled+0x18>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <LL_ADC_IsEnabled+0x1a>
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d101      	bne.n	800556a <LL_ADC_IsDisableOngoing+0x18>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <LL_ADC_IsDisableOngoing+0x1a>
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800558c:	f043 0204 	orr.w	r2, r3, #4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d101      	bne.n	80055b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d101      	bne.n	80055de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e134      	b.n	8005870 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff f90f 	bl	8004838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff ff19 	bl	8005464 <LL_ADC_IsDeepPowerDownEnabled>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff feff 	bl	8005440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff34 	bl	80054b4 <LL_ADC_IsInternalRegulatorEnabled>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d115      	bne.n	800567e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff18 	bl	800548c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800565c:	4b86      	ldr	r3, [pc, #536]	; (8005878 <HAL_ADC_Init+0x28c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	099b      	lsrs	r3, r3, #6
 8005662:	4a86      	ldr	r2, [pc, #536]	; (800587c <HAL_ADC_Init+0x290>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	099b      	lsrs	r3, r3, #6
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005670:	e002      	b.n	8005678 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	3b01      	subs	r3, #1
 8005676:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f9      	bne.n	8005672 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff ff16 	bl	80054b4 <LL_ADC_IsInternalRegulatorEnabled>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005692:	f043 0210 	orr.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff76 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 80056b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 80cd 	bne.w	800585e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f040 80c9 	bne.w	800585e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056d4:	f043 0202 	orr.w	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff ff23 	bl	800552c <LL_ADC_IsEnabled>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d110      	bne.n	800570e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056ec:	4864      	ldr	r0, [pc, #400]	; (8005880 <HAL_ADC_Init+0x294>)
 80056ee:	f7ff ff1d 	bl	800552c <LL_ADC_IsEnabled>
 80056f2:	4604      	mov	r4, r0
 80056f4:	4863      	ldr	r0, [pc, #396]	; (8005884 <HAL_ADC_Init+0x298>)
 80056f6:	f7ff ff19 	bl	800552c <LL_ADC_IsEnabled>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4323      	orrs	r3, r4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4619      	mov	r1, r3
 8005708:	485f      	ldr	r0, [pc, #380]	; (8005888 <HAL_ADC_Init+0x29c>)
 800570a:	f7ff fd3f 	bl	800518c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	7e5b      	ldrb	r3, [r3, #25]
 8005712:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005718:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800571e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005724:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800572c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d106      	bne.n	800574a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	3b01      	subs	r3, #1
 8005742:	045b      	lsls	r3, r3, #17
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	4b47      	ldr	r3, [pc, #284]	; (800588c <HAL_ADC_Init+0x2a0>)
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	430b      	orrs	r3, r1
 8005778:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff0e 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 8005784:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff ff1b 	bl	80055c6 <LL_ADC_INJ_IsConversionOngoing>
 8005790:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d140      	bne.n	800581a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d13d      	bne.n	800581a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7e1b      	ldrb	r3, [r3, #24]
 80057a6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057a8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c0:	f023 0306 	bic.w	r3, r3, #6
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	430b      	orrs	r3, r1
 80057cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d118      	bne.n	800580a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057e2:	f023 0304 	bic.w	r3, r3, #4
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057fa:	430a      	orrs	r2, r1
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	611a      	str	r2, [r3, #16]
 8005808:	e007      	b.n	800581a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d10c      	bne.n	800583c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f023 010f 	bic.w	r1, r3, #15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
 800583a:	e007      	b.n	800584c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 020f 	bic.w	r2, r2, #15
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	f043 0201 	orr.w	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	659a      	str	r2, [r3, #88]	; 0x58
 800585c:	e007      	b.n	800586e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f043 0210 	orr.w	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800586e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3724      	adds	r7, #36	; 0x24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}
 8005878:	20000208 	.word	0x20000208
 800587c:	053e2d63 	.word	0x053e2d63
 8005880:	50040000 	.word	0x50040000
 8005884:	50040100 	.word	0x50040100
 8005888:	50040300 	.word	0x50040300
 800588c:	fff0c007 	.word	0xfff0c007

08005890 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800589c:	4850      	ldr	r0, [pc, #320]	; (80059e0 <HAL_ADC_Start_DMA+0x150>)
 800589e:	f7ff fdb3 	bl	8005408 <LL_ADC_GetMultimode>
 80058a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fe79 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 808e 	bne.w	80059d2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_Start_DMA+0x34>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e089      	b.n	80059d8 <HAL_ADC_Start_DMA+0x148>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d002      	beq.n	80058de <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d172      	bne.n	80059c4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fec8 	bl	8006674 <ADC_Enable>
 80058e4:	4603      	mov	r3, r0
 80058e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d165      	bne.n	80059ba <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a37      	ldr	r2, [pc, #220]	; (80059e4 <HAL_ADC_Start_DMA+0x154>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d002      	beq.n	8005912 <HAL_ADC_Start_DMA+0x82>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	e000      	b.n	8005914 <HAL_ADC_Start_DMA+0x84>
 8005912:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <HAL_ADC_Start_DMA+0x158>)
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	4293      	cmp	r3, r2
 800591a:	d002      	beq.n	8005922 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d105      	bne.n	800592e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005926:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d006      	beq.n	8005948 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	f023 0206 	bic.w	r2, r3, #6
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	65da      	str	r2, [r3, #92]	; 0x5c
 8005946:	e002      	b.n	800594e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	4a26      	ldr	r2, [pc, #152]	; (80059ec <HAL_ADC_Start_DMA+0x15c>)
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <HAL_ADC_Start_DMA+0x160>)
 800595c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <HAL_ADC_Start_DMA+0x164>)
 8005964:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	221c      	movs	r2, #28
 800596c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0210 	orr.w	r2, r2, #16
 8005984:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3340      	adds	r3, #64	; 0x40
 80059a0:	4619      	mov	r1, r3
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f002 f931 	bl	8007c0c <HAL_DMA_Start_IT>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fde0 	bl	8005578 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80059b8:	e00d      	b.n	80059d6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80059c2:	e008      	b.n	80059d6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80059d0:	e001      	b.n	80059d6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	50040300 	.word	0x50040300
 80059e4:	50040100 	.word	0x50040100
 80059e8:	50040000 	.word	0x50040000
 80059ec:	0800683f 	.word	0x0800683f
 80059f0:	08006917 	.word	0x08006917
 80059f4:	08006933 	.word	0x08006933

080059f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a14:	4882      	ldr	r0, [pc, #520]	; (8005c20 <HAL_ADC_IRQHandler+0x228>)
 8005a16:	f7ff fcf7 	bl	8005408 <LL_ADC_GetMultimode>
 8005a1a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <HAL_ADC_IRQHandler+0x5e>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d012      	beq.n	8005a56 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 f867 	bl	8006b1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2202      	movs	r2, #2
 8005a54:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_ADC_IRQHandler+0x72>
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8083 	beq.w	8005b7c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d07d      	beq.n	8005b7c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fc11 	bl	80052c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d062      	beq.n	8005b6e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5d      	ldr	r2, [pc, #372]	; (8005c24 <HAL_ADC_IRQHandler+0x22c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d002      	beq.n	8005ab8 <HAL_ADC_IRQHandler+0xc0>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	e000      	b.n	8005aba <HAL_ADC_IRQHandler+0xc2>
 8005ab8:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <HAL_ADC_IRQHandler+0x230>)
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d008      	beq.n	8005ad4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d002      	beq.n	8005ad4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b09      	cmp	r3, #9
 8005ad2:	d104      	bne.n	8005ade <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	623b      	str	r3, [r7, #32]
 8005adc:	e00c      	b.n	8005af8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a50      	ldr	r2, [pc, #320]	; (8005c24 <HAL_ADC_IRQHandler+0x22c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d002      	beq.n	8005aee <HAL_ADC_IRQHandler+0xf6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	e000      	b.n	8005af0 <HAL_ADC_IRQHandler+0xf8>
 8005aee:	4b4e      	ldr	r3, [pc, #312]	; (8005c28 <HAL_ADC_IRQHandler+0x230>)
 8005af0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d135      	bne.n	8005b6e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d12e      	bne.n	8005b6e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fd43 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d11a      	bne.n	8005b56 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 020c 	bic.w	r2, r2, #12
 8005b2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d112      	bne.n	8005b6e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	f043 0201 	orr.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	659a      	str	r2, [r3, #88]	; 0x58
 8005b54:	e00b      	b.n	8005b6e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f043 0210 	orr.w	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f043 0201 	orr.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f95c 	bl	8005e2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	220c      	movs	r2, #12
 8005b7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <HAL_ADC_IRQHandler+0x198>
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 809f 	beq.w	8005cda <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8099 	beq.w	8005cda <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fbbc 	bl	8005342 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005bca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fb77 	bl	80052c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bd6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a11      	ldr	r2, [pc, #68]	; (8005c24 <HAL_ADC_IRQHandler+0x22c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d002      	beq.n	8005be8 <HAL_ADC_IRQHandler+0x1f0>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	e000      	b.n	8005bea <HAL_ADC_IRQHandler+0x1f2>
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <HAL_ADC_IRQHandler+0x230>)
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d008      	beq.n	8005c04 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d002      	beq.n	8005c04 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d104      	bne.n	8005c0e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	e013      	b.n	8005c36 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <HAL_ADC_IRQHandler+0x22c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_ADC_IRQHandler+0x234>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	e007      	b.n	8005c2e <HAL_ADC_IRQHandler+0x236>
 8005c1e:	bf00      	nop
 8005c20:	50040300 	.word	0x50040300
 8005c24:	50040100 	.word	0x50040100
 8005c28:	50040000 	.word	0x50040000
 8005c2c:	4b7d      	ldr	r3, [pc, #500]	; (8005e24 <HAL_ADC_IRQHandler+0x42c>)
 8005c2e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d047      	beq.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_ADC_IRQHandler+0x25e>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d03f      	beq.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d13a      	bne.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d133      	bne.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12e      	bne.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fca7 	bl	80055c6 <LL_ADC_INJ_IsConversionOngoing>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11a      	bne.n	8005cb4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c8c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d112      	bne.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f043 0201 	orr.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8005cb2:	e00b      	b.n	8005ccc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	f043 0210 	orr.w	r2, r3, #16
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fefd 	bl	8006acc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2260      	movs	r2, #96	; 0x60
 8005cd8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d011      	beq.n	8005d08 <HAL_ADC_IRQHandler+0x310>
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f8aa 	bl	8005e54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <HAL_ADC_IRQHandler+0x340>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00d      	beq.n	8005d38 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fee3 	bl	8006af4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d012      	beq.n	8005d68 <HAL_ADC_IRQHandler+0x370>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fed5 	bl	8006b08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d036      	beq.n	8005de0 <HAL_ADC_IRQHandler+0x3e8>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d031      	beq.n	8005de0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005d84:	2301      	movs	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	e014      	b.n	8005db4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d90:	4825      	ldr	r0, [pc, #148]	; (8005e28 <HAL_ADC_IRQHandler+0x430>)
 8005d92:	f7ff fb47 	bl	8005424 <LL_ADC_GetMultiDMATransfer>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005da0:	e008      	b.n	8005db4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005db0:	2301      	movs	r3, #1
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10e      	bne.n	8005dd8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	f043 0202 	orr.w	r2, r3, #2
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f848 	bl	8005e68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2210      	movs	r2, #16
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d018      	beq.n	8005e1c <HAL_ADC_IRQHandler+0x424>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d013      	beq.n	8005e1c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	f043 0208 	orr.w	r2, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e14:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fe62 	bl	8006ae0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005e1c:	bf00      	nop
 8005e1e:	3728      	adds	r7, #40	; 0x28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	50040000 	.word	0x50040000
 8005e28:	50040300 	.word	0x50040300

08005e2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b0b6      	sub	sp, #216	; 0xd8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_ADC_ConfigChannel+0x22>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e3d5      	b.n	800664a <HAL_ADC_ConfigChannel+0x7ce>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff fb78 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 83ba 	bne.w	800662c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	d824      	bhi.n	8005f0a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	3b02      	subs	r3, #2
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d81b      	bhi.n	8005f02 <HAL_ADC_ConfigChannel+0x86>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_ADC_ConfigChannel+0x54>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005ee9 	.word	0x08005ee9
 8005ed8:	08005ef1 	.word	0x08005ef1
 8005edc:	08005ef9 	.word	0x08005ef9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	220c      	movs	r2, #12
 8005ee4:	605a      	str	r2, [r3, #4]
          break;
 8005ee6:	e011      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2212      	movs	r2, #18
 8005eec:	605a      	str	r2, [r3, #4]
          break;
 8005eee:	e00d      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2218      	movs	r2, #24
 8005ef4:	605a      	str	r2, [r3, #4]
          break;
 8005ef6:	e009      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005efe:	605a      	str	r2, [r3, #4]
          break;
 8005f00:	e004      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2206      	movs	r2, #6
 8005f06:	605a      	str	r2, [r3, #4]
          break;
 8005f08:	e000      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005f0a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6859      	ldr	r1, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f7ff f9e6 	bl	80052ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fb3c 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 8005f28:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fb48 	bl	80055c6 <LL_ADC_INJ_IsConversionOngoing>
 8005f36:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 81c1 	bne.w	80062c6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 81bc 	bne.w	80062c6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f56:	d10f      	bne.n	8005f78 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2200      	movs	r2, #0
 8005f62:	4619      	mov	r1, r3
 8005f64:	f7ff fa00 	bl	8005368 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff f994 	bl	800529e <LL_ADC_SetSamplingTimeCommonConfig>
 8005f76:	e00e      	b.n	8005f96 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f7ff f9ef 	bl	8005368 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff f984 	bl	800529e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	08db      	lsrs	r3, r3, #3
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d00a      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6919      	ldr	r1, [r3, #16]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fc8:	f7ff f914 	bl	80051f4 <LL_ADC_SetOffset>
 8005fcc:	e17b      	b.n	80062c6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff f931 	bl	800523c <LL_ADC_GetOffsetChannel>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0x17e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff f926 	bl	800523c <LL_ADC_GetOffsetChannel>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	0e9b      	lsrs	r3, r3, #26
 8005ff4:	f003 021f 	and.w	r2, r3, #31
 8005ff8:	e01e      	b.n	8006038 <HAL_ADC_ConfigChannel+0x1bc>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff f91b 	bl	800523c <LL_ADC_GetOffsetChannel>
 8006006:	4603      	mov	r3, r0
 8006008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006010:	fa93 f3a3 	rbit	r3, r3
 8006014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800601c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006028:	2320      	movs	r3, #32
 800602a:	e004      	b.n	8006036 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800602c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006030:	fab3 f383 	clz	r3, r3
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x1d4>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	e018      	b.n	8006082 <HAL_ADC_ConfigChannel+0x206>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800605c:	fa93 f3a3 	rbit	r3, r3
 8006060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800606c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8006074:	2320      	movs	r3, #32
 8006076:	e004      	b.n	8006082 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800607c:	fab3 f383 	clz	r3, r3
 8006080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006082:	429a      	cmp	r2, r3
 8006084:	d106      	bne.n	8006094 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff f8ea 	bl	8005268 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2101      	movs	r1, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff f8ce 	bl	800523c <LL_ADC_GetOffsetChannel>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x244>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2101      	movs	r1, #1
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff f8c3 	bl	800523c <LL_ADC_GetOffsetChannel>
 80060b6:	4603      	mov	r3, r0
 80060b8:	0e9b      	lsrs	r3, r3, #26
 80060ba:	f003 021f 	and.w	r2, r3, #31
 80060be:	e01e      	b.n	80060fe <HAL_ADC_ConfigChannel+0x282>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff f8b8 	bl	800523c <LL_ADC_GetOffsetChannel>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060d6:	fa93 f3a3 	rbit	r3, r3
 80060da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80060de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80060e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80060ee:	2320      	movs	r3, #32
 80060f0:	e004      	b.n	80060fc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80060f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060f6:	fab3 f383 	clz	r3, r3
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x29a>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	0e9b      	lsrs	r3, r3, #26
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	e018      	b.n	8006148 <HAL_ADC_ConfigChannel+0x2cc>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006122:	fa93 f3a3 	rbit	r3, r3
 8006126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800612a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800612e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800613a:	2320      	movs	r3, #32
 800613c:	e004      	b.n	8006148 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800613e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006142:	fab3 f383 	clz	r3, r3
 8006146:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006148:	429a      	cmp	r2, r3
 800614a:	d106      	bne.n	800615a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	2101      	movs	r1, #1
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff f887 	bl	8005268 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff f86b 	bl	800523c <LL_ADC_GetOffsetChannel>
 8006166:	4603      	mov	r3, r0
 8006168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <HAL_ADC_ConfigChannel+0x30a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2102      	movs	r1, #2
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff f860 	bl	800523c <LL_ADC_GetOffsetChannel>
 800617c:	4603      	mov	r3, r0
 800617e:	0e9b      	lsrs	r3, r3, #26
 8006180:	f003 021f 	and.w	r2, r3, #31
 8006184:	e01e      	b.n	80061c4 <HAL_ADC_ConfigChannel+0x348>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2102      	movs	r1, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f855 	bl	800523c <LL_ADC_GetOffsetChannel>
 8006192:	4603      	mov	r3, r0
 8006194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80061a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80061ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80061b4:	2320      	movs	r3, #32
 80061b6:	e004      	b.n	80061c2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80061b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061bc:	fab3 f383 	clz	r3, r3
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x360>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	0e9b      	lsrs	r3, r3, #26
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	e016      	b.n	800620a <HAL_ADC_ConfigChannel+0x38e>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80061ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80061f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80061fc:	2320      	movs	r3, #32
 80061fe:	e004      	b.n	800620a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006204:	fab3 f383 	clz	r3, r3
 8006208:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800620a:	429a      	cmp	r2, r3
 800620c:	d106      	bne.n	800621c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2200      	movs	r2, #0
 8006214:	2102      	movs	r1, #2
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff f826 	bl	8005268 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2103      	movs	r1, #3
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff f80a 	bl	800523c <LL_ADC_GetOffsetChannel>
 8006228:	4603      	mov	r3, r0
 800622a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <HAL_ADC_ConfigChannel+0x3cc>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2103      	movs	r1, #3
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe ffff 	bl	800523c <LL_ADC_GetOffsetChannel>
 800623e:	4603      	mov	r3, r0
 8006240:	0e9b      	lsrs	r3, r3, #26
 8006242:	f003 021f 	and.w	r2, r3, #31
 8006246:	e017      	b.n	8006278 <HAL_ADC_ConfigChannel+0x3fc>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2103      	movs	r1, #3
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fff4 	bl	800523c <LL_ADC_GetOffsetChannel>
 8006254:	4603      	mov	r3, r0
 8006256:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006262:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800626a:	2320      	movs	r3, #32
 800626c:	e003      	b.n	8006276 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800626e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006270:	fab3 f383 	clz	r3, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006280:	2b00      	cmp	r3, #0
 8006282:	d105      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x414>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	0e9b      	lsrs	r3, r3, #26
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	e011      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x438>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006298:	fa93 f3a3 	rbit	r3, r3
 800629c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800629e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80062a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80062a8:	2320      	movs	r3, #32
 80062aa:	e003      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	fab3 f383 	clz	r3, r3
 80062b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d106      	bne.n	80062c6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2200      	movs	r2, #0
 80062be:	2103      	movs	r1, #3
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe ffd1 	bl	8005268 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff f92e 	bl	800552c <LL_ADC_IsEnabled>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 8140 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f7ff f86b 	bl	80053c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	4a8f      	ldr	r2, [pc, #572]	; (800652c <HAL_ADC_ConfigChannel+0x6b0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	f040 8131 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <HAL_ADC_ConfigChannel+0x4a2>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	0e9b      	lsrs	r3, r3, #26
 800630c:	3301      	adds	r3, #1
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2b09      	cmp	r3, #9
 8006314:	bf94      	ite	ls
 8006316:	2301      	movls	r3, #1
 8006318:	2300      	movhi	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	e019      	b.n	8006352 <HAL_ADC_ConfigChannel+0x4d6>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006326:	fa93 f3a3 	rbit	r3, r3
 800632a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800632c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800632e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006336:	2320      	movs	r3, #32
 8006338:	e003      	b.n	8006342 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800633a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800633c:	fab3 f383 	clz	r3, r3
 8006340:	b2db      	uxtb	r3, r3
 8006342:	3301      	adds	r3, #1
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b09      	cmp	r3, #9
 800634a:	bf94      	ite	ls
 800634c:	2301      	movls	r3, #1
 800634e:	2300      	movhi	r3, #0
 8006350:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006352:	2b00      	cmp	r3, #0
 8006354:	d079      	beq.n	800644a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635e:	2b00      	cmp	r3, #0
 8006360:	d107      	bne.n	8006372 <HAL_ADC_ConfigChannel+0x4f6>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	0e9b      	lsrs	r3, r3, #26
 8006368:	3301      	adds	r3, #1
 800636a:	069b      	lsls	r3, r3, #26
 800636c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006370:	e015      	b.n	800639e <HAL_ADC_ConfigChannel+0x522>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006382:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800638a:	2320      	movs	r3, #32
 800638c:	e003      	b.n	8006396 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800638e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006390:	fab3 f383 	clz	r3, r3
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3301      	adds	r3, #1
 8006398:	069b      	lsls	r3, r3, #26
 800639a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_ADC_ConfigChannel+0x542>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	0e9b      	lsrs	r3, r3, #26
 80063b0:	3301      	adds	r3, #1
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	2101      	movs	r1, #1
 80063b8:	fa01 f303 	lsl.w	r3, r1, r3
 80063bc:	e017      	b.n	80063ee <HAL_ADC_ConfigChannel+0x572>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c6:	fa93 f3a3 	rbit	r3, r3
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80063d6:	2320      	movs	r3, #32
 80063d8:	e003      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80063da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063dc:	fab3 f383 	clz	r3, r3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2101      	movs	r1, #1
 80063ea:	fa01 f303 	lsl.w	r3, r1, r3
 80063ee:	ea42 0103 	orr.w	r1, r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x598>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	0e9b      	lsrs	r3, r3, #26
 8006404:	3301      	adds	r3, #1
 8006406:	f003 021f 	and.w	r2, r3, #31
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	051b      	lsls	r3, r3, #20
 8006412:	e018      	b.n	8006446 <HAL_ADC_ConfigChannel+0x5ca>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	fa93 f3a3 	rbit	r3, r3
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800642c:	2320      	movs	r3, #32
 800642e:	e003      	b.n	8006438 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3301      	adds	r3, #1
 800643a:	f003 021f 	and.w	r2, r3, #31
 800643e:	4613      	mov	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4413      	add	r3, r2
 8006444:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006446:	430b      	orrs	r3, r1
 8006448:	e081      	b.n	800654e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_ADC_ConfigChannel+0x5ea>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	0e9b      	lsrs	r3, r3, #26
 800645c:	3301      	adds	r3, #1
 800645e:	069b      	lsls	r3, r3, #26
 8006460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006464:	e015      	b.n	8006492 <HAL_ADC_ConfigChannel+0x616>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800647e:	2320      	movs	r3, #32
 8006480:	e003      	b.n	800648a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	fab3 f383 	clz	r3, r3
 8006488:	b2db      	uxtb	r3, r3
 800648a:	3301      	adds	r3, #1
 800648c:	069b      	lsls	r3, r3, #26
 800648e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0x636>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	0e9b      	lsrs	r3, r3, #26
 80064a4:	3301      	adds	r3, #1
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2101      	movs	r1, #1
 80064ac:	fa01 f303 	lsl.w	r3, r1, r3
 80064b0:	e017      	b.n	80064e2 <HAL_ADC_ConfigChannel+0x666>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	fa93 f3a3 	rbit	r3, r3
 80064be:	61fb      	str	r3, [r7, #28]
  return result;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80064ca:	2320      	movs	r3, #32
 80064cc:	e003      	b.n	80064d6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	fab3 f383 	clz	r3, r3
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	3301      	adds	r3, #1
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	2101      	movs	r1, #1
 80064de:	fa01 f303 	lsl.w	r3, r1, r3
 80064e2:	ea42 0103 	orr.w	r1, r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <HAL_ADC_ConfigChannel+0x692>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	0e9b      	lsrs	r3, r3, #26
 80064f8:	3301      	adds	r3, #1
 80064fa:	f003 021f 	and.w	r2, r3, #31
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	3b1e      	subs	r3, #30
 8006506:	051b      	lsls	r3, r3, #20
 8006508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800650c:	e01e      	b.n	800654c <HAL_ADC_ConfigChannel+0x6d0>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	fa93 f3a3 	rbit	r3, r3
 800651a:	613b      	str	r3, [r7, #16]
  return result;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006526:	2320      	movs	r3, #32
 8006528:	e006      	b.n	8006538 <HAL_ADC_ConfigChannel+0x6bc>
 800652a:	bf00      	nop
 800652c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	fab3 f383 	clz	r3, r3
 8006536:	b2db      	uxtb	r3, r3
 8006538:	3301      	adds	r3, #1
 800653a:	f003 021f 	and.w	r2, r3, #31
 800653e:	4613      	mov	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4413      	add	r3, r2
 8006544:	3b1e      	subs	r3, #30
 8006546:	051b      	lsls	r3, r3, #20
 8006548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800654c:	430b      	orrs	r3, r1
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	6892      	ldr	r2, [r2, #8]
 8006552:	4619      	mov	r1, r3
 8006554:	f7fe ff08 	bl	8005368 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <HAL_ADC_ConfigChannel+0x7d8>)
 800655e:	4013      	ands	r3, r2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d06c      	beq.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006564:	483c      	ldr	r0, [pc, #240]	; (8006658 <HAL_ADC_ConfigChannel+0x7dc>)
 8006566:	f7fe fe37 	bl	80051d8 <LL_ADC_GetCommonPathInternalCh>
 800656a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a3a      	ldr	r2, [pc, #232]	; (800665c <HAL_ADC_ConfigChannel+0x7e0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d127      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800657c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d121      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a35      	ldr	r2, [pc, #212]	; (8006660 <HAL_ADC_ConfigChannel+0x7e4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d157      	bne.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800658e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006592:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006596:	4619      	mov	r1, r3
 8006598:	482f      	ldr	r0, [pc, #188]	; (8006658 <HAL_ADC_ConfigChannel+0x7dc>)
 800659a:	f7fe fe0a 	bl	80051b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <HAL_ADC_ConfigChannel+0x7e8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	099b      	lsrs	r3, r3, #6
 80065a4:	4a30      	ldr	r2, [pc, #192]	; (8006668 <HAL_ADC_ConfigChannel+0x7ec>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	4613      	mov	r3, r2
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80065b8:	e002      	b.n	80065c0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b01      	subs	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f9      	bne.n	80065ba <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065c6:	e03a      	b.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <HAL_ADC_ConfigChannel+0x7f0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d113      	bne.n	80065fa <HAL_ADC_ConfigChannel+0x77e>
 80065d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10d      	bne.n	80065fa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_ADC_ConfigChannel+0x7e4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d12a      	bne.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065f0:	4619      	mov	r1, r3
 80065f2:	4819      	ldr	r0, [pc, #100]	; (8006658 <HAL_ADC_ConfigChannel+0x7dc>)
 80065f4:	f7fe fddd 	bl	80051b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065f8:	e021      	b.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <HAL_ADC_ConfigChannel+0x7f4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d11c      	bne.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d116      	bne.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a12      	ldr	r2, [pc, #72]	; (8006660 <HAL_ADC_ConfigChannel+0x7e4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d111      	bne.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800661a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800661e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006622:	4619      	mov	r1, r3
 8006624:	480c      	ldr	r0, [pc, #48]	; (8006658 <HAL_ADC_ConfigChannel+0x7dc>)
 8006626:	f7fe fdc4 	bl	80051b2 <LL_ADC_SetCommonPathInternalCh>
 800662a:	e008      	b.n	800663e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006646:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800664a:	4618      	mov	r0, r3
 800664c:	37d8      	adds	r7, #216	; 0xd8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	80080000 	.word	0x80080000
 8006658:	50040300 	.word	0x50040300
 800665c:	c7520000 	.word	0xc7520000
 8006660:	50040000 	.word	0x50040000
 8006664:	20000208 	.word	0x20000208
 8006668:	053e2d63 	.word	0x053e2d63
 800666c:	cb840000 	.word	0xcb840000
 8006670:	80000001 	.word	0x80000001

08006674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe ff51 	bl	800552c <LL_ADC_IsEnabled>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d169      	bne.n	8006764 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	4b36      	ldr	r3, [pc, #216]	; (8006770 <ADC_Enable+0xfc>)
 8006698:	4013      	ands	r3, r2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a2:	f043 0210 	orr.w	r2, r3, #16
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ae:	f043 0201 	orr.w	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e055      	b.n	8006766 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe ff0c 	bl	80054dc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80066c4:	482b      	ldr	r0, [pc, #172]	; (8006774 <ADC_Enable+0x100>)
 80066c6:	f7fe fd87 	bl	80051d8 <LL_ADC_GetCommonPathInternalCh>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d013      	beq.n	80066fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066d4:	4b28      	ldr	r3, [pc, #160]	; (8006778 <ADC_Enable+0x104>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	099b      	lsrs	r3, r3, #6
 80066da:	4a28      	ldr	r2, [pc, #160]	; (800677c <ADC_Enable+0x108>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	099b      	lsrs	r3, r3, #6
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	4613      	mov	r3, r2
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80066ee:	e002      	b.n	80066f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f9      	bne.n	80066f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80066fc:	f7fe fd16 	bl	800512c <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006702:	e028      	b.n	8006756 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe ff0f 	bl	800552c <LL_ADC_IsEnabled>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fedf 	bl	80054dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800671e:	f7fe fd05 	bl	800512c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d914      	bls.n	8006756 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d00d      	beq.n	8006756 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f043 0210 	orr.w	r2, r3, #16
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e007      	b.n	8006766 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b01      	cmp	r3, #1
 8006762:	d1cf      	bne.n	8006704 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	8000003f 	.word	0x8000003f
 8006774:	50040300 	.word	0x50040300
 8006778:	20000208 	.word	0x20000208
 800677c:	053e2d63 	.word	0x053e2d63

08006780 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fee0 	bl	8005552 <LL_ADC_IsDisableOngoing>
 8006792:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fec7 	bl	800552c <LL_ADC_IsEnabled>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d047      	beq.n	8006834 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d144      	bne.n	8006834 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 030d 	and.w	r3, r3, #13
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10c      	bne.n	80067d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fea1 	bl	8005504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2203      	movs	r2, #3
 80067c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80067ca:	f7fe fcaf 	bl	800512c <HAL_GetTick>
 80067ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067d0:	e029      	b.n	8006826 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	f043 0210 	orr.w	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e023      	b.n	8006836 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80067ee:	f7fe fc9d 	bl	800512c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d914      	bls.n	8006826 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	f043 0210 	orr.w	r2, r3, #16
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e007      	b.n	8006836 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1dc      	bne.n	80067ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006850:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006854:	2b00      	cmp	r3, #0
 8006856:	d14b      	bne.n	80068f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d021      	beq.n	80068b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fd24 	bl	80052c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d032      	beq.n	80068e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d12b      	bne.n	80068e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11f      	bne.n	80068e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ac:	f043 0201 	orr.w	r2, r3, #1
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	659a      	str	r2, [r3, #88]	; 0x58
 80068b4:	e018      	b.n	80068e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d111      	bne.n	80068e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	f043 0201 	orr.w	r2, r3, #1
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7ff fa9f 	bl	8005e2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80068ee:	e00e      	b.n	800690e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fab3 	bl	8005e68 <HAL_ADC_ErrorCallback>
}
 8006902:	e004      	b.n	800690e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fa8b 	bl	8005e40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006944:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	f043 0204 	orr.w	r2, r3, #4
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff fa85 	bl	8005e68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <LL_ADC_IsEnabled>:
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <LL_ADC_IsEnabled+0x18>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <LL_ADC_IsEnabled+0x1a>
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <LL_ADC_StartCalibration>:
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800699e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	609a      	str	r2, [r3, #8]
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <LL_ADC_IsCalibrationOnGoing>:
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d2:	d101      	bne.n	80069d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d101      	bne.n	80069fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_ADCEx_Calibration_Start+0x1c>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e04d      	b.n	8006ac4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff fea5 	bl	8006780 <ADC_Disable>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d136      	bne.n	8006aae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a48:	f023 0302 	bic.w	r3, r3, #2
 8006a4c:	f043 0202 	orr.w	r2, r3, #2
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff ff96 	bl	800698c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a60:	e014      	b.n	8006a8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006a6e:	d30d      	bcc.n	8006a8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a74:	f023 0312 	bic.w	r3, r3, #18
 8006a78:	f043 0210 	orr.w	r2, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e01b      	b.n	8006ac4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff ff94 	bl	80069be <LL_ADC_IsCalibrationOnGoing>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e2      	bne.n	8006a62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa0:	f023 0303 	bic.w	r3, r3, #3
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8006aac:	e005      	b.n	8006aba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab2:	f043 0210 	orr.w	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b0a1      	sub	sp, #132	; 0x84
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e089      	b.n	8006c62 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006b56:	2300      	movs	r3, #0
 8006b58:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a42      	ldr	r2, [pc, #264]	; (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d102      	bne.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006b68:	4b41      	ldr	r3, [pc, #260]	; (8006c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e001      	b.n	8006b72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e068      	b.n	8006c62 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff ff27 	bl	80069e6 <LL_ADC_REG_IsConversionOngoing>
 8006b98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff ff21 	bl	80069e6 <LL_ADC_REG_IsConversionOngoing>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d14a      	bne.n	8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d147      	bne.n	8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006bb0:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006bb2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d027      	beq.n	8006c0c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6859      	ldr	r1, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bce:	035b      	lsls	r3, r3, #13
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bd8:	4824      	ldr	r0, [pc, #144]	; (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006bda:	f7ff fec4 	bl	8006966 <LL_ADC_IsEnabled>
 8006bde:	4604      	mov	r4, r0
 8006be0:	4823      	ldr	r0, [pc, #140]	; (8006c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006be2:	f7ff fec0 	bl	8006966 <LL_ADC_IsEnabled>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4323      	orrs	r3, r4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d132      	bne.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006bf6:	f023 030f 	bic.w	r3, r3, #15
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	6811      	ldr	r1, [r2, #0]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	6892      	ldr	r2, [r2, #8]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	431a      	orrs	r2, r3
 8006c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c08:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c0a:	e023      	b.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c16:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c18:	4814      	ldr	r0, [pc, #80]	; (8006c6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c1a:	f7ff fea4 	bl	8006966 <LL_ADC_IsEnabled>
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4813      	ldr	r0, [pc, #76]	; (8006c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006c22:	f7ff fea0 	bl	8006966 <LL_ADC_IsEnabled>
 8006c26:	4603      	mov	r3, r0
 8006c28:	4323      	orrs	r3, r4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d112      	bne.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c36:	f023 030f 	bic.w	r3, r3, #15
 8006c3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c3c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c3e:	e009      	b.n	8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006c52:	e000      	b.n	8006c56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006c5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3784      	adds	r7, #132	; 0x84
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd90      	pop	{r4, r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	50040000 	.word	0x50040000
 8006c70:	50040100 	.word	0x50040100
 8006c74:	50040300 	.word	0x50040300

08006c78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0ed      	b.n	8006e66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fd ff26 	bl	8004ae8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cac:	f7fe fa3e 	bl	800512c <HAL_GetTick>
 8006cb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cb2:	e012      	b.n	8006cda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cb4:	f7fe fa3a 	bl	800512c <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b0a      	cmp	r3, #10
 8006cc0:	d90b      	bls.n	8006cda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e0c5      	b.n	8006e66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0e5      	beq.n	8006cb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0202 	bic.w	r2, r2, #2
 8006cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cf8:	f7fe fa18 	bl	800512c <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cfe:	e012      	b.n	8006d26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d00:	f7fe fa14 	bl	800512c <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b0a      	cmp	r3, #10
 8006d0c:	d90b      	bls.n	8006d26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2205      	movs	r2, #5
 8006d1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e09f      	b.n	8006e66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7e1b      	ldrb	r3, [r3, #24]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d108      	bne.n	8006d4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e007      	b.n	8006d5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7e5b      	ldrb	r3, [r3, #25]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d108      	bne.n	8006d78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e007      	b.n	8006d88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7e9b      	ldrb	r3, [r3, #26]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d108      	bne.n	8006da2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0220 	orr.w	r2, r2, #32
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	e007      	b.n	8006db2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0220 	bic.w	r2, r2, #32
 8006db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7edb      	ldrb	r3, [r3, #27]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d108      	bne.n	8006dcc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0210 	bic.w	r2, r2, #16
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e007      	b.n	8006ddc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0210 	orr.w	r2, r2, #16
 8006dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7f1b      	ldrb	r3, [r3, #28]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d108      	bne.n	8006df6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0208 	orr.w	r2, r2, #8
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e007      	b.n	8006e06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0208 	bic.w	r2, r2, #8
 8006e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7f5b      	ldrb	r3, [r3, #29]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d108      	bne.n	8006e20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0204 	orr.w	r2, r2, #4
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e007      	b.n	8006e30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0204 	bic.w	r2, r2, #4
 8006e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	ea42 0103 	orr.w	r1, r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b087      	sub	sp, #28
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006e86:	7cfb      	ldrb	r3, [r7, #19]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d003      	beq.n	8006e94 <HAL_CAN_ConfigFilter+0x26>
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	f040 80aa 	bne.w	8006fe8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e9a:	f043 0201 	orr.w	r2, r3, #1
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2201      	movs	r2, #1
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	401a      	ands	r2, r3
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d123      	bne.n	8006f16 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	401a      	ands	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006ef0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3248      	adds	r2, #72	; 0x48
 8006ef6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	3348      	adds	r3, #72	; 0x48
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	440b      	add	r3, r1
 8006f14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d122      	bne.n	8006f64 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3248      	adds	r2, #72	; 0x48
 8006f44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	3348      	adds	r3, #72	; 0x48
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	440b      	add	r3, r1
 8006f62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	43db      	mvns	r3, r3
 8006f76:	401a      	ands	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006f7e:	e007      	b.n	8006f90 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	401a      	ands	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006faa:	e007      	b.n	8006fbc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d107      	bne.n	8006fd4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e006      	b.n	8006ff6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d12e      	bne.n	8007074 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800702e:	f7fe f87d 	bl	800512c <HAL_GetTick>
 8007032:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007034:	e012      	b.n	800705c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007036:	f7fe f879 	bl	800512c <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b0a      	cmp	r3, #10
 8007042:	d90b      	bls.n	800705c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2205      	movs	r2, #5
 8007054:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e012      	b.n	8007082 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e006      	b.n	8007082 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800708a:	b480      	push	{r7}
 800708c:	b089      	sub	sp, #36	; 0x24
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800709e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80070a8:	7ffb      	ldrb	r3, [r7, #31]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d003      	beq.n	80070b6 <HAL_CAN_AddTxMessage+0x2c>
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f040 80ad 	bne.w	8007210 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8095 	beq.w	8007200 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	0e1b      	lsrs	r3, r3, #24
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80070e0:	2201      	movs	r2, #1
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	409a      	lsls	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10d      	bne.n	800710e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80070fc:	68f9      	ldr	r1, [r7, #12]
 80070fe:	6809      	ldr	r1, [r1, #0]
 8007100:	431a      	orrs	r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	3318      	adds	r3, #24
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	440b      	add	r3, r1
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e00f      	b.n	800712e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007118:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007122:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	3318      	adds	r3, #24
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	440b      	add	r3, r1
 800712c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6819      	ldr	r1, [r3, #0]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	3318      	adds	r3, #24
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	440b      	add	r3, r1
 800713e:	3304      	adds	r3, #4
 8007140:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	7d1b      	ldrb	r3, [r3, #20]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d111      	bne.n	800716e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3318      	adds	r3, #24
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	4413      	add	r3, r2
 8007156:	3304      	adds	r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	6811      	ldr	r1, [r2, #0]
 800715e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	3318      	adds	r3, #24
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	440b      	add	r3, r1
 800716a:	3304      	adds	r3, #4
 800716c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3307      	adds	r3, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	061a      	lsls	r2, r3, #24
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3306      	adds	r3, #6
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3305      	adds	r3, #5
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	4313      	orrs	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	3204      	adds	r2, #4
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	4610      	mov	r0, r2
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	ea43 0200 	orr.w	r2, r3, r0
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	440b      	add	r3, r1
 80071a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80071a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3303      	adds	r3, #3
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	061a      	lsls	r2, r3, #24
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3302      	adds	r3, #2
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3301      	adds	r3, #1
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	4313      	orrs	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	4610      	mov	r0, r2
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	6811      	ldr	r1, [r2, #0]
 80071cc:	ea43 0200 	orr.w	r2, r3, r0
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	440b      	add	r3, r1
 80071d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80071da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3318      	adds	r3, #24
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	4413      	add	r3, r2
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	f043 0201 	orr.w	r2, r3, #1
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	3318      	adds	r3, #24
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	440b      	add	r3, r1
 80071fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e00e      	b.n	800721e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e006      	b.n	800721e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3724      	adds	r7, #36	; 0x24
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800722a:	b480      	push	{r7}
 800722c:	b087      	sub	sp, #28
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800723e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d003      	beq.n	800724e <HAL_CAN_GetRxMessage+0x24>
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b02      	cmp	r3, #2
 800724a:	f040 80f3 	bne.w	8007434 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10e      	bne.n	8007272 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d116      	bne.n	8007290 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0e7      	b.n	8007442 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0d8      	b.n	8007442 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	331b      	adds	r3, #27
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	4413      	add	r3, r2
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0204 	and.w	r2, r3, #4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10c      	bne.n	80072c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	331b      	adds	r3, #27
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	4413      	add	r3, r2
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	0d5b      	lsrs	r3, r3, #21
 80072be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e00b      	b.n	80072e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	331b      	adds	r3, #27
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	4413      	add	r3, r2
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	08db      	lsrs	r3, r3, #3
 80072d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	331b      	adds	r3, #27
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	4413      	add	r3, r2
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0202 	and.w	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	331b      	adds	r3, #27
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	4413      	add	r3, r2
 8007302:	3304      	adds	r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	331b      	adds	r3, #27
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	4413      	add	r3, r2
 800731a:	3304      	adds	r3, #4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	b2da      	uxtb	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	331b      	adds	r3, #27
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	4413      	add	r3, r2
 8007332:	3304      	adds	r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	4413      	add	r3, r2
 8007348:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	4413      	add	r3, r2
 800735e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	0a1a      	lsrs	r2, r3, #8
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	4413      	add	r3, r2
 8007378:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	0c1a      	lsrs	r2, r3, #16
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	3302      	adds	r3, #2
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	4413      	add	r3, r2
 8007392:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0e1a      	lsrs	r2, r3, #24
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	3303      	adds	r3, #3
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	3304      	adds	r3, #4
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	0a1a      	lsrs	r2, r3, #8
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	3305      	adds	r3, #5
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	4413      	add	r3, r2
 80073de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0c1a      	lsrs	r2, r3, #16
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	3306      	adds	r3, #6
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	0e1a      	lsrs	r2, r3, #24
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	3307      	adds	r3, #7
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0220 	orr.w	r2, r2, #32
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	e007      	b.n	8007430 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0220 	orr.w	r2, r2, #32
 800742e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e006      	b.n	8007442 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
  }
}
 8007442:	4618      	mov	r0, r3
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800745e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d002      	beq.n	800746c <HAL_CAN_ActivateNotification+0x1e>
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d109      	bne.n	8007480 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6959      	ldr	r1, [r3, #20]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e006      	b.n	800748e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b08a      	sub	sp, #40	; 0x28
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d07c      	beq.n	80075da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d023      	beq.n	8007532 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2201      	movs	r2, #1
 80074f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f983 	bl	8007808 <HAL_CAN_TxMailbox0CompleteCallback>
 8007502:	e016      	b.n	8007532 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
 8007516:	e00c      	b.n	8007532 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
 800752a:	e002      	b.n	8007532 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f989 	bl	8007844 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d024      	beq.n	8007586 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007544:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f963 	bl	800781c <HAL_CAN_TxMailbox1CompleteCallback>
 8007556:	e016      	b.n	8007586 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
 800756a:	e00c      	b.n	8007586 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
 800757e:	e002      	b.n	8007586 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f969 	bl	8007858 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d024      	beq.n	80075da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007598:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f943 	bl	8007830 <HAL_CAN_TxMailbox2CompleteCallback>
 80075aa:	e016      	b.n	80075da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
 80075be:	e00c      	b.n	80075da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	e002      	b.n	80075da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f949 	bl	800786c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2210      	movs	r2, #16
 80075fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d006      	beq.n	8007620 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2208      	movs	r2, #8
 8007618:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f930 	bl	8007880 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7f9 fe0f 	bl	800125c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007658:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2210      	movs	r2, #16
 8007660:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2208      	movs	r2, #8
 800767c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f912 	bl	80078a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f8f9 	bl	8007894 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2210      	movs	r2, #16
 80076bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8fc 	bl	80078bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2208      	movs	r2, #8
 80076de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f8f5 	bl	80078d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d07b      	beq.n	80077e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d072      	beq.n	80077e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007700:	2b00      	cmp	r3, #0
 8007702:	d008      	beq.n	8007716 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	f043 0302 	orr.w	r3, r3, #2
 8007730:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	f043 0304 	orr.w	r3, r3, #4
 800774c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007754:	2b00      	cmp	r3, #0
 8007756:	d043      	beq.n	80077e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03e      	beq.n	80077e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d02b      	beq.n	80077c4 <HAL_CAN_IRQHandler+0x32a>
 800776c:	2b60      	cmp	r3, #96	; 0x60
 800776e:	d82e      	bhi.n	80077ce <HAL_CAN_IRQHandler+0x334>
 8007770:	2b50      	cmp	r3, #80	; 0x50
 8007772:	d022      	beq.n	80077ba <HAL_CAN_IRQHandler+0x320>
 8007774:	2b50      	cmp	r3, #80	; 0x50
 8007776:	d82a      	bhi.n	80077ce <HAL_CAN_IRQHandler+0x334>
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d019      	beq.n	80077b0 <HAL_CAN_IRQHandler+0x316>
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d826      	bhi.n	80077ce <HAL_CAN_IRQHandler+0x334>
 8007780:	2b30      	cmp	r3, #48	; 0x30
 8007782:	d010      	beq.n	80077a6 <HAL_CAN_IRQHandler+0x30c>
 8007784:	2b30      	cmp	r3, #48	; 0x30
 8007786:	d822      	bhi.n	80077ce <HAL_CAN_IRQHandler+0x334>
 8007788:	2b10      	cmp	r3, #16
 800778a:	d002      	beq.n	8007792 <HAL_CAN_IRQHandler+0x2f8>
 800778c:	2b20      	cmp	r3, #32
 800778e:	d005      	beq.n	800779c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007790:	e01d      	b.n	80077ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800779a:	e019      	b.n	80077d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	f043 0310 	orr.w	r3, r3, #16
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077a4:	e014      	b.n	80077d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	f043 0320 	orr.w	r3, r3, #32
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077ae:	e00f      	b.n	80077d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077b8:	e00a      	b.n	80077d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077c2:	e005      	b.n	80077d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077cc:	e000      	b.n	80077d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80077ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80077de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2204      	movs	r2, #4
 80077e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f872 	bl	80078e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007800:	bf00      	nop
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <__NVIC_SetPriorityGrouping+0x44>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007914:	4013      	ands	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800792a:	4a04      	ldr	r2, [pc, #16]	; (800793c <__NVIC_SetPriorityGrouping+0x44>)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	60d3      	str	r3, [r2, #12]
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <__NVIC_GetPriorityGrouping+0x18>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	0a1b      	lsrs	r3, r3, #8
 800794a:	f003 0307 	and.w	r3, r3, #7
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	e000ed00 	.word	0xe000ed00

0800795c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db0b      	blt.n	8007986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	f003 021f 	and.w	r2, r3, #31
 8007974:	4907      	ldr	r1, [pc, #28]	; (8007994 <__NVIC_EnableIRQ+0x38>)
 8007976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	2001      	movs	r0, #1
 800797e:	fa00 f202 	lsl.w	r2, r0, r2
 8007982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	e000e100 	.word	0xe000e100

08007998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db0a      	blt.n	80079c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	490c      	ldr	r1, [pc, #48]	; (80079e4 <__NVIC_SetPriority+0x4c>)
 80079b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b6:	0112      	lsls	r2, r2, #4
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	440b      	add	r3, r1
 80079bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079c0:	e00a      	b.n	80079d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4908      	ldr	r1, [pc, #32]	; (80079e8 <__NVIC_SetPriority+0x50>)
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	3b04      	subs	r3, #4
 80079d0:	0112      	lsls	r2, r2, #4
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	440b      	add	r3, r1
 80079d6:	761a      	strb	r2, [r3, #24]
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	e000e100 	.word	0xe000e100
 80079e8:	e000ed00 	.word	0xe000ed00

080079ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b089      	sub	sp, #36	; 0x24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f1c3 0307 	rsb	r3, r3, #7
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	bf28      	it	cs
 8007a0a:	2304      	movcs	r3, #4
 8007a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d902      	bls.n	8007a1c <NVIC_EncodePriority+0x30>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3b03      	subs	r3, #3
 8007a1a:	e000      	b.n	8007a1e <NVIC_EncodePriority+0x32>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43da      	mvns	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	401a      	ands	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a34:	f04f 31ff 	mov.w	r1, #4294967295
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3e:	43d9      	mvns	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a44:	4313      	orrs	r3, r2
         );
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3724      	adds	r7, #36	; 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ff4c 	bl	80078f8 <__NVIC_SetPriorityGrouping>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a7a:	f7ff ff61 	bl	8007940 <__NVIC_GetPriorityGrouping>
 8007a7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f7ff ffb1 	bl	80079ec <NVIC_EncodePriority>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff ff80 	bl	8007998 <__NVIC_SetPriority>
}
 8007a98:	bf00      	nop
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff ff54 	bl	800795c <__NVIC_EnableIRQ>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e08d      	b.n	8007bea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4b47      	ldr	r3, [pc, #284]	; (8007bf4 <HAL_DMA_Init+0x138>)
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d80f      	bhi.n	8007afa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	4b45      	ldr	r3, [pc, #276]	; (8007bf8 <HAL_DMA_Init+0x13c>)
 8007ae2:	4413      	add	r3, r2
 8007ae4:	4a45      	ldr	r2, [pc, #276]	; (8007bfc <HAL_DMA_Init+0x140>)
 8007ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	009a      	lsls	r2, r3, #2
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a42      	ldr	r2, [pc, #264]	; (8007c00 <HAL_DMA_Init+0x144>)
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40
 8007af8:	e00e      	b.n	8007b18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	4b40      	ldr	r3, [pc, #256]	; (8007c04 <HAL_DMA_Init+0x148>)
 8007b02:	4413      	add	r3, r2
 8007b04:	4a3d      	ldr	r2, [pc, #244]	; (8007bfc <HAL_DMA_Init+0x140>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	091b      	lsrs	r3, r3, #4
 8007b0c:	009a      	lsls	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a3c      	ldr	r2, [pc, #240]	; (8007c08 <HAL_DMA_Init+0x14c>)
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9b6 	bl	8007edc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b78:	d102      	bne.n	8007b80 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b94:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d010      	beq.n	8007bc0 <HAL_DMA_Init+0x104>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d80c      	bhi.n	8007bc0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f9d6 	bl	8007f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007bbc:	605a      	str	r2, [r3, #4]
 8007bbe:	e008      	b.n	8007bd2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40020407 	.word	0x40020407
 8007bf8:	bffdfff8 	.word	0xbffdfff8
 8007bfc:	cccccccd 	.word	0xcccccccd
 8007c00:	40020000 	.word	0x40020000
 8007c04:	bffdfbf8 	.word	0xbffdfbf8
 8007c08:	40020400 	.word	0x40020400

08007c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_DMA_Start_IT+0x20>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e066      	b.n	8007cfa <HAL_DMA_Start_IT+0xee>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d155      	bne.n	8007cec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f8fb 	bl	8007e60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d008      	beq.n	8007c84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 020e 	orr.w	r2, r2, #14
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e00f      	b.n	8007ca4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0204 	bic.w	r2, r2, #4
 8007c92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 020a 	orr.w	r2, r2, #10
 8007ca2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cc0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0201 	orr.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e005      	b.n	8007cf8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	f003 031c 	and.w	r3, r3, #28
 8007d22:	2204      	movs	r2, #4
 8007d24:	409a      	lsls	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d026      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x7a>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d021      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0204 	bic.w	r2, r2, #4
 8007d54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	f003 021c 	and.w	r2, r3, #28
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	2104      	movs	r1, #4
 8007d64:	fa01 f202 	lsl.w	r2, r1, r2
 8007d68:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d071      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007d7a:	e06c      	b.n	8007e56 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	f003 031c 	and.w	r3, r3, #28
 8007d84:	2202      	movs	r2, #2
 8007d86:	409a      	lsls	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02e      	beq.n	8007dee <HAL_DMA_IRQHandler+0xec>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d029      	beq.n	8007dee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10b      	bne.n	8007dc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 020a 	bic.w	r2, r2, #10
 8007db6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc4:	f003 021c 	and.w	r2, r3, #28
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dcc:	2102      	movs	r1, #2
 8007dce:	fa01 f202 	lsl.w	r2, r1, r2
 8007dd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d038      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007dec:	e033      	b.n	8007e56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	f003 031c 	and.w	r3, r3, #28
 8007df6:	2208      	movs	r2, #8
 8007df8:	409a      	lsls	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d02a      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x156>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d025      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 020e 	bic.w	r2, r2, #14
 8007e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e20:	f003 021c 	and.w	r2, r3, #28
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	2101      	movs	r1, #1
 8007e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
}
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e76:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e88:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	f003 021c 	and.w	r2, r3, #28
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	2101      	movs	r1, #1
 8007e98:	fa01 f202 	lsl.w	r2, r1, r2
 8007e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d108      	bne.n	8007ec0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007ebe:	e007      	b.n	8007ed0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d80a      	bhi.n	8007f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007efc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6493      	str	r3, [r2, #72]	; 0x48
 8007f04:	e007      	b.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	089b      	lsrs	r3, r3, #2
 8007f0c:	009a      	lsls	r2, r3, #2
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	3b08      	subs	r3, #8
 8007f1e:	4a0c      	ldr	r2, [pc, #48]	; (8007f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007f20:	fba2 2303 	umull	r2, r3, r2, r3
 8007f24:	091b      	lsrs	r3, r3, #4
 8007f26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a0a      	ldr	r2, [pc, #40]	; (8007f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 031f 	and.w	r3, r3, #31
 8007f34:	2201      	movs	r2, #1
 8007f36:	409a      	lsls	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40020407 	.word	0x40020407
 8007f4c:	4002081c 	.word	0x4002081c
 8007f50:	cccccccd 	.word	0xcccccccd
 8007f54:	40020880 	.word	0x40020880

08007f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	2201      	movs	r2, #1
 8007f86:	409a      	lsls	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007f8c:	bf00      	nop
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	1000823f 	.word	0x1000823f
 8007f9c:	40020940 	.word	0x40020940

08007fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fae:	e166      	b.n	800827e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8158 	beq.w	8008278 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d005      	beq.n	8007fe0 <HAL_GPIO_Init+0x40>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d130      	bne.n	8008042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	2203      	movs	r2, #3
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008016:	2201      	movs	r2, #1
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43db      	mvns	r3, r3
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4013      	ands	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	f003 0201 	and.w	r2, r3, #1
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d017      	beq.n	800807e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	2203      	movs	r2, #3
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	4013      	ands	r3, r2
 8008064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d123      	bne.n	80080d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	08da      	lsrs	r2, r3, #3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3208      	adds	r2, #8
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	220f      	movs	r2, #15
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	4013      	ands	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	08da      	lsrs	r2, r3, #3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3208      	adds	r2, #8
 80080cc:	6939      	ldr	r1, [r7, #16]
 80080ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	2203      	movs	r2, #3
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43db      	mvns	r3, r3
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4013      	ands	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f003 0203 	and.w	r2, r3, #3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80b2 	beq.w	8008278 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008114:	4b61      	ldr	r3, [pc, #388]	; (800829c <HAL_GPIO_Init+0x2fc>)
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	4a60      	ldr	r2, [pc, #384]	; (800829c <HAL_GPIO_Init+0x2fc>)
 800811a:	f043 0301 	orr.w	r3, r3, #1
 800811e:	6613      	str	r3, [r2, #96]	; 0x60
 8008120:	4b5e      	ldr	r3, [pc, #376]	; (800829c <HAL_GPIO_Init+0x2fc>)
 8008122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	60bb      	str	r3, [r7, #8]
 800812a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800812c:	4a5c      	ldr	r2, [pc, #368]	; (80082a0 <HAL_GPIO_Init+0x300>)
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	089b      	lsrs	r3, r3, #2
 8008132:	3302      	adds	r3, #2
 8008134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	220f      	movs	r2, #15
 8008144:	fa02 f303 	lsl.w	r3, r2, r3
 8008148:	43db      	mvns	r3, r3
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4013      	ands	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008156:	d02b      	beq.n	80081b0 <HAL_GPIO_Init+0x210>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a52      	ldr	r2, [pc, #328]	; (80082a4 <HAL_GPIO_Init+0x304>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d025      	beq.n	80081ac <HAL_GPIO_Init+0x20c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a51      	ldr	r2, [pc, #324]	; (80082a8 <HAL_GPIO_Init+0x308>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d01f      	beq.n	80081a8 <HAL_GPIO_Init+0x208>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a50      	ldr	r2, [pc, #320]	; (80082ac <HAL_GPIO_Init+0x30c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d019      	beq.n	80081a4 <HAL_GPIO_Init+0x204>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a4f      	ldr	r2, [pc, #316]	; (80082b0 <HAL_GPIO_Init+0x310>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_GPIO_Init+0x200>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a4e      	ldr	r2, [pc, #312]	; (80082b4 <HAL_GPIO_Init+0x314>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00d      	beq.n	800819c <HAL_GPIO_Init+0x1fc>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a4d      	ldr	r2, [pc, #308]	; (80082b8 <HAL_GPIO_Init+0x318>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d007      	beq.n	8008198 <HAL_GPIO_Init+0x1f8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a4c      	ldr	r2, [pc, #304]	; (80082bc <HAL_GPIO_Init+0x31c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d101      	bne.n	8008194 <HAL_GPIO_Init+0x1f4>
 8008190:	2307      	movs	r3, #7
 8008192:	e00e      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 8008194:	2308      	movs	r3, #8
 8008196:	e00c      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 8008198:	2306      	movs	r3, #6
 800819a:	e00a      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 800819c:	2305      	movs	r3, #5
 800819e:	e008      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 80081a0:	2304      	movs	r3, #4
 80081a2:	e006      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 80081a4:	2303      	movs	r3, #3
 80081a6:	e004      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e002      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e000      	b.n	80081b2 <HAL_GPIO_Init+0x212>
 80081b0:	2300      	movs	r3, #0
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	f002 0203 	and.w	r2, r2, #3
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	4093      	lsls	r3, r2
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80081c2:	4937      	ldr	r1, [pc, #220]	; (80082a0 <HAL_GPIO_Init+0x300>)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	089b      	lsrs	r3, r3, #2
 80081c8:	3302      	adds	r3, #2
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081d0:	4b3b      	ldr	r3, [pc, #236]	; (80082c0 <HAL_GPIO_Init+0x320>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	43db      	mvns	r3, r3
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4013      	ands	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081f4:	4a32      	ldr	r2, [pc, #200]	; (80082c0 <HAL_GPIO_Init+0x320>)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081fa:	4b31      	ldr	r3, [pc, #196]	; (80082c0 <HAL_GPIO_Init+0x320>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	43db      	mvns	r3, r3
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4013      	ands	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800821e:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <HAL_GPIO_Init+0x320>)
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008224:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <HAL_GPIO_Init+0x320>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	43db      	mvns	r3, r3
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4013      	ands	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008248:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <HAL_GPIO_Init+0x320>)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800824e:	4b1c      	ldr	r3, [pc, #112]	; (80082c0 <HAL_GPIO_Init+0x320>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	43db      	mvns	r3, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4013      	ands	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008272:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <HAL_GPIO_Init+0x320>)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	3301      	adds	r3, #1
 800827c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	fa22 f303 	lsr.w	r3, r2, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f ae91 	bne.w	8007fb0 <HAL_GPIO_Init+0x10>
  }
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40021000 	.word	0x40021000
 80082a0:	40010000 	.word	0x40010000
 80082a4:	48000400 	.word	0x48000400
 80082a8:	48000800 	.word	0x48000800
 80082ac:	48000c00 	.word	0x48000c00
 80082b0:	48001000 	.word	0x48001000
 80082b4:	48001400 	.word	0x48001400
 80082b8:	48001800 	.word	0x48001800
 80082bc:	48001c00 	.word	0x48001c00
 80082c0:	40010400 	.word	0x40010400

080082c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
 80082e0:	e001      	b.n	80082e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	807b      	strh	r3, [r7, #2]
 8008300:	4613      	mov	r3, r2
 8008302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008304:	787b      	ldrb	r3, [r7, #1]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800830a:	887a      	ldrh	r2, [r7, #2]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008310:	e002      	b.n	8008318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008312:	887a      	ldrh	r2, [r7, #2]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008326:	b08f      	sub	sp, #60	; 0x3c
 8008328:	af0a      	add	r7, sp, #40	; 0x28
 800832a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e116      	b.n	8008564 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f00a fd3b 	bl	8012dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2203      	movs	r2, #3
 800835a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f004 fe34 	bl	800cfe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	687e      	ldr	r6, [r7, #4]
 8008382:	466d      	mov	r5, sp
 8008384:	f106 0410 	add.w	r4, r6, #16
 8008388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800838a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800838c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800838e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008394:	e885 0003 	stmia.w	r5, {r0, r1}
 8008398:	1d33      	adds	r3, r6, #4
 800839a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800839c:	6838      	ldr	r0, [r7, #0]
 800839e:	f004 fd47 	bl	800ce30 <USB_CoreInit>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0d7      	b.n	8008564 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f004 fe22 	bl	800d004 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]
 80083c4:	e04a      	b.n	800845c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083c6:	7bfa      	ldrb	r2, [r7, #15]
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	333d      	adds	r3, #61	; 0x3d
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083da:	7bfa      	ldrb	r2, [r7, #15]
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	333c      	adds	r3, #60	; 0x3c
 80083ea:	7bfa      	ldrb	r2, [r7, #15]
 80083ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083ee:	7bfa      	ldrb	r2, [r7, #15]
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	b298      	uxth	r0, r3
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	3344      	adds	r3, #68	; 0x44
 8008402:	4602      	mov	r2, r0
 8008404:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008406:	7bfa      	ldrb	r2, [r7, #15]
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	4613      	mov	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	440b      	add	r3, r1
 8008414:	3340      	adds	r3, #64	; 0x40
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800841a:	7bfa      	ldrb	r2, [r7, #15]
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3348      	adds	r3, #72	; 0x48
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800842e:	7bfa      	ldrb	r2, [r7, #15]
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	440b      	add	r3, r1
 800843c:	334c      	adds	r3, #76	; 0x4c
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008442:	7bfa      	ldrb	r2, [r7, #15]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	3354      	adds	r3, #84	; 0x54
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	3301      	adds	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	7bfa      	ldrb	r2, [r7, #15]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d3af      	bcc.n	80083c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	e044      	b.n	80084f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800846c:	7bfa      	ldrb	r2, [r7, #15]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008482:	7bfa      	ldrb	r2, [r7, #15]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008494:	7bfa      	ldrb	r2, [r7, #15]
 8008496:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008498:	7bfa      	ldrb	r2, [r7, #15]
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	4613      	mov	r3, r2
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084ae:	7bfa      	ldrb	r2, [r7, #15]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084c4:	7bfa      	ldrb	r2, [r7, #15]
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084da:	7bfa      	ldrb	r2, [r7, #15]
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	4613      	mov	r3, r2
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	440b      	add	r3, r1
 80084e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	3301      	adds	r3, #1
 80084f4:	73fb      	strb	r3, [r7, #15]
 80084f6:	7bfa      	ldrb	r2, [r7, #15]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d3b5      	bcc.n	800846c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	687e      	ldr	r6, [r7, #4]
 8008508:	466d      	mov	r5, sp
 800850a:	f106 0410 	add.w	r4, r6, #16
 800850e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800851a:	e885 0003 	stmia.w	r5, {r0, r1}
 800851e:	1d33      	adds	r3, r6, #4
 8008520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008522:	6838      	ldr	r0, [r7, #0]
 8008524:	f004 fdba 	bl	800d09c <USB_DevInit>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e014      	b.n	8008564 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b01      	cmp	r3, #1
 8008550:	d102      	bne.n	8008558 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 f882 	bl	800965c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4618      	mov	r0, r3
 800855e:	f005 fe42 	bl	800e1e6 <USB_DevDisconnect>

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800856c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_PCD_Start+0x1c>
 8008584:	2302      	movs	r3, #2
 8008586:	e01c      	b.n	80085c2 <HAL_PCD_Start+0x56>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	2b01      	cmp	r3, #1
 8008596:	d105      	bne.n	80085a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f004 fd09 	bl	800cfc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f005 fdf6 	bl	800e1a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80085ca:	b590      	push	{r4, r7, lr}
 80085cc:	b08d      	sub	sp, #52	; 0x34
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f005 feb4 	bl	800e34e <USB_GetMode>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f040 847e 	bne.w	8008eea <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f005 fe18 	bl	800e228 <USB_ReadInterrupts>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 8474 	beq.w	8008ee8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	0a1b      	lsrs	r3, r3, #8
 800860a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f005 fe05 	bl	800e228 <USB_ReadInterrupts>
 800861e:	4603      	mov	r3, r0
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b02      	cmp	r3, #2
 8008626:	d107      	bne.n	8008638 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695a      	ldr	r2, [r3, #20]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f002 0202 	and.w	r2, r2, #2
 8008636:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	f005 fdf3 	bl	800e228 <USB_ReadInterrupts>
 8008642:	4603      	mov	r3, r0
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b10      	cmp	r3, #16
 800864a:	d161      	bne.n	8008710 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0210 	bic.w	r2, r2, #16
 800865a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	f003 020f 	and.w	r2, r3, #15
 8008668:	4613      	mov	r3, r2
 800866a:	00db      	lsls	r3, r3, #3
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	3304      	adds	r3, #4
 800867a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	0c5b      	lsrs	r3, r3, #17
 8008680:	f003 030f 	and.w	r3, r3, #15
 8008684:	2b02      	cmp	r3, #2
 8008686:	d124      	bne.n	80086d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d035      	beq.n	8008700 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	091b      	lsrs	r3, r3, #4
 800869c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800869e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	6a38      	ldr	r0, [r7, #32]
 80086a8:	f005 fc2a 	bl	800df00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	091b      	lsrs	r3, r3, #4
 80086b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086b8:	441a      	add	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a1a      	ldr	r2, [r3, #32]
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	091b      	lsrs	r3, r3, #4
 80086c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ca:	441a      	add	r2, r3
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	621a      	str	r2, [r3, #32]
 80086d0:	e016      	b.n	8008700 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	0c5b      	lsrs	r3, r3, #17
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d110      	bne.n	8008700 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086e4:	2208      	movs	r2, #8
 80086e6:	4619      	mov	r1, r3
 80086e8:	6a38      	ldr	r0, [r7, #32]
 80086ea:	f005 fc09 	bl	800df00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	091b      	lsrs	r3, r3, #4
 80086f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086fa:	441a      	add	r2, r3
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0210 	orr.w	r2, r2, #16
 800870e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f005 fd87 	bl	800e228 <USB_ReadInterrupts>
 800871a:	4603      	mov	r3, r0
 800871c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008724:	f040 80a7 	bne.w	8008876 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4618      	mov	r0, r3
 8008732:	f005 fd8c 	bl	800e24e <USB_ReadDevAllOutEpInterrupt>
 8008736:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008738:	e099      	b.n	800886e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 808e 	beq.w	8008862 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	4611      	mov	r1, r2
 8008750:	4618      	mov	r0, r3
 8008752:	f005 fdb0 	bl	800e2b6 <USB_ReadDevOutEPInterrupt>
 8008756:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00c      	beq.n	800877c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	461a      	mov	r2, r3
 8008770:	2301      	movs	r3, #1
 8008772:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fe96 	bl	80094a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00c      	beq.n	80087a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	461a      	mov	r2, r3
 8008794:	2308      	movs	r3, #8
 8008796:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fed2 	bl	8009544 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d008      	beq.n	80087bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b6:	461a      	mov	r2, r3
 80087b8:	2310      	movs	r3, #16
 80087ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d030      	beq.n	8008828 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ce:	2b80      	cmp	r3, #128	; 0x80
 80087d0:	d109      	bne.n	80087e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80087e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e8:	4613      	mov	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	3304      	adds	r3, #4
 80087fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d108      	bne.n	8008816 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2200      	movs	r2, #0
 8008808:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f00a fc1f 	bl	8013054 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	461a      	mov	r2, r3
 8008824:	2302      	movs	r3, #2
 8008826:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d008      	beq.n	8008844 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883e:	461a      	mov	r2, r3
 8008840:	2320      	movs	r3, #32
 8008842:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	461a      	mov	r2, r3
 800885c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008860:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	3301      	adds	r3, #1
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	2b00      	cmp	r3, #0
 8008872:	f47f af62 	bne.w	800873a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f005 fcd4 	bl	800e228 <USB_ReadInterrupts>
 8008880:	4603      	mov	r3, r0
 8008882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800888a:	f040 80a4 	bne.w	80089d6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f005 fcf5 	bl	800e282 <USB_ReadDevAllInEpInterrupt>
 8008898:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800889e:	e096      	b.n	80089ce <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 808b 	beq.w	80089c2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f005 fd1b 	bl	800e2f2 <USB_ReadDevInEPInterrupt>
 80088bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d020      	beq.n	800890a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	2201      	movs	r2, #1
 80088d0:	fa02 f303 	lsl.w	r3, r2, r3
 80088d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	43db      	mvns	r3, r3
 80088e2:	69f9      	ldr	r1, [r7, #28]
 80088e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e8:	4013      	ands	r3, r2
 80088ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	461a      	mov	r2, r3
 80088fa:	2301      	movs	r3, #1
 80088fc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f00a fb10 	bl	8012f2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	461a      	mov	r2, r3
 8008922:	2308      	movs	r3, #8
 8008924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893c:	461a      	mov	r2, r3
 800893e:	2310      	movs	r3, #16
 8008940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	461a      	mov	r2, r3
 800895a:	2340      	movs	r3, #64	; 0x40
 800895c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d023      	beq.n	80089b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800896a:	6a38      	ldr	r0, [r7, #32]
 800896c:	f004 fce2 	bl	800d334 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3338      	adds	r3, #56	; 0x38
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4413      	add	r3, r2
 8008980:	3304      	adds	r3, #4
 8008982:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	78db      	ldrb	r3, [r3, #3]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d108      	bne.n	800899e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2200      	movs	r2, #0
 8008990:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	b2db      	uxtb	r3, r3
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f00a fb6d 	bl	8013078 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089aa:	461a      	mov	r2, r3
 80089ac:	2302      	movs	r3, #2
 80089ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fcea 	bl	8009396 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	3301      	adds	r3, #1
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f47f af65 	bne.w	80088a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f005 fc24 	bl	800e228 <USB_ReadInterrupts>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089ea:	d122      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d108      	bne.n	8008a1c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f00a fd9f 	bl	8013558 <HAL_PCDEx_LPM_Callback>
 8008a1a:	e002      	b.n	8008a22 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f00a faf1 	bl	8013004 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695a      	ldr	r2, [r3, #20]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f005 fbf6 	bl	800e228 <USB_ReadInterrupts>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a46:	d112      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d102      	bne.n	8008a5e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f00a faad 	bl	8012fb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695a      	ldr	r2, [r3, #20]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f005 fbd8 	bl	800e228 <USB_ReadInterrupts>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a82:	d121      	bne.n	8008ac8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d111      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aac:	089b      	lsrs	r3, r3, #2
 8008aae:	f003 020f 	and.w	r2, r3, #15
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f00a fd4c 	bl	8013558 <HAL_PCDEx_LPM_Callback>
 8008ac0:	e002      	b.n	8008ac8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f00a fa78 	bl	8012fb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f005 fbab 	bl	800e228 <USB_ReadInterrupts>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008adc:	f040 80b5 	bne.w	8008c4a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aee:	f023 0301 	bic.w	r3, r3, #1
 8008af2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2110      	movs	r1, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f004 fc1a 	bl	800d334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b04:	e046      	b.n	8008b94 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	461a      	mov	r2, r3
 8008b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b46:	461a      	mov	r2, r3
 8008b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	3301      	adds	r3, #1
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d3b3      	bcc.n	8008b06 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008bb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d016      	beq.n	8008be8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bca:	f043 030b 	orr.w	r3, r3, #11
 8008bce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be0:	f043 030b 	orr.w	r3, r3, #11
 8008be4:	6453      	str	r3, [r2, #68]	; 0x44
 8008be6:	e015      	b.n	8008c14 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008bfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008bfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c0e:	f043 030b 	orr.w	r3, r3, #11
 8008c12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f005 fbbb 	bl	800e3b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f005 faea 	bl	800e228 <USB_ReadInterrupts>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5e:	d124      	bne.n	8008caa <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f005 fb80 	bl	800e36a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f004 fbdd 	bl	800d42e <USB_GetDevSpeed>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681c      	ldr	r4, [r3, #0]
 8008c80:	f001 fc92 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 8008c84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f004 f8fa 	bl	800ce88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f00a f970 	bl	8012f7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f005 faba 	bl	800e228 <USB_ReadInterrupts>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d10a      	bne.n	8008cd4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f00a f94d 	bl	8012f5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f002 0208 	and.w	r2, r2, #8
 8008cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f005 faa5 	bl	800e228 <USB_ReadInterrupts>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce4:	2b80      	cmp	r3, #128	; 0x80
 8008ce6:	d122      	bne.n	8008d2e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf8:	e014      	b.n	8008d24 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fb0b 	bl	8009334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	3301      	adds	r3, #1
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3e5      	bcc.n	8008cfa <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f005 fa78 	bl	800e228 <USB_ReadInterrupts>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d42:	d13b      	bne.n	8008dbc <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d44:	2301      	movs	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
 8008d48:	e02b      	b.n	8008da2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3340      	adds	r3, #64	; 0x40
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d115      	bne.n	8008d9c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da12      	bge.n	8008d9c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	333f      	adds	r3, #63	; 0x3f
 8008d86:	2201      	movs	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 facc 	bl	8009334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	3301      	adds	r3, #1
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3ce      	bcc.n	8008d4a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f005 fa31 	bl	800e228 <USB_ReadInterrupts>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dd0:	d155      	bne.n	8008e7e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd6:	e045      	b.n	8008e64 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dec:	4613      	mov	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d12e      	bne.n	8008e5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da2b      	bge.n	8008e5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d121      	bne.n	8008e5e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1e:	4613      	mov	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10a      	bne.n	8008e5e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e5a:	6053      	str	r3, [r2, #4]
            break;
 8008e5c:	e007      	b.n	8008e6e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	3301      	adds	r3, #1
 8008e62:	627b      	str	r3, [r7, #36]	; 0x24
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d3b4      	bcc.n	8008dd8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	695a      	ldr	r2, [r3, #20]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f005 f9d0 	bl	800e228 <USB_ReadInterrupts>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e92:	d10a      	bne.n	8008eaa <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f00a f901 	bl	801309c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695a      	ldr	r2, [r3, #20]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f005 f9ba 	bl	800e228 <USB_ReadInterrupts>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d115      	bne.n	8008eea <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f00a f8f1 	bl	80130b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6859      	ldr	r1, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	605a      	str	r2, [r3, #4]
 8008ee6:	e000      	b.n	8008eea <HAL_PCD_IRQHandler+0x920>
      return;
 8008ee8:	bf00      	nop
    }
  }
}
 8008eea:	3734      	adds	r7, #52	; 0x34
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_PCD_SetAddress+0x1a>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e013      	b.n	8008f32 <HAL_PCD_SetAddress+0x42>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f005 f918 	bl	800e158 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	461a      	mov	r2, r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	70fb      	strb	r3, [r7, #3]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	803b      	strh	r3, [r7, #0]
 8008f50:	4613      	mov	r3, r2
 8008f52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	da0f      	bge.n	8008f80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	f003 020f 	and.w	r2, r3, #15
 8008f66:	4613      	mov	r3, r2
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	3338      	adds	r3, #56	; 0x38
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4413      	add	r3, r2
 8008f74:	3304      	adds	r3, #4
 8008f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	705a      	strb	r2, [r3, #1]
 8008f7e:	e00f      	b.n	8008fa0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	f003 020f 	and.w	r2, r3, #15
 8008f86:	4613      	mov	r3, r2
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	4413      	add	r3, r2
 8008f96:	3304      	adds	r3, #4
 8008f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fac:	883a      	ldrh	r2, [r7, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	78ba      	ldrb	r2, [r7, #2]
 8008fb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d004      	beq.n	8008fca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fca:	78bb      	ldrb	r3, [r7, #2]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d102      	bne.n	8008fd6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d101      	bne.n	8008fe4 <HAL_PCD_EP_Open+0xaa>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e00e      	b.n	8009002 <HAL_PCD_EP_Open+0xc8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68f9      	ldr	r1, [r7, #12]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f004 fa3a 	bl	800d46c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009000:	7afb      	ldrb	r3, [r7, #11]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da0f      	bge.n	800903e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f003 020f 	and.w	r2, r3, #15
 8009024:	4613      	mov	r3, r2
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	3338      	adds	r3, #56	; 0x38
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	3304      	adds	r3, #4
 8009034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	705a      	strb	r2, [r3, #1]
 800903c:	e00f      	b.n	800905e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	4613      	mov	r3, r2
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	3304      	adds	r3, #4
 8009056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	f003 030f 	and.w	r3, r3, #15
 8009064:	b2da      	uxtb	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_PCD_EP_Close+0x6e>
 8009074:	2302      	movs	r3, #2
 8009076:	e00e      	b.n	8009096 <HAL_PCD_EP_Close+0x8c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	4618      	mov	r0, r3
 8009088:	f004 fa78 	bl	800d57c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b086      	sub	sp, #24
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
 80090aa:	460b      	mov	r3, r1
 80090ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	f003 020f 	and.w	r2, r3, #15
 80090b4:	4613      	mov	r3, r2
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	3304      	adds	r3, #4
 80090c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2200      	movs	r2, #0
 80090d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2200      	movs	r2, #0
 80090de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090e0:	7afb      	ldrb	r3, [r7, #11]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6979      	ldr	r1, [r7, #20]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f004 fcf9 	bl	800daf4 <USB_EP0StartXfer>
 8009102:	e005      	b.n	8009110 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	4618      	mov	r0, r3
 800910c:	f004 fb12 	bl	800d734 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800913c:	681b      	ldr	r3, [r3, #0]
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	460b      	mov	r3, r1
 8009158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3338      	adds	r3, #56	; 0x38
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6979      	ldr	r1, [r7, #20]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f004 fca4 	bl	800daf4 <USB_EP0StartXfer>
 80091ac:	e005      	b.n	80091ba <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6979      	ldr	r1, [r7, #20]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f004 fabd 	bl	800d734 <USB_EPStartXfer>
  }

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	f003 020f 	and.w	r2, r3, #15
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d901      	bls.n	80091e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e04e      	b.n	8009280 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	da0f      	bge.n	800920a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	f003 020f 	and.w	r2, r3, #15
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	3338      	adds	r3, #56	; 0x38
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	3304      	adds	r3, #4
 8009200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2201      	movs	r2, #1
 8009206:	705a      	strb	r2, [r3, #1]
 8009208:	e00d      	b.n	8009226 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4613      	mov	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	3304      	adds	r3, #4
 800921e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	b2da      	uxtb	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_PCD_EP_SetStall+0x82>
 8009242:	2302      	movs	r3, #2
 8009244:	e01c      	b.n	8009280 <HAL_PCD_EP_SetStall+0xbc>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68f9      	ldr	r1, [r7, #12]
 8009254:	4618      	mov	r0, r3
 8009256:	f004 feab 	bl	800dfb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	2b00      	cmp	r3, #0
 8009262:	d108      	bne.n	8009276 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f005 f89d 	bl	800e3b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	f003 020f 	and.w	r2, r3, #15
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d901      	bls.n	80092a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e042      	b.n	800932c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	da0f      	bge.n	80092ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	f003 020f 	and.w	r2, r3, #15
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	3338      	adds	r3, #56	; 0x38
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	4413      	add	r3, r2
 80092c2:	3304      	adds	r3, #4
 80092c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	705a      	strb	r2, [r3, #1]
 80092cc:	e00f      	b.n	80092ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	4613      	mov	r3, r2
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	4413      	add	r3, r2
 80092e4:	3304      	adds	r3, #4
 80092e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_PCD_EP_ClrStall+0x86>
 800930a:	2302      	movs	r3, #2
 800930c:	e00e      	b.n	800932c <HAL_PCD_EP_ClrStall+0xa4>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	4618      	mov	r0, r3
 800931e:	f004 feb5 	bl	800e08c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009344:	2b00      	cmp	r3, #0
 8009346:	da0c      	bge.n	8009362 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	f003 020f 	and.w	r2, r3, #15
 800934e:	4613      	mov	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	3338      	adds	r3, #56	; 0x38
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4413      	add	r3, r2
 800935c:	3304      	adds	r3, #4
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e00c      	b.n	800937c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	f003 020f 	and.w	r2, r3, #15
 8009368:	4613      	mov	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	4413      	add	r3, r2
 8009378:	3304      	adds	r3, #4
 800937a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68f9      	ldr	r1, [r7, #12]
 8009382:	4618      	mov	r0, r3
 8009384:	f004 fcd8 	bl	800dd38 <USB_EPStopXfer>
 8009388:	4603      	mov	r3, r0
 800938a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800938c:	7afb      	ldrb	r3, [r7, #11]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b088      	sub	sp, #32
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	3338      	adds	r3, #56	; 0x38
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4413      	add	r3, r2
 80093ba:	3304      	adds	r3, #4
 80093bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a1a      	ldr	r2, [r3, #32]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d901      	bls.n	80093ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e067      	b.n	800949e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d902      	bls.n	80093ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	3303      	adds	r3, #3
 80093ee:	089b      	lsrs	r3, r3, #2
 80093f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093f2:	e026      	b.n	8009442 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	69fa      	ldr	r2, [r7, #28]
 8009406:	429a      	cmp	r2, r3
 8009408:	d902      	bls.n	8009410 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	3303      	adds	r3, #3
 8009414:	089b      	lsrs	r3, r3, #2
 8009416:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6919      	ldr	r1, [r3, #16]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	b29b      	uxth	r3, r3
 8009424:	6978      	ldr	r0, [r7, #20]
 8009426:	f004 fd31 	bl	800de8c <USB_WritePacket>

    ep->xfer_buff  += len;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	691a      	ldr	r2, [r3, #16]
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	441a      	add	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a1a      	ldr	r2, [r3, #32]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	441a      	add	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	b29b      	uxth	r3, r3
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	429a      	cmp	r2, r3
 8009456:	d809      	bhi.n	800946c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a1a      	ldr	r2, [r3, #32]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009460:	429a      	cmp	r2, r3
 8009462:	d203      	bcs.n	800946c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1c3      	bne.n	80093f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	429a      	cmp	r2, r3
 8009476:	d811      	bhi.n	800949c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	2201      	movs	r2, #1
 8009480:	fa02 f303 	lsl.w	r3, r2, r3
 8009484:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	43db      	mvns	r3, r3
 8009492:	6939      	ldr	r1, [r7, #16]
 8009494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009498:	4013      	ands	r3, r2
 800949a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	333c      	adds	r3, #60	; 0x3c
 80094c0:	3304      	adds	r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a19      	ldr	r2, [pc, #100]	; (8009540 <PCD_EP_OutXfrComplete_int+0x98>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d124      	bne.n	8009528 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	461a      	mov	r2, r3
 80094f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094fa:	6093      	str	r3, [r2, #8]
 80094fc:	e01a      	b.n	8009534 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	461a      	mov	r2, r3
 8009516:	2320      	movs	r3, #32
 8009518:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f009 fce7 	bl	8012ef4 <HAL_PCD_DataOutStageCallback>
 8009526:	e005      	b.n	8009534 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f009 fce0 	bl	8012ef4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	4f54310a 	.word	0x4f54310a

08009544 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	333c      	adds	r3, #60	; 0x3c
 800955c:	3304      	adds	r3, #4
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <PCD_EP_OutSetupPacket_int+0x64>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d90e      	bls.n	8009598 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009590:	461a      	mov	r2, r3
 8009592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009596:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f009 fc99 	bl	8012ed0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	4f54300a 	.word	0x4f54300a

080095ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
 80095b8:	4613      	mov	r3, r2
 80095ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d107      	bne.n	80095da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80095ca:	883b      	ldrh	r3, [r7, #0]
 80095cc:	0419      	lsls	r1, r3, #16
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	629a      	str	r2, [r3, #40]	; 0x28
 80095d8:	e028      	b.n	800962c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	0c1b      	lsrs	r3, r3, #16
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
 80095ec:	e00d      	b.n	800960a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	3340      	adds	r3, #64	; 0x40
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	4413      	add	r3, r2
 8009602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	3301      	adds	r3, #1
 8009608:	73fb      	strb	r3, [r7, #15]
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	3b01      	subs	r3, #1
 8009610:	429a      	cmp	r2, r3
 8009612:	d3ec      	bcc.n	80095ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009614:	883b      	ldrh	r3, [r7, #0]
 8009616:	0418      	lsls	r0, r3, #16
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6819      	ldr	r1, [r3, #0]
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	3b01      	subs	r3, #1
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	4302      	orrs	r2, r0
 8009624:	3340      	adds	r3, #64	; 0x40
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	887a      	ldrh	r2, [r7, #2]
 800964c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968e:	f043 0303 	orr.w	r3, r3, #3
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b6:	d104      	bne.n	80096c2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f908 	bl	80098d0 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80096c0:	e003      	b.n	80096ca <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f8d9 	bl	800987c <HAL_PWREx_EnterSTOP0Mode>
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <HAL_PWREx_GetVoltageRange+0x3c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e4:	d102      	bne.n	80096ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80096e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ea:	e00b      	b.n	8009704 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80096ec:	4b08      	ldr	r3, [pc, #32]	; (8009710 <HAL_PWREx_GetVoltageRange+0x3c>)
 80096ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fa:	d102      	bne.n	8009702 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80096fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009700:	e000      	b.n	8009704 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009702:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009704:	4618      	mov	r0, r3
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40007000 	.word	0x40007000

08009714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d141      	bne.n	80097a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009722:	4b4b      	ldr	r3, [pc, #300]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800972a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800972e:	d131      	bne.n	8009794 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009730:	4b47      	ldr	r3, [pc, #284]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009736:	4a46      	ldr	r2, [pc, #280]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009740:	4b43      	ldr	r3, [pc, #268]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009748:	4a41      	ldr	r2, [pc, #260]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800974a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800974e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009750:	4b40      	ldr	r3, [pc, #256]	; (8009854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2232      	movs	r2, #50	; 0x32
 8009756:	fb02 f303 	mul.w	r3, r2, r3
 800975a:	4a3f      	ldr	r2, [pc, #252]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800975c:	fba2 2303 	umull	r2, r3, r2, r3
 8009760:	0c9b      	lsrs	r3, r3, #18
 8009762:	3301      	adds	r3, #1
 8009764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009766:	e002      	b.n	800976e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3b01      	subs	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800976e:	4b38      	ldr	r3, [pc, #224]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977a:	d102      	bne.n	8009782 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f2      	bne.n	8009768 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009782:	4b33      	ldr	r3, [pc, #204]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800978a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800978e:	d158      	bne.n	8009842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e057      	b.n	8009844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009794:	4b2e      	ldr	r3, [pc, #184]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800979a:	4a2d      	ldr	r2, [pc, #180]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800979c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80097a4:	e04d      	b.n	8009842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ac:	d141      	bne.n	8009832 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097ae:	4b28      	ldr	r3, [pc, #160]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ba:	d131      	bne.n	8009820 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097bc:	4b24      	ldr	r3, [pc, #144]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097c2:	4a23      	ldr	r2, [pc, #140]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097cc:	4b20      	ldr	r3, [pc, #128]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097d4:	4a1e      	ldr	r2, [pc, #120]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097dc:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2232      	movs	r2, #50	; 0x32
 80097e2:	fb02 f303 	mul.w	r3, r2, r3
 80097e6:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097e8:	fba2 2303 	umull	r2, r3, r2, r3
 80097ec:	0c9b      	lsrs	r3, r3, #18
 80097ee:	3301      	adds	r3, #1
 80097f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097f2:	e002      	b.n	80097fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097fa:	4b15      	ldr	r3, [pc, #84]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009806:	d102      	bne.n	800980e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1f2      	bne.n	80097f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800980e:	4b10      	ldr	r3, [pc, #64]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800981a:	d112      	bne.n	8009842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e011      	b.n	8009844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009826:	4a0a      	ldr	r2, [pc, #40]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800982c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009830:	e007      	b.n	8009842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800983a:	4a05      	ldr	r2, [pc, #20]	; (8009850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800983c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009840:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	40007000 	.word	0x40007000
 8009854:	20000208 	.word	0x20000208
 8009858:	431bde83 	.word	0x431bde83

0800985c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	4a04      	ldr	r2, [pc, #16]	; (8009878 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800986a:	6053      	str	r3, [r2, #4]
}
 800986c:	bf00      	nop
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	40007000 	.word	0x40007000

0800987c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009886:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a0f      	ldr	r2, [pc, #60]	; (80098c8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800988c:	f023 0307 	bic.w	r3, r3, #7
 8009890:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009892:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	4a0d      	ldr	r2, [pc, #52]	; (80098cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009898:	f043 0304 	orr.w	r3, r3, #4
 800989c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80098a4:	bf30      	wfi
 80098a6:	e002      	b.n	80098ae <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80098a8:	bf40      	sev
    __WFE();
 80098aa:	bf20      	wfe
    __WFE();
 80098ac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80098ae:	4b07      	ldr	r3, [pc, #28]	; (80098cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	4a06      	ldr	r2, [pc, #24]	; (80098cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098b4:	f023 0304 	bic.w	r3, r3, #4
 80098b8:	6113      	str	r3, [r2, #16]
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40007000 	.word	0x40007000
 80098cc:	e000ed00 	.word	0xe000ed00

080098d0 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80098da:	4b11      	ldr	r3, [pc, #68]	; (8009920 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	4a0f      	ldr	r2, [pc, #60]	; (8009920 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80098e4:	f043 0301 	orr.w	r3, r3, #1
 80098e8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80098ea:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	4a0d      	ldr	r2, [pc, #52]	; (8009924 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80098f0:	f043 0304 	orr.w	r3, r3, #4
 80098f4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80098fc:	bf30      	wfi
 80098fe:	e002      	b.n	8009906 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009900:	bf40      	sev
    __WFE();
 8009902:	bf20      	wfe
    __WFE();
 8009904:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009906:	4b07      	ldr	r3, [pc, #28]	; (8009924 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	4a06      	ldr	r2, [pc, #24]	; (8009924 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800990c:	f023 0304 	bic.w	r3, r3, #4
 8009910:	6113      	str	r3, [r2, #16]
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	40007000 	.word	0x40007000
 8009924:	e000ed00 	.word	0xe000ed00

08009928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d102      	bne.n	800993c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	f000 bc68 	b.w	800a20c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800993c:	4b97      	ldr	r3, [pc, #604]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f003 030c 	and.w	r3, r3, #12
 8009944:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009946:	4b95      	ldr	r3, [pc, #596]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f003 0303 	and.w	r3, r3, #3
 800994e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80e6 	beq.w	8009b2a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d007      	beq.n	8009974 <HAL_RCC_OscConfig+0x4c>
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	2b0c      	cmp	r3, #12
 8009968:	f040 808d 	bne.w	8009a86 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b01      	cmp	r3, #1
 8009970:	f040 8089 	bne.w	8009a86 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009974:	4b89      	ldr	r3, [pc, #548]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0302 	and.w	r3, r3, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <HAL_RCC_OscConfig+0x66>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f000 bc3f 	b.w	800a20c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009992:	4b82      	ldr	r3, [pc, #520]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0308 	and.w	r3, r3, #8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <HAL_RCC_OscConfig+0x80>
 800999e:	4b7f      	ldr	r3, [pc, #508]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a6:	e005      	b.n	80099b4 <HAL_RCC_OscConfig+0x8c>
 80099a8:	4b7c      	ldr	r3, [pc, #496]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099ae:	091b      	lsrs	r3, r3, #4
 80099b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d224      	bcs.n	8009a02 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fe47 	bl	800a650 <RCC_SetFlashLatencyFromMSIRange>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	f000 bc1f 	b.w	800a20c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099ce:	4b73      	ldr	r3, [pc, #460]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a72      	ldr	r2, [pc, #456]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099d4:	f043 0308 	orr.w	r3, r3, #8
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	4b70      	ldr	r3, [pc, #448]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	496d      	ldr	r1, [pc, #436]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80099ec:	4b6b      	ldr	r3, [pc, #428]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	4968      	ldr	r1, [pc, #416]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	604b      	str	r3, [r1, #4]
 8009a00:	e025      	b.n	8009a4e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a02:	4b66      	ldr	r3, [pc, #408]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a65      	ldr	r2, [pc, #404]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a08:	f043 0308 	orr.w	r3, r3, #8
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	4b63      	ldr	r3, [pc, #396]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	4960      	ldr	r1, [pc, #384]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a20:	4b5e      	ldr	r3, [pc, #376]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	495b      	ldr	r1, [pc, #364]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fe06 	bl	800a650 <RCC_SetFlashLatencyFromMSIRange>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e3de      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a4e:	f000 fd21 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 8009a52:	4602      	mov	r2, r0
 8009a54:	4b51      	ldr	r3, [pc, #324]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	091b      	lsrs	r3, r3, #4
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	4950      	ldr	r1, [pc, #320]	; (8009ba0 <HAL_RCC_OscConfig+0x278>)
 8009a60:	5ccb      	ldrb	r3, [r1, r3]
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6a:	4a4e      	ldr	r2, [pc, #312]	; (8009ba4 <HAL_RCC_OscConfig+0x27c>)
 8009a6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009a6e:	4b4e      	ldr	r3, [pc, #312]	; (8009ba8 <HAL_RCC_OscConfig+0x280>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fb f96c 	bl	8004d50 <HAL_InitTick>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d052      	beq.n	8009b28 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	e3c2      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d032      	beq.n	8009af4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009a8e:	4b43      	ldr	r3, [pc, #268]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a42      	ldr	r2, [pc, #264]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009a9a:	f7fb fb47 	bl	800512c <HAL_GetTick>
 8009a9e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009aa0:	e008      	b.n	8009ab4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009aa2:	f7fb fb43 	bl	800512c <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e3ab      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009ab4:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0f0      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ac0:	4b36      	ldr	r3, [pc, #216]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a35      	ldr	r2, [pc, #212]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009ac6:	f043 0308 	orr.w	r3, r3, #8
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	4b33      	ldr	r3, [pc, #204]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	4930      	ldr	r1, [pc, #192]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ade:	4b2f      	ldr	r3, [pc, #188]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	021b      	lsls	r3, r3, #8
 8009aec:	492b      	ldr	r1, [pc, #172]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	604b      	str	r3, [r1, #4]
 8009af2:	e01a      	b.n	8009b2a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009af4:	4b29      	ldr	r3, [pc, #164]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a28      	ldr	r2, [pc, #160]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009afa:	f023 0301 	bic.w	r3, r3, #1
 8009afe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b00:	f7fb fb14 	bl	800512c <HAL_GetTick>
 8009b04:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b06:	e008      	b.n	8009b1a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b08:	f7fb fb10 	bl	800512c <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e378      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b1a:	4b20      	ldr	r3, [pc, #128]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f0      	bne.n	8009b08 <HAL_RCC_OscConfig+0x1e0>
 8009b26:	e000      	b.n	8009b2a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009b28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d073      	beq.n	8009c1e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d005      	beq.n	8009b48 <HAL_RCC_OscConfig+0x220>
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	2b0c      	cmp	r3, #12
 8009b40:	d10e      	bne.n	8009b60 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d10b      	bne.n	8009b60 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b48:	4b14      	ldr	r3, [pc, #80]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d063      	beq.n	8009c1c <HAL_RCC_OscConfig+0x2f4>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d15f      	bne.n	8009c1c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e355      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b68:	d106      	bne.n	8009b78 <HAL_RCC_OscConfig+0x250>
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a0b      	ldr	r2, [pc, #44]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e025      	b.n	8009bc4 <HAL_RCC_OscConfig+0x29c>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b80:	d114      	bne.n	8009bac <HAL_RCC_OscConfig+0x284>
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a05      	ldr	r2, [pc, #20]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a02      	ldr	r2, [pc, #8]	; (8009b9c <HAL_RCC_OscConfig+0x274>)
 8009b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	e013      	b.n	8009bc4 <HAL_RCC_OscConfig+0x29c>
 8009b9c:	40021000 	.word	0x40021000
 8009ba0:	08016d78 	.word	0x08016d78
 8009ba4:	20000208 	.word	0x20000208
 8009ba8:	2000020c 	.word	0x2000020c
 8009bac:	4b8f      	ldr	r3, [pc, #572]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a8e      	ldr	r2, [pc, #568]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	4b8c      	ldr	r3, [pc, #560]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a8b      	ldr	r2, [pc, #556]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d013      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bcc:	f7fb faae 	bl	800512c <HAL_GetTick>
 8009bd0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bd4:	f7fb faaa 	bl	800512c <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b64      	cmp	r3, #100	; 0x64
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e312      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009be6:	4b81      	ldr	r3, [pc, #516]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f0      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x2ac>
 8009bf2:	e014      	b.n	8009c1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf4:	f7fb fa9a 	bl	800512c <HAL_GetTick>
 8009bf8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bfa:	e008      	b.n	8009c0e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bfc:	f7fb fa96 	bl	800512c <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	2b64      	cmp	r3, #100	; 0x64
 8009c08:	d901      	bls.n	8009c0e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e2fe      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c0e:	4b77      	ldr	r3, [pc, #476]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1f0      	bne.n	8009bfc <HAL_RCC_OscConfig+0x2d4>
 8009c1a:	e000      	b.n	8009c1e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d060      	beq.n	8009cec <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d005      	beq.n	8009c3c <HAL_RCC_OscConfig+0x314>
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2b0c      	cmp	r3, #12
 8009c34:	d119      	bne.n	8009c6a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d116      	bne.n	8009c6a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c3c:	4b6b      	ldr	r3, [pc, #428]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <HAL_RCC_OscConfig+0x32c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e2db      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c54:	4b65      	ldr	r3, [pc, #404]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	061b      	lsls	r3, r3, #24
 8009c62:	4962      	ldr	r1, [pc, #392]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c68:	e040      	b.n	8009cec <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d023      	beq.n	8009cba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c72:	4b5e      	ldr	r3, [pc, #376]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a5d      	ldr	r2, [pc, #372]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7e:	f7fb fa55 	bl	800512c <HAL_GetTick>
 8009c82:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c84:	e008      	b.n	8009c98 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c86:	f7fb fa51 	bl	800512c <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d901      	bls.n	8009c98 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e2b9      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c98:	4b54      	ldr	r3, [pc, #336]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0f0      	beq.n	8009c86 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ca4:	4b51      	ldr	r3, [pc, #324]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	061b      	lsls	r3, r3, #24
 8009cb2:	494e      	ldr	r1, [pc, #312]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	604b      	str	r3, [r1, #4]
 8009cb8:	e018      	b.n	8009cec <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cba:	4b4c      	ldr	r3, [pc, #304]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a4b      	ldr	r2, [pc, #300]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc6:	f7fb fa31 	bl	800512c <HAL_GetTick>
 8009cca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ccc:	e008      	b.n	8009ce0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cce:	f7fb fa2d 	bl	800512c <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e295      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ce0:	4b42      	ldr	r3, [pc, #264]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f0      	bne.n	8009cce <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0308 	and.w	r3, r3, #8
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8082 	beq.w	8009dfe <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d05f      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009d02:	4b3a      	ldr	r3, [pc, #232]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d08:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f003 0310 	and.w	r3, r3, #16
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d037      	beq.n	8009d88 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d006      	beq.n	8009d30 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e26d      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01b      	beq.n	8009d72 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009d3a:	4b2c      	ldr	r3, [pc, #176]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d40:	4a2a      	ldr	r2, [pc, #168]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d42:	f023 0301 	bic.w	r3, r3, #1
 8009d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d4a:	f7fb f9ef 	bl	800512c <HAL_GetTick>
 8009d4e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d50:	e008      	b.n	8009d64 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d52:	f7fb f9eb 	bl	800512c <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b11      	cmp	r3, #17
 8009d5e:	d901      	bls.n	8009d64 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e253      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d64:	4b21      	ldr	r3, [pc, #132]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1ef      	bne.n	8009d52 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009d72:	4b1e      	ldr	r3, [pc, #120]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d78:	f023 0210 	bic.w	r2, r3, #16
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	491a      	ldr	r1, [pc, #104]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d88:	4b18      	ldr	r3, [pc, #96]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8e:	4a17      	ldr	r2, [pc, #92]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009d90:	f043 0301 	orr.w	r3, r3, #1
 8009d94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d98:	f7fb f9c8 	bl	800512c <HAL_GetTick>
 8009d9c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d9e:	e008      	b.n	8009db2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009da0:	f7fb f9c4 	bl	800512c <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2b11      	cmp	r3, #17
 8009dac:	d901      	bls.n	8009db2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e22c      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009db2:	4b0e      	ldr	r3, [pc, #56]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0ef      	beq.n	8009da0 <HAL_RCC_OscConfig+0x478>
 8009dc0:	e01d      	b.n	8009dfe <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dc8:	4a08      	ldr	r2, [pc, #32]	; (8009dec <HAL_RCC_OscConfig+0x4c4>)
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dd2:	f7fb f9ab 	bl	800512c <HAL_GetTick>
 8009dd6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009dd8:	e00a      	b.n	8009df0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dda:	f7fb f9a7 	bl	800512c <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b11      	cmp	r3, #17
 8009de6:	d903      	bls.n	8009df0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e20f      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
 8009dec:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009df0:	4b83      	ldr	r3, [pc, #524]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1ed      	bne.n	8009dda <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0304 	and.w	r3, r3, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 80bd 	beq.w	8009f86 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e12:	4b7b      	ldr	r3, [pc, #492]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10e      	bne.n	8009e3c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e1e:	4b78      	ldr	r3, [pc, #480]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e22:	4a77      	ldr	r2, [pc, #476]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e28:	6593      	str	r3, [r2, #88]	; 0x58
 8009e2a:	4b75      	ldr	r3, [pc, #468]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e3c:	4b71      	ldr	r3, [pc, #452]	; (800a004 <HAL_RCC_OscConfig+0x6dc>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d118      	bne.n	8009e7a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e48:	4b6e      	ldr	r3, [pc, #440]	; (800a004 <HAL_RCC_OscConfig+0x6dc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a6d      	ldr	r2, [pc, #436]	; (800a004 <HAL_RCC_OscConfig+0x6dc>)
 8009e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e54:	f7fb f96a 	bl	800512c <HAL_GetTick>
 8009e58:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e5a:	e008      	b.n	8009e6e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e5c:	f7fb f966 	bl	800512c <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d901      	bls.n	8009e6e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e1ce      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e6e:	4b65      	ldr	r3, [pc, #404]	; (800a004 <HAL_RCC_OscConfig+0x6dc>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0f0      	beq.n	8009e5c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d02c      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8009e86:	4b5e      	ldr	r3, [pc, #376]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e8c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e98:	4959      	ldr	r1, [pc, #356]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d010      	beq.n	8009ece <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009eac:	4b54      	ldr	r3, [pc, #336]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb2:	4a53      	ldr	r2, [pc, #332]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009eb4:	f043 0304 	orr.w	r3, r3, #4
 8009eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ebc:	4b50      	ldr	r3, [pc, #320]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec2:	4a4f      	ldr	r2, [pc, #316]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ec4:	f043 0301 	orr.w	r3, r3, #1
 8009ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ecc:	e018      	b.n	8009f00 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ece:	4b4c      	ldr	r3, [pc, #304]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed4:	4a4a      	ldr	r2, [pc, #296]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ed6:	f043 0301 	orr.w	r3, r3, #1
 8009eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ede:	e00f      	b.n	8009f00 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ee0:	4b47      	ldr	r3, [pc, #284]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee6:	4a46      	ldr	r2, [pc, #280]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ee8:	f023 0301 	bic.w	r3, r3, #1
 8009eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009ef0:	4b43      	ldr	r3, [pc, #268]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef6:	4a42      	ldr	r2, [pc, #264]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009ef8:	f023 0304 	bic.w	r3, r3, #4
 8009efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d016      	beq.n	8009f36 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f08:	f7fb f910 	bl	800512c <HAL_GetTick>
 8009f0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f0e:	e00a      	b.n	8009f26 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f10:	f7fb f90c 	bl	800512c <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e172      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f26:	4b36      	ldr	r3, [pc, #216]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0ed      	beq.n	8009f10 <HAL_RCC_OscConfig+0x5e8>
 8009f34:	e01d      	b.n	8009f72 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f36:	f7fb f8f9 	bl	800512c <HAL_GetTick>
 8009f3a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f3c:	e00a      	b.n	8009f54 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f3e:	f7fb f8f5 	bl	800512c <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d901      	bls.n	8009f54 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e15b      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f54:	4b2a      	ldr	r3, [pc, #168]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1ed      	bne.n	8009f3e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8009f62:	4b27      	ldr	r3, [pc, #156]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f68:	4a25      	ldr	r2, [pc, #148]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d105      	bne.n	8009f86 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f7a:	4b21      	ldr	r3, [pc, #132]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	4a20      	ldr	r2, [pc, #128]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d041      	beq.n	800a016 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d01c      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f9a:	4b19      	ldr	r3, [pc, #100]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fa0:	4a17      	ldr	r2, [pc, #92]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009fa2:	f043 0301 	orr.w	r3, r3, #1
 8009fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009faa:	f7fb f8bf 	bl	800512c <HAL_GetTick>
 8009fae:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fb2:	f7fb f8bb 	bl	800512c <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e123      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0ef      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x68a>
 8009fd2:	e020      	b.n	800a016 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fda:	4a09      	ldr	r2, [pc, #36]	; (800a000 <HAL_RCC_OscConfig+0x6d8>)
 8009fdc:	f023 0301 	bic.w	r3, r3, #1
 8009fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fe4:	f7fb f8a2 	bl	800512c <HAL_GetTick>
 8009fe8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009fea:	e00d      	b.n	800a008 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fec:	f7fb f89e 	bl	800512c <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d906      	bls.n	800a008 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e106      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
 8009ffe:	bf00      	nop
 800a000:	40021000 	.word	0x40021000
 800a004:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a008:	4b82      	ldr	r3, [pc, #520]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a00a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1ea      	bne.n	8009fec <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80f5 	beq.w	800a20a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a024:	2b02      	cmp	r3, #2
 800a026:	f040 80cb 	bne.w	800a1c0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a02a:	4b7a      	ldr	r3, [pc, #488]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	f003 0203 	and.w	r2, r3, #3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d12c      	bne.n	800a098 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a048:	3b01      	subs	r3, #1
 800a04a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d123      	bne.n	800a098 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d11b      	bne.n	800a098 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d113      	bne.n	800a098 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	085b      	lsrs	r3, r3, #1
 800a07c:	3b01      	subs	r3, #1
 800a07e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a080:	429a      	cmp	r2, r3
 800a082:	d109      	bne.n	800a098 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08e:	085b      	lsrs	r3, r3, #1
 800a090:	3b01      	subs	r3, #1
 800a092:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a094:	429a      	cmp	r2, r3
 800a096:	d06d      	beq.n	800a174 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	2b0c      	cmp	r3, #12
 800a09c:	d068      	beq.n	800a170 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a09e:	4b5d      	ldr	r3, [pc, #372]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d105      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a0aa:	4b5a      	ldr	r3, [pc, #360]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e0a8      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a0ba:	4b56      	ldr	r3, [pc, #344]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a55      	ldr	r2, [pc, #340]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a0c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a0c6:	f7fb f831 	bl	800512c <HAL_GetTick>
 800a0ca:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0cc:	e008      	b.n	800a0e0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ce:	f7fb f82d 	bl	800512c <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d901      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e095      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0e0:	4b4c      	ldr	r3, [pc, #304]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1f0      	bne.n	800a0ce <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0ec:	4b49      	ldr	r3, [pc, #292]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a0ee:	68da      	ldr	r2, [r3, #12]
 800a0f0:	4b49      	ldr	r3, [pc, #292]	; (800a218 <HAL_RCC_OscConfig+0x8f0>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a0fc:	3a01      	subs	r2, #1
 800a0fe:	0112      	lsls	r2, r2, #4
 800a100:	4311      	orrs	r1, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a106:	0212      	lsls	r2, r2, #8
 800a108:	4311      	orrs	r1, r2
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a10e:	0852      	lsrs	r2, r2, #1
 800a110:	3a01      	subs	r2, #1
 800a112:	0552      	lsls	r2, r2, #21
 800a114:	4311      	orrs	r1, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a11a:	0852      	lsrs	r2, r2, #1
 800a11c:	3a01      	subs	r2, #1
 800a11e:	0652      	lsls	r2, r2, #25
 800a120:	4311      	orrs	r1, r2
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a126:	06d2      	lsls	r2, r2, #27
 800a128:	430a      	orrs	r2, r1
 800a12a:	493a      	ldr	r1, [pc, #232]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a130:	4b38      	ldr	r3, [pc, #224]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a37      	ldr	r2, [pc, #220]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a13a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a13c:	4b35      	ldr	r3, [pc, #212]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	4a34      	ldr	r2, [pc, #208]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a146:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a148:	f7fa fff0 	bl	800512c <HAL_GetTick>
 800a14c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a14e:	e008      	b.n	800a162 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a150:	f7fa ffec 	bl	800512c <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e054      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a162:	4b2c      	ldr	r3, [pc, #176]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f0      	beq.n	800a150 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a16e:	e04c      	b.n	800a20a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e04b      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a174:	4b27      	ldr	r3, [pc, #156]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d144      	bne.n	800a20a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a180:	4b24      	ldr	r3, [pc, #144]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a23      	ldr	r2, [pc, #140]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a18a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a18c:	4b21      	ldr	r3, [pc, #132]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	4a20      	ldr	r2, [pc, #128]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a196:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a198:	f7fa ffc8 	bl	800512c <HAL_GetTick>
 800a19c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1a0:	f7fa ffc4 	bl	800512c <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e02c      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1b2:	4b18      	ldr	r3, [pc, #96]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0f0      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x878>
 800a1be:	e024      	b.n	800a20a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	2b0c      	cmp	r3, #12
 800a1c4:	d01f      	beq.n	800a206 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1c6:	4b13      	ldr	r3, [pc, #76]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a12      	ldr	r2, [pc, #72]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a1cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d2:	f7fa ffab 	bl	800512c <HAL_GetTick>
 800a1d6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1d8:	e008      	b.n	800a1ec <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1da:	f7fa ffa7 	bl	800512c <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d901      	bls.n	800a1ec <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e00f      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1ec:	4b09      	ldr	r3, [pc, #36]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1f0      	bne.n	800a1da <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	4905      	ldr	r1, [pc, #20]	; (800a214 <HAL_RCC_OscConfig+0x8ec>)
 800a1fe:	4b07      	ldr	r3, [pc, #28]	; (800a21c <HAL_RCC_OscConfig+0x8f4>)
 800a200:	4013      	ands	r3, r2
 800a202:	60cb      	str	r3, [r1, #12]
 800a204:	e001      	b.n	800a20a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3728      	adds	r7, #40	; 0x28
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	40021000 	.word	0x40021000
 800a218:	019d800c 	.word	0x019d800c
 800a21c:	feeefffc 	.word	0xfeeefffc

0800a220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e11d      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a238:	4b90      	ldr	r3, [pc, #576]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 030f 	and.w	r3, r3, #15
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d910      	bls.n	800a268 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a246:	4b8d      	ldr	r3, [pc, #564]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f023 020f 	bic.w	r2, r3, #15
 800a24e:	498b      	ldr	r1, [pc, #556]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	4313      	orrs	r3, r2
 800a254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a256:	4b89      	ldr	r3, [pc, #548]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d001      	beq.n	800a268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e105      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d010      	beq.n	800a296 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	4b81      	ldr	r3, [pc, #516]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a280:	429a      	cmp	r2, r3
 800a282:	d908      	bls.n	800a296 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a284:	4b7e      	ldr	r3, [pc, #504]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	497b      	ldr	r1, [pc, #492]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a292:	4313      	orrs	r3, r2
 800a294:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d079      	beq.n	800a396 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d11e      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2aa:	4b75      	ldr	r3, [pc, #468]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e0dc      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a2ba:	f000 fa23 	bl	800a704 <RCC_GetSysClockFreqFromPLLSource>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4a70      	ldr	r2, [pc, #448]	; (800a484 <HAL_RCC_ClockConfig+0x264>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d946      	bls.n	800a354 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a2c6:	4b6e      	ldr	r3, [pc, #440]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d140      	bne.n	800a354 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a2d2:	4b6b      	ldr	r3, [pc, #428]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2da:	4a69      	ldr	r2, [pc, #420]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e035      	b.n	800a354 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d107      	bne.n	800a300 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2f0:	4b63      	ldr	r3, [pc, #396]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d115      	bne.n	800a328 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e0b9      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d107      	bne.n	800a318 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a308:	4b5d      	ldr	r3, [pc, #372]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d109      	bne.n	800a328 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e0ad      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a318:	4b59      	ldr	r3, [pc, #356]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e0a5      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a328:	f000 f8b4 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800a32c:	4603      	mov	r3, r0
 800a32e:	4a55      	ldr	r2, [pc, #340]	; (800a484 <HAL_RCC_ClockConfig+0x264>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d90f      	bls.n	800a354 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a334:	4b52      	ldr	r3, [pc, #328]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a340:	4b4f      	ldr	r3, [pc, #316]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a348:	4a4d      	ldr	r2, [pc, #308]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a350:	2380      	movs	r3, #128	; 0x80
 800a352:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a354:	4b4a      	ldr	r3, [pc, #296]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f023 0203 	bic.w	r2, r3, #3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4947      	ldr	r1, [pc, #284]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a362:	4313      	orrs	r3, r2
 800a364:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a366:	f7fa fee1 	bl	800512c <HAL_GetTick>
 800a36a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a36c:	e00a      	b.n	800a384 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a36e:	f7fa fedd 	bl	800512c <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	f241 3288 	movw	r2, #5000	; 0x1388
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d901      	bls.n	800a384 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e077      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a384:	4b3e      	ldr	r3, [pc, #248]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f003 020c 	and.w	r2, r3, #12
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	429a      	cmp	r2, r3
 800a394:	d1eb      	bne.n	800a36e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b80      	cmp	r3, #128	; 0x80
 800a39a:	d105      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a39c:	4b38      	ldr	r3, [pc, #224]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	4a37      	ldr	r2, [pc, #220]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a3a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d010      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	4b31      	ldr	r3, [pc, #196]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d208      	bcs.n	800a3d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3c4:	4b2e      	ldr	r3, [pc, #184]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	492b      	ldr	r1, [pc, #172]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3d6:	4b29      	ldr	r3, [pc, #164]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d210      	bcs.n	800a406 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3e4:	4b25      	ldr	r3, [pc, #148]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f023 020f 	bic.w	r2, r3, #15
 800a3ec:	4923      	ldr	r1, [pc, #140]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3f4:	4b21      	ldr	r3, [pc, #132]	; (800a47c <HAL_RCC_ClockConfig+0x25c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d001      	beq.n	800a406 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e036      	b.n	800a474 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a412:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	4918      	ldr	r1, [pc, #96]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a420:	4313      	orrs	r3, r2
 800a422:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d009      	beq.n	800a444 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a430:	4b13      	ldr	r3, [pc, #76]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	4910      	ldr	r1, [pc, #64]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a440:	4313      	orrs	r3, r2
 800a442:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a444:	f000 f826 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800a448:	4602      	mov	r2, r0
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <HAL_RCC_ClockConfig+0x260>)
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	091b      	lsrs	r3, r3, #4
 800a450:	f003 030f 	and.w	r3, r3, #15
 800a454:	490c      	ldr	r1, [pc, #48]	; (800a488 <HAL_RCC_ClockConfig+0x268>)
 800a456:	5ccb      	ldrb	r3, [r1, r3]
 800a458:	f003 031f 	and.w	r3, r3, #31
 800a45c:	fa22 f303 	lsr.w	r3, r2, r3
 800a460:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <HAL_RCC_ClockConfig+0x26c>)
 800a462:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a464:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <HAL_RCC_ClockConfig+0x270>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fa fc71 	bl	8004d50 <HAL_InitTick>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]

  return status;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	40022000 	.word	0x40022000
 800a480:	40021000 	.word	0x40021000
 800a484:	04c4b400 	.word	0x04c4b400
 800a488:	08016d78 	.word	0x08016d78
 800a48c:	20000208 	.word	0x20000208
 800a490:	2000020c 	.word	0x2000020c

0800a494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a494:	b480      	push	{r7}
 800a496:	b089      	sub	sp, #36	; 0x24
 800a498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	61fb      	str	r3, [r7, #28]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4a2:	4b3e      	ldr	r3, [pc, #248]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 030c 	and.w	r3, r3, #12
 800a4aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4ac:	4b3b      	ldr	r3, [pc, #236]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <HAL_RCC_GetSysClockFreq+0x34>
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b0c      	cmp	r3, #12
 800a4c0:	d121      	bne.n	800a506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d11e      	bne.n	800a506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a4c8:	4b34      	ldr	r3, [pc, #208]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a4d4:	4b31      	ldr	r3, [pc, #196]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	61fb      	str	r3, [r7, #28]
 800a4e2:	e005      	b.n	800a4f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a4e4:	4b2d      	ldr	r3, [pc, #180]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	091b      	lsrs	r3, r3, #4
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a4f0:	4a2b      	ldr	r2, [pc, #172]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10d      	bne.n	800a51c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a504:	e00a      	b.n	800a51c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d102      	bne.n	800a512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a50c:	4b25      	ldr	r3, [pc, #148]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	e004      	b.n	800a51c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	2b08      	cmp	r3, #8
 800a516:	d101      	bne.n	800a51c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a518:	4b22      	ldr	r3, [pc, #136]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800a51a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2b0c      	cmp	r3, #12
 800a520:	d134      	bne.n	800a58c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a522:	4b1e      	ldr	r3, [pc, #120]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d003      	beq.n	800a53a <HAL_RCC_GetSysClockFreq+0xa6>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d003      	beq.n	800a540 <HAL_RCC_GetSysClockFreq+0xac>
 800a538:	e005      	b.n	800a546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a53a:	4b1a      	ldr	r3, [pc, #104]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800a53c:	617b      	str	r3, [r7, #20]
      break;
 800a53e:	e005      	b.n	800a54c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a540:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800a542:	617b      	str	r3, [r7, #20]
      break;
 800a544:	e002      	b.n	800a54c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	617b      	str	r3, [r7, #20]
      break;
 800a54a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a54c:	4b13      	ldr	r3, [pc, #76]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	091b      	lsrs	r3, r3, #4
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	3301      	adds	r3, #1
 800a558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a55a:	4b10      	ldr	r3, [pc, #64]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	0a1b      	lsrs	r3, r3, #8
 800a560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	fb03 f202 	mul.w	r2, r3, r2
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a572:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <HAL_RCC_GetSysClockFreq+0x108>)
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	0e5b      	lsrs	r3, r3, #25
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	3301      	adds	r3, #1
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a58c:	69bb      	ldr	r3, [r7, #24]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3724      	adds	r7, #36	; 0x24
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	40021000 	.word	0x40021000
 800a5a0:	08016d90 	.word	0x08016d90
 800a5a4:	00f42400 	.word	0x00f42400

0800a5a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5ac:	4b03      	ldr	r3, [pc, #12]	; (800a5bc <HAL_RCC_GetHCLKFreq+0x14>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	20000208 	.word	0x20000208

0800a5c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a5c4:	f7ff fff0 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	0adb      	lsrs	r3, r3, #11
 800a5d0:	f003 0307 	and.w	r3, r3, #7
 800a5d4:	4904      	ldr	r1, [pc, #16]	; (800a5e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5d6:	5ccb      	ldrb	r3, [r1, r3]
 800a5d8:	f003 031f 	and.w	r3, r3, #31
 800a5dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	40021000 	.word	0x40021000
 800a5e8:	08016d88 	.word	0x08016d88

0800a5ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	220f      	movs	r2, #15
 800a5fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a5fc:	4b12      	ldr	r3, [pc, #72]	; (800a648 <HAL_RCC_GetClockConfig+0x5c>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f003 0203 	and.w	r2, r3, #3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a608:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <HAL_RCC_GetClockConfig+0x5c>)
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a614:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <HAL_RCC_GetClockConfig+0x5c>)
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <HAL_RCC_GetClockConfig+0x5c>)
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	08db      	lsrs	r3, r3, #3
 800a626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a62e:	4b07      	ldr	r3, [pc, #28]	; (800a64c <HAL_RCC_GetClockConfig+0x60>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 020f 	and.w	r2, r3, #15
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	601a      	str	r2, [r3, #0]
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	40021000 	.word	0x40021000
 800a64c:	40022000 	.word	0x40022000

0800a650 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a658:	2300      	movs	r3, #0
 800a65a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a65c:	4b27      	ldr	r3, [pc, #156]	; (800a6fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a668:	f7ff f834 	bl	80096d4 <HAL_PWREx_GetVoltageRange>
 800a66c:	6178      	str	r0, [r7, #20]
 800a66e:	e014      	b.n	800a69a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a670:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a674:	4a21      	ldr	r2, [pc, #132]	; (800a6fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a67a:	6593      	str	r3, [r2, #88]	; 0x58
 800a67c:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a688:	f7ff f824 	bl	80096d4 <HAL_PWREx_GetVoltageRange>
 800a68c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a68e:	4b1b      	ldr	r3, [pc, #108]	; (800a6fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a692:	4a1a      	ldr	r2, [pc, #104]	; (800a6fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a698:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a0:	d10b      	bne.n	800a6ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d913      	bls.n	800a6d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2ba0      	cmp	r3, #160	; 0xa0
 800a6ac:	d902      	bls.n	800a6b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	e00d      	b.n	800a6d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	613b      	str	r3, [r7, #16]
 800a6b8:	e00a      	b.n	800a6d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b7f      	cmp	r3, #127	; 0x7f
 800a6be:	d902      	bls.n	800a6c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	e004      	b.n	800a6d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b70      	cmp	r3, #112	; 0x70
 800a6ca:	d101      	bne.n	800a6d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a6d0:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f023 020f 	bic.w	r2, r3, #15
 800a6d8:	4909      	ldr	r1, [pc, #36]	; (800a700 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 030f 	and.w	r3, r3, #15
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d001      	beq.n	800a6f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e000      	b.n	800a6f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40021000 	.word	0x40021000
 800a700:	40022000 	.word	0x40022000

0800a704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a70a:	4b2d      	ldr	r3, [pc, #180]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b03      	cmp	r3, #3
 800a718:	d00b      	beq.n	800a732 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d825      	bhi.n	800a76c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d008      	beq.n	800a738 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d11f      	bne.n	800a76c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a72c:	4b25      	ldr	r3, [pc, #148]	; (800a7c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a72e:	613b      	str	r3, [r7, #16]
    break;
 800a730:	e01f      	b.n	800a772 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a732:	4b24      	ldr	r3, [pc, #144]	; (800a7c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a734:	613b      	str	r3, [r7, #16]
    break;
 800a736:	e01c      	b.n	800a772 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a738:	4b21      	ldr	r3, [pc, #132]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b00      	cmp	r3, #0
 800a742:	d107      	bne.n	800a754 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a744:	4b1e      	ldr	r3, [pc, #120]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a74a:	0a1b      	lsrs	r3, r3, #8
 800a74c:	f003 030f 	and.w	r3, r3, #15
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e005      	b.n	800a760 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a754:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	091b      	lsrs	r3, r3, #4
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a760:	4a19      	ldr	r2, [pc, #100]	; (800a7c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a768:	613b      	str	r3, [r7, #16]
    break;
 800a76a:	e002      	b.n	800a772 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
    break;
 800a770:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a772:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	091b      	lsrs	r3, r3, #4
 800a778:	f003 030f 	and.w	r3, r3, #15
 800a77c:	3301      	adds	r3, #1
 800a77e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	0a1b      	lsrs	r3, r3, #8
 800a786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	fb03 f202 	mul.w	r2, r3, r2
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	fbb2 f3f3 	udiv	r3, r2, r3
 800a796:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	0e5b      	lsrs	r3, r3, #25
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a7b2:	683b      	ldr	r3, [r7, #0]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	40021000 	.word	0x40021000
 800a7c4:	00f42400 	.word	0x00f42400
 800a7c8:	08016d90 	.word	0x08016d90

0800a7cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7d8:	2300      	movs	r3, #0
 800a7da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d040      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ec:	2b80      	cmp	r3, #128	; 0x80
 800a7ee:	d02a      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7f0:	2b80      	cmp	r3, #128	; 0x80
 800a7f2:	d825      	bhi.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a7f4:	2b60      	cmp	r3, #96	; 0x60
 800a7f6:	d026      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7f8:	2b60      	cmp	r3, #96	; 0x60
 800a7fa:	d821      	bhi.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a7fc:	2b40      	cmp	r3, #64	; 0x40
 800a7fe:	d006      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d81d      	bhi.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d009      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a808:	2b20      	cmp	r3, #32
 800a80a:	d010      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a80c:	e018      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a80e:	4b89      	ldr	r3, [pc, #548]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	4a88      	ldr	r2, [pc, #544]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a818:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a81a:	e015      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	3304      	adds	r3, #4
 800a820:	2100      	movs	r1, #0
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fb3e 	bl	800aea4 <RCCEx_PLLSAI1_Config>
 800a828:	4603      	mov	r3, r0
 800a82a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a82c:	e00c      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3320      	adds	r3, #32
 800a832:	2100      	movs	r1, #0
 800a834:	4618      	mov	r0, r3
 800a836:	f000 fc29 	bl	800b08c <RCCEx_PLLSAI2_Config>
 800a83a:	4603      	mov	r3, r0
 800a83c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a83e:	e003      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	74fb      	strb	r3, [r7, #19]
      break;
 800a844:	e000      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a846:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a848:	7cfb      	ldrb	r3, [r7, #19]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10b      	bne.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a84e:	4b79      	ldr	r3, [pc, #484]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a850:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a854:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85c:	4975      	ldr	r1, [pc, #468]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a864:	e001      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a866:	7cfb      	ldrb	r3, [r7, #19]
 800a868:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d047      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a87e:	d030      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a884:	d82a      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a88a:	d02a      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a88c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a890:	d824      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a896:	d008      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a89c:	d81e      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a6:	d010      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a8a8:	e018      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a8aa:	4b62      	ldr	r3, [pc, #392]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	4a61      	ldr	r2, [pc, #388]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8b6:	e015      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 faf0 	bl	800aea4 <RCCEx_PLLSAI1_Config>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8c8:	e00c      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3320      	adds	r3, #32
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fbdb 	bl	800b08c <RCCEx_PLLSAI2_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8da:	e003      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	74fb      	strb	r3, [r7, #19]
      break;
 800a8e0:	e000      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a8e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8e4:	7cfb      	ldrb	r3, [r7, #19]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10b      	bne.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a8ea:	4b52      	ldr	r3, [pc, #328]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f8:	494e      	ldr	r1, [pc, #312]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a900:	e001      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a902:	7cfb      	ldrb	r3, [r7, #19]
 800a904:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 809f 	beq.w	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a914:	2300      	movs	r3, #0
 800a916:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a918:	4b46      	ldr	r3, [pc, #280]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00d      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a92e:	4b41      	ldr	r3, [pc, #260]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a932:	4a40      	ldr	r2, [pc, #256]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a938:	6593      	str	r3, [r2, #88]	; 0x58
 800a93a:	4b3e      	ldr	r3, [pc, #248]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a942:	60bb      	str	r3, [r7, #8]
 800a944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a946:	2301      	movs	r3, #1
 800a948:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a94a:	4b3b      	ldr	r3, [pc, #236]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a3a      	ldr	r2, [pc, #232]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a956:	f7fa fbe9 	bl	800512c <HAL_GetTick>
 800a95a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a95c:	e009      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a95e:	f7fa fbe5 	bl	800512c <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d902      	bls.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	74fb      	strb	r3, [r7, #19]
        break;
 800a970:	e005      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a972:	4b31      	ldr	r3, [pc, #196]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0ef      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a97e:	7cfb      	ldrb	r3, [r7, #19]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d15b      	bne.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a984:	4b2b      	ldr	r3, [pc, #172]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a98a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a98e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01f      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a99c:	697a      	ldr	r2, [r7, #20]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d019      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9a2:	4b24      	ldr	r3, [pc, #144]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9ae:	4b21      	ldr	r3, [pc, #132]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b4:	4a1f      	ldr	r2, [pc, #124]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c4:	4a1b      	ldr	r2, [pc, #108]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a9ce:	4a19      	ldr	r2, [pc, #100]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d016      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fa fba4 	bl	800512c <HAL_GetTick>
 800a9e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9e6:	e00b      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9e8:	f7fa fba0 	bl	800512c <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d902      	bls.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	74fb      	strb	r3, [r7, #19]
            break;
 800a9fe:	e006      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa00:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa06:	f003 0302 	and.w	r3, r3, #2
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0ec      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800aa0e:	7cfb      	ldrb	r3, [r7, #19]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10c      	bne.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa14:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa24:	4903      	ldr	r1, [pc, #12]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa26:	4313      	orrs	r3, r2
 800aa28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa2c:	e008      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa2e:	7cfb      	ldrb	r3, [r7, #19]
 800aa30:	74bb      	strb	r3, [r7, #18]
 800aa32:	e005      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800aa34:	40021000 	.word	0x40021000
 800aa38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa3c:	7cfb      	ldrb	r3, [r7, #19]
 800aa3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa40:	7c7b      	ldrb	r3, [r7, #17]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d105      	bne.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa46:	4ba0      	ldr	r3, [pc, #640]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa4a:	4a9f      	ldr	r2, [pc, #636]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa5e:	4b9a      	ldr	r3, [pc, #616]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa64:	f023 0203 	bic.w	r2, r3, #3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6c:	4996      	ldr	r1, [pc, #600]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0302 	and.w	r3, r3, #2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa80:	4b91      	ldr	r3, [pc, #580]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa86:	f023 020c 	bic.w	r2, r3, #12
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8e:	498e      	ldr	r1, [pc, #568]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aaa2:	4b89      	ldr	r3, [pc, #548]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab0:	4985      	ldr	r1, [pc, #532]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00a      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aac4:	4b80      	ldr	r3, [pc, #512]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad2:	497d      	ldr	r1, [pc, #500]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0310 	and.w	r3, r3, #16
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aae6:	4b78      	ldr	r3, [pc, #480]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf4:	4974      	ldr	r1, [pc, #464]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00a      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab08:	4b6f      	ldr	r3, [pc, #444]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab16:	496c      	ldr	r1, [pc, #432]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00a      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab2a:	4b67      	ldr	r3, [pc, #412]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab38:	4963      	ldr	r1, [pc, #396]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00a      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab4c:	4b5e      	ldr	r3, [pc, #376]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5a:	495b      	ldr	r1, [pc, #364]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab6e:	4b56      	ldr	r3, [pc, #344]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7c:	4952      	ldr	r1, [pc, #328]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00a      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ab90:	4b4d      	ldr	r3, [pc, #308]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab9e:	494a      	ldr	r1, [pc, #296]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aba0:	4313      	orrs	r3, r2
 800aba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abb2:	4b45      	ldr	r3, [pc, #276]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc0:	4941      	ldr	r1, [pc, #260]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00a      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abd4:	4b3c      	ldr	r3, [pc, #240]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abda:	f023 0203 	bic.w	r2, r3, #3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	4939      	ldr	r1, [pc, #228]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abe4:	4313      	orrs	r3, r2
 800abe6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d028      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abf6:	4b34      	ldr	r3, [pc, #208]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac04:	4930      	ldr	r1, [pc, #192]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac14:	d106      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac16:	4b2c      	ldr	r3, [pc, #176]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	4a2b      	ldr	r2, [pc, #172]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac20:	60d3      	str	r3, [r2, #12]
 800ac22:	e011      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac2c:	d10c      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3304      	adds	r3, #4
 800ac32:	2101      	movs	r1, #1
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 f935 	bl	800aea4 <RCCEx_PLLSAI1_Config>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ac3e:	7cfb      	ldrb	r3, [r7, #19]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800ac44:	7cfb      	ldrb	r3, [r7, #19]
 800ac46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d04d      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac5c:	d108      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800ac5e:	4b1a      	ldr	r3, [pc, #104]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac64:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ac6e:	e012      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800ac70:	4b15      	ldr	r3, [pc, #84]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac76:	4a14      	ldr	r2, [pc, #80]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ac80:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac8e:	490e      	ldr	r1, [pc, #56]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac9e:	d106      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aca0:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	4a08      	ldr	r2, [pc, #32]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acaa:	60d3      	str	r3, [r2, #12]
 800acac:	e020      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acb6:	d109      	bne.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800acb8:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	4a02      	ldr	r2, [pc, #8]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc2:	60d3      	str	r3, [r2, #12]
 800acc4:	e014      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800acc6:	bf00      	nop
 800acc8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acd4:	d10c      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3304      	adds	r3, #4
 800acda:	2101      	movs	r1, #1
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f8e1 	bl	800aea4 <RCCEx_PLLSAI1_Config>
 800ace2:	4603      	mov	r3, r0
 800ace4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ace6:	7cfb      	ldrb	r3, [r7, #19]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800acec:	7cfb      	ldrb	r3, [r7, #19]
 800acee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d028      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acfc:	4b68      	ldr	r3, [pc, #416]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0a:	4965      	ldr	r1, [pc, #404]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad1a:	d106      	bne.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad1c:	4b60      	ldr	r3, [pc, #384]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	4a5f      	ldr	r2, [pc, #380]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad26:	60d3      	str	r3, [r2, #12]
 800ad28:	e011      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad32:	d10c      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3304      	adds	r3, #4
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f8b2 	bl	800aea4 <RCCEx_PLLSAI1_Config>
 800ad40:	4603      	mov	r3, r0
 800ad42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad44:	7cfb      	ldrb	r3, [r7, #19]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800ad4a:	7cfb      	ldrb	r3, [r7, #19]
 800ad4c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d01e      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad5a:	4b51      	ldr	r3, [pc, #324]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6a:	494d      	ldr	r1, [pc, #308]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad7c:	d10c      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3304      	adds	r3, #4
 800ad82:	2102      	movs	r1, #2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 f88d 	bl	800aea4 <RCCEx_PLLSAI1_Config>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad8e:	7cfb      	ldrb	r3, [r7, #19]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800ad94:	7cfb      	ldrb	r3, [r7, #19]
 800ad96:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ada4:	4b3e      	ldr	r3, [pc, #248]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ada6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adaa:	f023 0204 	bic.w	r2, r3, #4
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adb4:	493a      	ldr	r1, [pc, #232]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adb6:	4313      	orrs	r3, r2
 800adb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800adc8:	4b35      	ldr	r3, [pc, #212]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adce:	f023 0218 	bic.w	r2, r3, #24
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add8:	4931      	ldr	r1, [pc, #196]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adda:	4313      	orrs	r3, r2
 800addc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d035      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800adec:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a2b      	ldr	r2, [pc, #172]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adf8:	f7fa f998 	bl	800512c <HAL_GetTick>
 800adfc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800adfe:	e009      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ae00:	f7fa f994 	bl	800512c <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d902      	bls.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	74fb      	strb	r3, [r7, #19]
        break;
 800ae12:	e005      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ae14:	4b22      	ldr	r3, [pc, #136]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1ef      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800ae20:	7cfb      	ldrb	r3, [r7, #19]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d113      	bne.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800ae26:	4b1e      	ldr	r3, [pc, #120]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae36:	491a      	ldr	r1, [pc, #104]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3320      	adds	r3, #32
 800ae42:	2102      	movs	r1, #2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 f921 	bl	800b08c <RCCEx_PLLSAI2_Config>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800ae4e:	7cfb      	ldrb	r3, [r7, #19]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800ae54:	7cfb      	ldrb	r3, [r7, #19]
 800ae56:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d017      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ae64:	4b0e      	ldr	r3, [pc, #56]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae74:	490a      	ldr	r1, [pc, #40]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae86:	d105      	bne.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae88:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	4a04      	ldr	r2, [pc, #16]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ae94:	7cbb      	ldrb	r3, [r7, #18]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	40021000 	.word	0x40021000

0800aea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aeb2:	4b72      	ldr	r3, [pc, #456]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00e      	beq.n	800aedc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800aebe:	4b6f      	ldr	r3, [pc, #444]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	f003 0203 	and.w	r2, r3, #3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d103      	bne.n	800aed6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
       ||
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d142      	bne.n	800af5c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	73fb      	strb	r3, [r7, #15]
 800aeda:	e03f      	b.n	800af5c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d018      	beq.n	800af16 <RCCEx_PLLSAI1_Config+0x72>
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d825      	bhi.n	800af34 <RCCEx_PLLSAI1_Config+0x90>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d002      	beq.n	800aef2 <RCCEx_PLLSAI1_Config+0x4e>
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d009      	beq.n	800af04 <RCCEx_PLLSAI1_Config+0x60>
 800aef0:	e020      	b.n	800af34 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aef2:	4b62      	ldr	r3, [pc, #392]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d11d      	bne.n	800af3a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af02:	e01a      	b.n	800af3a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800af04:	4b5d      	ldr	r3, [pc, #372]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d116      	bne.n	800af3e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af14:	e013      	b.n	800af3e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af16:	4b59      	ldr	r3, [pc, #356]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10f      	bne.n	800af42 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800af22:	4b56      	ldr	r3, [pc, #344]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af32:	e006      	b.n	800af42 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	73fb      	strb	r3, [r7, #15]
      break;
 800af38:	e004      	b.n	800af44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af3a:	bf00      	nop
 800af3c:	e002      	b.n	800af44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af3e:	bf00      	nop
 800af40:	e000      	b.n	800af44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af42:	bf00      	nop
    }

    if(status == HAL_OK)
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d108      	bne.n	800af5c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800af4a:	4b4c      	ldr	r3, [pc, #304]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f023 0203 	bic.w	r2, r3, #3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4949      	ldr	r1, [pc, #292]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f040 8086 	bne.w	800b070 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800af64:	4b45      	ldr	r3, [pc, #276]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a44      	ldr	r2, [pc, #272]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af70:	f7fa f8dc 	bl	800512c <HAL_GetTick>
 800af74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af76:	e009      	b.n	800af8c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af78:	f7fa f8d8 	bl	800512c <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	2b02      	cmp	r3, #2
 800af84:	d902      	bls.n	800af8c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	73fb      	strb	r3, [r7, #15]
        break;
 800af8a:	e005      	b.n	800af98 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af8c:	4b3b      	ldr	r3, [pc, #236]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1ef      	bne.n	800af78 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d168      	bne.n	800b070 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d113      	bne.n	800afcc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800afa4:	4b35      	ldr	r3, [pc, #212]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	4b35      	ldr	r3, [pc, #212]	; (800b080 <RCCEx_PLLSAI1_Config+0x1dc>)
 800afaa:	4013      	ands	r3, r2
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6892      	ldr	r2, [r2, #8]
 800afb0:	0211      	lsls	r1, r2, #8
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	68d2      	ldr	r2, [r2, #12]
 800afb6:	06d2      	lsls	r2, r2, #27
 800afb8:	4311      	orrs	r1, r2
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	6852      	ldr	r2, [r2, #4]
 800afbe:	3a01      	subs	r2, #1
 800afc0:	0112      	lsls	r2, r2, #4
 800afc2:	430a      	orrs	r2, r1
 800afc4:	492d      	ldr	r1, [pc, #180]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800afc6:	4313      	orrs	r3, r2
 800afc8:	610b      	str	r3, [r1, #16]
 800afca:	e02d      	b.n	800b028 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d115      	bne.n	800affe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800afd2:	4b2a      	ldr	r3, [pc, #168]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800afd4:	691a      	ldr	r2, [r3, #16]
 800afd6:	4b2b      	ldr	r3, [pc, #172]	; (800b084 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afd8:	4013      	ands	r3, r2
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6892      	ldr	r2, [r2, #8]
 800afde:	0211      	lsls	r1, r2, #8
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6912      	ldr	r2, [r2, #16]
 800afe4:	0852      	lsrs	r2, r2, #1
 800afe6:	3a01      	subs	r2, #1
 800afe8:	0552      	lsls	r2, r2, #21
 800afea:	4311      	orrs	r1, r2
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6852      	ldr	r2, [r2, #4]
 800aff0:	3a01      	subs	r2, #1
 800aff2:	0112      	lsls	r2, r2, #4
 800aff4:	430a      	orrs	r2, r1
 800aff6:	4921      	ldr	r1, [pc, #132]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aff8:	4313      	orrs	r3, r2
 800affa:	610b      	str	r3, [r1, #16]
 800affc:	e014      	b.n	800b028 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800affe:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b000:	691a      	ldr	r2, [r3, #16]
 800b002:	4b21      	ldr	r3, [pc, #132]	; (800b088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b004:	4013      	ands	r3, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6892      	ldr	r2, [r2, #8]
 800b00a:	0211      	lsls	r1, r2, #8
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	6952      	ldr	r2, [r2, #20]
 800b010:	0852      	lsrs	r2, r2, #1
 800b012:	3a01      	subs	r2, #1
 800b014:	0652      	lsls	r2, r2, #25
 800b016:	4311      	orrs	r1, r2
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6852      	ldr	r2, [r2, #4]
 800b01c:	3a01      	subs	r2, #1
 800b01e:	0112      	lsls	r2, r2, #4
 800b020:	430a      	orrs	r2, r1
 800b022:	4916      	ldr	r1, [pc, #88]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b024:	4313      	orrs	r3, r2
 800b026:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b028:	4b14      	ldr	r3, [pc, #80]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a13      	ldr	r2, [pc, #76]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b02e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b032:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b034:	f7fa f87a 	bl	800512c <HAL_GetTick>
 800b038:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b03a:	e009      	b.n	800b050 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b03c:	f7fa f876 	bl	800512c <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	2b02      	cmp	r3, #2
 800b048:	d902      	bls.n	800b050 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	73fb      	strb	r3, [r7, #15]
          break;
 800b04e:	e005      	b.n	800b05c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b050:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d0ef      	beq.n	800b03c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d106      	bne.n	800b070 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b062:	4b06      	ldr	r3, [pc, #24]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b064:	691a      	ldr	r2, [r3, #16]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	4904      	ldr	r1, [pc, #16]	; (800b07c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	40021000 	.word	0x40021000
 800b080:	07ff800f 	.word	0x07ff800f
 800b084:	ff9f800f 	.word	0xff9f800f
 800b088:	f9ff800f 	.word	0xf9ff800f

0800b08c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b09a:	4b72      	ldr	r3, [pc, #456]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00e      	beq.n	800b0c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b0a6:	4b6f      	ldr	r3, [pc, #444]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f003 0203 	and.w	r2, r3, #3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d103      	bne.n	800b0be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
       ||
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d142      	bne.n	800b144 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	73fb      	strb	r3, [r7, #15]
 800b0c2:	e03f      	b.n	800b144 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d018      	beq.n	800b0fe <RCCEx_PLLSAI2_Config+0x72>
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	d825      	bhi.n	800b11c <RCCEx_PLLSAI2_Config+0x90>
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d002      	beq.n	800b0da <RCCEx_PLLSAI2_Config+0x4e>
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d009      	beq.n	800b0ec <RCCEx_PLLSAI2_Config+0x60>
 800b0d8:	e020      	b.n	800b11c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b0da:	4b62      	ldr	r3, [pc, #392]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d11d      	bne.n	800b122 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0ea:	e01a      	b.n	800b122 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b0ec:	4b5d      	ldr	r3, [pc, #372]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d116      	bne.n	800b126 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0fc:	e013      	b.n	800b126 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b0fe:	4b59      	ldr	r3, [pc, #356]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10f      	bne.n	800b12a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b10a:	4b56      	ldr	r3, [pc, #344]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d109      	bne.n	800b12a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b11a:	e006      	b.n	800b12a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	73fb      	strb	r3, [r7, #15]
      break;
 800b120:	e004      	b.n	800b12c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b122:	bf00      	nop
 800b124:	e002      	b.n	800b12c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b126:	bf00      	nop
 800b128:	e000      	b.n	800b12c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b12a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d108      	bne.n	800b144 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b132:	4b4c      	ldr	r3, [pc, #304]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	f023 0203 	bic.w	r2, r3, #3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4949      	ldr	r1, [pc, #292]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b140:	4313      	orrs	r3, r2
 800b142:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f040 8086 	bne.w	800b258 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b14c:	4b45      	ldr	r3, [pc, #276]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a44      	ldr	r2, [pc, #272]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b158:	f7f9 ffe8 	bl	800512c <HAL_GetTick>
 800b15c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b15e:	e009      	b.n	800b174 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b160:	f7f9 ffe4 	bl	800512c <HAL_GetTick>
 800b164:	4602      	mov	r2, r0
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d902      	bls.n	800b174 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	73fb      	strb	r3, [r7, #15]
        break;
 800b172:	e005      	b.n	800b180 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b174:	4b3b      	ldr	r3, [pc, #236]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1ef      	bne.n	800b160 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d168      	bne.n	800b258 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d113      	bne.n	800b1b4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b18c:	4b35      	ldr	r3, [pc, #212]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b18e:	695a      	ldr	r2, [r3, #20]
 800b190:	4b35      	ldr	r3, [pc, #212]	; (800b268 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b192:	4013      	ands	r3, r2
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6892      	ldr	r2, [r2, #8]
 800b198:	0211      	lsls	r1, r2, #8
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	68d2      	ldr	r2, [r2, #12]
 800b19e:	06d2      	lsls	r2, r2, #27
 800b1a0:	4311      	orrs	r1, r2
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	6852      	ldr	r2, [r2, #4]
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	0112      	lsls	r2, r2, #4
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	492d      	ldr	r1, [pc, #180]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	614b      	str	r3, [r1, #20]
 800b1b2:	e02d      	b.n	800b210 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d115      	bne.n	800b1e6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b1ba:	4b2a      	ldr	r3, [pc, #168]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1bc:	695a      	ldr	r2, [r3, #20]
 800b1be:	4b2b      	ldr	r3, [pc, #172]	; (800b26c <RCCEx_PLLSAI2_Config+0x1e0>)
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	6892      	ldr	r2, [r2, #8]
 800b1c6:	0211      	lsls	r1, r2, #8
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	6912      	ldr	r2, [r2, #16]
 800b1cc:	0852      	lsrs	r2, r2, #1
 800b1ce:	3a01      	subs	r2, #1
 800b1d0:	0552      	lsls	r2, r2, #21
 800b1d2:	4311      	orrs	r1, r2
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6852      	ldr	r2, [r2, #4]
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	0112      	lsls	r2, r2, #4
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	4921      	ldr	r1, [pc, #132]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	614b      	str	r3, [r1, #20]
 800b1e4:	e014      	b.n	800b210 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b1e6:	4b1f      	ldr	r3, [pc, #124]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	4b21      	ldr	r3, [pc, #132]	; (800b270 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6892      	ldr	r2, [r2, #8]
 800b1f2:	0211      	lsls	r1, r2, #8
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	6952      	ldr	r2, [r2, #20]
 800b1f8:	0852      	lsrs	r2, r2, #1
 800b1fa:	3a01      	subs	r2, #1
 800b1fc:	0652      	lsls	r2, r2, #25
 800b1fe:	4311      	orrs	r1, r2
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	6852      	ldr	r2, [r2, #4]
 800b204:	3a01      	subs	r2, #1
 800b206:	0112      	lsls	r2, r2, #4
 800b208:	430a      	orrs	r2, r1
 800b20a:	4916      	ldr	r1, [pc, #88]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b210:	4b14      	ldr	r3, [pc, #80]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a13      	ldr	r2, [pc, #76]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b21a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b21c:	f7f9 ff86 	bl	800512c <HAL_GetTick>
 800b220:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b222:	e009      	b.n	800b238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b224:	f7f9 ff82 	bl	800512c <HAL_GetTick>
 800b228:	4602      	mov	r2, r0
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d902      	bls.n	800b238 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b232:	2303      	movs	r3, #3
 800b234:	73fb      	strb	r3, [r7, #15]
          break;
 800b236:	e005      	b.n	800b244 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b238:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0ef      	beq.n	800b224 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b24a:	4b06      	ldr	r3, [pc, #24]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b24c:	695a      	ldr	r2, [r3, #20]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	4904      	ldr	r1, [pc, #16]	; (800b264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b254:	4313      	orrs	r3, r2
 800b256:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	40021000 	.word	0x40021000
 800b268:	07ff800f 	.word	0x07ff800f
 800b26c:	ff9f800f 	.word	0xff9f800f
 800b270:	f9ff800f 	.word	0xf9ff800f

0800b274 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d07f      	beq.n	800b386 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7f9 fc70 	bl	8004b80 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b2a6:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	22ca      	movs	r2, #202	; 0xca
 800b2b6:	625a      	str	r2, [r3, #36]	; 0x24
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2253      	movs	r2, #83	; 0x53
 800b2be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fa65 	bl	800b790 <RTC_EnterInitMode>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d15a      	bne.n	800b386 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6812      	ldr	r2, [r2, #0]
 800b2da:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b2de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2e2:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6999      	ldr	r1, [r3, #24]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6912      	ldr	r2, [r2, #16]
 800b30a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6919      	ldr	r1, [r3, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	041a      	lsls	r2, r3, #16
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b320:	4b1b      	ldr	r3, [pc, #108]	; (800b390 <HAL_RTC_Init+0x11c>)
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	430b      	orrs	r3, r1
 800b332:	4917      	ldr	r1, [pc, #92]	; (800b390 <HAL_RTC_Init+0x11c>)
 800b334:	4313      	orrs	r3, r2
 800b336:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fa5f 	bl	800b7fc <RTC_ExitInitMode>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11e      	bne.n	800b386 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	699a      	ldr	r2, [r3, #24]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b356:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6999      	ldr	r1, [r3, #24]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	431a      	orrs	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	431a      	orrs	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	22ff      	movs	r2, #255	; 0xff
 800b37c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	40002800 	.word	0x40002800

0800b394 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b394:	b590      	push	{r4, r7, lr}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d101      	bne.n	800b3ae <HAL_RTC_SetTime+0x1a>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e08b      	b.n	800b4c6 <HAL_RTC_SetTime+0x132>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	22ca      	movs	r2, #202	; 0xca
 800b3c4:	625a      	str	r2, [r3, #36]	; 0x24
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2253      	movs	r2, #83	; 0x53
 800b3cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 f9de 	bl	800b790 <RTC_EnterInitMode>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b3d8:	7cfb      	ldrb	r3, [r7, #19]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d15e      	bne.n	800b49c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b3de:	4b3c      	ldr	r3, [pc, #240]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ea:	d057      	beq.n	800b49c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d125      	bne.n	800b43e <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b3f2:	4b37      	ldr	r3, [pc, #220]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2200      	movs	r2, #0
 800b402:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 fa35 	bl	800b878 <RTC_ByteToBcd2>
 800b40e:	4603      	mov	r3, r0
 800b410:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fa2e 	bl	800b878 <RTC_ByteToBcd2>
 800b41c:	4603      	mov	r3, r0
 800b41e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b420:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	789b      	ldrb	r3, [r3, #2]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fa26 	bl	800b878 <RTC_ByteToBcd2>
 800b42c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b42e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	78db      	ldrb	r3, [r3, #3]
 800b436:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b438:	4313      	orrs	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	e017      	b.n	800b46e <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b43e:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2200      	movs	r2, #0
 800b44e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b45c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b462:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	78db      	ldrb	r3, [r3, #3]
 800b468:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b46a:	4313      	orrs	r3, r2
 800b46c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b46e:	4a18      	ldr	r2, [pc, #96]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b476:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b47a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b47c:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b486:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b488:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b48a:	699a      	ldr	r2, [r3, #24]
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	68d9      	ldr	r1, [r3, #12]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	430b      	orrs	r3, r1
 800b496:	490e      	ldr	r1, [pc, #56]	; (800b4d0 <HAL_RTC_SetTime+0x13c>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f9ad 	bl	800b7fc <RTC_ExitInitMode>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	22ff      	movs	r2, #255	; 0xff
 800b4ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b4ae:	7cfb      	ldrb	r3, [r7, #19]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d103      	bne.n	800b4bc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b4c4:	7cfb      	ldrb	r3, [r7, #19]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	371c      	adds	r7, #28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd90      	pop	{r4, r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40002800 	.word	0x40002800

0800b4d4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b4e0:	4b2c      	ldr	r3, [pc, #176]	; (800b594 <HAL_RTC_GetTime+0xc0>)
 800b4e2:	689a      	ldr	r2, [r3, #8]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b4e8:	4b2a      	ldr	r3, [pc, #168]	; (800b594 <HAL_RTC_GetTime+0xc0>)
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f4:	d049      	beq.n	800b58a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b4f6:	4b27      	ldr	r3, [pc, #156]	; (800b594 <HAL_RTC_GetTime+0xc0>)
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b502:	4b24      	ldr	r3, [pc, #144]	; (800b594 <HAL_RTC_GetTime+0xc0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b50a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b50e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	0c1b      	lsrs	r3, r3, #16
 800b514:	b2db      	uxtb	r3, r3
 800b516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	0a1b      	lsrs	r3, r3, #8
 800b524:	b2db      	uxtb	r3, r3
 800b526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	0d9b      	lsrs	r3, r3, #22
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11a      	bne.n	800b58a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 f9ad 	bl	800b8b8 <RTC_Bcd2ToByte>
 800b55e:	4603      	mov	r3, r0
 800b560:	461a      	mov	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	785b      	ldrb	r3, [r3, #1]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f9a4 	bl	800b8b8 <RTC_Bcd2ToByte>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f99b 	bl	800b8b8 <RTC_Bcd2ToByte>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	40002800 	.word	0x40002800

0800b598 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b598:	b590      	push	{r4, r7, lr}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d101      	bne.n	800b5b2 <HAL_RTC_SetDate+0x1a>
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	e074      	b.n	800b69c <HAL_RTC_SetDate+0x104>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10e      	bne.n	800b5e6 <HAL_RTC_SetDate+0x4e>
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	785b      	ldrb	r3, [r3, #1]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d008      	beq.n	800b5e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	f023 0310 	bic.w	r3, r3, #16
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	330a      	adds	r3, #10
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d11c      	bne.n	800b626 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	78db      	ldrb	r3, [r3, #3]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 f941 	bl	800b878 <RTC_ByteToBcd2>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 f93a 	bl	800b878 <RTC_ByteToBcd2>
 800b604:	4603      	mov	r3, r0
 800b606:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b608:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	789b      	ldrb	r3, [r3, #2]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f932 	bl	800b878 <RTC_ByteToBcd2>
 800b614:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b616:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b620:	4313      	orrs	r3, r2
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	e00e      	b.n	800b644 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	78db      	ldrb	r3, [r3, #3]
 800b62a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	785b      	ldrb	r3, [r3, #1]
 800b630:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b632:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b638:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b640:	4313      	orrs	r3, r2
 800b642:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	22ca      	movs	r2, #202	; 0xca
 800b64a:	625a      	str	r2, [r3, #36]	; 0x24
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2253      	movs	r2, #83	; 0x53
 800b652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 f89b 	bl	800b790 <RTC_EnterInitMode>
 800b65a:	4603      	mov	r3, r0
 800b65c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b65e:	7cfb      	ldrb	r3, [r7, #19]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10b      	bne.n	800b67c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b664:	4a0f      	ldr	r2, [pc, #60]	; (800b6a4 <HAL_RTC_SetDate+0x10c>)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b66c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b670:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 f8c2 	bl	800b7fc <RTC_ExitInitMode>
 800b678:	4603      	mov	r3, r0
 800b67a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	22ff      	movs	r2, #255	; 0xff
 800b682:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b684:	7cfb      	ldrb	r3, [r7, #19]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d103      	bne.n	800b692 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b69a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	371c      	adds	r7, #28
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd90      	pop	{r4, r7, pc}
 800b6a4:	40002800 	.word	0x40002800

0800b6a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b6b4:	4b22      	ldr	r3, [pc, #136]	; (800b740 <HAL_RTC_GetDate+0x98>)
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	0c1b      	lsrs	r3, r3, #16
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	0a1b      	lsrs	r3, r3, #8
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f003 031f 	and.w	r3, r3, #31
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	0b5b      	lsrs	r3, r3, #13
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	f003 0307 	and.w	r3, r3, #7
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d11a      	bne.n	800b736 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	78db      	ldrb	r3, [r3, #3]
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f8d7 	bl	800b8b8 <RTC_Bcd2ToByte>
 800b70a:	4603      	mov	r3, r0
 800b70c:	461a      	mov	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f8ce 	bl	800b8b8 <RTC_Bcd2ToByte>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	789b      	ldrb	r3, [r3, #2]
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 f8c5 	bl	800b8b8 <RTC_Bcd2ToByte>
 800b72e:	4603      	mov	r3, r0
 800b730:	461a      	mov	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	40002800 	.word	0x40002800

0800b744 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b75a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800b75c:	f7f9 fce6 	bl	800512c <HAL_GetTick>
 800b760:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b762:	e009      	b.n	800b778 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b764:	f7f9 fce2 	bl	800512c <HAL_GetTick>
 800b768:	4602      	mov	r2, r0
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b772:	d901      	bls.n	800b778 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e007      	b.n	800b788 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	f003 0320 	and.w	r3, r3, #32
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0ee      	beq.n	800b764 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d123      	bne.n	800b7f2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b7b8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b7ba:	f7f9 fcb7 	bl	800512c <HAL_GetTick>
 800b7be:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7c0:	e00d      	b.n	800b7de <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b7c2:	f7f9 fcb3 	bl	800512c <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7d0:	d905      	bls.n	800b7de <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2203      	movs	r2, #3
 800b7da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <RTC_EnterInitMode+0x62>
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d1e7      	bne.n	800b7c2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b808:	4b1a      	ldr	r3, [pc, #104]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4a19      	ldr	r2, [pc, #100]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b812:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b814:	4b17      	ldr	r3, [pc, #92]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	f003 0320 	and.w	r3, r3, #32
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10c      	bne.n	800b83a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7ff ff8f 	bl	800b744 <HAL_RTC_WaitForSynchro>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d01e      	beq.n	800b86a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2203      	movs	r2, #3
 800b830:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	73fb      	strb	r3, [r7, #15]
 800b838:	e017      	b.n	800b86a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b83a:	4b0e      	ldr	r3, [pc, #56]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	4a0d      	ldr	r2, [pc, #52]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b840:	f023 0320 	bic.w	r3, r3, #32
 800b844:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff ff7c 	bl	800b744 <HAL_RTC_WaitForSynchro>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d005      	beq.n	800b85e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2203      	movs	r2, #3
 800b856:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b85e:	4b05      	ldr	r3, [pc, #20]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	4a04      	ldr	r2, [pc, #16]	; (800b874 <RTC_ExitInitMode+0x78>)
 800b864:	f043 0320 	orr.w	r3, r3, #32
 800b868:	6193      	str	r3, [r2, #24]
  }

  return status;
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	40002800 	.word	0x40002800

0800b878 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b88a:	e005      	b.n	800b898 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3301      	adds	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b892:	7afb      	ldrb	r3, [r7, #11]
 800b894:	3b0a      	subs	r3, #10
 800b896:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b898:	7afb      	ldrb	r3, [r7, #11]
 800b89a:	2b09      	cmp	r3, #9
 800b89c:	d8f6      	bhi.n	800b88c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	011b      	lsls	r3, r3, #4
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	b2db      	uxtb	r3, r3
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b8c2:	79fb      	ldrb	r3, [r7, #7]
 800b8c4:	091b      	lsrs	r3, r3, #4
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	0092      	lsls	r2, r2, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	7bfb      	ldrb	r3, [r7, #15]
 800b8dc:	4413      	add	r3, r2
 800b8de:	b2db      	uxtb	r3, r3
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e095      	b.n	800ba2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b00      	cmp	r3, #0
 800b904:	d108      	bne.n	800b918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b90e:	d009      	beq.n	800b924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	61da      	str	r2, [r3, #28]
 800b916:	e005      	b.n	800b924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7f9 f95c 	bl	8004bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2202      	movs	r2, #2
 800b948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b95a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b964:	d902      	bls.n	800b96c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b966:	2300      	movs	r3, #0
 800b968:	60fb      	str	r3, [r7, #12]
 800b96a:	e002      	b.n	800b972 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b96c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b970:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b97a:	d007      	beq.n	800b98c <HAL_SPI_Init+0xa0>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b984:	d002      	beq.n	800b98c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b99c:	431a      	orrs	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ce:	ea42 0103 	orr.w	r1, r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	0c1b      	lsrs	r3, r3, #16
 800b9e8:	f003 0204 	and.w	r2, r3, #4
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	f003 0310 	and.w	r3, r3, #16
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	f003 0308 	and.w	r3, r3, #8
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ba08:	ea42 0103 	orr.w	r1, r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b088      	sub	sp, #32
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	603b      	str	r3, [r7, #0]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_SPI_Transmit+0x22>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e158      	b.n	800bd06 <HAL_SPI_Transmit+0x2d4>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba5c:	f7f9 fb66 	bl	800512c <HAL_GetTick>
 800ba60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ba62:	88fb      	ldrh	r3, [r7, #6]
 800ba64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d002      	beq.n	800ba78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ba72:	2302      	movs	r3, #2
 800ba74:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba76:	e13d      	b.n	800bcf4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <HAL_SPI_Transmit+0x52>
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba88:	e134      	b.n	800bcf4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2203      	movs	r2, #3
 800ba8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	88fa      	ldrh	r2, [r7, #6]
 800baa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	88fa      	ldrh	r2, [r7, #6]
 800baa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bad4:	d10f      	bne.n	800baf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d007      	beq.n	800bb14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb1c:	d94b      	bls.n	800bbb6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <HAL_SPI_Transmit+0xfa>
 800bb26:	8afb      	ldrh	r3, [r7, #22]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d13e      	bne.n	800bbaa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb30:	881a      	ldrh	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	1c9a      	adds	r2, r3, #2
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bb50:	e02b      	b.n	800bbaa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	f003 0302 	and.w	r3, r3, #2
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d112      	bne.n	800bb86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb64:	881a      	ldrh	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb70:	1c9a      	adds	r2, r3, #2
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb84:	e011      	b.n	800bbaa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb86:	f7f9 fad1 	bl	800512c <HAL_GetTick>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d803      	bhi.n	800bb9e <HAL_SPI_Transmit+0x16c>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9c:	d102      	bne.n	800bba4 <HAL_SPI_Transmit+0x172>
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bba8:	e0a4      	b.n	800bcf4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1ce      	bne.n	800bb52 <HAL_SPI_Transmit+0x120>
 800bbb4:	e07c      	b.n	800bcb0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <HAL_SPI_Transmit+0x192>
 800bbbe:	8afb      	ldrh	r3, [r7, #22]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d170      	bne.n	800bca6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d912      	bls.n	800bbf4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd2:	881a      	ldrh	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	1c9a      	adds	r2, r3, #2
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3b02      	subs	r3, #2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbf2:	e058      	b.n	800bca6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	330c      	adds	r3, #12
 800bbfe:	7812      	ldrb	r2, [r2, #0]
 800bc00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	3b01      	subs	r3, #1
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bc1a:	e044      	b.n	800bca6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d12b      	bne.n	800bc82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d912      	bls.n	800bc5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	1c9a      	adds	r2, r3, #2
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	3b02      	subs	r3, #2
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc58:	e025      	b.n	800bca6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	330c      	adds	r3, #12
 800bc64:	7812      	ldrb	r2, [r2, #0]
 800bc66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc80:	e011      	b.n	800bca6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc82:	f7f9 fa53 	bl	800512c <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d803      	bhi.n	800bc9a <HAL_SPI_Transmit+0x268>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc98:	d102      	bne.n	800bca0 <HAL_SPI_Transmit+0x26e>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bca4:	e026      	b.n	800bcf4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1b5      	bne.n	800bc1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 fb5b 	bl	800c370 <SPI_EndRxTxTransaction>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10a      	bne.n	800bce4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcce:	2300      	movs	r3, #0
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	613b      	str	r3, [r7, #16]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	613b      	str	r3, [r7, #16]
 800bce2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	77fb      	strb	r3, [r7, #31]
 800bcf0:	e000      	b.n	800bcf4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bcf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bd04:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3720      	adds	r7, #32
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b08a      	sub	sp, #40	; 0x28
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	60f8      	str	r0, [r7, #12]
 800bd16:	60b9      	str	r1, [r7, #8]
 800bd18:	607a      	str	r2, [r7, #4]
 800bd1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_SPI_TransmitReceive+0x26>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e1fb      	b.n	800c12c <HAL_SPI_TransmitReceive+0x41e>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd3c:	f7f9 f9f6 	bl	800512c <HAL_GetTick>
 800bd40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bd50:	887b      	ldrh	r3, [r7, #2]
 800bd52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bd54:	887b      	ldrh	r3, [r7, #2]
 800bd56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd58:	7efb      	ldrb	r3, [r7, #27]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d00e      	beq.n	800bd7c <HAL_SPI_TransmitReceive+0x6e>
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd64:	d106      	bne.n	800bd74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <HAL_SPI_TransmitReceive+0x66>
 800bd6e:	7efb      	ldrb	r3, [r7, #27]
 800bd70:	2b04      	cmp	r3, #4
 800bd72:	d003      	beq.n	800bd7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bd74:	2302      	movs	r3, #2
 800bd76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bd7a:	e1cd      	b.n	800c118 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d005      	beq.n	800bd8e <HAL_SPI_TransmitReceive+0x80>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <HAL_SPI_TransmitReceive+0x80>
 800bd88:	887b      	ldrh	r3, [r7, #2]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d103      	bne.n	800bd96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bd94:	e1c0      	b.n	800c118 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	d003      	beq.n	800bdaa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2205      	movs	r2, #5
 800bda6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	887a      	ldrh	r2, [r7, #2]
 800bdba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	887a      	ldrh	r2, [r7, #2]
 800bdc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	887a      	ldrh	r2, [r7, #2]
 800bdd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	887a      	ldrh	r2, [r7, #2]
 800bdd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdec:	d802      	bhi.n	800bdf4 <HAL_SPI_TransmitReceive+0xe6>
 800bdee:	8a3b      	ldrh	r3, [r7, #16]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d908      	bls.n	800be06 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be02:	605a      	str	r2, [r3, #4]
 800be04:	e007      	b.n	800be16 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685a      	ldr	r2, [r3, #4]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be14:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be20:	2b40      	cmp	r3, #64	; 0x40
 800be22:	d007      	beq.n	800be34 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be3c:	d97c      	bls.n	800bf38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <HAL_SPI_TransmitReceive+0x13e>
 800be46:	8a7b      	ldrh	r3, [r7, #18]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d169      	bne.n	800bf20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be50:	881a      	ldrh	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	1c9a      	adds	r2, r3, #2
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be66:	b29b      	uxth	r3, r3
 800be68:	3b01      	subs	r3, #1
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be70:	e056      	b.n	800bf20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d11b      	bne.n	800beb8 <HAL_SPI_TransmitReceive+0x1aa>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be84:	b29b      	uxth	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d016      	beq.n	800beb8 <HAL_SPI_TransmitReceive+0x1aa>
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d113      	bne.n	800beb8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	881a      	ldrh	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea0:	1c9a      	adds	r2, r3, #2
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beaa:	b29b      	uxth	r3, r3
 800beac:	3b01      	subs	r3, #1
 800beae:	b29a      	uxth	r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800beb4:	2300      	movs	r3, #0
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d11c      	bne.n	800bf00 <HAL_SPI_TransmitReceive+0x1f2>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800becc:	b29b      	uxth	r3, r3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d016      	beq.n	800bf00 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bedc:	b292      	uxth	r2, r2
 800bede:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee4:	1c9a      	adds	r2, r3, #2
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800befc:	2301      	movs	r3, #1
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf00:	f7f9 f914 	bl	800512c <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d807      	bhi.n	800bf20 <HAL_SPI_TransmitReceive+0x212>
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf16:	d003      	beq.n	800bf20 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bf1e:	e0fb      	b.n	800c118 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1a3      	bne.n	800be72 <HAL_SPI_TransmitReceive+0x164>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d19d      	bne.n	800be72 <HAL_SPI_TransmitReceive+0x164>
 800bf36:	e0df      	b.n	800c0f8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d003      	beq.n	800bf48 <HAL_SPI_TransmitReceive+0x23a>
 800bf40:	8a7b      	ldrh	r3, [r7, #18]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	f040 80cb 	bne.w	800c0de <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d912      	bls.n	800bf78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	881a      	ldrh	r2, [r3, #0]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	1c9a      	adds	r2, r3, #2
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	3b02      	subs	r3, #2
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf76:	e0b2      	b.n	800c0de <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	330c      	adds	r3, #12
 800bf82:	7812      	ldrb	r2, [r2, #0]
 800bf84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	3b01      	subs	r3, #1
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf9e:	e09e      	b.n	800c0de <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f003 0302 	and.w	r3, r3, #2
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d134      	bne.n	800c018 <HAL_SPI_TransmitReceive+0x30a>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d02f      	beq.n	800c018 <HAL_SPI_TransmitReceive+0x30a>
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d12c      	bne.n	800c018 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d912      	bls.n	800bfee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfcc:	881a      	ldrh	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd8:	1c9a      	adds	r2, r3, #2
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	3b02      	subs	r3, #2
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfec:	e012      	b.n	800c014 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	330c      	adds	r3, #12
 800bff8:	7812      	ldrb	r2, [r2, #0]
 800bffa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c014:	2300      	movs	r3, #0
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b01      	cmp	r3, #1
 800c024:	d148      	bne.n	800c0b8 <HAL_SPI_TransmitReceive+0x3aa>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d042      	beq.n	800c0b8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d923      	bls.n	800c086 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c048:	b292      	uxth	r2, r2
 800c04a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c050:	1c9a      	adds	r2, r3, #2
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	3b02      	subs	r3, #2
 800c060:	b29a      	uxth	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c06e:	b29b      	uxth	r3, r3
 800c070:	2b01      	cmp	r3, #1
 800c072:	d81f      	bhi.n	800c0b4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c082:	605a      	str	r2, [r3, #4]
 800c084:	e016      	b.n	800c0b4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f103 020c 	add.w	r2, r3, #12
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c092:	7812      	ldrb	r2, [r2, #0]
 800c094:	b2d2      	uxtb	r2, r2
 800c096:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c0b8:	f7f9 f838 	bl	800512c <HAL_GetTick>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d803      	bhi.n	800c0d0 <HAL_SPI_TransmitReceive+0x3c2>
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ce:	d102      	bne.n	800c0d6 <HAL_SPI_TransmitReceive+0x3c8>
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c0dc:	e01c      	b.n	800c118 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f af5b 	bne.w	800bfa0 <HAL_SPI_TransmitReceive+0x292>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f47f af54 	bne.w	800bfa0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0f8:	69fa      	ldr	r2, [r7, #28]
 800c0fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f937 	bl	800c370 <SPI_EndRxTxTransaction>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d006      	beq.n	800c116 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2220      	movs	r2, #32
 800c112:	661a      	str	r2, [r3, #96]	; 0x60
 800c114:	e000      	b.n	800c118 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3728      	adds	r7, #40	; 0x28
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	4613      	mov	r3, r2
 800c142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c144:	f7f8 fff2 	bl	800512c <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	1a9b      	subs	r3, r3, r2
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4413      	add	r3, r2
 800c152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c154:	f7f8 ffea 	bl	800512c <HAL_GetTick>
 800c158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c15a:	4b39      	ldr	r3, [pc, #228]	; (800c240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	015b      	lsls	r3, r3, #5
 800c160:	0d1b      	lsrs	r3, r3, #20
 800c162:	69fa      	ldr	r2, [r7, #28]
 800c164:	fb02 f303 	mul.w	r3, r2, r3
 800c168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c16a:	e054      	b.n	800c216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c172:	d050      	beq.n	800c216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c174:	f7f8 ffda 	bl	800512c <HAL_GetTick>
 800c178:	4602      	mov	r2, r0
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	1ad3      	subs	r3, r2, r3
 800c17e:	69fa      	ldr	r2, [r7, #28]
 800c180:	429a      	cmp	r2, r3
 800c182:	d902      	bls.n	800c18a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d13d      	bne.n	800c206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1a2:	d111      	bne.n	800c1c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ac:	d004      	beq.n	800c1b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b6:	d107      	bne.n	800c1c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1d0:	d10f      	bne.n	800c1f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	e017      	b.n	800c236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	3b01      	subs	r3, #1
 800c214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	4013      	ands	r3, r2
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	429a      	cmp	r2, r3
 800c224:	bf0c      	ite	eq
 800c226:	2301      	moveq	r3, #1
 800c228:	2300      	movne	r3, #0
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	461a      	mov	r2, r3
 800c22e:	79fb      	ldrb	r3, [r7, #7]
 800c230:	429a      	cmp	r2, r3
 800c232:	d19b      	bne.n	800c16c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3720      	adds	r7, #32
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000208 	.word	0x20000208

0800c244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08a      	sub	sp, #40	; 0x28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c256:	f7f8 ff69 	bl	800512c <HAL_GetTick>
 800c25a:	4602      	mov	r2, r0
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	1a9b      	subs	r3, r3, r2
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	4413      	add	r3, r2
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c266:	f7f8 ff61 	bl	800512c <HAL_GetTick>
 800c26a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	330c      	adds	r3, #12
 800c272:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c274:	4b3d      	ldr	r3, [pc, #244]	; (800c36c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	00da      	lsls	r2, r3, #3
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	0d1b      	lsrs	r3, r3, #20
 800c284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c286:	fb02 f303 	mul.w	r3, r2, r3
 800c28a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c28c:	e060      	b.n	800c350 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c294:	d107      	bne.n	800c2a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d104      	bne.n	800c2a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d050      	beq.n	800c350 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2ae:	f7f8 ff3d 	bl	800512c <HAL_GetTick>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d902      	bls.n	800c2c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d13d      	bne.n	800c340 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2dc:	d111      	bne.n	800c302 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2e6:	d004      	beq.n	800c2f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2f0:	d107      	bne.n	800c302 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c300:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c30a:	d10f      	bne.n	800c32c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c32a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e010      	b.n	800c362 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689a      	ldr	r2, [r3, #8]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	4013      	ands	r3, r2
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d196      	bne.n	800c28e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3728      	adds	r7, #40	; 0x28
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20000208 	.word	0x20000208

0800c370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af02      	add	r7, sp, #8
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2200      	movs	r2, #0
 800c384:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff ff5b 	bl	800c244 <SPI_WaitFifoStateUntilTimeout>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c398:	f043 0220 	orr.w	r2, r3, #32
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e027      	b.n	800c3f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	2180      	movs	r1, #128	; 0x80
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7ff fec0 	bl	800c134 <SPI_WaitFlagStateUntilTimeout>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d007      	beq.n	800c3ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3be:	f043 0220 	orr.w	r2, r3, #32
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	e014      	b.n	800c3f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff ff34 	bl	800c244 <SPI_WaitFifoStateUntilTimeout>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d007      	beq.n	800c3f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3e6:	f043 0220 	orr.w	r2, r3, #32
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e000      	b.n	800c3f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e049      	b.n	800c4a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7f8 fc3e 	bl	8004ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3304      	adds	r3, #4
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f000 fb1e 	bl	800ca7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
	...

0800c4ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d001      	beq.n	800c4c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e047      	b.n	800c554 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a23      	ldr	r2, [pc, #140]	; (800c560 <HAL_TIM_Base_Start+0xb4>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d01d      	beq.n	800c512 <HAL_TIM_Base_Start+0x66>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4de:	d018      	beq.n	800c512 <HAL_TIM_Base_Start+0x66>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a1f      	ldr	r2, [pc, #124]	; (800c564 <HAL_TIM_Base_Start+0xb8>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d013      	beq.n	800c512 <HAL_TIM_Base_Start+0x66>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a1e      	ldr	r2, [pc, #120]	; (800c568 <HAL_TIM_Base_Start+0xbc>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d00e      	beq.n	800c512 <HAL_TIM_Base_Start+0x66>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a1c      	ldr	r2, [pc, #112]	; (800c56c <HAL_TIM_Base_Start+0xc0>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d009      	beq.n	800c512 <HAL_TIM_Base_Start+0x66>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a1b      	ldr	r2, [pc, #108]	; (800c570 <HAL_TIM_Base_Start+0xc4>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d004      	beq.n	800c512 <HAL_TIM_Base_Start+0x66>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a19      	ldr	r2, [pc, #100]	; (800c574 <HAL_TIM_Base_Start+0xc8>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d115      	bne.n	800c53e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689a      	ldr	r2, [r3, #8]
 800c518:	4b17      	ldr	r3, [pc, #92]	; (800c578 <HAL_TIM_Base_Start+0xcc>)
 800c51a:	4013      	ands	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b06      	cmp	r3, #6
 800c522:	d015      	beq.n	800c550 <HAL_TIM_Base_Start+0xa4>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c52a:	d011      	beq.n	800c550 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f042 0201 	orr.w	r2, r2, #1
 800c53a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c53c:	e008      	b.n	800c550 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f042 0201 	orr.w	r2, r2, #1
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	e000      	b.n	800c552 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c550:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	40012c00 	.word	0x40012c00
 800c564:	40000400 	.word	0x40000400
 800c568:	40000800 	.word	0x40000800
 800c56c:	40000c00 	.word	0x40000c00
 800c570:	40013400 	.word	0x40013400
 800c574:	40014000 	.word	0x40014000
 800c578:	00010007 	.word	0x00010007

0800c57c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d001      	beq.n	800c594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e04f      	b.n	800c634 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2202      	movs	r2, #2
 800c598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f042 0201 	orr.w	r2, r2, #1
 800c5aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a23      	ldr	r2, [pc, #140]	; (800c640 <HAL_TIM_Base_Start_IT+0xc4>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d01d      	beq.n	800c5f2 <HAL_TIM_Base_Start_IT+0x76>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5be:	d018      	beq.n	800c5f2 <HAL_TIM_Base_Start_IT+0x76>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a1f      	ldr	r2, [pc, #124]	; (800c644 <HAL_TIM_Base_Start_IT+0xc8>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d013      	beq.n	800c5f2 <HAL_TIM_Base_Start_IT+0x76>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a1e      	ldr	r2, [pc, #120]	; (800c648 <HAL_TIM_Base_Start_IT+0xcc>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00e      	beq.n	800c5f2 <HAL_TIM_Base_Start_IT+0x76>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a1c      	ldr	r2, [pc, #112]	; (800c64c <HAL_TIM_Base_Start_IT+0xd0>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d009      	beq.n	800c5f2 <HAL_TIM_Base_Start_IT+0x76>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a1b      	ldr	r2, [pc, #108]	; (800c650 <HAL_TIM_Base_Start_IT+0xd4>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d004      	beq.n	800c5f2 <HAL_TIM_Base_Start_IT+0x76>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a19      	ldr	r2, [pc, #100]	; (800c654 <HAL_TIM_Base_Start_IT+0xd8>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d115      	bne.n	800c61e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689a      	ldr	r2, [r3, #8]
 800c5f8:	4b17      	ldr	r3, [pc, #92]	; (800c658 <HAL_TIM_Base_Start_IT+0xdc>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2b06      	cmp	r3, #6
 800c602:	d015      	beq.n	800c630 <HAL_TIM_Base_Start_IT+0xb4>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60a:	d011      	beq.n	800c630 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f042 0201 	orr.w	r2, r2, #1
 800c61a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c61c:	e008      	b.n	800c630 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f042 0201 	orr.w	r2, r2, #1
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	e000      	b.n	800c632 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c630:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	40012c00 	.word	0x40012c00
 800c644:	40000400 	.word	0x40000400
 800c648:	40000800 	.word	0x40000800
 800c64c:	40000c00 	.word	0x40000c00
 800c650:	40013400 	.word	0x40013400
 800c654:	40014000 	.word	0x40014000
 800c658:	00010007 	.word	0x00010007

0800c65c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d122      	bne.n	800c6b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	f003 0302 	and.w	r3, r3, #2
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d11b      	bne.n	800c6b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f06f 0202 	mvn.w	r2, #2
 800c688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	f003 0303 	and.w	r3, r3, #3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f9ce 	bl	800ca40 <HAL_TIM_IC_CaptureCallback>
 800c6a4:	e005      	b.n	800c6b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f9c0 	bl	800ca2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f9d1 	bl	800ca54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	f003 0304 	and.w	r3, r3, #4
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	d122      	bne.n	800c70c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d11b      	bne.n	800c70c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f06f 0204 	mvn.w	r2, #4
 800c6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f9a4 	bl	800ca40 <HAL_TIM_IC_CaptureCallback>
 800c6f8:	e005      	b.n	800c706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f996 	bl	800ca2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f9a7 	bl	800ca54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	f003 0308 	and.w	r3, r3, #8
 800c716:	2b08      	cmp	r3, #8
 800c718:	d122      	bne.n	800c760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f003 0308 	and.w	r3, r3, #8
 800c724:	2b08      	cmp	r3, #8
 800c726:	d11b      	bne.n	800c760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f06f 0208 	mvn.w	r2, #8
 800c730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2204      	movs	r2, #4
 800c736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	f003 0303 	and.w	r3, r3, #3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f97a 	bl	800ca40 <HAL_TIM_IC_CaptureCallback>
 800c74c:	e005      	b.n	800c75a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f96c 	bl	800ca2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f97d 	bl	800ca54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	f003 0310 	and.w	r3, r3, #16
 800c76a:	2b10      	cmp	r3, #16
 800c76c:	d122      	bne.n	800c7b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f003 0310 	and.w	r3, r3, #16
 800c778:	2b10      	cmp	r3, #16
 800c77a:	d11b      	bne.n	800c7b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f06f 0210 	mvn.w	r2, #16
 800c784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2208      	movs	r2, #8
 800c78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f950 	bl	800ca40 <HAL_TIM_IC_CaptureCallback>
 800c7a0:	e005      	b.n	800c7ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f942 	bl	800ca2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f953 	bl	800ca54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d10e      	bne.n	800c7e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f003 0301 	and.w	r3, r3, #1
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d107      	bne.n	800c7e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f06f 0201 	mvn.w	r2, #1
 800c7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7f7 fa6a 	bl	8003cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ea:	2b80      	cmp	r3, #128	; 0x80
 800c7ec:	d10e      	bne.n	800c80c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f8:	2b80      	cmp	r3, #128	; 0x80
 800c7fa:	d107      	bne.n	800c80c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fafe 	bl	800ce08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81a:	d10e      	bne.n	800c83a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c826:	2b80      	cmp	r3, #128	; 0x80
 800c828:	d107      	bne.n	800c83a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 faf1 	bl	800ce1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c844:	2b40      	cmp	r3, #64	; 0x40
 800c846:	d10e      	bne.n	800c866 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c852:	2b40      	cmp	r3, #64	; 0x40
 800c854:	d107      	bne.n	800c866 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f901 	bl	800ca68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	2b20      	cmp	r3, #32
 800c872:	d10e      	bne.n	800c892 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	f003 0320 	and.w	r3, r3, #32
 800c87e:	2b20      	cmp	r3, #32
 800c880:	d107      	bne.n	800c892 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f06f 0220 	mvn.w	r2, #32
 800c88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fab1 	bl	800cdf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c892:	bf00      	nop
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b084      	sub	sp, #16
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d101      	bne.n	800c8b6 <HAL_TIM_ConfigClockSource+0x1c>
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	e0b6      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x18a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c8d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8f2:	d03e      	beq.n	800c972 <HAL_TIM_ConfigClockSource+0xd8>
 800c8f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8f8:	f200 8087 	bhi.w	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c900:	f000 8086 	beq.w	800ca10 <HAL_TIM_ConfigClockSource+0x176>
 800c904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c908:	d87f      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c90a:	2b70      	cmp	r3, #112	; 0x70
 800c90c:	d01a      	beq.n	800c944 <HAL_TIM_ConfigClockSource+0xaa>
 800c90e:	2b70      	cmp	r3, #112	; 0x70
 800c910:	d87b      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c912:	2b60      	cmp	r3, #96	; 0x60
 800c914:	d050      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x11e>
 800c916:	2b60      	cmp	r3, #96	; 0x60
 800c918:	d877      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c91a:	2b50      	cmp	r3, #80	; 0x50
 800c91c:	d03c      	beq.n	800c998 <HAL_TIM_ConfigClockSource+0xfe>
 800c91e:	2b50      	cmp	r3, #80	; 0x50
 800c920:	d873      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c922:	2b40      	cmp	r3, #64	; 0x40
 800c924:	d058      	beq.n	800c9d8 <HAL_TIM_ConfigClockSource+0x13e>
 800c926:	2b40      	cmp	r3, #64	; 0x40
 800c928:	d86f      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c92a:	2b30      	cmp	r3, #48	; 0x30
 800c92c:	d064      	beq.n	800c9f8 <HAL_TIM_ConfigClockSource+0x15e>
 800c92e:	2b30      	cmp	r3, #48	; 0x30
 800c930:	d86b      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c932:	2b20      	cmp	r3, #32
 800c934:	d060      	beq.n	800c9f8 <HAL_TIM_ConfigClockSource+0x15e>
 800c936:	2b20      	cmp	r3, #32
 800c938:	d867      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d05c      	beq.n	800c9f8 <HAL_TIM_ConfigClockSource+0x15e>
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d05a      	beq.n	800c9f8 <HAL_TIM_ConfigClockSource+0x15e>
 800c942:	e062      	b.n	800ca0a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6818      	ldr	r0, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	6899      	ldr	r1, [r3, #8]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	f000 f9a6 	bl	800cca4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c966:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	609a      	str	r2, [r3, #8]
      break;
 800c970:	e04f      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	6899      	ldr	r1, [r3, #8]
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	f000 f98f 	bl	800cca4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689a      	ldr	r2, [r3, #8]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c994:	609a      	str	r2, [r3, #8]
      break;
 800c996:	e03c      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6818      	ldr	r0, [r3, #0]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	6859      	ldr	r1, [r3, #4]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	f000 f903 	bl	800cbb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2150      	movs	r1, #80	; 0x50
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 f95c 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800c9b6:	e02c      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6818      	ldr	r0, [r3, #0]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	6859      	ldr	r1, [r3, #4]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	f000 f922 	bl	800cc0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2160      	movs	r1, #96	; 0x60
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 f94c 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800c9d6:	e01c      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	6859      	ldr	r1, [r3, #4]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	f000 f8e3 	bl	800cbb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2140      	movs	r1, #64	; 0x40
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 f93c 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800c9f6:	e00c      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f000 f933 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800ca08:	e003      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca0e:	e000      	b.n	800ca12 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca70:	bf00      	nop
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a40      	ldr	r2, [pc, #256]	; (800cb90 <TIM_Base_SetConfig+0x114>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d013      	beq.n	800cabc <TIM_Base_SetConfig+0x40>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca9a:	d00f      	beq.n	800cabc <TIM_Base_SetConfig+0x40>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a3d      	ldr	r2, [pc, #244]	; (800cb94 <TIM_Base_SetConfig+0x118>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d00b      	beq.n	800cabc <TIM_Base_SetConfig+0x40>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a3c      	ldr	r2, [pc, #240]	; (800cb98 <TIM_Base_SetConfig+0x11c>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d007      	beq.n	800cabc <TIM_Base_SetConfig+0x40>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a3b      	ldr	r2, [pc, #236]	; (800cb9c <TIM_Base_SetConfig+0x120>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d003      	beq.n	800cabc <TIM_Base_SetConfig+0x40>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a3a      	ldr	r2, [pc, #232]	; (800cba0 <TIM_Base_SetConfig+0x124>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d108      	bne.n	800cace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	4313      	orrs	r3, r2
 800cacc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a2f      	ldr	r2, [pc, #188]	; (800cb90 <TIM_Base_SetConfig+0x114>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d01f      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cadc:	d01b      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a2c      	ldr	r2, [pc, #176]	; (800cb94 <TIM_Base_SetConfig+0x118>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d017      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a2b      	ldr	r2, [pc, #172]	; (800cb98 <TIM_Base_SetConfig+0x11c>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d013      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a2a      	ldr	r2, [pc, #168]	; (800cb9c <TIM_Base_SetConfig+0x120>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d00f      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a29      	ldr	r2, [pc, #164]	; (800cba0 <TIM_Base_SetConfig+0x124>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d00b      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a28      	ldr	r2, [pc, #160]	; (800cba4 <TIM_Base_SetConfig+0x128>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d007      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a27      	ldr	r2, [pc, #156]	; (800cba8 <TIM_Base_SetConfig+0x12c>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d003      	beq.n	800cb16 <TIM_Base_SetConfig+0x9a>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a26      	ldr	r2, [pc, #152]	; (800cbac <TIM_Base_SetConfig+0x130>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d108      	bne.n	800cb28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a10      	ldr	r2, [pc, #64]	; (800cb90 <TIM_Base_SetConfig+0x114>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d00f      	beq.n	800cb74 <TIM_Base_SetConfig+0xf8>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a12      	ldr	r2, [pc, #72]	; (800cba0 <TIM_Base_SetConfig+0x124>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d00b      	beq.n	800cb74 <TIM_Base_SetConfig+0xf8>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a11      	ldr	r2, [pc, #68]	; (800cba4 <TIM_Base_SetConfig+0x128>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d007      	beq.n	800cb74 <TIM_Base_SetConfig+0xf8>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a10      	ldr	r2, [pc, #64]	; (800cba8 <TIM_Base_SetConfig+0x12c>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d003      	beq.n	800cb74 <TIM_Base_SetConfig+0xf8>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a0f      	ldr	r2, [pc, #60]	; (800cbac <TIM_Base_SetConfig+0x130>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d103      	bne.n	800cb7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	691a      	ldr	r2, [r3, #16]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	615a      	str	r2, [r3, #20]
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	40012c00 	.word	0x40012c00
 800cb94:	40000400 	.word	0x40000400
 800cb98:	40000800 	.word	0x40000800
 800cb9c:	40000c00 	.word	0x40000c00
 800cba0:	40013400 	.word	0x40013400
 800cba4:	40014000 	.word	0x40014000
 800cba8:	40014400 	.word	0x40014400
 800cbac:	40014800 	.word	0x40014800

0800cbb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6a1b      	ldr	r3, [r3, #32]
 800cbc6:	f023 0201 	bic.w	r2, r3, #1
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	011b      	lsls	r3, r3, #4
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f023 030a 	bic.w	r3, r3, #10
 800cbec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	621a      	str	r2, [r3, #32]
}
 800cc02:	bf00      	nop
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b087      	sub	sp, #28
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	60f8      	str	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	f023 0210 	bic.w	r2, r3, #16
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	031b      	lsls	r3, r3, #12
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	621a      	str	r2, [r3, #32]
}
 800cc62:	bf00      	nop
 800cc64:	371c      	adds	r7, #28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b085      	sub	sp, #20
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	f043 0307 	orr.w	r3, r3, #7
 800cc90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	609a      	str	r2, [r3, #8]
}
 800cc98:	bf00      	nop
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	021a      	lsls	r2, r3, #8
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	609a      	str	r2, [r3, #8]
}
 800ccd8:	bf00      	nop
 800ccda:	371c      	adds	r7, #28
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d101      	bne.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	e068      	b.n	800cdce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2202      	movs	r2, #2
 800cd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a2e      	ldr	r2, [pc, #184]	; (800cddc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d004      	beq.n	800cd30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a2d      	ldr	r2, [pc, #180]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d108      	bne.n	800cd42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a1e      	ldr	r2, [pc, #120]	; (800cddc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d01d      	beq.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd6e:	d018      	beq.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a1b      	ldr	r2, [pc, #108]	; (800cde4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d013      	beq.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a1a      	ldr	r2, [pc, #104]	; (800cde8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d00e      	beq.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a18      	ldr	r2, [pc, #96]	; (800cdec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d009      	beq.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a13      	ldr	r2, [pc, #76]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d004      	beq.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a14      	ldr	r2, [pc, #80]	; (800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d10c      	bne.n	800cdbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cda8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	40012c00 	.word	0x40012c00
 800cde0:	40013400 	.word	0x40013400
 800cde4:	40000400 	.word	0x40000400
 800cde8:	40000800 	.word	0x40000800
 800cdec:	40000c00 	.word	0x40000c00
 800cdf0:	40014000 	.word	0x40014000

0800cdf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce10:	bf00      	nop
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce30:	b084      	sub	sp, #16
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	f107 001c 	add.w	r0, r7, #28
 800ce3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 faf6 	bl	800e440 <USB_CoreReset>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ce58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	639a      	str	r2, [r3, #56]	; 0x38
 800ce6a:	e005      	b.n	800ce78 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce84:	b004      	add	sp, #16
 800ce86:	4770      	bx	lr

0800ce88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	4613      	mov	r3, r2
 800ce94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d165      	bne.n	800cf68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	4a3e      	ldr	r2, [pc, #248]	; (800cf98 <USB_SetTurnaroundTime+0x110>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d906      	bls.n	800ceb2 <USB_SetTurnaroundTime+0x2a>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4a3d      	ldr	r2, [pc, #244]	; (800cf9c <USB_SetTurnaroundTime+0x114>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d202      	bcs.n	800ceb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ceac:	230f      	movs	r3, #15
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	e05c      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	4a39      	ldr	r2, [pc, #228]	; (800cf9c <USB_SetTurnaroundTime+0x114>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d306      	bcc.n	800cec8 <USB_SetTurnaroundTime+0x40>
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	4a38      	ldr	r2, [pc, #224]	; (800cfa0 <USB_SetTurnaroundTime+0x118>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d202      	bcs.n	800cec8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cec2:	230e      	movs	r3, #14
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e051      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	4a35      	ldr	r2, [pc, #212]	; (800cfa0 <USB_SetTurnaroundTime+0x118>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d306      	bcc.n	800cede <USB_SetTurnaroundTime+0x56>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	4a34      	ldr	r2, [pc, #208]	; (800cfa4 <USB_SetTurnaroundTime+0x11c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d202      	bcs.n	800cede <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ced8:	230d      	movs	r3, #13
 800ceda:	617b      	str	r3, [r7, #20]
 800cedc:	e046      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	4a30      	ldr	r2, [pc, #192]	; (800cfa4 <USB_SetTurnaroundTime+0x11c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d306      	bcc.n	800cef4 <USB_SetTurnaroundTime+0x6c>
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	4a2f      	ldr	r2, [pc, #188]	; (800cfa8 <USB_SetTurnaroundTime+0x120>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d802      	bhi.n	800cef4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ceee:	230c      	movs	r3, #12
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	e03b      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	4a2c      	ldr	r2, [pc, #176]	; (800cfa8 <USB_SetTurnaroundTime+0x120>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d906      	bls.n	800cf0a <USB_SetTurnaroundTime+0x82>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	4a2b      	ldr	r2, [pc, #172]	; (800cfac <USB_SetTurnaroundTime+0x124>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d802      	bhi.n	800cf0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf04:	230b      	movs	r3, #11
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	e030      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	4a27      	ldr	r2, [pc, #156]	; (800cfac <USB_SetTurnaroundTime+0x124>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d906      	bls.n	800cf20 <USB_SetTurnaroundTime+0x98>
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	4a26      	ldr	r2, [pc, #152]	; (800cfb0 <USB_SetTurnaroundTime+0x128>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d802      	bhi.n	800cf20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf1a:	230a      	movs	r3, #10
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	e025      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	4a23      	ldr	r2, [pc, #140]	; (800cfb0 <USB_SetTurnaroundTime+0x128>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d906      	bls.n	800cf36 <USB_SetTurnaroundTime+0xae>
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	4a22      	ldr	r2, [pc, #136]	; (800cfb4 <USB_SetTurnaroundTime+0x12c>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d202      	bcs.n	800cf36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf30:	2309      	movs	r3, #9
 800cf32:	617b      	str	r3, [r7, #20]
 800cf34:	e01a      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	4a1e      	ldr	r2, [pc, #120]	; (800cfb4 <USB_SetTurnaroundTime+0x12c>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d306      	bcc.n	800cf4c <USB_SetTurnaroundTime+0xc4>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	4a1d      	ldr	r2, [pc, #116]	; (800cfb8 <USB_SetTurnaroundTime+0x130>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d802      	bhi.n	800cf4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf46:	2308      	movs	r3, #8
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	e00f      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	4a1a      	ldr	r2, [pc, #104]	; (800cfb8 <USB_SetTurnaroundTime+0x130>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d906      	bls.n	800cf62 <USB_SetTurnaroundTime+0xda>
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	4a19      	ldr	r2, [pc, #100]	; (800cfbc <USB_SetTurnaroundTime+0x134>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d202      	bcs.n	800cf62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf5c:	2307      	movs	r3, #7
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	e004      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf62:	2306      	movs	r3, #6
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e001      	b.n	800cf6c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf68:	2309      	movs	r3, #9
 800cf6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68da      	ldr	r2, [r3, #12]
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	029b      	lsls	r3, r3, #10
 800cf80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cf84:	431a      	orrs	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	371c      	adds	r7, #28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	00d8acbf 	.word	0x00d8acbf
 800cf9c:	00e4e1c0 	.word	0x00e4e1c0
 800cfa0:	00f42400 	.word	0x00f42400
 800cfa4:	01067380 	.word	0x01067380
 800cfa8:	011a499f 	.word	0x011a499f
 800cfac:	01312cff 	.word	0x01312cff
 800cfb0:	014ca43f 	.word	0x014ca43f
 800cfb4:	016e3600 	.word	0x016e3600
 800cfb8:	01a6ab1f 	.word	0x01a6ab1f
 800cfbc:	01e84800 	.word	0x01e84800

0800cfc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	f043 0201 	orr.w	r2, r3, #1
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f023 0201 	bic.w	r2, r3, #1
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d020:	78fb      	ldrb	r3, [r7, #3]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d115      	bne.n	800d052 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d032:	2001      	movs	r0, #1
 800d034:	f7f8 f886 	bl	8005144 <HAL_Delay>
      ms++;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	3301      	adds	r3, #1
 800d03c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f001 f985 	bl	800e34e <USB_GetMode>
 800d044:	4603      	mov	r3, r0
 800d046:	2b01      	cmp	r3, #1
 800d048:	d01e      	beq.n	800d088 <USB_SetCurrentMode+0x84>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b31      	cmp	r3, #49	; 0x31
 800d04e:	d9f0      	bls.n	800d032 <USB_SetCurrentMode+0x2e>
 800d050:	e01a      	b.n	800d088 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d052:	78fb      	ldrb	r3, [r7, #3]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d115      	bne.n	800d084 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d064:	2001      	movs	r0, #1
 800d066:	f7f8 f86d 	bl	8005144 <HAL_Delay>
      ms++;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3301      	adds	r3, #1
 800d06e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f001 f96c 	bl	800e34e <USB_GetMode>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d005      	beq.n	800d088 <USB_SetCurrentMode+0x84>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b31      	cmp	r3, #49	; 0x31
 800d080:	d9f0      	bls.n	800d064 <USB_SetCurrentMode+0x60>
 800d082:	e001      	b.n	800d088 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e005      	b.n	800d094 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b32      	cmp	r3, #50	; 0x32
 800d08c:	d101      	bne.n	800d092 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	e000      	b.n	800d094 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d09c:	b084      	sub	sp, #16
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b086      	sub	sp, #24
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d0aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	613b      	str	r3, [r7, #16]
 800d0ba:	e009      	b.n	800d0d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	3340      	adds	r3, #64	; 0x40
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	2b0e      	cmp	r3, #14
 800d0d4:	d9f2      	bls.n	800d0bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d11c      	bne.n	800d116 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0ea:	f043 0302 	orr.w	r3, r3, #2
 800d0ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	e005      	b.n	800d122 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d128:	461a      	mov	r2, r3
 800d12a:	2300      	movs	r3, #0
 800d12c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d134:	4619      	mov	r1, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d13c:	461a      	mov	r2, r3
 800d13e:	680b      	ldr	r3, [r1, #0]
 800d140:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d142:	2103      	movs	r1, #3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f959 	bl	800d3fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d14a:	2110      	movs	r1, #16
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f8f1 	bl	800d334 <USB_FlushTxFifo>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f91d 	bl	800d39c <USB_FlushRxFifo>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d001      	beq.n	800d16c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d172:	461a      	mov	r2, r3
 800d174:	2300      	movs	r3, #0
 800d176:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d17e:	461a      	mov	r2, r3
 800d180:	2300      	movs	r3, #0
 800d182:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d18a:	461a      	mov	r2, r3
 800d18c:	2300      	movs	r3, #0
 800d18e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d190:	2300      	movs	r3, #0
 800d192:	613b      	str	r3, [r7, #16]
 800d194:	e043      	b.n	800d21e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	015a      	lsls	r2, r3, #5
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1ac:	d118      	bne.n	800d1e0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10a      	bne.n	800d1ca <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	015a      	lsls	r2, r3, #5
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	e013      	b.n	800d1f2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	015a      	lsls	r2, r3, #5
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	e008      	b.n	800d1f2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	015a      	lsls	r2, r3, #5
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	015a      	lsls	r2, r3, #5
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1fe:	461a      	mov	r2, r3
 800d200:	2300      	movs	r3, #0
 800d202:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	015a      	lsls	r2, r3, #5
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	4413      	add	r3, r2
 800d20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d210:	461a      	mov	r2, r3
 800d212:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d216:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	3301      	adds	r3, #1
 800d21c:	613b      	str	r3, [r7, #16]
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	429a      	cmp	r2, r3
 800d224:	d3b7      	bcc.n	800d196 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d226:	2300      	movs	r3, #0
 800d228:	613b      	str	r3, [r7, #16]
 800d22a:	e043      	b.n	800d2b4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	015a      	lsls	r2, r3, #5
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4413      	add	r3, r2
 800d234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d23e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d242:	d118      	bne.n	800d276 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10a      	bne.n	800d260 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	015a      	lsls	r2, r3, #5
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	4413      	add	r3, r2
 800d252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d256:	461a      	mov	r2, r3
 800d258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	e013      	b.n	800d288 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	015a      	lsls	r2, r3, #5
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4413      	add	r3, r2
 800d268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d26c:	461a      	mov	r2, r3
 800d26e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	e008      	b.n	800d288 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d282:	461a      	mov	r2, r3
 800d284:	2300      	movs	r3, #0
 800d286:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	015a      	lsls	r2, r3, #5
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	4413      	add	r3, r2
 800d290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d294:	461a      	mov	r2, r3
 800d296:	2300      	movs	r3, #0
 800d298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	015a      	lsls	r2, r3, #5
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	613b      	str	r3, [r7, #16]
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d3b7      	bcc.n	800d22c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d2dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	f043 0210 	orr.w	r2, r3, #16
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	699a      	ldr	r2, [r3, #24]
 800d2ee:	4b10      	ldr	r3, [pc, #64]	; (800d330 <USB_DevInit+0x294>)
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d005      	beq.n	800d308 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	f043 0208 	orr.w	r2, r3, #8
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d107      	bne.n	800d31e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d316:	f043 0304 	orr.w	r3, r3, #4
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d32a:	b004      	add	sp, #16
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	803c3800 	.word	0x803c3800

0800d334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3301      	adds	r3, #1
 800d346:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	4a13      	ldr	r2, [pc, #76]	; (800d398 <USB_FlushTxFifo+0x64>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d901      	bls.n	800d354 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d350:	2303      	movs	r3, #3
 800d352:	e01b      	b.n	800d38c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	daf2      	bge.n	800d342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d35c:	2300      	movs	r3, #0
 800d35e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	019b      	lsls	r3, r3, #6
 800d364:	f043 0220 	orr.w	r2, r3, #32
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3301      	adds	r3, #1
 800d370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	4a08      	ldr	r2, [pc, #32]	; (800d398 <USB_FlushTxFifo+0x64>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d901      	bls.n	800d37e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e006      	b.n	800d38c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	f003 0320 	and.w	r3, r3, #32
 800d386:	2b20      	cmp	r3, #32
 800d388:	d0f0      	beq.n	800d36c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	00030d40 	.word	0x00030d40

0800d39c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	4a11      	ldr	r2, [pc, #68]	; (800d3f8 <USB_FlushRxFifo+0x5c>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d901      	bls.n	800d3ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	e018      	b.n	800d3ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	daf2      	bge.n	800d3a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2210      	movs	r2, #16
 800d3ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <USB_FlushRxFifo+0x5c>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d901      	bls.n	800d3de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e006      	b.n	800d3ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	f003 0310 	and.w	r3, r3, #16
 800d3e6:	2b10      	cmp	r3, #16
 800d3e8:	d0f0      	beq.n	800d3cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	00030d40 	.word	0x00030d40

0800d3fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	78fb      	ldrb	r3, [r7, #3]
 800d416:	68f9      	ldr	r1, [r7, #12]
 800d418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d41c:	4313      	orrs	r3, r2
 800d41e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d42e:	b480      	push	{r7}
 800d430:	b087      	sub	sp, #28
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f003 0306 	and.w	r3, r3, #6
 800d446:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d002      	beq.n	800d454 <USB_GetDevSpeed+0x26>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b06      	cmp	r3, #6
 800d452:	d102      	bne.n	800d45a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d454:	2302      	movs	r3, #2
 800d456:	75fb      	strb	r3, [r7, #23]
 800d458:	e001      	b.n	800d45e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d45a:	230f      	movs	r3, #15
 800d45c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d460:	4618      	mov	r0, r3
 800d462:	371c      	adds	r7, #28
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	785b      	ldrb	r3, [r3, #1]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d13a      	bne.n	800d4fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d48e:	69da      	ldr	r2, [r3, #28]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	f003 030f 	and.w	r3, r3, #15
 800d498:	2101      	movs	r1, #1
 800d49a:	fa01 f303 	lsl.w	r3, r1, r3
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	68f9      	ldr	r1, [r7, #12]
 800d4a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d155      	bne.n	800d56c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	791b      	ldrb	r3, [r3, #4]
 800d4da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	059b      	lsls	r3, r3, #22
 800d4e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	0151      	lsls	r1, r2, #5
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	440a      	add	r2, r1
 800d4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	e036      	b.n	800d56c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d504:	69da      	ldr	r2, [r3, #28]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	f003 030f 	and.w	r3, r3, #15
 800d50e:	2101      	movs	r1, #1
 800d510:	fa01 f303 	lsl.w	r3, r1, r3
 800d514:	041b      	lsls	r3, r3, #16
 800d516:	68f9      	ldr	r1, [r7, #12]
 800d518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d51c:	4313      	orrs	r3, r2
 800d51e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4413      	add	r3, r2
 800d528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d11a      	bne.n	800d56c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	791b      	ldrb	r3, [r3, #4]
 800d550:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d552:	430b      	orrs	r3, r1
 800d554:	4313      	orrs	r3, r2
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	0151      	lsls	r1, r2, #5
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	440a      	add	r2, r1
 800d55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d56a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3714      	adds	r7, #20
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr
	...

0800d57c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	785b      	ldrb	r3, [r3, #1]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d161      	bne.n	800d65c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5ae:	d11f      	bne.n	800d5f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	015a      	lsls	r2, r3, #5
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	4413      	add	r3, r2
 800d5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	0151      	lsls	r1, r2, #5
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	440a      	add	r2, r1
 800d5c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	015a      	lsls	r2, r3, #5
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	0151      	lsls	r1, r2, #5
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	440a      	add	r2, r1
 800d5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	f003 030f 	and.w	r3, r3, #15
 800d600:	2101      	movs	r1, #1
 800d602:	fa01 f303 	lsl.w	r3, r1, r3
 800d606:	b29b      	uxth	r3, r3
 800d608:	43db      	mvns	r3, r3
 800d60a:	68f9      	ldr	r1, [r7, #12]
 800d60c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d610:	4013      	ands	r3, r2
 800d612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d61a:	69da      	ldr	r2, [r3, #28]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	f003 030f 	and.w	r3, r3, #15
 800d624:	2101      	movs	r1, #1
 800d626:	fa01 f303 	lsl.w	r3, r1, r3
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	43db      	mvns	r3, r3
 800d62e:	68f9      	ldr	r1, [r7, #12]
 800d630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d634:	4013      	ands	r3, r2
 800d636:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	015a      	lsls	r2, r3, #5
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	0159      	lsls	r1, r3, #5
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	440b      	add	r3, r1
 800d64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d652:	4619      	mov	r1, r3
 800d654:	4b35      	ldr	r3, [pc, #212]	; (800d72c <USB_DeactivateEndpoint+0x1b0>)
 800d656:	4013      	ands	r3, r2
 800d658:	600b      	str	r3, [r1, #0]
 800d65a:	e060      	b.n	800d71e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	4413      	add	r3, r2
 800d664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d66e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d672:	d11f      	bne.n	800d6b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	015a      	lsls	r2, r3, #5
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	0151      	lsls	r1, r2, #5
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	440a      	add	r2, r1
 800d68a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d68e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d692:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	015a      	lsls	r2, r3, #5
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	0151      	lsls	r1, r2, #5
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	440a      	add	r2, r1
 800d6aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	f003 030f 	and.w	r3, r3, #15
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ca:	041b      	lsls	r3, r3, #16
 800d6cc:	43db      	mvns	r3, r3
 800d6ce:	68f9      	ldr	r1, [r7, #12]
 800d6d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6de:	69da      	ldr	r2, [r3, #28]
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	f003 030f 	and.w	r3, r3, #15
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ee:	041b      	lsls	r3, r3, #16
 800d6f0:	43db      	mvns	r3, r3
 800d6f2:	68f9      	ldr	r1, [r7, #12]
 800d6f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	015a      	lsls	r2, r3, #5
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	4413      	add	r3, r2
 800d704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	0159      	lsls	r1, r3, #5
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	440b      	add	r3, r1
 800d712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d716:	4619      	mov	r1, r3
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <USB_DeactivateEndpoint+0x1b4>)
 800d71a:	4013      	ands	r3, r2
 800d71c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	ec337800 	.word	0xec337800
 800d730:	eff37800 	.word	0xeff37800

0800d734 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	785b      	ldrb	r3, [r3, #1]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	f040 810a 	bne.w	800d966 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d132      	bne.n	800d7c0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	4413      	add	r3, r2
 800d762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	693a      	ldr	r2, [r7, #16]
 800d76a:	0151      	lsls	r1, r2, #5
 800d76c:	697a      	ldr	r2, [r7, #20]
 800d76e:	440a      	add	r2, r1
 800d770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d77c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	4413      	add	r3, r2
 800d786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	0151      	lsls	r1, r2, #5
 800d790:	697a      	ldr	r2, [r7, #20]
 800d792:	440a      	add	r2, r1
 800d794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d798:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d79c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	0151      	lsls	r1, r2, #5
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	440a      	add	r2, r1
 800d7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7b8:	0cdb      	lsrs	r3, r3, #19
 800d7ba:	04db      	lsls	r3, r3, #19
 800d7bc:	6113      	str	r3, [r2, #16]
 800d7be:	e074      	b.n	800d8aa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	015a      	lsls	r2, r3, #5
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	693a      	ldr	r2, [r7, #16]
 800d7d0:	0151      	lsls	r1, r2, #5
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	440a      	add	r2, r1
 800d7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7da:	0cdb      	lsrs	r3, r3, #19
 800d7dc:	04db      	lsls	r3, r3, #19
 800d7de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	015a      	lsls	r2, r3, #5
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	0151      	lsls	r1, r2, #5
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	440a      	add	r2, r1
 800d7f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	015a      	lsls	r2, r3, #5
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	4413      	add	r3, r2
 800d80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d810:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	6999      	ldr	r1, [r3, #24]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	440b      	add	r3, r1
 800d81c:	1e59      	subs	r1, r3, #1
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	fbb1 f3f3 	udiv	r3, r1, r3
 800d826:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d828:	4b9e      	ldr	r3, [pc, #632]	; (800daa4 <USB_EPStartXfer+0x370>)
 800d82a:	400b      	ands	r3, r1
 800d82c:	6939      	ldr	r1, [r7, #16]
 800d82e:	0148      	lsls	r0, r1, #5
 800d830:	6979      	ldr	r1, [r7, #20]
 800d832:	4401      	add	r1, r0
 800d834:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d838:	4313      	orrs	r3, r2
 800d83a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	015a      	lsls	r2, r3, #5
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	4413      	add	r3, r2
 800d844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d848:	691a      	ldr	r2, [r3, #16]
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d852:	6939      	ldr	r1, [r7, #16]
 800d854:	0148      	lsls	r0, r1, #5
 800d856:	6979      	ldr	r1, [r7, #20]
 800d858:	4401      	add	r1, r0
 800d85a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d85e:	4313      	orrs	r3, r2
 800d860:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	791b      	ldrb	r3, [r3, #4]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d11f      	bne.n	800d8aa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	015a      	lsls	r2, r3, #5
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	4413      	add	r3, r2
 800d872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	0151      	lsls	r1, r2, #5
 800d87c:	697a      	ldr	r2, [r7, #20]
 800d87e:	440a      	add	r2, r1
 800d880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d884:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d888:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	015a      	lsls	r2, r3, #5
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	4413      	add	r3, r2
 800d892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	693a      	ldr	r2, [r7, #16]
 800d89a:	0151      	lsls	r1, r2, #5
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	440a      	add	r2, r1
 800d8a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8a8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	015a      	lsls	r2, r3, #5
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	0151      	lsls	r1, r2, #5
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	440a      	add	r2, r1
 800d8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8c8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	791b      	ldrb	r3, [r3, #4]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d015      	beq.n	800d8fe <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 8106 	beq.w	800dae8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d8f2:	6979      	ldr	r1, [r7, #20]
 800d8f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	634b      	str	r3, [r1, #52]	; 0x34
 800d8fc:	e0f4      	b.n	800dae8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d110      	bne.n	800d930 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	015a      	lsls	r2, r3, #5
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	4413      	add	r3, r2
 800d916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	0151      	lsls	r1, r2, #5
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	440a      	add	r2, r1
 800d924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d92c:	6013      	str	r3, [r2, #0]
 800d92e:	e00f      	b.n	800d950 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	015a      	lsls	r2, r3, #5
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	4413      	add	r3, r2
 800d938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	0151      	lsls	r1, r2, #5
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	440a      	add	r2, r1
 800d946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d94a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d94e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	6919      	ldr	r1, [r3, #16]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fa94 	bl	800de8c <USB_WritePacket>
 800d964:	e0c0      	b.n	800dae8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	015a      	lsls	r2, r3, #5
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	4413      	add	r3, r2
 800d96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	0151      	lsls	r1, r2, #5
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	440a      	add	r2, r1
 800d97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d980:	0cdb      	lsrs	r3, r3, #19
 800d982:	04db      	lsls	r3, r3, #19
 800d984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	015a      	lsls	r2, r3, #5
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	4413      	add	r3, r2
 800d98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	0151      	lsls	r1, r2, #5
 800d998:	697a      	ldr	r2, [r7, #20]
 800d99a:	440a      	add	r2, r1
 800d99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d9a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d123      	bne.n	800d9fa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	691a      	ldr	r2, [r3, #16]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9c8:	6939      	ldr	r1, [r7, #16]
 800d9ca:	0148      	lsls	r0, r1, #5
 800d9cc:	6979      	ldr	r1, [r7, #20]
 800d9ce:	4401      	add	r1, r0
 800d9d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	0151      	lsls	r1, r2, #5
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	440a      	add	r2, r1
 800d9ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9f6:	6113      	str	r3, [r2, #16]
 800d9f8:	e037      	b.n	800da6a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	699a      	ldr	r2, [r3, #24]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	4413      	add	r3, r2
 800da04:	1e5a      	subs	r2, r3, #1
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da0e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	89fa      	ldrh	r2, [r7, #14]
 800da16:	fb03 f202 	mul.w	r2, r3, r2
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	015a      	lsls	r2, r3, #5
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	4413      	add	r3, r2
 800da26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da2a:	691a      	ldr	r2, [r3, #16]
 800da2c:	89fb      	ldrh	r3, [r7, #14]
 800da2e:	04d9      	lsls	r1, r3, #19
 800da30:	4b1c      	ldr	r3, [pc, #112]	; (800daa4 <USB_EPStartXfer+0x370>)
 800da32:	400b      	ands	r3, r1
 800da34:	6939      	ldr	r1, [r7, #16]
 800da36:	0148      	lsls	r0, r1, #5
 800da38:	6979      	ldr	r1, [r7, #20]
 800da3a:	4401      	add	r1, r0
 800da3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da40:	4313      	orrs	r3, r2
 800da42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da50:	691a      	ldr	r2, [r3, #16]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da5a:	6939      	ldr	r1, [r7, #16]
 800da5c:	0148      	lsls	r0, r1, #5
 800da5e:	6979      	ldr	r1, [r7, #20]
 800da60:	4401      	add	r1, r0
 800da62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da66:	4313      	orrs	r3, r2
 800da68:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	791b      	ldrb	r3, [r3, #4]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d12a      	bne.n	800dac8 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d112      	bne.n	800daa8 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	015a      	lsls	r2, r3, #5
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	4413      	add	r3, r2
 800da8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	0151      	lsls	r1, r2, #5
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	440a      	add	r2, r1
 800da98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800daa0:	6013      	str	r3, [r2, #0]
 800daa2:	e011      	b.n	800dac8 <USB_EPStartXfer+0x394>
 800daa4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dac6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	015a      	lsls	r2, r3, #5
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	4413      	add	r3, r2
 800dad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	0151      	lsls	r1, r2, #5
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	440a      	add	r2, r1
 800dade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3718      	adds	r7, #24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop

0800daf4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	785b      	ldrb	r3, [r3, #1]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	f040 80ab 	bne.w	800dc68 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d132      	bne.n	800db80 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	015a      	lsls	r2, r3, #5
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	4413      	add	r3, r2
 800db22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	0151      	lsls	r1, r2, #5
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	440a      	add	r2, r1
 800db30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4413      	add	r3, r2
 800db46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	0151      	lsls	r1, r2, #5
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	440a      	add	r2, r1
 800db54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	015a      	lsls	r2, r3, #5
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	4413      	add	r3, r2
 800db66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	0151      	lsls	r1, r2, #5
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	440a      	add	r2, r1
 800db74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db78:	0cdb      	lsrs	r3, r3, #19
 800db7a:	04db      	lsls	r3, r3, #19
 800db7c:	6113      	str	r3, [r2, #16]
 800db7e:	e04e      	b.n	800dc1e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	015a      	lsls	r2, r3, #5
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4413      	add	r3, r2
 800db88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	0151      	lsls	r1, r2, #5
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	440a      	add	r2, r1
 800db96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db9a:	0cdb      	lsrs	r3, r3, #19
 800db9c:	04db      	lsls	r3, r3, #19
 800db9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	0151      	lsls	r1, r2, #5
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	440a      	add	r2, r1
 800dbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dbbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dbc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	699a      	ldr	r2, [r3, #24]
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d903      	bls.n	800dbd8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	015a      	lsls	r2, r3, #5
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4413      	add	r3, r2
 800dbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	0151      	lsls	r1, r2, #5
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	440a      	add	r2, r1
 800dbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc04:	691a      	ldr	r2, [r3, #16]
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	0148      	lsls	r0, r1, #5
 800dc12:	68f9      	ldr	r1, [r7, #12]
 800dc14:	4401      	add	r1, r0
 800dc16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	0151      	lsls	r1, r2, #5
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	440a      	add	r2, r1
 800dc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc3c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d071      	beq.n	800dd2a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f003 030f 	and.w	r3, r3, #15
 800dc56:	2101      	movs	r1, #1
 800dc58:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5c:	68f9      	ldr	r1, [r7, #12]
 800dc5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc62:	4313      	orrs	r3, r2
 800dc64:	634b      	str	r3, [r1, #52]	; 0x34
 800dc66:	e060      	b.n	800dd2a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	015a      	lsls	r2, r3, #5
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	4413      	add	r3, r2
 800dc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	0151      	lsls	r1, r2, #5
 800dc7a:	68fa      	ldr	r2, [r7, #12]
 800dc7c:	440a      	add	r2, r1
 800dc7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc82:	0cdb      	lsrs	r3, r3, #19
 800dc84:	04db      	lsls	r3, r3, #19
 800dc86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	015a      	lsls	r2, r3, #5
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4413      	add	r3, r2
 800dc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	0151      	lsls	r1, r2, #5
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	440a      	add	r2, r1
 800dc9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dca2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dca6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcaa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d003      	beq.n	800dcbc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	68da      	ldr	r2, [r3, #12]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	0151      	lsls	r1, r2, #5
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	440a      	add	r2, r1
 800dcda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dce2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf0:	691a      	ldr	r2, [r3, #16]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	69db      	ldr	r3, [r3, #28]
 800dcf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	0148      	lsls	r0, r1, #5
 800dcfe:	68f9      	ldr	r1, [r7, #12]
 800dd00:	4401      	add	r1, r0
 800dd02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd06:	4313      	orrs	r3, r2
 800dd08:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	0151      	lsls	r1, r2, #5
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	440a      	add	r2, r1
 800dd20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd42:	2300      	movs	r3, #0
 800dd44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd46:	2300      	movs	r3, #0
 800dd48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	785b      	ldrb	r3, [r3, #1]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d14a      	bne.n	800ddec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	015a      	lsls	r2, r3, #5
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	4413      	add	r3, r2
 800dd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd6e:	f040 8086 	bne.w	800de7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	015a      	lsls	r2, r3, #5
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	7812      	ldrb	r2, [r2, #0]
 800dd86:	0151      	lsls	r1, r2, #5
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	440a      	add	r2, r1
 800dd8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	015a      	lsls	r2, r3, #5
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	4413      	add	r3, r2
 800dda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	7812      	ldrb	r2, [r2, #0]
 800ddaa:	0151      	lsls	r1, r2, #5
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	440a      	add	r2, r1
 800ddb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f242 7210 	movw	r2, #10000	; 0x2710
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d902      	bls.n	800ddd0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	75fb      	strb	r3, [r7, #23]
          break;
 800ddce:	e056      	b.n	800de7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	015a      	lsls	r2, r3, #5
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	4413      	add	r3, r2
 800ddda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dde4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dde8:	d0e7      	beq.n	800ddba <USB_EPStopXfer+0x82>
 800ddea:	e048      	b.n	800de7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	015a      	lsls	r2, r3, #5
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de04:	d13b      	bne.n	800de7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	015a      	lsls	r2, r3, #5
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	4413      	add	r3, r2
 800de10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	7812      	ldrb	r2, [r2, #0]
 800de1a:	0151      	lsls	r1, r2, #5
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	440a      	add	r2, r1
 800de20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	015a      	lsls	r2, r3, #5
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	4413      	add	r3, r2
 800de34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	7812      	ldrb	r2, [r2, #0]
 800de3e:	0151      	lsls	r1, r2, #5
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	440a      	add	r2, r1
 800de44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3301      	adds	r3, #1
 800de52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f242 7210 	movw	r2, #10000	; 0x2710
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d902      	bls.n	800de64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	75fb      	strb	r3, [r7, #23]
          break;
 800de62:	e00c      	b.n	800de7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	015a      	lsls	r2, r3, #5
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	4413      	add	r3, r2
 800de6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de7c:	d0e7      	beq.n	800de4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de80:	4618      	mov	r0, r3
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b089      	sub	sp, #36	; 0x24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	4611      	mov	r1, r2
 800de98:	461a      	mov	r2, r3
 800de9a:	460b      	mov	r3, r1
 800de9c:	71fb      	strb	r3, [r7, #7]
 800de9e:	4613      	mov	r3, r2
 800dea0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800deaa:	88bb      	ldrh	r3, [r7, #4]
 800deac:	3303      	adds	r3, #3
 800deae:	089b      	lsrs	r3, r3, #2
 800deb0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800deb2:	2300      	movs	r3, #0
 800deb4:	61bb      	str	r3, [r7, #24]
 800deb6:	e018      	b.n	800deea <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800deb8:	79fb      	ldrb	r3, [r7, #7]
 800deba:	031a      	lsls	r2, r3, #12
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dec4:	461a      	mov	r2, r3
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6013      	str	r3, [r2, #0]
    pSrc++;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	3301      	adds	r3, #1
 800ded0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	3301      	adds	r3, #1
 800ded6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	3301      	adds	r3, #1
 800dedc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	3301      	adds	r3, #1
 800dee2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	3301      	adds	r3, #1
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	69ba      	ldr	r2, [r7, #24]
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	429a      	cmp	r2, r3
 800def0:	d3e2      	bcc.n	800deb8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3724      	adds	r7, #36	; 0x24
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df00:	b480      	push	{r7}
 800df02:	b08b      	sub	sp, #44	; 0x2c
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	089b      	lsrs	r3, r3, #2
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df1e:	88fb      	ldrh	r3, [r7, #6]
 800df20:	f003 0303 	and.w	r3, r3, #3
 800df24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df26:	2300      	movs	r3, #0
 800df28:	623b      	str	r3, [r7, #32]
 800df2a:	e014      	b.n	800df56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	601a      	str	r2, [r3, #0]
    pDest++;
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	3301      	adds	r3, #1
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	3301      	adds	r3, #1
 800df42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	3301      	adds	r3, #1
 800df48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4c:	3301      	adds	r3, #1
 800df4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	3301      	adds	r3, #1
 800df54:	623b      	str	r3, [r7, #32]
 800df56:	6a3a      	ldr	r2, [r7, #32]
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d3e6      	bcc.n	800df2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800df5e:	8bfb      	ldrh	r3, [r7, #30]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d01e      	beq.n	800dfa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800df64:	2300      	movs	r3, #0
 800df66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df6e:	461a      	mov	r2, r3
 800df70:	f107 0310 	add.w	r3, r7, #16
 800df74:	6812      	ldr	r2, [r2, #0]
 800df76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	fa22 f303 	lsr.w	r3, r2, r3
 800df84:	b2da      	uxtb	r2, r3
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	701a      	strb	r2, [r3, #0]
      i++;
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	3301      	adds	r3, #1
 800df8e:	623b      	str	r3, [r7, #32]
      pDest++;
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	3301      	adds	r3, #1
 800df94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800df96:	8bfb      	ldrh	r3, [r7, #30]
 800df98:	3b01      	subs	r3, #1
 800df9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800df9c:	8bfb      	ldrh	r3, [r7, #30]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1ea      	bne.n	800df78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	372c      	adds	r7, #44	; 0x2c
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d12c      	bne.n	800e026 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	015a      	lsls	r2, r3, #5
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	db12      	blt.n	800e004 <USB_EPSetStall+0x54>
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00f      	beq.n	800e004 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	0151      	lsls	r1, r2, #5
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	440a      	add	r2, r1
 800dffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e002:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	015a      	lsls	r2, r3, #5
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	4413      	add	r3, r2
 800e00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	0151      	lsls	r1, r2, #5
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	440a      	add	r2, r1
 800e01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e01e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e022:	6013      	str	r3, [r2, #0]
 800e024:	e02b      	b.n	800e07e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	015a      	lsls	r2, r3, #5
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	4413      	add	r3, r2
 800e02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	db12      	blt.n	800e05e <USB_EPSetStall+0xae>
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00f      	beq.n	800e05e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	015a      	lsls	r2, r3, #5
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	0151      	lsls	r1, r2, #5
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	440a      	add	r2, r1
 800e054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e05c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	015a      	lsls	r2, r3, #5
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	0151      	lsls	r1, r2, #5
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	440a      	add	r2, r1
 800e074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e07c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3714      	adds	r7, #20
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	785b      	ldrb	r3, [r3, #1]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d128      	bne.n	800e0fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	015a      	lsls	r2, r3, #5
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	0151      	lsls	r1, r2, #5
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	440a      	add	r2, r1
 800e0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e0c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	791b      	ldrb	r3, [r3, #4]
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d003      	beq.n	800e0d8 <USB_EPClearStall+0x4c>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	791b      	ldrb	r3, [r3, #4]
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d138      	bne.n	800e14a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	015a      	lsls	r2, r3, #5
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	4413      	add	r3, r2
 800e0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	0151      	lsls	r1, r2, #5
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	440a      	add	r2, r1
 800e0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	e027      	b.n	800e14a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	015a      	lsls	r2, r3, #5
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	4413      	add	r3, r2
 800e102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	0151      	lsls	r1, r2, #5
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	440a      	add	r2, r1
 800e110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e118:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	791b      	ldrb	r3, [r3, #4]
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d003      	beq.n	800e12a <USB_EPClearStall+0x9e>
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	791b      	ldrb	r3, [r3, #4]
 800e126:	2b02      	cmp	r3, #2
 800e128:	d10f      	bne.n	800e14a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	015a      	lsls	r2, r3, #5
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	4413      	add	r3, r2
 800e132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	0151      	lsls	r1, r2, #5
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	440a      	add	r2, r1
 800e140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e148:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	460b      	mov	r3, r1
 800e162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e176:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e17a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	78fb      	ldrb	r3, [r7, #3]
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e18c:	68f9      	ldr	r1, [r7, #12]
 800e18e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e192:	4313      	orrs	r3, r2
 800e194:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1be:	f023 0303 	bic.w	r3, r3, #3
 800e1c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1d2:	f023 0302 	bic.w	r3, r3, #2
 800e1d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b085      	sub	sp, #20
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e200:	f023 0303 	bic.w	r3, r3, #3
 800e204:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e214:	f043 0302 	orr.w	r3, r3, #2
 800e218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	695b      	ldr	r3, [r3, #20]
 800e234:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	4013      	ands	r3, r2
 800e23e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e240:	68fb      	ldr	r3, [r7, #12]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr

0800e24e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e24e:	b480      	push	{r7}
 800e250:	b085      	sub	sp, #20
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e26a:	69db      	ldr	r3, [r3, #28]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	4013      	ands	r3, r2
 800e270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	0c1b      	lsrs	r3, r3, #16
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e282:	b480      	push	{r7}
 800e284:	b085      	sub	sp, #20
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e29e:	69db      	ldr	r3, [r3, #28]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	b29b      	uxth	r3, r3
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr

0800e2b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e2c6:	78fb      	ldrb	r3, [r7, #3]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3714      	adds	r7, #20
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr

0800e2f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	b087      	sub	sp, #28
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e314:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	f003 030f 	and.w	r3, r3, #15
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	fa22 f303 	lsr.w	r3, r2, r3
 800e322:	01db      	lsls	r3, r3, #7
 800e324:	b2db      	uxtb	r3, r3
 800e326:	693a      	ldr	r2, [r7, #16]
 800e328:	4313      	orrs	r3, r2
 800e32a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e32c:	78fb      	ldrb	r3, [r7, #3]
 800e32e:	015a      	lsls	r2, r3, #5
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	4413      	add	r3, r2
 800e334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	4013      	ands	r3, r2
 800e33e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e340:	68bb      	ldr	r3, [r7, #8]
}
 800e342:	4618      	mov	r0, r3
 800e344:	371c      	adds	r7, #28
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr

0800e34e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e34e:	b480      	push	{r7}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	f003 0301 	and.w	r3, r3, #1
}
 800e35e:	4618      	mov	r0, r3
 800e360:	370c      	adds	r7, #12
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr

0800e36a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e36a:	b480      	push	{r7}
 800e36c:	b085      	sub	sp, #20
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e384:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e388:	f023 0307 	bic.w	r3, r3, #7
 800e38c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e39c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	333c      	adds	r3, #60	; 0x3c
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	4a1c      	ldr	r2, [pc, #112]	; (800e43c <USB_EP0_OutStart+0x8c>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d90a      	bls.n	800e3e6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3e0:	d101      	bne.n	800e3e6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e024      	b.n	800e430 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e414:	f043 0318 	orr.w	r3, r3, #24
 800e418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e428:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e42c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr
 800e43c:	4f54300a 	.word	0x4f54300a

0800e440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e448:	2300      	movs	r3, #0
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	3301      	adds	r3, #1
 800e450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	4a13      	ldr	r2, [pc, #76]	; (800e4a4 <USB_CoreReset+0x64>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d901      	bls.n	800e45e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e01b      	b.n	800e496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	2b00      	cmp	r3, #0
 800e464:	daf2      	bge.n	800e44c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e466:	2300      	movs	r3, #0
 800e468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	f043 0201 	orr.w	r2, r3, #1
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3301      	adds	r3, #1
 800e47a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4a09      	ldr	r2, [pc, #36]	; (800e4a4 <USB_CoreReset+0x64>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d901      	bls.n	800e488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e484:	2303      	movs	r3, #3
 800e486:	e006      	b.n	800e496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	2b01      	cmp	r3, #1
 800e492:	d0f0      	beq.n	800e476 <USB_CoreReset+0x36>

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	00030d40 	.word	0x00030d40

0800e4a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e4b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e4b8:	f005 f89c 	bl	80135f4 <USBD_static_malloc>
 800e4bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d105      	bne.n	800e4d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	e066      	b.n	800e59e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	7c1b      	ldrb	r3, [r3, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d119      	bne.n	800e514 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	2181      	movs	r1, #129	; 0x81
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f004 fe6f 	bl	80131cc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4f8:	2202      	movs	r2, #2
 800e4fa:	2101      	movs	r1, #1
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f004 fe65 	bl	80131cc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2210      	movs	r2, #16
 800e50e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e512:	e016      	b.n	800e542 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e514:	2340      	movs	r3, #64	; 0x40
 800e516:	2202      	movs	r2, #2
 800e518:	2181      	movs	r1, #129	; 0x81
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f004 fe56 	bl	80131cc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e526:	2340      	movs	r3, #64	; 0x40
 800e528:	2202      	movs	r2, #2
 800e52a:	2101      	movs	r1, #1
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f004 fe4d 	bl	80131cc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2201      	movs	r2, #1
 800e536:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2210      	movs	r2, #16
 800e53e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e542:	2308      	movs	r3, #8
 800e544:	2203      	movs	r2, #3
 800e546:	2182      	movs	r1, #130	; 0x82
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f004 fe3f 	bl	80131cc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7c1b      	ldrb	r3, [r3, #16]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d109      	bne.n	800e58c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e57e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e582:	2101      	movs	r1, #1
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f004 ff9b 	bl	80134c0 <USBD_LL_PrepareReceive>
 800e58a:	e007      	b.n	800e59c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e592:	2340      	movs	r3, #64	; 0x40
 800e594:	2101      	movs	r1, #1
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f004 ff92 	bl	80134c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e5b2:	2181      	movs	r1, #129	; 0x81
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f004 fe47 	bl	8013248 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f004 fe40 	bl	8013248 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e5d0:	2182      	movs	r1, #130	; 0x82
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f004 fe38 	bl	8013248 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00e      	beq.n	800e610 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e602:	4618      	mov	r0, r3
 800e604:	f005 f804 	bl	8013610 <USBD_static_free>
    pdev->pClassData = NULL;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e62c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e62e:	2300      	movs	r3, #0
 800e630:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e632:	2300      	movs	r3, #0
 800e634:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e640:	2303      	movs	r3, #3
 800e642:	e0af      	b.n	800e7a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d03f      	beq.n	800e6d0 <USBD_CDC_Setup+0xb4>
 800e650:	2b20      	cmp	r3, #32
 800e652:	f040 809f 	bne.w	800e794 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	88db      	ldrh	r3, [r3, #6]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d02e      	beq.n	800e6bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	b25b      	sxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	da16      	bge.n	800e696 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e674:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	88d2      	ldrh	r2, [r2, #6]
 800e67a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	88db      	ldrh	r3, [r3, #6]
 800e680:	2b07      	cmp	r3, #7
 800e682:	bf28      	it	cs
 800e684:	2307      	movcs	r3, #7
 800e686:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	89fa      	ldrh	r2, [r7, #14]
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f001 fb43 	bl	800fd1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e694:	e085      	b.n	800e7a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	785a      	ldrb	r2, [r3, #1]
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	88db      	ldrh	r3, [r3, #6]
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e6ac:	6939      	ldr	r1, [r7, #16]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	88db      	ldrh	r3, [r3, #6]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f001 fb5c 	bl	800fd72 <USBD_CtlPrepareRx>
      break;
 800e6ba:	e072      	b.n	800e7a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	7850      	ldrb	r0, [r2, #1]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	4798      	blx	r3
      break;
 800e6ce:	e068      	b.n	800e7a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	785b      	ldrb	r3, [r3, #1]
 800e6d4:	2b0b      	cmp	r3, #11
 800e6d6:	d852      	bhi.n	800e77e <USBD_CDC_Setup+0x162>
 800e6d8:	a201      	add	r2, pc, #4	; (adr r2, 800e6e0 <USBD_CDC_Setup+0xc4>)
 800e6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6de:	bf00      	nop
 800e6e0:	0800e711 	.word	0x0800e711
 800e6e4:	0800e78d 	.word	0x0800e78d
 800e6e8:	0800e77f 	.word	0x0800e77f
 800e6ec:	0800e77f 	.word	0x0800e77f
 800e6f0:	0800e77f 	.word	0x0800e77f
 800e6f4:	0800e77f 	.word	0x0800e77f
 800e6f8:	0800e77f 	.word	0x0800e77f
 800e6fc:	0800e77f 	.word	0x0800e77f
 800e700:	0800e77f 	.word	0x0800e77f
 800e704:	0800e77f 	.word	0x0800e77f
 800e708:	0800e73b 	.word	0x0800e73b
 800e70c:	0800e765 	.word	0x0800e765
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b03      	cmp	r3, #3
 800e71a:	d107      	bne.n	800e72c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e71c:	f107 030a 	add.w	r3, r7, #10
 800e720:	2202      	movs	r2, #2
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f001 faf8 	bl	800fd1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e72a:	e032      	b.n	800e792 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f001 fa82 	bl	800fc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e734:	2303      	movs	r3, #3
 800e736:	75fb      	strb	r3, [r7, #23]
          break;
 800e738:	e02b      	b.n	800e792 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b03      	cmp	r3, #3
 800e744:	d107      	bne.n	800e756 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e746:	f107 030d 	add.w	r3, r7, #13
 800e74a:	2201      	movs	r2, #1
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f001 fae3 	bl	800fd1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e754:	e01d      	b.n	800e792 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e756:	6839      	ldr	r1, [r7, #0]
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f001 fa6d 	bl	800fc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e75e:	2303      	movs	r3, #3
 800e760:	75fb      	strb	r3, [r7, #23]
          break;
 800e762:	e016      	b.n	800e792 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	2b03      	cmp	r3, #3
 800e76e:	d00f      	beq.n	800e790 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f001 fa60 	bl	800fc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e778:	2303      	movs	r3, #3
 800e77a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e77c:	e008      	b.n	800e790 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f001 fa59 	bl	800fc38 <USBD_CtlError>
          ret = USBD_FAIL;
 800e786:	2303      	movs	r3, #3
 800e788:	75fb      	strb	r3, [r7, #23]
          break;
 800e78a:	e002      	b.n	800e792 <USBD_CDC_Setup+0x176>
          break;
 800e78c:	bf00      	nop
 800e78e:	e008      	b.n	800e7a2 <USBD_CDC_Setup+0x186>
          break;
 800e790:	bf00      	nop
      }
      break;
 800e792:	e006      	b.n	800e7a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e794:	6839      	ldr	r1, [r7, #0]
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f001 fa4e 	bl	800fc38 <USBD_CtlError>
      ret = USBD_FAIL;
 800e79c:	2303      	movs	r3, #3
 800e79e:	75fb      	strb	r3, [r7, #23]
      break;
 800e7a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	e04f      	b.n	800e86e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e7d6:	78fa      	ldrb	r2, [r7, #3]
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	440b      	add	r3, r1
 800e7e4:	3318      	adds	r3, #24
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d029      	beq.n	800e840 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e7ec:	78fa      	ldrb	r2, [r7, #3]
 800e7ee:	6879      	ldr	r1, [r7, #4]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	3318      	adds	r3, #24
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	78f9      	ldrb	r1, [r7, #3]
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	460b      	mov	r3, r1
 800e804:	00db      	lsls	r3, r3, #3
 800e806:	440b      	add	r3, r1
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	4403      	add	r3, r0
 800e80c:	3348      	adds	r3, #72	; 0x48
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	fbb2 f1f3 	udiv	r1, r2, r3
 800e814:	fb01 f303 	mul.w	r3, r1, r3
 800e818:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d110      	bne.n	800e840 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e81e:	78fa      	ldrb	r2, [r7, #3]
 800e820:	6879      	ldr	r1, [r7, #4]
 800e822:	4613      	mov	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	440b      	add	r3, r1
 800e82c:	3318      	adds	r3, #24
 800e82e:	2200      	movs	r2, #0
 800e830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e832:	78f9      	ldrb	r1, [r7, #3]
 800e834:	2300      	movs	r3, #0
 800e836:	2200      	movs	r2, #0
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f004 fe09 	bl	8013450 <USBD_LL_Transmit>
 800e83e:	e015      	b.n	800e86c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2200      	movs	r2, #0
 800e844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00b      	beq.n	800e86c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e85a:	691b      	ldr	r3, [r3, #16]
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e868:	78fa      	ldrb	r2, [r7, #3]
 800e86a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	460b      	mov	r3, r1
 800e880:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e888:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e894:	2303      	movs	r3, #3
 800e896:	e015      	b.n	800e8c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e898:	78fb      	ldrb	r3, [r7, #3]
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f004 fe47 	bl	8013530 <USBD_LL_GetRxDataSize>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	e01b      	b.n	800e91e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d015      	beq.n	800e91c <USBD_CDC_EP0_RxReady+0x50>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e8f6:	2bff      	cmp	r3, #255	; 0xff
 800e8f8:	d010      	beq.n	800e91c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e908:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e910:	b292      	uxth	r2, r2
 800e912:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	22ff      	movs	r2, #255	; 0xff
 800e918:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
	...

0800e928 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2243      	movs	r2, #67	; 0x43
 800e934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e936:	4b03      	ldr	r3, [pc, #12]	; (800e944 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	2000029c 	.word	0x2000029c

0800e948 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2243      	movs	r2, #67	; 0x43
 800e954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e956:	4b03      	ldr	r3, [pc, #12]	; (800e964 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e958:	4618      	mov	r0, r3
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	20000258 	.word	0x20000258

0800e968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2243      	movs	r2, #67	; 0x43
 800e974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e976:	4b03      	ldr	r3, [pc, #12]	; (800e984 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e978:	4618      	mov	r0, r3
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr
 800e984:	200002e0 	.word	0x200002e0

0800e988 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	220a      	movs	r2, #10
 800e994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e996:	4b03      	ldr	r3, [pc, #12]	; (800e9a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e998:	4618      	mov	r0, r3
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr
 800e9a4:	20000214 	.word	0x20000214

0800e9a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	e004      	b.n	800e9c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b087      	sub	sp, #28
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	60b9      	str	r1, [r7, #8]
 800e9dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e008      	b.n	800ea02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	371c      	adds	r7, #28
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ea26:	2303      	movs	r3, #3
 800ea28:	e004      	b.n	800ea34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	683a      	ldr	r2, [r7, #0]
 800ea2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ea50:	2301      	movs	r3, #1
 800ea52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea5e:	2303      	movs	r3, #3
 800ea60:	e01a      	b.n	800ea98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d114      	bne.n	800ea96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ea8a:	2181      	movs	r1, #129	; 0x81
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f004 fcdf 	bl	8013450 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e016      	b.n	800eaec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	7c1b      	ldrb	r3, [r3, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d109      	bne.n	800eada <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eacc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ead0:	2101      	movs	r1, #1
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f004 fcf4 	bl	80134c0 <USBD_LL_PrepareReceive>
 800ead8:	e007      	b.n	800eaea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eae0:	2340      	movs	r3, #64	; 0x40
 800eae2:	2101      	movs	r1, #1
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f004 fceb 	bl	80134c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	4613      	mov	r3, r2
 800eb00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d101      	bne.n	800eb0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	e01f      	b.n	800eb4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d003      	beq.n	800eb32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2201      	movs	r2, #1
 800eb36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	79fa      	ldrb	r2, [r7, #7]
 800eb3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f004 fac7 	bl	80130d4 <USBD_LL_Init>
 800eb46:	4603      	mov	r3, r0
 800eb48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800eb68:	2303      	movs	r3, #3
 800eb6a:	e016      	b.n	800eb9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00b      	beq.n	800eb98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb88:	f107 020e 	add.w	r2, r7, #14
 800eb8c:	4610      	mov	r0, r2
 800eb8e:	4798      	blx	r3
 800eb90:	4602      	mov	r2, r0
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b082      	sub	sp, #8
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f004 fadc 	bl	8013168 <USBD_LL_Start>
 800ebb0:	4603      	mov	r3, r0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ebdc:	2303      	movs	r3, #3
 800ebde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d009      	beq.n	800ebfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	78fa      	ldrb	r2, [r7, #3]
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	4798      	blx	r3
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d007      	beq.n	800ec2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	78fa      	ldrb	r2, [r7, #3]
 800ec28:	4611      	mov	r1, r2
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	4798      	blx	r3
  }

  return USBD_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec48:	6839      	ldr	r1, [r7, #0]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 ffba 	bl	800fbc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec5e:	461a      	mov	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec6c:	f003 031f 	and.w	r3, r3, #31
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d01a      	beq.n	800ecaa <USBD_LL_SetupStage+0x72>
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d822      	bhi.n	800ecbe <USBD_LL_SetupStage+0x86>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <USBD_LL_SetupStage+0x4a>
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d00a      	beq.n	800ec96 <USBD_LL_SetupStage+0x5e>
 800ec80:	e01d      	b.n	800ecbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec88:	4619      	mov	r1, r3
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 fa62 	bl	800f154 <USBD_StdDevReq>
 800ec90:	4603      	mov	r3, r0
 800ec92:	73fb      	strb	r3, [r7, #15]
      break;
 800ec94:	e020      	b.n	800ecd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 fac6 	bl	800f230 <USBD_StdItfReq>
 800eca4:	4603      	mov	r3, r0
 800eca6:	73fb      	strb	r3, [r7, #15]
      break;
 800eca8:	e016      	b.n	800ecd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 fb05 	bl	800f2c2 <USBD_StdEPReq>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	73fb      	strb	r3, [r7, #15]
      break;
 800ecbc:	e00c      	b.n	800ecd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	4619      	mov	r1, r3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f004 faf1 	bl	80132b4 <USBD_LL_StallEP>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	73fb      	strb	r3, [r7, #15]
      break;
 800ecd6:	bf00      	nop
  }

  return ret;
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b086      	sub	sp, #24
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	60f8      	str	r0, [r7, #12]
 800ecea:	460b      	mov	r3, r1
 800ecec:	607a      	str	r2, [r7, #4]
 800ecee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ecf0:	7afb      	ldrb	r3, [r7, #11]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d138      	bne.n	800ed68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ecfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed04:	2b03      	cmp	r3, #3
 800ed06:	d14a      	bne.n	800ed9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	689a      	ldr	r2, [r3, #8]
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d913      	bls.n	800ed3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	1ad2      	subs	r2, r2, r3
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	bf28      	it	cs
 800ed2e:	4613      	movcs	r3, r2
 800ed30:	461a      	mov	r2, r3
 800ed32:	6879      	ldr	r1, [r7, #4]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f001 f839 	bl	800fdac <USBD_CtlContinueRx>
 800ed3a:	e030      	b.n	800ed9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d10b      	bne.n	800ed60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d005      	beq.n	800ed60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f001 f834 	bl	800fdce <USBD_CtlSendStatus>
 800ed66:	e01a      	b.n	800ed9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	d114      	bne.n	800ed9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00e      	beq.n	800ed9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	7afa      	ldrb	r2, [r7, #11]
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	4798      	blx	r3
 800ed90:	4603      	mov	r3, r0
 800ed92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ed9a:	7dfb      	ldrb	r3, [r7, #23]
 800ed9c:	e000      	b.n	800eda0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	460b      	mov	r3, r1
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800edb6:	7afb      	ldrb	r3, [r7, #11]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d16b      	bne.n	800ee94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3314      	adds	r3, #20
 800edc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d156      	bne.n	800ee7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	689a      	ldr	r2, [r3, #8]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d914      	bls.n	800ee02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	689a      	ldr	r2, [r3, #8]
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	1ad2      	subs	r2, r2, r3
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	461a      	mov	r2, r3
 800edec:	6879      	ldr	r1, [r7, #4]
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f000 ffae 	bl	800fd50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edf4:	2300      	movs	r3, #0
 800edf6:	2200      	movs	r2, #0
 800edf8:	2100      	movs	r1, #0
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f004 fb60 	bl	80134c0 <USBD_LL_PrepareReceive>
 800ee00:	e03b      	b.n	800ee7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	68da      	ldr	r2, [r3, #12]
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d11c      	bne.n	800ee48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d316      	bcc.n	800ee48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	685a      	ldr	r2, [r3, #4]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d20f      	bcs.n	800ee48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee28:	2200      	movs	r2, #0
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f000 ff8f 	bl	800fd50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2100      	movs	r1, #0
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f004 fb3d 	bl	80134c0 <USBD_LL_PrepareReceive>
 800ee46:	e018      	b.n	800ee7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	2b03      	cmp	r3, #3
 800ee52:	d10b      	bne.n	800ee6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d005      	beq.n	800ee6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee6c:	2180      	movs	r1, #128	; 0x80
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f004 fa20 	bl	80132b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f000 ffbd 	bl	800fdf4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d122      	bne.n	800eeca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7ff fe98 	bl	800ebba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee92:	e01a      	b.n	800eeca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d114      	bne.n	800eeca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea6:	695b      	ldr	r3, [r3, #20]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00e      	beq.n	800eeca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	7afa      	ldrb	r2, [r7, #11]
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	4798      	blx	r3
 800eebc:	4603      	mov	r3, r0
 800eebe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eec0:	7dfb      	ldrb	r3, [r7, #23]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d001      	beq.n	800eeca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	e000      	b.n	800eecc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ef04:	2303      	movs	r3, #3
 800ef06:	e02f      	b.n	800ef68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00f      	beq.n	800ef32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d009      	beq.n	800ef32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	6852      	ldr	r2, [r2, #4]
 800ef2a:	b2d2      	uxtb	r2, r2
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef32:	2340      	movs	r3, #64	; 0x40
 800ef34:	2200      	movs	r2, #0
 800ef36:	2100      	movs	r1, #0
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f004 f947 	bl	80131cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2240      	movs	r2, #64	; 0x40
 800ef4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef4e:	2340      	movs	r3, #64	; 0x40
 800ef50:	2200      	movs	r2, #0
 800ef52:	2180      	movs	r1, #128	; 0x80
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f004 f939 	bl	80131cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2240      	movs	r2, #64	; 0x40
 800ef64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	78fa      	ldrb	r2, [r7, #3]
 800ef80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2204      	movs	r2, #4
 800efaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	2b04      	cmp	r3, #4
 800efce:	d106      	bne.n	800efde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800efd6:	b2da      	uxtb	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800effe:	2303      	movs	r3, #3
 800f000:	e012      	b.n	800f028 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d10b      	bne.n	800f026 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f014:	69db      	ldr	r3, [r3, #28]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d005      	beq.n	800f026 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f020:	69db      	ldr	r3, [r3, #28]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	460b      	mov	r3, r1
 800f03a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f042:	2b00      	cmp	r3, #0
 800f044:	d101      	bne.n	800f04a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f046:	2303      	movs	r3, #3
 800f048:	e014      	b.n	800f074 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f050:	b2db      	uxtb	r3, r3
 800f052:	2b03      	cmp	r3, #3
 800f054:	d10d      	bne.n	800f072 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05c:	6a1b      	ldr	r3, [r3, #32]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d007      	beq.n	800f072 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	78fa      	ldrb	r2, [r7, #3]
 800f06c:	4611      	mov	r1, r2
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	460b      	mov	r3, r1
 800f086:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d101      	bne.n	800f096 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f092:	2303      	movs	r3, #3
 800f094:	e014      	b.n	800f0c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d10d      	bne.n	800f0be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d007      	beq.n	800f0be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b6:	78fa      	ldrb	r2, [r7, #3]
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b082      	sub	sp, #8
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d009      	beq.n	800f10c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	6852      	ldr	r2, [r2, #4]
 800f104:	b2d2      	uxtb	r2, r2
 800f106:	4611      	mov	r1, r2
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	4798      	blx	r3
  }

  return USBD_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f116:	b480      	push	{r7}
 800f118:	b087      	sub	sp, #28
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	3301      	adds	r3, #1
 800f12c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f134:	8a3b      	ldrh	r3, [r7, #16]
 800f136:	021b      	lsls	r3, r3, #8
 800f138:	b21a      	sxth	r2, r3
 800f13a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f13e:	4313      	orrs	r3, r2
 800f140:	b21b      	sxth	r3, r3
 800f142:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f144:	89fb      	ldrh	r3, [r7, #14]
}
 800f146:	4618      	mov	r0, r3
 800f148:	371c      	adds	r7, #28
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
	...

0800f154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f16a:	2b40      	cmp	r3, #64	; 0x40
 800f16c:	d005      	beq.n	800f17a <USBD_StdDevReq+0x26>
 800f16e:	2b40      	cmp	r3, #64	; 0x40
 800f170:	d853      	bhi.n	800f21a <USBD_StdDevReq+0xc6>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00b      	beq.n	800f18e <USBD_StdDevReq+0x3a>
 800f176:	2b20      	cmp	r3, #32
 800f178:	d14f      	bne.n	800f21a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	4798      	blx	r3
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]
      break;
 800f18c:	e04a      	b.n	800f224 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	785b      	ldrb	r3, [r3, #1]
 800f192:	2b09      	cmp	r3, #9
 800f194:	d83b      	bhi.n	800f20e <USBD_StdDevReq+0xba>
 800f196:	a201      	add	r2, pc, #4	; (adr r2, 800f19c <USBD_StdDevReq+0x48>)
 800f198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19c:	0800f1f1 	.word	0x0800f1f1
 800f1a0:	0800f205 	.word	0x0800f205
 800f1a4:	0800f20f 	.word	0x0800f20f
 800f1a8:	0800f1fb 	.word	0x0800f1fb
 800f1ac:	0800f20f 	.word	0x0800f20f
 800f1b0:	0800f1cf 	.word	0x0800f1cf
 800f1b4:	0800f1c5 	.word	0x0800f1c5
 800f1b8:	0800f20f 	.word	0x0800f20f
 800f1bc:	0800f1e7 	.word	0x0800f1e7
 800f1c0:	0800f1d9 	.word	0x0800f1d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f9de 	bl	800f588 <USBD_GetDescriptor>
          break;
 800f1cc:	e024      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fb6d 	bl	800f8b0 <USBD_SetAddress>
          break;
 800f1d6:	e01f      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fbac 	bl	800f938 <USBD_SetConfig>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	73fb      	strb	r3, [r7, #15]
          break;
 800f1e4:	e018      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 fc4b 	bl	800fa84 <USBD_GetConfig>
          break;
 800f1ee:	e013      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fc7c 	bl	800faf0 <USBD_GetStatus>
          break;
 800f1f8:	e00e      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fcab 	bl	800fb58 <USBD_SetFeature>
          break;
 800f202:	e009      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fcba 	bl	800fb80 <USBD_ClrFeature>
          break;
 800f20c:	e004      	b.n	800f218 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 fd11 	bl	800fc38 <USBD_CtlError>
          break;
 800f216:	bf00      	nop
      }
      break;
 800f218:	e004      	b.n	800f224 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fd0b 	bl	800fc38 <USBD_CtlError>
      break;
 800f222:	bf00      	nop
  }

  return ret;
 800f224:	7bfb      	ldrb	r3, [r7, #15]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop

0800f230 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f246:	2b40      	cmp	r3, #64	; 0x40
 800f248:	d005      	beq.n	800f256 <USBD_StdItfReq+0x26>
 800f24a:	2b40      	cmp	r3, #64	; 0x40
 800f24c:	d82f      	bhi.n	800f2ae <USBD_StdItfReq+0x7e>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <USBD_StdItfReq+0x26>
 800f252:	2b20      	cmp	r3, #32
 800f254:	d12b      	bne.n	800f2ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	3b01      	subs	r3, #1
 800f260:	2b02      	cmp	r3, #2
 800f262:	d81d      	bhi.n	800f2a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	889b      	ldrh	r3, [r3, #4]
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d813      	bhi.n	800f296 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	4798      	blx	r3
 800f27c:	4603      	mov	r3, r0
 800f27e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	88db      	ldrh	r3, [r3, #6]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d110      	bne.n	800f2aa <USBD_StdItfReq+0x7a>
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10d      	bne.n	800f2aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fd9d 	bl	800fdce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f294:	e009      	b.n	800f2aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fccd 	bl	800fc38 <USBD_CtlError>
          break;
 800f29e:	e004      	b.n	800f2aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fcc8 	bl	800fc38 <USBD_CtlError>
          break;
 800f2a8:	e000      	b.n	800f2ac <USBD_StdItfReq+0x7c>
          break;
 800f2aa:	bf00      	nop
      }
      break;
 800f2ac:	e004      	b.n	800f2b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fcc1 	bl	800fc38 <USBD_CtlError>
      break;
 800f2b6:	bf00      	nop
  }

  return ret;
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b084      	sub	sp, #16
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	889b      	ldrh	r3, [r3, #4]
 800f2d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2de:	2b40      	cmp	r3, #64	; 0x40
 800f2e0:	d007      	beq.n	800f2f2 <USBD_StdEPReq+0x30>
 800f2e2:	2b40      	cmp	r3, #64	; 0x40
 800f2e4:	f200 8145 	bhi.w	800f572 <USBD_StdEPReq+0x2b0>
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00c      	beq.n	800f306 <USBD_StdEPReq+0x44>
 800f2ec:	2b20      	cmp	r3, #32
 800f2ee:	f040 8140 	bne.w	800f572 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	4798      	blx	r3
 800f300:	4603      	mov	r3, r0
 800f302:	73fb      	strb	r3, [r7, #15]
      break;
 800f304:	e13a      	b.n	800f57c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	785b      	ldrb	r3, [r3, #1]
 800f30a:	2b03      	cmp	r3, #3
 800f30c:	d007      	beq.n	800f31e <USBD_StdEPReq+0x5c>
 800f30e:	2b03      	cmp	r3, #3
 800f310:	f300 8129 	bgt.w	800f566 <USBD_StdEPReq+0x2a4>
 800f314:	2b00      	cmp	r3, #0
 800f316:	d07f      	beq.n	800f418 <USBD_StdEPReq+0x156>
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d03c      	beq.n	800f396 <USBD_StdEPReq+0xd4>
 800f31c:	e123      	b.n	800f566 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b02      	cmp	r3, #2
 800f328:	d002      	beq.n	800f330 <USBD_StdEPReq+0x6e>
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d016      	beq.n	800f35c <USBD_StdEPReq+0x9a>
 800f32e:	e02c      	b.n	800f38a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00d      	beq.n	800f352 <USBD_StdEPReq+0x90>
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	2b80      	cmp	r3, #128	; 0x80
 800f33a:	d00a      	beq.n	800f352 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f33c:	7bbb      	ldrb	r3, [r7, #14]
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f003 ffb7 	bl	80132b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f346:	2180      	movs	r1, #128	; 0x80
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f003 ffb3 	bl	80132b4 <USBD_LL_StallEP>
 800f34e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f350:	e020      	b.n	800f394 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fc6f 	bl	800fc38 <USBD_CtlError>
              break;
 800f35a:	e01b      	b.n	800f394 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	885b      	ldrh	r3, [r3, #2]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10e      	bne.n	800f382 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00b      	beq.n	800f382 <USBD_StdEPReq+0xc0>
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	2b80      	cmp	r3, #128	; 0x80
 800f36e:	d008      	beq.n	800f382 <USBD_StdEPReq+0xc0>
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	88db      	ldrh	r3, [r3, #6]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d104      	bne.n	800f382 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f003 ff99 	bl	80132b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 fd23 	bl	800fdce <USBD_CtlSendStatus>

              break;
 800f388:	e004      	b.n	800f394 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fc53 	bl	800fc38 <USBD_CtlError>
              break;
 800f392:	bf00      	nop
          }
          break;
 800f394:	e0ec      	b.n	800f570 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d002      	beq.n	800f3a8 <USBD_StdEPReq+0xe6>
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d016      	beq.n	800f3d4 <USBD_StdEPReq+0x112>
 800f3a6:	e030      	b.n	800f40a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3a8:	7bbb      	ldrb	r3, [r7, #14]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00d      	beq.n	800f3ca <USBD_StdEPReq+0x108>
 800f3ae:	7bbb      	ldrb	r3, [r7, #14]
 800f3b0:	2b80      	cmp	r3, #128	; 0x80
 800f3b2:	d00a      	beq.n	800f3ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3b4:	7bbb      	ldrb	r3, [r7, #14]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f003 ff7b 	bl	80132b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3be:	2180      	movs	r1, #128	; 0x80
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f003 ff77 	bl	80132b4 <USBD_LL_StallEP>
 800f3c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3c8:	e025      	b.n	800f416 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 fc33 	bl	800fc38 <USBD_CtlError>
              break;
 800f3d2:	e020      	b.n	800f416 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	885b      	ldrh	r3, [r3, #2]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d11b      	bne.n	800f414 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3dc:	7bbb      	ldrb	r3, [r7, #14]
 800f3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d004      	beq.n	800f3f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f003 ff98 	bl	8013320 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fcec 	bl	800fdce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	4798      	blx	r3
 800f404:	4603      	mov	r3, r0
 800f406:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f408:	e004      	b.n	800f414 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fc13 	bl	800fc38 <USBD_CtlError>
              break;
 800f412:	e000      	b.n	800f416 <USBD_StdEPReq+0x154>
              break;
 800f414:	bf00      	nop
          }
          break;
 800f416:	e0ab      	b.n	800f570 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b02      	cmp	r3, #2
 800f422:	d002      	beq.n	800f42a <USBD_StdEPReq+0x168>
 800f424:	2b03      	cmp	r3, #3
 800f426:	d032      	beq.n	800f48e <USBD_StdEPReq+0x1cc>
 800f428:	e097      	b.n	800f55a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f42a:	7bbb      	ldrb	r3, [r7, #14]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d007      	beq.n	800f440 <USBD_StdEPReq+0x17e>
 800f430:	7bbb      	ldrb	r3, [r7, #14]
 800f432:	2b80      	cmp	r3, #128	; 0x80
 800f434:	d004      	beq.n	800f440 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fbfd 	bl	800fc38 <USBD_CtlError>
                break;
 800f43e:	e091      	b.n	800f564 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f444:	2b00      	cmp	r3, #0
 800f446:	da0b      	bge.n	800f460 <USBD_StdEPReq+0x19e>
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	3310      	adds	r3, #16
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	4413      	add	r3, r2
 800f45c:	3304      	adds	r3, #4
 800f45e:	e00b      	b.n	800f478 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f460:	7bbb      	ldrb	r3, [r7, #14]
 800f462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	3304      	adds	r3, #4
 800f478:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	2202      	movs	r2, #2
 800f484:	4619      	mov	r1, r3
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 fc47 	bl	800fd1a <USBD_CtlSendData>
              break;
 800f48c:	e06a      	b.n	800f564 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f48e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f492:	2b00      	cmp	r3, #0
 800f494:	da11      	bge.n	800f4ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	f003 020f 	and.w	r2, r3, #15
 800f49c:	6879      	ldr	r1, [r7, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	440b      	add	r3, r1
 800f4a8:	3324      	adds	r3, #36	; 0x24
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d117      	bne.n	800f4e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fbc0 	bl	800fc38 <USBD_CtlError>
                  break;
 800f4b8:	e054      	b.n	800f564 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	f003 020f 	and.w	r2, r3, #15
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	440b      	add	r3, r1
 800f4cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d104      	bne.n	800f4e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fbad 	bl	800fc38 <USBD_CtlError>
                  break;
 800f4de:	e041      	b.n	800f564 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	da0b      	bge.n	800f500 <USBD_StdEPReq+0x23e>
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4413      	add	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	3310      	adds	r3, #16
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	e00b      	b.n	800f518 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f500:	7bbb      	ldrb	r3, [r7, #14]
 800f502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f506:	4613      	mov	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4413      	add	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	4413      	add	r3, r2
 800f516:	3304      	adds	r3, #4
 800f518:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d002      	beq.n	800f526 <USBD_StdEPReq+0x264>
 800f520:	7bbb      	ldrb	r3, [r7, #14]
 800f522:	2b80      	cmp	r3, #128	; 0x80
 800f524:	d103      	bne.n	800f52e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2200      	movs	r2, #0
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	e00e      	b.n	800f54c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f52e:	7bbb      	ldrb	r3, [r7, #14]
 800f530:	4619      	mov	r1, r3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f003 ff2a 	bl	801338c <USBD_LL_IsStallEP>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d003      	beq.n	800f546 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2201      	movs	r2, #1
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	e002      	b.n	800f54c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	2200      	movs	r2, #0
 800f54a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2202      	movs	r2, #2
 800f550:	4619      	mov	r1, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fbe1 	bl	800fd1a <USBD_CtlSendData>
              break;
 800f558:	e004      	b.n	800f564 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 fb6b 	bl	800fc38 <USBD_CtlError>
              break;
 800f562:	bf00      	nop
          }
          break;
 800f564:	e004      	b.n	800f570 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 fb65 	bl	800fc38 <USBD_CtlError>
          break;
 800f56e:	bf00      	nop
      }
      break;
 800f570:	e004      	b.n	800f57c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fb5f 	bl	800fc38 <USBD_CtlError>
      break;
 800f57a:	bf00      	nop
  }

  return ret;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
	...

0800f588 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f592:	2300      	movs	r3, #0
 800f594:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f59a:	2300      	movs	r3, #0
 800f59c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	885b      	ldrh	r3, [r3, #2]
 800f5a2:	0a1b      	lsrs	r3, r3, #8
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	2b0e      	cmp	r3, #14
 800f5aa:	f200 8152 	bhi.w	800f852 <USBD_GetDescriptor+0x2ca>
 800f5ae:	a201      	add	r2, pc, #4	; (adr r2, 800f5b4 <USBD_GetDescriptor+0x2c>)
 800f5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b4:	0800f625 	.word	0x0800f625
 800f5b8:	0800f63d 	.word	0x0800f63d
 800f5bc:	0800f67d 	.word	0x0800f67d
 800f5c0:	0800f853 	.word	0x0800f853
 800f5c4:	0800f853 	.word	0x0800f853
 800f5c8:	0800f7f3 	.word	0x0800f7f3
 800f5cc:	0800f81f 	.word	0x0800f81f
 800f5d0:	0800f853 	.word	0x0800f853
 800f5d4:	0800f853 	.word	0x0800f853
 800f5d8:	0800f853 	.word	0x0800f853
 800f5dc:	0800f853 	.word	0x0800f853
 800f5e0:	0800f853 	.word	0x0800f853
 800f5e4:	0800f853 	.word	0x0800f853
 800f5e8:	0800f853 	.word	0x0800f853
 800f5ec:	0800f5f1 	.word	0x0800f5f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5f6:	69db      	ldr	r3, [r3, #28]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00b      	beq.n	800f614 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f602:	69db      	ldr	r3, [r3, #28]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	7c12      	ldrb	r2, [r2, #16]
 800f608:	f107 0108 	add.w	r1, r7, #8
 800f60c:	4610      	mov	r0, r2
 800f60e:	4798      	blx	r3
 800f610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f612:	e126      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 fb0e 	bl	800fc38 <USBD_CtlError>
        err++;
 800f61c:	7afb      	ldrb	r3, [r7, #11]
 800f61e:	3301      	adds	r3, #1
 800f620:	72fb      	strb	r3, [r7, #11]
      break;
 800f622:	e11e      	b.n	800f862 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	7c12      	ldrb	r2, [r2, #16]
 800f630:	f107 0108 	add.w	r1, r7, #8
 800f634:	4610      	mov	r0, r2
 800f636:	4798      	blx	r3
 800f638:	60f8      	str	r0, [r7, #12]
      break;
 800f63a:	e112      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7c1b      	ldrb	r3, [r3, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d10d      	bne.n	800f660 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f64c:	f107 0208 	add.w	r2, r7, #8
 800f650:	4610      	mov	r0, r2
 800f652:	4798      	blx	r3
 800f654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	3301      	adds	r3, #1
 800f65a:	2202      	movs	r2, #2
 800f65c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f65e:	e100      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f668:	f107 0208 	add.w	r2, r7, #8
 800f66c:	4610      	mov	r0, r2
 800f66e:	4798      	blx	r3
 800f670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3301      	adds	r3, #1
 800f676:	2202      	movs	r2, #2
 800f678:	701a      	strb	r2, [r3, #0]
      break;
 800f67a:	e0f2      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	885b      	ldrh	r3, [r3, #2]
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b05      	cmp	r3, #5
 800f684:	f200 80ac 	bhi.w	800f7e0 <USBD_GetDescriptor+0x258>
 800f688:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <USBD_GetDescriptor+0x108>)
 800f68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68e:	bf00      	nop
 800f690:	0800f6a9 	.word	0x0800f6a9
 800f694:	0800f6dd 	.word	0x0800f6dd
 800f698:	0800f711 	.word	0x0800f711
 800f69c:	0800f745 	.word	0x0800f745
 800f6a0:	0800f779 	.word	0x0800f779
 800f6a4:	0800f7ad 	.word	0x0800f7ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00b      	beq.n	800f6cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	7c12      	ldrb	r2, [r2, #16]
 800f6c0:	f107 0108 	add.w	r1, r7, #8
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
 800f6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ca:	e091      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6cc:	6839      	ldr	r1, [r7, #0]
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 fab2 	bl	800fc38 <USBD_CtlError>
            err++;
 800f6d4:	7afb      	ldrb	r3, [r7, #11]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6da:	e089      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	7c12      	ldrb	r2, [r2, #16]
 800f6f4:	f107 0108 	add.w	r1, r7, #8
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	4798      	blx	r3
 800f6fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6fe:	e077      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fa98 	bl	800fc38 <USBD_CtlError>
            err++;
 800f708:	7afb      	ldrb	r3, [r7, #11]
 800f70a:	3301      	adds	r3, #1
 800f70c:	72fb      	strb	r3, [r7, #11]
          break;
 800f70e:	e06f      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00b      	beq.n	800f734 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	7c12      	ldrb	r2, [r2, #16]
 800f728:	f107 0108 	add.w	r1, r7, #8
 800f72c:	4610      	mov	r0, r2
 800f72e:	4798      	blx	r3
 800f730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f732:	e05d      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 fa7e 	bl	800fc38 <USBD_CtlError>
            err++;
 800f73c:	7afb      	ldrb	r3, [r7, #11]
 800f73e:	3301      	adds	r3, #1
 800f740:	72fb      	strb	r3, [r7, #11]
          break;
 800f742:	e055      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00b      	beq.n	800f768 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	7c12      	ldrb	r2, [r2, #16]
 800f75c:	f107 0108 	add.w	r1, r7, #8
 800f760:	4610      	mov	r0, r2
 800f762:	4798      	blx	r3
 800f764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f766:	e043      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fa64 	bl	800fc38 <USBD_CtlError>
            err++;
 800f770:	7afb      	ldrb	r3, [r7, #11]
 800f772:	3301      	adds	r3, #1
 800f774:	72fb      	strb	r3, [r7, #11]
          break;
 800f776:	e03b      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f77e:	695b      	ldr	r3, [r3, #20]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00b      	beq.n	800f79c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f78a:	695b      	ldr	r3, [r3, #20]
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	7c12      	ldrb	r2, [r2, #16]
 800f790:	f107 0108 	add.w	r1, r7, #8
 800f794:	4610      	mov	r0, r2
 800f796:	4798      	blx	r3
 800f798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f79a:	e029      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fa4a 	bl	800fc38 <USBD_CtlError>
            err++;
 800f7a4:	7afb      	ldrb	r3, [r7, #11]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f7aa:	e021      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00b      	beq.n	800f7d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	7c12      	ldrb	r2, [r2, #16]
 800f7c4:	f107 0108 	add.w	r1, r7, #8
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	4798      	blx	r3
 800f7cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7ce:	e00f      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fa30 	bl	800fc38 <USBD_CtlError>
            err++;
 800f7d8:	7afb      	ldrb	r3, [r7, #11]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f7de:	e007      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7e0:	6839      	ldr	r1, [r7, #0]
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fa28 	bl	800fc38 <USBD_CtlError>
          err++;
 800f7e8:	7afb      	ldrb	r3, [r7, #11]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f7ee:	bf00      	nop
      }
      break;
 800f7f0:	e037      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7c1b      	ldrb	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d109      	bne.n	800f80e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f802:	f107 0208 	add.w	r2, r7, #8
 800f806:	4610      	mov	r0, r2
 800f808:	4798      	blx	r3
 800f80a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f80c:	e029      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fa11 	bl	800fc38 <USBD_CtlError>
        err++;
 800f816:	7afb      	ldrb	r3, [r7, #11]
 800f818:	3301      	adds	r3, #1
 800f81a:	72fb      	strb	r3, [r7, #11]
      break;
 800f81c:	e021      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	7c1b      	ldrb	r3, [r3, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10d      	bne.n	800f842 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82e:	f107 0208 	add.w	r2, r7, #8
 800f832:	4610      	mov	r0, r2
 800f834:	4798      	blx	r3
 800f836:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3301      	adds	r3, #1
 800f83c:	2207      	movs	r2, #7
 800f83e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f840:	e00f      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f9f7 	bl	800fc38 <USBD_CtlError>
        err++;
 800f84a:	7afb      	ldrb	r3, [r7, #11]
 800f84c:	3301      	adds	r3, #1
 800f84e:	72fb      	strb	r3, [r7, #11]
      break;
 800f850:	e007      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f9ef 	bl	800fc38 <USBD_CtlError>
      err++;
 800f85a:	7afb      	ldrb	r3, [r7, #11]
 800f85c:	3301      	adds	r3, #1
 800f85e:	72fb      	strb	r3, [r7, #11]
      break;
 800f860:	bf00      	nop
  }

  if (err != 0U)
 800f862:	7afb      	ldrb	r3, [r7, #11]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d11e      	bne.n	800f8a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	88db      	ldrh	r3, [r3, #6]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d016      	beq.n	800f89e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f870:	893b      	ldrh	r3, [r7, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00e      	beq.n	800f894 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	88da      	ldrh	r2, [r3, #6]
 800f87a:	893b      	ldrh	r3, [r7, #8]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	bf28      	it	cs
 800f880:	4613      	movcs	r3, r2
 800f882:	b29b      	uxth	r3, r3
 800f884:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f886:	893b      	ldrh	r3, [r7, #8]
 800f888:	461a      	mov	r2, r3
 800f88a:	68f9      	ldr	r1, [r7, #12]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 fa44 	bl	800fd1a <USBD_CtlSendData>
 800f892:	e009      	b.n	800f8a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f9ce 	bl	800fc38 <USBD_CtlError>
 800f89c:	e004      	b.n	800f8a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fa95 	bl	800fdce <USBD_CtlSendStatus>
 800f8a4:	e000      	b.n	800f8a8 <USBD_GetDescriptor+0x320>
    return;
 800f8a6:	bf00      	nop
  }
}
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop

0800f8b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	889b      	ldrh	r3, [r3, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d131      	bne.n	800f926 <USBD_SetAddress+0x76>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	88db      	ldrh	r3, [r3, #6]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d12d      	bne.n	800f926 <USBD_SetAddress+0x76>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	885b      	ldrh	r3, [r3, #2]
 800f8ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f8d0:	d829      	bhi.n	800f926 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	885b      	ldrh	r3, [r3, #2]
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d104      	bne.n	800f8f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f9a3 	bl	800fc38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8f2:	e01d      	b.n	800f930 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7bfa      	ldrb	r2, [r7, #15]
 800f8f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f003 fd6f 	bl	80133e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fa61 	bl	800fdce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d004      	beq.n	800f91c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2202      	movs	r2, #2
 800f916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f91a:	e009      	b.n	800f930 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f924:	e004      	b.n	800f930 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f985 	bl	800fc38 <USBD_CtlError>
  }
}
 800f92e:	bf00      	nop
 800f930:	bf00      	nop
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f942:	2300      	movs	r3, #0
 800f944:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	4b4c      	ldr	r3, [pc, #304]	; (800fa80 <USBD_SetConfig+0x148>)
 800f94e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f950:	4b4b      	ldr	r3, [pc, #300]	; (800fa80 <USBD_SetConfig+0x148>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d905      	bls.n	800f964 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 f96c 	bl	800fc38 <USBD_CtlError>
    return USBD_FAIL;
 800f960:	2303      	movs	r3, #3
 800f962:	e088      	b.n	800fa76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d002      	beq.n	800f976 <USBD_SetConfig+0x3e>
 800f970:	2b03      	cmp	r3, #3
 800f972:	d025      	beq.n	800f9c0 <USBD_SetConfig+0x88>
 800f974:	e071      	b.n	800fa5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f976:	4b42      	ldr	r3, [pc, #264]	; (800fa80 <USBD_SetConfig+0x148>)
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d01c      	beq.n	800f9b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f97e:	4b40      	ldr	r3, [pc, #256]	; (800fa80 <USBD_SetConfig+0x148>)
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f988:	4b3d      	ldr	r3, [pc, #244]	; (800fa80 <USBD_SetConfig+0x148>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	4619      	mov	r1, r3
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7ff f91e 	bl	800ebd0 <USBD_SetClassConfig>
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d004      	beq.n	800f9a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f99e:	6839      	ldr	r1, [r7, #0]
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f949 	bl	800fc38 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9a6:	e065      	b.n	800fa74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fa10 	bl	800fdce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2203      	movs	r2, #3
 800f9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f9b6:	e05d      	b.n	800fa74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fa08 	bl	800fdce <USBD_CtlSendStatus>
      break;
 800f9be:	e059      	b.n	800fa74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9c0:	4b2f      	ldr	r3, [pc, #188]	; (800fa80 <USBD_SetConfig+0x148>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d112      	bne.n	800f9ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2202      	movs	r2, #2
 800f9cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f9d0:	4b2b      	ldr	r3, [pc, #172]	; (800fa80 <USBD_SetConfig+0x148>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9da:	4b29      	ldr	r3, [pc, #164]	; (800fa80 <USBD_SetConfig+0x148>)
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	4619      	mov	r1, r3
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff f911 	bl	800ec08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f9f1 	bl	800fdce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9ec:	e042      	b.n	800fa74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f9ee:	4b24      	ldr	r3, [pc, #144]	; (800fa80 <USBD_SetConfig+0x148>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d02a      	beq.n	800fa52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	4619      	mov	r1, r3
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7ff f8ff 	bl	800ec08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa0a:	4b1d      	ldr	r3, [pc, #116]	; (800fa80 <USBD_SetConfig+0x148>)
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa14:	4b1a      	ldr	r3, [pc, #104]	; (800fa80 <USBD_SetConfig+0x148>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff f8d8 	bl	800ebd0 <USBD_SetClassConfig>
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00f      	beq.n	800fa4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 f903 	bl	800fc38 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff f8e4 	bl	800ec08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa48:	e014      	b.n	800fa74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f9bf 	bl	800fdce <USBD_CtlSendStatus>
      break;
 800fa50:	e010      	b.n	800fa74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f9bb 	bl	800fdce <USBD_CtlSendStatus>
      break;
 800fa58:	e00c      	b.n	800fa74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 f8eb 	bl	800fc38 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa62:	4b07      	ldr	r3, [pc, #28]	; (800fa80 <USBD_SetConfig+0x148>)
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	4619      	mov	r1, r3
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff f8cd 	bl	800ec08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa6e:	2303      	movs	r3, #3
 800fa70:	73fb      	strb	r3, [r7, #15]
      break;
 800fa72:	bf00      	nop
  }

  return ret;
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	20003f5c 	.word	0x20003f5c

0800fa84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	88db      	ldrh	r3, [r3, #6]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d004      	beq.n	800faa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 f8cd 	bl	800fc38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa9e:	e023      	b.n	800fae8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	dc02      	bgt.n	800fab2 <USBD_GetConfig+0x2e>
 800faac:	2b00      	cmp	r3, #0
 800faae:	dc03      	bgt.n	800fab8 <USBD_GetConfig+0x34>
 800fab0:	e015      	b.n	800fade <USBD_GetConfig+0x5a>
 800fab2:	2b03      	cmp	r3, #3
 800fab4:	d00b      	beq.n	800face <USBD_GetConfig+0x4a>
 800fab6:	e012      	b.n	800fade <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2200      	movs	r2, #0
 800fabc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3308      	adds	r3, #8
 800fac2:	2201      	movs	r2, #1
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f927 	bl	800fd1a <USBD_CtlSendData>
        break;
 800facc:	e00c      	b.n	800fae8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	3304      	adds	r3, #4
 800fad2:	2201      	movs	r2, #1
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f91f 	bl	800fd1a <USBD_CtlSendData>
        break;
 800fadc:	e004      	b.n	800fae8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fade:	6839      	ldr	r1, [r7, #0]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f8a9 	bl	800fc38 <USBD_CtlError>
        break;
 800fae6:	bf00      	nop
}
 800fae8:	bf00      	nop
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d81e      	bhi.n	800fb46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	88db      	ldrh	r3, [r3, #6]
 800fb0c:	2b02      	cmp	r3, #2
 800fb0e:	d004      	beq.n	800fb1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f890 	bl	800fc38 <USBD_CtlError>
        break;
 800fb18:	e01a      	b.n	800fb50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d005      	beq.n	800fb36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	f043 0202 	orr.w	r2, r3, #2
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	330c      	adds	r3, #12
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f8eb 	bl	800fd1a <USBD_CtlSendData>
      break;
 800fb44:	e004      	b.n	800fb50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 f875 	bl	800fc38 <USBD_CtlError>
      break;
 800fb4e:	bf00      	nop
  }
}
 800fb50:	bf00      	nop
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	885b      	ldrh	r3, [r3, #2]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d106      	bne.n	800fb78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f92b 	bl	800fdce <USBD_CtlSendStatus>
  }
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	3b01      	subs	r3, #1
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d80b      	bhi.n	800fbb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	885b      	ldrh	r3, [r3, #2]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d10c      	bne.n	800fbba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f910 	bl	800fdce <USBD_CtlSendStatus>
      }
      break;
 800fbae:	e004      	b.n	800fbba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f840 	bl	800fc38 <USBD_CtlError>
      break;
 800fbb8:	e000      	b.n	800fbbc <USBD_ClrFeature+0x3c>
      break;
 800fbba:	bf00      	nop
  }
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	781a      	ldrb	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	781a      	ldrb	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	3301      	adds	r3, #1
 800fbec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f7ff fa91 	bl	800f116 <SWAPBYTE>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fa84 	bl	800f116 <SWAPBYTE>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	461a      	mov	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f7ff fa77 	bl	800f116 <SWAPBYTE>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	80da      	strh	r2, [r3, #6]
}
 800fc30:	bf00      	nop
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc42:	2180      	movs	r1, #128	; 0x80
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f003 fb35 	bl	80132b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f003 fb31 	bl	80132b4 <USBD_LL_StallEP>
}
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b086      	sub	sp, #24
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	60f8      	str	r0, [r7, #12]
 800fc62:	60b9      	str	r1, [r7, #8]
 800fc64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc66:	2300      	movs	r3, #0
 800fc68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d036      	beq.n	800fcde <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc74:	6938      	ldr	r0, [r7, #16]
 800fc76:	f000 f836 	bl	800fce6 <USBD_GetLen>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc88:	7dfb      	ldrb	r3, [r7, #23]
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	7812      	ldrb	r2, [r2, #0]
 800fc92:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	3301      	adds	r3, #1
 800fc98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	4413      	add	r3, r2
 800fca0:	2203      	movs	r2, #3
 800fca2:	701a      	strb	r2, [r3, #0]
  idx++;
 800fca4:	7dfb      	ldrb	r3, [r7, #23]
 800fca6:	3301      	adds	r3, #1
 800fca8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcaa:	e013      	b.n	800fcd4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcac:	7dfb      	ldrb	r3, [r7, #23]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	7812      	ldrb	r2, [r2, #0]
 800fcb6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	613b      	str	r3, [r7, #16]
    idx++;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	4413      	add	r3, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1e7      	bne.n	800fcac <USBD_GetString+0x52>
 800fcdc:	e000      	b.n	800fce0 <USBD_GetString+0x86>
    return;
 800fcde:	bf00      	nop
  }
}
 800fce0:	3718      	adds	r7, #24
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fce6:	b480      	push	{r7}
 800fce8:	b085      	sub	sp, #20
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fcf6:	e005      	b.n	800fd04 <USBD_GetLen+0x1e>
  {
    len++;
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3301      	adds	r3, #1
 800fd02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1f5      	bne.n	800fcf8 <USBD_GetLen+0x12>
  }

  return len;
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr

0800fd1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b084      	sub	sp, #16
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	60f8      	str	r0, [r7, #12]
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2202      	movs	r2, #2
 800fd2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	2100      	movs	r1, #0
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f003 fb85 	bl	8013450 <USBD_LL_Transmit>

  return USBD_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	2100      	movs	r1, #0
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f003 fb74 	bl	8013450 <USBD_LL_Transmit>

  return USBD_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b084      	sub	sp, #16
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	60f8      	str	r0, [r7, #12]
 800fd7a:	60b9      	str	r1, [r7, #8]
 800fd7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2203      	movs	r2, #3
 800fd82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f003 fb8f 	bl	80134c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f003 fb7e 	bl	80134c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b082      	sub	sp, #8
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2204      	movs	r2, #4
 800fdda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdde:	2300      	movs	r3, #0
 800fde0:	2200      	movs	r2, #0
 800fde2:	2100      	movs	r1, #0
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f003 fb33 	bl	8013450 <USBD_LL_Transmit>

  return USBD_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2205      	movs	r2, #5
 800fe00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe04:	2300      	movs	r3, #0
 800fe06:	2200      	movs	r2, #0
 800fe08:	2100      	movs	r1, #0
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f003 fb58 	bl	80134c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
	...

0800fe1c <__NVIC_SetPriority>:
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	4603      	mov	r3, r0
 800fe24:	6039      	str	r1, [r7, #0]
 800fe26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	db0a      	blt.n	800fe46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	490c      	ldr	r1, [pc, #48]	; (800fe68 <__NVIC_SetPriority+0x4c>)
 800fe36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe3a:	0112      	lsls	r2, r2, #4
 800fe3c:	b2d2      	uxtb	r2, r2
 800fe3e:	440b      	add	r3, r1
 800fe40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fe44:	e00a      	b.n	800fe5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	4908      	ldr	r1, [pc, #32]	; (800fe6c <__NVIC_SetPriority+0x50>)
 800fe4c:	79fb      	ldrb	r3, [r7, #7]
 800fe4e:	f003 030f 	and.w	r3, r3, #15
 800fe52:	3b04      	subs	r3, #4
 800fe54:	0112      	lsls	r2, r2, #4
 800fe56:	b2d2      	uxtb	r2, r2
 800fe58:	440b      	add	r3, r1
 800fe5a:	761a      	strb	r2, [r3, #24]
}
 800fe5c:	bf00      	nop
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr
 800fe68:	e000e100 	.word	0xe000e100
 800fe6c:	e000ed00 	.word	0xe000ed00

0800fe70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fe70:	b580      	push	{r7, lr}
 800fe72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fe74:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <SysTick_Handler+0x1c>)
 800fe76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fe78:	f001 fd28 	bl	80118cc <xTaskGetSchedulerState>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d001      	beq.n	800fe86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fe82:	f002 fb11 	bl	80124a8 <xPortSysTickHandler>
  }
}
 800fe86:	bf00      	nop
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	e000e010 	.word	0xe000e010

0800fe90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fe94:	2100      	movs	r1, #0
 800fe96:	f06f 0004 	mvn.w	r0, #4
 800fe9a:	f7ff ffbf 	bl	800fe1c <__NVIC_SetPriority>
#endif
}
 800fe9e:	bf00      	nop
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feaa:	f3ef 8305 	mrs	r3, IPSR
 800feae:	603b      	str	r3, [r7, #0]
  return(result);
 800feb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d003      	beq.n	800febe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800feb6:	f06f 0305 	mvn.w	r3, #5
 800feba:	607b      	str	r3, [r7, #4]
 800febc:	e00c      	b.n	800fed8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800febe:	4b0a      	ldr	r3, [pc, #40]	; (800fee8 <osKernelInitialize+0x44>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d105      	bne.n	800fed2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fec6:	4b08      	ldr	r3, [pc, #32]	; (800fee8 <osKernelInitialize+0x44>)
 800fec8:	2201      	movs	r2, #1
 800feca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fecc:	2300      	movs	r3, #0
 800fece:	607b      	str	r3, [r7, #4]
 800fed0:	e002      	b.n	800fed8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fed2:	f04f 33ff 	mov.w	r3, #4294967295
 800fed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fed8:	687b      	ldr	r3, [r7, #4]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	20003f60 	.word	0x20003f60

0800feec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fef2:	f3ef 8305 	mrs	r3, IPSR
 800fef6:	603b      	str	r3, [r7, #0]
  return(result);
 800fef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d003      	beq.n	800ff06 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fefe:	f06f 0305 	mvn.w	r3, #5
 800ff02:	607b      	str	r3, [r7, #4]
 800ff04:	e010      	b.n	800ff28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff06:	4b0b      	ldr	r3, [pc, #44]	; (800ff34 <osKernelStart+0x48>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d109      	bne.n	800ff22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff0e:	f7ff ffbf 	bl	800fe90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff12:	4b08      	ldr	r3, [pc, #32]	; (800ff34 <osKernelStart+0x48>)
 800ff14:	2202      	movs	r2, #2
 800ff16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff18:	f001 f87c 	bl	8011014 <vTaskStartScheduler>
      stat = osOK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	607b      	str	r3, [r7, #4]
 800ff20:	e002      	b.n	800ff28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ff22:	f04f 33ff 	mov.w	r3, #4294967295
 800ff26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff28:	687b      	ldr	r3, [r7, #4]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	20003f60 	.word	0x20003f60

0800ff38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b08e      	sub	sp, #56	; 0x38
 800ff3c:	af04      	add	r7, sp, #16
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff48:	f3ef 8305 	mrs	r3, IPSR
 800ff4c:	617b      	str	r3, [r7, #20]
  return(result);
 800ff4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d17e      	bne.n	8010052 <osThreadNew+0x11a>
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d07b      	beq.n	8010052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ff5a:	2380      	movs	r3, #128	; 0x80
 800ff5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ff5e:	2318      	movs	r3, #24
 800ff60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ff62:	2300      	movs	r3, #0
 800ff64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ff66:	f04f 33ff 	mov.w	r3, #4294967295
 800ff6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d045      	beq.n	800fffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d002      	beq.n	800ff80 <osThreadNew+0x48>
        name = attr->name;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	699b      	ldr	r3, [r3, #24]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d008      	beq.n	800ffa6 <osThreadNew+0x6e>
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	2b38      	cmp	r3, #56	; 0x38
 800ff98:	d805      	bhi.n	800ffa6 <osThreadNew+0x6e>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d001      	beq.n	800ffaa <osThreadNew+0x72>
        return (NULL);
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e054      	b.n	8010054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	695b      	ldr	r3, [r3, #20]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d003      	beq.n	800ffba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	089b      	lsrs	r3, r3, #2
 800ffb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00e      	beq.n	800ffe0 <osThreadNew+0xa8>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	2bbb      	cmp	r3, #187	; 0xbb
 800ffc8:	d90a      	bls.n	800ffe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d006      	beq.n	800ffe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	695b      	ldr	r3, [r3, #20]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d002      	beq.n	800ffe0 <osThreadNew+0xa8>
        mem = 1;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	61bb      	str	r3, [r7, #24]
 800ffde:	e010      	b.n	8010002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10c      	bne.n	8010002 <osThreadNew+0xca>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d108      	bne.n	8010002 <osThreadNew+0xca>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	691b      	ldr	r3, [r3, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d104      	bne.n	8010002 <osThreadNew+0xca>
          mem = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	61bb      	str	r3, [r7, #24]
 800fffc:	e001      	b.n	8010002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d110      	bne.n	801002a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010010:	9202      	str	r2, [sp, #8]
 8010012:	9301      	str	r3, [sp, #4]
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	6a3a      	ldr	r2, [r7, #32]
 801001c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f000 fe0c 	bl	8010c3c <xTaskCreateStatic>
 8010024:	4603      	mov	r3, r0
 8010026:	613b      	str	r3, [r7, #16]
 8010028:	e013      	b.n	8010052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d110      	bne.n	8010052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010030:	6a3b      	ldr	r3, [r7, #32]
 8010032:	b29a      	uxth	r2, r3
 8010034:	f107 0310 	add.w	r3, r7, #16
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f000 fe57 	bl	8010cf6 <xTaskCreate>
 8010048:	4603      	mov	r3, r0
 801004a:	2b01      	cmp	r3, #1
 801004c:	d001      	beq.n	8010052 <osThreadNew+0x11a>
            hTask = NULL;
 801004e:	2300      	movs	r3, #0
 8010050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010052:	693b      	ldr	r3, [r7, #16]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3728      	adds	r7, #40	; 0x28
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010064:	f3ef 8305 	mrs	r3, IPSR
 8010068:	60bb      	str	r3, [r7, #8]
  return(result);
 801006a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801006c:	2b00      	cmp	r3, #0
 801006e:	d003      	beq.n	8010078 <osDelay+0x1c>
    stat = osErrorISR;
 8010070:	f06f 0305 	mvn.w	r3, #5
 8010074:	60fb      	str	r3, [r7, #12]
 8010076:	e007      	b.n	8010088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010078:	2300      	movs	r3, #0
 801007a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d002      	beq.n	8010088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 ff92 	bl	8010fac <vTaskDelay>
    }
  }

  return (stat);
 8010088:	68fb      	ldr	r3, [r7, #12]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
	...

08010094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010094:	b480      	push	{r7}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	4a07      	ldr	r2, [pc, #28]	; (80100c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80100a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	4a06      	ldr	r2, [pc, #24]	; (80100c4 <vApplicationGetIdleTaskMemory+0x30>)
 80100aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2280      	movs	r2, #128	; 0x80
 80100b0:	601a      	str	r2, [r3, #0]
}
 80100b2:	bf00      	nop
 80100b4:	3714      	adds	r7, #20
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr
 80100be:	bf00      	nop
 80100c0:	20003f64 	.word	0x20003f64
 80100c4:	20004020 	.word	0x20004020

080100c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	4a07      	ldr	r2, [pc, #28]	; (80100f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80100d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	4a06      	ldr	r2, [pc, #24]	; (80100f8 <vApplicationGetTimerTaskMemory+0x30>)
 80100de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100e6:	601a      	str	r2, [r3, #0]
}
 80100e8:	bf00      	nop
 80100ea:	3714      	adds	r7, #20
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr
 80100f4:	20004220 	.word	0x20004220
 80100f8:	200042dc 	.word	0x200042dc

080100fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f103 0208 	add.w	r2, r3, #8
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f04f 32ff 	mov.w	r2, #4294967295
 8010114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f103 0208 	add.w	r2, r3, #8
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f103 0208 	add.w	r2, r3, #8
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2200      	movs	r2, #0
 8010148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801014a:	bf00      	nop
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr

08010156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010156:	b480      	push	{r7}
 8010158:	b085      	sub	sp, #20
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	689a      	ldr	r2, [r3, #8]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	689b      	ldr	r3, [r3, #8]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	601a      	str	r2, [r3, #0]
}
 8010192:	bf00      	nop
 8010194:	3714      	adds	r7, #20
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801019e:	b480      	push	{r7}
 80101a0:	b085      	sub	sp, #20
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b4:	d103      	bne.n	80101be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	e00c      	b.n	80101d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	3308      	adds	r3, #8
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	e002      	b.n	80101cc <vListInsert+0x2e>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d2f6      	bcs.n	80101c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	685a      	ldr	r2, [r3, #4]
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	683a      	ldr	r2, [r7, #0]
 80101e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	1c5a      	adds	r2, r3, #1
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	601a      	str	r2, [r3, #0]
}
 8010204:	bf00      	nop
 8010206:	3714      	adds	r7, #20
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010210:	b480      	push	{r7}
 8010212:	b085      	sub	sp, #20
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	6892      	ldr	r2, [r2, #8]
 8010226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	6852      	ldr	r2, [r2, #4]
 8010230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	429a      	cmp	r2, r3
 801023a:	d103      	bne.n	8010244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	689a      	ldr	r2, [r3, #8]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	1e5a      	subs	r2, r3, #1
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3714      	adds	r7, #20
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10a      	bne.n	801028e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027c:	f383 8811 	msr	BASEPRI, r3
 8010280:	f3bf 8f6f 	isb	sy
 8010284:	f3bf 8f4f 	dsb	sy
 8010288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801028a:	bf00      	nop
 801028c:	e7fe      	b.n	801028c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801028e:	f002 f879 	bl	8012384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801029a:	68f9      	ldr	r1, [r7, #12]
 801029c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801029e:	fb01 f303 	mul.w	r3, r1, r3
 80102a2:	441a      	add	r2, r3
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2200      	movs	r2, #0
 80102ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102be:	3b01      	subs	r3, #1
 80102c0:	68f9      	ldr	r1, [r7, #12]
 80102c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102c4:	fb01 f303 	mul.w	r3, r1, r3
 80102c8:	441a      	add	r2, r3
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	22ff      	movs	r2, #255	; 0xff
 80102d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	22ff      	movs	r2, #255	; 0xff
 80102da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d114      	bne.n	801030e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	691b      	ldr	r3, [r3, #16]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d01a      	beq.n	8010322 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	3310      	adds	r3, #16
 80102f0:	4618      	mov	r0, r3
 80102f2:	f001 f929 	bl	8011548 <xTaskRemoveFromEventList>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d012      	beq.n	8010322 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80102fc:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <xQueueGenericReset+0xcc>)
 80102fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010302:	601a      	str	r2, [r3, #0]
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	e009      	b.n	8010322 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	3310      	adds	r3, #16
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff fef2 	bl	80100fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	3324      	adds	r3, #36	; 0x24
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff feed 	bl	80100fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010322:	f002 f85f 	bl	80123e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010326:	2301      	movs	r3, #1
}
 8010328:	4618      	mov	r0, r3
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	e000ed04 	.word	0xe000ed04

08010334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08e      	sub	sp, #56	; 0x38
 8010338:	af02      	add	r7, sp, #8
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
 8010340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d10a      	bne.n	801035e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801035a:	bf00      	nop
 801035c:	e7fe      	b.n	801035c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10a      	bne.n	801037a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010376:	bf00      	nop
 8010378:	e7fe      	b.n	8010378 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d002      	beq.n	8010386 <xQueueGenericCreateStatic+0x52>
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <xQueueGenericCreateStatic+0x56>
 8010386:	2301      	movs	r3, #1
 8010388:	e000      	b.n	801038c <xQueueGenericCreateStatic+0x58>
 801038a:	2300      	movs	r3, #0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10a      	bne.n	80103a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010394:	f383 8811 	msr	BASEPRI, r3
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	623b      	str	r3, [r7, #32]
}
 80103a2:	bf00      	nop
 80103a4:	e7fe      	b.n	80103a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d102      	bne.n	80103b2 <xQueueGenericCreateStatic+0x7e>
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d101      	bne.n	80103b6 <xQueueGenericCreateStatic+0x82>
 80103b2:	2301      	movs	r3, #1
 80103b4:	e000      	b.n	80103b8 <xQueueGenericCreateStatic+0x84>
 80103b6:	2300      	movs	r3, #0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10a      	bne.n	80103d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80103bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c0:	f383 8811 	msr	BASEPRI, r3
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	f3bf 8f4f 	dsb	sy
 80103cc:	61fb      	str	r3, [r7, #28]
}
 80103ce:	bf00      	nop
 80103d0:	e7fe      	b.n	80103d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80103d2:	2350      	movs	r3, #80	; 0x50
 80103d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b50      	cmp	r3, #80	; 0x50
 80103da:	d00a      	beq.n	80103f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	61bb      	str	r3, [r7, #24]
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80103f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00d      	beq.n	801041a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010400:	2201      	movs	r2, #1
 8010402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	4613      	mov	r3, r2
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	68b9      	ldr	r1, [r7, #8]
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f000 f805 	bl	8010424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801041c:	4618      	mov	r0, r3
 801041e:	3730      	adds	r7, #48	; 0x30
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d103      	bne.n	8010440 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	69ba      	ldr	r2, [r7, #24]
 801043c:	601a      	str	r2, [r3, #0]
 801043e:	e002      	b.n	8010446 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010452:	2101      	movs	r1, #1
 8010454:	69b8      	ldr	r0, [r7, #24]
 8010456:	f7ff ff05 	bl	8010264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	78fa      	ldrb	r2, [r7, #3]
 801045e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010462:	bf00      	nop
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
	...

0801046c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b08e      	sub	sp, #56	; 0x38
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]
 8010476:	607a      	str	r2, [r7, #4]
 8010478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801047a:	2300      	movs	r3, #0
 801047c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010484:	2b00      	cmp	r3, #0
 8010486:	d10a      	bne.n	801049e <xQueueGenericSend+0x32>
	__asm volatile
 8010488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048c:	f383 8811 	msr	BASEPRI, r3
 8010490:	f3bf 8f6f 	isb	sy
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801049a:	bf00      	nop
 801049c:	e7fe      	b.n	801049c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d103      	bne.n	80104ac <xQueueGenericSend+0x40>
 80104a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <xQueueGenericSend+0x44>
 80104ac:	2301      	movs	r3, #1
 80104ae:	e000      	b.n	80104b2 <xQueueGenericSend+0x46>
 80104b0:	2300      	movs	r3, #0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d10a      	bne.n	80104cc <xQueueGenericSend+0x60>
	__asm volatile
 80104b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ba:	f383 8811 	msr	BASEPRI, r3
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104c8:	bf00      	nop
 80104ca:	e7fe      	b.n	80104ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d103      	bne.n	80104da <xQueueGenericSend+0x6e>
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d101      	bne.n	80104de <xQueueGenericSend+0x72>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <xQueueGenericSend+0x74>
 80104de:	2300      	movs	r3, #0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d10a      	bne.n	80104fa <xQueueGenericSend+0x8e>
	__asm volatile
 80104e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e8:	f383 8811 	msr	BASEPRI, r3
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	f3bf 8f4f 	dsb	sy
 80104f4:	623b      	str	r3, [r7, #32]
}
 80104f6:	bf00      	nop
 80104f8:	e7fe      	b.n	80104f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104fa:	f001 f9e7 	bl	80118cc <xTaskGetSchedulerState>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d102      	bne.n	801050a <xQueueGenericSend+0x9e>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d101      	bne.n	801050e <xQueueGenericSend+0xa2>
 801050a:	2301      	movs	r3, #1
 801050c:	e000      	b.n	8010510 <xQueueGenericSend+0xa4>
 801050e:	2300      	movs	r3, #0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <xQueueGenericSend+0xbe>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	61fb      	str	r3, [r7, #28]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801052a:	f001 ff2b 	bl	8012384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801052e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010536:	429a      	cmp	r2, r3
 8010538:	d302      	bcc.n	8010540 <xQueueGenericSend+0xd4>
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	2b02      	cmp	r3, #2
 801053e:	d129      	bne.n	8010594 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010540:	683a      	ldr	r2, [r7, #0]
 8010542:	68b9      	ldr	r1, [r7, #8]
 8010544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010546:	f000 fa0b 	bl	8010960 <prvCopyDataToQueue>
 801054a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801054c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010550:	2b00      	cmp	r3, #0
 8010552:	d010      	beq.n	8010576 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	3324      	adds	r3, #36	; 0x24
 8010558:	4618      	mov	r0, r3
 801055a:	f000 fff5 	bl	8011548 <xTaskRemoveFromEventList>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d013      	beq.n	801058c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010564:	4b3f      	ldr	r3, [pc, #252]	; (8010664 <xQueueGenericSend+0x1f8>)
 8010566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	e00a      	b.n	801058c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	2b00      	cmp	r3, #0
 801057a:	d007      	beq.n	801058c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801057c:	4b39      	ldr	r3, [pc, #228]	; (8010664 <xQueueGenericSend+0x1f8>)
 801057e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010582:	601a      	str	r2, [r3, #0]
 8010584:	f3bf 8f4f 	dsb	sy
 8010588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801058c:	f001 ff2a 	bl	80123e4 <vPortExitCritical>
				return pdPASS;
 8010590:	2301      	movs	r3, #1
 8010592:	e063      	b.n	801065c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d103      	bne.n	80105a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801059a:	f001 ff23 	bl	80123e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801059e:	2300      	movs	r3, #0
 80105a0:	e05c      	b.n	801065c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d106      	bne.n	80105b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105a8:	f107 0314 	add.w	r3, r7, #20
 80105ac:	4618      	mov	r0, r3
 80105ae:	f001 f82f 	bl	8011610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105b2:	2301      	movs	r3, #1
 80105b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105b6:	f001 ff15 	bl	80123e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105ba:	f000 fd9b 	bl	80110f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105be:	f001 fee1 	bl	8012384 <vPortEnterCritical>
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105c8:	b25b      	sxtb	r3, r3
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ce:	d103      	bne.n	80105d8 <xQueueGenericSend+0x16c>
 80105d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105de:	b25b      	sxtb	r3, r3
 80105e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e4:	d103      	bne.n	80105ee <xQueueGenericSend+0x182>
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	2200      	movs	r2, #0
 80105ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105ee:	f001 fef9 	bl	80123e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80105f2:	1d3a      	adds	r2, r7, #4
 80105f4:	f107 0314 	add.w	r3, r7, #20
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f001 f81e 	bl	801163c <xTaskCheckForTimeOut>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d124      	bne.n	8010650 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010608:	f000 faa2 	bl	8010b50 <prvIsQueueFull>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d018      	beq.n	8010644 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	3310      	adds	r3, #16
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f000 ff44 	bl	80114a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010622:	f000 fa2d 	bl	8010a80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010626:	f000 fd73 	bl	8011110 <xTaskResumeAll>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	f47f af7c 	bne.w	801052a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010632:	4b0c      	ldr	r3, [pc, #48]	; (8010664 <xQueueGenericSend+0x1f8>)
 8010634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	e772      	b.n	801052a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010646:	f000 fa1b 	bl	8010a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801064a:	f000 fd61 	bl	8011110 <xTaskResumeAll>
 801064e:	e76c      	b.n	801052a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010652:	f000 fa15 	bl	8010a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010656:	f000 fd5b 	bl	8011110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801065a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801065c:	4618      	mov	r0, r3
 801065e:	3738      	adds	r7, #56	; 0x38
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	e000ed04 	.word	0xe000ed04

08010668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b090      	sub	sp, #64	; 0x40
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801067a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067c:	2b00      	cmp	r3, #0
 801067e:	d10a      	bne.n	8010696 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010684:	f383 8811 	msr	BASEPRI, r3
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	f3bf 8f4f 	dsb	sy
 8010690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010692:	bf00      	nop
 8010694:	e7fe      	b.n	8010694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d103      	bne.n	80106a4 <xQueueGenericSendFromISR+0x3c>
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d101      	bne.n	80106a8 <xQueueGenericSendFromISR+0x40>
 80106a4:	2301      	movs	r3, #1
 80106a6:	e000      	b.n	80106aa <xQueueGenericSendFromISR+0x42>
 80106a8:	2300      	movs	r3, #0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d10a      	bne.n	80106c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80106ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b2:	f383 8811 	msr	BASEPRI, r3
 80106b6:	f3bf 8f6f 	isb	sy
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106c0:	bf00      	nop
 80106c2:	e7fe      	b.n	80106c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d103      	bne.n	80106d2 <xQueueGenericSendFromISR+0x6a>
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d101      	bne.n	80106d6 <xQueueGenericSendFromISR+0x6e>
 80106d2:	2301      	movs	r3, #1
 80106d4:	e000      	b.n	80106d8 <xQueueGenericSendFromISR+0x70>
 80106d6:	2300      	movs	r3, #0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10a      	bne.n	80106f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	623b      	str	r3, [r7, #32]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80106f2:	f001 ff29 	bl	8012548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80106f6:	f3ef 8211 	mrs	r2, BASEPRI
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	61fa      	str	r2, [r7, #28]
 801070c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801070e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010710:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071a:	429a      	cmp	r2, r3
 801071c:	d302      	bcc.n	8010724 <xQueueGenericSendFromISR+0xbc>
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	2b02      	cmp	r3, #2
 8010722:	d12f      	bne.n	8010784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801072a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010732:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010734:	683a      	ldr	r2, [r7, #0]
 8010736:	68b9      	ldr	r1, [r7, #8]
 8010738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801073a:	f000 f911 	bl	8010960 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801073e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010746:	d112      	bne.n	801076e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074c:	2b00      	cmp	r3, #0
 801074e:	d016      	beq.n	801077e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010752:	3324      	adds	r3, #36	; 0x24
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fef7 	bl	8011548 <xTaskRemoveFromEventList>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00e      	beq.n	801077e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00b      	beq.n	801077e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2201      	movs	r2, #1
 801076a:	601a      	str	r2, [r3, #0]
 801076c:	e007      	b.n	801077e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801076e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010772:	3301      	adds	r3, #1
 8010774:	b2db      	uxtb	r3, r3
 8010776:	b25a      	sxtb	r2, r3
 8010778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801077e:	2301      	movs	r3, #1
 8010780:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010782:	e001      	b.n	8010788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010784:	2300      	movs	r3, #0
 8010786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010796:	4618      	mov	r0, r3
 8010798:	3740      	adds	r7, #64	; 0x40
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b08c      	sub	sp, #48	; 0x30
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80107ac:	2300      	movs	r3, #0
 80107ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d10a      	bne.n	80107d0 <xQueueReceive+0x30>
	__asm volatile
 80107ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107be:	f383 8811 	msr	BASEPRI, r3
 80107c2:	f3bf 8f6f 	isb	sy
 80107c6:	f3bf 8f4f 	dsb	sy
 80107ca:	623b      	str	r3, [r7, #32]
}
 80107cc:	bf00      	nop
 80107ce:	e7fe      	b.n	80107ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d103      	bne.n	80107de <xQueueReceive+0x3e>
 80107d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d101      	bne.n	80107e2 <xQueueReceive+0x42>
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <xQueueReceive+0x44>
 80107e2:	2300      	movs	r3, #0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10a      	bne.n	80107fe <xQueueReceive+0x5e>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	f383 8811 	msr	BASEPRI, r3
 80107f0:	f3bf 8f6f 	isb	sy
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	61fb      	str	r3, [r7, #28]
}
 80107fa:	bf00      	nop
 80107fc:	e7fe      	b.n	80107fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107fe:	f001 f865 	bl	80118cc <xTaskGetSchedulerState>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d102      	bne.n	801080e <xQueueReceive+0x6e>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d101      	bne.n	8010812 <xQueueReceive+0x72>
 801080e:	2301      	movs	r3, #1
 8010810:	e000      	b.n	8010814 <xQueueReceive+0x74>
 8010812:	2300      	movs	r3, #0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d10a      	bne.n	801082e <xQueueReceive+0x8e>
	__asm volatile
 8010818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	61bb      	str	r3, [r7, #24]
}
 801082a:	bf00      	nop
 801082c:	e7fe      	b.n	801082c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801082e:	f001 fda9 	bl	8012384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010836:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	2b00      	cmp	r3, #0
 801083c:	d01f      	beq.n	801087e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801083e:	68b9      	ldr	r1, [r7, #8]
 8010840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010842:	f000 f8f7 	bl	8010a34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	1e5a      	subs	r2, r3, #1
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00f      	beq.n	8010876 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	3310      	adds	r3, #16
 801085a:	4618      	mov	r0, r3
 801085c:	f000 fe74 	bl	8011548 <xTaskRemoveFromEventList>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d007      	beq.n	8010876 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010866:	4b3d      	ldr	r3, [pc, #244]	; (801095c <xQueueReceive+0x1bc>)
 8010868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010876:	f001 fdb5 	bl	80123e4 <vPortExitCritical>
				return pdPASS;
 801087a:	2301      	movs	r3, #1
 801087c:	e069      	b.n	8010952 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d103      	bne.n	801088c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010884:	f001 fdae 	bl	80123e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010888:	2300      	movs	r3, #0
 801088a:	e062      	b.n	8010952 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088e:	2b00      	cmp	r3, #0
 8010890:	d106      	bne.n	80108a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010892:	f107 0310 	add.w	r3, r7, #16
 8010896:	4618      	mov	r0, r3
 8010898:	f000 feba 	bl	8011610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801089c:	2301      	movs	r3, #1
 801089e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108a0:	f001 fda0 	bl	80123e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108a4:	f000 fc26 	bl	80110f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108a8:	f001 fd6c 	bl	8012384 <vPortEnterCritical>
 80108ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108b2:	b25b      	sxtb	r3, r3
 80108b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108b8:	d103      	bne.n	80108c2 <xQueueReceive+0x122>
 80108ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108c8:	b25b      	sxtb	r3, r3
 80108ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ce:	d103      	bne.n	80108d8 <xQueueReceive+0x138>
 80108d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d2:	2200      	movs	r2, #0
 80108d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108d8:	f001 fd84 	bl	80123e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108dc:	1d3a      	adds	r2, r7, #4
 80108de:	f107 0310 	add.w	r3, r7, #16
 80108e2:	4611      	mov	r1, r2
 80108e4:	4618      	mov	r0, r3
 80108e6:	f000 fea9 	bl	801163c <xTaskCheckForTimeOut>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d123      	bne.n	8010938 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108f2:	f000 f917 	bl	8010b24 <prvIsQueueEmpty>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d017      	beq.n	801092c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	3324      	adds	r3, #36	; 0x24
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	4611      	mov	r1, r2
 8010904:	4618      	mov	r0, r3
 8010906:	f000 fdcf 	bl	80114a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801090a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801090c:	f000 f8b8 	bl	8010a80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010910:	f000 fbfe 	bl	8011110 <xTaskResumeAll>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d189      	bne.n	801082e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801091a:	4b10      	ldr	r3, [pc, #64]	; (801095c <xQueueReceive+0x1bc>)
 801091c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010920:	601a      	str	r2, [r3, #0]
 8010922:	f3bf 8f4f 	dsb	sy
 8010926:	f3bf 8f6f 	isb	sy
 801092a:	e780      	b.n	801082e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801092c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801092e:	f000 f8a7 	bl	8010a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010932:	f000 fbed 	bl	8011110 <xTaskResumeAll>
 8010936:	e77a      	b.n	801082e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801093a:	f000 f8a1 	bl	8010a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801093e:	f000 fbe7 	bl	8011110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010944:	f000 f8ee 	bl	8010b24 <prvIsQueueEmpty>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	f43f af6f 	beq.w	801082e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010952:	4618      	mov	r0, r3
 8010954:	3730      	adds	r7, #48	; 0x30
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	e000ed04 	.word	0xe000ed04

08010960 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801096c:	2300      	movs	r3, #0
 801096e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010974:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10d      	bne.n	801099a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d14d      	bne.n	8010a22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 ffbc 	bl	8011908 <xTaskPriorityDisinherit>
 8010990:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	609a      	str	r2, [r3, #8]
 8010998:	e043      	b.n	8010a22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d119      	bne.n	80109d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	6858      	ldr	r0, [r3, #4]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a8:	461a      	mov	r2, r3
 80109aa:	68b9      	ldr	r1, [r7, #8]
 80109ac:	f003 f897 	bl	8013ade <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	685a      	ldr	r2, [r3, #4]
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b8:	441a      	add	r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	685a      	ldr	r2, [r3, #4]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d32b      	bcc.n	8010a22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	605a      	str	r2, [r3, #4]
 80109d2:	e026      	b.n	8010a22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	68d8      	ldr	r0, [r3, #12]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109dc:	461a      	mov	r2, r3
 80109de:	68b9      	ldr	r1, [r7, #8]
 80109e0:	f003 f87d 	bl	8013ade <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	68da      	ldr	r2, [r3, #12]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ec:	425b      	negs	r3, r3
 80109ee:	441a      	add	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	68da      	ldr	r2, [r3, #12]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d207      	bcs.n	8010a10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	689a      	ldr	r2, [r3, #8]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a08:	425b      	negs	r3, r3
 8010a0a:	441a      	add	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	d105      	bne.n	8010a22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d002      	beq.n	8010a22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	1c5a      	adds	r2, r3, #1
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010a2a:	697b      	ldr	r3, [r7, #20]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d018      	beq.n	8010a78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	68da      	ldr	r2, [r3, #12]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a4e:	441a      	add	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68da      	ldr	r2, [r3, #12]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d303      	bcc.n	8010a68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	68d9      	ldr	r1, [r3, #12]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a70:	461a      	mov	r2, r3
 8010a72:	6838      	ldr	r0, [r7, #0]
 8010a74:	f003 f833 	bl	8013ade <memcpy>
	}
}
 8010a78:	bf00      	nop
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a88:	f001 fc7c 	bl	8012384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a94:	e011      	b.n	8010aba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d012      	beq.n	8010ac4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	3324      	adds	r3, #36	; 0x24
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 fd50 	bl	8011548 <xTaskRemoveFromEventList>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d001      	beq.n	8010ab2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010aae:	f000 fe27 	bl	8011700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010ab2:	7bfb      	ldrb	r3, [r7, #15]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	dce9      	bgt.n	8010a96 <prvUnlockQueue+0x16>
 8010ac2:	e000      	b.n	8010ac6 <prvUnlockQueue+0x46>
					break;
 8010ac4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	22ff      	movs	r2, #255	; 0xff
 8010aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010ace:	f001 fc89 	bl	80123e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010ad2:	f001 fc57 	bl	8012384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010adc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ade:	e011      	b.n	8010b04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	691b      	ldr	r3, [r3, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d012      	beq.n	8010b0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	3310      	adds	r3, #16
 8010aec:	4618      	mov	r0, r3
 8010aee:	f000 fd2b 	bl	8011548 <xTaskRemoveFromEventList>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d001      	beq.n	8010afc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010af8:	f000 fe02 	bl	8011700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010afc:	7bbb      	ldrb	r3, [r7, #14]
 8010afe:	3b01      	subs	r3, #1
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	dce9      	bgt.n	8010ae0 <prvUnlockQueue+0x60>
 8010b0c:	e000      	b.n	8010b10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010b0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	22ff      	movs	r2, #255	; 0xff
 8010b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010b18:	f001 fc64 	bl	80123e4 <vPortExitCritical>
}
 8010b1c:	bf00      	nop
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b2c:	f001 fc2a 	bl	8012384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d102      	bne.n	8010b3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	60fb      	str	r3, [r7, #12]
 8010b3c:	e001      	b.n	8010b42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b42:	f001 fc4f 	bl	80123e4 <vPortExitCritical>

	return xReturn;
 8010b46:	68fb      	ldr	r3, [r7, #12]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3710      	adds	r7, #16
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b58:	f001 fc14 	bl	8012384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d102      	bne.n	8010b6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	e001      	b.n	8010b72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b72:	f001 fc37 	bl	80123e4 <vPortExitCritical>

	return xReturn;
 8010b76:	68fb      	ldr	r3, [r7, #12]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	60fb      	str	r3, [r7, #12]
 8010b8e:	e014      	b.n	8010bba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b90:	4a0f      	ldr	r2, [pc, #60]	; (8010bd0 <vQueueAddToRegistry+0x50>)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10b      	bne.n	8010bb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b9c:	490c      	ldr	r1, [pc, #48]	; (8010bd0 <vQueueAddToRegistry+0x50>)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	683a      	ldr	r2, [r7, #0]
 8010ba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010ba6:	4a0a      	ldr	r2, [pc, #40]	; (8010bd0 <vQueueAddToRegistry+0x50>)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	4413      	add	r3, r2
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010bb2:	e006      	b.n	8010bc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	60fb      	str	r3, [r7, #12]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b07      	cmp	r3, #7
 8010bbe:	d9e7      	bls.n	8010b90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010bc0:	bf00      	nop
 8010bc2:	bf00      	nop
 8010bc4:	3714      	adds	r7, #20
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop
 8010bd0:	200046dc 	.word	0x200046dc

08010bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010be4:	f001 fbce 	bl	8012384 <vPortEnterCritical>
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf4:	d103      	bne.n	8010bfe <vQueueWaitForMessageRestricted+0x2a>
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c04:	b25b      	sxtb	r3, r3
 8010c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0a:	d103      	bne.n	8010c14 <vQueueWaitForMessageRestricted+0x40>
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c14:	f001 fbe6 	bl	80123e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d106      	bne.n	8010c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	3324      	adds	r3, #36	; 0x24
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	68b9      	ldr	r1, [r7, #8]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 fc61 	bl	80114f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c2e:	6978      	ldr	r0, [r7, #20]
 8010c30:	f7ff ff26 	bl	8010a80 <prvUnlockQueue>
	}
 8010c34:	bf00      	nop
 8010c36:	3718      	adds	r7, #24
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b08e      	sub	sp, #56	; 0x38
 8010c40:	af04      	add	r7, sp, #16
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
 8010c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	623b      	str	r3, [r7, #32]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10a      	bne.n	8010c82 <xTaskCreateStatic+0x46>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	61fb      	str	r3, [r7, #28]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c82:	23bc      	movs	r3, #188	; 0xbc
 8010c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	2bbc      	cmp	r3, #188	; 0xbc
 8010c8a:	d00a      	beq.n	8010ca2 <xTaskCreateStatic+0x66>
	__asm volatile
 8010c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	61bb      	str	r3, [r7, #24]
}
 8010c9e:	bf00      	nop
 8010ca0:	e7fe      	b.n	8010ca0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010ca2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d01e      	beq.n	8010ce8 <xTaskCreateStatic+0xac>
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01b      	beq.n	8010ce8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	9303      	str	r3, [sp, #12]
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	9302      	str	r3, [sp, #8]
 8010cca:	f107 0314 	add.w	r3, r7, #20
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	68b9      	ldr	r1, [r7, #8]
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f000 f850 	bl	8010d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ce2:	f000 f8f3 	bl	8010ecc <prvAddNewTaskToReadyList>
 8010ce6:	e001      	b.n	8010cec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010cec:	697b      	ldr	r3, [r7, #20]
	}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3728      	adds	r7, #40	; 0x28
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b08c      	sub	sp, #48	; 0x30
 8010cfa:	af04      	add	r7, sp, #16
 8010cfc:	60f8      	str	r0, [r7, #12]
 8010cfe:	60b9      	str	r1, [r7, #8]
 8010d00:	603b      	str	r3, [r7, #0]
 8010d02:	4613      	mov	r3, r2
 8010d04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d06:	88fb      	ldrh	r3, [r7, #6]
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f001 fc5c 	bl	80125c8 <pvPortMalloc>
 8010d10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00e      	beq.n	8010d36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d18:	20bc      	movs	r0, #188	; 0xbc
 8010d1a:	f001 fc55 	bl	80125c8 <pvPortMalloc>
 8010d1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d003      	beq.n	8010d2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	697a      	ldr	r2, [r7, #20]
 8010d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8010d2c:	e005      	b.n	8010d3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d2e:	6978      	ldr	r0, [r7, #20]
 8010d30:	f001 fd16 	bl	8012760 <vPortFree>
 8010d34:	e001      	b.n	8010d3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d017      	beq.n	8010d70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d48:	88fa      	ldrh	r2, [r7, #6]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	9303      	str	r3, [sp, #12]
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	9302      	str	r3, [sp, #8]
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 f80e 	bl	8010d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d64:	69f8      	ldr	r0, [r7, #28]
 8010d66:	f000 f8b1 	bl	8010ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	61bb      	str	r3, [r7, #24]
 8010d6e:	e002      	b.n	8010d76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d70:	f04f 33ff 	mov.w	r3, #4294967295
 8010d74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d76:	69bb      	ldr	r3, [r7, #24]
	}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3720      	adds	r7, #32
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b088      	sub	sp, #32
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	461a      	mov	r2, r3
 8010d98:	21a5      	movs	r1, #165	; 0xa5
 8010d9a:	f002 fec8 	bl	8013b2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010da8:	3b01      	subs	r3, #1
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4413      	add	r3, r2
 8010dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	f023 0307 	bic.w	r3, r3, #7
 8010db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	f003 0307 	and.w	r3, r3, #7
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00a      	beq.n	8010dd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	617b      	str	r3, [r7, #20]
}
 8010dd4:	bf00      	nop
 8010dd6:	e7fe      	b.n	8010dd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d01f      	beq.n	8010e1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010dde:	2300      	movs	r3, #0
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	e012      	b.n	8010e0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	4413      	add	r3, r2
 8010dea:	7819      	ldrb	r1, [r3, #0]
 8010dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	4413      	add	r3, r2
 8010df2:	3334      	adds	r3, #52	; 0x34
 8010df4:	460a      	mov	r2, r1
 8010df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	3301      	adds	r3, #1
 8010e08:	61fb      	str	r3, [r7, #28]
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	2b0f      	cmp	r3, #15
 8010e0e:	d9e9      	bls.n	8010de4 <prvInitialiseNewTask+0x64>
 8010e10:	e000      	b.n	8010e14 <prvInitialiseNewTask+0x94>
			{
				break;
 8010e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e1c:	e003      	b.n	8010e26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	2b37      	cmp	r3, #55	; 0x37
 8010e2a:	d901      	bls.n	8010e30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e2c:	2337      	movs	r3, #55	; 0x37
 8010e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3e:	2200      	movs	r2, #0
 8010e40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e44:	3304      	adds	r3, #4
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff f978 	bl	801013c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	3318      	adds	r3, #24
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7ff f973 	bl	801013c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	3354      	adds	r3, #84	; 0x54
 8010e80:	2260      	movs	r2, #96	; 0x60
 8010e82:	2100      	movs	r1, #0
 8010e84:	4618      	mov	r0, r3
 8010e86:	f002 fe52 	bl	8013b2e <memset>
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	4a0c      	ldr	r2, [pc, #48]	; (8010ec0 <prvInitialiseNewTask+0x140>)
 8010e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8010e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e92:	4a0c      	ldr	r2, [pc, #48]	; (8010ec4 <prvInitialiseNewTask+0x144>)
 8010e94:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e98:	4a0b      	ldr	r2, [pc, #44]	; (8010ec8 <prvInitialiseNewTask+0x148>)
 8010e9a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	68f9      	ldr	r1, [r7, #12]
 8010ea0:	69b8      	ldr	r0, [r7, #24]
 8010ea2:	f001 f941 	bl	8012128 <pxPortInitialiseStack>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eaa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d002      	beq.n	8010eb8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eb8:	bf00      	nop
 8010eba:	3720      	adds	r7, #32
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	08016df8 	.word	0x08016df8
 8010ec4:	08016e18 	.word	0x08016e18
 8010ec8:	08016dd8 	.word	0x08016dd8

08010ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ed4:	f001 fa56 	bl	8012384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ed8:	4b2d      	ldr	r3, [pc, #180]	; (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3301      	adds	r3, #1
 8010ede:	4a2c      	ldr	r2, [pc, #176]	; (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ee2:	4b2c      	ldr	r3, [pc, #176]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d109      	bne.n	8010efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010eea:	4a2a      	ldr	r2, [pc, #168]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ef0:	4b27      	ldr	r3, [pc, #156]	; (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d110      	bne.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ef8:	f000 fc26 	bl	8011748 <prvInitialiseTaskLists>
 8010efc:	e00d      	b.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010efe:	4b26      	ldr	r3, [pc, #152]	; (8010f98 <prvAddNewTaskToReadyList+0xcc>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d109      	bne.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f06:	4b23      	ldr	r3, [pc, #140]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d802      	bhi.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f14:	4a1f      	ldr	r2, [pc, #124]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f1a:	4b20      	ldr	r3, [pc, #128]	; (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4a1e      	ldr	r2, [pc, #120]	; (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f24:	4b1d      	ldr	r3, [pc, #116]	; (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f30:	4b1b      	ldr	r3, [pc, #108]	; (8010fa0 <prvAddNewTaskToReadyList+0xd4>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d903      	bls.n	8010f40 <prvAddNewTaskToReadyList+0x74>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f3c:	4a18      	ldr	r2, [pc, #96]	; (8010fa0 <prvAddNewTaskToReadyList+0xd4>)
 8010f3e:	6013      	str	r3, [r2, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f44:	4613      	mov	r3, r2
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	4a15      	ldr	r2, [pc, #84]	; (8010fa4 <prvAddNewTaskToReadyList+0xd8>)
 8010f4e:	441a      	add	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	3304      	adds	r3, #4
 8010f54:	4619      	mov	r1, r3
 8010f56:	4610      	mov	r0, r2
 8010f58:	f7ff f8fd 	bl	8010156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f5c:	f001 fa42 	bl	80123e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f60:	4b0d      	ldr	r3, [pc, #52]	; (8010f98 <prvAddNewTaskToReadyList+0xcc>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00e      	beq.n	8010f86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f68:	4b0a      	ldr	r3, [pc, #40]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d207      	bcs.n	8010f86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f76:	4b0c      	ldr	r3, [pc, #48]	; (8010fa8 <prvAddNewTaskToReadyList+0xdc>)
 8010f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7c:	601a      	str	r2, [r3, #0]
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f86:	bf00      	nop
 8010f88:	3708      	adds	r7, #8
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20004bf0 	.word	0x20004bf0
 8010f94:	2000471c 	.word	0x2000471c
 8010f98:	20004bfc 	.word	0x20004bfc
 8010f9c:	20004c0c 	.word	0x20004c0c
 8010fa0:	20004bf8 	.word	0x20004bf8
 8010fa4:	20004720 	.word	0x20004720
 8010fa8:	e000ed04 	.word	0xe000ed04

08010fac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d017      	beq.n	8010fee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fbe:	4b13      	ldr	r3, [pc, #76]	; (801100c <vTaskDelay+0x60>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d00a      	beq.n	8010fdc <vTaskDelay+0x30>
	__asm volatile
 8010fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fca:	f383 8811 	msr	BASEPRI, r3
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	f3bf 8f4f 	dsb	sy
 8010fd6:	60bb      	str	r3, [r7, #8]
}
 8010fd8:	bf00      	nop
 8010fda:	e7fe      	b.n	8010fda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010fdc:	f000 f88a 	bl	80110f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 fcfe 	bl	80119e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fe8:	f000 f892 	bl	8011110 <xTaskResumeAll>
 8010fec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d107      	bne.n	8011004 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010ff4:	4b06      	ldr	r3, [pc, #24]	; (8011010 <vTaskDelay+0x64>)
 8010ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ffa:	601a      	str	r2, [r3, #0]
 8010ffc:	f3bf 8f4f 	dsb	sy
 8011000:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011004:	bf00      	nop
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	20004c18 	.word	0x20004c18
 8011010:	e000ed04 	.word	0xe000ed04

08011014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b08a      	sub	sp, #40	; 0x28
 8011018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801101a:	2300      	movs	r3, #0
 801101c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801101e:	2300      	movs	r3, #0
 8011020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011022:	463a      	mov	r2, r7
 8011024:	1d39      	adds	r1, r7, #4
 8011026:	f107 0308 	add.w	r3, r7, #8
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff f832 	bl	8010094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	68ba      	ldr	r2, [r7, #8]
 8011036:	9202      	str	r2, [sp, #8]
 8011038:	9301      	str	r3, [sp, #4]
 801103a:	2300      	movs	r3, #0
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	2300      	movs	r3, #0
 8011040:	460a      	mov	r2, r1
 8011042:	4924      	ldr	r1, [pc, #144]	; (80110d4 <vTaskStartScheduler+0xc0>)
 8011044:	4824      	ldr	r0, [pc, #144]	; (80110d8 <vTaskStartScheduler+0xc4>)
 8011046:	f7ff fdf9 	bl	8010c3c <xTaskCreateStatic>
 801104a:	4603      	mov	r3, r0
 801104c:	4a23      	ldr	r2, [pc, #140]	; (80110dc <vTaskStartScheduler+0xc8>)
 801104e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011050:	4b22      	ldr	r3, [pc, #136]	; (80110dc <vTaskStartScheduler+0xc8>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011058:	2301      	movs	r3, #1
 801105a:	617b      	str	r3, [r7, #20]
 801105c:	e001      	b.n	8011062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801105e:	2300      	movs	r3, #0
 8011060:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2b01      	cmp	r3, #1
 8011066:	d102      	bne.n	801106e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011068:	f000 fd10 	bl	8011a8c <xTimerCreateTimerTask>
 801106c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d11b      	bne.n	80110ac <vTaskStartScheduler+0x98>
	__asm volatile
 8011074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011078:	f383 8811 	msr	BASEPRI, r3
 801107c:	f3bf 8f6f 	isb	sy
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	613b      	str	r3, [r7, #16]
}
 8011086:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011088:	4b15      	ldr	r3, [pc, #84]	; (80110e0 <vTaskStartScheduler+0xcc>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	3354      	adds	r3, #84	; 0x54
 801108e:	4a15      	ldr	r2, [pc, #84]	; (80110e4 <vTaskStartScheduler+0xd0>)
 8011090:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011092:	4b15      	ldr	r3, [pc, #84]	; (80110e8 <vTaskStartScheduler+0xd4>)
 8011094:	f04f 32ff 	mov.w	r2, #4294967295
 8011098:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801109a:	4b14      	ldr	r3, [pc, #80]	; (80110ec <vTaskStartScheduler+0xd8>)
 801109c:	2201      	movs	r2, #1
 801109e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110a0:	4b13      	ldr	r3, [pc, #76]	; (80110f0 <vTaskStartScheduler+0xdc>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110a6:	f001 f8cb 	bl	8012240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110aa:	e00e      	b.n	80110ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b2:	d10a      	bne.n	80110ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80110b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b8:	f383 8811 	msr	BASEPRI, r3
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	60fb      	str	r3, [r7, #12]
}
 80110c6:	bf00      	nop
 80110c8:	e7fe      	b.n	80110c8 <vTaskStartScheduler+0xb4>
}
 80110ca:	bf00      	nop
 80110cc:	3718      	adds	r7, #24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	080169b4 	.word	0x080169b4
 80110d8:	08011719 	.word	0x08011719
 80110dc:	20004c14 	.word	0x20004c14
 80110e0:	2000471c 	.word	0x2000471c
 80110e4:	2000039c 	.word	0x2000039c
 80110e8:	20004c10 	.word	0x20004c10
 80110ec:	20004bfc 	.word	0x20004bfc
 80110f0:	20004bf4 	.word	0x20004bf4

080110f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110f4:	b480      	push	{r7}
 80110f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110f8:	4b04      	ldr	r3, [pc, #16]	; (801110c <vTaskSuspendAll+0x18>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	3301      	adds	r3, #1
 80110fe:	4a03      	ldr	r2, [pc, #12]	; (801110c <vTaskSuspendAll+0x18>)
 8011100:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011102:	bf00      	nop
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr
 801110c:	20004c18 	.word	0x20004c18

08011110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011116:	2300      	movs	r3, #0
 8011118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801111a:	2300      	movs	r3, #0
 801111c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801111e:	4b42      	ldr	r3, [pc, #264]	; (8011228 <xTaskResumeAll+0x118>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10a      	bne.n	801113c <xTaskResumeAll+0x2c>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	603b      	str	r3, [r7, #0]
}
 8011138:	bf00      	nop
 801113a:	e7fe      	b.n	801113a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801113c:	f001 f922 	bl	8012384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011140:	4b39      	ldr	r3, [pc, #228]	; (8011228 <xTaskResumeAll+0x118>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	3b01      	subs	r3, #1
 8011146:	4a38      	ldr	r2, [pc, #224]	; (8011228 <xTaskResumeAll+0x118>)
 8011148:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801114a:	4b37      	ldr	r3, [pc, #220]	; (8011228 <xTaskResumeAll+0x118>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d162      	bne.n	8011218 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011152:	4b36      	ldr	r3, [pc, #216]	; (801122c <xTaskResumeAll+0x11c>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d05e      	beq.n	8011218 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801115a:	e02f      	b.n	80111bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801115c:	4b34      	ldr	r3, [pc, #208]	; (8011230 <xTaskResumeAll+0x120>)
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	3318      	adds	r3, #24
 8011168:	4618      	mov	r0, r3
 801116a:	f7ff f851 	bl	8010210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3304      	adds	r3, #4
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff f84c 	bl	8010210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801117c:	4b2d      	ldr	r3, [pc, #180]	; (8011234 <xTaskResumeAll+0x124>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	429a      	cmp	r2, r3
 8011182:	d903      	bls.n	801118c <xTaskResumeAll+0x7c>
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011188:	4a2a      	ldr	r2, [pc, #168]	; (8011234 <xTaskResumeAll+0x124>)
 801118a:	6013      	str	r3, [r2, #0]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011190:	4613      	mov	r3, r2
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	4413      	add	r3, r2
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	4a27      	ldr	r2, [pc, #156]	; (8011238 <xTaskResumeAll+0x128>)
 801119a:	441a      	add	r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	3304      	adds	r3, #4
 80111a0:	4619      	mov	r1, r3
 80111a2:	4610      	mov	r0, r2
 80111a4:	f7fe ffd7 	bl	8010156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ac:	4b23      	ldr	r3, [pc, #140]	; (801123c <xTaskResumeAll+0x12c>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d302      	bcc.n	80111bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111b6:	4b22      	ldr	r3, [pc, #136]	; (8011240 <xTaskResumeAll+0x130>)
 80111b8:	2201      	movs	r2, #1
 80111ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111bc:	4b1c      	ldr	r3, [pc, #112]	; (8011230 <xTaskResumeAll+0x120>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1cb      	bne.n	801115c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d001      	beq.n	80111ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111ca:	f000 fb5f 	bl	801188c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111ce:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <xTaskResumeAll+0x134>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d010      	beq.n	80111fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111da:	f000 f847 	bl	801126c <xTaskIncrementTick>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111e4:	4b16      	ldr	r3, [pc, #88]	; (8011240 <xTaskResumeAll+0x130>)
 80111e6:	2201      	movs	r2, #1
 80111e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1f1      	bne.n	80111da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111f6:	4b13      	ldr	r3, [pc, #76]	; (8011244 <xTaskResumeAll+0x134>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111fc:	4b10      	ldr	r3, [pc, #64]	; (8011240 <xTaskResumeAll+0x130>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d009      	beq.n	8011218 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011204:	2301      	movs	r3, #1
 8011206:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011208:	4b0f      	ldr	r3, [pc, #60]	; (8011248 <xTaskResumeAll+0x138>)
 801120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011218:	f001 f8e4 	bl	80123e4 <vPortExitCritical>

	return xAlreadyYielded;
 801121c:	68bb      	ldr	r3, [r7, #8]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	20004c18 	.word	0x20004c18
 801122c:	20004bf0 	.word	0x20004bf0
 8011230:	20004bb0 	.word	0x20004bb0
 8011234:	20004bf8 	.word	0x20004bf8
 8011238:	20004720 	.word	0x20004720
 801123c:	2000471c 	.word	0x2000471c
 8011240:	20004c04 	.word	0x20004c04
 8011244:	20004c00 	.word	0x20004c00
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011252:	4b05      	ldr	r3, [pc, #20]	; (8011268 <xTaskGetTickCount+0x1c>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011258:	687b      	ldr	r3, [r7, #4]
}
 801125a:	4618      	mov	r0, r3
 801125c:	370c      	adds	r7, #12
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop
 8011268:	20004bf4 	.word	0x20004bf4

0801126c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b086      	sub	sp, #24
 8011270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011272:	2300      	movs	r3, #0
 8011274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011276:	4b4f      	ldr	r3, [pc, #316]	; (80113b4 <xTaskIncrementTick+0x148>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	f040 808f 	bne.w	801139e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011280:	4b4d      	ldr	r3, [pc, #308]	; (80113b8 <xTaskIncrementTick+0x14c>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	3301      	adds	r3, #1
 8011286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011288:	4a4b      	ldr	r2, [pc, #300]	; (80113b8 <xTaskIncrementTick+0x14c>)
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d120      	bne.n	80112d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011294:	4b49      	ldr	r3, [pc, #292]	; (80113bc <xTaskIncrementTick+0x150>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00a      	beq.n	80112b4 <xTaskIncrementTick+0x48>
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	f383 8811 	msr	BASEPRI, r3
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	f3bf 8f4f 	dsb	sy
 80112ae:	603b      	str	r3, [r7, #0]
}
 80112b0:	bf00      	nop
 80112b2:	e7fe      	b.n	80112b2 <xTaskIncrementTick+0x46>
 80112b4:	4b41      	ldr	r3, [pc, #260]	; (80113bc <xTaskIncrementTick+0x150>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	60fb      	str	r3, [r7, #12]
 80112ba:	4b41      	ldr	r3, [pc, #260]	; (80113c0 <xTaskIncrementTick+0x154>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	4a3f      	ldr	r2, [pc, #252]	; (80113bc <xTaskIncrementTick+0x150>)
 80112c0:	6013      	str	r3, [r2, #0]
 80112c2:	4a3f      	ldr	r2, [pc, #252]	; (80113c0 <xTaskIncrementTick+0x154>)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	4b3e      	ldr	r3, [pc, #248]	; (80113c4 <xTaskIncrementTick+0x158>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	3301      	adds	r3, #1
 80112ce:	4a3d      	ldr	r2, [pc, #244]	; (80113c4 <xTaskIncrementTick+0x158>)
 80112d0:	6013      	str	r3, [r2, #0]
 80112d2:	f000 fadb 	bl	801188c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112d6:	4b3c      	ldr	r3, [pc, #240]	; (80113c8 <xTaskIncrementTick+0x15c>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	693a      	ldr	r2, [r7, #16]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d349      	bcc.n	8011374 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112e0:	4b36      	ldr	r3, [pc, #216]	; (80113bc <xTaskIncrementTick+0x150>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d104      	bne.n	80112f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112ea:	4b37      	ldr	r3, [pc, #220]	; (80113c8 <xTaskIncrementTick+0x15c>)
 80112ec:	f04f 32ff 	mov.w	r2, #4294967295
 80112f0:	601a      	str	r2, [r3, #0]
					break;
 80112f2:	e03f      	b.n	8011374 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112f4:	4b31      	ldr	r3, [pc, #196]	; (80113bc <xTaskIncrementTick+0x150>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011304:	693a      	ldr	r2, [r7, #16]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	429a      	cmp	r2, r3
 801130a:	d203      	bcs.n	8011314 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801130c:	4a2e      	ldr	r2, [pc, #184]	; (80113c8 <xTaskIncrementTick+0x15c>)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011312:	e02f      	b.n	8011374 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	3304      	adds	r3, #4
 8011318:	4618      	mov	r0, r3
 801131a:	f7fe ff79 	bl	8010210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011322:	2b00      	cmp	r3, #0
 8011324:	d004      	beq.n	8011330 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	3318      	adds	r3, #24
 801132a:	4618      	mov	r0, r3
 801132c:	f7fe ff70 	bl	8010210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011334:	4b25      	ldr	r3, [pc, #148]	; (80113cc <xTaskIncrementTick+0x160>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	429a      	cmp	r2, r3
 801133a:	d903      	bls.n	8011344 <xTaskIncrementTick+0xd8>
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011340:	4a22      	ldr	r2, [pc, #136]	; (80113cc <xTaskIncrementTick+0x160>)
 8011342:	6013      	str	r3, [r2, #0]
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011348:	4613      	mov	r3, r2
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	4413      	add	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4a1f      	ldr	r2, [pc, #124]	; (80113d0 <xTaskIncrementTick+0x164>)
 8011352:	441a      	add	r2, r3
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	3304      	adds	r3, #4
 8011358:	4619      	mov	r1, r3
 801135a:	4610      	mov	r0, r2
 801135c:	f7fe fefb 	bl	8010156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011364:	4b1b      	ldr	r3, [pc, #108]	; (80113d4 <xTaskIncrementTick+0x168>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136a:	429a      	cmp	r2, r3
 801136c:	d3b8      	bcc.n	80112e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801136e:	2301      	movs	r3, #1
 8011370:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011372:	e7b5      	b.n	80112e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011374:	4b17      	ldr	r3, [pc, #92]	; (80113d4 <xTaskIncrementTick+0x168>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801137a:	4915      	ldr	r1, [pc, #84]	; (80113d0 <xTaskIncrementTick+0x164>)
 801137c:	4613      	mov	r3, r2
 801137e:	009b      	lsls	r3, r3, #2
 8011380:	4413      	add	r3, r2
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	440b      	add	r3, r1
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b01      	cmp	r3, #1
 801138a:	d901      	bls.n	8011390 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801138c:	2301      	movs	r3, #1
 801138e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011390:	4b11      	ldr	r3, [pc, #68]	; (80113d8 <xTaskIncrementTick+0x16c>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d007      	beq.n	80113a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011398:	2301      	movs	r3, #1
 801139a:	617b      	str	r3, [r7, #20]
 801139c:	e004      	b.n	80113a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801139e:	4b0f      	ldr	r3, [pc, #60]	; (80113dc <xTaskIncrementTick+0x170>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3301      	adds	r3, #1
 80113a4:	4a0d      	ldr	r2, [pc, #52]	; (80113dc <xTaskIncrementTick+0x170>)
 80113a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113a8:	697b      	ldr	r3, [r7, #20]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3718      	adds	r7, #24
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	20004c18 	.word	0x20004c18
 80113b8:	20004bf4 	.word	0x20004bf4
 80113bc:	20004ba8 	.word	0x20004ba8
 80113c0:	20004bac 	.word	0x20004bac
 80113c4:	20004c08 	.word	0x20004c08
 80113c8:	20004c10 	.word	0x20004c10
 80113cc:	20004bf8 	.word	0x20004bf8
 80113d0:	20004720 	.word	0x20004720
 80113d4:	2000471c 	.word	0x2000471c
 80113d8:	20004c04 	.word	0x20004c04
 80113dc:	20004c00 	.word	0x20004c00

080113e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113e0:	b480      	push	{r7}
 80113e2:	b085      	sub	sp, #20
 80113e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113e6:	4b2a      	ldr	r3, [pc, #168]	; (8011490 <vTaskSwitchContext+0xb0>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d003      	beq.n	80113f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113ee:	4b29      	ldr	r3, [pc, #164]	; (8011494 <vTaskSwitchContext+0xb4>)
 80113f0:	2201      	movs	r2, #1
 80113f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113f4:	e046      	b.n	8011484 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80113f6:	4b27      	ldr	r3, [pc, #156]	; (8011494 <vTaskSwitchContext+0xb4>)
 80113f8:	2200      	movs	r2, #0
 80113fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113fc:	4b26      	ldr	r3, [pc, #152]	; (8011498 <vTaskSwitchContext+0xb8>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	60fb      	str	r3, [r7, #12]
 8011402:	e010      	b.n	8011426 <vTaskSwitchContext+0x46>
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d10a      	bne.n	8011420 <vTaskSwitchContext+0x40>
	__asm volatile
 801140a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140e:	f383 8811 	msr	BASEPRI, r3
 8011412:	f3bf 8f6f 	isb	sy
 8011416:	f3bf 8f4f 	dsb	sy
 801141a:	607b      	str	r3, [r7, #4]
}
 801141c:	bf00      	nop
 801141e:	e7fe      	b.n	801141e <vTaskSwitchContext+0x3e>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	3b01      	subs	r3, #1
 8011424:	60fb      	str	r3, [r7, #12]
 8011426:	491d      	ldr	r1, [pc, #116]	; (801149c <vTaskSwitchContext+0xbc>)
 8011428:	68fa      	ldr	r2, [r7, #12]
 801142a:	4613      	mov	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	4413      	add	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	440b      	add	r3, r1
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0e4      	beq.n	8011404 <vTaskSwitchContext+0x24>
 801143a:	68fa      	ldr	r2, [r7, #12]
 801143c:	4613      	mov	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	4413      	add	r3, r2
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	4a15      	ldr	r2, [pc, #84]	; (801149c <vTaskSwitchContext+0xbc>)
 8011446:	4413      	add	r3, r2
 8011448:	60bb      	str	r3, [r7, #8]
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	685a      	ldr	r2, [r3, #4]
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	605a      	str	r2, [r3, #4]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	685a      	ldr	r2, [r3, #4]
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	3308      	adds	r3, #8
 801145c:	429a      	cmp	r2, r3
 801145e:	d104      	bne.n	801146a <vTaskSwitchContext+0x8a>
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	685a      	ldr	r2, [r3, #4]
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	605a      	str	r2, [r3, #4]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	4a0b      	ldr	r2, [pc, #44]	; (80114a0 <vTaskSwitchContext+0xc0>)
 8011472:	6013      	str	r3, [r2, #0]
 8011474:	4a08      	ldr	r2, [pc, #32]	; (8011498 <vTaskSwitchContext+0xb8>)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801147a:	4b09      	ldr	r3, [pc, #36]	; (80114a0 <vTaskSwitchContext+0xc0>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	3354      	adds	r3, #84	; 0x54
 8011480:	4a08      	ldr	r2, [pc, #32]	; (80114a4 <vTaskSwitchContext+0xc4>)
 8011482:	6013      	str	r3, [r2, #0]
}
 8011484:	bf00      	nop
 8011486:	3714      	adds	r7, #20
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr
 8011490:	20004c18 	.word	0x20004c18
 8011494:	20004c04 	.word	0x20004c04
 8011498:	20004bf8 	.word	0x20004bf8
 801149c:	20004720 	.word	0x20004720
 80114a0:	2000471c 	.word	0x2000471c
 80114a4:	2000039c 	.word	0x2000039c

080114a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d10a      	bne.n	80114ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80114b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114bc:	f383 8811 	msr	BASEPRI, r3
 80114c0:	f3bf 8f6f 	isb	sy
 80114c4:	f3bf 8f4f 	dsb	sy
 80114c8:	60fb      	str	r3, [r7, #12]
}
 80114ca:	bf00      	nop
 80114cc:	e7fe      	b.n	80114cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114ce:	4b07      	ldr	r3, [pc, #28]	; (80114ec <vTaskPlaceOnEventList+0x44>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	3318      	adds	r3, #24
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7fe fe61 	bl	801019e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114dc:	2101      	movs	r1, #1
 80114de:	6838      	ldr	r0, [r7, #0]
 80114e0:	f000 fa80 	bl	80119e4 <prvAddCurrentTaskToDelayedList>
}
 80114e4:	bf00      	nop
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	2000471c 	.word	0x2000471c

080114f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	617b      	str	r3, [r7, #20]
}
 8011514:	bf00      	nop
 8011516:	e7fe      	b.n	8011516 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011518:	4b0a      	ldr	r3, [pc, #40]	; (8011544 <vTaskPlaceOnEventListRestricted+0x54>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3318      	adds	r3, #24
 801151e:	4619      	mov	r1, r3
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7fe fe18 	bl	8010156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d002      	beq.n	8011532 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801152c:	f04f 33ff 	mov.w	r3, #4294967295
 8011530:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	68b8      	ldr	r0, [r7, #8]
 8011536:	f000 fa55 	bl	80119e4 <prvAddCurrentTaskToDelayedList>
	}
 801153a:	bf00      	nop
 801153c:	3718      	adds	r7, #24
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	2000471c 	.word	0x2000471c

08011548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10a      	bne.n	8011574 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	60fb      	str	r3, [r7, #12]
}
 8011570:	bf00      	nop
 8011572:	e7fe      	b.n	8011572 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	3318      	adds	r3, #24
 8011578:	4618      	mov	r0, r3
 801157a:	f7fe fe49 	bl	8010210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801157e:	4b1e      	ldr	r3, [pc, #120]	; (80115f8 <xTaskRemoveFromEventList+0xb0>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d11d      	bne.n	80115c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	3304      	adds	r3, #4
 801158a:	4618      	mov	r0, r3
 801158c:	f7fe fe40 	bl	8010210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011594:	4b19      	ldr	r3, [pc, #100]	; (80115fc <xTaskRemoveFromEventList+0xb4>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	429a      	cmp	r2, r3
 801159a:	d903      	bls.n	80115a4 <xTaskRemoveFromEventList+0x5c>
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a0:	4a16      	ldr	r2, [pc, #88]	; (80115fc <xTaskRemoveFromEventList+0xb4>)
 80115a2:	6013      	str	r3, [r2, #0]
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a8:	4613      	mov	r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4a13      	ldr	r2, [pc, #76]	; (8011600 <xTaskRemoveFromEventList+0xb8>)
 80115b2:	441a      	add	r2, r3
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	3304      	adds	r3, #4
 80115b8:	4619      	mov	r1, r3
 80115ba:	4610      	mov	r0, r2
 80115bc:	f7fe fdcb 	bl	8010156 <vListInsertEnd>
 80115c0:	e005      	b.n	80115ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	3318      	adds	r3, #24
 80115c6:	4619      	mov	r1, r3
 80115c8:	480e      	ldr	r0, [pc, #56]	; (8011604 <xTaskRemoveFromEventList+0xbc>)
 80115ca:	f7fe fdc4 	bl	8010156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d2:	4b0d      	ldr	r3, [pc, #52]	; (8011608 <xTaskRemoveFromEventList+0xc0>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d8:	429a      	cmp	r2, r3
 80115da:	d905      	bls.n	80115e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80115dc:	2301      	movs	r3, #1
 80115de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80115e0:	4b0a      	ldr	r3, [pc, #40]	; (801160c <xTaskRemoveFromEventList+0xc4>)
 80115e2:	2201      	movs	r2, #1
 80115e4:	601a      	str	r2, [r3, #0]
 80115e6:	e001      	b.n	80115ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80115e8:	2300      	movs	r3, #0
 80115ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115ec:	697b      	ldr	r3, [r7, #20]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	20004c18 	.word	0x20004c18
 80115fc:	20004bf8 	.word	0x20004bf8
 8011600:	20004720 	.word	0x20004720
 8011604:	20004bb0 	.word	0x20004bb0
 8011608:	2000471c 	.word	0x2000471c
 801160c:	20004c04 	.word	0x20004c04

08011610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011610:	b480      	push	{r7}
 8011612:	b083      	sub	sp, #12
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011618:	4b06      	ldr	r3, [pc, #24]	; (8011634 <vTaskInternalSetTimeOutState+0x24>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011620:	4b05      	ldr	r3, [pc, #20]	; (8011638 <vTaskInternalSetTimeOutState+0x28>)
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	605a      	str	r2, [r3, #4]
}
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr
 8011634:	20004c08 	.word	0x20004c08
 8011638:	20004bf4 	.word	0x20004bf4

0801163c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d10a      	bne.n	8011662 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	613b      	str	r3, [r7, #16]
}
 801165e:	bf00      	nop
 8011660:	e7fe      	b.n	8011660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d10a      	bne.n	801167e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166c:	f383 8811 	msr	BASEPRI, r3
 8011670:	f3bf 8f6f 	isb	sy
 8011674:	f3bf 8f4f 	dsb	sy
 8011678:	60fb      	str	r3, [r7, #12]
}
 801167a:	bf00      	nop
 801167c:	e7fe      	b.n	801167c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801167e:	f000 fe81 	bl	8012384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011682:	4b1d      	ldr	r3, [pc, #116]	; (80116f8 <xTaskCheckForTimeOut+0xbc>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	69ba      	ldr	r2, [r7, #24]
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801169a:	d102      	bne.n	80116a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801169c:	2300      	movs	r3, #0
 801169e:	61fb      	str	r3, [r7, #28]
 80116a0:	e023      	b.n	80116ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	4b15      	ldr	r3, [pc, #84]	; (80116fc <xTaskCheckForTimeOut+0xc0>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d007      	beq.n	80116be <xTaskCheckForTimeOut+0x82>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	69ba      	ldr	r2, [r7, #24]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d302      	bcc.n	80116be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116b8:	2301      	movs	r3, #1
 80116ba:	61fb      	str	r3, [r7, #28]
 80116bc:	e015      	b.n	80116ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	697a      	ldr	r2, [r7, #20]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d20b      	bcs.n	80116e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	1ad2      	subs	r2, r2, r3
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7ff ff9b 	bl	8011610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80116da:	2300      	movs	r3, #0
 80116dc:	61fb      	str	r3, [r7, #28]
 80116de:	e004      	b.n	80116ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	2200      	movs	r2, #0
 80116e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80116e6:	2301      	movs	r3, #1
 80116e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116ea:	f000 fe7b 	bl	80123e4 <vPortExitCritical>

	return xReturn;
 80116ee:	69fb      	ldr	r3, [r7, #28]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	20004bf4 	.word	0x20004bf4
 80116fc:	20004c08 	.word	0x20004c08

08011700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011700:	b480      	push	{r7}
 8011702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011704:	4b03      	ldr	r3, [pc, #12]	; (8011714 <vTaskMissedYield+0x14>)
 8011706:	2201      	movs	r2, #1
 8011708:	601a      	str	r2, [r3, #0]
}
 801170a:	bf00      	nop
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr
 8011714:	20004c04 	.word	0x20004c04

08011718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011720:	f000 f852 	bl	80117c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011724:	4b06      	ldr	r3, [pc, #24]	; (8011740 <prvIdleTask+0x28>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2b01      	cmp	r3, #1
 801172a:	d9f9      	bls.n	8011720 <prvIdleTask+0x8>
			{
				taskYIELD();
 801172c:	4b05      	ldr	r3, [pc, #20]	; (8011744 <prvIdleTask+0x2c>)
 801172e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011732:	601a      	str	r2, [r3, #0]
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801173c:	e7f0      	b.n	8011720 <prvIdleTask+0x8>
 801173e:	bf00      	nop
 8011740:	20004720 	.word	0x20004720
 8011744:	e000ed04 	.word	0xe000ed04

08011748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801174e:	2300      	movs	r3, #0
 8011750:	607b      	str	r3, [r7, #4]
 8011752:	e00c      	b.n	801176e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	4613      	mov	r3, r2
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4a12      	ldr	r2, [pc, #72]	; (80117a8 <prvInitialiseTaskLists+0x60>)
 8011760:	4413      	add	r3, r2
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe fcca 	bl	80100fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	3301      	adds	r3, #1
 801176c:	607b      	str	r3, [r7, #4]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b37      	cmp	r3, #55	; 0x37
 8011772:	d9ef      	bls.n	8011754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011774:	480d      	ldr	r0, [pc, #52]	; (80117ac <prvInitialiseTaskLists+0x64>)
 8011776:	f7fe fcc1 	bl	80100fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801177a:	480d      	ldr	r0, [pc, #52]	; (80117b0 <prvInitialiseTaskLists+0x68>)
 801177c:	f7fe fcbe 	bl	80100fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011780:	480c      	ldr	r0, [pc, #48]	; (80117b4 <prvInitialiseTaskLists+0x6c>)
 8011782:	f7fe fcbb 	bl	80100fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011786:	480c      	ldr	r0, [pc, #48]	; (80117b8 <prvInitialiseTaskLists+0x70>)
 8011788:	f7fe fcb8 	bl	80100fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801178c:	480b      	ldr	r0, [pc, #44]	; (80117bc <prvInitialiseTaskLists+0x74>)
 801178e:	f7fe fcb5 	bl	80100fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011792:	4b0b      	ldr	r3, [pc, #44]	; (80117c0 <prvInitialiseTaskLists+0x78>)
 8011794:	4a05      	ldr	r2, [pc, #20]	; (80117ac <prvInitialiseTaskLists+0x64>)
 8011796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011798:	4b0a      	ldr	r3, [pc, #40]	; (80117c4 <prvInitialiseTaskLists+0x7c>)
 801179a:	4a05      	ldr	r2, [pc, #20]	; (80117b0 <prvInitialiseTaskLists+0x68>)
 801179c:	601a      	str	r2, [r3, #0]
}
 801179e:	bf00      	nop
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	20004720 	.word	0x20004720
 80117ac:	20004b80 	.word	0x20004b80
 80117b0:	20004b94 	.word	0x20004b94
 80117b4:	20004bb0 	.word	0x20004bb0
 80117b8:	20004bc4 	.word	0x20004bc4
 80117bc:	20004bdc 	.word	0x20004bdc
 80117c0:	20004ba8 	.word	0x20004ba8
 80117c4:	20004bac 	.word	0x20004bac

080117c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117ce:	e019      	b.n	8011804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80117d0:	f000 fdd8 	bl	8012384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117d4:	4b10      	ldr	r3, [pc, #64]	; (8011818 <prvCheckTasksWaitingTermination+0x50>)
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	3304      	adds	r3, #4
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7fe fd15 	bl	8010210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117e6:	4b0d      	ldr	r3, [pc, #52]	; (801181c <prvCheckTasksWaitingTermination+0x54>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	3b01      	subs	r3, #1
 80117ec:	4a0b      	ldr	r2, [pc, #44]	; (801181c <prvCheckTasksWaitingTermination+0x54>)
 80117ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117f0:	4b0b      	ldr	r3, [pc, #44]	; (8011820 <prvCheckTasksWaitingTermination+0x58>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	3b01      	subs	r3, #1
 80117f6:	4a0a      	ldr	r2, [pc, #40]	; (8011820 <prvCheckTasksWaitingTermination+0x58>)
 80117f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117fa:	f000 fdf3 	bl	80123e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 f810 	bl	8011824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011804:	4b06      	ldr	r3, [pc, #24]	; (8011820 <prvCheckTasksWaitingTermination+0x58>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1e1      	bne.n	80117d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801180c:	bf00      	nop
 801180e:	bf00      	nop
 8011810:	3708      	adds	r7, #8
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	20004bc4 	.word	0x20004bc4
 801181c:	20004bf0 	.word	0x20004bf0
 8011820:	20004bd8 	.word	0x20004bd8

08011824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011824:	b580      	push	{r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	3354      	adds	r3, #84	; 0x54
 8011830:	4618      	mov	r0, r3
 8011832:	f002 fe91 	bl	8014558 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801183c:	2b00      	cmp	r3, #0
 801183e:	d108      	bne.n	8011852 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011844:	4618      	mov	r0, r3
 8011846:	f000 ff8b 	bl	8012760 <vPortFree>
				vPortFree( pxTCB );
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 ff88 	bl	8012760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011850:	e018      	b.n	8011884 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011858:	2b01      	cmp	r3, #1
 801185a:	d103      	bne.n	8011864 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f000 ff7f 	bl	8012760 <vPortFree>
	}
 8011862:	e00f      	b.n	8011884 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801186a:	2b02      	cmp	r3, #2
 801186c:	d00a      	beq.n	8011884 <prvDeleteTCB+0x60>
	__asm volatile
 801186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011872:	f383 8811 	msr	BASEPRI, r3
 8011876:	f3bf 8f6f 	isb	sy
 801187a:	f3bf 8f4f 	dsb	sy
 801187e:	60fb      	str	r3, [r7, #12]
}
 8011880:	bf00      	nop
 8011882:	e7fe      	b.n	8011882 <prvDeleteTCB+0x5e>
	}
 8011884:	bf00      	nop
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011892:	4b0c      	ldr	r3, [pc, #48]	; (80118c4 <prvResetNextTaskUnblockTime+0x38>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d104      	bne.n	80118a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801189c:	4b0a      	ldr	r3, [pc, #40]	; (80118c8 <prvResetNextTaskUnblockTime+0x3c>)
 801189e:	f04f 32ff 	mov.w	r2, #4294967295
 80118a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118a4:	e008      	b.n	80118b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118a6:	4b07      	ldr	r3, [pc, #28]	; (80118c4 <prvResetNextTaskUnblockTime+0x38>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	4a04      	ldr	r2, [pc, #16]	; (80118c8 <prvResetNextTaskUnblockTime+0x3c>)
 80118b6:	6013      	str	r3, [r2, #0]
}
 80118b8:	bf00      	nop
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	20004ba8 	.word	0x20004ba8
 80118c8:	20004c10 	.word	0x20004c10

080118cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80118d2:	4b0b      	ldr	r3, [pc, #44]	; (8011900 <xTaskGetSchedulerState+0x34>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d102      	bne.n	80118e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80118da:	2301      	movs	r3, #1
 80118dc:	607b      	str	r3, [r7, #4]
 80118de:	e008      	b.n	80118f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118e0:	4b08      	ldr	r3, [pc, #32]	; (8011904 <xTaskGetSchedulerState+0x38>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d102      	bne.n	80118ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118e8:	2302      	movs	r3, #2
 80118ea:	607b      	str	r3, [r7, #4]
 80118ec:	e001      	b.n	80118f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118ee:	2300      	movs	r3, #0
 80118f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118f2:	687b      	ldr	r3, [r7, #4]
	}
 80118f4:	4618      	mov	r0, r3
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	20004bfc 	.word	0x20004bfc
 8011904:	20004c18 	.word	0x20004c18

08011908 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011914:	2300      	movs	r3, #0
 8011916:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d056      	beq.n	80119cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801191e:	4b2e      	ldr	r3, [pc, #184]	; (80119d8 <xTaskPriorityDisinherit+0xd0>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	693a      	ldr	r2, [r7, #16]
 8011924:	429a      	cmp	r2, r3
 8011926:	d00a      	beq.n	801193e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801192c:	f383 8811 	msr	BASEPRI, r3
 8011930:	f3bf 8f6f 	isb	sy
 8011934:	f3bf 8f4f 	dsb	sy
 8011938:	60fb      	str	r3, [r7, #12]
}
 801193a:	bf00      	nop
 801193c:	e7fe      	b.n	801193c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011942:	2b00      	cmp	r3, #0
 8011944:	d10a      	bne.n	801195c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	60bb      	str	r3, [r7, #8]
}
 8011958:	bf00      	nop
 801195a:	e7fe      	b.n	801195a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011960:	1e5a      	subs	r2, r3, #1
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801196e:	429a      	cmp	r2, r3
 8011970:	d02c      	beq.n	80119cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011976:	2b00      	cmp	r3, #0
 8011978:	d128      	bne.n	80119cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	3304      	adds	r3, #4
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe fc46 	bl	8010210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011990:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199c:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <xTaskPriorityDisinherit+0xd4>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d903      	bls.n	80119ac <xTaskPriorityDisinherit+0xa4>
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a8:	4a0c      	ldr	r2, [pc, #48]	; (80119dc <xTaskPriorityDisinherit+0xd4>)
 80119aa:	6013      	str	r3, [r2, #0]
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b0:	4613      	mov	r3, r2
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4413      	add	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4a09      	ldr	r2, [pc, #36]	; (80119e0 <xTaskPriorityDisinherit+0xd8>)
 80119ba:	441a      	add	r2, r3
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	3304      	adds	r3, #4
 80119c0:	4619      	mov	r1, r3
 80119c2:	4610      	mov	r0, r2
 80119c4:	f7fe fbc7 	bl	8010156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80119c8:	2301      	movs	r3, #1
 80119ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119cc:	697b      	ldr	r3, [r7, #20]
	}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	2000471c 	.word	0x2000471c
 80119dc:	20004bf8 	.word	0x20004bf8
 80119e0:	20004720 	.word	0x20004720

080119e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80119ee:	4b21      	ldr	r3, [pc, #132]	; (8011a74 <prvAddCurrentTaskToDelayedList+0x90>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119f4:	4b20      	ldr	r3, [pc, #128]	; (8011a78 <prvAddCurrentTaskToDelayedList+0x94>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	3304      	adds	r3, #4
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fe fc08 	bl	8010210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a06:	d10a      	bne.n	8011a1e <prvAddCurrentTaskToDelayedList+0x3a>
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d007      	beq.n	8011a1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a0e:	4b1a      	ldr	r3, [pc, #104]	; (8011a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3304      	adds	r3, #4
 8011a14:	4619      	mov	r1, r3
 8011a16:	4819      	ldr	r0, [pc, #100]	; (8011a7c <prvAddCurrentTaskToDelayedList+0x98>)
 8011a18:	f7fe fb9d 	bl	8010156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a1c:	e026      	b.n	8011a6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4413      	add	r3, r2
 8011a24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a26:	4b14      	ldr	r3, [pc, #80]	; (8011a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	68ba      	ldr	r2, [r7, #8]
 8011a2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a2e:	68ba      	ldr	r2, [r7, #8]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d209      	bcs.n	8011a4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a36:	4b12      	ldr	r3, [pc, #72]	; (8011a80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a38:	681a      	ldr	r2, [r3, #0]
 8011a3a:	4b0f      	ldr	r3, [pc, #60]	; (8011a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	3304      	adds	r3, #4
 8011a40:	4619      	mov	r1, r3
 8011a42:	4610      	mov	r0, r2
 8011a44:	f7fe fbab 	bl	801019e <vListInsert>
}
 8011a48:	e010      	b.n	8011a6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a4a:	4b0e      	ldr	r3, [pc, #56]	; (8011a84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	4b0a      	ldr	r3, [pc, #40]	; (8011a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	3304      	adds	r3, #4
 8011a54:	4619      	mov	r1, r3
 8011a56:	4610      	mov	r0, r2
 8011a58:	f7fe fba1 	bl	801019e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	68ba      	ldr	r2, [r7, #8]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d202      	bcs.n	8011a6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011a66:	4a08      	ldr	r2, [pc, #32]	; (8011a88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	6013      	str	r3, [r2, #0]
}
 8011a6c:	bf00      	nop
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	20004bf4 	.word	0x20004bf4
 8011a78:	2000471c 	.word	0x2000471c
 8011a7c:	20004bdc 	.word	0x20004bdc
 8011a80:	20004bac 	.word	0x20004bac
 8011a84:	20004ba8 	.word	0x20004ba8
 8011a88:	20004c10 	.word	0x20004c10

08011a8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011a92:	2300      	movs	r3, #0
 8011a94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011a96:	f000 fb07 	bl	80120a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011a9a:	4b1c      	ldr	r3, [pc, #112]	; (8011b0c <xTimerCreateTimerTask+0x80>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d021      	beq.n	8011ae6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011aaa:	1d3a      	adds	r2, r7, #4
 8011aac:	f107 0108 	add.w	r1, r7, #8
 8011ab0:	f107 030c 	add.w	r3, r7, #12
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fe fb07 	bl	80100c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011aba:	6879      	ldr	r1, [r7, #4]
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	9202      	str	r2, [sp, #8]
 8011ac2:	9301      	str	r3, [sp, #4]
 8011ac4:	2302      	movs	r3, #2
 8011ac6:	9300      	str	r3, [sp, #0]
 8011ac8:	2300      	movs	r3, #0
 8011aca:	460a      	mov	r2, r1
 8011acc:	4910      	ldr	r1, [pc, #64]	; (8011b10 <xTimerCreateTimerTask+0x84>)
 8011ace:	4811      	ldr	r0, [pc, #68]	; (8011b14 <xTimerCreateTimerTask+0x88>)
 8011ad0:	f7ff f8b4 	bl	8010c3c <xTaskCreateStatic>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	4a10      	ldr	r2, [pc, #64]	; (8011b18 <xTimerCreateTimerTask+0x8c>)
 8011ad8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011ada:	4b0f      	ldr	r3, [pc, #60]	; (8011b18 <xTimerCreateTimerTask+0x8c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d001      	beq.n	8011ae6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d10a      	bne.n	8011b02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af0:	f383 8811 	msr	BASEPRI, r3
 8011af4:	f3bf 8f6f 	isb	sy
 8011af8:	f3bf 8f4f 	dsb	sy
 8011afc:	613b      	str	r3, [r7, #16]
}
 8011afe:	bf00      	nop
 8011b00:	e7fe      	b.n	8011b00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011b02:	697b      	ldr	r3, [r7, #20]
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	20004c4c 	.word	0x20004c4c
 8011b10:	080169bc 	.word	0x080169bc
 8011b14:	08011c51 	.word	0x08011c51
 8011b18:	20004c50 	.word	0x20004c50

08011b1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b08a      	sub	sp, #40	; 0x28
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
 8011b28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10a      	bne.n	8011b4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	623b      	str	r3, [r7, #32]
}
 8011b46:	bf00      	nop
 8011b48:	e7fe      	b.n	8011b48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011b4a:	4b1a      	ldr	r3, [pc, #104]	; (8011bb4 <xTimerGenericCommand+0x98>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d02a      	beq.n	8011ba8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	2b05      	cmp	r3, #5
 8011b62:	dc18      	bgt.n	8011b96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011b64:	f7ff feb2 	bl	80118cc <xTaskGetSchedulerState>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b02      	cmp	r3, #2
 8011b6c:	d109      	bne.n	8011b82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011b6e:	4b11      	ldr	r3, [pc, #68]	; (8011bb4 <xTimerGenericCommand+0x98>)
 8011b70:	6818      	ldr	r0, [r3, #0]
 8011b72:	f107 0110 	add.w	r1, r7, #16
 8011b76:	2300      	movs	r3, #0
 8011b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b7a:	f7fe fc77 	bl	801046c <xQueueGenericSend>
 8011b7e:	6278      	str	r0, [r7, #36]	; 0x24
 8011b80:	e012      	b.n	8011ba8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011b82:	4b0c      	ldr	r3, [pc, #48]	; (8011bb4 <xTimerGenericCommand+0x98>)
 8011b84:	6818      	ldr	r0, [r3, #0]
 8011b86:	f107 0110 	add.w	r1, r7, #16
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	f7fe fc6d 	bl	801046c <xQueueGenericSend>
 8011b92:	6278      	str	r0, [r7, #36]	; 0x24
 8011b94:	e008      	b.n	8011ba8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011b96:	4b07      	ldr	r3, [pc, #28]	; (8011bb4 <xTimerGenericCommand+0x98>)
 8011b98:	6818      	ldr	r0, [r3, #0]
 8011b9a:	f107 0110 	add.w	r1, r7, #16
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	683a      	ldr	r2, [r7, #0]
 8011ba2:	f7fe fd61 	bl	8010668 <xQueueGenericSendFromISR>
 8011ba6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3728      	adds	r7, #40	; 0x28
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	20004c4c 	.word	0x20004c4c

08011bb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bc2:	4b22      	ldr	r3, [pc, #136]	; (8011c4c <prvProcessExpiredTimer+0x94>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	3304      	adds	r3, #4
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7fe fb1d 	bl	8010210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bdc:	f003 0304 	and.w	r3, r3, #4
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d022      	beq.n	8011c2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	699a      	ldr	r2, [r3, #24]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	18d1      	adds	r1, r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	683a      	ldr	r2, [r7, #0]
 8011bf0:	6978      	ldr	r0, [r7, #20]
 8011bf2:	f000 f8d1 	bl	8011d98 <prvInsertTimerInActiveList>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d01f      	beq.n	8011c3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	9300      	str	r3, [sp, #0]
 8011c00:	2300      	movs	r3, #0
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	2100      	movs	r1, #0
 8011c06:	6978      	ldr	r0, [r7, #20]
 8011c08:	f7ff ff88 	bl	8011b1c <xTimerGenericCommand>
 8011c0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d113      	bne.n	8011c3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c18:	f383 8811 	msr	BASEPRI, r3
 8011c1c:	f3bf 8f6f 	isb	sy
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	60fb      	str	r3, [r7, #12]
}
 8011c26:	bf00      	nop
 8011c28:	e7fe      	b.n	8011c28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c30:	f023 0301 	bic.w	r3, r3, #1
 8011c34:	b2da      	uxtb	r2, r3
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	6a1b      	ldr	r3, [r3, #32]
 8011c40:	6978      	ldr	r0, [r7, #20]
 8011c42:	4798      	blx	r3
}
 8011c44:	bf00      	nop
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	20004c44 	.word	0x20004c44

08011c50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c58:	f107 0308 	add.w	r3, r7, #8
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f000 f857 	bl	8011d10 <prvGetNextExpireTime>
 8011c62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	4619      	mov	r1, r3
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 f803 	bl	8011c74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011c6e:	f000 f8d5 	bl	8011e1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c72:	e7f1      	b.n	8011c58 <prvTimerTask+0x8>

08011c74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011c7e:	f7ff fa39 	bl	80110f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c82:	f107 0308 	add.w	r3, r7, #8
 8011c86:	4618      	mov	r0, r3
 8011c88:	f000 f866 	bl	8011d58 <prvSampleTimeNow>
 8011c8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d130      	bne.n	8011cf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d10a      	bne.n	8011cb0 <prvProcessTimerOrBlockTask+0x3c>
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d806      	bhi.n	8011cb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ca2:	f7ff fa35 	bl	8011110 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ca6:	68f9      	ldr	r1, [r7, #12]
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f7ff ff85 	bl	8011bb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011cae:	e024      	b.n	8011cfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d008      	beq.n	8011cc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011cb6:	4b13      	ldr	r3, [pc, #76]	; (8011d04 <prvProcessTimerOrBlockTask+0x90>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <prvProcessTimerOrBlockTask+0x50>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e000      	b.n	8011cc6 <prvProcessTimerOrBlockTask+0x52>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011cc8:	4b0f      	ldr	r3, [pc, #60]	; (8011d08 <prvProcessTimerOrBlockTask+0x94>)
 8011cca:	6818      	ldr	r0, [r3, #0]
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	f7fe ff7d 	bl	8010bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011cda:	f7ff fa19 	bl	8011110 <xTaskResumeAll>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d10a      	bne.n	8011cfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011ce4:	4b09      	ldr	r3, [pc, #36]	; (8011d0c <prvProcessTimerOrBlockTask+0x98>)
 8011ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cea:	601a      	str	r2, [r3, #0]
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	f3bf 8f6f 	isb	sy
}
 8011cf4:	e001      	b.n	8011cfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011cf6:	f7ff fa0b 	bl	8011110 <xTaskResumeAll>
}
 8011cfa:	bf00      	nop
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20004c48 	.word	0x20004c48
 8011d08:	20004c4c 	.word	0x20004c4c
 8011d0c:	e000ed04 	.word	0xe000ed04

08011d10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d18:	4b0e      	ldr	r3, [pc, #56]	; (8011d54 <prvGetNextExpireTime+0x44>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d101      	bne.n	8011d26 <prvGetNextExpireTime+0x16>
 8011d22:	2201      	movs	r2, #1
 8011d24:	e000      	b.n	8011d28 <prvGetNextExpireTime+0x18>
 8011d26:	2200      	movs	r2, #0
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d105      	bne.n	8011d40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d34:	4b07      	ldr	r3, [pc, #28]	; (8011d54 <prvGetNextExpireTime+0x44>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	60fb      	str	r3, [r7, #12]
 8011d3e:	e001      	b.n	8011d44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011d40:	2300      	movs	r3, #0
 8011d42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011d44:	68fb      	ldr	r3, [r7, #12]
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3714      	adds	r7, #20
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop
 8011d54:	20004c44 	.word	0x20004c44

08011d58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011d60:	f7ff fa74 	bl	801124c <xTaskGetTickCount>
 8011d64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011d66:	4b0b      	ldr	r3, [pc, #44]	; (8011d94 <prvSampleTimeNow+0x3c>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d205      	bcs.n	8011d7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011d70:	f000 f936 	bl	8011fe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2201      	movs	r2, #1
 8011d78:	601a      	str	r2, [r3, #0]
 8011d7a:	e002      	b.n	8011d82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011d82:	4a04      	ldr	r2, [pc, #16]	; (8011d94 <prvSampleTimeNow+0x3c>)
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011d88:	68fb      	ldr	r3, [r7, #12]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	20004c54 	.word	0x20004c54

08011d98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b086      	sub	sp, #24
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	607a      	str	r2, [r7, #4]
 8011da4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011da6:	2300      	movs	r3, #0
 8011da8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011db6:	68ba      	ldr	r2, [r7, #8]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d812      	bhi.n	8011de4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	1ad2      	subs	r2, r2, r3
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	699b      	ldr	r3, [r3, #24]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d302      	bcc.n	8011dd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	617b      	str	r3, [r7, #20]
 8011dd0:	e01b      	b.n	8011e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011dd2:	4b10      	ldr	r3, [pc, #64]	; (8011e14 <prvInsertTimerInActiveList+0x7c>)
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	3304      	adds	r3, #4
 8011dda:	4619      	mov	r1, r3
 8011ddc:	4610      	mov	r0, r2
 8011dde:	f7fe f9de 	bl	801019e <vListInsert>
 8011de2:	e012      	b.n	8011e0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d206      	bcs.n	8011dfa <prvInsertTimerInActiveList+0x62>
 8011dec:	68ba      	ldr	r2, [r7, #8]
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d302      	bcc.n	8011dfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011df4:	2301      	movs	r3, #1
 8011df6:	617b      	str	r3, [r7, #20]
 8011df8:	e007      	b.n	8011e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011dfa:	4b07      	ldr	r3, [pc, #28]	; (8011e18 <prvInsertTimerInActiveList+0x80>)
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	3304      	adds	r3, #4
 8011e02:	4619      	mov	r1, r3
 8011e04:	4610      	mov	r0, r2
 8011e06:	f7fe f9ca 	bl	801019e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e0a:	697b      	ldr	r3, [r7, #20]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3718      	adds	r7, #24
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	20004c48 	.word	0x20004c48
 8011e18:	20004c44 	.word	0x20004c44

08011e1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b08e      	sub	sp, #56	; 0x38
 8011e20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e22:	e0ca      	b.n	8011fba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	da18      	bge.n	8011e5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e2a:	1d3b      	adds	r3, r7, #4
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10a      	bne.n	8011e4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	61fb      	str	r3, [r7, #28]
}
 8011e48:	bf00      	nop
 8011e4a:	e7fe      	b.n	8011e4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e52:	6850      	ldr	r0, [r2, #4]
 8011e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e56:	6892      	ldr	r2, [r2, #8]
 8011e58:	4611      	mov	r1, r2
 8011e5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f2c0 80aa 	blt.w	8011fb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d004      	beq.n	8011e7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e72:	3304      	adds	r3, #4
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fe f9cb 	bl	8010210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e7a:	463b      	mov	r3, r7
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff ff6b 	bl	8011d58 <prvSampleTimeNow>
 8011e82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b09      	cmp	r3, #9
 8011e88:	f200 8097 	bhi.w	8011fba <prvProcessReceivedCommands+0x19e>
 8011e8c:	a201      	add	r2, pc, #4	; (adr r2, 8011e94 <prvProcessReceivedCommands+0x78>)
 8011e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e92:	bf00      	nop
 8011e94:	08011ebd 	.word	0x08011ebd
 8011e98:	08011ebd 	.word	0x08011ebd
 8011e9c:	08011ebd 	.word	0x08011ebd
 8011ea0:	08011f31 	.word	0x08011f31
 8011ea4:	08011f45 	.word	0x08011f45
 8011ea8:	08011f8f 	.word	0x08011f8f
 8011eac:	08011ebd 	.word	0x08011ebd
 8011eb0:	08011ebd 	.word	0x08011ebd
 8011eb4:	08011f31 	.word	0x08011f31
 8011eb8:	08011f45 	.word	0x08011f45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ec2:	f043 0301 	orr.w	r3, r3, #1
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ece:	68ba      	ldr	r2, [r7, #8]
 8011ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed2:	699b      	ldr	r3, [r3, #24]
 8011ed4:	18d1      	adds	r1, r2, r3
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011edc:	f7ff ff5c 	bl	8011d98 <prvInsertTimerInActiveList>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d069      	beq.n	8011fba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee8:	6a1b      	ldr	r3, [r3, #32]
 8011eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ef4:	f003 0304 	and.w	r3, r3, #4
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d05e      	beq.n	8011fba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011efc:	68ba      	ldr	r2, [r7, #8]
 8011efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f00:	699b      	ldr	r3, [r3, #24]
 8011f02:	441a      	add	r2, r3
 8011f04:	2300      	movs	r3, #0
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	2300      	movs	r3, #0
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f0e:	f7ff fe05 	bl	8011b1c <xTimerGenericCommand>
 8011f12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f14:	6a3b      	ldr	r3, [r7, #32]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d14f      	bne.n	8011fba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f1e:	f383 8811 	msr	BASEPRI, r3
 8011f22:	f3bf 8f6f 	isb	sy
 8011f26:	f3bf 8f4f 	dsb	sy
 8011f2a:	61bb      	str	r3, [r7, #24]
}
 8011f2c:	bf00      	nop
 8011f2e:	e7fe      	b.n	8011f2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f36:	f023 0301 	bic.w	r3, r3, #1
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011f42:	e03a      	b.n	8011fba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f4a:	f043 0301 	orr.w	r3, r3, #1
 8011f4e:	b2da      	uxtb	r2, r3
 8011f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5e:	699b      	ldr	r3, [r3, #24]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d10a      	bne.n	8011f7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	617b      	str	r3, [r7, #20]
}
 8011f76:	bf00      	nop
 8011f78:	e7fe      	b.n	8011f78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7c:	699a      	ldr	r2, [r3, #24]
 8011f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f80:	18d1      	adds	r1, r2, r3
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f88:	f7ff ff06 	bl	8011d98 <prvInsertTimerInActiveList>
					break;
 8011f8c:	e015      	b.n	8011fba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f94:	f003 0302 	and.w	r3, r3, #2
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d103      	bne.n	8011fa4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f9e:	f000 fbdf 	bl	8012760 <vPortFree>
 8011fa2:	e00a      	b.n	8011fba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011faa:	f023 0301 	bic.w	r3, r3, #1
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011fb6:	e000      	b.n	8011fba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011fb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011fba:	4b08      	ldr	r3, [pc, #32]	; (8011fdc <prvProcessReceivedCommands+0x1c0>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	1d39      	adds	r1, r7, #4
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fe fbec 	bl	80107a0 <xQueueReceive>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f47f af2a 	bne.w	8011e24 <prvProcessReceivedCommands+0x8>
	}
}
 8011fd0:	bf00      	nop
 8011fd2:	bf00      	nop
 8011fd4:	3730      	adds	r7, #48	; 0x30
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	20004c4c 	.word	0x20004c4c

08011fe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b088      	sub	sp, #32
 8011fe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011fe6:	e048      	b.n	801207a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011fe8:	4b2d      	ldr	r3, [pc, #180]	; (80120a0 <prvSwitchTimerLists+0xc0>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ff2:	4b2b      	ldr	r3, [pc, #172]	; (80120a0 <prvSwitchTimerLists+0xc0>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	3304      	adds	r3, #4
 8012000:	4618      	mov	r0, r3
 8012002:	f7fe f905 	bl	8010210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6a1b      	ldr	r3, [r3, #32]
 801200a:	68f8      	ldr	r0, [r7, #12]
 801200c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012014:	f003 0304 	and.w	r3, r3, #4
 8012018:	2b00      	cmp	r3, #0
 801201a:	d02e      	beq.n	801207a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	699b      	ldr	r3, [r3, #24]
 8012020:	693a      	ldr	r2, [r7, #16]
 8012022:	4413      	add	r3, r2
 8012024:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	429a      	cmp	r2, r3
 801202c:	d90e      	bls.n	801204c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801203a:	4b19      	ldr	r3, [pc, #100]	; (80120a0 <prvSwitchTimerLists+0xc0>)
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	3304      	adds	r3, #4
 8012042:	4619      	mov	r1, r3
 8012044:	4610      	mov	r0, r2
 8012046:	f7fe f8aa 	bl	801019e <vListInsert>
 801204a:	e016      	b.n	801207a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801204c:	2300      	movs	r3, #0
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	2300      	movs	r3, #0
 8012052:	693a      	ldr	r2, [r7, #16]
 8012054:	2100      	movs	r1, #0
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f7ff fd60 	bl	8011b1c <xTimerGenericCommand>
 801205c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10a      	bne.n	801207a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	603b      	str	r3, [r7, #0]
}
 8012076:	bf00      	nop
 8012078:	e7fe      	b.n	8012078 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801207a:	4b09      	ldr	r3, [pc, #36]	; (80120a0 <prvSwitchTimerLists+0xc0>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1b1      	bne.n	8011fe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012084:	4b06      	ldr	r3, [pc, #24]	; (80120a0 <prvSwitchTimerLists+0xc0>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801208a:	4b06      	ldr	r3, [pc, #24]	; (80120a4 <prvSwitchTimerLists+0xc4>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4a04      	ldr	r2, [pc, #16]	; (80120a0 <prvSwitchTimerLists+0xc0>)
 8012090:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012092:	4a04      	ldr	r2, [pc, #16]	; (80120a4 <prvSwitchTimerLists+0xc4>)
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	6013      	str	r3, [r2, #0]
}
 8012098:	bf00      	nop
 801209a:	3718      	adds	r7, #24
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	20004c44 	.word	0x20004c44
 80120a4:	20004c48 	.word	0x20004c48

080120a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80120ae:	f000 f969 	bl	8012384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80120b2:	4b15      	ldr	r3, [pc, #84]	; (8012108 <prvCheckForValidListAndQueue+0x60>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d120      	bne.n	80120fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80120ba:	4814      	ldr	r0, [pc, #80]	; (801210c <prvCheckForValidListAndQueue+0x64>)
 80120bc:	f7fe f81e 	bl	80100fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80120c0:	4813      	ldr	r0, [pc, #76]	; (8012110 <prvCheckForValidListAndQueue+0x68>)
 80120c2:	f7fe f81b 	bl	80100fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80120c6:	4b13      	ldr	r3, [pc, #76]	; (8012114 <prvCheckForValidListAndQueue+0x6c>)
 80120c8:	4a10      	ldr	r2, [pc, #64]	; (801210c <prvCheckForValidListAndQueue+0x64>)
 80120ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80120cc:	4b12      	ldr	r3, [pc, #72]	; (8012118 <prvCheckForValidListAndQueue+0x70>)
 80120ce:	4a10      	ldr	r2, [pc, #64]	; (8012110 <prvCheckForValidListAndQueue+0x68>)
 80120d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80120d2:	2300      	movs	r3, #0
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	4b11      	ldr	r3, [pc, #68]	; (801211c <prvCheckForValidListAndQueue+0x74>)
 80120d8:	4a11      	ldr	r2, [pc, #68]	; (8012120 <prvCheckForValidListAndQueue+0x78>)
 80120da:	2110      	movs	r1, #16
 80120dc:	200a      	movs	r0, #10
 80120de:	f7fe f929 	bl	8010334 <xQueueGenericCreateStatic>
 80120e2:	4603      	mov	r3, r0
 80120e4:	4a08      	ldr	r2, [pc, #32]	; (8012108 <prvCheckForValidListAndQueue+0x60>)
 80120e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80120e8:	4b07      	ldr	r3, [pc, #28]	; (8012108 <prvCheckForValidListAndQueue+0x60>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d005      	beq.n	80120fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80120f0:	4b05      	ldr	r3, [pc, #20]	; (8012108 <prvCheckForValidListAndQueue+0x60>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	490b      	ldr	r1, [pc, #44]	; (8012124 <prvCheckForValidListAndQueue+0x7c>)
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fe fd42 	bl	8010b80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80120fc:	f000 f972 	bl	80123e4 <vPortExitCritical>
}
 8012100:	bf00      	nop
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	20004c4c 	.word	0x20004c4c
 801210c:	20004c1c 	.word	0x20004c1c
 8012110:	20004c30 	.word	0x20004c30
 8012114:	20004c44 	.word	0x20004c44
 8012118:	20004c48 	.word	0x20004c48
 801211c:	20004cf8 	.word	0x20004cf8
 8012120:	20004c58 	.word	0x20004c58
 8012124:	080169c4 	.word	0x080169c4

08012128 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012128:	b480      	push	{r7}
 801212a:	b085      	sub	sp, #20
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	3b04      	subs	r3, #4
 8012138:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	3b04      	subs	r3, #4
 8012146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	f023 0201 	bic.w	r2, r3, #1
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	3b04      	subs	r3, #4
 8012156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012158:	4a0c      	ldr	r2, [pc, #48]	; (801218c <pxPortInitialiseStack+0x64>)
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	3b14      	subs	r3, #20
 8012162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	3b04      	subs	r3, #4
 801216e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f06f 0202 	mvn.w	r2, #2
 8012176:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	3b20      	subs	r3, #32
 801217c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801217e:	68fb      	ldr	r3, [r7, #12]
}
 8012180:	4618      	mov	r0, r3
 8012182:	3714      	adds	r7, #20
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr
 801218c:	08012191 	.word	0x08012191

08012190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012190:	b480      	push	{r7}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801219a:	4b12      	ldr	r3, [pc, #72]	; (80121e4 <prvTaskExitError+0x54>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a2:	d00a      	beq.n	80121ba <prvTaskExitError+0x2a>
	__asm volatile
 80121a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a8:	f383 8811 	msr	BASEPRI, r3
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f3bf 8f4f 	dsb	sy
 80121b4:	60fb      	str	r3, [r7, #12]
}
 80121b6:	bf00      	nop
 80121b8:	e7fe      	b.n	80121b8 <prvTaskExitError+0x28>
	__asm volatile
 80121ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121be:	f383 8811 	msr	BASEPRI, r3
 80121c2:	f3bf 8f6f 	isb	sy
 80121c6:	f3bf 8f4f 	dsb	sy
 80121ca:	60bb      	str	r3, [r7, #8]
}
 80121cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80121ce:	bf00      	nop
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d0fc      	beq.n	80121d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80121d6:	bf00      	nop
 80121d8:	bf00      	nop
 80121da:	3714      	adds	r7, #20
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr
 80121e4:	20000324 	.word	0x20000324
	...

080121f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80121f0:	4b07      	ldr	r3, [pc, #28]	; (8012210 <pxCurrentTCBConst2>)
 80121f2:	6819      	ldr	r1, [r3, #0]
 80121f4:	6808      	ldr	r0, [r1, #0]
 80121f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121fa:	f380 8809 	msr	PSP, r0
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f04f 0000 	mov.w	r0, #0
 8012206:	f380 8811 	msr	BASEPRI, r0
 801220a:	4770      	bx	lr
 801220c:	f3af 8000 	nop.w

08012210 <pxCurrentTCBConst2>:
 8012210:	2000471c 	.word	0x2000471c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012214:	bf00      	nop
 8012216:	bf00      	nop

08012218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012218:	4808      	ldr	r0, [pc, #32]	; (801223c <prvPortStartFirstTask+0x24>)
 801221a:	6800      	ldr	r0, [r0, #0]
 801221c:	6800      	ldr	r0, [r0, #0]
 801221e:	f380 8808 	msr	MSP, r0
 8012222:	f04f 0000 	mov.w	r0, #0
 8012226:	f380 8814 	msr	CONTROL, r0
 801222a:	b662      	cpsie	i
 801222c:	b661      	cpsie	f
 801222e:	f3bf 8f4f 	dsb	sy
 8012232:	f3bf 8f6f 	isb	sy
 8012236:	df00      	svc	0
 8012238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801223a:	bf00      	nop
 801223c:	e000ed08 	.word	0xe000ed08

08012240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012246:	4b46      	ldr	r3, [pc, #280]	; (8012360 <xPortStartScheduler+0x120>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4a46      	ldr	r2, [pc, #280]	; (8012364 <xPortStartScheduler+0x124>)
 801224c:	4293      	cmp	r3, r2
 801224e:	d10a      	bne.n	8012266 <xPortStartScheduler+0x26>
	__asm volatile
 8012250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012254:	f383 8811 	msr	BASEPRI, r3
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	f3bf 8f4f 	dsb	sy
 8012260:	613b      	str	r3, [r7, #16]
}
 8012262:	bf00      	nop
 8012264:	e7fe      	b.n	8012264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012266:	4b3e      	ldr	r3, [pc, #248]	; (8012360 <xPortStartScheduler+0x120>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	4a3f      	ldr	r2, [pc, #252]	; (8012368 <xPortStartScheduler+0x128>)
 801226c:	4293      	cmp	r3, r2
 801226e:	d10a      	bne.n	8012286 <xPortStartScheduler+0x46>
	__asm volatile
 8012270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012274:	f383 8811 	msr	BASEPRI, r3
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	60fb      	str	r3, [r7, #12]
}
 8012282:	bf00      	nop
 8012284:	e7fe      	b.n	8012284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012286:	4b39      	ldr	r3, [pc, #228]	; (801236c <xPortStartScheduler+0x12c>)
 8012288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	b2db      	uxtb	r3, r3
 8012290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	22ff      	movs	r2, #255	; 0xff
 8012296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	b2db      	uxtb	r3, r3
 801229e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80122a0:	78fb      	ldrb	r3, [r7, #3]
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	4b31      	ldr	r3, [pc, #196]	; (8012370 <xPortStartScheduler+0x130>)
 80122ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80122ae:	4b31      	ldr	r3, [pc, #196]	; (8012374 <xPortStartScheduler+0x134>)
 80122b0:	2207      	movs	r2, #7
 80122b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122b4:	e009      	b.n	80122ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80122b6:	4b2f      	ldr	r3, [pc, #188]	; (8012374 <xPortStartScheduler+0x134>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	4a2d      	ldr	r2, [pc, #180]	; (8012374 <xPortStartScheduler+0x134>)
 80122be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80122c0:	78fb      	ldrb	r3, [r7, #3]
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	005b      	lsls	r3, r3, #1
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122ca:	78fb      	ldrb	r3, [r7, #3]
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122d2:	2b80      	cmp	r3, #128	; 0x80
 80122d4:	d0ef      	beq.n	80122b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80122d6:	4b27      	ldr	r3, [pc, #156]	; (8012374 <xPortStartScheduler+0x134>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f1c3 0307 	rsb	r3, r3, #7
 80122de:	2b04      	cmp	r3, #4
 80122e0:	d00a      	beq.n	80122f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80122e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e6:	f383 8811 	msr	BASEPRI, r3
 80122ea:	f3bf 8f6f 	isb	sy
 80122ee:	f3bf 8f4f 	dsb	sy
 80122f2:	60bb      	str	r3, [r7, #8]
}
 80122f4:	bf00      	nop
 80122f6:	e7fe      	b.n	80122f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80122f8:	4b1e      	ldr	r3, [pc, #120]	; (8012374 <xPortStartScheduler+0x134>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	021b      	lsls	r3, r3, #8
 80122fe:	4a1d      	ldr	r2, [pc, #116]	; (8012374 <xPortStartScheduler+0x134>)
 8012300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012302:	4b1c      	ldr	r3, [pc, #112]	; (8012374 <xPortStartScheduler+0x134>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801230a:	4a1a      	ldr	r2, [pc, #104]	; (8012374 <xPortStartScheduler+0x134>)
 801230c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	b2da      	uxtb	r2, r3
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012316:	4b18      	ldr	r3, [pc, #96]	; (8012378 <xPortStartScheduler+0x138>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4a17      	ldr	r2, [pc, #92]	; (8012378 <xPortStartScheduler+0x138>)
 801231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012322:	4b15      	ldr	r3, [pc, #84]	; (8012378 <xPortStartScheduler+0x138>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	4a14      	ldr	r2, [pc, #80]	; (8012378 <xPortStartScheduler+0x138>)
 8012328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801232c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801232e:	f000 f8dd 	bl	80124ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012332:	4b12      	ldr	r3, [pc, #72]	; (801237c <xPortStartScheduler+0x13c>)
 8012334:	2200      	movs	r2, #0
 8012336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012338:	f000 f8fc 	bl	8012534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801233c:	4b10      	ldr	r3, [pc, #64]	; (8012380 <xPortStartScheduler+0x140>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4a0f      	ldr	r2, [pc, #60]	; (8012380 <xPortStartScheduler+0x140>)
 8012342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012348:	f7ff ff66 	bl	8012218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801234c:	f7ff f848 	bl	80113e0 <vTaskSwitchContext>
	prvTaskExitError();
 8012350:	f7ff ff1e 	bl	8012190 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	3718      	adds	r7, #24
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	e000ed00 	.word	0xe000ed00
 8012364:	410fc271 	.word	0x410fc271
 8012368:	410fc270 	.word	0x410fc270
 801236c:	e000e400 	.word	0xe000e400
 8012370:	20004d48 	.word	0x20004d48
 8012374:	20004d4c 	.word	0x20004d4c
 8012378:	e000ed20 	.word	0xe000ed20
 801237c:	20000324 	.word	0x20000324
 8012380:	e000ef34 	.word	0xe000ef34

08012384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012384:	b480      	push	{r7}
 8012386:	b083      	sub	sp, #12
 8012388:	af00      	add	r7, sp, #0
	__asm volatile
 801238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238e:	f383 8811 	msr	BASEPRI, r3
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	f3bf 8f4f 	dsb	sy
 801239a:	607b      	str	r3, [r7, #4]
}
 801239c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801239e:	4b0f      	ldr	r3, [pc, #60]	; (80123dc <vPortEnterCritical+0x58>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	3301      	adds	r3, #1
 80123a4:	4a0d      	ldr	r2, [pc, #52]	; (80123dc <vPortEnterCritical+0x58>)
 80123a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80123a8:	4b0c      	ldr	r3, [pc, #48]	; (80123dc <vPortEnterCritical+0x58>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d10f      	bne.n	80123d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80123b0:	4b0b      	ldr	r3, [pc, #44]	; (80123e0 <vPortEnterCritical+0x5c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00a      	beq.n	80123d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80123ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	603b      	str	r3, [r7, #0]
}
 80123cc:	bf00      	nop
 80123ce:	e7fe      	b.n	80123ce <vPortEnterCritical+0x4a>
	}
}
 80123d0:	bf00      	nop
 80123d2:	370c      	adds	r7, #12
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr
 80123dc:	20000324 	.word	0x20000324
 80123e0:	e000ed04 	.word	0xe000ed04

080123e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80123ea:	4b12      	ldr	r3, [pc, #72]	; (8012434 <vPortExitCritical+0x50>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d10a      	bne.n	8012408 <vPortExitCritical+0x24>
	__asm volatile
 80123f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f6:	f383 8811 	msr	BASEPRI, r3
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	607b      	str	r3, [r7, #4]
}
 8012404:	bf00      	nop
 8012406:	e7fe      	b.n	8012406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012408:	4b0a      	ldr	r3, [pc, #40]	; (8012434 <vPortExitCritical+0x50>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	3b01      	subs	r3, #1
 801240e:	4a09      	ldr	r2, [pc, #36]	; (8012434 <vPortExitCritical+0x50>)
 8012410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012412:	4b08      	ldr	r3, [pc, #32]	; (8012434 <vPortExitCritical+0x50>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d105      	bne.n	8012426 <vPortExitCritical+0x42>
 801241a:	2300      	movs	r3, #0
 801241c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	f383 8811 	msr	BASEPRI, r3
}
 8012424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012426:	bf00      	nop
 8012428:	370c      	adds	r7, #12
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	20000324 	.word	0x20000324
	...

08012440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012440:	f3ef 8009 	mrs	r0, PSP
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	4b15      	ldr	r3, [pc, #84]	; (80124a0 <pxCurrentTCBConst>)
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	f01e 0f10 	tst.w	lr, #16
 8012450:	bf08      	it	eq
 8012452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245a:	6010      	str	r0, [r2, #0]
 801245c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012464:	f380 8811 	msr	BASEPRI, r0
 8012468:	f3bf 8f4f 	dsb	sy
 801246c:	f3bf 8f6f 	isb	sy
 8012470:	f7fe ffb6 	bl	80113e0 <vTaskSwitchContext>
 8012474:	f04f 0000 	mov.w	r0, #0
 8012478:	f380 8811 	msr	BASEPRI, r0
 801247c:	bc09      	pop	{r0, r3}
 801247e:	6819      	ldr	r1, [r3, #0]
 8012480:	6808      	ldr	r0, [r1, #0]
 8012482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012486:	f01e 0f10 	tst.w	lr, #16
 801248a:	bf08      	it	eq
 801248c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012490:	f380 8809 	msr	PSP, r0
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	f3af 8000 	nop.w

080124a0 <pxCurrentTCBConst>:
 80124a0:	2000471c 	.word	0x2000471c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80124a4:	bf00      	nop
 80124a6:	bf00      	nop

080124a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
	__asm volatile
 80124ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b2:	f383 8811 	msr	BASEPRI, r3
 80124b6:	f3bf 8f6f 	isb	sy
 80124ba:	f3bf 8f4f 	dsb	sy
 80124be:	607b      	str	r3, [r7, #4]
}
 80124c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80124c2:	f7fe fed3 	bl	801126c <xTaskIncrementTick>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d003      	beq.n	80124d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80124cc:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <xPortSysTickHandler+0x40>)
 80124ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124d2:	601a      	str	r2, [r3, #0]
 80124d4:	2300      	movs	r3, #0
 80124d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	f383 8811 	msr	BASEPRI, r3
}
 80124de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80124e0:	bf00      	nop
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	e000ed04 	.word	0xe000ed04

080124ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80124f0:	4b0b      	ldr	r3, [pc, #44]	; (8012520 <vPortSetupTimerInterrupt+0x34>)
 80124f2:	2200      	movs	r2, #0
 80124f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80124f6:	4b0b      	ldr	r3, [pc, #44]	; (8012524 <vPortSetupTimerInterrupt+0x38>)
 80124f8:	2200      	movs	r2, #0
 80124fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80124fc:	4b0a      	ldr	r3, [pc, #40]	; (8012528 <vPortSetupTimerInterrupt+0x3c>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4a0a      	ldr	r2, [pc, #40]	; (801252c <vPortSetupTimerInterrupt+0x40>)
 8012502:	fba2 2303 	umull	r2, r3, r2, r3
 8012506:	099b      	lsrs	r3, r3, #6
 8012508:	4a09      	ldr	r2, [pc, #36]	; (8012530 <vPortSetupTimerInterrupt+0x44>)
 801250a:	3b01      	subs	r3, #1
 801250c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801250e:	4b04      	ldr	r3, [pc, #16]	; (8012520 <vPortSetupTimerInterrupt+0x34>)
 8012510:	2207      	movs	r2, #7
 8012512:	601a      	str	r2, [r3, #0]
}
 8012514:	bf00      	nop
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	e000e010 	.word	0xe000e010
 8012524:	e000e018 	.word	0xe000e018
 8012528:	20000208 	.word	0x20000208
 801252c:	10624dd3 	.word	0x10624dd3
 8012530:	e000e014 	.word	0xe000e014

08012534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012544 <vPortEnableVFP+0x10>
 8012538:	6801      	ldr	r1, [r0, #0]
 801253a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801253e:	6001      	str	r1, [r0, #0]
 8012540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012542:	bf00      	nop
 8012544:	e000ed88 	.word	0xe000ed88

08012548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801254e:	f3ef 8305 	mrs	r3, IPSR
 8012552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b0f      	cmp	r3, #15
 8012558:	d914      	bls.n	8012584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801255a:	4a17      	ldr	r2, [pc, #92]	; (80125b8 <vPortValidateInterruptPriority+0x70>)
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	4413      	add	r3, r2
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012564:	4b15      	ldr	r3, [pc, #84]	; (80125bc <vPortValidateInterruptPriority+0x74>)
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	7afa      	ldrb	r2, [r7, #11]
 801256a:	429a      	cmp	r2, r3
 801256c:	d20a      	bcs.n	8012584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	607b      	str	r3, [r7, #4]
}
 8012580:	bf00      	nop
 8012582:	e7fe      	b.n	8012582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012584:	4b0e      	ldr	r3, [pc, #56]	; (80125c0 <vPortValidateInterruptPriority+0x78>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801258c:	4b0d      	ldr	r3, [pc, #52]	; (80125c4 <vPortValidateInterruptPriority+0x7c>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	429a      	cmp	r2, r3
 8012592:	d90a      	bls.n	80125aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012598:	f383 8811 	msr	BASEPRI, r3
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f3bf 8f4f 	dsb	sy
 80125a4:	603b      	str	r3, [r7, #0]
}
 80125a6:	bf00      	nop
 80125a8:	e7fe      	b.n	80125a8 <vPortValidateInterruptPriority+0x60>
	}
 80125aa:	bf00      	nop
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	e000e3f0 	.word	0xe000e3f0
 80125bc:	20004d48 	.word	0x20004d48
 80125c0:	e000ed0c 	.word	0xe000ed0c
 80125c4:	20004d4c 	.word	0x20004d4c

080125c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80125d0:	2300      	movs	r3, #0
 80125d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80125d4:	f7fe fd8e 	bl	80110f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80125d8:	4b5b      	ldr	r3, [pc, #364]	; (8012748 <pvPortMalloc+0x180>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d101      	bne.n	80125e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80125e0:	f000 f920 	bl	8012824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80125e4:	4b59      	ldr	r3, [pc, #356]	; (801274c <pvPortMalloc+0x184>)
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4013      	ands	r3, r2
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f040 8093 	bne.w	8012718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d01d      	beq.n	8012634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80125f8:	2208      	movs	r2, #8
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4413      	add	r3, r2
 80125fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f003 0307 	and.w	r3, r3, #7
 8012606:	2b00      	cmp	r3, #0
 8012608:	d014      	beq.n	8012634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f023 0307 	bic.w	r3, r3, #7
 8012610:	3308      	adds	r3, #8
 8012612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f003 0307 	and.w	r3, r3, #7
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00a      	beq.n	8012634 <pvPortMalloc+0x6c>
	__asm volatile
 801261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012622:	f383 8811 	msr	BASEPRI, r3
 8012626:	f3bf 8f6f 	isb	sy
 801262a:	f3bf 8f4f 	dsb	sy
 801262e:	617b      	str	r3, [r7, #20]
}
 8012630:	bf00      	nop
 8012632:	e7fe      	b.n	8012632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d06e      	beq.n	8012718 <pvPortMalloc+0x150>
 801263a:	4b45      	ldr	r3, [pc, #276]	; (8012750 <pvPortMalloc+0x188>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	429a      	cmp	r2, r3
 8012642:	d869      	bhi.n	8012718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012644:	4b43      	ldr	r3, [pc, #268]	; (8012754 <pvPortMalloc+0x18c>)
 8012646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012648:	4b42      	ldr	r3, [pc, #264]	; (8012754 <pvPortMalloc+0x18c>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801264e:	e004      	b.n	801265a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	429a      	cmp	r2, r3
 8012662:	d903      	bls.n	801266c <pvPortMalloc+0xa4>
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1f1      	bne.n	8012650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801266c:	4b36      	ldr	r3, [pc, #216]	; (8012748 <pvPortMalloc+0x180>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012672:	429a      	cmp	r2, r3
 8012674:	d050      	beq.n	8012718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012676:	6a3b      	ldr	r3, [r7, #32]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2208      	movs	r2, #8
 801267c:	4413      	add	r3, r2
 801267e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	6a3b      	ldr	r3, [r7, #32]
 8012686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	685a      	ldr	r2, [r3, #4]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	1ad2      	subs	r2, r2, r3
 8012690:	2308      	movs	r3, #8
 8012692:	005b      	lsls	r3, r3, #1
 8012694:	429a      	cmp	r2, r3
 8012696:	d91f      	bls.n	80126d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4413      	add	r3, r2
 801269e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	f003 0307 	and.w	r3, r3, #7
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d00a      	beq.n	80126c0 <pvPortMalloc+0xf8>
	__asm volatile
 80126aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ae:	f383 8811 	msr	BASEPRI, r3
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	613b      	str	r3, [r7, #16]
}
 80126bc:	bf00      	nop
 80126be:	e7fe      	b.n	80126be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80126c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c2:	685a      	ldr	r2, [r3, #4]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	1ad2      	subs	r2, r2, r3
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80126d2:	69b8      	ldr	r0, [r7, #24]
 80126d4:	f000 f908 	bl	80128e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80126d8:	4b1d      	ldr	r3, [pc, #116]	; (8012750 <pvPortMalloc+0x188>)
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	1ad3      	subs	r3, r2, r3
 80126e2:	4a1b      	ldr	r2, [pc, #108]	; (8012750 <pvPortMalloc+0x188>)
 80126e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80126e6:	4b1a      	ldr	r3, [pc, #104]	; (8012750 <pvPortMalloc+0x188>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	4b1b      	ldr	r3, [pc, #108]	; (8012758 <pvPortMalloc+0x190>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d203      	bcs.n	80126fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80126f2:	4b17      	ldr	r3, [pc, #92]	; (8012750 <pvPortMalloc+0x188>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	4a18      	ldr	r2, [pc, #96]	; (8012758 <pvPortMalloc+0x190>)
 80126f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80126fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fc:	685a      	ldr	r2, [r3, #4]
 80126fe:	4b13      	ldr	r3, [pc, #76]	; (801274c <pvPortMalloc+0x184>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	431a      	orrs	r2, r3
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270a:	2200      	movs	r2, #0
 801270c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801270e:	4b13      	ldr	r3, [pc, #76]	; (801275c <pvPortMalloc+0x194>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	3301      	adds	r3, #1
 8012714:	4a11      	ldr	r2, [pc, #68]	; (801275c <pvPortMalloc+0x194>)
 8012716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012718:	f7fe fcfa 	bl	8011110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	f003 0307 	and.w	r3, r3, #7
 8012722:	2b00      	cmp	r3, #0
 8012724:	d00a      	beq.n	801273c <pvPortMalloc+0x174>
	__asm volatile
 8012726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272a:	f383 8811 	msr	BASEPRI, r3
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	60fb      	str	r3, [r7, #12]
}
 8012738:	bf00      	nop
 801273a:	e7fe      	b.n	801273a <pvPortMalloc+0x172>
	return pvReturn;
 801273c:	69fb      	ldr	r3, [r7, #28]
}
 801273e:	4618      	mov	r0, r3
 8012740:	3728      	adds	r7, #40	; 0x28
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	20007c38 	.word	0x20007c38
 801274c:	20007c4c 	.word	0x20007c4c
 8012750:	20007c3c 	.word	0x20007c3c
 8012754:	20007c30 	.word	0x20007c30
 8012758:	20007c40 	.word	0x20007c40
 801275c:	20007c44 	.word	0x20007c44

08012760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b086      	sub	sp, #24
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d04d      	beq.n	801280e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012772:	2308      	movs	r3, #8
 8012774:	425b      	negs	r3, r3
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	4413      	add	r3, r2
 801277a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	685a      	ldr	r2, [r3, #4]
 8012784:	4b24      	ldr	r3, [pc, #144]	; (8012818 <vPortFree+0xb8>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	4013      	ands	r3, r2
 801278a:	2b00      	cmp	r3, #0
 801278c:	d10a      	bne.n	80127a4 <vPortFree+0x44>
	__asm volatile
 801278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012792:	f383 8811 	msr	BASEPRI, r3
 8012796:	f3bf 8f6f 	isb	sy
 801279a:	f3bf 8f4f 	dsb	sy
 801279e:	60fb      	str	r3, [r7, #12]
}
 80127a0:	bf00      	nop
 80127a2:	e7fe      	b.n	80127a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00a      	beq.n	80127c2 <vPortFree+0x62>
	__asm volatile
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	60bb      	str	r3, [r7, #8]
}
 80127be:	bf00      	nop
 80127c0:	e7fe      	b.n	80127c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	685a      	ldr	r2, [r3, #4]
 80127c6:	4b14      	ldr	r3, [pc, #80]	; (8012818 <vPortFree+0xb8>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4013      	ands	r3, r2
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d01e      	beq.n	801280e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d11a      	bne.n	801280e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	685a      	ldr	r2, [r3, #4]
 80127dc:	4b0e      	ldr	r3, [pc, #56]	; (8012818 <vPortFree+0xb8>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	43db      	mvns	r3, r3
 80127e2:	401a      	ands	r2, r3
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80127e8:	f7fe fc84 	bl	80110f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	685a      	ldr	r2, [r3, #4]
 80127f0:	4b0a      	ldr	r3, [pc, #40]	; (801281c <vPortFree+0xbc>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4413      	add	r3, r2
 80127f6:	4a09      	ldr	r2, [pc, #36]	; (801281c <vPortFree+0xbc>)
 80127f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80127fa:	6938      	ldr	r0, [r7, #16]
 80127fc:	f000 f874 	bl	80128e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012800:	4b07      	ldr	r3, [pc, #28]	; (8012820 <vPortFree+0xc0>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	3301      	adds	r3, #1
 8012806:	4a06      	ldr	r2, [pc, #24]	; (8012820 <vPortFree+0xc0>)
 8012808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801280a:	f7fe fc81 	bl	8011110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801280e:	bf00      	nop
 8012810:	3718      	adds	r7, #24
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	20007c4c 	.word	0x20007c4c
 801281c:	20007c3c 	.word	0x20007c3c
 8012820:	20007c48 	.word	0x20007c48

08012824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012824:	b480      	push	{r7}
 8012826:	b085      	sub	sp, #20
 8012828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801282a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801282e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012830:	4b27      	ldr	r3, [pc, #156]	; (80128d0 <prvHeapInit+0xac>)
 8012832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f003 0307 	and.w	r3, r3, #7
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00c      	beq.n	8012858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3307      	adds	r3, #7
 8012842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f023 0307 	bic.w	r3, r3, #7
 801284a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	4a1f      	ldr	r2, [pc, #124]	; (80128d0 <prvHeapInit+0xac>)
 8012854:	4413      	add	r3, r2
 8012856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801285c:	4a1d      	ldr	r2, [pc, #116]	; (80128d4 <prvHeapInit+0xb0>)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012862:	4b1c      	ldr	r3, [pc, #112]	; (80128d4 <prvHeapInit+0xb0>)
 8012864:	2200      	movs	r2, #0
 8012866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	4413      	add	r3, r2
 801286e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012870:	2208      	movs	r2, #8
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	1a9b      	subs	r3, r3, r2
 8012876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f023 0307 	bic.w	r3, r3, #7
 801287e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	4a15      	ldr	r2, [pc, #84]	; (80128d8 <prvHeapInit+0xb4>)
 8012884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012886:	4b14      	ldr	r3, [pc, #80]	; (80128d8 <prvHeapInit+0xb4>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2200      	movs	r2, #0
 801288c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801288e:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <prvHeapInit+0xb4>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2200      	movs	r2, #0
 8012894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	1ad2      	subs	r2, r2, r3
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80128a4:	4b0c      	ldr	r3, [pc, #48]	; (80128d8 <prvHeapInit+0xb4>)
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	4a0a      	ldr	r2, [pc, #40]	; (80128dc <prvHeapInit+0xb8>)
 80128b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	4a09      	ldr	r2, [pc, #36]	; (80128e0 <prvHeapInit+0xbc>)
 80128ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80128bc:	4b09      	ldr	r3, [pc, #36]	; (80128e4 <prvHeapInit+0xc0>)
 80128be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80128c2:	601a      	str	r2, [r3, #0]
}
 80128c4:	bf00      	nop
 80128c6:	3714      	adds	r7, #20
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	20004d50 	.word	0x20004d50
 80128d4:	20007c30 	.word	0x20007c30
 80128d8:	20007c38 	.word	0x20007c38
 80128dc:	20007c40 	.word	0x20007c40
 80128e0:	20007c3c 	.word	0x20007c3c
 80128e4:	20007c4c 	.word	0x20007c4c

080128e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80128f0:	4b28      	ldr	r3, [pc, #160]	; (8012994 <prvInsertBlockIntoFreeList+0xac>)
 80128f2:	60fb      	str	r3, [r7, #12]
 80128f4:	e002      	b.n	80128fc <prvInsertBlockIntoFreeList+0x14>
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	60fb      	str	r3, [r7, #12]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	429a      	cmp	r2, r3
 8012904:	d8f7      	bhi.n	80128f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	68ba      	ldr	r2, [r7, #8]
 8012910:	4413      	add	r3, r2
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	429a      	cmp	r2, r3
 8012916:	d108      	bne.n	801292a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	685a      	ldr	r2, [r3, #4]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	441a      	add	r2, r3
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	441a      	add	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	d118      	bne.n	8012970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	4b15      	ldr	r3, [pc, #84]	; (8012998 <prvInsertBlockIntoFreeList+0xb0>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	429a      	cmp	r2, r3
 8012948:	d00d      	beq.n	8012966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	441a      	add	r2, r3
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	e008      	b.n	8012978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012966:	4b0c      	ldr	r3, [pc, #48]	; (8012998 <prvInsertBlockIntoFreeList+0xb0>)
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	e003      	b.n	8012978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	429a      	cmp	r2, r3
 801297e:	d002      	beq.n	8012986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012986:	bf00      	nop
 8012988:	3714      	adds	r7, #20
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	20007c30 	.word	0x20007c30
 8012998:	20007c38 	.word	0x20007c38

0801299c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80129a0:	2200      	movs	r2, #0
 80129a2:	4912      	ldr	r1, [pc, #72]	; (80129ec <MX_USB_DEVICE_Init+0x50>)
 80129a4:	4812      	ldr	r0, [pc, #72]	; (80129f0 <MX_USB_DEVICE_Init+0x54>)
 80129a6:	f7fc f8a5 	bl	800eaf4 <USBD_Init>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80129b0:	f7f1 f992 	bl	8003cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80129b4:	490f      	ldr	r1, [pc, #60]	; (80129f4 <MX_USB_DEVICE_Init+0x58>)
 80129b6:	480e      	ldr	r0, [pc, #56]	; (80129f0 <MX_USB_DEVICE_Init+0x54>)
 80129b8:	f7fc f8cc 	bl	800eb54 <USBD_RegisterClass>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d001      	beq.n	80129c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80129c2:	f7f1 f989 	bl	8003cd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80129c6:	490c      	ldr	r1, [pc, #48]	; (80129f8 <MX_USB_DEVICE_Init+0x5c>)
 80129c8:	4809      	ldr	r0, [pc, #36]	; (80129f0 <MX_USB_DEVICE_Init+0x54>)
 80129ca:	f7fb ffed 	bl	800e9a8 <USBD_CDC_RegisterInterface>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80129d4:	f7f1 f980 	bl	8003cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80129d8:	4805      	ldr	r0, [pc, #20]	; (80129f0 <MX_USB_DEVICE_Init+0x54>)
 80129da:	f7fc f8e2 	bl	800eba2 <USBD_Start>
 80129de:	4603      	mov	r3, r0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d001      	beq.n	80129e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80129e4:	f7f1 f978 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80129e8:	bf00      	nop
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	2000033c 	.word	0x2000033c
 80129f0:	20007c50 	.word	0x20007c50
 80129f4:	20000220 	.word	0x20000220
 80129f8:	20000328 	.word	0x20000328

080129fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a00:	2200      	movs	r2, #0
 8012a02:	4905      	ldr	r1, [pc, #20]	; (8012a18 <CDC_Init_FS+0x1c>)
 8012a04:	4805      	ldr	r0, [pc, #20]	; (8012a1c <CDC_Init_FS+0x20>)
 8012a06:	f7fb ffe4 	bl	800e9d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a0a:	4905      	ldr	r1, [pc, #20]	; (8012a20 <CDC_Init_FS+0x24>)
 8012a0c:	4803      	ldr	r0, [pc, #12]	; (8012a1c <CDC_Init_FS+0x20>)
 8012a0e:	f7fb fffe 	bl	800ea0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	20008720 	.word	0x20008720
 8012a1c:	20007c50 	.word	0x20007c50
 8012a20:	20007f20 	.word	0x20007f20

08012a24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a24:	b480      	push	{r7}
 8012a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	6039      	str	r1, [r7, #0]
 8012a3e:	71fb      	strb	r3, [r7, #7]
 8012a40:	4613      	mov	r3, r2
 8012a42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012a44:	79fb      	ldrb	r3, [r7, #7]
 8012a46:	2b23      	cmp	r3, #35	; 0x23
 8012a48:	d84a      	bhi.n	8012ae0 <CDC_Control_FS+0xac>
 8012a4a:	a201      	add	r2, pc, #4	; (adr r2, 8012a50 <CDC_Control_FS+0x1c>)
 8012a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a50:	08012ae1 	.word	0x08012ae1
 8012a54:	08012ae1 	.word	0x08012ae1
 8012a58:	08012ae1 	.word	0x08012ae1
 8012a5c:	08012ae1 	.word	0x08012ae1
 8012a60:	08012ae1 	.word	0x08012ae1
 8012a64:	08012ae1 	.word	0x08012ae1
 8012a68:	08012ae1 	.word	0x08012ae1
 8012a6c:	08012ae1 	.word	0x08012ae1
 8012a70:	08012ae1 	.word	0x08012ae1
 8012a74:	08012ae1 	.word	0x08012ae1
 8012a78:	08012ae1 	.word	0x08012ae1
 8012a7c:	08012ae1 	.word	0x08012ae1
 8012a80:	08012ae1 	.word	0x08012ae1
 8012a84:	08012ae1 	.word	0x08012ae1
 8012a88:	08012ae1 	.word	0x08012ae1
 8012a8c:	08012ae1 	.word	0x08012ae1
 8012a90:	08012ae1 	.word	0x08012ae1
 8012a94:	08012ae1 	.word	0x08012ae1
 8012a98:	08012ae1 	.word	0x08012ae1
 8012a9c:	08012ae1 	.word	0x08012ae1
 8012aa0:	08012ae1 	.word	0x08012ae1
 8012aa4:	08012ae1 	.word	0x08012ae1
 8012aa8:	08012ae1 	.word	0x08012ae1
 8012aac:	08012ae1 	.word	0x08012ae1
 8012ab0:	08012ae1 	.word	0x08012ae1
 8012ab4:	08012ae1 	.word	0x08012ae1
 8012ab8:	08012ae1 	.word	0x08012ae1
 8012abc:	08012ae1 	.word	0x08012ae1
 8012ac0:	08012ae1 	.word	0x08012ae1
 8012ac4:	08012ae1 	.word	0x08012ae1
 8012ac8:	08012ae1 	.word	0x08012ae1
 8012acc:	08012ae1 	.word	0x08012ae1
 8012ad0:	08012ae1 	.word	0x08012ae1
 8012ad4:	08012ae1 	.word	0x08012ae1
 8012ad8:	08012ae1 	.word	0x08012ae1
 8012adc:	08012ae1 	.word	0x08012ae1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012ae0:	bf00      	nop
  }

  return (USBD_OK);
 8012ae2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012afa:	6879      	ldr	r1, [r7, #4]
 8012afc:	4805      	ldr	r0, [pc, #20]	; (8012b14 <CDC_Receive_FS+0x24>)
 8012afe:	f7fb ff86 	bl	800ea0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012b02:	4804      	ldr	r0, [pc, #16]	; (8012b14 <CDC_Receive_FS+0x24>)
 8012b04:	f7fb ffcc 	bl	800eaa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012b08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	20007c50 	.word	0x20007c50

08012b18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	460b      	mov	r3, r1
 8012b22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012b24:	2300      	movs	r3, #0
 8012b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012b28:	4b0d      	ldr	r3, [pc, #52]	; (8012b60 <CDC_Transmit_FS+0x48>)
 8012b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d001      	beq.n	8012b3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e00b      	b.n	8012b56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012b3e:	887b      	ldrh	r3, [r7, #2]
 8012b40:	461a      	mov	r2, r3
 8012b42:	6879      	ldr	r1, [r7, #4]
 8012b44:	4806      	ldr	r0, [pc, #24]	; (8012b60 <CDC_Transmit_FS+0x48>)
 8012b46:	f7fb ff44 	bl	800e9d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012b4a:	4805      	ldr	r0, [pc, #20]	; (8012b60 <CDC_Transmit_FS+0x48>)
 8012b4c:	f7fb ff78 	bl	800ea40 <USBD_CDC_TransmitPacket>
 8012b50:	4603      	mov	r3, r0
 8012b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	20007c50 	.word	0x20007c50

08012b64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012b64:	b480      	push	{r7}
 8012b66:	b087      	sub	sp, #28
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012b72:	2300      	movs	r3, #0
 8012b74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	371c      	adds	r7, #28
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
	...

08012b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	4603      	mov	r3, r0
 8012b90:	6039      	str	r1, [r7, #0]
 8012b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	2212      	movs	r2, #18
 8012b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012b9a:	4b03      	ldr	r3, [pc, #12]	; (8012ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	2000035c 	.word	0x2000035c

08012bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	6039      	str	r1, [r7, #0]
 8012bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	2204      	movs	r2, #4
 8012bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012bbe:	4b03      	ldr	r3, [pc, #12]	; (8012bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	370c      	adds	r7, #12
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr
 8012bcc:	2000037c 	.word	0x2000037c

08012bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	6039      	str	r1, [r7, #0]
 8012bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012bdc:	79fb      	ldrb	r3, [r7, #7]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d105      	bne.n	8012bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	4907      	ldr	r1, [pc, #28]	; (8012c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8012be6:	4808      	ldr	r0, [pc, #32]	; (8012c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8012be8:	f7fd f837 	bl	800fc5a <USBD_GetString>
 8012bec:	e004      	b.n	8012bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	4904      	ldr	r1, [pc, #16]	; (8012c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8012bf2:	4805      	ldr	r0, [pc, #20]	; (8012c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8012bf4:	f7fd f831 	bl	800fc5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bf8:	4b02      	ldr	r3, [pc, #8]	; (8012c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	20008f20 	.word	0x20008f20
 8012c08:	080169cc 	.word	0x080169cc

08012c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	4603      	mov	r3, r0
 8012c14:	6039      	str	r1, [r7, #0]
 8012c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012c18:	683a      	ldr	r2, [r7, #0]
 8012c1a:	4904      	ldr	r1, [pc, #16]	; (8012c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012c1c:	4804      	ldr	r0, [pc, #16]	; (8012c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012c1e:	f7fd f81c 	bl	800fc5a <USBD_GetString>
  return USBD_StrDesc;
 8012c22:	4b02      	ldr	r3, [pc, #8]	; (8012c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	20008f20 	.word	0x20008f20
 8012c30:	080169e4 	.word	0x080169e4

08012c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	6039      	str	r1, [r7, #0]
 8012c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	221a      	movs	r2, #26
 8012c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c46:	f000 f855 	bl	8012cf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012c4a:	4b02      	ldr	r3, [pc, #8]	; (8012c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	20000380 	.word	0x20000380

08012c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	4603      	mov	r3, r0
 8012c60:	6039      	str	r1, [r7, #0]
 8012c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012c64:	79fb      	ldrb	r3, [r7, #7]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d105      	bne.n	8012c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c6a:	683a      	ldr	r2, [r7, #0]
 8012c6c:	4907      	ldr	r1, [pc, #28]	; (8012c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c6e:	4808      	ldr	r0, [pc, #32]	; (8012c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c70:	f7fc fff3 	bl	800fc5a <USBD_GetString>
 8012c74:	e004      	b.n	8012c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c76:	683a      	ldr	r2, [r7, #0]
 8012c78:	4904      	ldr	r1, [pc, #16]	; (8012c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c7a:	4805      	ldr	r0, [pc, #20]	; (8012c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c7c:	f7fc ffed 	bl	800fc5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c80:	4b02      	ldr	r3, [pc, #8]	; (8012c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3708      	adds	r7, #8
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	20008f20 	.word	0x20008f20
 8012c90:	080169f8 	.word	0x080169f8

08012c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	6039      	str	r1, [r7, #0]
 8012c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ca0:	79fb      	ldrb	r3, [r7, #7]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d105      	bne.n	8012cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012ca6:	683a      	ldr	r2, [r7, #0]
 8012ca8:	4907      	ldr	r1, [pc, #28]	; (8012cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012caa:	4808      	ldr	r0, [pc, #32]	; (8012ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012cac:	f7fc ffd5 	bl	800fc5a <USBD_GetString>
 8012cb0:	e004      	b.n	8012cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012cb2:	683a      	ldr	r2, [r7, #0]
 8012cb4:	4904      	ldr	r1, [pc, #16]	; (8012cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012cb6:	4805      	ldr	r0, [pc, #20]	; (8012ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012cb8:	f7fc ffcf 	bl	800fc5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cbc:	4b02      	ldr	r3, [pc, #8]	; (8012cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3708      	adds	r7, #8
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20008f20 	.word	0x20008f20
 8012ccc:	08016a04 	.word	0x08016a04

08012cd0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	6039      	str	r1, [r7, #0]
 8012cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	220c      	movs	r2, #12
 8012ce0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012ce2:	4b03      	ldr	r3, [pc, #12]	; (8012cf0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr
 8012cf0:	20000370 	.word	0x20000370

08012cf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012cfa:	4b0f      	ldr	r3, [pc, #60]	; (8012d38 <Get_SerialNum+0x44>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d00:	4b0e      	ldr	r3, [pc, #56]	; (8012d3c <Get_SerialNum+0x48>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d06:	4b0e      	ldr	r3, [pc, #56]	; (8012d40 <Get_SerialNum+0x4c>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012d0c:	68fa      	ldr	r2, [r7, #12]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4413      	add	r3, r2
 8012d12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d009      	beq.n	8012d2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012d1a:	2208      	movs	r2, #8
 8012d1c:	4909      	ldr	r1, [pc, #36]	; (8012d44 <Get_SerialNum+0x50>)
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f000 f814 	bl	8012d4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012d24:	2204      	movs	r2, #4
 8012d26:	4908      	ldr	r1, [pc, #32]	; (8012d48 <Get_SerialNum+0x54>)
 8012d28:	68b8      	ldr	r0, [r7, #8]
 8012d2a:	f000 f80f 	bl	8012d4c <IntToUnicode>
  }
}
 8012d2e:	bf00      	nop
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	1fff7590 	.word	0x1fff7590
 8012d3c:	1fff7594 	.word	0x1fff7594
 8012d40:	1fff7598 	.word	0x1fff7598
 8012d44:	20000382 	.word	0x20000382
 8012d48:	20000392 	.word	0x20000392

08012d4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b087      	sub	sp, #28
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	60f8      	str	r0, [r7, #12]
 8012d54:	60b9      	str	r1, [r7, #8]
 8012d56:	4613      	mov	r3, r2
 8012d58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d5e:	2300      	movs	r3, #0
 8012d60:	75fb      	strb	r3, [r7, #23]
 8012d62:	e027      	b.n	8012db4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	0f1b      	lsrs	r3, r3, #28
 8012d68:	2b09      	cmp	r3, #9
 8012d6a:	d80b      	bhi.n	8012d84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	0f1b      	lsrs	r3, r3, #28
 8012d70:	b2da      	uxtb	r2, r3
 8012d72:	7dfb      	ldrb	r3, [r7, #23]
 8012d74:	005b      	lsls	r3, r3, #1
 8012d76:	4619      	mov	r1, r3
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	440b      	add	r3, r1
 8012d7c:	3230      	adds	r2, #48	; 0x30
 8012d7e:	b2d2      	uxtb	r2, r2
 8012d80:	701a      	strb	r2, [r3, #0]
 8012d82:	e00a      	b.n	8012d9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	0f1b      	lsrs	r3, r3, #28
 8012d88:	b2da      	uxtb	r2, r3
 8012d8a:	7dfb      	ldrb	r3, [r7, #23]
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	4619      	mov	r1, r3
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	440b      	add	r3, r1
 8012d94:	3237      	adds	r2, #55	; 0x37
 8012d96:	b2d2      	uxtb	r2, r2
 8012d98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	011b      	lsls	r3, r3, #4
 8012d9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012da0:	7dfb      	ldrb	r3, [r7, #23]
 8012da2:	005b      	lsls	r3, r3, #1
 8012da4:	3301      	adds	r3, #1
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	4413      	add	r3, r2
 8012daa:	2200      	movs	r2, #0
 8012dac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	3301      	adds	r3, #1
 8012db2:	75fb      	strb	r3, [r7, #23]
 8012db4:	7dfa      	ldrb	r2, [r7, #23]
 8012db6:	79fb      	ldrb	r3, [r7, #7]
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d3d3      	bcc.n	8012d64 <IntToUnicode+0x18>
  }
}
 8012dbc:	bf00      	nop
 8012dbe:	bf00      	nop
 8012dc0:	371c      	adds	r7, #28
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr
	...

08012dcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b0b0      	sub	sp, #192	; 0xc0
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012dd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012dd8:	2200      	movs	r2, #0
 8012dda:	601a      	str	r2, [r3, #0]
 8012ddc:	605a      	str	r2, [r3, #4]
 8012dde:	609a      	str	r2, [r3, #8]
 8012de0:	60da      	str	r2, [r3, #12]
 8012de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012de4:	f107 0314 	add.w	r3, r7, #20
 8012de8:	2298      	movs	r2, #152	; 0x98
 8012dea:	2100      	movs	r1, #0
 8012dec:	4618      	mov	r0, r3
 8012dee:	f000 fe9e 	bl	8013b2e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012dfa:	d163      	bne.n	8012ec4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012e00:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012e02:	2300      	movs	r3, #0
 8012e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012e08:	f107 0314 	add.w	r3, r7, #20
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f7 fcdd 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d001      	beq.n	8012e1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012e18:	f7f0 ff5e 	bl	8003cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e1c:	4b2b      	ldr	r3, [pc, #172]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e20:	4a2a      	ldr	r2, [pc, #168]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e22:	f043 0301 	orr.w	r3, r3, #1
 8012e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e28:	4b28      	ldr	r3, [pc, #160]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e2c:	f003 0301 	and.w	r3, r3, #1
 8012e30:	613b      	str	r3, [r7, #16]
 8012e32:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012e34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e3c:	2302      	movs	r3, #2
 8012e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e42:	2300      	movs	r3, #0
 8012e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e48:	2303      	movs	r3, #3
 8012e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012e4e:	230a      	movs	r3, #10
 8012e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012e58:	4619      	mov	r1, r3
 8012e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012e5e:	f7f5 f89f 	bl	8007fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012e62:	4b1a      	ldr	r3, [pc, #104]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e66:	4a19      	ldr	r2, [pc, #100]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e6e:	4b17      	ldr	r3, [pc, #92]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012e76:	60fb      	str	r3, [r7, #12]
 8012e78:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012e7a:	4b14      	ldr	r3, [pc, #80]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d114      	bne.n	8012eb0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012e86:	4b11      	ldr	r3, [pc, #68]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e8a:	4a10      	ldr	r2, [pc, #64]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e90:	6593      	str	r3, [r2, #88]	; 0x58
 8012e92:	4b0e      	ldr	r3, [pc, #56]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e9a:	60bb      	str	r3, [r7, #8]
 8012e9c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012e9e:	f7f6 fcdd 	bl	800985c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012ea2:	4b0a      	ldr	r3, [pc, #40]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ea6:	4a09      	ldr	r2, [pc, #36]	; (8012ecc <HAL_PCD_MspInit+0x100>)
 8012ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012eac:	6593      	str	r3, [r2, #88]	; 0x58
 8012eae:	e001      	b.n	8012eb4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012eb0:	f7f6 fcd4 	bl	800985c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	2105      	movs	r1, #5
 8012eb8:	2043      	movs	r0, #67	; 0x43
 8012eba:	f7f4 fdd5 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012ebe:	2043      	movs	r0, #67	; 0x43
 8012ec0:	f7f4 fdee 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012ec4:	bf00      	nop
 8012ec6:	37c0      	adds	r7, #192	; 0xc0
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	40021000 	.word	0x40021000

08012ed0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	4610      	mov	r0, r2
 8012ee8:	f7fb fea6 	bl	800ec38 <USBD_LL_SetupStage>
}
 8012eec:	bf00      	nop
 8012eee:	3708      	adds	r7, #8
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	460b      	mov	r3, r1
 8012efe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012f06:	78fa      	ldrb	r2, [r7, #3]
 8012f08:	6879      	ldr	r1, [r7, #4]
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	00db      	lsls	r3, r3, #3
 8012f0e:	4413      	add	r3, r2
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	440b      	add	r3, r1
 8012f14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	78fb      	ldrb	r3, [r7, #3]
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	f7fb fee0 	bl	800ece2 <USBD_LL_DataOutStage>
}
 8012f22:	bf00      	nop
 8012f24:	3708      	adds	r7, #8
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}

08012f2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f2a:	b580      	push	{r7, lr}
 8012f2c:	b082      	sub	sp, #8
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
 8012f32:	460b      	mov	r3, r1
 8012f34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012f3c:	78fa      	ldrb	r2, [r7, #3]
 8012f3e:	6879      	ldr	r1, [r7, #4]
 8012f40:	4613      	mov	r3, r2
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	4413      	add	r3, r2
 8012f46:	009b      	lsls	r3, r3, #2
 8012f48:	440b      	add	r3, r1
 8012f4a:	334c      	adds	r3, #76	; 0x4c
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	78fb      	ldrb	r3, [r7, #3]
 8012f50:	4619      	mov	r1, r3
 8012f52:	f7fb ff29 	bl	800eda8 <USBD_LL_DataInStage>
}
 8012f56:	bf00      	nop
 8012f58:	3708      	adds	r7, #8
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}

08012f5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f5e:	b580      	push	{r7, lr}
 8012f60:	b082      	sub	sp, #8
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fc f83d 	bl	800efec <USBD_LL_SOF>
}
 8012f72:	bf00      	nop
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b084      	sub	sp, #16
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012f82:	2301      	movs	r3, #1
 8012f84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	2b02      	cmp	r3, #2
 8012f8c:	d001      	beq.n	8012f92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012f8e:	f7f0 fea3 	bl	8003cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f98:	7bfa      	ldrb	r2, [r7, #15]
 8012f9a:	4611      	mov	r1, r2
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fb ffe7 	bl	800ef70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fb ff93 	bl	800eed4 <USBD_LL_Reset>
}
 8012fae:	bf00      	nop
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
	...

08012fb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	6812      	ldr	r2, [r2, #0]
 8012fce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012fd2:	f043 0301 	orr.w	r3, r3, #1
 8012fd6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7fb ffd6 	bl	800ef90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6a1b      	ldr	r3, [r3, #32]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d005      	beq.n	8012ff8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012fec:	4b04      	ldr	r3, [pc, #16]	; (8013000 <HAL_PCD_SuspendCallback+0x48>)
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	4a03      	ldr	r2, [pc, #12]	; (8013000 <HAL_PCD_SuspendCallback+0x48>)
 8012ff2:	f043 0306 	orr.w	r3, r3, #6
 8012ff6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	e000ed00 	.word	0xe000ed00

08013004 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	6812      	ldr	r2, [r2, #0]
 801301a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801301e:	f023 0301 	bic.w	r3, r3, #1
 8013022:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6a1b      	ldr	r3, [r3, #32]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d007      	beq.n	801303c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801302c:	4b08      	ldr	r3, [pc, #32]	; (8013050 <HAL_PCD_ResumeCallback+0x4c>)
 801302e:	691b      	ldr	r3, [r3, #16]
 8013030:	4a07      	ldr	r2, [pc, #28]	; (8013050 <HAL_PCD_ResumeCallback+0x4c>)
 8013032:	f023 0306 	bic.w	r3, r3, #6
 8013036:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013038:	f000 faf4 	bl	8013624 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013042:	4618      	mov	r0, r3
 8013044:	f7fb ffba 	bl	800efbc <USBD_LL_Resume>
}
 8013048:	bf00      	nop
 801304a:	3708      	adds	r7, #8
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	e000ed00 	.word	0xe000ed00

08013054 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	460b      	mov	r3, r1
 801305e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013066:	78fa      	ldrb	r2, [r7, #3]
 8013068:	4611      	mov	r1, r2
 801306a:	4618      	mov	r0, r3
 801306c:	f7fc f806 	bl	800f07c <USBD_LL_IsoOUTIncomplete>
}
 8013070:	bf00      	nop
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}

08013078 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801308a:	78fa      	ldrb	r2, [r7, #3]
 801308c:	4611      	mov	r1, r2
 801308e:	4618      	mov	r0, r3
 8013090:	f7fb ffce 	bl	800f030 <USBD_LL_IsoINIncomplete>
}
 8013094:	bf00      	nop
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fc f80c 	bl	800f0c8 <USBD_LL_DevConnected>
}
 80130b0:	bf00      	nop
 80130b2:	3708      	adds	r7, #8
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fc f809 	bl	800f0de <USBD_LL_DevDisconnected>
}
 80130cc:	bf00      	nop
 80130ce:	3708      	adds	r7, #8
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}

080130d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d139      	bne.n	8013158 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80130e4:	4a1f      	ldr	r2, [pc, #124]	; (8013164 <USBD_LL_Init+0x90>)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	4a1d      	ldr	r2, [pc, #116]	; (8013164 <USBD_LL_Init+0x90>)
 80130f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80130f4:	4b1b      	ldr	r3, [pc, #108]	; (8013164 <USBD_LL_Init+0x90>)
 80130f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80130fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80130fc:	4b19      	ldr	r3, [pc, #100]	; (8013164 <USBD_LL_Init+0x90>)
 80130fe:	2206      	movs	r2, #6
 8013100:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013102:	4b18      	ldr	r3, [pc, #96]	; (8013164 <USBD_LL_Init+0x90>)
 8013104:	2202      	movs	r2, #2
 8013106:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013108:	4b16      	ldr	r3, [pc, #88]	; (8013164 <USBD_LL_Init+0x90>)
 801310a:	2200      	movs	r2, #0
 801310c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801310e:	4b15      	ldr	r3, [pc, #84]	; (8013164 <USBD_LL_Init+0x90>)
 8013110:	2200      	movs	r2, #0
 8013112:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013114:	4b13      	ldr	r3, [pc, #76]	; (8013164 <USBD_LL_Init+0x90>)
 8013116:	2200      	movs	r2, #0
 8013118:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801311a:	4b12      	ldr	r3, [pc, #72]	; (8013164 <USBD_LL_Init+0x90>)
 801311c:	2200      	movs	r2, #0
 801311e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013120:	4b10      	ldr	r3, [pc, #64]	; (8013164 <USBD_LL_Init+0x90>)
 8013122:	2200      	movs	r2, #0
 8013124:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013126:	4b0f      	ldr	r3, [pc, #60]	; (8013164 <USBD_LL_Init+0x90>)
 8013128:	2200      	movs	r2, #0
 801312a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801312c:	480d      	ldr	r0, [pc, #52]	; (8013164 <USBD_LL_Init+0x90>)
 801312e:	f7f5 f8f9 	bl	8008324 <HAL_PCD_Init>
 8013132:	4603      	mov	r3, r0
 8013134:	2b00      	cmp	r3, #0
 8013136:	d001      	beq.n	801313c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013138:	f7f0 fdce 	bl	8003cd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801313c:	2180      	movs	r1, #128	; 0x80
 801313e:	4809      	ldr	r0, [pc, #36]	; (8013164 <USBD_LL_Init+0x90>)
 8013140:	f7f6 fa7b 	bl	800963a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013144:	2240      	movs	r2, #64	; 0x40
 8013146:	2100      	movs	r1, #0
 8013148:	4806      	ldr	r0, [pc, #24]	; (8013164 <USBD_LL_Init+0x90>)
 801314a:	f7f6 fa2f 	bl	80095ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801314e:	2280      	movs	r2, #128	; 0x80
 8013150:	2101      	movs	r1, #1
 8013152:	4804      	ldr	r0, [pc, #16]	; (8013164 <USBD_LL_Init+0x90>)
 8013154:	f7f6 fa2a 	bl	80095ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3708      	adds	r7, #8
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	20009120 	.word	0x20009120

08013168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013170:	2300      	movs	r3, #0
 8013172:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013174:	2300      	movs	r3, #0
 8013176:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801317e:	4618      	mov	r0, r3
 8013180:	f7f5 f9f4 	bl	800856c <HAL_PCD_Start>
 8013184:	4603      	mov	r3, r0
 8013186:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013188:	7bbb      	ldrb	r3, [r7, #14]
 801318a:	2b03      	cmp	r3, #3
 801318c:	d816      	bhi.n	80131bc <USBD_LL_Start+0x54>
 801318e:	a201      	add	r2, pc, #4	; (adr r2, 8013194 <USBD_LL_Start+0x2c>)
 8013190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013194:	080131a5 	.word	0x080131a5
 8013198:	080131ab 	.word	0x080131ab
 801319c:	080131b1 	.word	0x080131b1
 80131a0:	080131b7 	.word	0x080131b7
    case HAL_OK :
      usb_status = USBD_OK;
 80131a4:	2300      	movs	r3, #0
 80131a6:	73fb      	strb	r3, [r7, #15]
    break;
 80131a8:	e00b      	b.n	80131c2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80131aa:	2303      	movs	r3, #3
 80131ac:	73fb      	strb	r3, [r7, #15]
    break;
 80131ae:	e008      	b.n	80131c2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131b0:	2301      	movs	r3, #1
 80131b2:	73fb      	strb	r3, [r7, #15]
    break;
 80131b4:	e005      	b.n	80131c2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131b6:	2303      	movs	r3, #3
 80131b8:	73fb      	strb	r3, [r7, #15]
    break;
 80131ba:	e002      	b.n	80131c2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80131bc:	2303      	movs	r3, #3
 80131be:	73fb      	strb	r3, [r7, #15]
    break;
 80131c0:	bf00      	nop
  }
  return usb_status;
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3710      	adds	r7, #16
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	4608      	mov	r0, r1
 80131d6:	4611      	mov	r1, r2
 80131d8:	461a      	mov	r2, r3
 80131da:	4603      	mov	r3, r0
 80131dc:	70fb      	strb	r3, [r7, #3]
 80131de:	460b      	mov	r3, r1
 80131e0:	70bb      	strb	r3, [r7, #2]
 80131e2:	4613      	mov	r3, r2
 80131e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131e6:	2300      	movs	r3, #0
 80131e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131ea:	2300      	movs	r3, #0
 80131ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80131f4:	78bb      	ldrb	r3, [r7, #2]
 80131f6:	883a      	ldrh	r2, [r7, #0]
 80131f8:	78f9      	ldrb	r1, [r7, #3]
 80131fa:	f7f5 fe9e 	bl	8008f3a <HAL_PCD_EP_Open>
 80131fe:	4603      	mov	r3, r0
 8013200:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013202:	7bbb      	ldrb	r3, [r7, #14]
 8013204:	2b03      	cmp	r3, #3
 8013206:	d817      	bhi.n	8013238 <USBD_LL_OpenEP+0x6c>
 8013208:	a201      	add	r2, pc, #4	; (adr r2, 8013210 <USBD_LL_OpenEP+0x44>)
 801320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801320e:	bf00      	nop
 8013210:	08013221 	.word	0x08013221
 8013214:	08013227 	.word	0x08013227
 8013218:	0801322d 	.word	0x0801322d
 801321c:	08013233 	.word	0x08013233
    case HAL_OK :
      usb_status = USBD_OK;
 8013220:	2300      	movs	r3, #0
 8013222:	73fb      	strb	r3, [r7, #15]
    break;
 8013224:	e00b      	b.n	801323e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013226:	2303      	movs	r3, #3
 8013228:	73fb      	strb	r3, [r7, #15]
    break;
 801322a:	e008      	b.n	801323e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801322c:	2301      	movs	r3, #1
 801322e:	73fb      	strb	r3, [r7, #15]
    break;
 8013230:	e005      	b.n	801323e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013232:	2303      	movs	r3, #3
 8013234:	73fb      	strb	r3, [r7, #15]
    break;
 8013236:	e002      	b.n	801323e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013238:	2303      	movs	r3, #3
 801323a:	73fb      	strb	r3, [r7, #15]
    break;
 801323c:	bf00      	nop
  }
  return usb_status;
 801323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013240:	4618      	mov	r0, r3
 8013242:	3710      	adds	r7, #16
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}

08013248 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	460b      	mov	r3, r1
 8013252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013254:	2300      	movs	r3, #0
 8013256:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013258:	2300      	movs	r3, #0
 801325a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013262:	78fa      	ldrb	r2, [r7, #3]
 8013264:	4611      	mov	r1, r2
 8013266:	4618      	mov	r0, r3
 8013268:	f7f5 fecf 	bl	800900a <HAL_PCD_EP_Close>
 801326c:	4603      	mov	r3, r0
 801326e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013270:	7bbb      	ldrb	r3, [r7, #14]
 8013272:	2b03      	cmp	r3, #3
 8013274:	d816      	bhi.n	80132a4 <USBD_LL_CloseEP+0x5c>
 8013276:	a201      	add	r2, pc, #4	; (adr r2, 801327c <USBD_LL_CloseEP+0x34>)
 8013278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327c:	0801328d 	.word	0x0801328d
 8013280:	08013293 	.word	0x08013293
 8013284:	08013299 	.word	0x08013299
 8013288:	0801329f 	.word	0x0801329f
    case HAL_OK :
      usb_status = USBD_OK;
 801328c:	2300      	movs	r3, #0
 801328e:	73fb      	strb	r3, [r7, #15]
    break;
 8013290:	e00b      	b.n	80132aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013292:	2303      	movs	r3, #3
 8013294:	73fb      	strb	r3, [r7, #15]
    break;
 8013296:	e008      	b.n	80132aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013298:	2301      	movs	r3, #1
 801329a:	73fb      	strb	r3, [r7, #15]
    break;
 801329c:	e005      	b.n	80132aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801329e:	2303      	movs	r3, #3
 80132a0:	73fb      	strb	r3, [r7, #15]
    break;
 80132a2:	e002      	b.n	80132aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80132a4:	2303      	movs	r3, #3
 80132a6:	73fb      	strb	r3, [r7, #15]
    break;
 80132a8:	bf00      	nop
  }
  return usb_status;
 80132aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
 80132bc:	460b      	mov	r3, r1
 80132be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132c0:	2300      	movs	r3, #0
 80132c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132c4:	2300      	movs	r3, #0
 80132c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132ce:	78fa      	ldrb	r2, [r7, #3]
 80132d0:	4611      	mov	r1, r2
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7f5 ff76 	bl	80091c4 <HAL_PCD_EP_SetStall>
 80132d8:	4603      	mov	r3, r0
 80132da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80132dc:	7bbb      	ldrb	r3, [r7, #14]
 80132de:	2b03      	cmp	r3, #3
 80132e0:	d816      	bhi.n	8013310 <USBD_LL_StallEP+0x5c>
 80132e2:	a201      	add	r2, pc, #4	; (adr r2, 80132e8 <USBD_LL_StallEP+0x34>)
 80132e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132e8:	080132f9 	.word	0x080132f9
 80132ec:	080132ff 	.word	0x080132ff
 80132f0:	08013305 	.word	0x08013305
 80132f4:	0801330b 	.word	0x0801330b
    case HAL_OK :
      usb_status = USBD_OK;
 80132f8:	2300      	movs	r3, #0
 80132fa:	73fb      	strb	r3, [r7, #15]
    break;
 80132fc:	e00b      	b.n	8013316 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132fe:	2303      	movs	r3, #3
 8013300:	73fb      	strb	r3, [r7, #15]
    break;
 8013302:	e008      	b.n	8013316 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013304:	2301      	movs	r3, #1
 8013306:	73fb      	strb	r3, [r7, #15]
    break;
 8013308:	e005      	b.n	8013316 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801330a:	2303      	movs	r3, #3
 801330c:	73fb      	strb	r3, [r7, #15]
    break;
 801330e:	e002      	b.n	8013316 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013310:	2303      	movs	r3, #3
 8013312:	73fb      	strb	r3, [r7, #15]
    break;
 8013314:	bf00      	nop
  }
  return usb_status;
 8013316:	7bfb      	ldrb	r3, [r7, #15]
}
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	460b      	mov	r3, r1
 801332a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013330:	2300      	movs	r3, #0
 8013332:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801333a:	78fa      	ldrb	r2, [r7, #3]
 801333c:	4611      	mov	r1, r2
 801333e:	4618      	mov	r0, r3
 8013340:	f7f5 ffa2 	bl	8009288 <HAL_PCD_EP_ClrStall>
 8013344:	4603      	mov	r3, r0
 8013346:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013348:	7bbb      	ldrb	r3, [r7, #14]
 801334a:	2b03      	cmp	r3, #3
 801334c:	d816      	bhi.n	801337c <USBD_LL_ClearStallEP+0x5c>
 801334e:	a201      	add	r2, pc, #4	; (adr r2, 8013354 <USBD_LL_ClearStallEP+0x34>)
 8013350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013354:	08013365 	.word	0x08013365
 8013358:	0801336b 	.word	0x0801336b
 801335c:	08013371 	.word	0x08013371
 8013360:	08013377 	.word	0x08013377
    case HAL_OK :
      usb_status = USBD_OK;
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]
    break;
 8013368:	e00b      	b.n	8013382 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801336a:	2303      	movs	r3, #3
 801336c:	73fb      	strb	r3, [r7, #15]
    break;
 801336e:	e008      	b.n	8013382 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013370:	2301      	movs	r3, #1
 8013372:	73fb      	strb	r3, [r7, #15]
    break;
 8013374:	e005      	b.n	8013382 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013376:	2303      	movs	r3, #3
 8013378:	73fb      	strb	r3, [r7, #15]
    break;
 801337a:	e002      	b.n	8013382 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801337c:	2303      	movs	r3, #3
 801337e:	73fb      	strb	r3, [r7, #15]
    break;
 8013380:	bf00      	nop
  }
  return usb_status;
 8013382:	7bfb      	ldrb	r3, [r7, #15]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801338c:	b480      	push	{r7}
 801338e:	b085      	sub	sp, #20
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	460b      	mov	r3, r1
 8013396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801339e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80133a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	da0b      	bge.n	80133c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80133a8:	78fb      	ldrb	r3, [r7, #3]
 80133aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133ae:	68f9      	ldr	r1, [r7, #12]
 80133b0:	4613      	mov	r3, r2
 80133b2:	00db      	lsls	r3, r3, #3
 80133b4:	4413      	add	r3, r2
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	440b      	add	r3, r1
 80133ba:	333e      	adds	r3, #62	; 0x3e
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	e00b      	b.n	80133d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80133c0:	78fb      	ldrb	r3, [r7, #3]
 80133c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133c6:	68f9      	ldr	r1, [r7, #12]
 80133c8:	4613      	mov	r3, r2
 80133ca:	00db      	lsls	r3, r3, #3
 80133cc:	4413      	add	r3, r2
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	440b      	add	r3, r1
 80133d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80133d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3714      	adds	r7, #20
 80133dc:	46bd      	mov	sp, r7
 80133de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e2:	4770      	bx	lr

080133e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	460b      	mov	r3, r1
 80133ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133f0:	2300      	movs	r3, #0
 80133f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133f4:	2300      	movs	r3, #0
 80133f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133fe:	78fa      	ldrb	r2, [r7, #3]
 8013400:	4611      	mov	r1, r2
 8013402:	4618      	mov	r0, r3
 8013404:	f7f5 fd74 	bl	8008ef0 <HAL_PCD_SetAddress>
 8013408:	4603      	mov	r3, r0
 801340a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801340c:	7bbb      	ldrb	r3, [r7, #14]
 801340e:	2b03      	cmp	r3, #3
 8013410:	d816      	bhi.n	8013440 <USBD_LL_SetUSBAddress+0x5c>
 8013412:	a201      	add	r2, pc, #4	; (adr r2, 8013418 <USBD_LL_SetUSBAddress+0x34>)
 8013414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013418:	08013429 	.word	0x08013429
 801341c:	0801342f 	.word	0x0801342f
 8013420:	08013435 	.word	0x08013435
 8013424:	0801343b 	.word	0x0801343b
    case HAL_OK :
      usb_status = USBD_OK;
 8013428:	2300      	movs	r3, #0
 801342a:	73fb      	strb	r3, [r7, #15]
    break;
 801342c:	e00b      	b.n	8013446 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801342e:	2303      	movs	r3, #3
 8013430:	73fb      	strb	r3, [r7, #15]
    break;
 8013432:	e008      	b.n	8013446 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013434:	2301      	movs	r3, #1
 8013436:	73fb      	strb	r3, [r7, #15]
    break;
 8013438:	e005      	b.n	8013446 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801343a:	2303      	movs	r3, #3
 801343c:	73fb      	strb	r3, [r7, #15]
    break;
 801343e:	e002      	b.n	8013446 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013440:	2303      	movs	r3, #3
 8013442:	73fb      	strb	r3, [r7, #15]
    break;
 8013444:	bf00      	nop
  }
  return usb_status;
 8013446:	7bfb      	ldrb	r3, [r7, #15]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3710      	adds	r7, #16
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	607a      	str	r2, [r7, #4]
 801345a:	603b      	str	r3, [r7, #0]
 801345c:	460b      	mov	r3, r1
 801345e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013460:	2300      	movs	r3, #0
 8013462:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013464:	2300      	movs	r3, #0
 8013466:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801346e:	7af9      	ldrb	r1, [r7, #11]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	f7f5 fe69 	bl	800914a <HAL_PCD_EP_Transmit>
 8013478:	4603      	mov	r3, r0
 801347a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801347c:	7dbb      	ldrb	r3, [r7, #22]
 801347e:	2b03      	cmp	r3, #3
 8013480:	d816      	bhi.n	80134b0 <USBD_LL_Transmit+0x60>
 8013482:	a201      	add	r2, pc, #4	; (adr r2, 8013488 <USBD_LL_Transmit+0x38>)
 8013484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013488:	08013499 	.word	0x08013499
 801348c:	0801349f 	.word	0x0801349f
 8013490:	080134a5 	.word	0x080134a5
 8013494:	080134ab 	.word	0x080134ab
    case HAL_OK :
      usb_status = USBD_OK;
 8013498:	2300      	movs	r3, #0
 801349a:	75fb      	strb	r3, [r7, #23]
    break;
 801349c:	e00b      	b.n	80134b6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801349e:	2303      	movs	r3, #3
 80134a0:	75fb      	strb	r3, [r7, #23]
    break;
 80134a2:	e008      	b.n	80134b6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134a4:	2301      	movs	r3, #1
 80134a6:	75fb      	strb	r3, [r7, #23]
    break;
 80134a8:	e005      	b.n	80134b6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134aa:	2303      	movs	r3, #3
 80134ac:	75fb      	strb	r3, [r7, #23]
    break;
 80134ae:	e002      	b.n	80134b6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80134b0:	2303      	movs	r3, #3
 80134b2:	75fb      	strb	r3, [r7, #23]
    break;
 80134b4:	bf00      	nop
  }
  return usb_status;
 80134b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3718      	adds	r7, #24
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b086      	sub	sp, #24
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	607a      	str	r2, [r7, #4]
 80134ca:	603b      	str	r3, [r7, #0]
 80134cc:	460b      	mov	r3, r1
 80134ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134d0:	2300      	movs	r3, #0
 80134d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134d4:	2300      	movs	r3, #0
 80134d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134de:	7af9      	ldrb	r1, [r7, #11]
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	f7f5 fddb 	bl	800909e <HAL_PCD_EP_Receive>
 80134e8:	4603      	mov	r3, r0
 80134ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80134ec:	7dbb      	ldrb	r3, [r7, #22]
 80134ee:	2b03      	cmp	r3, #3
 80134f0:	d816      	bhi.n	8013520 <USBD_LL_PrepareReceive+0x60>
 80134f2:	a201      	add	r2, pc, #4	; (adr r2, 80134f8 <USBD_LL_PrepareReceive+0x38>)
 80134f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f8:	08013509 	.word	0x08013509
 80134fc:	0801350f 	.word	0x0801350f
 8013500:	08013515 	.word	0x08013515
 8013504:	0801351b 	.word	0x0801351b
    case HAL_OK :
      usb_status = USBD_OK;
 8013508:	2300      	movs	r3, #0
 801350a:	75fb      	strb	r3, [r7, #23]
    break;
 801350c:	e00b      	b.n	8013526 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801350e:	2303      	movs	r3, #3
 8013510:	75fb      	strb	r3, [r7, #23]
    break;
 8013512:	e008      	b.n	8013526 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013514:	2301      	movs	r3, #1
 8013516:	75fb      	strb	r3, [r7, #23]
    break;
 8013518:	e005      	b.n	8013526 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801351a:	2303      	movs	r3, #3
 801351c:	75fb      	strb	r3, [r7, #23]
    break;
 801351e:	e002      	b.n	8013526 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013520:	2303      	movs	r3, #3
 8013522:	75fb      	strb	r3, [r7, #23]
    break;
 8013524:	bf00      	nop
  }
  return usb_status;
 8013526:	7dfb      	ldrb	r3, [r7, #23]
}
 8013528:	4618      	mov	r0, r3
 801352a:	3718      	adds	r7, #24
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	460b      	mov	r3, r1
 801353a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013542:	78fa      	ldrb	r2, [r7, #3]
 8013544:	4611      	mov	r1, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f7f5 fde7 	bl	800911a <HAL_PCD_EP_GetRxCount>
 801354c:	4603      	mov	r3, r0
}
 801354e:	4618      	mov	r0, r3
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
	...

08013558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	460b      	mov	r3, r1
 8013562:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013564:	78fb      	ldrb	r3, [r7, #3]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d002      	beq.n	8013570 <HAL_PCDEx_LPM_Callback+0x18>
 801356a:	2b01      	cmp	r3, #1
 801356c:	d01f      	beq.n	80135ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801356e:	e03b      	b.n	80135e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6a1b      	ldr	r3, [r3, #32]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d007      	beq.n	8013588 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013578:	f000 f854 	bl	8013624 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801357c:	4b1c      	ldr	r3, [pc, #112]	; (80135f0 <HAL_PCDEx_LPM_Callback+0x98>)
 801357e:	691b      	ldr	r3, [r3, #16]
 8013580:	4a1b      	ldr	r2, [pc, #108]	; (80135f0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013582:	f023 0306 	bic.w	r3, r3, #6
 8013586:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	687a      	ldr	r2, [r7, #4]
 8013594:	6812      	ldr	r2, [r2, #0]
 8013596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801359a:	f023 0301 	bic.w	r3, r3, #1
 801359e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fb fd08 	bl	800efbc <USBD_LL_Resume>
    break;
 80135ac:	e01c      	b.n	80135e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	6812      	ldr	r2, [r2, #0]
 80135bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80135c0:	f043 0301 	orr.w	r3, r3, #1
 80135c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fb fcdf 	bl	800ef90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a1b      	ldr	r3, [r3, #32]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d005      	beq.n	80135e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80135da:	4b05      	ldr	r3, [pc, #20]	; (80135f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80135dc:	691b      	ldr	r3, [r3, #16]
 80135de:	4a04      	ldr	r2, [pc, #16]	; (80135f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80135e0:	f043 0306 	orr.w	r3, r3, #6
 80135e4:	6113      	str	r3, [r2, #16]
    break;
 80135e6:	bf00      	nop
}
 80135e8:	bf00      	nop
 80135ea:	3708      	adds	r7, #8
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	e000ed00 	.word	0xe000ed00

080135f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80135fc:	4b03      	ldr	r3, [pc, #12]	; (801360c <USBD_static_malloc+0x18>)
}
 80135fe:	4618      	mov	r0, r3
 8013600:	370c      	adds	r7, #12
 8013602:	46bd      	mov	sp, r7
 8013604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013608:	4770      	bx	lr
 801360a:	bf00      	nop
 801360c:	2000962c 	.word	0x2000962c

08013610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013610:	b480      	push	{r7}
 8013612:	b083      	sub	sp, #12
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]

}
 8013618:	bf00      	nop
 801361a:	370c      	adds	r7, #12
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr

08013624 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013628:	f7ef fe8c 	bl	8003344 <SystemClock_Config>
}
 801362c:	bf00      	nop
 801362e:	bd80      	pop	{r7, pc}

08013630 <expf>:
 8013630:	b508      	push	{r3, lr}
 8013632:	ed2d 8b02 	vpush	{d8}
 8013636:	eef0 8a40 	vmov.f32	s17, s0
 801363a:	f000 f82f 	bl	801369c <__ieee754_expf>
 801363e:	eeb0 8a40 	vmov.f32	s16, s0
 8013642:	eeb0 0a68 	vmov.f32	s0, s17
 8013646:	f000 f919 	bl	801387c <finitef>
 801364a:	b160      	cbz	r0, 8013666 <expf+0x36>
 801364c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801368c <expf+0x5c>
 8013650:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013658:	dd0a      	ble.n	8013670 <expf+0x40>
 801365a:	f000 f91d 	bl	8013898 <__errno>
 801365e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013690 <expf+0x60>
 8013662:	2322      	movs	r3, #34	; 0x22
 8013664:	6003      	str	r3, [r0, #0]
 8013666:	eeb0 0a48 	vmov.f32	s0, s16
 801366a:	ecbd 8b02 	vpop	{d8}
 801366e:	bd08      	pop	{r3, pc}
 8013670:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013694 <expf+0x64>
 8013674:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367c:	d5f3      	bpl.n	8013666 <expf+0x36>
 801367e:	f000 f90b 	bl	8013898 <__errno>
 8013682:	2322      	movs	r3, #34	; 0x22
 8013684:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013698 <expf+0x68>
 8013688:	6003      	str	r3, [r0, #0]
 801368a:	e7ec      	b.n	8013666 <expf+0x36>
 801368c:	42b17180 	.word	0x42b17180
 8013690:	7f800000 	.word	0x7f800000
 8013694:	c2cff1b5 	.word	0xc2cff1b5
 8013698:	00000000 	.word	0x00000000

0801369c <__ieee754_expf>:
 801369c:	ee10 2a10 	vmov	r2, s0
 80136a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80136a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80136a8:	d902      	bls.n	80136b0 <__ieee754_expf+0x14>
 80136aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80136ae:	4770      	bx	lr
 80136b0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80136b4:	d106      	bne.n	80136c4 <__ieee754_expf+0x28>
 80136b6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80137f0 <__ieee754_expf+0x154>
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	bf18      	it	ne
 80136be:	eeb0 0a67 	vmovne.f32	s0, s15
 80136c2:	4770      	bx	lr
 80136c4:	484b      	ldr	r0, [pc, #300]	; (80137f4 <__ieee754_expf+0x158>)
 80136c6:	4282      	cmp	r2, r0
 80136c8:	dd02      	ble.n	80136d0 <__ieee754_expf+0x34>
 80136ca:	2000      	movs	r0, #0
 80136cc:	f000 b8d0 	b.w	8013870 <__math_oflowf>
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	da05      	bge.n	80136e0 <__ieee754_expf+0x44>
 80136d4:	4a48      	ldr	r2, [pc, #288]	; (80137f8 <__ieee754_expf+0x15c>)
 80136d6:	4291      	cmp	r1, r2
 80136d8:	d902      	bls.n	80136e0 <__ieee754_expf+0x44>
 80136da:	2000      	movs	r0, #0
 80136dc:	f000 b8c2 	b.w	8013864 <__math_uflowf>
 80136e0:	4a46      	ldr	r2, [pc, #280]	; (80137fc <__ieee754_expf+0x160>)
 80136e2:	4291      	cmp	r1, r2
 80136e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80136e8:	d952      	bls.n	8013790 <__ieee754_expf+0xf4>
 80136ea:	4a45      	ldr	r2, [pc, #276]	; (8013800 <__ieee754_expf+0x164>)
 80136ec:	4291      	cmp	r1, r2
 80136ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80136f2:	d834      	bhi.n	801375e <__ieee754_expf+0xc2>
 80136f4:	4943      	ldr	r1, [pc, #268]	; (8013804 <__ieee754_expf+0x168>)
 80136f6:	4411      	add	r1, r2
 80136f8:	ed91 7a00 	vldr	s14, [r1]
 80136fc:	4942      	ldr	r1, [pc, #264]	; (8013808 <__ieee754_expf+0x16c>)
 80136fe:	440a      	add	r2, r1
 8013700:	edd2 7a00 	vldr	s15, [r2]
 8013704:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013708:	f1c3 0201 	rsb	r2, r3, #1
 801370c:	1ad2      	subs	r2, r2, r3
 801370e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013712:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013716:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801380c <__ieee754_expf+0x170>
 801371a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013810 <__ieee754_expf+0x174>
 801371e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013722:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013814 <__ieee754_expf+0x178>
 8013726:	eea6 5a86 	vfma.f32	s10, s13, s12
 801372a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8013818 <__ieee754_expf+0x17c>
 801372e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013732:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801381c <__ieee754_expf+0x180>
 8013736:	eea6 5a86 	vfma.f32	s10, s13, s12
 801373a:	eef0 6a40 	vmov.f32	s13, s0
 801373e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013742:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013746:	ee20 5a26 	vmul.f32	s10, s0, s13
 801374a:	bb92      	cbnz	r2, 80137b2 <__ieee754_expf+0x116>
 801374c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013750:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013754:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013758:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801375c:	4770      	bx	lr
 801375e:	4b30      	ldr	r3, [pc, #192]	; (8013820 <__ieee754_expf+0x184>)
 8013760:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013824 <__ieee754_expf+0x188>
 8013764:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013828 <__ieee754_expf+0x18c>
 8013768:	4413      	add	r3, r2
 801376a:	edd3 7a00 	vldr	s15, [r3]
 801376e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013772:	eeb0 7a40 	vmov.f32	s14, s0
 8013776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801377a:	ee17 2a90 	vmov	r2, s15
 801377e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013782:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013786:	eddf 6a29 	vldr	s13, [pc, #164]	; 801382c <__ieee754_expf+0x190>
 801378a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801378e:	e7be      	b.n	801370e <__ieee754_expf+0x72>
 8013790:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8013794:	d20b      	bcs.n	80137ae <__ieee754_expf+0x112>
 8013796:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013830 <__ieee754_expf+0x194>
 801379a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801379e:	eef4 6ae5 	vcmpe.f32	s13, s11
 80137a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a6:	dd02      	ble.n	80137ae <__ieee754_expf+0x112>
 80137a8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80137ac:	4770      	bx	lr
 80137ae:	2200      	movs	r2, #0
 80137b0:	e7af      	b.n	8013712 <__ieee754_expf+0x76>
 80137b2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80137b6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80137ba:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80137be:	bfb8      	it	lt
 80137c0:	3264      	addlt	r2, #100	; 0x64
 80137c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80137c6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80137ca:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80137ce:	ee17 3a90 	vmov	r3, s15
 80137d2:	bfab      	itete	ge
 80137d4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80137d8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80137dc:	ee00 3a10 	vmovge	s0, r3
 80137e0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013834 <__ieee754_expf+0x198>
 80137e4:	bfbc      	itt	lt
 80137e6:	ee00 3a10 	vmovlt	s0, r3
 80137ea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80137ee:	4770      	bx	lr
 80137f0:	00000000 	.word	0x00000000
 80137f4:	42b17217 	.word	0x42b17217
 80137f8:	42cff1b5 	.word	0x42cff1b5
 80137fc:	3eb17218 	.word	0x3eb17218
 8013800:	3f851591 	.word	0x3f851591
 8013804:	08016dc8 	.word	0x08016dc8
 8013808:	08016dd0 	.word	0x08016dd0
 801380c:	3331bb4c 	.word	0x3331bb4c
 8013810:	b5ddea0e 	.word	0xb5ddea0e
 8013814:	388ab355 	.word	0x388ab355
 8013818:	bb360b61 	.word	0xbb360b61
 801381c:	3e2aaaab 	.word	0x3e2aaaab
 8013820:	08016dc0 	.word	0x08016dc0
 8013824:	3fb8aa3b 	.word	0x3fb8aa3b
 8013828:	3f317180 	.word	0x3f317180
 801382c:	3717f7d1 	.word	0x3717f7d1
 8013830:	7149f2ca 	.word	0x7149f2ca
 8013834:	0d800000 	.word	0x0d800000

08013838 <with_errnof>:
 8013838:	b513      	push	{r0, r1, r4, lr}
 801383a:	4604      	mov	r4, r0
 801383c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013840:	f000 f82a 	bl	8013898 <__errno>
 8013844:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013848:	6004      	str	r4, [r0, #0]
 801384a:	b002      	add	sp, #8
 801384c:	bd10      	pop	{r4, pc}

0801384e <xflowf>:
 801384e:	b130      	cbz	r0, 801385e <xflowf+0x10>
 8013850:	eef1 7a40 	vneg.f32	s15, s0
 8013854:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013858:	2022      	movs	r0, #34	; 0x22
 801385a:	f7ff bfed 	b.w	8013838 <with_errnof>
 801385e:	eef0 7a40 	vmov.f32	s15, s0
 8013862:	e7f7      	b.n	8013854 <xflowf+0x6>

08013864 <__math_uflowf>:
 8013864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801386c <__math_uflowf+0x8>
 8013868:	f7ff bff1 	b.w	801384e <xflowf>
 801386c:	10000000 	.word	0x10000000

08013870 <__math_oflowf>:
 8013870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013878 <__math_oflowf+0x8>
 8013874:	f7ff bfeb 	b.w	801384e <xflowf>
 8013878:	70000000 	.word	0x70000000

0801387c <finitef>:
 801387c:	b082      	sub	sp, #8
 801387e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013882:	9801      	ldr	r0, [sp, #4]
 8013884:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013888:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801388c:	bfac      	ite	ge
 801388e:	2000      	movge	r0, #0
 8013890:	2001      	movlt	r0, #1
 8013892:	b002      	add	sp, #8
 8013894:	4770      	bx	lr
	...

08013898 <__errno>:
 8013898:	4b01      	ldr	r3, [pc, #4]	; (80138a0 <__errno+0x8>)
 801389a:	6818      	ldr	r0, [r3, #0]
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop
 80138a0:	2000039c 	.word	0x2000039c

080138a4 <std>:
 80138a4:	2300      	movs	r3, #0
 80138a6:	b510      	push	{r4, lr}
 80138a8:	4604      	mov	r4, r0
 80138aa:	e9c0 3300 	strd	r3, r3, [r0]
 80138ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138b2:	6083      	str	r3, [r0, #8]
 80138b4:	8181      	strh	r1, [r0, #12]
 80138b6:	6643      	str	r3, [r0, #100]	; 0x64
 80138b8:	81c2      	strh	r2, [r0, #14]
 80138ba:	6183      	str	r3, [r0, #24]
 80138bc:	4619      	mov	r1, r3
 80138be:	2208      	movs	r2, #8
 80138c0:	305c      	adds	r0, #92	; 0x5c
 80138c2:	f000 f934 	bl	8013b2e <memset>
 80138c6:	4b05      	ldr	r3, [pc, #20]	; (80138dc <std+0x38>)
 80138c8:	6263      	str	r3, [r4, #36]	; 0x24
 80138ca:	4b05      	ldr	r3, [pc, #20]	; (80138e0 <std+0x3c>)
 80138cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80138ce:	4b05      	ldr	r3, [pc, #20]	; (80138e4 <std+0x40>)
 80138d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138d2:	4b05      	ldr	r3, [pc, #20]	; (80138e8 <std+0x44>)
 80138d4:	6224      	str	r4, [r4, #32]
 80138d6:	6323      	str	r3, [r4, #48]	; 0x30
 80138d8:	bd10      	pop	{r4, pc}
 80138da:	bf00      	nop
 80138dc:	08014671 	.word	0x08014671
 80138e0:	08014693 	.word	0x08014693
 80138e4:	080146cb 	.word	0x080146cb
 80138e8:	080146ef 	.word	0x080146ef

080138ec <_cleanup_r>:
 80138ec:	4901      	ldr	r1, [pc, #4]	; (80138f4 <_cleanup_r+0x8>)
 80138ee:	f000 b8af 	b.w	8013a50 <_fwalk_reent>
 80138f2:	bf00      	nop
 80138f4:	08015541 	.word	0x08015541

080138f8 <__sfmoreglue>:
 80138f8:	b570      	push	{r4, r5, r6, lr}
 80138fa:	2268      	movs	r2, #104	; 0x68
 80138fc:	1e4d      	subs	r5, r1, #1
 80138fe:	4355      	muls	r5, r2
 8013900:	460e      	mov	r6, r1
 8013902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013906:	f000 f93b 	bl	8013b80 <_malloc_r>
 801390a:	4604      	mov	r4, r0
 801390c:	b140      	cbz	r0, 8013920 <__sfmoreglue+0x28>
 801390e:	2100      	movs	r1, #0
 8013910:	e9c0 1600 	strd	r1, r6, [r0]
 8013914:	300c      	adds	r0, #12
 8013916:	60a0      	str	r0, [r4, #8]
 8013918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801391c:	f000 f907 	bl	8013b2e <memset>
 8013920:	4620      	mov	r0, r4
 8013922:	bd70      	pop	{r4, r5, r6, pc}

08013924 <__sfp_lock_acquire>:
 8013924:	4801      	ldr	r0, [pc, #4]	; (801392c <__sfp_lock_acquire+0x8>)
 8013926:	f000 b8d8 	b.w	8013ada <__retarget_lock_acquire_recursive>
 801392a:	bf00      	nop
 801392c:	2000984d 	.word	0x2000984d

08013930 <__sfp_lock_release>:
 8013930:	4801      	ldr	r0, [pc, #4]	; (8013938 <__sfp_lock_release+0x8>)
 8013932:	f000 b8d3 	b.w	8013adc <__retarget_lock_release_recursive>
 8013936:	bf00      	nop
 8013938:	2000984d 	.word	0x2000984d

0801393c <__sinit_lock_acquire>:
 801393c:	4801      	ldr	r0, [pc, #4]	; (8013944 <__sinit_lock_acquire+0x8>)
 801393e:	f000 b8cc 	b.w	8013ada <__retarget_lock_acquire_recursive>
 8013942:	bf00      	nop
 8013944:	2000984e 	.word	0x2000984e

08013948 <__sinit_lock_release>:
 8013948:	4801      	ldr	r0, [pc, #4]	; (8013950 <__sinit_lock_release+0x8>)
 801394a:	f000 b8c7 	b.w	8013adc <__retarget_lock_release_recursive>
 801394e:	bf00      	nop
 8013950:	2000984e 	.word	0x2000984e

08013954 <__sinit>:
 8013954:	b510      	push	{r4, lr}
 8013956:	4604      	mov	r4, r0
 8013958:	f7ff fff0 	bl	801393c <__sinit_lock_acquire>
 801395c:	69a3      	ldr	r3, [r4, #24]
 801395e:	b11b      	cbz	r3, 8013968 <__sinit+0x14>
 8013960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013964:	f7ff bff0 	b.w	8013948 <__sinit_lock_release>
 8013968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801396c:	6523      	str	r3, [r4, #80]	; 0x50
 801396e:	4b13      	ldr	r3, [pc, #76]	; (80139bc <__sinit+0x68>)
 8013970:	4a13      	ldr	r2, [pc, #76]	; (80139c0 <__sinit+0x6c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	62a2      	str	r2, [r4, #40]	; 0x28
 8013976:	42a3      	cmp	r3, r4
 8013978:	bf04      	itt	eq
 801397a:	2301      	moveq	r3, #1
 801397c:	61a3      	streq	r3, [r4, #24]
 801397e:	4620      	mov	r0, r4
 8013980:	f000 f820 	bl	80139c4 <__sfp>
 8013984:	6060      	str	r0, [r4, #4]
 8013986:	4620      	mov	r0, r4
 8013988:	f000 f81c 	bl	80139c4 <__sfp>
 801398c:	60a0      	str	r0, [r4, #8]
 801398e:	4620      	mov	r0, r4
 8013990:	f000 f818 	bl	80139c4 <__sfp>
 8013994:	2200      	movs	r2, #0
 8013996:	60e0      	str	r0, [r4, #12]
 8013998:	2104      	movs	r1, #4
 801399a:	6860      	ldr	r0, [r4, #4]
 801399c:	f7ff ff82 	bl	80138a4 <std>
 80139a0:	68a0      	ldr	r0, [r4, #8]
 80139a2:	2201      	movs	r2, #1
 80139a4:	2109      	movs	r1, #9
 80139a6:	f7ff ff7d 	bl	80138a4 <std>
 80139aa:	68e0      	ldr	r0, [r4, #12]
 80139ac:	2202      	movs	r2, #2
 80139ae:	2112      	movs	r1, #18
 80139b0:	f7ff ff78 	bl	80138a4 <std>
 80139b4:	2301      	movs	r3, #1
 80139b6:	61a3      	str	r3, [r4, #24]
 80139b8:	e7d2      	b.n	8013960 <__sinit+0xc>
 80139ba:	bf00      	nop
 80139bc:	08016e38 	.word	0x08016e38
 80139c0:	080138ed 	.word	0x080138ed

080139c4 <__sfp>:
 80139c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139c6:	4607      	mov	r7, r0
 80139c8:	f7ff ffac 	bl	8013924 <__sfp_lock_acquire>
 80139cc:	4b1e      	ldr	r3, [pc, #120]	; (8013a48 <__sfp+0x84>)
 80139ce:	681e      	ldr	r6, [r3, #0]
 80139d0:	69b3      	ldr	r3, [r6, #24]
 80139d2:	b913      	cbnz	r3, 80139da <__sfp+0x16>
 80139d4:	4630      	mov	r0, r6
 80139d6:	f7ff ffbd 	bl	8013954 <__sinit>
 80139da:	3648      	adds	r6, #72	; 0x48
 80139dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80139e0:	3b01      	subs	r3, #1
 80139e2:	d503      	bpl.n	80139ec <__sfp+0x28>
 80139e4:	6833      	ldr	r3, [r6, #0]
 80139e6:	b30b      	cbz	r3, 8013a2c <__sfp+0x68>
 80139e8:	6836      	ldr	r6, [r6, #0]
 80139ea:	e7f7      	b.n	80139dc <__sfp+0x18>
 80139ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139f0:	b9d5      	cbnz	r5, 8013a28 <__sfp+0x64>
 80139f2:	4b16      	ldr	r3, [pc, #88]	; (8013a4c <__sfp+0x88>)
 80139f4:	60e3      	str	r3, [r4, #12]
 80139f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139fa:	6665      	str	r5, [r4, #100]	; 0x64
 80139fc:	f000 f86c 	bl	8013ad8 <__retarget_lock_init_recursive>
 8013a00:	f7ff ff96 	bl	8013930 <__sfp_lock_release>
 8013a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013a0c:	6025      	str	r5, [r4, #0]
 8013a0e:	61a5      	str	r5, [r4, #24]
 8013a10:	2208      	movs	r2, #8
 8013a12:	4629      	mov	r1, r5
 8013a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a18:	f000 f889 	bl	8013b2e <memset>
 8013a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a24:	4620      	mov	r0, r4
 8013a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a28:	3468      	adds	r4, #104	; 0x68
 8013a2a:	e7d9      	b.n	80139e0 <__sfp+0x1c>
 8013a2c:	2104      	movs	r1, #4
 8013a2e:	4638      	mov	r0, r7
 8013a30:	f7ff ff62 	bl	80138f8 <__sfmoreglue>
 8013a34:	4604      	mov	r4, r0
 8013a36:	6030      	str	r0, [r6, #0]
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d1d5      	bne.n	80139e8 <__sfp+0x24>
 8013a3c:	f7ff ff78 	bl	8013930 <__sfp_lock_release>
 8013a40:	230c      	movs	r3, #12
 8013a42:	603b      	str	r3, [r7, #0]
 8013a44:	e7ee      	b.n	8013a24 <__sfp+0x60>
 8013a46:	bf00      	nop
 8013a48:	08016e38 	.word	0x08016e38
 8013a4c:	ffff0001 	.word	0xffff0001

08013a50 <_fwalk_reent>:
 8013a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a54:	4606      	mov	r6, r0
 8013a56:	4688      	mov	r8, r1
 8013a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a5c:	2700      	movs	r7, #0
 8013a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a62:	f1b9 0901 	subs.w	r9, r9, #1
 8013a66:	d505      	bpl.n	8013a74 <_fwalk_reent+0x24>
 8013a68:	6824      	ldr	r4, [r4, #0]
 8013a6a:	2c00      	cmp	r4, #0
 8013a6c:	d1f7      	bne.n	8013a5e <_fwalk_reent+0xe>
 8013a6e:	4638      	mov	r0, r7
 8013a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a74:	89ab      	ldrh	r3, [r5, #12]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d907      	bls.n	8013a8a <_fwalk_reent+0x3a>
 8013a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	d003      	beq.n	8013a8a <_fwalk_reent+0x3a>
 8013a82:	4629      	mov	r1, r5
 8013a84:	4630      	mov	r0, r6
 8013a86:	47c0      	blx	r8
 8013a88:	4307      	orrs	r7, r0
 8013a8a:	3568      	adds	r5, #104	; 0x68
 8013a8c:	e7e9      	b.n	8013a62 <_fwalk_reent+0x12>
	...

08013a90 <__libc_init_array>:
 8013a90:	b570      	push	{r4, r5, r6, lr}
 8013a92:	4d0d      	ldr	r5, [pc, #52]	; (8013ac8 <__libc_init_array+0x38>)
 8013a94:	4c0d      	ldr	r4, [pc, #52]	; (8013acc <__libc_init_array+0x3c>)
 8013a96:	1b64      	subs	r4, r4, r5
 8013a98:	10a4      	asrs	r4, r4, #2
 8013a9a:	2600      	movs	r6, #0
 8013a9c:	42a6      	cmp	r6, r4
 8013a9e:	d109      	bne.n	8013ab4 <__libc_init_array+0x24>
 8013aa0:	4d0b      	ldr	r5, [pc, #44]	; (8013ad0 <__libc_init_array+0x40>)
 8013aa2:	4c0c      	ldr	r4, [pc, #48]	; (8013ad4 <__libc_init_array+0x44>)
 8013aa4:	f002 fe78 	bl	8016798 <_init>
 8013aa8:	1b64      	subs	r4, r4, r5
 8013aaa:	10a4      	asrs	r4, r4, #2
 8013aac:	2600      	movs	r6, #0
 8013aae:	42a6      	cmp	r6, r4
 8013ab0:	d105      	bne.n	8013abe <__libc_init_array+0x2e>
 8013ab2:	bd70      	pop	{r4, r5, r6, pc}
 8013ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ab8:	4798      	blx	r3
 8013aba:	3601      	adds	r6, #1
 8013abc:	e7ee      	b.n	8013a9c <__libc_init_array+0xc>
 8013abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ac2:	4798      	blx	r3
 8013ac4:	3601      	adds	r6, #1
 8013ac6:	e7f2      	b.n	8013aae <__libc_init_array+0x1e>
 8013ac8:	080171b4 	.word	0x080171b4
 8013acc:	080171b4 	.word	0x080171b4
 8013ad0:	080171b4 	.word	0x080171b4
 8013ad4:	080171c4 	.word	0x080171c4

08013ad8 <__retarget_lock_init_recursive>:
 8013ad8:	4770      	bx	lr

08013ada <__retarget_lock_acquire_recursive>:
 8013ada:	4770      	bx	lr

08013adc <__retarget_lock_release_recursive>:
 8013adc:	4770      	bx	lr

08013ade <memcpy>:
 8013ade:	440a      	add	r2, r1
 8013ae0:	4291      	cmp	r1, r2
 8013ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ae6:	d100      	bne.n	8013aea <memcpy+0xc>
 8013ae8:	4770      	bx	lr
 8013aea:	b510      	push	{r4, lr}
 8013aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013af4:	4291      	cmp	r1, r2
 8013af6:	d1f9      	bne.n	8013aec <memcpy+0xe>
 8013af8:	bd10      	pop	{r4, pc}

08013afa <memmove>:
 8013afa:	4288      	cmp	r0, r1
 8013afc:	b510      	push	{r4, lr}
 8013afe:	eb01 0402 	add.w	r4, r1, r2
 8013b02:	d902      	bls.n	8013b0a <memmove+0x10>
 8013b04:	4284      	cmp	r4, r0
 8013b06:	4623      	mov	r3, r4
 8013b08:	d807      	bhi.n	8013b1a <memmove+0x20>
 8013b0a:	1e43      	subs	r3, r0, #1
 8013b0c:	42a1      	cmp	r1, r4
 8013b0e:	d008      	beq.n	8013b22 <memmove+0x28>
 8013b10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b18:	e7f8      	b.n	8013b0c <memmove+0x12>
 8013b1a:	4402      	add	r2, r0
 8013b1c:	4601      	mov	r1, r0
 8013b1e:	428a      	cmp	r2, r1
 8013b20:	d100      	bne.n	8013b24 <memmove+0x2a>
 8013b22:	bd10      	pop	{r4, pc}
 8013b24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b2c:	e7f7      	b.n	8013b1e <memmove+0x24>

08013b2e <memset>:
 8013b2e:	4402      	add	r2, r0
 8013b30:	4603      	mov	r3, r0
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d100      	bne.n	8013b38 <memset+0xa>
 8013b36:	4770      	bx	lr
 8013b38:	f803 1b01 	strb.w	r1, [r3], #1
 8013b3c:	e7f9      	b.n	8013b32 <memset+0x4>
	...

08013b40 <sbrk_aligned>:
 8013b40:	b570      	push	{r4, r5, r6, lr}
 8013b42:	4e0e      	ldr	r6, [pc, #56]	; (8013b7c <sbrk_aligned+0x3c>)
 8013b44:	460c      	mov	r4, r1
 8013b46:	6831      	ldr	r1, [r6, #0]
 8013b48:	4605      	mov	r5, r0
 8013b4a:	b911      	cbnz	r1, 8013b52 <sbrk_aligned+0x12>
 8013b4c:	f000 fd60 	bl	8014610 <_sbrk_r>
 8013b50:	6030      	str	r0, [r6, #0]
 8013b52:	4621      	mov	r1, r4
 8013b54:	4628      	mov	r0, r5
 8013b56:	f000 fd5b 	bl	8014610 <_sbrk_r>
 8013b5a:	1c43      	adds	r3, r0, #1
 8013b5c:	d00a      	beq.n	8013b74 <sbrk_aligned+0x34>
 8013b5e:	1cc4      	adds	r4, r0, #3
 8013b60:	f024 0403 	bic.w	r4, r4, #3
 8013b64:	42a0      	cmp	r0, r4
 8013b66:	d007      	beq.n	8013b78 <sbrk_aligned+0x38>
 8013b68:	1a21      	subs	r1, r4, r0
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	f000 fd50 	bl	8014610 <_sbrk_r>
 8013b70:	3001      	adds	r0, #1
 8013b72:	d101      	bne.n	8013b78 <sbrk_aligned+0x38>
 8013b74:	f04f 34ff 	mov.w	r4, #4294967295
 8013b78:	4620      	mov	r0, r4
 8013b7a:	bd70      	pop	{r4, r5, r6, pc}
 8013b7c:	20009854 	.word	0x20009854

08013b80 <_malloc_r>:
 8013b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b84:	1ccd      	adds	r5, r1, #3
 8013b86:	f025 0503 	bic.w	r5, r5, #3
 8013b8a:	3508      	adds	r5, #8
 8013b8c:	2d0c      	cmp	r5, #12
 8013b8e:	bf38      	it	cc
 8013b90:	250c      	movcc	r5, #12
 8013b92:	2d00      	cmp	r5, #0
 8013b94:	4607      	mov	r7, r0
 8013b96:	db01      	blt.n	8013b9c <_malloc_r+0x1c>
 8013b98:	42a9      	cmp	r1, r5
 8013b9a:	d905      	bls.n	8013ba8 <_malloc_r+0x28>
 8013b9c:	230c      	movs	r3, #12
 8013b9e:	603b      	str	r3, [r7, #0]
 8013ba0:	2600      	movs	r6, #0
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba8:	4e2e      	ldr	r6, [pc, #184]	; (8013c64 <_malloc_r+0xe4>)
 8013baa:	f001 fd23 	bl	80155f4 <__malloc_lock>
 8013bae:	6833      	ldr	r3, [r6, #0]
 8013bb0:	461c      	mov	r4, r3
 8013bb2:	bb34      	cbnz	r4, 8013c02 <_malloc_r+0x82>
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	4638      	mov	r0, r7
 8013bb8:	f7ff ffc2 	bl	8013b40 <sbrk_aligned>
 8013bbc:	1c43      	adds	r3, r0, #1
 8013bbe:	4604      	mov	r4, r0
 8013bc0:	d14d      	bne.n	8013c5e <_malloc_r+0xde>
 8013bc2:	6834      	ldr	r4, [r6, #0]
 8013bc4:	4626      	mov	r6, r4
 8013bc6:	2e00      	cmp	r6, #0
 8013bc8:	d140      	bne.n	8013c4c <_malloc_r+0xcc>
 8013bca:	6823      	ldr	r3, [r4, #0]
 8013bcc:	4631      	mov	r1, r6
 8013bce:	4638      	mov	r0, r7
 8013bd0:	eb04 0803 	add.w	r8, r4, r3
 8013bd4:	f000 fd1c 	bl	8014610 <_sbrk_r>
 8013bd8:	4580      	cmp	r8, r0
 8013bda:	d13a      	bne.n	8013c52 <_malloc_r+0xd2>
 8013bdc:	6821      	ldr	r1, [r4, #0]
 8013bde:	3503      	adds	r5, #3
 8013be0:	1a6d      	subs	r5, r5, r1
 8013be2:	f025 0503 	bic.w	r5, r5, #3
 8013be6:	3508      	adds	r5, #8
 8013be8:	2d0c      	cmp	r5, #12
 8013bea:	bf38      	it	cc
 8013bec:	250c      	movcc	r5, #12
 8013bee:	4629      	mov	r1, r5
 8013bf0:	4638      	mov	r0, r7
 8013bf2:	f7ff ffa5 	bl	8013b40 <sbrk_aligned>
 8013bf6:	3001      	adds	r0, #1
 8013bf8:	d02b      	beq.n	8013c52 <_malloc_r+0xd2>
 8013bfa:	6823      	ldr	r3, [r4, #0]
 8013bfc:	442b      	add	r3, r5
 8013bfe:	6023      	str	r3, [r4, #0]
 8013c00:	e00e      	b.n	8013c20 <_malloc_r+0xa0>
 8013c02:	6822      	ldr	r2, [r4, #0]
 8013c04:	1b52      	subs	r2, r2, r5
 8013c06:	d41e      	bmi.n	8013c46 <_malloc_r+0xc6>
 8013c08:	2a0b      	cmp	r2, #11
 8013c0a:	d916      	bls.n	8013c3a <_malloc_r+0xba>
 8013c0c:	1961      	adds	r1, r4, r5
 8013c0e:	42a3      	cmp	r3, r4
 8013c10:	6025      	str	r5, [r4, #0]
 8013c12:	bf18      	it	ne
 8013c14:	6059      	strne	r1, [r3, #4]
 8013c16:	6863      	ldr	r3, [r4, #4]
 8013c18:	bf08      	it	eq
 8013c1a:	6031      	streq	r1, [r6, #0]
 8013c1c:	5162      	str	r2, [r4, r5]
 8013c1e:	604b      	str	r3, [r1, #4]
 8013c20:	4638      	mov	r0, r7
 8013c22:	f104 060b 	add.w	r6, r4, #11
 8013c26:	f001 fceb 	bl	8015600 <__malloc_unlock>
 8013c2a:	f026 0607 	bic.w	r6, r6, #7
 8013c2e:	1d23      	adds	r3, r4, #4
 8013c30:	1af2      	subs	r2, r6, r3
 8013c32:	d0b6      	beq.n	8013ba2 <_malloc_r+0x22>
 8013c34:	1b9b      	subs	r3, r3, r6
 8013c36:	50a3      	str	r3, [r4, r2]
 8013c38:	e7b3      	b.n	8013ba2 <_malloc_r+0x22>
 8013c3a:	6862      	ldr	r2, [r4, #4]
 8013c3c:	42a3      	cmp	r3, r4
 8013c3e:	bf0c      	ite	eq
 8013c40:	6032      	streq	r2, [r6, #0]
 8013c42:	605a      	strne	r2, [r3, #4]
 8013c44:	e7ec      	b.n	8013c20 <_malloc_r+0xa0>
 8013c46:	4623      	mov	r3, r4
 8013c48:	6864      	ldr	r4, [r4, #4]
 8013c4a:	e7b2      	b.n	8013bb2 <_malloc_r+0x32>
 8013c4c:	4634      	mov	r4, r6
 8013c4e:	6876      	ldr	r6, [r6, #4]
 8013c50:	e7b9      	b.n	8013bc6 <_malloc_r+0x46>
 8013c52:	230c      	movs	r3, #12
 8013c54:	603b      	str	r3, [r7, #0]
 8013c56:	4638      	mov	r0, r7
 8013c58:	f001 fcd2 	bl	8015600 <__malloc_unlock>
 8013c5c:	e7a1      	b.n	8013ba2 <_malloc_r+0x22>
 8013c5e:	6025      	str	r5, [r4, #0]
 8013c60:	e7de      	b.n	8013c20 <_malloc_r+0xa0>
 8013c62:	bf00      	nop
 8013c64:	20009850 	.word	0x20009850

08013c68 <__cvt>:
 8013c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c6c:	ec55 4b10 	vmov	r4, r5, d0
 8013c70:	2d00      	cmp	r5, #0
 8013c72:	460e      	mov	r6, r1
 8013c74:	4619      	mov	r1, r3
 8013c76:	462b      	mov	r3, r5
 8013c78:	bfbb      	ittet	lt
 8013c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013c7e:	461d      	movlt	r5, r3
 8013c80:	2300      	movge	r3, #0
 8013c82:	232d      	movlt	r3, #45	; 0x2d
 8013c84:	700b      	strb	r3, [r1, #0]
 8013c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013c8c:	4691      	mov	r9, r2
 8013c8e:	f023 0820 	bic.w	r8, r3, #32
 8013c92:	bfbc      	itt	lt
 8013c94:	4622      	movlt	r2, r4
 8013c96:	4614      	movlt	r4, r2
 8013c98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c9c:	d005      	beq.n	8013caa <__cvt+0x42>
 8013c9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013ca2:	d100      	bne.n	8013ca6 <__cvt+0x3e>
 8013ca4:	3601      	adds	r6, #1
 8013ca6:	2102      	movs	r1, #2
 8013ca8:	e000      	b.n	8013cac <__cvt+0x44>
 8013caa:	2103      	movs	r1, #3
 8013cac:	ab03      	add	r3, sp, #12
 8013cae:	9301      	str	r3, [sp, #4]
 8013cb0:	ab02      	add	r3, sp, #8
 8013cb2:	9300      	str	r3, [sp, #0]
 8013cb4:	ec45 4b10 	vmov	d0, r4, r5
 8013cb8:	4653      	mov	r3, sl
 8013cba:	4632      	mov	r2, r6
 8013cbc:	f000 fdcc 	bl	8014858 <_dtoa_r>
 8013cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013cc4:	4607      	mov	r7, r0
 8013cc6:	d102      	bne.n	8013cce <__cvt+0x66>
 8013cc8:	f019 0f01 	tst.w	r9, #1
 8013ccc:	d022      	beq.n	8013d14 <__cvt+0xac>
 8013cce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013cd2:	eb07 0906 	add.w	r9, r7, r6
 8013cd6:	d110      	bne.n	8013cfa <__cvt+0x92>
 8013cd8:	783b      	ldrb	r3, [r7, #0]
 8013cda:	2b30      	cmp	r3, #48	; 0x30
 8013cdc:	d10a      	bne.n	8013cf4 <__cvt+0x8c>
 8013cde:	2200      	movs	r2, #0
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	f7ec ff07 	bl	8000af8 <__aeabi_dcmpeq>
 8013cea:	b918      	cbnz	r0, 8013cf4 <__cvt+0x8c>
 8013cec:	f1c6 0601 	rsb	r6, r6, #1
 8013cf0:	f8ca 6000 	str.w	r6, [sl]
 8013cf4:	f8da 3000 	ldr.w	r3, [sl]
 8013cf8:	4499      	add	r9, r3
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4620      	mov	r0, r4
 8013d00:	4629      	mov	r1, r5
 8013d02:	f7ec fef9 	bl	8000af8 <__aeabi_dcmpeq>
 8013d06:	b108      	cbz	r0, 8013d0c <__cvt+0xa4>
 8013d08:	f8cd 900c 	str.w	r9, [sp, #12]
 8013d0c:	2230      	movs	r2, #48	; 0x30
 8013d0e:	9b03      	ldr	r3, [sp, #12]
 8013d10:	454b      	cmp	r3, r9
 8013d12:	d307      	bcc.n	8013d24 <__cvt+0xbc>
 8013d14:	9b03      	ldr	r3, [sp, #12]
 8013d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d18:	1bdb      	subs	r3, r3, r7
 8013d1a:	4638      	mov	r0, r7
 8013d1c:	6013      	str	r3, [r2, #0]
 8013d1e:	b004      	add	sp, #16
 8013d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d24:	1c59      	adds	r1, r3, #1
 8013d26:	9103      	str	r1, [sp, #12]
 8013d28:	701a      	strb	r2, [r3, #0]
 8013d2a:	e7f0      	b.n	8013d0e <__cvt+0xa6>

08013d2c <__exponent>:
 8013d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2900      	cmp	r1, #0
 8013d32:	bfb8      	it	lt
 8013d34:	4249      	neglt	r1, r1
 8013d36:	f803 2b02 	strb.w	r2, [r3], #2
 8013d3a:	bfb4      	ite	lt
 8013d3c:	222d      	movlt	r2, #45	; 0x2d
 8013d3e:	222b      	movge	r2, #43	; 0x2b
 8013d40:	2909      	cmp	r1, #9
 8013d42:	7042      	strb	r2, [r0, #1]
 8013d44:	dd2a      	ble.n	8013d9c <__exponent+0x70>
 8013d46:	f10d 0407 	add.w	r4, sp, #7
 8013d4a:	46a4      	mov	ip, r4
 8013d4c:	270a      	movs	r7, #10
 8013d4e:	46a6      	mov	lr, r4
 8013d50:	460a      	mov	r2, r1
 8013d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8013d56:	fb07 1516 	mls	r5, r7, r6, r1
 8013d5a:	3530      	adds	r5, #48	; 0x30
 8013d5c:	2a63      	cmp	r2, #99	; 0x63
 8013d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013d66:	4631      	mov	r1, r6
 8013d68:	dcf1      	bgt.n	8013d4e <__exponent+0x22>
 8013d6a:	3130      	adds	r1, #48	; 0x30
 8013d6c:	f1ae 0502 	sub.w	r5, lr, #2
 8013d70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013d74:	1c44      	adds	r4, r0, #1
 8013d76:	4629      	mov	r1, r5
 8013d78:	4561      	cmp	r1, ip
 8013d7a:	d30a      	bcc.n	8013d92 <__exponent+0x66>
 8013d7c:	f10d 0209 	add.w	r2, sp, #9
 8013d80:	eba2 020e 	sub.w	r2, r2, lr
 8013d84:	4565      	cmp	r5, ip
 8013d86:	bf88      	it	hi
 8013d88:	2200      	movhi	r2, #0
 8013d8a:	4413      	add	r3, r2
 8013d8c:	1a18      	subs	r0, r3, r0
 8013d8e:	b003      	add	sp, #12
 8013d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013d9a:	e7ed      	b.n	8013d78 <__exponent+0x4c>
 8013d9c:	2330      	movs	r3, #48	; 0x30
 8013d9e:	3130      	adds	r1, #48	; 0x30
 8013da0:	7083      	strb	r3, [r0, #2]
 8013da2:	70c1      	strb	r1, [r0, #3]
 8013da4:	1d03      	adds	r3, r0, #4
 8013da6:	e7f1      	b.n	8013d8c <__exponent+0x60>

08013da8 <_printf_float>:
 8013da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dac:	ed2d 8b02 	vpush	{d8}
 8013db0:	b08d      	sub	sp, #52	; 0x34
 8013db2:	460c      	mov	r4, r1
 8013db4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013db8:	4616      	mov	r6, r2
 8013dba:	461f      	mov	r7, r3
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	f001 fbfb 	bl	80155b8 <_localeconv_r>
 8013dc2:	f8d0 a000 	ldr.w	sl, [r0]
 8013dc6:	4650      	mov	r0, sl
 8013dc8:	f7ec fa1a 	bl	8000200 <strlen>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	930a      	str	r3, [sp, #40]	; 0x28
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	9305      	str	r3, [sp, #20]
 8013dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8013dd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013ddc:	3307      	adds	r3, #7
 8013dde:	f023 0307 	bic.w	r3, r3, #7
 8013de2:	f103 0208 	add.w	r2, r3, #8
 8013de6:	f8c8 2000 	str.w	r2, [r8]
 8013dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013df2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013dfa:	9307      	str	r3, [sp, #28]
 8013dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8013e00:	ee08 0a10 	vmov	s16, r0
 8013e04:	4b9f      	ldr	r3, [pc, #636]	; (8014084 <_printf_float+0x2dc>)
 8013e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e0e:	f7ec fea5 	bl	8000b5c <__aeabi_dcmpun>
 8013e12:	bb88      	cbnz	r0, 8013e78 <_printf_float+0xd0>
 8013e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e18:	4b9a      	ldr	r3, [pc, #616]	; (8014084 <_printf_float+0x2dc>)
 8013e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e1e:	f7ec fe7f 	bl	8000b20 <__aeabi_dcmple>
 8013e22:	bb48      	cbnz	r0, 8013e78 <_printf_float+0xd0>
 8013e24:	2200      	movs	r2, #0
 8013e26:	2300      	movs	r3, #0
 8013e28:	4640      	mov	r0, r8
 8013e2a:	4649      	mov	r1, r9
 8013e2c:	f7ec fe6e 	bl	8000b0c <__aeabi_dcmplt>
 8013e30:	b110      	cbz	r0, 8013e38 <_printf_float+0x90>
 8013e32:	232d      	movs	r3, #45	; 0x2d
 8013e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e38:	4b93      	ldr	r3, [pc, #588]	; (8014088 <_printf_float+0x2e0>)
 8013e3a:	4894      	ldr	r0, [pc, #592]	; (801408c <_printf_float+0x2e4>)
 8013e3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013e40:	bf94      	ite	ls
 8013e42:	4698      	movls	r8, r3
 8013e44:	4680      	movhi	r8, r0
 8013e46:	2303      	movs	r3, #3
 8013e48:	6123      	str	r3, [r4, #16]
 8013e4a:	9b05      	ldr	r3, [sp, #20]
 8013e4c:	f023 0204 	bic.w	r2, r3, #4
 8013e50:	6022      	str	r2, [r4, #0]
 8013e52:	f04f 0900 	mov.w	r9, #0
 8013e56:	9700      	str	r7, [sp, #0]
 8013e58:	4633      	mov	r3, r6
 8013e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8013e5c:	4621      	mov	r1, r4
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f000 f9d8 	bl	8014214 <_printf_common>
 8013e64:	3001      	adds	r0, #1
 8013e66:	f040 8090 	bne.w	8013f8a <_printf_float+0x1e2>
 8013e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e6e:	b00d      	add	sp, #52	; 0x34
 8013e70:	ecbd 8b02 	vpop	{d8}
 8013e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e78:	4642      	mov	r2, r8
 8013e7a:	464b      	mov	r3, r9
 8013e7c:	4640      	mov	r0, r8
 8013e7e:	4649      	mov	r1, r9
 8013e80:	f7ec fe6c 	bl	8000b5c <__aeabi_dcmpun>
 8013e84:	b140      	cbz	r0, 8013e98 <_printf_float+0xf0>
 8013e86:	464b      	mov	r3, r9
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	bfbc      	itt	lt
 8013e8c:	232d      	movlt	r3, #45	; 0x2d
 8013e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013e92:	487f      	ldr	r0, [pc, #508]	; (8014090 <_printf_float+0x2e8>)
 8013e94:	4b7f      	ldr	r3, [pc, #508]	; (8014094 <_printf_float+0x2ec>)
 8013e96:	e7d1      	b.n	8013e3c <_printf_float+0x94>
 8013e98:	6863      	ldr	r3, [r4, #4]
 8013e9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013e9e:	9206      	str	r2, [sp, #24]
 8013ea0:	1c5a      	adds	r2, r3, #1
 8013ea2:	d13f      	bne.n	8013f24 <_printf_float+0x17c>
 8013ea4:	2306      	movs	r3, #6
 8013ea6:	6063      	str	r3, [r4, #4]
 8013ea8:	9b05      	ldr	r3, [sp, #20]
 8013eaa:	6861      	ldr	r1, [r4, #4]
 8013eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	9303      	str	r3, [sp, #12]
 8013eb4:	ab0a      	add	r3, sp, #40	; 0x28
 8013eb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013eba:	ab09      	add	r3, sp, #36	; 0x24
 8013ebc:	ec49 8b10 	vmov	d0, r8, r9
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	6022      	str	r2, [r4, #0]
 8013ec4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013ec8:	4628      	mov	r0, r5
 8013eca:	f7ff fecd 	bl	8013c68 <__cvt>
 8013ece:	9b06      	ldr	r3, [sp, #24]
 8013ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ed2:	2b47      	cmp	r3, #71	; 0x47
 8013ed4:	4680      	mov	r8, r0
 8013ed6:	d108      	bne.n	8013eea <_printf_float+0x142>
 8013ed8:	1cc8      	adds	r0, r1, #3
 8013eda:	db02      	blt.n	8013ee2 <_printf_float+0x13a>
 8013edc:	6863      	ldr	r3, [r4, #4]
 8013ede:	4299      	cmp	r1, r3
 8013ee0:	dd41      	ble.n	8013f66 <_printf_float+0x1be>
 8013ee2:	f1ab 0b02 	sub.w	fp, fp, #2
 8013ee6:	fa5f fb8b 	uxtb.w	fp, fp
 8013eea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013eee:	d820      	bhi.n	8013f32 <_printf_float+0x18a>
 8013ef0:	3901      	subs	r1, #1
 8013ef2:	465a      	mov	r2, fp
 8013ef4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8013efa:	f7ff ff17 	bl	8013d2c <__exponent>
 8013efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f00:	1813      	adds	r3, r2, r0
 8013f02:	2a01      	cmp	r2, #1
 8013f04:	4681      	mov	r9, r0
 8013f06:	6123      	str	r3, [r4, #16]
 8013f08:	dc02      	bgt.n	8013f10 <_printf_float+0x168>
 8013f0a:	6822      	ldr	r2, [r4, #0]
 8013f0c:	07d2      	lsls	r2, r2, #31
 8013f0e:	d501      	bpl.n	8013f14 <_printf_float+0x16c>
 8013f10:	3301      	adds	r3, #1
 8013f12:	6123      	str	r3, [r4, #16]
 8013f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d09c      	beq.n	8013e56 <_printf_float+0xae>
 8013f1c:	232d      	movs	r3, #45	; 0x2d
 8013f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f22:	e798      	b.n	8013e56 <_printf_float+0xae>
 8013f24:	9a06      	ldr	r2, [sp, #24]
 8013f26:	2a47      	cmp	r2, #71	; 0x47
 8013f28:	d1be      	bne.n	8013ea8 <_printf_float+0x100>
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d1bc      	bne.n	8013ea8 <_printf_float+0x100>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e7b9      	b.n	8013ea6 <_printf_float+0xfe>
 8013f32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013f36:	d118      	bne.n	8013f6a <_printf_float+0x1c2>
 8013f38:	2900      	cmp	r1, #0
 8013f3a:	6863      	ldr	r3, [r4, #4]
 8013f3c:	dd0b      	ble.n	8013f56 <_printf_float+0x1ae>
 8013f3e:	6121      	str	r1, [r4, #16]
 8013f40:	b913      	cbnz	r3, 8013f48 <_printf_float+0x1a0>
 8013f42:	6822      	ldr	r2, [r4, #0]
 8013f44:	07d0      	lsls	r0, r2, #31
 8013f46:	d502      	bpl.n	8013f4e <_printf_float+0x1a6>
 8013f48:	3301      	adds	r3, #1
 8013f4a:	440b      	add	r3, r1
 8013f4c:	6123      	str	r3, [r4, #16]
 8013f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013f50:	f04f 0900 	mov.w	r9, #0
 8013f54:	e7de      	b.n	8013f14 <_printf_float+0x16c>
 8013f56:	b913      	cbnz	r3, 8013f5e <_printf_float+0x1b6>
 8013f58:	6822      	ldr	r2, [r4, #0]
 8013f5a:	07d2      	lsls	r2, r2, #31
 8013f5c:	d501      	bpl.n	8013f62 <_printf_float+0x1ba>
 8013f5e:	3302      	adds	r3, #2
 8013f60:	e7f4      	b.n	8013f4c <_printf_float+0x1a4>
 8013f62:	2301      	movs	r3, #1
 8013f64:	e7f2      	b.n	8013f4c <_printf_float+0x1a4>
 8013f66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f6c:	4299      	cmp	r1, r3
 8013f6e:	db05      	blt.n	8013f7c <_printf_float+0x1d4>
 8013f70:	6823      	ldr	r3, [r4, #0]
 8013f72:	6121      	str	r1, [r4, #16]
 8013f74:	07d8      	lsls	r0, r3, #31
 8013f76:	d5ea      	bpl.n	8013f4e <_printf_float+0x1a6>
 8013f78:	1c4b      	adds	r3, r1, #1
 8013f7a:	e7e7      	b.n	8013f4c <_printf_float+0x1a4>
 8013f7c:	2900      	cmp	r1, #0
 8013f7e:	bfd4      	ite	le
 8013f80:	f1c1 0202 	rsble	r2, r1, #2
 8013f84:	2201      	movgt	r2, #1
 8013f86:	4413      	add	r3, r2
 8013f88:	e7e0      	b.n	8013f4c <_printf_float+0x1a4>
 8013f8a:	6823      	ldr	r3, [r4, #0]
 8013f8c:	055a      	lsls	r2, r3, #21
 8013f8e:	d407      	bmi.n	8013fa0 <_printf_float+0x1f8>
 8013f90:	6923      	ldr	r3, [r4, #16]
 8013f92:	4642      	mov	r2, r8
 8013f94:	4631      	mov	r1, r6
 8013f96:	4628      	mov	r0, r5
 8013f98:	47b8      	blx	r7
 8013f9a:	3001      	adds	r0, #1
 8013f9c:	d12c      	bne.n	8013ff8 <_printf_float+0x250>
 8013f9e:	e764      	b.n	8013e6a <_printf_float+0xc2>
 8013fa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013fa4:	f240 80e0 	bls.w	8014168 <_printf_float+0x3c0>
 8013fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013fac:	2200      	movs	r2, #0
 8013fae:	2300      	movs	r3, #0
 8013fb0:	f7ec fda2 	bl	8000af8 <__aeabi_dcmpeq>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d034      	beq.n	8014022 <_printf_float+0x27a>
 8013fb8:	4a37      	ldr	r2, [pc, #220]	; (8014098 <_printf_float+0x2f0>)
 8013fba:	2301      	movs	r3, #1
 8013fbc:	4631      	mov	r1, r6
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	47b8      	blx	r7
 8013fc2:	3001      	adds	r0, #1
 8013fc4:	f43f af51 	beq.w	8013e6a <_printf_float+0xc2>
 8013fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	db02      	blt.n	8013fd6 <_printf_float+0x22e>
 8013fd0:	6823      	ldr	r3, [r4, #0]
 8013fd2:	07d8      	lsls	r0, r3, #31
 8013fd4:	d510      	bpl.n	8013ff8 <_printf_float+0x250>
 8013fd6:	ee18 3a10 	vmov	r3, s16
 8013fda:	4652      	mov	r2, sl
 8013fdc:	4631      	mov	r1, r6
 8013fde:	4628      	mov	r0, r5
 8013fe0:	47b8      	blx	r7
 8013fe2:	3001      	adds	r0, #1
 8013fe4:	f43f af41 	beq.w	8013e6a <_printf_float+0xc2>
 8013fe8:	f04f 0800 	mov.w	r8, #0
 8013fec:	f104 091a 	add.w	r9, r4, #26
 8013ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff2:	3b01      	subs	r3, #1
 8013ff4:	4543      	cmp	r3, r8
 8013ff6:	dc09      	bgt.n	801400c <_printf_float+0x264>
 8013ff8:	6823      	ldr	r3, [r4, #0]
 8013ffa:	079b      	lsls	r3, r3, #30
 8013ffc:	f100 8105 	bmi.w	801420a <_printf_float+0x462>
 8014000:	68e0      	ldr	r0, [r4, #12]
 8014002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014004:	4298      	cmp	r0, r3
 8014006:	bfb8      	it	lt
 8014008:	4618      	movlt	r0, r3
 801400a:	e730      	b.n	8013e6e <_printf_float+0xc6>
 801400c:	2301      	movs	r3, #1
 801400e:	464a      	mov	r2, r9
 8014010:	4631      	mov	r1, r6
 8014012:	4628      	mov	r0, r5
 8014014:	47b8      	blx	r7
 8014016:	3001      	adds	r0, #1
 8014018:	f43f af27 	beq.w	8013e6a <_printf_float+0xc2>
 801401c:	f108 0801 	add.w	r8, r8, #1
 8014020:	e7e6      	b.n	8013ff0 <_printf_float+0x248>
 8014022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014024:	2b00      	cmp	r3, #0
 8014026:	dc39      	bgt.n	801409c <_printf_float+0x2f4>
 8014028:	4a1b      	ldr	r2, [pc, #108]	; (8014098 <_printf_float+0x2f0>)
 801402a:	2301      	movs	r3, #1
 801402c:	4631      	mov	r1, r6
 801402e:	4628      	mov	r0, r5
 8014030:	47b8      	blx	r7
 8014032:	3001      	adds	r0, #1
 8014034:	f43f af19 	beq.w	8013e6a <_printf_float+0xc2>
 8014038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801403c:	4313      	orrs	r3, r2
 801403e:	d102      	bne.n	8014046 <_printf_float+0x29e>
 8014040:	6823      	ldr	r3, [r4, #0]
 8014042:	07d9      	lsls	r1, r3, #31
 8014044:	d5d8      	bpl.n	8013ff8 <_printf_float+0x250>
 8014046:	ee18 3a10 	vmov	r3, s16
 801404a:	4652      	mov	r2, sl
 801404c:	4631      	mov	r1, r6
 801404e:	4628      	mov	r0, r5
 8014050:	47b8      	blx	r7
 8014052:	3001      	adds	r0, #1
 8014054:	f43f af09 	beq.w	8013e6a <_printf_float+0xc2>
 8014058:	f04f 0900 	mov.w	r9, #0
 801405c:	f104 0a1a 	add.w	sl, r4, #26
 8014060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014062:	425b      	negs	r3, r3
 8014064:	454b      	cmp	r3, r9
 8014066:	dc01      	bgt.n	801406c <_printf_float+0x2c4>
 8014068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801406a:	e792      	b.n	8013f92 <_printf_float+0x1ea>
 801406c:	2301      	movs	r3, #1
 801406e:	4652      	mov	r2, sl
 8014070:	4631      	mov	r1, r6
 8014072:	4628      	mov	r0, r5
 8014074:	47b8      	blx	r7
 8014076:	3001      	adds	r0, #1
 8014078:	f43f aef7 	beq.w	8013e6a <_printf_float+0xc2>
 801407c:	f109 0901 	add.w	r9, r9, #1
 8014080:	e7ee      	b.n	8014060 <_printf_float+0x2b8>
 8014082:	bf00      	nop
 8014084:	7fefffff 	.word	0x7fefffff
 8014088:	08016e3c 	.word	0x08016e3c
 801408c:	08016e40 	.word	0x08016e40
 8014090:	08016e48 	.word	0x08016e48
 8014094:	08016e44 	.word	0x08016e44
 8014098:	08016e4c 	.word	0x08016e4c
 801409c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801409e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80140a0:	429a      	cmp	r2, r3
 80140a2:	bfa8      	it	ge
 80140a4:	461a      	movge	r2, r3
 80140a6:	2a00      	cmp	r2, #0
 80140a8:	4691      	mov	r9, r2
 80140aa:	dc37      	bgt.n	801411c <_printf_float+0x374>
 80140ac:	f04f 0b00 	mov.w	fp, #0
 80140b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140b4:	f104 021a 	add.w	r2, r4, #26
 80140b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80140ba:	9305      	str	r3, [sp, #20]
 80140bc:	eba3 0309 	sub.w	r3, r3, r9
 80140c0:	455b      	cmp	r3, fp
 80140c2:	dc33      	bgt.n	801412c <_printf_float+0x384>
 80140c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140c8:	429a      	cmp	r2, r3
 80140ca:	db3b      	blt.n	8014144 <_printf_float+0x39c>
 80140cc:	6823      	ldr	r3, [r4, #0]
 80140ce:	07da      	lsls	r2, r3, #31
 80140d0:	d438      	bmi.n	8014144 <_printf_float+0x39c>
 80140d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140d4:	9a05      	ldr	r2, [sp, #20]
 80140d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140d8:	1a9a      	subs	r2, r3, r2
 80140da:	eba3 0901 	sub.w	r9, r3, r1
 80140de:	4591      	cmp	r9, r2
 80140e0:	bfa8      	it	ge
 80140e2:	4691      	movge	r9, r2
 80140e4:	f1b9 0f00 	cmp.w	r9, #0
 80140e8:	dc35      	bgt.n	8014156 <_printf_float+0x3ae>
 80140ea:	f04f 0800 	mov.w	r8, #0
 80140ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140f2:	f104 0a1a 	add.w	sl, r4, #26
 80140f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140fa:	1a9b      	subs	r3, r3, r2
 80140fc:	eba3 0309 	sub.w	r3, r3, r9
 8014100:	4543      	cmp	r3, r8
 8014102:	f77f af79 	ble.w	8013ff8 <_printf_float+0x250>
 8014106:	2301      	movs	r3, #1
 8014108:	4652      	mov	r2, sl
 801410a:	4631      	mov	r1, r6
 801410c:	4628      	mov	r0, r5
 801410e:	47b8      	blx	r7
 8014110:	3001      	adds	r0, #1
 8014112:	f43f aeaa 	beq.w	8013e6a <_printf_float+0xc2>
 8014116:	f108 0801 	add.w	r8, r8, #1
 801411a:	e7ec      	b.n	80140f6 <_printf_float+0x34e>
 801411c:	4613      	mov	r3, r2
 801411e:	4631      	mov	r1, r6
 8014120:	4642      	mov	r2, r8
 8014122:	4628      	mov	r0, r5
 8014124:	47b8      	blx	r7
 8014126:	3001      	adds	r0, #1
 8014128:	d1c0      	bne.n	80140ac <_printf_float+0x304>
 801412a:	e69e      	b.n	8013e6a <_printf_float+0xc2>
 801412c:	2301      	movs	r3, #1
 801412e:	4631      	mov	r1, r6
 8014130:	4628      	mov	r0, r5
 8014132:	9205      	str	r2, [sp, #20]
 8014134:	47b8      	blx	r7
 8014136:	3001      	adds	r0, #1
 8014138:	f43f ae97 	beq.w	8013e6a <_printf_float+0xc2>
 801413c:	9a05      	ldr	r2, [sp, #20]
 801413e:	f10b 0b01 	add.w	fp, fp, #1
 8014142:	e7b9      	b.n	80140b8 <_printf_float+0x310>
 8014144:	ee18 3a10 	vmov	r3, s16
 8014148:	4652      	mov	r2, sl
 801414a:	4631      	mov	r1, r6
 801414c:	4628      	mov	r0, r5
 801414e:	47b8      	blx	r7
 8014150:	3001      	adds	r0, #1
 8014152:	d1be      	bne.n	80140d2 <_printf_float+0x32a>
 8014154:	e689      	b.n	8013e6a <_printf_float+0xc2>
 8014156:	9a05      	ldr	r2, [sp, #20]
 8014158:	464b      	mov	r3, r9
 801415a:	4442      	add	r2, r8
 801415c:	4631      	mov	r1, r6
 801415e:	4628      	mov	r0, r5
 8014160:	47b8      	blx	r7
 8014162:	3001      	adds	r0, #1
 8014164:	d1c1      	bne.n	80140ea <_printf_float+0x342>
 8014166:	e680      	b.n	8013e6a <_printf_float+0xc2>
 8014168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801416a:	2a01      	cmp	r2, #1
 801416c:	dc01      	bgt.n	8014172 <_printf_float+0x3ca>
 801416e:	07db      	lsls	r3, r3, #31
 8014170:	d538      	bpl.n	80141e4 <_printf_float+0x43c>
 8014172:	2301      	movs	r3, #1
 8014174:	4642      	mov	r2, r8
 8014176:	4631      	mov	r1, r6
 8014178:	4628      	mov	r0, r5
 801417a:	47b8      	blx	r7
 801417c:	3001      	adds	r0, #1
 801417e:	f43f ae74 	beq.w	8013e6a <_printf_float+0xc2>
 8014182:	ee18 3a10 	vmov	r3, s16
 8014186:	4652      	mov	r2, sl
 8014188:	4631      	mov	r1, r6
 801418a:	4628      	mov	r0, r5
 801418c:	47b8      	blx	r7
 801418e:	3001      	adds	r0, #1
 8014190:	f43f ae6b 	beq.w	8013e6a <_printf_float+0xc2>
 8014194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014198:	2200      	movs	r2, #0
 801419a:	2300      	movs	r3, #0
 801419c:	f7ec fcac 	bl	8000af8 <__aeabi_dcmpeq>
 80141a0:	b9d8      	cbnz	r0, 80141da <_printf_float+0x432>
 80141a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141a4:	f108 0201 	add.w	r2, r8, #1
 80141a8:	3b01      	subs	r3, #1
 80141aa:	4631      	mov	r1, r6
 80141ac:	4628      	mov	r0, r5
 80141ae:	47b8      	blx	r7
 80141b0:	3001      	adds	r0, #1
 80141b2:	d10e      	bne.n	80141d2 <_printf_float+0x42a>
 80141b4:	e659      	b.n	8013e6a <_printf_float+0xc2>
 80141b6:	2301      	movs	r3, #1
 80141b8:	4652      	mov	r2, sl
 80141ba:	4631      	mov	r1, r6
 80141bc:	4628      	mov	r0, r5
 80141be:	47b8      	blx	r7
 80141c0:	3001      	adds	r0, #1
 80141c2:	f43f ae52 	beq.w	8013e6a <_printf_float+0xc2>
 80141c6:	f108 0801 	add.w	r8, r8, #1
 80141ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141cc:	3b01      	subs	r3, #1
 80141ce:	4543      	cmp	r3, r8
 80141d0:	dcf1      	bgt.n	80141b6 <_printf_float+0x40e>
 80141d2:	464b      	mov	r3, r9
 80141d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80141d8:	e6dc      	b.n	8013f94 <_printf_float+0x1ec>
 80141da:	f04f 0800 	mov.w	r8, #0
 80141de:	f104 0a1a 	add.w	sl, r4, #26
 80141e2:	e7f2      	b.n	80141ca <_printf_float+0x422>
 80141e4:	2301      	movs	r3, #1
 80141e6:	4642      	mov	r2, r8
 80141e8:	e7df      	b.n	80141aa <_printf_float+0x402>
 80141ea:	2301      	movs	r3, #1
 80141ec:	464a      	mov	r2, r9
 80141ee:	4631      	mov	r1, r6
 80141f0:	4628      	mov	r0, r5
 80141f2:	47b8      	blx	r7
 80141f4:	3001      	adds	r0, #1
 80141f6:	f43f ae38 	beq.w	8013e6a <_printf_float+0xc2>
 80141fa:	f108 0801 	add.w	r8, r8, #1
 80141fe:	68e3      	ldr	r3, [r4, #12]
 8014200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014202:	1a5b      	subs	r3, r3, r1
 8014204:	4543      	cmp	r3, r8
 8014206:	dcf0      	bgt.n	80141ea <_printf_float+0x442>
 8014208:	e6fa      	b.n	8014000 <_printf_float+0x258>
 801420a:	f04f 0800 	mov.w	r8, #0
 801420e:	f104 0919 	add.w	r9, r4, #25
 8014212:	e7f4      	b.n	80141fe <_printf_float+0x456>

08014214 <_printf_common>:
 8014214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014218:	4616      	mov	r6, r2
 801421a:	4699      	mov	r9, r3
 801421c:	688a      	ldr	r2, [r1, #8]
 801421e:	690b      	ldr	r3, [r1, #16]
 8014220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014224:	4293      	cmp	r3, r2
 8014226:	bfb8      	it	lt
 8014228:	4613      	movlt	r3, r2
 801422a:	6033      	str	r3, [r6, #0]
 801422c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014230:	4607      	mov	r7, r0
 8014232:	460c      	mov	r4, r1
 8014234:	b10a      	cbz	r2, 801423a <_printf_common+0x26>
 8014236:	3301      	adds	r3, #1
 8014238:	6033      	str	r3, [r6, #0]
 801423a:	6823      	ldr	r3, [r4, #0]
 801423c:	0699      	lsls	r1, r3, #26
 801423e:	bf42      	ittt	mi
 8014240:	6833      	ldrmi	r3, [r6, #0]
 8014242:	3302      	addmi	r3, #2
 8014244:	6033      	strmi	r3, [r6, #0]
 8014246:	6825      	ldr	r5, [r4, #0]
 8014248:	f015 0506 	ands.w	r5, r5, #6
 801424c:	d106      	bne.n	801425c <_printf_common+0x48>
 801424e:	f104 0a19 	add.w	sl, r4, #25
 8014252:	68e3      	ldr	r3, [r4, #12]
 8014254:	6832      	ldr	r2, [r6, #0]
 8014256:	1a9b      	subs	r3, r3, r2
 8014258:	42ab      	cmp	r3, r5
 801425a:	dc26      	bgt.n	80142aa <_printf_common+0x96>
 801425c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014260:	1e13      	subs	r3, r2, #0
 8014262:	6822      	ldr	r2, [r4, #0]
 8014264:	bf18      	it	ne
 8014266:	2301      	movne	r3, #1
 8014268:	0692      	lsls	r2, r2, #26
 801426a:	d42b      	bmi.n	80142c4 <_printf_common+0xb0>
 801426c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014270:	4649      	mov	r1, r9
 8014272:	4638      	mov	r0, r7
 8014274:	47c0      	blx	r8
 8014276:	3001      	adds	r0, #1
 8014278:	d01e      	beq.n	80142b8 <_printf_common+0xa4>
 801427a:	6823      	ldr	r3, [r4, #0]
 801427c:	68e5      	ldr	r5, [r4, #12]
 801427e:	6832      	ldr	r2, [r6, #0]
 8014280:	f003 0306 	and.w	r3, r3, #6
 8014284:	2b04      	cmp	r3, #4
 8014286:	bf08      	it	eq
 8014288:	1aad      	subeq	r5, r5, r2
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	6922      	ldr	r2, [r4, #16]
 801428e:	bf0c      	ite	eq
 8014290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014294:	2500      	movne	r5, #0
 8014296:	4293      	cmp	r3, r2
 8014298:	bfc4      	itt	gt
 801429a:	1a9b      	subgt	r3, r3, r2
 801429c:	18ed      	addgt	r5, r5, r3
 801429e:	2600      	movs	r6, #0
 80142a0:	341a      	adds	r4, #26
 80142a2:	42b5      	cmp	r5, r6
 80142a4:	d11a      	bne.n	80142dc <_printf_common+0xc8>
 80142a6:	2000      	movs	r0, #0
 80142a8:	e008      	b.n	80142bc <_printf_common+0xa8>
 80142aa:	2301      	movs	r3, #1
 80142ac:	4652      	mov	r2, sl
 80142ae:	4649      	mov	r1, r9
 80142b0:	4638      	mov	r0, r7
 80142b2:	47c0      	blx	r8
 80142b4:	3001      	adds	r0, #1
 80142b6:	d103      	bne.n	80142c0 <_printf_common+0xac>
 80142b8:	f04f 30ff 	mov.w	r0, #4294967295
 80142bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142c0:	3501      	adds	r5, #1
 80142c2:	e7c6      	b.n	8014252 <_printf_common+0x3e>
 80142c4:	18e1      	adds	r1, r4, r3
 80142c6:	1c5a      	adds	r2, r3, #1
 80142c8:	2030      	movs	r0, #48	; 0x30
 80142ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142ce:	4422      	add	r2, r4
 80142d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142d8:	3302      	adds	r3, #2
 80142da:	e7c7      	b.n	801426c <_printf_common+0x58>
 80142dc:	2301      	movs	r3, #1
 80142de:	4622      	mov	r2, r4
 80142e0:	4649      	mov	r1, r9
 80142e2:	4638      	mov	r0, r7
 80142e4:	47c0      	blx	r8
 80142e6:	3001      	adds	r0, #1
 80142e8:	d0e6      	beq.n	80142b8 <_printf_common+0xa4>
 80142ea:	3601      	adds	r6, #1
 80142ec:	e7d9      	b.n	80142a2 <_printf_common+0x8e>
	...

080142f0 <_printf_i>:
 80142f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142f4:	7e0f      	ldrb	r7, [r1, #24]
 80142f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80142f8:	2f78      	cmp	r7, #120	; 0x78
 80142fa:	4691      	mov	r9, r2
 80142fc:	4680      	mov	r8, r0
 80142fe:	460c      	mov	r4, r1
 8014300:	469a      	mov	sl, r3
 8014302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014306:	d807      	bhi.n	8014318 <_printf_i+0x28>
 8014308:	2f62      	cmp	r7, #98	; 0x62
 801430a:	d80a      	bhi.n	8014322 <_printf_i+0x32>
 801430c:	2f00      	cmp	r7, #0
 801430e:	f000 80d8 	beq.w	80144c2 <_printf_i+0x1d2>
 8014312:	2f58      	cmp	r7, #88	; 0x58
 8014314:	f000 80a3 	beq.w	801445e <_printf_i+0x16e>
 8014318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801431c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014320:	e03a      	b.n	8014398 <_printf_i+0xa8>
 8014322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014326:	2b15      	cmp	r3, #21
 8014328:	d8f6      	bhi.n	8014318 <_printf_i+0x28>
 801432a:	a101      	add	r1, pc, #4	; (adr r1, 8014330 <_printf_i+0x40>)
 801432c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014330:	08014389 	.word	0x08014389
 8014334:	0801439d 	.word	0x0801439d
 8014338:	08014319 	.word	0x08014319
 801433c:	08014319 	.word	0x08014319
 8014340:	08014319 	.word	0x08014319
 8014344:	08014319 	.word	0x08014319
 8014348:	0801439d 	.word	0x0801439d
 801434c:	08014319 	.word	0x08014319
 8014350:	08014319 	.word	0x08014319
 8014354:	08014319 	.word	0x08014319
 8014358:	08014319 	.word	0x08014319
 801435c:	080144a9 	.word	0x080144a9
 8014360:	080143cd 	.word	0x080143cd
 8014364:	0801448b 	.word	0x0801448b
 8014368:	08014319 	.word	0x08014319
 801436c:	08014319 	.word	0x08014319
 8014370:	080144cb 	.word	0x080144cb
 8014374:	08014319 	.word	0x08014319
 8014378:	080143cd 	.word	0x080143cd
 801437c:	08014319 	.word	0x08014319
 8014380:	08014319 	.word	0x08014319
 8014384:	08014493 	.word	0x08014493
 8014388:	682b      	ldr	r3, [r5, #0]
 801438a:	1d1a      	adds	r2, r3, #4
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	602a      	str	r2, [r5, #0]
 8014390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014398:	2301      	movs	r3, #1
 801439a:	e0a3      	b.n	80144e4 <_printf_i+0x1f4>
 801439c:	6820      	ldr	r0, [r4, #0]
 801439e:	6829      	ldr	r1, [r5, #0]
 80143a0:	0606      	lsls	r6, r0, #24
 80143a2:	f101 0304 	add.w	r3, r1, #4
 80143a6:	d50a      	bpl.n	80143be <_printf_i+0xce>
 80143a8:	680e      	ldr	r6, [r1, #0]
 80143aa:	602b      	str	r3, [r5, #0]
 80143ac:	2e00      	cmp	r6, #0
 80143ae:	da03      	bge.n	80143b8 <_printf_i+0xc8>
 80143b0:	232d      	movs	r3, #45	; 0x2d
 80143b2:	4276      	negs	r6, r6
 80143b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143b8:	485e      	ldr	r0, [pc, #376]	; (8014534 <_printf_i+0x244>)
 80143ba:	230a      	movs	r3, #10
 80143bc:	e019      	b.n	80143f2 <_printf_i+0x102>
 80143be:	680e      	ldr	r6, [r1, #0]
 80143c0:	602b      	str	r3, [r5, #0]
 80143c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80143c6:	bf18      	it	ne
 80143c8:	b236      	sxthne	r6, r6
 80143ca:	e7ef      	b.n	80143ac <_printf_i+0xbc>
 80143cc:	682b      	ldr	r3, [r5, #0]
 80143ce:	6820      	ldr	r0, [r4, #0]
 80143d0:	1d19      	adds	r1, r3, #4
 80143d2:	6029      	str	r1, [r5, #0]
 80143d4:	0601      	lsls	r1, r0, #24
 80143d6:	d501      	bpl.n	80143dc <_printf_i+0xec>
 80143d8:	681e      	ldr	r6, [r3, #0]
 80143da:	e002      	b.n	80143e2 <_printf_i+0xf2>
 80143dc:	0646      	lsls	r6, r0, #25
 80143de:	d5fb      	bpl.n	80143d8 <_printf_i+0xe8>
 80143e0:	881e      	ldrh	r6, [r3, #0]
 80143e2:	4854      	ldr	r0, [pc, #336]	; (8014534 <_printf_i+0x244>)
 80143e4:	2f6f      	cmp	r7, #111	; 0x6f
 80143e6:	bf0c      	ite	eq
 80143e8:	2308      	moveq	r3, #8
 80143ea:	230a      	movne	r3, #10
 80143ec:	2100      	movs	r1, #0
 80143ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80143f2:	6865      	ldr	r5, [r4, #4]
 80143f4:	60a5      	str	r5, [r4, #8]
 80143f6:	2d00      	cmp	r5, #0
 80143f8:	bfa2      	ittt	ge
 80143fa:	6821      	ldrge	r1, [r4, #0]
 80143fc:	f021 0104 	bicge.w	r1, r1, #4
 8014400:	6021      	strge	r1, [r4, #0]
 8014402:	b90e      	cbnz	r6, 8014408 <_printf_i+0x118>
 8014404:	2d00      	cmp	r5, #0
 8014406:	d04d      	beq.n	80144a4 <_printf_i+0x1b4>
 8014408:	4615      	mov	r5, r2
 801440a:	fbb6 f1f3 	udiv	r1, r6, r3
 801440e:	fb03 6711 	mls	r7, r3, r1, r6
 8014412:	5dc7      	ldrb	r7, [r0, r7]
 8014414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014418:	4637      	mov	r7, r6
 801441a:	42bb      	cmp	r3, r7
 801441c:	460e      	mov	r6, r1
 801441e:	d9f4      	bls.n	801440a <_printf_i+0x11a>
 8014420:	2b08      	cmp	r3, #8
 8014422:	d10b      	bne.n	801443c <_printf_i+0x14c>
 8014424:	6823      	ldr	r3, [r4, #0]
 8014426:	07de      	lsls	r6, r3, #31
 8014428:	d508      	bpl.n	801443c <_printf_i+0x14c>
 801442a:	6923      	ldr	r3, [r4, #16]
 801442c:	6861      	ldr	r1, [r4, #4]
 801442e:	4299      	cmp	r1, r3
 8014430:	bfde      	ittt	le
 8014432:	2330      	movle	r3, #48	; 0x30
 8014434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014438:	f105 35ff 	addle.w	r5, r5, #4294967295
 801443c:	1b52      	subs	r2, r2, r5
 801443e:	6122      	str	r2, [r4, #16]
 8014440:	f8cd a000 	str.w	sl, [sp]
 8014444:	464b      	mov	r3, r9
 8014446:	aa03      	add	r2, sp, #12
 8014448:	4621      	mov	r1, r4
 801444a:	4640      	mov	r0, r8
 801444c:	f7ff fee2 	bl	8014214 <_printf_common>
 8014450:	3001      	adds	r0, #1
 8014452:	d14c      	bne.n	80144ee <_printf_i+0x1fe>
 8014454:	f04f 30ff 	mov.w	r0, #4294967295
 8014458:	b004      	add	sp, #16
 801445a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801445e:	4835      	ldr	r0, [pc, #212]	; (8014534 <_printf_i+0x244>)
 8014460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014464:	6829      	ldr	r1, [r5, #0]
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	f851 6b04 	ldr.w	r6, [r1], #4
 801446c:	6029      	str	r1, [r5, #0]
 801446e:	061d      	lsls	r5, r3, #24
 8014470:	d514      	bpl.n	801449c <_printf_i+0x1ac>
 8014472:	07df      	lsls	r7, r3, #31
 8014474:	bf44      	itt	mi
 8014476:	f043 0320 	orrmi.w	r3, r3, #32
 801447a:	6023      	strmi	r3, [r4, #0]
 801447c:	b91e      	cbnz	r6, 8014486 <_printf_i+0x196>
 801447e:	6823      	ldr	r3, [r4, #0]
 8014480:	f023 0320 	bic.w	r3, r3, #32
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	2310      	movs	r3, #16
 8014488:	e7b0      	b.n	80143ec <_printf_i+0xfc>
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	f043 0320 	orr.w	r3, r3, #32
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	2378      	movs	r3, #120	; 0x78
 8014494:	4828      	ldr	r0, [pc, #160]	; (8014538 <_printf_i+0x248>)
 8014496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801449a:	e7e3      	b.n	8014464 <_printf_i+0x174>
 801449c:	0659      	lsls	r1, r3, #25
 801449e:	bf48      	it	mi
 80144a0:	b2b6      	uxthmi	r6, r6
 80144a2:	e7e6      	b.n	8014472 <_printf_i+0x182>
 80144a4:	4615      	mov	r5, r2
 80144a6:	e7bb      	b.n	8014420 <_printf_i+0x130>
 80144a8:	682b      	ldr	r3, [r5, #0]
 80144aa:	6826      	ldr	r6, [r4, #0]
 80144ac:	6961      	ldr	r1, [r4, #20]
 80144ae:	1d18      	adds	r0, r3, #4
 80144b0:	6028      	str	r0, [r5, #0]
 80144b2:	0635      	lsls	r5, r6, #24
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	d501      	bpl.n	80144bc <_printf_i+0x1cc>
 80144b8:	6019      	str	r1, [r3, #0]
 80144ba:	e002      	b.n	80144c2 <_printf_i+0x1d2>
 80144bc:	0670      	lsls	r0, r6, #25
 80144be:	d5fb      	bpl.n	80144b8 <_printf_i+0x1c8>
 80144c0:	8019      	strh	r1, [r3, #0]
 80144c2:	2300      	movs	r3, #0
 80144c4:	6123      	str	r3, [r4, #16]
 80144c6:	4615      	mov	r5, r2
 80144c8:	e7ba      	b.n	8014440 <_printf_i+0x150>
 80144ca:	682b      	ldr	r3, [r5, #0]
 80144cc:	1d1a      	adds	r2, r3, #4
 80144ce:	602a      	str	r2, [r5, #0]
 80144d0:	681d      	ldr	r5, [r3, #0]
 80144d2:	6862      	ldr	r2, [r4, #4]
 80144d4:	2100      	movs	r1, #0
 80144d6:	4628      	mov	r0, r5
 80144d8:	f7eb fe9a 	bl	8000210 <memchr>
 80144dc:	b108      	cbz	r0, 80144e2 <_printf_i+0x1f2>
 80144de:	1b40      	subs	r0, r0, r5
 80144e0:	6060      	str	r0, [r4, #4]
 80144e2:	6863      	ldr	r3, [r4, #4]
 80144e4:	6123      	str	r3, [r4, #16]
 80144e6:	2300      	movs	r3, #0
 80144e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144ec:	e7a8      	b.n	8014440 <_printf_i+0x150>
 80144ee:	6923      	ldr	r3, [r4, #16]
 80144f0:	462a      	mov	r2, r5
 80144f2:	4649      	mov	r1, r9
 80144f4:	4640      	mov	r0, r8
 80144f6:	47d0      	blx	sl
 80144f8:	3001      	adds	r0, #1
 80144fa:	d0ab      	beq.n	8014454 <_printf_i+0x164>
 80144fc:	6823      	ldr	r3, [r4, #0]
 80144fe:	079b      	lsls	r3, r3, #30
 8014500:	d413      	bmi.n	801452a <_printf_i+0x23a>
 8014502:	68e0      	ldr	r0, [r4, #12]
 8014504:	9b03      	ldr	r3, [sp, #12]
 8014506:	4298      	cmp	r0, r3
 8014508:	bfb8      	it	lt
 801450a:	4618      	movlt	r0, r3
 801450c:	e7a4      	b.n	8014458 <_printf_i+0x168>
 801450e:	2301      	movs	r3, #1
 8014510:	4632      	mov	r2, r6
 8014512:	4649      	mov	r1, r9
 8014514:	4640      	mov	r0, r8
 8014516:	47d0      	blx	sl
 8014518:	3001      	adds	r0, #1
 801451a:	d09b      	beq.n	8014454 <_printf_i+0x164>
 801451c:	3501      	adds	r5, #1
 801451e:	68e3      	ldr	r3, [r4, #12]
 8014520:	9903      	ldr	r1, [sp, #12]
 8014522:	1a5b      	subs	r3, r3, r1
 8014524:	42ab      	cmp	r3, r5
 8014526:	dcf2      	bgt.n	801450e <_printf_i+0x21e>
 8014528:	e7eb      	b.n	8014502 <_printf_i+0x212>
 801452a:	2500      	movs	r5, #0
 801452c:	f104 0619 	add.w	r6, r4, #25
 8014530:	e7f5      	b.n	801451e <_printf_i+0x22e>
 8014532:	bf00      	nop
 8014534:	08016e4e 	.word	0x08016e4e
 8014538:	08016e5f 	.word	0x08016e5f

0801453c <cleanup_glue>:
 801453c:	b538      	push	{r3, r4, r5, lr}
 801453e:	460c      	mov	r4, r1
 8014540:	6809      	ldr	r1, [r1, #0]
 8014542:	4605      	mov	r5, r0
 8014544:	b109      	cbz	r1, 801454a <cleanup_glue+0xe>
 8014546:	f7ff fff9 	bl	801453c <cleanup_glue>
 801454a:	4621      	mov	r1, r4
 801454c:	4628      	mov	r0, r5
 801454e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014552:	f001 bbf5 	b.w	8015d40 <_free_r>
	...

08014558 <_reclaim_reent>:
 8014558:	4b2c      	ldr	r3, [pc, #176]	; (801460c <_reclaim_reent+0xb4>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	4283      	cmp	r3, r0
 801455e:	b570      	push	{r4, r5, r6, lr}
 8014560:	4604      	mov	r4, r0
 8014562:	d051      	beq.n	8014608 <_reclaim_reent+0xb0>
 8014564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014566:	b143      	cbz	r3, 801457a <_reclaim_reent+0x22>
 8014568:	68db      	ldr	r3, [r3, #12]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d14a      	bne.n	8014604 <_reclaim_reent+0xac>
 801456e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014570:	6819      	ldr	r1, [r3, #0]
 8014572:	b111      	cbz	r1, 801457a <_reclaim_reent+0x22>
 8014574:	4620      	mov	r0, r4
 8014576:	f001 fbe3 	bl	8015d40 <_free_r>
 801457a:	6961      	ldr	r1, [r4, #20]
 801457c:	b111      	cbz	r1, 8014584 <_reclaim_reent+0x2c>
 801457e:	4620      	mov	r0, r4
 8014580:	f001 fbde 	bl	8015d40 <_free_r>
 8014584:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014586:	b111      	cbz	r1, 801458e <_reclaim_reent+0x36>
 8014588:	4620      	mov	r0, r4
 801458a:	f001 fbd9 	bl	8015d40 <_free_r>
 801458e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014590:	b111      	cbz	r1, 8014598 <_reclaim_reent+0x40>
 8014592:	4620      	mov	r0, r4
 8014594:	f001 fbd4 	bl	8015d40 <_free_r>
 8014598:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801459a:	b111      	cbz	r1, 80145a2 <_reclaim_reent+0x4a>
 801459c:	4620      	mov	r0, r4
 801459e:	f001 fbcf 	bl	8015d40 <_free_r>
 80145a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80145a4:	b111      	cbz	r1, 80145ac <_reclaim_reent+0x54>
 80145a6:	4620      	mov	r0, r4
 80145a8:	f001 fbca 	bl	8015d40 <_free_r>
 80145ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80145ae:	b111      	cbz	r1, 80145b6 <_reclaim_reent+0x5e>
 80145b0:	4620      	mov	r0, r4
 80145b2:	f001 fbc5 	bl	8015d40 <_free_r>
 80145b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80145b8:	b111      	cbz	r1, 80145c0 <_reclaim_reent+0x68>
 80145ba:	4620      	mov	r0, r4
 80145bc:	f001 fbc0 	bl	8015d40 <_free_r>
 80145c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145c2:	b111      	cbz	r1, 80145ca <_reclaim_reent+0x72>
 80145c4:	4620      	mov	r0, r4
 80145c6:	f001 fbbb 	bl	8015d40 <_free_r>
 80145ca:	69a3      	ldr	r3, [r4, #24]
 80145cc:	b1e3      	cbz	r3, 8014608 <_reclaim_reent+0xb0>
 80145ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80145d0:	4620      	mov	r0, r4
 80145d2:	4798      	blx	r3
 80145d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80145d6:	b1b9      	cbz	r1, 8014608 <_reclaim_reent+0xb0>
 80145d8:	4620      	mov	r0, r4
 80145da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145de:	f7ff bfad 	b.w	801453c <cleanup_glue>
 80145e2:	5949      	ldr	r1, [r1, r5]
 80145e4:	b941      	cbnz	r1, 80145f8 <_reclaim_reent+0xa0>
 80145e6:	3504      	adds	r5, #4
 80145e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145ea:	2d80      	cmp	r5, #128	; 0x80
 80145ec:	68d9      	ldr	r1, [r3, #12]
 80145ee:	d1f8      	bne.n	80145e2 <_reclaim_reent+0x8a>
 80145f0:	4620      	mov	r0, r4
 80145f2:	f001 fba5 	bl	8015d40 <_free_r>
 80145f6:	e7ba      	b.n	801456e <_reclaim_reent+0x16>
 80145f8:	680e      	ldr	r6, [r1, #0]
 80145fa:	4620      	mov	r0, r4
 80145fc:	f001 fba0 	bl	8015d40 <_free_r>
 8014600:	4631      	mov	r1, r6
 8014602:	e7ef      	b.n	80145e4 <_reclaim_reent+0x8c>
 8014604:	2500      	movs	r5, #0
 8014606:	e7ef      	b.n	80145e8 <_reclaim_reent+0x90>
 8014608:	bd70      	pop	{r4, r5, r6, pc}
 801460a:	bf00      	nop
 801460c:	2000039c 	.word	0x2000039c

08014610 <_sbrk_r>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	4d06      	ldr	r5, [pc, #24]	; (801462c <_sbrk_r+0x1c>)
 8014614:	2300      	movs	r3, #0
 8014616:	4604      	mov	r4, r0
 8014618:	4608      	mov	r0, r1
 801461a:	602b      	str	r3, [r5, #0]
 801461c:	f7f0 fce8 	bl	8004ff0 <_sbrk>
 8014620:	1c43      	adds	r3, r0, #1
 8014622:	d102      	bne.n	801462a <_sbrk_r+0x1a>
 8014624:	682b      	ldr	r3, [r5, #0]
 8014626:	b103      	cbz	r3, 801462a <_sbrk_r+0x1a>
 8014628:	6023      	str	r3, [r4, #0]
 801462a:	bd38      	pop	{r3, r4, r5, pc}
 801462c:	20009858 	.word	0x20009858

08014630 <siprintf>:
 8014630:	b40e      	push	{r1, r2, r3}
 8014632:	b500      	push	{lr}
 8014634:	b09c      	sub	sp, #112	; 0x70
 8014636:	ab1d      	add	r3, sp, #116	; 0x74
 8014638:	9002      	str	r0, [sp, #8]
 801463a:	9006      	str	r0, [sp, #24]
 801463c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014640:	4809      	ldr	r0, [pc, #36]	; (8014668 <siprintf+0x38>)
 8014642:	9107      	str	r1, [sp, #28]
 8014644:	9104      	str	r1, [sp, #16]
 8014646:	4909      	ldr	r1, [pc, #36]	; (801466c <siprintf+0x3c>)
 8014648:	f853 2b04 	ldr.w	r2, [r3], #4
 801464c:	9105      	str	r1, [sp, #20]
 801464e:	6800      	ldr	r0, [r0, #0]
 8014650:	9301      	str	r3, [sp, #4]
 8014652:	a902      	add	r1, sp, #8
 8014654:	f001 fc1c 	bl	8015e90 <_svfiprintf_r>
 8014658:	9b02      	ldr	r3, [sp, #8]
 801465a:	2200      	movs	r2, #0
 801465c:	701a      	strb	r2, [r3, #0]
 801465e:	b01c      	add	sp, #112	; 0x70
 8014660:	f85d eb04 	ldr.w	lr, [sp], #4
 8014664:	b003      	add	sp, #12
 8014666:	4770      	bx	lr
 8014668:	2000039c 	.word	0x2000039c
 801466c:	ffff0208 	.word	0xffff0208

08014670 <__sread>:
 8014670:	b510      	push	{r4, lr}
 8014672:	460c      	mov	r4, r1
 8014674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014678:	f001 fd0a 	bl	8016090 <_read_r>
 801467c:	2800      	cmp	r0, #0
 801467e:	bfab      	itete	ge
 8014680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014682:	89a3      	ldrhlt	r3, [r4, #12]
 8014684:	181b      	addge	r3, r3, r0
 8014686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801468a:	bfac      	ite	ge
 801468c:	6563      	strge	r3, [r4, #84]	; 0x54
 801468e:	81a3      	strhlt	r3, [r4, #12]
 8014690:	bd10      	pop	{r4, pc}

08014692 <__swrite>:
 8014692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014696:	461f      	mov	r7, r3
 8014698:	898b      	ldrh	r3, [r1, #12]
 801469a:	05db      	lsls	r3, r3, #23
 801469c:	4605      	mov	r5, r0
 801469e:	460c      	mov	r4, r1
 80146a0:	4616      	mov	r6, r2
 80146a2:	d505      	bpl.n	80146b0 <__swrite+0x1e>
 80146a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146a8:	2302      	movs	r3, #2
 80146aa:	2200      	movs	r2, #0
 80146ac:	f000 ff88 	bl	80155c0 <_lseek_r>
 80146b0:	89a3      	ldrh	r3, [r4, #12]
 80146b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146ba:	81a3      	strh	r3, [r4, #12]
 80146bc:	4632      	mov	r2, r6
 80146be:	463b      	mov	r3, r7
 80146c0:	4628      	mov	r0, r5
 80146c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146c6:	f000 b817 	b.w	80146f8 <_write_r>

080146ca <__sseek>:
 80146ca:	b510      	push	{r4, lr}
 80146cc:	460c      	mov	r4, r1
 80146ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146d2:	f000 ff75 	bl	80155c0 <_lseek_r>
 80146d6:	1c43      	adds	r3, r0, #1
 80146d8:	89a3      	ldrh	r3, [r4, #12]
 80146da:	bf15      	itete	ne
 80146dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80146de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146e6:	81a3      	strheq	r3, [r4, #12]
 80146e8:	bf18      	it	ne
 80146ea:	81a3      	strhne	r3, [r4, #12]
 80146ec:	bd10      	pop	{r4, pc}

080146ee <__sclose>:
 80146ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f2:	f000 b813 	b.w	801471c <_close_r>
	...

080146f8 <_write_r>:
 80146f8:	b538      	push	{r3, r4, r5, lr}
 80146fa:	4d07      	ldr	r5, [pc, #28]	; (8014718 <_write_r+0x20>)
 80146fc:	4604      	mov	r4, r0
 80146fe:	4608      	mov	r0, r1
 8014700:	4611      	mov	r1, r2
 8014702:	2200      	movs	r2, #0
 8014704:	602a      	str	r2, [r5, #0]
 8014706:	461a      	mov	r2, r3
 8014708:	f7f0 fc21 	bl	8004f4e <_write>
 801470c:	1c43      	adds	r3, r0, #1
 801470e:	d102      	bne.n	8014716 <_write_r+0x1e>
 8014710:	682b      	ldr	r3, [r5, #0]
 8014712:	b103      	cbz	r3, 8014716 <_write_r+0x1e>
 8014714:	6023      	str	r3, [r4, #0]
 8014716:	bd38      	pop	{r3, r4, r5, pc}
 8014718:	20009858 	.word	0x20009858

0801471c <_close_r>:
 801471c:	b538      	push	{r3, r4, r5, lr}
 801471e:	4d06      	ldr	r5, [pc, #24]	; (8014738 <_close_r+0x1c>)
 8014720:	2300      	movs	r3, #0
 8014722:	4604      	mov	r4, r0
 8014724:	4608      	mov	r0, r1
 8014726:	602b      	str	r3, [r5, #0]
 8014728:	f7f0 fc2d 	bl	8004f86 <_close>
 801472c:	1c43      	adds	r3, r0, #1
 801472e:	d102      	bne.n	8014736 <_close_r+0x1a>
 8014730:	682b      	ldr	r3, [r5, #0]
 8014732:	b103      	cbz	r3, 8014736 <_close_r+0x1a>
 8014734:	6023      	str	r3, [r4, #0]
 8014736:	bd38      	pop	{r3, r4, r5, pc}
 8014738:	20009858 	.word	0x20009858

0801473c <quorem>:
 801473c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	6903      	ldr	r3, [r0, #16]
 8014742:	690c      	ldr	r4, [r1, #16]
 8014744:	42a3      	cmp	r3, r4
 8014746:	4607      	mov	r7, r0
 8014748:	f2c0 8081 	blt.w	801484e <quorem+0x112>
 801474c:	3c01      	subs	r4, #1
 801474e:	f101 0814 	add.w	r8, r1, #20
 8014752:	f100 0514 	add.w	r5, r0, #20
 8014756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801475a:	9301      	str	r3, [sp, #4]
 801475c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014764:	3301      	adds	r3, #1
 8014766:	429a      	cmp	r2, r3
 8014768:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801476c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014770:	fbb2 f6f3 	udiv	r6, r2, r3
 8014774:	d331      	bcc.n	80147da <quorem+0x9e>
 8014776:	f04f 0e00 	mov.w	lr, #0
 801477a:	4640      	mov	r0, r8
 801477c:	46ac      	mov	ip, r5
 801477e:	46f2      	mov	sl, lr
 8014780:	f850 2b04 	ldr.w	r2, [r0], #4
 8014784:	b293      	uxth	r3, r2
 8014786:	fb06 e303 	mla	r3, r6, r3, lr
 801478a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801478e:	b29b      	uxth	r3, r3
 8014790:	ebaa 0303 	sub.w	r3, sl, r3
 8014794:	f8dc a000 	ldr.w	sl, [ip]
 8014798:	0c12      	lsrs	r2, r2, #16
 801479a:	fa13 f38a 	uxtah	r3, r3, sl
 801479e:	fb06 e202 	mla	r2, r6, r2, lr
 80147a2:	9300      	str	r3, [sp, #0]
 80147a4:	9b00      	ldr	r3, [sp, #0]
 80147a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147aa:	b292      	uxth	r2, r2
 80147ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80147b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80147b8:	4581      	cmp	r9, r0
 80147ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147be:	f84c 3b04 	str.w	r3, [ip], #4
 80147c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80147c6:	d2db      	bcs.n	8014780 <quorem+0x44>
 80147c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80147cc:	b92b      	cbnz	r3, 80147da <quorem+0x9e>
 80147ce:	9b01      	ldr	r3, [sp, #4]
 80147d0:	3b04      	subs	r3, #4
 80147d2:	429d      	cmp	r5, r3
 80147d4:	461a      	mov	r2, r3
 80147d6:	d32e      	bcc.n	8014836 <quorem+0xfa>
 80147d8:	613c      	str	r4, [r7, #16]
 80147da:	4638      	mov	r0, r7
 80147dc:	f001 f998 	bl	8015b10 <__mcmp>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	db24      	blt.n	801482e <quorem+0xf2>
 80147e4:	3601      	adds	r6, #1
 80147e6:	4628      	mov	r0, r5
 80147e8:	f04f 0c00 	mov.w	ip, #0
 80147ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80147f0:	f8d0 e000 	ldr.w	lr, [r0]
 80147f4:	b293      	uxth	r3, r2
 80147f6:	ebac 0303 	sub.w	r3, ip, r3
 80147fa:	0c12      	lsrs	r2, r2, #16
 80147fc:	fa13 f38e 	uxtah	r3, r3, lr
 8014800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014808:	b29b      	uxth	r3, r3
 801480a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801480e:	45c1      	cmp	r9, r8
 8014810:	f840 3b04 	str.w	r3, [r0], #4
 8014814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014818:	d2e8      	bcs.n	80147ec <quorem+0xb0>
 801481a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801481e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014822:	b922      	cbnz	r2, 801482e <quorem+0xf2>
 8014824:	3b04      	subs	r3, #4
 8014826:	429d      	cmp	r5, r3
 8014828:	461a      	mov	r2, r3
 801482a:	d30a      	bcc.n	8014842 <quorem+0x106>
 801482c:	613c      	str	r4, [r7, #16]
 801482e:	4630      	mov	r0, r6
 8014830:	b003      	add	sp, #12
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014836:	6812      	ldr	r2, [r2, #0]
 8014838:	3b04      	subs	r3, #4
 801483a:	2a00      	cmp	r2, #0
 801483c:	d1cc      	bne.n	80147d8 <quorem+0x9c>
 801483e:	3c01      	subs	r4, #1
 8014840:	e7c7      	b.n	80147d2 <quorem+0x96>
 8014842:	6812      	ldr	r2, [r2, #0]
 8014844:	3b04      	subs	r3, #4
 8014846:	2a00      	cmp	r2, #0
 8014848:	d1f0      	bne.n	801482c <quorem+0xf0>
 801484a:	3c01      	subs	r4, #1
 801484c:	e7eb      	b.n	8014826 <quorem+0xea>
 801484e:	2000      	movs	r0, #0
 8014850:	e7ee      	b.n	8014830 <quorem+0xf4>
 8014852:	0000      	movs	r0, r0
 8014854:	0000      	movs	r0, r0
	...

08014858 <_dtoa_r>:
 8014858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801485c:	ed2d 8b04 	vpush	{d8-d9}
 8014860:	ec57 6b10 	vmov	r6, r7, d0
 8014864:	b093      	sub	sp, #76	; 0x4c
 8014866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801486c:	9106      	str	r1, [sp, #24]
 801486e:	ee10 aa10 	vmov	sl, s0
 8014872:	4604      	mov	r4, r0
 8014874:	9209      	str	r2, [sp, #36]	; 0x24
 8014876:	930c      	str	r3, [sp, #48]	; 0x30
 8014878:	46bb      	mov	fp, r7
 801487a:	b975      	cbnz	r5, 801489a <_dtoa_r+0x42>
 801487c:	2010      	movs	r0, #16
 801487e:	f000 feb1 	bl	80155e4 <malloc>
 8014882:	4602      	mov	r2, r0
 8014884:	6260      	str	r0, [r4, #36]	; 0x24
 8014886:	b920      	cbnz	r0, 8014892 <_dtoa_r+0x3a>
 8014888:	4ba7      	ldr	r3, [pc, #668]	; (8014b28 <_dtoa_r+0x2d0>)
 801488a:	21ea      	movs	r1, #234	; 0xea
 801488c:	48a7      	ldr	r0, [pc, #668]	; (8014b2c <_dtoa_r+0x2d4>)
 801488e:	f001 fc11 	bl	80160b4 <__assert_func>
 8014892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014896:	6005      	str	r5, [r0, #0]
 8014898:	60c5      	str	r5, [r0, #12]
 801489a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801489c:	6819      	ldr	r1, [r3, #0]
 801489e:	b151      	cbz	r1, 80148b6 <_dtoa_r+0x5e>
 80148a0:	685a      	ldr	r2, [r3, #4]
 80148a2:	604a      	str	r2, [r1, #4]
 80148a4:	2301      	movs	r3, #1
 80148a6:	4093      	lsls	r3, r2
 80148a8:	608b      	str	r3, [r1, #8]
 80148aa:	4620      	mov	r0, r4
 80148ac:	f000 feee 	bl	801568c <_Bfree>
 80148b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148b2:	2200      	movs	r2, #0
 80148b4:	601a      	str	r2, [r3, #0]
 80148b6:	1e3b      	subs	r3, r7, #0
 80148b8:	bfaa      	itet	ge
 80148ba:	2300      	movge	r3, #0
 80148bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80148c0:	f8c8 3000 	strge.w	r3, [r8]
 80148c4:	4b9a      	ldr	r3, [pc, #616]	; (8014b30 <_dtoa_r+0x2d8>)
 80148c6:	bfbc      	itt	lt
 80148c8:	2201      	movlt	r2, #1
 80148ca:	f8c8 2000 	strlt.w	r2, [r8]
 80148ce:	ea33 030b 	bics.w	r3, r3, fp
 80148d2:	d11b      	bne.n	801490c <_dtoa_r+0xb4>
 80148d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80148da:	6013      	str	r3, [r2, #0]
 80148dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148e0:	4333      	orrs	r3, r6
 80148e2:	f000 8592 	beq.w	801540a <_dtoa_r+0xbb2>
 80148e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148e8:	b963      	cbnz	r3, 8014904 <_dtoa_r+0xac>
 80148ea:	4b92      	ldr	r3, [pc, #584]	; (8014b34 <_dtoa_r+0x2dc>)
 80148ec:	e022      	b.n	8014934 <_dtoa_r+0xdc>
 80148ee:	4b92      	ldr	r3, [pc, #584]	; (8014b38 <_dtoa_r+0x2e0>)
 80148f0:	9301      	str	r3, [sp, #4]
 80148f2:	3308      	adds	r3, #8
 80148f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148f6:	6013      	str	r3, [r2, #0]
 80148f8:	9801      	ldr	r0, [sp, #4]
 80148fa:	b013      	add	sp, #76	; 0x4c
 80148fc:	ecbd 8b04 	vpop	{d8-d9}
 8014900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014904:	4b8b      	ldr	r3, [pc, #556]	; (8014b34 <_dtoa_r+0x2dc>)
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	3303      	adds	r3, #3
 801490a:	e7f3      	b.n	80148f4 <_dtoa_r+0x9c>
 801490c:	2200      	movs	r2, #0
 801490e:	2300      	movs	r3, #0
 8014910:	4650      	mov	r0, sl
 8014912:	4659      	mov	r1, fp
 8014914:	f7ec f8f0 	bl	8000af8 <__aeabi_dcmpeq>
 8014918:	ec4b ab19 	vmov	d9, sl, fp
 801491c:	4680      	mov	r8, r0
 801491e:	b158      	cbz	r0, 8014938 <_dtoa_r+0xe0>
 8014920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014922:	2301      	movs	r3, #1
 8014924:	6013      	str	r3, [r2, #0]
 8014926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 856b 	beq.w	8015404 <_dtoa_r+0xbac>
 801492e:	4883      	ldr	r0, [pc, #524]	; (8014b3c <_dtoa_r+0x2e4>)
 8014930:	6018      	str	r0, [r3, #0]
 8014932:	1e43      	subs	r3, r0, #1
 8014934:	9301      	str	r3, [sp, #4]
 8014936:	e7df      	b.n	80148f8 <_dtoa_r+0xa0>
 8014938:	ec4b ab10 	vmov	d0, sl, fp
 801493c:	aa10      	add	r2, sp, #64	; 0x40
 801493e:	a911      	add	r1, sp, #68	; 0x44
 8014940:	4620      	mov	r0, r4
 8014942:	f001 f98b 	bl	8015c5c <__d2b>
 8014946:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801494a:	ee08 0a10 	vmov	s16, r0
 801494e:	2d00      	cmp	r5, #0
 8014950:	f000 8084 	beq.w	8014a5c <_dtoa_r+0x204>
 8014954:	ee19 3a90 	vmov	r3, s19
 8014958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801495c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014960:	4656      	mov	r6, sl
 8014962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801496a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801496e:	4b74      	ldr	r3, [pc, #464]	; (8014b40 <_dtoa_r+0x2e8>)
 8014970:	2200      	movs	r2, #0
 8014972:	4630      	mov	r0, r6
 8014974:	4639      	mov	r1, r7
 8014976:	f7eb fc9f 	bl	80002b8 <__aeabi_dsub>
 801497a:	a365      	add	r3, pc, #404	; (adr r3, 8014b10 <_dtoa_r+0x2b8>)
 801497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014980:	f7eb fe52 	bl	8000628 <__aeabi_dmul>
 8014984:	a364      	add	r3, pc, #400	; (adr r3, 8014b18 <_dtoa_r+0x2c0>)
 8014986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498a:	f7eb fc97 	bl	80002bc <__adddf3>
 801498e:	4606      	mov	r6, r0
 8014990:	4628      	mov	r0, r5
 8014992:	460f      	mov	r7, r1
 8014994:	f7eb fdde 	bl	8000554 <__aeabi_i2d>
 8014998:	a361      	add	r3, pc, #388	; (adr r3, 8014b20 <_dtoa_r+0x2c8>)
 801499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499e:	f7eb fe43 	bl	8000628 <__aeabi_dmul>
 80149a2:	4602      	mov	r2, r0
 80149a4:	460b      	mov	r3, r1
 80149a6:	4630      	mov	r0, r6
 80149a8:	4639      	mov	r1, r7
 80149aa:	f7eb fc87 	bl	80002bc <__adddf3>
 80149ae:	4606      	mov	r6, r0
 80149b0:	460f      	mov	r7, r1
 80149b2:	f7ec f8e9 	bl	8000b88 <__aeabi_d2iz>
 80149b6:	2200      	movs	r2, #0
 80149b8:	9000      	str	r0, [sp, #0]
 80149ba:	2300      	movs	r3, #0
 80149bc:	4630      	mov	r0, r6
 80149be:	4639      	mov	r1, r7
 80149c0:	f7ec f8a4 	bl	8000b0c <__aeabi_dcmplt>
 80149c4:	b150      	cbz	r0, 80149dc <_dtoa_r+0x184>
 80149c6:	9800      	ldr	r0, [sp, #0]
 80149c8:	f7eb fdc4 	bl	8000554 <__aeabi_i2d>
 80149cc:	4632      	mov	r2, r6
 80149ce:	463b      	mov	r3, r7
 80149d0:	f7ec f892 	bl	8000af8 <__aeabi_dcmpeq>
 80149d4:	b910      	cbnz	r0, 80149dc <_dtoa_r+0x184>
 80149d6:	9b00      	ldr	r3, [sp, #0]
 80149d8:	3b01      	subs	r3, #1
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	9b00      	ldr	r3, [sp, #0]
 80149de:	2b16      	cmp	r3, #22
 80149e0:	d85a      	bhi.n	8014a98 <_dtoa_r+0x240>
 80149e2:	9a00      	ldr	r2, [sp, #0]
 80149e4:	4b57      	ldr	r3, [pc, #348]	; (8014b44 <_dtoa_r+0x2ec>)
 80149e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ee:	ec51 0b19 	vmov	r0, r1, d9
 80149f2:	f7ec f88b 	bl	8000b0c <__aeabi_dcmplt>
 80149f6:	2800      	cmp	r0, #0
 80149f8:	d050      	beq.n	8014a9c <_dtoa_r+0x244>
 80149fa:	9b00      	ldr	r3, [sp, #0]
 80149fc:	3b01      	subs	r3, #1
 80149fe:	9300      	str	r3, [sp, #0]
 8014a00:	2300      	movs	r3, #0
 8014a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a06:	1b5d      	subs	r5, r3, r5
 8014a08:	1e6b      	subs	r3, r5, #1
 8014a0a:	9305      	str	r3, [sp, #20]
 8014a0c:	bf45      	ittet	mi
 8014a0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8014a12:	9304      	strmi	r3, [sp, #16]
 8014a14:	2300      	movpl	r3, #0
 8014a16:	2300      	movmi	r3, #0
 8014a18:	bf4c      	ite	mi
 8014a1a:	9305      	strmi	r3, [sp, #20]
 8014a1c:	9304      	strpl	r3, [sp, #16]
 8014a1e:	9b00      	ldr	r3, [sp, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	db3d      	blt.n	8014aa0 <_dtoa_r+0x248>
 8014a24:	9b05      	ldr	r3, [sp, #20]
 8014a26:	9a00      	ldr	r2, [sp, #0]
 8014a28:	920a      	str	r2, [sp, #40]	; 0x28
 8014a2a:	4413      	add	r3, r2
 8014a2c:	9305      	str	r3, [sp, #20]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	9307      	str	r3, [sp, #28]
 8014a32:	9b06      	ldr	r3, [sp, #24]
 8014a34:	2b09      	cmp	r3, #9
 8014a36:	f200 8089 	bhi.w	8014b4c <_dtoa_r+0x2f4>
 8014a3a:	2b05      	cmp	r3, #5
 8014a3c:	bfc4      	itt	gt
 8014a3e:	3b04      	subgt	r3, #4
 8014a40:	9306      	strgt	r3, [sp, #24]
 8014a42:	9b06      	ldr	r3, [sp, #24]
 8014a44:	f1a3 0302 	sub.w	r3, r3, #2
 8014a48:	bfcc      	ite	gt
 8014a4a:	2500      	movgt	r5, #0
 8014a4c:	2501      	movle	r5, #1
 8014a4e:	2b03      	cmp	r3, #3
 8014a50:	f200 8087 	bhi.w	8014b62 <_dtoa_r+0x30a>
 8014a54:	e8df f003 	tbb	[pc, r3]
 8014a58:	59383a2d 	.word	0x59383a2d
 8014a5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014a60:	441d      	add	r5, r3
 8014a62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014a66:	2b20      	cmp	r3, #32
 8014a68:	bfc1      	itttt	gt
 8014a6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014a6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014a72:	fa0b f303 	lslgt.w	r3, fp, r3
 8014a76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014a7a:	bfda      	itte	le
 8014a7c:	f1c3 0320 	rsble	r3, r3, #32
 8014a80:	fa06 f003 	lslle.w	r0, r6, r3
 8014a84:	4318      	orrgt	r0, r3
 8014a86:	f7eb fd55 	bl	8000534 <__aeabi_ui2d>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014a92:	3d01      	subs	r5, #1
 8014a94:	930e      	str	r3, [sp, #56]	; 0x38
 8014a96:	e76a      	b.n	801496e <_dtoa_r+0x116>
 8014a98:	2301      	movs	r3, #1
 8014a9a:	e7b2      	b.n	8014a02 <_dtoa_r+0x1aa>
 8014a9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a9e:	e7b1      	b.n	8014a04 <_dtoa_r+0x1ac>
 8014aa0:	9b04      	ldr	r3, [sp, #16]
 8014aa2:	9a00      	ldr	r2, [sp, #0]
 8014aa4:	1a9b      	subs	r3, r3, r2
 8014aa6:	9304      	str	r3, [sp, #16]
 8014aa8:	4253      	negs	r3, r2
 8014aaa:	9307      	str	r3, [sp, #28]
 8014aac:	2300      	movs	r3, #0
 8014aae:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab0:	e7bf      	b.n	8014a32 <_dtoa_r+0x1da>
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	9308      	str	r3, [sp, #32]
 8014ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	dc55      	bgt.n	8014b68 <_dtoa_r+0x310>
 8014abc:	2301      	movs	r3, #1
 8014abe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8014ac6:	e00c      	b.n	8014ae2 <_dtoa_r+0x28a>
 8014ac8:	2301      	movs	r3, #1
 8014aca:	e7f3      	b.n	8014ab4 <_dtoa_r+0x25c>
 8014acc:	2300      	movs	r3, #0
 8014ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ad0:	9308      	str	r3, [sp, #32]
 8014ad2:	9b00      	ldr	r3, [sp, #0]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	9302      	str	r3, [sp, #8]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	9303      	str	r3, [sp, #12]
 8014ade:	bfb8      	it	lt
 8014ae0:	2301      	movlt	r3, #1
 8014ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	6042      	str	r2, [r0, #4]
 8014ae8:	2204      	movs	r2, #4
 8014aea:	f102 0614 	add.w	r6, r2, #20
 8014aee:	429e      	cmp	r6, r3
 8014af0:	6841      	ldr	r1, [r0, #4]
 8014af2:	d93d      	bls.n	8014b70 <_dtoa_r+0x318>
 8014af4:	4620      	mov	r0, r4
 8014af6:	f000 fd89 	bl	801560c <_Balloc>
 8014afa:	9001      	str	r0, [sp, #4]
 8014afc:	2800      	cmp	r0, #0
 8014afe:	d13b      	bne.n	8014b78 <_dtoa_r+0x320>
 8014b00:	4b11      	ldr	r3, [pc, #68]	; (8014b48 <_dtoa_r+0x2f0>)
 8014b02:	4602      	mov	r2, r0
 8014b04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014b08:	e6c0      	b.n	801488c <_dtoa_r+0x34>
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	e7df      	b.n	8014ace <_dtoa_r+0x276>
 8014b0e:	bf00      	nop
 8014b10:	636f4361 	.word	0x636f4361
 8014b14:	3fd287a7 	.word	0x3fd287a7
 8014b18:	8b60c8b3 	.word	0x8b60c8b3
 8014b1c:	3fc68a28 	.word	0x3fc68a28
 8014b20:	509f79fb 	.word	0x509f79fb
 8014b24:	3fd34413 	.word	0x3fd34413
 8014b28:	08016e7d 	.word	0x08016e7d
 8014b2c:	08016e94 	.word	0x08016e94
 8014b30:	7ff00000 	.word	0x7ff00000
 8014b34:	08016e79 	.word	0x08016e79
 8014b38:	08016e70 	.word	0x08016e70
 8014b3c:	08016e4d 	.word	0x08016e4d
 8014b40:	3ff80000 	.word	0x3ff80000
 8014b44:	08016f88 	.word	0x08016f88
 8014b48:	08016eef 	.word	0x08016eef
 8014b4c:	2501      	movs	r5, #1
 8014b4e:	2300      	movs	r3, #0
 8014b50:	9306      	str	r3, [sp, #24]
 8014b52:	9508      	str	r5, [sp, #32]
 8014b54:	f04f 33ff 	mov.w	r3, #4294967295
 8014b58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	2312      	movs	r3, #18
 8014b60:	e7b0      	b.n	8014ac4 <_dtoa_r+0x26c>
 8014b62:	2301      	movs	r3, #1
 8014b64:	9308      	str	r3, [sp, #32]
 8014b66:	e7f5      	b.n	8014b54 <_dtoa_r+0x2fc>
 8014b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b6e:	e7b8      	b.n	8014ae2 <_dtoa_r+0x28a>
 8014b70:	3101      	adds	r1, #1
 8014b72:	6041      	str	r1, [r0, #4]
 8014b74:	0052      	lsls	r2, r2, #1
 8014b76:	e7b8      	b.n	8014aea <_dtoa_r+0x292>
 8014b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b7a:	9a01      	ldr	r2, [sp, #4]
 8014b7c:	601a      	str	r2, [r3, #0]
 8014b7e:	9b03      	ldr	r3, [sp, #12]
 8014b80:	2b0e      	cmp	r3, #14
 8014b82:	f200 809d 	bhi.w	8014cc0 <_dtoa_r+0x468>
 8014b86:	2d00      	cmp	r5, #0
 8014b88:	f000 809a 	beq.w	8014cc0 <_dtoa_r+0x468>
 8014b8c:	9b00      	ldr	r3, [sp, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	dd32      	ble.n	8014bf8 <_dtoa_r+0x3a0>
 8014b92:	4ab7      	ldr	r2, [pc, #732]	; (8014e70 <_dtoa_r+0x618>)
 8014b94:	f003 030f 	and.w	r3, r3, #15
 8014b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014ba0:	9b00      	ldr	r3, [sp, #0]
 8014ba2:	05d8      	lsls	r0, r3, #23
 8014ba4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014ba8:	d516      	bpl.n	8014bd8 <_dtoa_r+0x380>
 8014baa:	4bb2      	ldr	r3, [pc, #712]	; (8014e74 <_dtoa_r+0x61c>)
 8014bac:	ec51 0b19 	vmov	r0, r1, d9
 8014bb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014bb4:	f7eb fe62 	bl	800087c <__aeabi_ddiv>
 8014bb8:	f007 070f 	and.w	r7, r7, #15
 8014bbc:	4682      	mov	sl, r0
 8014bbe:	468b      	mov	fp, r1
 8014bc0:	2503      	movs	r5, #3
 8014bc2:	4eac      	ldr	r6, [pc, #688]	; (8014e74 <_dtoa_r+0x61c>)
 8014bc4:	b957      	cbnz	r7, 8014bdc <_dtoa_r+0x384>
 8014bc6:	4642      	mov	r2, r8
 8014bc8:	464b      	mov	r3, r9
 8014bca:	4650      	mov	r0, sl
 8014bcc:	4659      	mov	r1, fp
 8014bce:	f7eb fe55 	bl	800087c <__aeabi_ddiv>
 8014bd2:	4682      	mov	sl, r0
 8014bd4:	468b      	mov	fp, r1
 8014bd6:	e028      	b.n	8014c2a <_dtoa_r+0x3d2>
 8014bd8:	2502      	movs	r5, #2
 8014bda:	e7f2      	b.n	8014bc2 <_dtoa_r+0x36a>
 8014bdc:	07f9      	lsls	r1, r7, #31
 8014bde:	d508      	bpl.n	8014bf2 <_dtoa_r+0x39a>
 8014be0:	4640      	mov	r0, r8
 8014be2:	4649      	mov	r1, r9
 8014be4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014be8:	f7eb fd1e 	bl	8000628 <__aeabi_dmul>
 8014bec:	3501      	adds	r5, #1
 8014bee:	4680      	mov	r8, r0
 8014bf0:	4689      	mov	r9, r1
 8014bf2:	107f      	asrs	r7, r7, #1
 8014bf4:	3608      	adds	r6, #8
 8014bf6:	e7e5      	b.n	8014bc4 <_dtoa_r+0x36c>
 8014bf8:	f000 809b 	beq.w	8014d32 <_dtoa_r+0x4da>
 8014bfc:	9b00      	ldr	r3, [sp, #0]
 8014bfe:	4f9d      	ldr	r7, [pc, #628]	; (8014e74 <_dtoa_r+0x61c>)
 8014c00:	425e      	negs	r6, r3
 8014c02:	4b9b      	ldr	r3, [pc, #620]	; (8014e70 <_dtoa_r+0x618>)
 8014c04:	f006 020f 	and.w	r2, r6, #15
 8014c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c10:	ec51 0b19 	vmov	r0, r1, d9
 8014c14:	f7eb fd08 	bl	8000628 <__aeabi_dmul>
 8014c18:	1136      	asrs	r6, r6, #4
 8014c1a:	4682      	mov	sl, r0
 8014c1c:	468b      	mov	fp, r1
 8014c1e:	2300      	movs	r3, #0
 8014c20:	2502      	movs	r5, #2
 8014c22:	2e00      	cmp	r6, #0
 8014c24:	d17a      	bne.n	8014d1c <_dtoa_r+0x4c4>
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d1d3      	bne.n	8014bd2 <_dtoa_r+0x37a>
 8014c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	f000 8082 	beq.w	8014d36 <_dtoa_r+0x4de>
 8014c32:	4b91      	ldr	r3, [pc, #580]	; (8014e78 <_dtoa_r+0x620>)
 8014c34:	2200      	movs	r2, #0
 8014c36:	4650      	mov	r0, sl
 8014c38:	4659      	mov	r1, fp
 8014c3a:	f7eb ff67 	bl	8000b0c <__aeabi_dcmplt>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	d079      	beq.n	8014d36 <_dtoa_r+0x4de>
 8014c42:	9b03      	ldr	r3, [sp, #12]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d076      	beq.n	8014d36 <_dtoa_r+0x4de>
 8014c48:	9b02      	ldr	r3, [sp, #8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	dd36      	ble.n	8014cbc <_dtoa_r+0x464>
 8014c4e:	9b00      	ldr	r3, [sp, #0]
 8014c50:	4650      	mov	r0, sl
 8014c52:	4659      	mov	r1, fp
 8014c54:	1e5f      	subs	r7, r3, #1
 8014c56:	2200      	movs	r2, #0
 8014c58:	4b88      	ldr	r3, [pc, #544]	; (8014e7c <_dtoa_r+0x624>)
 8014c5a:	f7eb fce5 	bl	8000628 <__aeabi_dmul>
 8014c5e:	9e02      	ldr	r6, [sp, #8]
 8014c60:	4682      	mov	sl, r0
 8014c62:	468b      	mov	fp, r1
 8014c64:	3501      	adds	r5, #1
 8014c66:	4628      	mov	r0, r5
 8014c68:	f7eb fc74 	bl	8000554 <__aeabi_i2d>
 8014c6c:	4652      	mov	r2, sl
 8014c6e:	465b      	mov	r3, fp
 8014c70:	f7eb fcda 	bl	8000628 <__aeabi_dmul>
 8014c74:	4b82      	ldr	r3, [pc, #520]	; (8014e80 <_dtoa_r+0x628>)
 8014c76:	2200      	movs	r2, #0
 8014c78:	f7eb fb20 	bl	80002bc <__adddf3>
 8014c7c:	46d0      	mov	r8, sl
 8014c7e:	46d9      	mov	r9, fp
 8014c80:	4682      	mov	sl, r0
 8014c82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014c86:	2e00      	cmp	r6, #0
 8014c88:	d158      	bne.n	8014d3c <_dtoa_r+0x4e4>
 8014c8a:	4b7e      	ldr	r3, [pc, #504]	; (8014e84 <_dtoa_r+0x62c>)
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	4640      	mov	r0, r8
 8014c90:	4649      	mov	r1, r9
 8014c92:	f7eb fb11 	bl	80002b8 <__aeabi_dsub>
 8014c96:	4652      	mov	r2, sl
 8014c98:	465b      	mov	r3, fp
 8014c9a:	4680      	mov	r8, r0
 8014c9c:	4689      	mov	r9, r1
 8014c9e:	f7eb ff53 	bl	8000b48 <__aeabi_dcmpgt>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	f040 8295 	bne.w	80151d2 <_dtoa_r+0x97a>
 8014ca8:	4652      	mov	r2, sl
 8014caa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014cae:	4640      	mov	r0, r8
 8014cb0:	4649      	mov	r1, r9
 8014cb2:	f7eb ff2b 	bl	8000b0c <__aeabi_dcmplt>
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	f040 8289 	bne.w	80151ce <_dtoa_r+0x976>
 8014cbc:	ec5b ab19 	vmov	sl, fp, d9
 8014cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	f2c0 8148 	blt.w	8014f58 <_dtoa_r+0x700>
 8014cc8:	9a00      	ldr	r2, [sp, #0]
 8014cca:	2a0e      	cmp	r2, #14
 8014ccc:	f300 8144 	bgt.w	8014f58 <_dtoa_r+0x700>
 8014cd0:	4b67      	ldr	r3, [pc, #412]	; (8014e70 <_dtoa_r+0x618>)
 8014cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f280 80d5 	bge.w	8014e8c <_dtoa_r+0x634>
 8014ce2:	9b03      	ldr	r3, [sp, #12]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f300 80d1 	bgt.w	8014e8c <_dtoa_r+0x634>
 8014cea:	f040 826f 	bne.w	80151cc <_dtoa_r+0x974>
 8014cee:	4b65      	ldr	r3, [pc, #404]	; (8014e84 <_dtoa_r+0x62c>)
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	4640      	mov	r0, r8
 8014cf4:	4649      	mov	r1, r9
 8014cf6:	f7eb fc97 	bl	8000628 <__aeabi_dmul>
 8014cfa:	4652      	mov	r2, sl
 8014cfc:	465b      	mov	r3, fp
 8014cfe:	f7eb ff19 	bl	8000b34 <__aeabi_dcmpge>
 8014d02:	9e03      	ldr	r6, [sp, #12]
 8014d04:	4637      	mov	r7, r6
 8014d06:	2800      	cmp	r0, #0
 8014d08:	f040 8245 	bne.w	8015196 <_dtoa_r+0x93e>
 8014d0c:	9d01      	ldr	r5, [sp, #4]
 8014d0e:	2331      	movs	r3, #49	; 0x31
 8014d10:	f805 3b01 	strb.w	r3, [r5], #1
 8014d14:	9b00      	ldr	r3, [sp, #0]
 8014d16:	3301      	adds	r3, #1
 8014d18:	9300      	str	r3, [sp, #0]
 8014d1a:	e240      	b.n	801519e <_dtoa_r+0x946>
 8014d1c:	07f2      	lsls	r2, r6, #31
 8014d1e:	d505      	bpl.n	8014d2c <_dtoa_r+0x4d4>
 8014d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d24:	f7eb fc80 	bl	8000628 <__aeabi_dmul>
 8014d28:	3501      	adds	r5, #1
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	1076      	asrs	r6, r6, #1
 8014d2e:	3708      	adds	r7, #8
 8014d30:	e777      	b.n	8014c22 <_dtoa_r+0x3ca>
 8014d32:	2502      	movs	r5, #2
 8014d34:	e779      	b.n	8014c2a <_dtoa_r+0x3d2>
 8014d36:	9f00      	ldr	r7, [sp, #0]
 8014d38:	9e03      	ldr	r6, [sp, #12]
 8014d3a:	e794      	b.n	8014c66 <_dtoa_r+0x40e>
 8014d3c:	9901      	ldr	r1, [sp, #4]
 8014d3e:	4b4c      	ldr	r3, [pc, #304]	; (8014e70 <_dtoa_r+0x618>)
 8014d40:	4431      	add	r1, r6
 8014d42:	910d      	str	r1, [sp, #52]	; 0x34
 8014d44:	9908      	ldr	r1, [sp, #32]
 8014d46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014d4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014d4e:	2900      	cmp	r1, #0
 8014d50:	d043      	beq.n	8014dda <_dtoa_r+0x582>
 8014d52:	494d      	ldr	r1, [pc, #308]	; (8014e88 <_dtoa_r+0x630>)
 8014d54:	2000      	movs	r0, #0
 8014d56:	f7eb fd91 	bl	800087c <__aeabi_ddiv>
 8014d5a:	4652      	mov	r2, sl
 8014d5c:	465b      	mov	r3, fp
 8014d5e:	f7eb faab 	bl	80002b8 <__aeabi_dsub>
 8014d62:	9d01      	ldr	r5, [sp, #4]
 8014d64:	4682      	mov	sl, r0
 8014d66:	468b      	mov	fp, r1
 8014d68:	4649      	mov	r1, r9
 8014d6a:	4640      	mov	r0, r8
 8014d6c:	f7eb ff0c 	bl	8000b88 <__aeabi_d2iz>
 8014d70:	4606      	mov	r6, r0
 8014d72:	f7eb fbef 	bl	8000554 <__aeabi_i2d>
 8014d76:	4602      	mov	r2, r0
 8014d78:	460b      	mov	r3, r1
 8014d7a:	4640      	mov	r0, r8
 8014d7c:	4649      	mov	r1, r9
 8014d7e:	f7eb fa9b 	bl	80002b8 <__aeabi_dsub>
 8014d82:	3630      	adds	r6, #48	; 0x30
 8014d84:	f805 6b01 	strb.w	r6, [r5], #1
 8014d88:	4652      	mov	r2, sl
 8014d8a:	465b      	mov	r3, fp
 8014d8c:	4680      	mov	r8, r0
 8014d8e:	4689      	mov	r9, r1
 8014d90:	f7eb febc 	bl	8000b0c <__aeabi_dcmplt>
 8014d94:	2800      	cmp	r0, #0
 8014d96:	d163      	bne.n	8014e60 <_dtoa_r+0x608>
 8014d98:	4642      	mov	r2, r8
 8014d9a:	464b      	mov	r3, r9
 8014d9c:	4936      	ldr	r1, [pc, #216]	; (8014e78 <_dtoa_r+0x620>)
 8014d9e:	2000      	movs	r0, #0
 8014da0:	f7eb fa8a 	bl	80002b8 <__aeabi_dsub>
 8014da4:	4652      	mov	r2, sl
 8014da6:	465b      	mov	r3, fp
 8014da8:	f7eb feb0 	bl	8000b0c <__aeabi_dcmplt>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	f040 80b5 	bne.w	8014f1c <_dtoa_r+0x6c4>
 8014db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014db4:	429d      	cmp	r5, r3
 8014db6:	d081      	beq.n	8014cbc <_dtoa_r+0x464>
 8014db8:	4b30      	ldr	r3, [pc, #192]	; (8014e7c <_dtoa_r+0x624>)
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4650      	mov	r0, sl
 8014dbe:	4659      	mov	r1, fp
 8014dc0:	f7eb fc32 	bl	8000628 <__aeabi_dmul>
 8014dc4:	4b2d      	ldr	r3, [pc, #180]	; (8014e7c <_dtoa_r+0x624>)
 8014dc6:	4682      	mov	sl, r0
 8014dc8:	468b      	mov	fp, r1
 8014dca:	4640      	mov	r0, r8
 8014dcc:	4649      	mov	r1, r9
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f7eb fc2a 	bl	8000628 <__aeabi_dmul>
 8014dd4:	4680      	mov	r8, r0
 8014dd6:	4689      	mov	r9, r1
 8014dd8:	e7c6      	b.n	8014d68 <_dtoa_r+0x510>
 8014dda:	4650      	mov	r0, sl
 8014ddc:	4659      	mov	r1, fp
 8014dde:	f7eb fc23 	bl	8000628 <__aeabi_dmul>
 8014de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014de4:	9d01      	ldr	r5, [sp, #4]
 8014de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014de8:	4682      	mov	sl, r0
 8014dea:	468b      	mov	fp, r1
 8014dec:	4649      	mov	r1, r9
 8014dee:	4640      	mov	r0, r8
 8014df0:	f7eb feca 	bl	8000b88 <__aeabi_d2iz>
 8014df4:	4606      	mov	r6, r0
 8014df6:	f7eb fbad 	bl	8000554 <__aeabi_i2d>
 8014dfa:	3630      	adds	r6, #48	; 0x30
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	460b      	mov	r3, r1
 8014e00:	4640      	mov	r0, r8
 8014e02:	4649      	mov	r1, r9
 8014e04:	f7eb fa58 	bl	80002b8 <__aeabi_dsub>
 8014e08:	f805 6b01 	strb.w	r6, [r5], #1
 8014e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e0e:	429d      	cmp	r5, r3
 8014e10:	4680      	mov	r8, r0
 8014e12:	4689      	mov	r9, r1
 8014e14:	f04f 0200 	mov.w	r2, #0
 8014e18:	d124      	bne.n	8014e64 <_dtoa_r+0x60c>
 8014e1a:	4b1b      	ldr	r3, [pc, #108]	; (8014e88 <_dtoa_r+0x630>)
 8014e1c:	4650      	mov	r0, sl
 8014e1e:	4659      	mov	r1, fp
 8014e20:	f7eb fa4c 	bl	80002bc <__adddf3>
 8014e24:	4602      	mov	r2, r0
 8014e26:	460b      	mov	r3, r1
 8014e28:	4640      	mov	r0, r8
 8014e2a:	4649      	mov	r1, r9
 8014e2c:	f7eb fe8c 	bl	8000b48 <__aeabi_dcmpgt>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d173      	bne.n	8014f1c <_dtoa_r+0x6c4>
 8014e34:	4652      	mov	r2, sl
 8014e36:	465b      	mov	r3, fp
 8014e38:	4913      	ldr	r1, [pc, #76]	; (8014e88 <_dtoa_r+0x630>)
 8014e3a:	2000      	movs	r0, #0
 8014e3c:	f7eb fa3c 	bl	80002b8 <__aeabi_dsub>
 8014e40:	4602      	mov	r2, r0
 8014e42:	460b      	mov	r3, r1
 8014e44:	4640      	mov	r0, r8
 8014e46:	4649      	mov	r1, r9
 8014e48:	f7eb fe60 	bl	8000b0c <__aeabi_dcmplt>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	f43f af35 	beq.w	8014cbc <_dtoa_r+0x464>
 8014e52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014e54:	1e6b      	subs	r3, r5, #1
 8014e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e5c:	2b30      	cmp	r3, #48	; 0x30
 8014e5e:	d0f8      	beq.n	8014e52 <_dtoa_r+0x5fa>
 8014e60:	9700      	str	r7, [sp, #0]
 8014e62:	e049      	b.n	8014ef8 <_dtoa_r+0x6a0>
 8014e64:	4b05      	ldr	r3, [pc, #20]	; (8014e7c <_dtoa_r+0x624>)
 8014e66:	f7eb fbdf 	bl	8000628 <__aeabi_dmul>
 8014e6a:	4680      	mov	r8, r0
 8014e6c:	4689      	mov	r9, r1
 8014e6e:	e7bd      	b.n	8014dec <_dtoa_r+0x594>
 8014e70:	08016f88 	.word	0x08016f88
 8014e74:	08016f60 	.word	0x08016f60
 8014e78:	3ff00000 	.word	0x3ff00000
 8014e7c:	40240000 	.word	0x40240000
 8014e80:	401c0000 	.word	0x401c0000
 8014e84:	40140000 	.word	0x40140000
 8014e88:	3fe00000 	.word	0x3fe00000
 8014e8c:	9d01      	ldr	r5, [sp, #4]
 8014e8e:	4656      	mov	r6, sl
 8014e90:	465f      	mov	r7, fp
 8014e92:	4642      	mov	r2, r8
 8014e94:	464b      	mov	r3, r9
 8014e96:	4630      	mov	r0, r6
 8014e98:	4639      	mov	r1, r7
 8014e9a:	f7eb fcef 	bl	800087c <__aeabi_ddiv>
 8014e9e:	f7eb fe73 	bl	8000b88 <__aeabi_d2iz>
 8014ea2:	4682      	mov	sl, r0
 8014ea4:	f7eb fb56 	bl	8000554 <__aeabi_i2d>
 8014ea8:	4642      	mov	r2, r8
 8014eaa:	464b      	mov	r3, r9
 8014eac:	f7eb fbbc 	bl	8000628 <__aeabi_dmul>
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	4639      	mov	r1, r7
 8014eb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014ebc:	f7eb f9fc 	bl	80002b8 <__aeabi_dsub>
 8014ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ec4:	9e01      	ldr	r6, [sp, #4]
 8014ec6:	9f03      	ldr	r7, [sp, #12]
 8014ec8:	1bae      	subs	r6, r5, r6
 8014eca:	42b7      	cmp	r7, r6
 8014ecc:	4602      	mov	r2, r0
 8014ece:	460b      	mov	r3, r1
 8014ed0:	d135      	bne.n	8014f3e <_dtoa_r+0x6e6>
 8014ed2:	f7eb f9f3 	bl	80002bc <__adddf3>
 8014ed6:	4642      	mov	r2, r8
 8014ed8:	464b      	mov	r3, r9
 8014eda:	4606      	mov	r6, r0
 8014edc:	460f      	mov	r7, r1
 8014ede:	f7eb fe33 	bl	8000b48 <__aeabi_dcmpgt>
 8014ee2:	b9d0      	cbnz	r0, 8014f1a <_dtoa_r+0x6c2>
 8014ee4:	4642      	mov	r2, r8
 8014ee6:	464b      	mov	r3, r9
 8014ee8:	4630      	mov	r0, r6
 8014eea:	4639      	mov	r1, r7
 8014eec:	f7eb fe04 	bl	8000af8 <__aeabi_dcmpeq>
 8014ef0:	b110      	cbz	r0, 8014ef8 <_dtoa_r+0x6a0>
 8014ef2:	f01a 0f01 	tst.w	sl, #1
 8014ef6:	d110      	bne.n	8014f1a <_dtoa_r+0x6c2>
 8014ef8:	4620      	mov	r0, r4
 8014efa:	ee18 1a10 	vmov	r1, s16
 8014efe:	f000 fbc5 	bl	801568c <_Bfree>
 8014f02:	2300      	movs	r3, #0
 8014f04:	9800      	ldr	r0, [sp, #0]
 8014f06:	702b      	strb	r3, [r5, #0]
 8014f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f0a:	3001      	adds	r0, #1
 8014f0c:	6018      	str	r0, [r3, #0]
 8014f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f43f acf1 	beq.w	80148f8 <_dtoa_r+0xa0>
 8014f16:	601d      	str	r5, [r3, #0]
 8014f18:	e4ee      	b.n	80148f8 <_dtoa_r+0xa0>
 8014f1a:	9f00      	ldr	r7, [sp, #0]
 8014f1c:	462b      	mov	r3, r5
 8014f1e:	461d      	mov	r5, r3
 8014f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f24:	2a39      	cmp	r2, #57	; 0x39
 8014f26:	d106      	bne.n	8014f36 <_dtoa_r+0x6de>
 8014f28:	9a01      	ldr	r2, [sp, #4]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d1f7      	bne.n	8014f1e <_dtoa_r+0x6c6>
 8014f2e:	9901      	ldr	r1, [sp, #4]
 8014f30:	2230      	movs	r2, #48	; 0x30
 8014f32:	3701      	adds	r7, #1
 8014f34:	700a      	strb	r2, [r1, #0]
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	3201      	adds	r2, #1
 8014f3a:	701a      	strb	r2, [r3, #0]
 8014f3c:	e790      	b.n	8014e60 <_dtoa_r+0x608>
 8014f3e:	4ba6      	ldr	r3, [pc, #664]	; (80151d8 <_dtoa_r+0x980>)
 8014f40:	2200      	movs	r2, #0
 8014f42:	f7eb fb71 	bl	8000628 <__aeabi_dmul>
 8014f46:	2200      	movs	r2, #0
 8014f48:	2300      	movs	r3, #0
 8014f4a:	4606      	mov	r6, r0
 8014f4c:	460f      	mov	r7, r1
 8014f4e:	f7eb fdd3 	bl	8000af8 <__aeabi_dcmpeq>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d09d      	beq.n	8014e92 <_dtoa_r+0x63a>
 8014f56:	e7cf      	b.n	8014ef8 <_dtoa_r+0x6a0>
 8014f58:	9a08      	ldr	r2, [sp, #32]
 8014f5a:	2a00      	cmp	r2, #0
 8014f5c:	f000 80d7 	beq.w	801510e <_dtoa_r+0x8b6>
 8014f60:	9a06      	ldr	r2, [sp, #24]
 8014f62:	2a01      	cmp	r2, #1
 8014f64:	f300 80ba 	bgt.w	80150dc <_dtoa_r+0x884>
 8014f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f6a:	2a00      	cmp	r2, #0
 8014f6c:	f000 80b2 	beq.w	80150d4 <_dtoa_r+0x87c>
 8014f70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014f74:	9e07      	ldr	r6, [sp, #28]
 8014f76:	9d04      	ldr	r5, [sp, #16]
 8014f78:	9a04      	ldr	r2, [sp, #16]
 8014f7a:	441a      	add	r2, r3
 8014f7c:	9204      	str	r2, [sp, #16]
 8014f7e:	9a05      	ldr	r2, [sp, #20]
 8014f80:	2101      	movs	r1, #1
 8014f82:	441a      	add	r2, r3
 8014f84:	4620      	mov	r0, r4
 8014f86:	9205      	str	r2, [sp, #20]
 8014f88:	f000 fc38 	bl	80157fc <__i2b>
 8014f8c:	4607      	mov	r7, r0
 8014f8e:	2d00      	cmp	r5, #0
 8014f90:	dd0c      	ble.n	8014fac <_dtoa_r+0x754>
 8014f92:	9b05      	ldr	r3, [sp, #20]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	dd09      	ble.n	8014fac <_dtoa_r+0x754>
 8014f98:	42ab      	cmp	r3, r5
 8014f9a:	9a04      	ldr	r2, [sp, #16]
 8014f9c:	bfa8      	it	ge
 8014f9e:	462b      	movge	r3, r5
 8014fa0:	1ad2      	subs	r2, r2, r3
 8014fa2:	9204      	str	r2, [sp, #16]
 8014fa4:	9a05      	ldr	r2, [sp, #20]
 8014fa6:	1aed      	subs	r5, r5, r3
 8014fa8:	1ad3      	subs	r3, r2, r3
 8014faa:	9305      	str	r3, [sp, #20]
 8014fac:	9b07      	ldr	r3, [sp, #28]
 8014fae:	b31b      	cbz	r3, 8014ff8 <_dtoa_r+0x7a0>
 8014fb0:	9b08      	ldr	r3, [sp, #32]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f000 80af 	beq.w	8015116 <_dtoa_r+0x8be>
 8014fb8:	2e00      	cmp	r6, #0
 8014fba:	dd13      	ble.n	8014fe4 <_dtoa_r+0x78c>
 8014fbc:	4639      	mov	r1, r7
 8014fbe:	4632      	mov	r2, r6
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	f000 fcdb 	bl	801597c <__pow5mult>
 8014fc6:	ee18 2a10 	vmov	r2, s16
 8014fca:	4601      	mov	r1, r0
 8014fcc:	4607      	mov	r7, r0
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f000 fc2a 	bl	8015828 <__multiply>
 8014fd4:	ee18 1a10 	vmov	r1, s16
 8014fd8:	4680      	mov	r8, r0
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f000 fb56 	bl	801568c <_Bfree>
 8014fe0:	ee08 8a10 	vmov	s16, r8
 8014fe4:	9b07      	ldr	r3, [sp, #28]
 8014fe6:	1b9a      	subs	r2, r3, r6
 8014fe8:	d006      	beq.n	8014ff8 <_dtoa_r+0x7a0>
 8014fea:	ee18 1a10 	vmov	r1, s16
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f000 fcc4 	bl	801597c <__pow5mult>
 8014ff4:	ee08 0a10 	vmov	s16, r0
 8014ff8:	2101      	movs	r1, #1
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f000 fbfe 	bl	80157fc <__i2b>
 8015000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015002:	2b00      	cmp	r3, #0
 8015004:	4606      	mov	r6, r0
 8015006:	f340 8088 	ble.w	801511a <_dtoa_r+0x8c2>
 801500a:	461a      	mov	r2, r3
 801500c:	4601      	mov	r1, r0
 801500e:	4620      	mov	r0, r4
 8015010:	f000 fcb4 	bl	801597c <__pow5mult>
 8015014:	9b06      	ldr	r3, [sp, #24]
 8015016:	2b01      	cmp	r3, #1
 8015018:	4606      	mov	r6, r0
 801501a:	f340 8081 	ble.w	8015120 <_dtoa_r+0x8c8>
 801501e:	f04f 0800 	mov.w	r8, #0
 8015022:	6933      	ldr	r3, [r6, #16]
 8015024:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015028:	6918      	ldr	r0, [r3, #16]
 801502a:	f000 fb97 	bl	801575c <__hi0bits>
 801502e:	f1c0 0020 	rsb	r0, r0, #32
 8015032:	9b05      	ldr	r3, [sp, #20]
 8015034:	4418      	add	r0, r3
 8015036:	f010 001f 	ands.w	r0, r0, #31
 801503a:	f000 8092 	beq.w	8015162 <_dtoa_r+0x90a>
 801503e:	f1c0 0320 	rsb	r3, r0, #32
 8015042:	2b04      	cmp	r3, #4
 8015044:	f340 808a 	ble.w	801515c <_dtoa_r+0x904>
 8015048:	f1c0 001c 	rsb	r0, r0, #28
 801504c:	9b04      	ldr	r3, [sp, #16]
 801504e:	4403      	add	r3, r0
 8015050:	9304      	str	r3, [sp, #16]
 8015052:	9b05      	ldr	r3, [sp, #20]
 8015054:	4403      	add	r3, r0
 8015056:	4405      	add	r5, r0
 8015058:	9305      	str	r3, [sp, #20]
 801505a:	9b04      	ldr	r3, [sp, #16]
 801505c:	2b00      	cmp	r3, #0
 801505e:	dd07      	ble.n	8015070 <_dtoa_r+0x818>
 8015060:	ee18 1a10 	vmov	r1, s16
 8015064:	461a      	mov	r2, r3
 8015066:	4620      	mov	r0, r4
 8015068:	f000 fce2 	bl	8015a30 <__lshift>
 801506c:	ee08 0a10 	vmov	s16, r0
 8015070:	9b05      	ldr	r3, [sp, #20]
 8015072:	2b00      	cmp	r3, #0
 8015074:	dd05      	ble.n	8015082 <_dtoa_r+0x82a>
 8015076:	4631      	mov	r1, r6
 8015078:	461a      	mov	r2, r3
 801507a:	4620      	mov	r0, r4
 801507c:	f000 fcd8 	bl	8015a30 <__lshift>
 8015080:	4606      	mov	r6, r0
 8015082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015084:	2b00      	cmp	r3, #0
 8015086:	d06e      	beq.n	8015166 <_dtoa_r+0x90e>
 8015088:	ee18 0a10 	vmov	r0, s16
 801508c:	4631      	mov	r1, r6
 801508e:	f000 fd3f 	bl	8015b10 <__mcmp>
 8015092:	2800      	cmp	r0, #0
 8015094:	da67      	bge.n	8015166 <_dtoa_r+0x90e>
 8015096:	9b00      	ldr	r3, [sp, #0]
 8015098:	3b01      	subs	r3, #1
 801509a:	ee18 1a10 	vmov	r1, s16
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	220a      	movs	r2, #10
 80150a2:	2300      	movs	r3, #0
 80150a4:	4620      	mov	r0, r4
 80150a6:	f000 fb13 	bl	80156d0 <__multadd>
 80150aa:	9b08      	ldr	r3, [sp, #32]
 80150ac:	ee08 0a10 	vmov	s16, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	f000 81b1 	beq.w	8015418 <_dtoa_r+0xbc0>
 80150b6:	2300      	movs	r3, #0
 80150b8:	4639      	mov	r1, r7
 80150ba:	220a      	movs	r2, #10
 80150bc:	4620      	mov	r0, r4
 80150be:	f000 fb07 	bl	80156d0 <__multadd>
 80150c2:	9b02      	ldr	r3, [sp, #8]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	4607      	mov	r7, r0
 80150c8:	f300 808e 	bgt.w	80151e8 <_dtoa_r+0x990>
 80150cc:	9b06      	ldr	r3, [sp, #24]
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	dc51      	bgt.n	8015176 <_dtoa_r+0x91e>
 80150d2:	e089      	b.n	80151e8 <_dtoa_r+0x990>
 80150d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80150da:	e74b      	b.n	8014f74 <_dtoa_r+0x71c>
 80150dc:	9b03      	ldr	r3, [sp, #12]
 80150de:	1e5e      	subs	r6, r3, #1
 80150e0:	9b07      	ldr	r3, [sp, #28]
 80150e2:	42b3      	cmp	r3, r6
 80150e4:	bfbf      	itttt	lt
 80150e6:	9b07      	ldrlt	r3, [sp, #28]
 80150e8:	9607      	strlt	r6, [sp, #28]
 80150ea:	1af2      	sublt	r2, r6, r3
 80150ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80150ee:	bfb6      	itet	lt
 80150f0:	189b      	addlt	r3, r3, r2
 80150f2:	1b9e      	subge	r6, r3, r6
 80150f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80150f6:	9b03      	ldr	r3, [sp, #12]
 80150f8:	bfb8      	it	lt
 80150fa:	2600      	movlt	r6, #0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	bfb7      	itett	lt
 8015100:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015104:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015108:	1a9d      	sublt	r5, r3, r2
 801510a:	2300      	movlt	r3, #0
 801510c:	e734      	b.n	8014f78 <_dtoa_r+0x720>
 801510e:	9e07      	ldr	r6, [sp, #28]
 8015110:	9d04      	ldr	r5, [sp, #16]
 8015112:	9f08      	ldr	r7, [sp, #32]
 8015114:	e73b      	b.n	8014f8e <_dtoa_r+0x736>
 8015116:	9a07      	ldr	r2, [sp, #28]
 8015118:	e767      	b.n	8014fea <_dtoa_r+0x792>
 801511a:	9b06      	ldr	r3, [sp, #24]
 801511c:	2b01      	cmp	r3, #1
 801511e:	dc18      	bgt.n	8015152 <_dtoa_r+0x8fa>
 8015120:	f1ba 0f00 	cmp.w	sl, #0
 8015124:	d115      	bne.n	8015152 <_dtoa_r+0x8fa>
 8015126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801512a:	b993      	cbnz	r3, 8015152 <_dtoa_r+0x8fa>
 801512c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015130:	0d1b      	lsrs	r3, r3, #20
 8015132:	051b      	lsls	r3, r3, #20
 8015134:	b183      	cbz	r3, 8015158 <_dtoa_r+0x900>
 8015136:	9b04      	ldr	r3, [sp, #16]
 8015138:	3301      	adds	r3, #1
 801513a:	9304      	str	r3, [sp, #16]
 801513c:	9b05      	ldr	r3, [sp, #20]
 801513e:	3301      	adds	r3, #1
 8015140:	9305      	str	r3, [sp, #20]
 8015142:	f04f 0801 	mov.w	r8, #1
 8015146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015148:	2b00      	cmp	r3, #0
 801514a:	f47f af6a 	bne.w	8015022 <_dtoa_r+0x7ca>
 801514e:	2001      	movs	r0, #1
 8015150:	e76f      	b.n	8015032 <_dtoa_r+0x7da>
 8015152:	f04f 0800 	mov.w	r8, #0
 8015156:	e7f6      	b.n	8015146 <_dtoa_r+0x8ee>
 8015158:	4698      	mov	r8, r3
 801515a:	e7f4      	b.n	8015146 <_dtoa_r+0x8ee>
 801515c:	f43f af7d 	beq.w	801505a <_dtoa_r+0x802>
 8015160:	4618      	mov	r0, r3
 8015162:	301c      	adds	r0, #28
 8015164:	e772      	b.n	801504c <_dtoa_r+0x7f4>
 8015166:	9b03      	ldr	r3, [sp, #12]
 8015168:	2b00      	cmp	r3, #0
 801516a:	dc37      	bgt.n	80151dc <_dtoa_r+0x984>
 801516c:	9b06      	ldr	r3, [sp, #24]
 801516e:	2b02      	cmp	r3, #2
 8015170:	dd34      	ble.n	80151dc <_dtoa_r+0x984>
 8015172:	9b03      	ldr	r3, [sp, #12]
 8015174:	9302      	str	r3, [sp, #8]
 8015176:	9b02      	ldr	r3, [sp, #8]
 8015178:	b96b      	cbnz	r3, 8015196 <_dtoa_r+0x93e>
 801517a:	4631      	mov	r1, r6
 801517c:	2205      	movs	r2, #5
 801517e:	4620      	mov	r0, r4
 8015180:	f000 faa6 	bl	80156d0 <__multadd>
 8015184:	4601      	mov	r1, r0
 8015186:	4606      	mov	r6, r0
 8015188:	ee18 0a10 	vmov	r0, s16
 801518c:	f000 fcc0 	bl	8015b10 <__mcmp>
 8015190:	2800      	cmp	r0, #0
 8015192:	f73f adbb 	bgt.w	8014d0c <_dtoa_r+0x4b4>
 8015196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015198:	9d01      	ldr	r5, [sp, #4]
 801519a:	43db      	mvns	r3, r3
 801519c:	9300      	str	r3, [sp, #0]
 801519e:	f04f 0800 	mov.w	r8, #0
 80151a2:	4631      	mov	r1, r6
 80151a4:	4620      	mov	r0, r4
 80151a6:	f000 fa71 	bl	801568c <_Bfree>
 80151aa:	2f00      	cmp	r7, #0
 80151ac:	f43f aea4 	beq.w	8014ef8 <_dtoa_r+0x6a0>
 80151b0:	f1b8 0f00 	cmp.w	r8, #0
 80151b4:	d005      	beq.n	80151c2 <_dtoa_r+0x96a>
 80151b6:	45b8      	cmp	r8, r7
 80151b8:	d003      	beq.n	80151c2 <_dtoa_r+0x96a>
 80151ba:	4641      	mov	r1, r8
 80151bc:	4620      	mov	r0, r4
 80151be:	f000 fa65 	bl	801568c <_Bfree>
 80151c2:	4639      	mov	r1, r7
 80151c4:	4620      	mov	r0, r4
 80151c6:	f000 fa61 	bl	801568c <_Bfree>
 80151ca:	e695      	b.n	8014ef8 <_dtoa_r+0x6a0>
 80151cc:	2600      	movs	r6, #0
 80151ce:	4637      	mov	r7, r6
 80151d0:	e7e1      	b.n	8015196 <_dtoa_r+0x93e>
 80151d2:	9700      	str	r7, [sp, #0]
 80151d4:	4637      	mov	r7, r6
 80151d6:	e599      	b.n	8014d0c <_dtoa_r+0x4b4>
 80151d8:	40240000 	.word	0x40240000
 80151dc:	9b08      	ldr	r3, [sp, #32]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	f000 80ca 	beq.w	8015378 <_dtoa_r+0xb20>
 80151e4:	9b03      	ldr	r3, [sp, #12]
 80151e6:	9302      	str	r3, [sp, #8]
 80151e8:	2d00      	cmp	r5, #0
 80151ea:	dd05      	ble.n	80151f8 <_dtoa_r+0x9a0>
 80151ec:	4639      	mov	r1, r7
 80151ee:	462a      	mov	r2, r5
 80151f0:	4620      	mov	r0, r4
 80151f2:	f000 fc1d 	bl	8015a30 <__lshift>
 80151f6:	4607      	mov	r7, r0
 80151f8:	f1b8 0f00 	cmp.w	r8, #0
 80151fc:	d05b      	beq.n	80152b6 <_dtoa_r+0xa5e>
 80151fe:	6879      	ldr	r1, [r7, #4]
 8015200:	4620      	mov	r0, r4
 8015202:	f000 fa03 	bl	801560c <_Balloc>
 8015206:	4605      	mov	r5, r0
 8015208:	b928      	cbnz	r0, 8015216 <_dtoa_r+0x9be>
 801520a:	4b87      	ldr	r3, [pc, #540]	; (8015428 <_dtoa_r+0xbd0>)
 801520c:	4602      	mov	r2, r0
 801520e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015212:	f7ff bb3b 	b.w	801488c <_dtoa_r+0x34>
 8015216:	693a      	ldr	r2, [r7, #16]
 8015218:	3202      	adds	r2, #2
 801521a:	0092      	lsls	r2, r2, #2
 801521c:	f107 010c 	add.w	r1, r7, #12
 8015220:	300c      	adds	r0, #12
 8015222:	f7fe fc5c 	bl	8013ade <memcpy>
 8015226:	2201      	movs	r2, #1
 8015228:	4629      	mov	r1, r5
 801522a:	4620      	mov	r0, r4
 801522c:	f000 fc00 	bl	8015a30 <__lshift>
 8015230:	9b01      	ldr	r3, [sp, #4]
 8015232:	f103 0901 	add.w	r9, r3, #1
 8015236:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801523a:	4413      	add	r3, r2
 801523c:	9305      	str	r3, [sp, #20]
 801523e:	f00a 0301 	and.w	r3, sl, #1
 8015242:	46b8      	mov	r8, r7
 8015244:	9304      	str	r3, [sp, #16]
 8015246:	4607      	mov	r7, r0
 8015248:	4631      	mov	r1, r6
 801524a:	ee18 0a10 	vmov	r0, s16
 801524e:	f7ff fa75 	bl	801473c <quorem>
 8015252:	4641      	mov	r1, r8
 8015254:	9002      	str	r0, [sp, #8]
 8015256:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801525a:	ee18 0a10 	vmov	r0, s16
 801525e:	f000 fc57 	bl	8015b10 <__mcmp>
 8015262:	463a      	mov	r2, r7
 8015264:	9003      	str	r0, [sp, #12]
 8015266:	4631      	mov	r1, r6
 8015268:	4620      	mov	r0, r4
 801526a:	f000 fc6d 	bl	8015b48 <__mdiff>
 801526e:	68c2      	ldr	r2, [r0, #12]
 8015270:	f109 3bff 	add.w	fp, r9, #4294967295
 8015274:	4605      	mov	r5, r0
 8015276:	bb02      	cbnz	r2, 80152ba <_dtoa_r+0xa62>
 8015278:	4601      	mov	r1, r0
 801527a:	ee18 0a10 	vmov	r0, s16
 801527e:	f000 fc47 	bl	8015b10 <__mcmp>
 8015282:	4602      	mov	r2, r0
 8015284:	4629      	mov	r1, r5
 8015286:	4620      	mov	r0, r4
 8015288:	9207      	str	r2, [sp, #28]
 801528a:	f000 f9ff 	bl	801568c <_Bfree>
 801528e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015292:	ea43 0102 	orr.w	r1, r3, r2
 8015296:	9b04      	ldr	r3, [sp, #16]
 8015298:	430b      	orrs	r3, r1
 801529a:	464d      	mov	r5, r9
 801529c:	d10f      	bne.n	80152be <_dtoa_r+0xa66>
 801529e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80152a2:	d02a      	beq.n	80152fa <_dtoa_r+0xaa2>
 80152a4:	9b03      	ldr	r3, [sp, #12]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	dd02      	ble.n	80152b0 <_dtoa_r+0xa58>
 80152aa:	9b02      	ldr	r3, [sp, #8]
 80152ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80152b0:	f88b a000 	strb.w	sl, [fp]
 80152b4:	e775      	b.n	80151a2 <_dtoa_r+0x94a>
 80152b6:	4638      	mov	r0, r7
 80152b8:	e7ba      	b.n	8015230 <_dtoa_r+0x9d8>
 80152ba:	2201      	movs	r2, #1
 80152bc:	e7e2      	b.n	8015284 <_dtoa_r+0xa2c>
 80152be:	9b03      	ldr	r3, [sp, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	db04      	blt.n	80152ce <_dtoa_r+0xa76>
 80152c4:	9906      	ldr	r1, [sp, #24]
 80152c6:	430b      	orrs	r3, r1
 80152c8:	9904      	ldr	r1, [sp, #16]
 80152ca:	430b      	orrs	r3, r1
 80152cc:	d122      	bne.n	8015314 <_dtoa_r+0xabc>
 80152ce:	2a00      	cmp	r2, #0
 80152d0:	ddee      	ble.n	80152b0 <_dtoa_r+0xa58>
 80152d2:	ee18 1a10 	vmov	r1, s16
 80152d6:	2201      	movs	r2, #1
 80152d8:	4620      	mov	r0, r4
 80152da:	f000 fba9 	bl	8015a30 <__lshift>
 80152de:	4631      	mov	r1, r6
 80152e0:	ee08 0a10 	vmov	s16, r0
 80152e4:	f000 fc14 	bl	8015b10 <__mcmp>
 80152e8:	2800      	cmp	r0, #0
 80152ea:	dc03      	bgt.n	80152f4 <_dtoa_r+0xa9c>
 80152ec:	d1e0      	bne.n	80152b0 <_dtoa_r+0xa58>
 80152ee:	f01a 0f01 	tst.w	sl, #1
 80152f2:	d0dd      	beq.n	80152b0 <_dtoa_r+0xa58>
 80152f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80152f8:	d1d7      	bne.n	80152aa <_dtoa_r+0xa52>
 80152fa:	2339      	movs	r3, #57	; 0x39
 80152fc:	f88b 3000 	strb.w	r3, [fp]
 8015300:	462b      	mov	r3, r5
 8015302:	461d      	mov	r5, r3
 8015304:	3b01      	subs	r3, #1
 8015306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801530a:	2a39      	cmp	r2, #57	; 0x39
 801530c:	d071      	beq.n	80153f2 <_dtoa_r+0xb9a>
 801530e:	3201      	adds	r2, #1
 8015310:	701a      	strb	r2, [r3, #0]
 8015312:	e746      	b.n	80151a2 <_dtoa_r+0x94a>
 8015314:	2a00      	cmp	r2, #0
 8015316:	dd07      	ble.n	8015328 <_dtoa_r+0xad0>
 8015318:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801531c:	d0ed      	beq.n	80152fa <_dtoa_r+0xaa2>
 801531e:	f10a 0301 	add.w	r3, sl, #1
 8015322:	f88b 3000 	strb.w	r3, [fp]
 8015326:	e73c      	b.n	80151a2 <_dtoa_r+0x94a>
 8015328:	9b05      	ldr	r3, [sp, #20]
 801532a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801532e:	4599      	cmp	r9, r3
 8015330:	d047      	beq.n	80153c2 <_dtoa_r+0xb6a>
 8015332:	ee18 1a10 	vmov	r1, s16
 8015336:	2300      	movs	r3, #0
 8015338:	220a      	movs	r2, #10
 801533a:	4620      	mov	r0, r4
 801533c:	f000 f9c8 	bl	80156d0 <__multadd>
 8015340:	45b8      	cmp	r8, r7
 8015342:	ee08 0a10 	vmov	s16, r0
 8015346:	f04f 0300 	mov.w	r3, #0
 801534a:	f04f 020a 	mov.w	r2, #10
 801534e:	4641      	mov	r1, r8
 8015350:	4620      	mov	r0, r4
 8015352:	d106      	bne.n	8015362 <_dtoa_r+0xb0a>
 8015354:	f000 f9bc 	bl	80156d0 <__multadd>
 8015358:	4680      	mov	r8, r0
 801535a:	4607      	mov	r7, r0
 801535c:	f109 0901 	add.w	r9, r9, #1
 8015360:	e772      	b.n	8015248 <_dtoa_r+0x9f0>
 8015362:	f000 f9b5 	bl	80156d0 <__multadd>
 8015366:	4639      	mov	r1, r7
 8015368:	4680      	mov	r8, r0
 801536a:	2300      	movs	r3, #0
 801536c:	220a      	movs	r2, #10
 801536e:	4620      	mov	r0, r4
 8015370:	f000 f9ae 	bl	80156d0 <__multadd>
 8015374:	4607      	mov	r7, r0
 8015376:	e7f1      	b.n	801535c <_dtoa_r+0xb04>
 8015378:	9b03      	ldr	r3, [sp, #12]
 801537a:	9302      	str	r3, [sp, #8]
 801537c:	9d01      	ldr	r5, [sp, #4]
 801537e:	ee18 0a10 	vmov	r0, s16
 8015382:	4631      	mov	r1, r6
 8015384:	f7ff f9da 	bl	801473c <quorem>
 8015388:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801538c:	9b01      	ldr	r3, [sp, #4]
 801538e:	f805 ab01 	strb.w	sl, [r5], #1
 8015392:	1aea      	subs	r2, r5, r3
 8015394:	9b02      	ldr	r3, [sp, #8]
 8015396:	4293      	cmp	r3, r2
 8015398:	dd09      	ble.n	80153ae <_dtoa_r+0xb56>
 801539a:	ee18 1a10 	vmov	r1, s16
 801539e:	2300      	movs	r3, #0
 80153a0:	220a      	movs	r2, #10
 80153a2:	4620      	mov	r0, r4
 80153a4:	f000 f994 	bl	80156d0 <__multadd>
 80153a8:	ee08 0a10 	vmov	s16, r0
 80153ac:	e7e7      	b.n	801537e <_dtoa_r+0xb26>
 80153ae:	9b02      	ldr	r3, [sp, #8]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	bfc8      	it	gt
 80153b4:	461d      	movgt	r5, r3
 80153b6:	9b01      	ldr	r3, [sp, #4]
 80153b8:	bfd8      	it	le
 80153ba:	2501      	movle	r5, #1
 80153bc:	441d      	add	r5, r3
 80153be:	f04f 0800 	mov.w	r8, #0
 80153c2:	ee18 1a10 	vmov	r1, s16
 80153c6:	2201      	movs	r2, #1
 80153c8:	4620      	mov	r0, r4
 80153ca:	f000 fb31 	bl	8015a30 <__lshift>
 80153ce:	4631      	mov	r1, r6
 80153d0:	ee08 0a10 	vmov	s16, r0
 80153d4:	f000 fb9c 	bl	8015b10 <__mcmp>
 80153d8:	2800      	cmp	r0, #0
 80153da:	dc91      	bgt.n	8015300 <_dtoa_r+0xaa8>
 80153dc:	d102      	bne.n	80153e4 <_dtoa_r+0xb8c>
 80153de:	f01a 0f01 	tst.w	sl, #1
 80153e2:	d18d      	bne.n	8015300 <_dtoa_r+0xaa8>
 80153e4:	462b      	mov	r3, r5
 80153e6:	461d      	mov	r5, r3
 80153e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153ec:	2a30      	cmp	r2, #48	; 0x30
 80153ee:	d0fa      	beq.n	80153e6 <_dtoa_r+0xb8e>
 80153f0:	e6d7      	b.n	80151a2 <_dtoa_r+0x94a>
 80153f2:	9a01      	ldr	r2, [sp, #4]
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d184      	bne.n	8015302 <_dtoa_r+0xaaa>
 80153f8:	9b00      	ldr	r3, [sp, #0]
 80153fa:	3301      	adds	r3, #1
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	2331      	movs	r3, #49	; 0x31
 8015400:	7013      	strb	r3, [r2, #0]
 8015402:	e6ce      	b.n	80151a2 <_dtoa_r+0x94a>
 8015404:	4b09      	ldr	r3, [pc, #36]	; (801542c <_dtoa_r+0xbd4>)
 8015406:	f7ff ba95 	b.w	8014934 <_dtoa_r+0xdc>
 801540a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801540c:	2b00      	cmp	r3, #0
 801540e:	f47f aa6e 	bne.w	80148ee <_dtoa_r+0x96>
 8015412:	4b07      	ldr	r3, [pc, #28]	; (8015430 <_dtoa_r+0xbd8>)
 8015414:	f7ff ba8e 	b.w	8014934 <_dtoa_r+0xdc>
 8015418:	9b02      	ldr	r3, [sp, #8]
 801541a:	2b00      	cmp	r3, #0
 801541c:	dcae      	bgt.n	801537c <_dtoa_r+0xb24>
 801541e:	9b06      	ldr	r3, [sp, #24]
 8015420:	2b02      	cmp	r3, #2
 8015422:	f73f aea8 	bgt.w	8015176 <_dtoa_r+0x91e>
 8015426:	e7a9      	b.n	801537c <_dtoa_r+0xb24>
 8015428:	08016eef 	.word	0x08016eef
 801542c:	08016e4c 	.word	0x08016e4c
 8015430:	08016e70 	.word	0x08016e70

08015434 <__sflush_r>:
 8015434:	898a      	ldrh	r2, [r1, #12]
 8015436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801543a:	4605      	mov	r5, r0
 801543c:	0710      	lsls	r0, r2, #28
 801543e:	460c      	mov	r4, r1
 8015440:	d458      	bmi.n	80154f4 <__sflush_r+0xc0>
 8015442:	684b      	ldr	r3, [r1, #4]
 8015444:	2b00      	cmp	r3, #0
 8015446:	dc05      	bgt.n	8015454 <__sflush_r+0x20>
 8015448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801544a:	2b00      	cmp	r3, #0
 801544c:	dc02      	bgt.n	8015454 <__sflush_r+0x20>
 801544e:	2000      	movs	r0, #0
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015456:	2e00      	cmp	r6, #0
 8015458:	d0f9      	beq.n	801544e <__sflush_r+0x1a>
 801545a:	2300      	movs	r3, #0
 801545c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015460:	682f      	ldr	r7, [r5, #0]
 8015462:	602b      	str	r3, [r5, #0]
 8015464:	d032      	beq.n	80154cc <__sflush_r+0x98>
 8015466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	075a      	lsls	r2, r3, #29
 801546c:	d505      	bpl.n	801547a <__sflush_r+0x46>
 801546e:	6863      	ldr	r3, [r4, #4]
 8015470:	1ac0      	subs	r0, r0, r3
 8015472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015474:	b10b      	cbz	r3, 801547a <__sflush_r+0x46>
 8015476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015478:	1ac0      	subs	r0, r0, r3
 801547a:	2300      	movs	r3, #0
 801547c:	4602      	mov	r2, r0
 801547e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015480:	6a21      	ldr	r1, [r4, #32]
 8015482:	4628      	mov	r0, r5
 8015484:	47b0      	blx	r6
 8015486:	1c43      	adds	r3, r0, #1
 8015488:	89a3      	ldrh	r3, [r4, #12]
 801548a:	d106      	bne.n	801549a <__sflush_r+0x66>
 801548c:	6829      	ldr	r1, [r5, #0]
 801548e:	291d      	cmp	r1, #29
 8015490:	d82c      	bhi.n	80154ec <__sflush_r+0xb8>
 8015492:	4a2a      	ldr	r2, [pc, #168]	; (801553c <__sflush_r+0x108>)
 8015494:	40ca      	lsrs	r2, r1
 8015496:	07d6      	lsls	r6, r2, #31
 8015498:	d528      	bpl.n	80154ec <__sflush_r+0xb8>
 801549a:	2200      	movs	r2, #0
 801549c:	6062      	str	r2, [r4, #4]
 801549e:	04d9      	lsls	r1, r3, #19
 80154a0:	6922      	ldr	r2, [r4, #16]
 80154a2:	6022      	str	r2, [r4, #0]
 80154a4:	d504      	bpl.n	80154b0 <__sflush_r+0x7c>
 80154a6:	1c42      	adds	r2, r0, #1
 80154a8:	d101      	bne.n	80154ae <__sflush_r+0x7a>
 80154aa:	682b      	ldr	r3, [r5, #0]
 80154ac:	b903      	cbnz	r3, 80154b0 <__sflush_r+0x7c>
 80154ae:	6560      	str	r0, [r4, #84]	; 0x54
 80154b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154b2:	602f      	str	r7, [r5, #0]
 80154b4:	2900      	cmp	r1, #0
 80154b6:	d0ca      	beq.n	801544e <__sflush_r+0x1a>
 80154b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154bc:	4299      	cmp	r1, r3
 80154be:	d002      	beq.n	80154c6 <__sflush_r+0x92>
 80154c0:	4628      	mov	r0, r5
 80154c2:	f000 fc3d 	bl	8015d40 <_free_r>
 80154c6:	2000      	movs	r0, #0
 80154c8:	6360      	str	r0, [r4, #52]	; 0x34
 80154ca:	e7c1      	b.n	8015450 <__sflush_r+0x1c>
 80154cc:	6a21      	ldr	r1, [r4, #32]
 80154ce:	2301      	movs	r3, #1
 80154d0:	4628      	mov	r0, r5
 80154d2:	47b0      	blx	r6
 80154d4:	1c41      	adds	r1, r0, #1
 80154d6:	d1c7      	bne.n	8015468 <__sflush_r+0x34>
 80154d8:	682b      	ldr	r3, [r5, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d0c4      	beq.n	8015468 <__sflush_r+0x34>
 80154de:	2b1d      	cmp	r3, #29
 80154e0:	d001      	beq.n	80154e6 <__sflush_r+0xb2>
 80154e2:	2b16      	cmp	r3, #22
 80154e4:	d101      	bne.n	80154ea <__sflush_r+0xb6>
 80154e6:	602f      	str	r7, [r5, #0]
 80154e8:	e7b1      	b.n	801544e <__sflush_r+0x1a>
 80154ea:	89a3      	ldrh	r3, [r4, #12]
 80154ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154f0:	81a3      	strh	r3, [r4, #12]
 80154f2:	e7ad      	b.n	8015450 <__sflush_r+0x1c>
 80154f4:	690f      	ldr	r7, [r1, #16]
 80154f6:	2f00      	cmp	r7, #0
 80154f8:	d0a9      	beq.n	801544e <__sflush_r+0x1a>
 80154fa:	0793      	lsls	r3, r2, #30
 80154fc:	680e      	ldr	r6, [r1, #0]
 80154fe:	bf08      	it	eq
 8015500:	694b      	ldreq	r3, [r1, #20]
 8015502:	600f      	str	r7, [r1, #0]
 8015504:	bf18      	it	ne
 8015506:	2300      	movne	r3, #0
 8015508:	eba6 0807 	sub.w	r8, r6, r7
 801550c:	608b      	str	r3, [r1, #8]
 801550e:	f1b8 0f00 	cmp.w	r8, #0
 8015512:	dd9c      	ble.n	801544e <__sflush_r+0x1a>
 8015514:	6a21      	ldr	r1, [r4, #32]
 8015516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015518:	4643      	mov	r3, r8
 801551a:	463a      	mov	r2, r7
 801551c:	4628      	mov	r0, r5
 801551e:	47b0      	blx	r6
 8015520:	2800      	cmp	r0, #0
 8015522:	dc06      	bgt.n	8015532 <__sflush_r+0xfe>
 8015524:	89a3      	ldrh	r3, [r4, #12]
 8015526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801552a:	81a3      	strh	r3, [r4, #12]
 801552c:	f04f 30ff 	mov.w	r0, #4294967295
 8015530:	e78e      	b.n	8015450 <__sflush_r+0x1c>
 8015532:	4407      	add	r7, r0
 8015534:	eba8 0800 	sub.w	r8, r8, r0
 8015538:	e7e9      	b.n	801550e <__sflush_r+0xda>
 801553a:	bf00      	nop
 801553c:	20400001 	.word	0x20400001

08015540 <_fflush_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	690b      	ldr	r3, [r1, #16]
 8015544:	4605      	mov	r5, r0
 8015546:	460c      	mov	r4, r1
 8015548:	b913      	cbnz	r3, 8015550 <_fflush_r+0x10>
 801554a:	2500      	movs	r5, #0
 801554c:	4628      	mov	r0, r5
 801554e:	bd38      	pop	{r3, r4, r5, pc}
 8015550:	b118      	cbz	r0, 801555a <_fflush_r+0x1a>
 8015552:	6983      	ldr	r3, [r0, #24]
 8015554:	b90b      	cbnz	r3, 801555a <_fflush_r+0x1a>
 8015556:	f7fe f9fd 	bl	8013954 <__sinit>
 801555a:	4b14      	ldr	r3, [pc, #80]	; (80155ac <_fflush_r+0x6c>)
 801555c:	429c      	cmp	r4, r3
 801555e:	d11b      	bne.n	8015598 <_fflush_r+0x58>
 8015560:	686c      	ldr	r4, [r5, #4]
 8015562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d0ef      	beq.n	801554a <_fflush_r+0xa>
 801556a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801556c:	07d0      	lsls	r0, r2, #31
 801556e:	d404      	bmi.n	801557a <_fflush_r+0x3a>
 8015570:	0599      	lsls	r1, r3, #22
 8015572:	d402      	bmi.n	801557a <_fflush_r+0x3a>
 8015574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015576:	f7fe fab0 	bl	8013ada <__retarget_lock_acquire_recursive>
 801557a:	4628      	mov	r0, r5
 801557c:	4621      	mov	r1, r4
 801557e:	f7ff ff59 	bl	8015434 <__sflush_r>
 8015582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015584:	07da      	lsls	r2, r3, #31
 8015586:	4605      	mov	r5, r0
 8015588:	d4e0      	bmi.n	801554c <_fflush_r+0xc>
 801558a:	89a3      	ldrh	r3, [r4, #12]
 801558c:	059b      	lsls	r3, r3, #22
 801558e:	d4dd      	bmi.n	801554c <_fflush_r+0xc>
 8015590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015592:	f7fe faa3 	bl	8013adc <__retarget_lock_release_recursive>
 8015596:	e7d9      	b.n	801554c <_fflush_r+0xc>
 8015598:	4b05      	ldr	r3, [pc, #20]	; (80155b0 <_fflush_r+0x70>)
 801559a:	429c      	cmp	r4, r3
 801559c:	d101      	bne.n	80155a2 <_fflush_r+0x62>
 801559e:	68ac      	ldr	r4, [r5, #8]
 80155a0:	e7df      	b.n	8015562 <_fflush_r+0x22>
 80155a2:	4b04      	ldr	r3, [pc, #16]	; (80155b4 <_fflush_r+0x74>)
 80155a4:	429c      	cmp	r4, r3
 80155a6:	bf08      	it	eq
 80155a8:	68ec      	ldreq	r4, [r5, #12]
 80155aa:	e7da      	b.n	8015562 <_fflush_r+0x22>
 80155ac:	08016df8 	.word	0x08016df8
 80155b0:	08016e18 	.word	0x08016e18
 80155b4:	08016dd8 	.word	0x08016dd8

080155b8 <_localeconv_r>:
 80155b8:	4800      	ldr	r0, [pc, #0]	; (80155bc <_localeconv_r+0x4>)
 80155ba:	4770      	bx	lr
 80155bc:	200004f0 	.word	0x200004f0

080155c0 <_lseek_r>:
 80155c0:	b538      	push	{r3, r4, r5, lr}
 80155c2:	4d07      	ldr	r5, [pc, #28]	; (80155e0 <_lseek_r+0x20>)
 80155c4:	4604      	mov	r4, r0
 80155c6:	4608      	mov	r0, r1
 80155c8:	4611      	mov	r1, r2
 80155ca:	2200      	movs	r2, #0
 80155cc:	602a      	str	r2, [r5, #0]
 80155ce:	461a      	mov	r2, r3
 80155d0:	f7ef fd00 	bl	8004fd4 <_lseek>
 80155d4:	1c43      	adds	r3, r0, #1
 80155d6:	d102      	bne.n	80155de <_lseek_r+0x1e>
 80155d8:	682b      	ldr	r3, [r5, #0]
 80155da:	b103      	cbz	r3, 80155de <_lseek_r+0x1e>
 80155dc:	6023      	str	r3, [r4, #0]
 80155de:	bd38      	pop	{r3, r4, r5, pc}
 80155e0:	20009858 	.word	0x20009858

080155e4 <malloc>:
 80155e4:	4b02      	ldr	r3, [pc, #8]	; (80155f0 <malloc+0xc>)
 80155e6:	4601      	mov	r1, r0
 80155e8:	6818      	ldr	r0, [r3, #0]
 80155ea:	f7fe bac9 	b.w	8013b80 <_malloc_r>
 80155ee:	bf00      	nop
 80155f0:	2000039c 	.word	0x2000039c

080155f4 <__malloc_lock>:
 80155f4:	4801      	ldr	r0, [pc, #4]	; (80155fc <__malloc_lock+0x8>)
 80155f6:	f7fe ba70 	b.w	8013ada <__retarget_lock_acquire_recursive>
 80155fa:	bf00      	nop
 80155fc:	2000984c 	.word	0x2000984c

08015600 <__malloc_unlock>:
 8015600:	4801      	ldr	r0, [pc, #4]	; (8015608 <__malloc_unlock+0x8>)
 8015602:	f7fe ba6b 	b.w	8013adc <__retarget_lock_release_recursive>
 8015606:	bf00      	nop
 8015608:	2000984c 	.word	0x2000984c

0801560c <_Balloc>:
 801560c:	b570      	push	{r4, r5, r6, lr}
 801560e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015610:	4604      	mov	r4, r0
 8015612:	460d      	mov	r5, r1
 8015614:	b976      	cbnz	r6, 8015634 <_Balloc+0x28>
 8015616:	2010      	movs	r0, #16
 8015618:	f7ff ffe4 	bl	80155e4 <malloc>
 801561c:	4602      	mov	r2, r0
 801561e:	6260      	str	r0, [r4, #36]	; 0x24
 8015620:	b920      	cbnz	r0, 801562c <_Balloc+0x20>
 8015622:	4b18      	ldr	r3, [pc, #96]	; (8015684 <_Balloc+0x78>)
 8015624:	4818      	ldr	r0, [pc, #96]	; (8015688 <_Balloc+0x7c>)
 8015626:	2166      	movs	r1, #102	; 0x66
 8015628:	f000 fd44 	bl	80160b4 <__assert_func>
 801562c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015630:	6006      	str	r6, [r0, #0]
 8015632:	60c6      	str	r6, [r0, #12]
 8015634:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015636:	68f3      	ldr	r3, [r6, #12]
 8015638:	b183      	cbz	r3, 801565c <_Balloc+0x50>
 801563a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015642:	b9b8      	cbnz	r0, 8015674 <_Balloc+0x68>
 8015644:	2101      	movs	r1, #1
 8015646:	fa01 f605 	lsl.w	r6, r1, r5
 801564a:	1d72      	adds	r2, r6, #5
 801564c:	0092      	lsls	r2, r2, #2
 801564e:	4620      	mov	r0, r4
 8015650:	f000 fb60 	bl	8015d14 <_calloc_r>
 8015654:	b160      	cbz	r0, 8015670 <_Balloc+0x64>
 8015656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801565a:	e00e      	b.n	801567a <_Balloc+0x6e>
 801565c:	2221      	movs	r2, #33	; 0x21
 801565e:	2104      	movs	r1, #4
 8015660:	4620      	mov	r0, r4
 8015662:	f000 fb57 	bl	8015d14 <_calloc_r>
 8015666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015668:	60f0      	str	r0, [r6, #12]
 801566a:	68db      	ldr	r3, [r3, #12]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d1e4      	bne.n	801563a <_Balloc+0x2e>
 8015670:	2000      	movs	r0, #0
 8015672:	bd70      	pop	{r4, r5, r6, pc}
 8015674:	6802      	ldr	r2, [r0, #0]
 8015676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801567a:	2300      	movs	r3, #0
 801567c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015680:	e7f7      	b.n	8015672 <_Balloc+0x66>
 8015682:	bf00      	nop
 8015684:	08016e7d 	.word	0x08016e7d
 8015688:	08016f00 	.word	0x08016f00

0801568c <_Bfree>:
 801568c:	b570      	push	{r4, r5, r6, lr}
 801568e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015690:	4605      	mov	r5, r0
 8015692:	460c      	mov	r4, r1
 8015694:	b976      	cbnz	r6, 80156b4 <_Bfree+0x28>
 8015696:	2010      	movs	r0, #16
 8015698:	f7ff ffa4 	bl	80155e4 <malloc>
 801569c:	4602      	mov	r2, r0
 801569e:	6268      	str	r0, [r5, #36]	; 0x24
 80156a0:	b920      	cbnz	r0, 80156ac <_Bfree+0x20>
 80156a2:	4b09      	ldr	r3, [pc, #36]	; (80156c8 <_Bfree+0x3c>)
 80156a4:	4809      	ldr	r0, [pc, #36]	; (80156cc <_Bfree+0x40>)
 80156a6:	218a      	movs	r1, #138	; 0x8a
 80156a8:	f000 fd04 	bl	80160b4 <__assert_func>
 80156ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80156b0:	6006      	str	r6, [r0, #0]
 80156b2:	60c6      	str	r6, [r0, #12]
 80156b4:	b13c      	cbz	r4, 80156c6 <_Bfree+0x3a>
 80156b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80156b8:	6862      	ldr	r2, [r4, #4]
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80156c0:	6021      	str	r1, [r4, #0]
 80156c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80156c6:	bd70      	pop	{r4, r5, r6, pc}
 80156c8:	08016e7d 	.word	0x08016e7d
 80156cc:	08016f00 	.word	0x08016f00

080156d0 <__multadd>:
 80156d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d4:	690d      	ldr	r5, [r1, #16]
 80156d6:	4607      	mov	r7, r0
 80156d8:	460c      	mov	r4, r1
 80156da:	461e      	mov	r6, r3
 80156dc:	f101 0c14 	add.w	ip, r1, #20
 80156e0:	2000      	movs	r0, #0
 80156e2:	f8dc 3000 	ldr.w	r3, [ip]
 80156e6:	b299      	uxth	r1, r3
 80156e8:	fb02 6101 	mla	r1, r2, r1, r6
 80156ec:	0c1e      	lsrs	r6, r3, #16
 80156ee:	0c0b      	lsrs	r3, r1, #16
 80156f0:	fb02 3306 	mla	r3, r2, r6, r3
 80156f4:	b289      	uxth	r1, r1
 80156f6:	3001      	adds	r0, #1
 80156f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80156fc:	4285      	cmp	r5, r0
 80156fe:	f84c 1b04 	str.w	r1, [ip], #4
 8015702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015706:	dcec      	bgt.n	80156e2 <__multadd+0x12>
 8015708:	b30e      	cbz	r6, 801574e <__multadd+0x7e>
 801570a:	68a3      	ldr	r3, [r4, #8]
 801570c:	42ab      	cmp	r3, r5
 801570e:	dc19      	bgt.n	8015744 <__multadd+0x74>
 8015710:	6861      	ldr	r1, [r4, #4]
 8015712:	4638      	mov	r0, r7
 8015714:	3101      	adds	r1, #1
 8015716:	f7ff ff79 	bl	801560c <_Balloc>
 801571a:	4680      	mov	r8, r0
 801571c:	b928      	cbnz	r0, 801572a <__multadd+0x5a>
 801571e:	4602      	mov	r2, r0
 8015720:	4b0c      	ldr	r3, [pc, #48]	; (8015754 <__multadd+0x84>)
 8015722:	480d      	ldr	r0, [pc, #52]	; (8015758 <__multadd+0x88>)
 8015724:	21b5      	movs	r1, #181	; 0xb5
 8015726:	f000 fcc5 	bl	80160b4 <__assert_func>
 801572a:	6922      	ldr	r2, [r4, #16]
 801572c:	3202      	adds	r2, #2
 801572e:	f104 010c 	add.w	r1, r4, #12
 8015732:	0092      	lsls	r2, r2, #2
 8015734:	300c      	adds	r0, #12
 8015736:	f7fe f9d2 	bl	8013ade <memcpy>
 801573a:	4621      	mov	r1, r4
 801573c:	4638      	mov	r0, r7
 801573e:	f7ff ffa5 	bl	801568c <_Bfree>
 8015742:	4644      	mov	r4, r8
 8015744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015748:	3501      	adds	r5, #1
 801574a:	615e      	str	r6, [r3, #20]
 801574c:	6125      	str	r5, [r4, #16]
 801574e:	4620      	mov	r0, r4
 8015750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015754:	08016eef 	.word	0x08016eef
 8015758:	08016f00 	.word	0x08016f00

0801575c <__hi0bits>:
 801575c:	0c03      	lsrs	r3, r0, #16
 801575e:	041b      	lsls	r3, r3, #16
 8015760:	b9d3      	cbnz	r3, 8015798 <__hi0bits+0x3c>
 8015762:	0400      	lsls	r0, r0, #16
 8015764:	2310      	movs	r3, #16
 8015766:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801576a:	bf04      	itt	eq
 801576c:	0200      	lsleq	r0, r0, #8
 801576e:	3308      	addeq	r3, #8
 8015770:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015774:	bf04      	itt	eq
 8015776:	0100      	lsleq	r0, r0, #4
 8015778:	3304      	addeq	r3, #4
 801577a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801577e:	bf04      	itt	eq
 8015780:	0080      	lsleq	r0, r0, #2
 8015782:	3302      	addeq	r3, #2
 8015784:	2800      	cmp	r0, #0
 8015786:	db05      	blt.n	8015794 <__hi0bits+0x38>
 8015788:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801578c:	f103 0301 	add.w	r3, r3, #1
 8015790:	bf08      	it	eq
 8015792:	2320      	moveq	r3, #32
 8015794:	4618      	mov	r0, r3
 8015796:	4770      	bx	lr
 8015798:	2300      	movs	r3, #0
 801579a:	e7e4      	b.n	8015766 <__hi0bits+0xa>

0801579c <__lo0bits>:
 801579c:	6803      	ldr	r3, [r0, #0]
 801579e:	f013 0207 	ands.w	r2, r3, #7
 80157a2:	4601      	mov	r1, r0
 80157a4:	d00b      	beq.n	80157be <__lo0bits+0x22>
 80157a6:	07da      	lsls	r2, r3, #31
 80157a8:	d423      	bmi.n	80157f2 <__lo0bits+0x56>
 80157aa:	0798      	lsls	r0, r3, #30
 80157ac:	bf49      	itett	mi
 80157ae:	085b      	lsrmi	r3, r3, #1
 80157b0:	089b      	lsrpl	r3, r3, #2
 80157b2:	2001      	movmi	r0, #1
 80157b4:	600b      	strmi	r3, [r1, #0]
 80157b6:	bf5c      	itt	pl
 80157b8:	600b      	strpl	r3, [r1, #0]
 80157ba:	2002      	movpl	r0, #2
 80157bc:	4770      	bx	lr
 80157be:	b298      	uxth	r0, r3
 80157c0:	b9a8      	cbnz	r0, 80157ee <__lo0bits+0x52>
 80157c2:	0c1b      	lsrs	r3, r3, #16
 80157c4:	2010      	movs	r0, #16
 80157c6:	b2da      	uxtb	r2, r3
 80157c8:	b90a      	cbnz	r2, 80157ce <__lo0bits+0x32>
 80157ca:	3008      	adds	r0, #8
 80157cc:	0a1b      	lsrs	r3, r3, #8
 80157ce:	071a      	lsls	r2, r3, #28
 80157d0:	bf04      	itt	eq
 80157d2:	091b      	lsreq	r3, r3, #4
 80157d4:	3004      	addeq	r0, #4
 80157d6:	079a      	lsls	r2, r3, #30
 80157d8:	bf04      	itt	eq
 80157da:	089b      	lsreq	r3, r3, #2
 80157dc:	3002      	addeq	r0, #2
 80157de:	07da      	lsls	r2, r3, #31
 80157e0:	d403      	bmi.n	80157ea <__lo0bits+0x4e>
 80157e2:	085b      	lsrs	r3, r3, #1
 80157e4:	f100 0001 	add.w	r0, r0, #1
 80157e8:	d005      	beq.n	80157f6 <__lo0bits+0x5a>
 80157ea:	600b      	str	r3, [r1, #0]
 80157ec:	4770      	bx	lr
 80157ee:	4610      	mov	r0, r2
 80157f0:	e7e9      	b.n	80157c6 <__lo0bits+0x2a>
 80157f2:	2000      	movs	r0, #0
 80157f4:	4770      	bx	lr
 80157f6:	2020      	movs	r0, #32
 80157f8:	4770      	bx	lr
	...

080157fc <__i2b>:
 80157fc:	b510      	push	{r4, lr}
 80157fe:	460c      	mov	r4, r1
 8015800:	2101      	movs	r1, #1
 8015802:	f7ff ff03 	bl	801560c <_Balloc>
 8015806:	4602      	mov	r2, r0
 8015808:	b928      	cbnz	r0, 8015816 <__i2b+0x1a>
 801580a:	4b05      	ldr	r3, [pc, #20]	; (8015820 <__i2b+0x24>)
 801580c:	4805      	ldr	r0, [pc, #20]	; (8015824 <__i2b+0x28>)
 801580e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015812:	f000 fc4f 	bl	80160b4 <__assert_func>
 8015816:	2301      	movs	r3, #1
 8015818:	6144      	str	r4, [r0, #20]
 801581a:	6103      	str	r3, [r0, #16]
 801581c:	bd10      	pop	{r4, pc}
 801581e:	bf00      	nop
 8015820:	08016eef 	.word	0x08016eef
 8015824:	08016f00 	.word	0x08016f00

08015828 <__multiply>:
 8015828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801582c:	4691      	mov	r9, r2
 801582e:	690a      	ldr	r2, [r1, #16]
 8015830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015834:	429a      	cmp	r2, r3
 8015836:	bfb8      	it	lt
 8015838:	460b      	movlt	r3, r1
 801583a:	460c      	mov	r4, r1
 801583c:	bfbc      	itt	lt
 801583e:	464c      	movlt	r4, r9
 8015840:	4699      	movlt	r9, r3
 8015842:	6927      	ldr	r7, [r4, #16]
 8015844:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015848:	68a3      	ldr	r3, [r4, #8]
 801584a:	6861      	ldr	r1, [r4, #4]
 801584c:	eb07 060a 	add.w	r6, r7, sl
 8015850:	42b3      	cmp	r3, r6
 8015852:	b085      	sub	sp, #20
 8015854:	bfb8      	it	lt
 8015856:	3101      	addlt	r1, #1
 8015858:	f7ff fed8 	bl	801560c <_Balloc>
 801585c:	b930      	cbnz	r0, 801586c <__multiply+0x44>
 801585e:	4602      	mov	r2, r0
 8015860:	4b44      	ldr	r3, [pc, #272]	; (8015974 <__multiply+0x14c>)
 8015862:	4845      	ldr	r0, [pc, #276]	; (8015978 <__multiply+0x150>)
 8015864:	f240 115d 	movw	r1, #349	; 0x15d
 8015868:	f000 fc24 	bl	80160b4 <__assert_func>
 801586c:	f100 0514 	add.w	r5, r0, #20
 8015870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015874:	462b      	mov	r3, r5
 8015876:	2200      	movs	r2, #0
 8015878:	4543      	cmp	r3, r8
 801587a:	d321      	bcc.n	80158c0 <__multiply+0x98>
 801587c:	f104 0314 	add.w	r3, r4, #20
 8015880:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015884:	f109 0314 	add.w	r3, r9, #20
 8015888:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801588c:	9202      	str	r2, [sp, #8]
 801588e:	1b3a      	subs	r2, r7, r4
 8015890:	3a15      	subs	r2, #21
 8015892:	f022 0203 	bic.w	r2, r2, #3
 8015896:	3204      	adds	r2, #4
 8015898:	f104 0115 	add.w	r1, r4, #21
 801589c:	428f      	cmp	r7, r1
 801589e:	bf38      	it	cc
 80158a0:	2204      	movcc	r2, #4
 80158a2:	9201      	str	r2, [sp, #4]
 80158a4:	9a02      	ldr	r2, [sp, #8]
 80158a6:	9303      	str	r3, [sp, #12]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d80c      	bhi.n	80158c6 <__multiply+0x9e>
 80158ac:	2e00      	cmp	r6, #0
 80158ae:	dd03      	ble.n	80158b8 <__multiply+0x90>
 80158b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d05a      	beq.n	801596e <__multiply+0x146>
 80158b8:	6106      	str	r6, [r0, #16]
 80158ba:	b005      	add	sp, #20
 80158bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c0:	f843 2b04 	str.w	r2, [r3], #4
 80158c4:	e7d8      	b.n	8015878 <__multiply+0x50>
 80158c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80158ca:	f1ba 0f00 	cmp.w	sl, #0
 80158ce:	d024      	beq.n	801591a <__multiply+0xf2>
 80158d0:	f104 0e14 	add.w	lr, r4, #20
 80158d4:	46a9      	mov	r9, r5
 80158d6:	f04f 0c00 	mov.w	ip, #0
 80158da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80158de:	f8d9 1000 	ldr.w	r1, [r9]
 80158e2:	fa1f fb82 	uxth.w	fp, r2
 80158e6:	b289      	uxth	r1, r1
 80158e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80158ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80158f0:	f8d9 2000 	ldr.w	r2, [r9]
 80158f4:	4461      	add	r1, ip
 80158f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80158fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80158fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015902:	b289      	uxth	r1, r1
 8015904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015908:	4577      	cmp	r7, lr
 801590a:	f849 1b04 	str.w	r1, [r9], #4
 801590e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015912:	d8e2      	bhi.n	80158da <__multiply+0xb2>
 8015914:	9a01      	ldr	r2, [sp, #4]
 8015916:	f845 c002 	str.w	ip, [r5, r2]
 801591a:	9a03      	ldr	r2, [sp, #12]
 801591c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015920:	3304      	adds	r3, #4
 8015922:	f1b9 0f00 	cmp.w	r9, #0
 8015926:	d020      	beq.n	801596a <__multiply+0x142>
 8015928:	6829      	ldr	r1, [r5, #0]
 801592a:	f104 0c14 	add.w	ip, r4, #20
 801592e:	46ae      	mov	lr, r5
 8015930:	f04f 0a00 	mov.w	sl, #0
 8015934:	f8bc b000 	ldrh.w	fp, [ip]
 8015938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801593c:	fb09 220b 	mla	r2, r9, fp, r2
 8015940:	4492      	add	sl, r2
 8015942:	b289      	uxth	r1, r1
 8015944:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015948:	f84e 1b04 	str.w	r1, [lr], #4
 801594c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015950:	f8be 1000 	ldrh.w	r1, [lr]
 8015954:	0c12      	lsrs	r2, r2, #16
 8015956:	fb09 1102 	mla	r1, r9, r2, r1
 801595a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801595e:	4567      	cmp	r7, ip
 8015960:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015964:	d8e6      	bhi.n	8015934 <__multiply+0x10c>
 8015966:	9a01      	ldr	r2, [sp, #4]
 8015968:	50a9      	str	r1, [r5, r2]
 801596a:	3504      	adds	r5, #4
 801596c:	e79a      	b.n	80158a4 <__multiply+0x7c>
 801596e:	3e01      	subs	r6, #1
 8015970:	e79c      	b.n	80158ac <__multiply+0x84>
 8015972:	bf00      	nop
 8015974:	08016eef 	.word	0x08016eef
 8015978:	08016f00 	.word	0x08016f00

0801597c <__pow5mult>:
 801597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015980:	4615      	mov	r5, r2
 8015982:	f012 0203 	ands.w	r2, r2, #3
 8015986:	4606      	mov	r6, r0
 8015988:	460f      	mov	r7, r1
 801598a:	d007      	beq.n	801599c <__pow5mult+0x20>
 801598c:	4c25      	ldr	r4, [pc, #148]	; (8015a24 <__pow5mult+0xa8>)
 801598e:	3a01      	subs	r2, #1
 8015990:	2300      	movs	r3, #0
 8015992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015996:	f7ff fe9b 	bl	80156d0 <__multadd>
 801599a:	4607      	mov	r7, r0
 801599c:	10ad      	asrs	r5, r5, #2
 801599e:	d03d      	beq.n	8015a1c <__pow5mult+0xa0>
 80159a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80159a2:	b97c      	cbnz	r4, 80159c4 <__pow5mult+0x48>
 80159a4:	2010      	movs	r0, #16
 80159a6:	f7ff fe1d 	bl	80155e4 <malloc>
 80159aa:	4602      	mov	r2, r0
 80159ac:	6270      	str	r0, [r6, #36]	; 0x24
 80159ae:	b928      	cbnz	r0, 80159bc <__pow5mult+0x40>
 80159b0:	4b1d      	ldr	r3, [pc, #116]	; (8015a28 <__pow5mult+0xac>)
 80159b2:	481e      	ldr	r0, [pc, #120]	; (8015a2c <__pow5mult+0xb0>)
 80159b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80159b8:	f000 fb7c 	bl	80160b4 <__assert_func>
 80159bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159c0:	6004      	str	r4, [r0, #0]
 80159c2:	60c4      	str	r4, [r0, #12]
 80159c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80159cc:	b94c      	cbnz	r4, 80159e2 <__pow5mult+0x66>
 80159ce:	f240 2171 	movw	r1, #625	; 0x271
 80159d2:	4630      	mov	r0, r6
 80159d4:	f7ff ff12 	bl	80157fc <__i2b>
 80159d8:	2300      	movs	r3, #0
 80159da:	f8c8 0008 	str.w	r0, [r8, #8]
 80159de:	4604      	mov	r4, r0
 80159e0:	6003      	str	r3, [r0, #0]
 80159e2:	f04f 0900 	mov.w	r9, #0
 80159e6:	07eb      	lsls	r3, r5, #31
 80159e8:	d50a      	bpl.n	8015a00 <__pow5mult+0x84>
 80159ea:	4639      	mov	r1, r7
 80159ec:	4622      	mov	r2, r4
 80159ee:	4630      	mov	r0, r6
 80159f0:	f7ff ff1a 	bl	8015828 <__multiply>
 80159f4:	4639      	mov	r1, r7
 80159f6:	4680      	mov	r8, r0
 80159f8:	4630      	mov	r0, r6
 80159fa:	f7ff fe47 	bl	801568c <_Bfree>
 80159fe:	4647      	mov	r7, r8
 8015a00:	106d      	asrs	r5, r5, #1
 8015a02:	d00b      	beq.n	8015a1c <__pow5mult+0xa0>
 8015a04:	6820      	ldr	r0, [r4, #0]
 8015a06:	b938      	cbnz	r0, 8015a18 <__pow5mult+0x9c>
 8015a08:	4622      	mov	r2, r4
 8015a0a:	4621      	mov	r1, r4
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	f7ff ff0b 	bl	8015828 <__multiply>
 8015a12:	6020      	str	r0, [r4, #0]
 8015a14:	f8c0 9000 	str.w	r9, [r0]
 8015a18:	4604      	mov	r4, r0
 8015a1a:	e7e4      	b.n	80159e6 <__pow5mult+0x6a>
 8015a1c:	4638      	mov	r0, r7
 8015a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a22:	bf00      	nop
 8015a24:	08017050 	.word	0x08017050
 8015a28:	08016e7d 	.word	0x08016e7d
 8015a2c:	08016f00 	.word	0x08016f00

08015a30 <__lshift>:
 8015a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a34:	460c      	mov	r4, r1
 8015a36:	6849      	ldr	r1, [r1, #4]
 8015a38:	6923      	ldr	r3, [r4, #16]
 8015a3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a3e:	68a3      	ldr	r3, [r4, #8]
 8015a40:	4607      	mov	r7, r0
 8015a42:	4691      	mov	r9, r2
 8015a44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a48:	f108 0601 	add.w	r6, r8, #1
 8015a4c:	42b3      	cmp	r3, r6
 8015a4e:	db0b      	blt.n	8015a68 <__lshift+0x38>
 8015a50:	4638      	mov	r0, r7
 8015a52:	f7ff fddb 	bl	801560c <_Balloc>
 8015a56:	4605      	mov	r5, r0
 8015a58:	b948      	cbnz	r0, 8015a6e <__lshift+0x3e>
 8015a5a:	4602      	mov	r2, r0
 8015a5c:	4b2a      	ldr	r3, [pc, #168]	; (8015b08 <__lshift+0xd8>)
 8015a5e:	482b      	ldr	r0, [pc, #172]	; (8015b0c <__lshift+0xdc>)
 8015a60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015a64:	f000 fb26 	bl	80160b4 <__assert_func>
 8015a68:	3101      	adds	r1, #1
 8015a6a:	005b      	lsls	r3, r3, #1
 8015a6c:	e7ee      	b.n	8015a4c <__lshift+0x1c>
 8015a6e:	2300      	movs	r3, #0
 8015a70:	f100 0114 	add.w	r1, r0, #20
 8015a74:	f100 0210 	add.w	r2, r0, #16
 8015a78:	4618      	mov	r0, r3
 8015a7a:	4553      	cmp	r3, sl
 8015a7c:	db37      	blt.n	8015aee <__lshift+0xbe>
 8015a7e:	6920      	ldr	r0, [r4, #16]
 8015a80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a84:	f104 0314 	add.w	r3, r4, #20
 8015a88:	f019 091f 	ands.w	r9, r9, #31
 8015a8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015a94:	d02f      	beq.n	8015af6 <__lshift+0xc6>
 8015a96:	f1c9 0e20 	rsb	lr, r9, #32
 8015a9a:	468a      	mov	sl, r1
 8015a9c:	f04f 0c00 	mov.w	ip, #0
 8015aa0:	681a      	ldr	r2, [r3, #0]
 8015aa2:	fa02 f209 	lsl.w	r2, r2, r9
 8015aa6:	ea42 020c 	orr.w	r2, r2, ip
 8015aaa:	f84a 2b04 	str.w	r2, [sl], #4
 8015aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ab2:	4298      	cmp	r0, r3
 8015ab4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015ab8:	d8f2      	bhi.n	8015aa0 <__lshift+0x70>
 8015aba:	1b03      	subs	r3, r0, r4
 8015abc:	3b15      	subs	r3, #21
 8015abe:	f023 0303 	bic.w	r3, r3, #3
 8015ac2:	3304      	adds	r3, #4
 8015ac4:	f104 0215 	add.w	r2, r4, #21
 8015ac8:	4290      	cmp	r0, r2
 8015aca:	bf38      	it	cc
 8015acc:	2304      	movcc	r3, #4
 8015ace:	f841 c003 	str.w	ip, [r1, r3]
 8015ad2:	f1bc 0f00 	cmp.w	ip, #0
 8015ad6:	d001      	beq.n	8015adc <__lshift+0xac>
 8015ad8:	f108 0602 	add.w	r6, r8, #2
 8015adc:	3e01      	subs	r6, #1
 8015ade:	4638      	mov	r0, r7
 8015ae0:	612e      	str	r6, [r5, #16]
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	f7ff fdd2 	bl	801568c <_Bfree>
 8015ae8:	4628      	mov	r0, r5
 8015aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8015af2:	3301      	adds	r3, #1
 8015af4:	e7c1      	b.n	8015a7a <__lshift+0x4a>
 8015af6:	3904      	subs	r1, #4
 8015af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b00:	4298      	cmp	r0, r3
 8015b02:	d8f9      	bhi.n	8015af8 <__lshift+0xc8>
 8015b04:	e7ea      	b.n	8015adc <__lshift+0xac>
 8015b06:	bf00      	nop
 8015b08:	08016eef 	.word	0x08016eef
 8015b0c:	08016f00 	.word	0x08016f00

08015b10 <__mcmp>:
 8015b10:	b530      	push	{r4, r5, lr}
 8015b12:	6902      	ldr	r2, [r0, #16]
 8015b14:	690c      	ldr	r4, [r1, #16]
 8015b16:	1b12      	subs	r2, r2, r4
 8015b18:	d10e      	bne.n	8015b38 <__mcmp+0x28>
 8015b1a:	f100 0314 	add.w	r3, r0, #20
 8015b1e:	3114      	adds	r1, #20
 8015b20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015b24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015b28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015b2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015b30:	42a5      	cmp	r5, r4
 8015b32:	d003      	beq.n	8015b3c <__mcmp+0x2c>
 8015b34:	d305      	bcc.n	8015b42 <__mcmp+0x32>
 8015b36:	2201      	movs	r2, #1
 8015b38:	4610      	mov	r0, r2
 8015b3a:	bd30      	pop	{r4, r5, pc}
 8015b3c:	4283      	cmp	r3, r0
 8015b3e:	d3f3      	bcc.n	8015b28 <__mcmp+0x18>
 8015b40:	e7fa      	b.n	8015b38 <__mcmp+0x28>
 8015b42:	f04f 32ff 	mov.w	r2, #4294967295
 8015b46:	e7f7      	b.n	8015b38 <__mcmp+0x28>

08015b48 <__mdiff>:
 8015b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b4c:	460c      	mov	r4, r1
 8015b4e:	4606      	mov	r6, r0
 8015b50:	4611      	mov	r1, r2
 8015b52:	4620      	mov	r0, r4
 8015b54:	4690      	mov	r8, r2
 8015b56:	f7ff ffdb 	bl	8015b10 <__mcmp>
 8015b5a:	1e05      	subs	r5, r0, #0
 8015b5c:	d110      	bne.n	8015b80 <__mdiff+0x38>
 8015b5e:	4629      	mov	r1, r5
 8015b60:	4630      	mov	r0, r6
 8015b62:	f7ff fd53 	bl	801560c <_Balloc>
 8015b66:	b930      	cbnz	r0, 8015b76 <__mdiff+0x2e>
 8015b68:	4b3a      	ldr	r3, [pc, #232]	; (8015c54 <__mdiff+0x10c>)
 8015b6a:	4602      	mov	r2, r0
 8015b6c:	f240 2132 	movw	r1, #562	; 0x232
 8015b70:	4839      	ldr	r0, [pc, #228]	; (8015c58 <__mdiff+0x110>)
 8015b72:	f000 fa9f 	bl	80160b4 <__assert_func>
 8015b76:	2301      	movs	r3, #1
 8015b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b80:	bfa4      	itt	ge
 8015b82:	4643      	movge	r3, r8
 8015b84:	46a0      	movge	r8, r4
 8015b86:	4630      	mov	r0, r6
 8015b88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b8c:	bfa6      	itte	ge
 8015b8e:	461c      	movge	r4, r3
 8015b90:	2500      	movge	r5, #0
 8015b92:	2501      	movlt	r5, #1
 8015b94:	f7ff fd3a 	bl	801560c <_Balloc>
 8015b98:	b920      	cbnz	r0, 8015ba4 <__mdiff+0x5c>
 8015b9a:	4b2e      	ldr	r3, [pc, #184]	; (8015c54 <__mdiff+0x10c>)
 8015b9c:	4602      	mov	r2, r0
 8015b9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015ba2:	e7e5      	b.n	8015b70 <__mdiff+0x28>
 8015ba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015ba8:	6926      	ldr	r6, [r4, #16]
 8015baa:	60c5      	str	r5, [r0, #12]
 8015bac:	f104 0914 	add.w	r9, r4, #20
 8015bb0:	f108 0514 	add.w	r5, r8, #20
 8015bb4:	f100 0e14 	add.w	lr, r0, #20
 8015bb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015bbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015bc0:	f108 0210 	add.w	r2, r8, #16
 8015bc4:	46f2      	mov	sl, lr
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8015bcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015bd0:	fa1f f883 	uxth.w	r8, r3
 8015bd4:	fa11 f18b 	uxtah	r1, r1, fp
 8015bd8:	0c1b      	lsrs	r3, r3, #16
 8015bda:	eba1 0808 	sub.w	r8, r1, r8
 8015bde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015be2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015be6:	fa1f f888 	uxth.w	r8, r8
 8015bea:	1419      	asrs	r1, r3, #16
 8015bec:	454e      	cmp	r6, r9
 8015bee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015bf2:	f84a 3b04 	str.w	r3, [sl], #4
 8015bf6:	d8e7      	bhi.n	8015bc8 <__mdiff+0x80>
 8015bf8:	1b33      	subs	r3, r6, r4
 8015bfa:	3b15      	subs	r3, #21
 8015bfc:	f023 0303 	bic.w	r3, r3, #3
 8015c00:	3304      	adds	r3, #4
 8015c02:	3415      	adds	r4, #21
 8015c04:	42a6      	cmp	r6, r4
 8015c06:	bf38      	it	cc
 8015c08:	2304      	movcc	r3, #4
 8015c0a:	441d      	add	r5, r3
 8015c0c:	4473      	add	r3, lr
 8015c0e:	469e      	mov	lr, r3
 8015c10:	462e      	mov	r6, r5
 8015c12:	4566      	cmp	r6, ip
 8015c14:	d30e      	bcc.n	8015c34 <__mdiff+0xec>
 8015c16:	f10c 0203 	add.w	r2, ip, #3
 8015c1a:	1b52      	subs	r2, r2, r5
 8015c1c:	f022 0203 	bic.w	r2, r2, #3
 8015c20:	3d03      	subs	r5, #3
 8015c22:	45ac      	cmp	ip, r5
 8015c24:	bf38      	it	cc
 8015c26:	2200      	movcc	r2, #0
 8015c28:	441a      	add	r2, r3
 8015c2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015c2e:	b17b      	cbz	r3, 8015c50 <__mdiff+0x108>
 8015c30:	6107      	str	r7, [r0, #16]
 8015c32:	e7a3      	b.n	8015b7c <__mdiff+0x34>
 8015c34:	f856 8b04 	ldr.w	r8, [r6], #4
 8015c38:	fa11 f288 	uxtah	r2, r1, r8
 8015c3c:	1414      	asrs	r4, r2, #16
 8015c3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015c42:	b292      	uxth	r2, r2
 8015c44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015c48:	f84e 2b04 	str.w	r2, [lr], #4
 8015c4c:	1421      	asrs	r1, r4, #16
 8015c4e:	e7e0      	b.n	8015c12 <__mdiff+0xca>
 8015c50:	3f01      	subs	r7, #1
 8015c52:	e7ea      	b.n	8015c2a <__mdiff+0xe2>
 8015c54:	08016eef 	.word	0x08016eef
 8015c58:	08016f00 	.word	0x08016f00

08015c5c <__d2b>:
 8015c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c60:	4689      	mov	r9, r1
 8015c62:	2101      	movs	r1, #1
 8015c64:	ec57 6b10 	vmov	r6, r7, d0
 8015c68:	4690      	mov	r8, r2
 8015c6a:	f7ff fccf 	bl	801560c <_Balloc>
 8015c6e:	4604      	mov	r4, r0
 8015c70:	b930      	cbnz	r0, 8015c80 <__d2b+0x24>
 8015c72:	4602      	mov	r2, r0
 8015c74:	4b25      	ldr	r3, [pc, #148]	; (8015d0c <__d2b+0xb0>)
 8015c76:	4826      	ldr	r0, [pc, #152]	; (8015d10 <__d2b+0xb4>)
 8015c78:	f240 310a 	movw	r1, #778	; 0x30a
 8015c7c:	f000 fa1a 	bl	80160b4 <__assert_func>
 8015c80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015c84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015c88:	bb35      	cbnz	r5, 8015cd8 <__d2b+0x7c>
 8015c8a:	2e00      	cmp	r6, #0
 8015c8c:	9301      	str	r3, [sp, #4]
 8015c8e:	d028      	beq.n	8015ce2 <__d2b+0x86>
 8015c90:	4668      	mov	r0, sp
 8015c92:	9600      	str	r6, [sp, #0]
 8015c94:	f7ff fd82 	bl	801579c <__lo0bits>
 8015c98:	9900      	ldr	r1, [sp, #0]
 8015c9a:	b300      	cbz	r0, 8015cde <__d2b+0x82>
 8015c9c:	9a01      	ldr	r2, [sp, #4]
 8015c9e:	f1c0 0320 	rsb	r3, r0, #32
 8015ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ca6:	430b      	orrs	r3, r1
 8015ca8:	40c2      	lsrs	r2, r0
 8015caa:	6163      	str	r3, [r4, #20]
 8015cac:	9201      	str	r2, [sp, #4]
 8015cae:	9b01      	ldr	r3, [sp, #4]
 8015cb0:	61a3      	str	r3, [r4, #24]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	bf14      	ite	ne
 8015cb6:	2202      	movne	r2, #2
 8015cb8:	2201      	moveq	r2, #1
 8015cba:	6122      	str	r2, [r4, #16]
 8015cbc:	b1d5      	cbz	r5, 8015cf4 <__d2b+0x98>
 8015cbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015cc2:	4405      	add	r5, r0
 8015cc4:	f8c9 5000 	str.w	r5, [r9]
 8015cc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015ccc:	f8c8 0000 	str.w	r0, [r8]
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	b003      	add	sp, #12
 8015cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015cdc:	e7d5      	b.n	8015c8a <__d2b+0x2e>
 8015cde:	6161      	str	r1, [r4, #20]
 8015ce0:	e7e5      	b.n	8015cae <__d2b+0x52>
 8015ce2:	a801      	add	r0, sp, #4
 8015ce4:	f7ff fd5a 	bl	801579c <__lo0bits>
 8015ce8:	9b01      	ldr	r3, [sp, #4]
 8015cea:	6163      	str	r3, [r4, #20]
 8015cec:	2201      	movs	r2, #1
 8015cee:	6122      	str	r2, [r4, #16]
 8015cf0:	3020      	adds	r0, #32
 8015cf2:	e7e3      	b.n	8015cbc <__d2b+0x60>
 8015cf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015cf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015cfc:	f8c9 0000 	str.w	r0, [r9]
 8015d00:	6918      	ldr	r0, [r3, #16]
 8015d02:	f7ff fd2b 	bl	801575c <__hi0bits>
 8015d06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015d0a:	e7df      	b.n	8015ccc <__d2b+0x70>
 8015d0c:	08016eef 	.word	0x08016eef
 8015d10:	08016f00 	.word	0x08016f00

08015d14 <_calloc_r>:
 8015d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d16:	fba1 2402 	umull	r2, r4, r1, r2
 8015d1a:	b94c      	cbnz	r4, 8015d30 <_calloc_r+0x1c>
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	9201      	str	r2, [sp, #4]
 8015d20:	f7fd ff2e 	bl	8013b80 <_malloc_r>
 8015d24:	9a01      	ldr	r2, [sp, #4]
 8015d26:	4605      	mov	r5, r0
 8015d28:	b930      	cbnz	r0, 8015d38 <_calloc_r+0x24>
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	b003      	add	sp, #12
 8015d2e:	bd30      	pop	{r4, r5, pc}
 8015d30:	220c      	movs	r2, #12
 8015d32:	6002      	str	r2, [r0, #0]
 8015d34:	2500      	movs	r5, #0
 8015d36:	e7f8      	b.n	8015d2a <_calloc_r+0x16>
 8015d38:	4621      	mov	r1, r4
 8015d3a:	f7fd fef8 	bl	8013b2e <memset>
 8015d3e:	e7f4      	b.n	8015d2a <_calloc_r+0x16>

08015d40 <_free_r>:
 8015d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d42:	2900      	cmp	r1, #0
 8015d44:	d044      	beq.n	8015dd0 <_free_r+0x90>
 8015d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d4a:	9001      	str	r0, [sp, #4]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8015d52:	bfb8      	it	lt
 8015d54:	18e4      	addlt	r4, r4, r3
 8015d56:	f7ff fc4d 	bl	80155f4 <__malloc_lock>
 8015d5a:	4a1e      	ldr	r2, [pc, #120]	; (8015dd4 <_free_r+0x94>)
 8015d5c:	9801      	ldr	r0, [sp, #4]
 8015d5e:	6813      	ldr	r3, [r2, #0]
 8015d60:	b933      	cbnz	r3, 8015d70 <_free_r+0x30>
 8015d62:	6063      	str	r3, [r4, #4]
 8015d64:	6014      	str	r4, [r2, #0]
 8015d66:	b003      	add	sp, #12
 8015d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d6c:	f7ff bc48 	b.w	8015600 <__malloc_unlock>
 8015d70:	42a3      	cmp	r3, r4
 8015d72:	d908      	bls.n	8015d86 <_free_r+0x46>
 8015d74:	6825      	ldr	r5, [r4, #0]
 8015d76:	1961      	adds	r1, r4, r5
 8015d78:	428b      	cmp	r3, r1
 8015d7a:	bf01      	itttt	eq
 8015d7c:	6819      	ldreq	r1, [r3, #0]
 8015d7e:	685b      	ldreq	r3, [r3, #4]
 8015d80:	1949      	addeq	r1, r1, r5
 8015d82:	6021      	streq	r1, [r4, #0]
 8015d84:	e7ed      	b.n	8015d62 <_free_r+0x22>
 8015d86:	461a      	mov	r2, r3
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	b10b      	cbz	r3, 8015d90 <_free_r+0x50>
 8015d8c:	42a3      	cmp	r3, r4
 8015d8e:	d9fa      	bls.n	8015d86 <_free_r+0x46>
 8015d90:	6811      	ldr	r1, [r2, #0]
 8015d92:	1855      	adds	r5, r2, r1
 8015d94:	42a5      	cmp	r5, r4
 8015d96:	d10b      	bne.n	8015db0 <_free_r+0x70>
 8015d98:	6824      	ldr	r4, [r4, #0]
 8015d9a:	4421      	add	r1, r4
 8015d9c:	1854      	adds	r4, r2, r1
 8015d9e:	42a3      	cmp	r3, r4
 8015da0:	6011      	str	r1, [r2, #0]
 8015da2:	d1e0      	bne.n	8015d66 <_free_r+0x26>
 8015da4:	681c      	ldr	r4, [r3, #0]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	6053      	str	r3, [r2, #4]
 8015daa:	4421      	add	r1, r4
 8015dac:	6011      	str	r1, [r2, #0]
 8015dae:	e7da      	b.n	8015d66 <_free_r+0x26>
 8015db0:	d902      	bls.n	8015db8 <_free_r+0x78>
 8015db2:	230c      	movs	r3, #12
 8015db4:	6003      	str	r3, [r0, #0]
 8015db6:	e7d6      	b.n	8015d66 <_free_r+0x26>
 8015db8:	6825      	ldr	r5, [r4, #0]
 8015dba:	1961      	adds	r1, r4, r5
 8015dbc:	428b      	cmp	r3, r1
 8015dbe:	bf04      	itt	eq
 8015dc0:	6819      	ldreq	r1, [r3, #0]
 8015dc2:	685b      	ldreq	r3, [r3, #4]
 8015dc4:	6063      	str	r3, [r4, #4]
 8015dc6:	bf04      	itt	eq
 8015dc8:	1949      	addeq	r1, r1, r5
 8015dca:	6021      	streq	r1, [r4, #0]
 8015dcc:	6054      	str	r4, [r2, #4]
 8015dce:	e7ca      	b.n	8015d66 <_free_r+0x26>
 8015dd0:	b003      	add	sp, #12
 8015dd2:	bd30      	pop	{r4, r5, pc}
 8015dd4:	20009850 	.word	0x20009850

08015dd8 <__ssputs_r>:
 8015dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ddc:	688e      	ldr	r6, [r1, #8]
 8015dde:	429e      	cmp	r6, r3
 8015de0:	4682      	mov	sl, r0
 8015de2:	460c      	mov	r4, r1
 8015de4:	4690      	mov	r8, r2
 8015de6:	461f      	mov	r7, r3
 8015de8:	d838      	bhi.n	8015e5c <__ssputs_r+0x84>
 8015dea:	898a      	ldrh	r2, [r1, #12]
 8015dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015df0:	d032      	beq.n	8015e58 <__ssputs_r+0x80>
 8015df2:	6825      	ldr	r5, [r4, #0]
 8015df4:	6909      	ldr	r1, [r1, #16]
 8015df6:	eba5 0901 	sub.w	r9, r5, r1
 8015dfa:	6965      	ldr	r5, [r4, #20]
 8015dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e04:	3301      	adds	r3, #1
 8015e06:	444b      	add	r3, r9
 8015e08:	106d      	asrs	r5, r5, #1
 8015e0a:	429d      	cmp	r5, r3
 8015e0c:	bf38      	it	cc
 8015e0e:	461d      	movcc	r5, r3
 8015e10:	0553      	lsls	r3, r2, #21
 8015e12:	d531      	bpl.n	8015e78 <__ssputs_r+0xa0>
 8015e14:	4629      	mov	r1, r5
 8015e16:	f7fd feb3 	bl	8013b80 <_malloc_r>
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	b950      	cbnz	r0, 8015e34 <__ssputs_r+0x5c>
 8015e1e:	230c      	movs	r3, #12
 8015e20:	f8ca 3000 	str.w	r3, [sl]
 8015e24:	89a3      	ldrh	r3, [r4, #12]
 8015e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e2a:	81a3      	strh	r3, [r4, #12]
 8015e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e34:	6921      	ldr	r1, [r4, #16]
 8015e36:	464a      	mov	r2, r9
 8015e38:	f7fd fe51 	bl	8013ade <memcpy>
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e46:	81a3      	strh	r3, [r4, #12]
 8015e48:	6126      	str	r6, [r4, #16]
 8015e4a:	6165      	str	r5, [r4, #20]
 8015e4c:	444e      	add	r6, r9
 8015e4e:	eba5 0509 	sub.w	r5, r5, r9
 8015e52:	6026      	str	r6, [r4, #0]
 8015e54:	60a5      	str	r5, [r4, #8]
 8015e56:	463e      	mov	r6, r7
 8015e58:	42be      	cmp	r6, r7
 8015e5a:	d900      	bls.n	8015e5e <__ssputs_r+0x86>
 8015e5c:	463e      	mov	r6, r7
 8015e5e:	6820      	ldr	r0, [r4, #0]
 8015e60:	4632      	mov	r2, r6
 8015e62:	4641      	mov	r1, r8
 8015e64:	f7fd fe49 	bl	8013afa <memmove>
 8015e68:	68a3      	ldr	r3, [r4, #8]
 8015e6a:	1b9b      	subs	r3, r3, r6
 8015e6c:	60a3      	str	r3, [r4, #8]
 8015e6e:	6823      	ldr	r3, [r4, #0]
 8015e70:	4433      	add	r3, r6
 8015e72:	6023      	str	r3, [r4, #0]
 8015e74:	2000      	movs	r0, #0
 8015e76:	e7db      	b.n	8015e30 <__ssputs_r+0x58>
 8015e78:	462a      	mov	r2, r5
 8015e7a:	f000 f95d 	bl	8016138 <_realloc_r>
 8015e7e:	4606      	mov	r6, r0
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d1e1      	bne.n	8015e48 <__ssputs_r+0x70>
 8015e84:	6921      	ldr	r1, [r4, #16]
 8015e86:	4650      	mov	r0, sl
 8015e88:	f7ff ff5a 	bl	8015d40 <_free_r>
 8015e8c:	e7c7      	b.n	8015e1e <__ssputs_r+0x46>
	...

08015e90 <_svfiprintf_r>:
 8015e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e94:	4698      	mov	r8, r3
 8015e96:	898b      	ldrh	r3, [r1, #12]
 8015e98:	061b      	lsls	r3, r3, #24
 8015e9a:	b09d      	sub	sp, #116	; 0x74
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	460d      	mov	r5, r1
 8015ea0:	4614      	mov	r4, r2
 8015ea2:	d50e      	bpl.n	8015ec2 <_svfiprintf_r+0x32>
 8015ea4:	690b      	ldr	r3, [r1, #16]
 8015ea6:	b963      	cbnz	r3, 8015ec2 <_svfiprintf_r+0x32>
 8015ea8:	2140      	movs	r1, #64	; 0x40
 8015eaa:	f7fd fe69 	bl	8013b80 <_malloc_r>
 8015eae:	6028      	str	r0, [r5, #0]
 8015eb0:	6128      	str	r0, [r5, #16]
 8015eb2:	b920      	cbnz	r0, 8015ebe <_svfiprintf_r+0x2e>
 8015eb4:	230c      	movs	r3, #12
 8015eb6:	603b      	str	r3, [r7, #0]
 8015eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ebc:	e0d1      	b.n	8016062 <_svfiprintf_r+0x1d2>
 8015ebe:	2340      	movs	r3, #64	; 0x40
 8015ec0:	616b      	str	r3, [r5, #20]
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ec6:	2320      	movs	r3, #32
 8015ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ed0:	2330      	movs	r3, #48	; 0x30
 8015ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801607c <_svfiprintf_r+0x1ec>
 8015ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015eda:	f04f 0901 	mov.w	r9, #1
 8015ede:	4623      	mov	r3, r4
 8015ee0:	469a      	mov	sl, r3
 8015ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ee6:	b10a      	cbz	r2, 8015eec <_svfiprintf_r+0x5c>
 8015ee8:	2a25      	cmp	r2, #37	; 0x25
 8015eea:	d1f9      	bne.n	8015ee0 <_svfiprintf_r+0x50>
 8015eec:	ebba 0b04 	subs.w	fp, sl, r4
 8015ef0:	d00b      	beq.n	8015f0a <_svfiprintf_r+0x7a>
 8015ef2:	465b      	mov	r3, fp
 8015ef4:	4622      	mov	r2, r4
 8015ef6:	4629      	mov	r1, r5
 8015ef8:	4638      	mov	r0, r7
 8015efa:	f7ff ff6d 	bl	8015dd8 <__ssputs_r>
 8015efe:	3001      	adds	r0, #1
 8015f00:	f000 80aa 	beq.w	8016058 <_svfiprintf_r+0x1c8>
 8015f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f06:	445a      	add	r2, fp
 8015f08:	9209      	str	r2, [sp, #36]	; 0x24
 8015f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	f000 80a2 	beq.w	8016058 <_svfiprintf_r+0x1c8>
 8015f14:	2300      	movs	r3, #0
 8015f16:	f04f 32ff 	mov.w	r2, #4294967295
 8015f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f1e:	f10a 0a01 	add.w	sl, sl, #1
 8015f22:	9304      	str	r3, [sp, #16]
 8015f24:	9307      	str	r3, [sp, #28]
 8015f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8015f2c:	4654      	mov	r4, sl
 8015f2e:	2205      	movs	r2, #5
 8015f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f34:	4851      	ldr	r0, [pc, #324]	; (801607c <_svfiprintf_r+0x1ec>)
 8015f36:	f7ea f96b 	bl	8000210 <memchr>
 8015f3a:	9a04      	ldr	r2, [sp, #16]
 8015f3c:	b9d8      	cbnz	r0, 8015f76 <_svfiprintf_r+0xe6>
 8015f3e:	06d0      	lsls	r0, r2, #27
 8015f40:	bf44      	itt	mi
 8015f42:	2320      	movmi	r3, #32
 8015f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f48:	0711      	lsls	r1, r2, #28
 8015f4a:	bf44      	itt	mi
 8015f4c:	232b      	movmi	r3, #43	; 0x2b
 8015f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f52:	f89a 3000 	ldrb.w	r3, [sl]
 8015f56:	2b2a      	cmp	r3, #42	; 0x2a
 8015f58:	d015      	beq.n	8015f86 <_svfiprintf_r+0xf6>
 8015f5a:	9a07      	ldr	r2, [sp, #28]
 8015f5c:	4654      	mov	r4, sl
 8015f5e:	2000      	movs	r0, #0
 8015f60:	f04f 0c0a 	mov.w	ip, #10
 8015f64:	4621      	mov	r1, r4
 8015f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f6a:	3b30      	subs	r3, #48	; 0x30
 8015f6c:	2b09      	cmp	r3, #9
 8015f6e:	d94e      	bls.n	801600e <_svfiprintf_r+0x17e>
 8015f70:	b1b0      	cbz	r0, 8015fa0 <_svfiprintf_r+0x110>
 8015f72:	9207      	str	r2, [sp, #28]
 8015f74:	e014      	b.n	8015fa0 <_svfiprintf_r+0x110>
 8015f76:	eba0 0308 	sub.w	r3, r0, r8
 8015f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8015f7e:	4313      	orrs	r3, r2
 8015f80:	9304      	str	r3, [sp, #16]
 8015f82:	46a2      	mov	sl, r4
 8015f84:	e7d2      	b.n	8015f2c <_svfiprintf_r+0x9c>
 8015f86:	9b03      	ldr	r3, [sp, #12]
 8015f88:	1d19      	adds	r1, r3, #4
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	9103      	str	r1, [sp, #12]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	bfbb      	ittet	lt
 8015f92:	425b      	neglt	r3, r3
 8015f94:	f042 0202 	orrlt.w	r2, r2, #2
 8015f98:	9307      	strge	r3, [sp, #28]
 8015f9a:	9307      	strlt	r3, [sp, #28]
 8015f9c:	bfb8      	it	lt
 8015f9e:	9204      	strlt	r2, [sp, #16]
 8015fa0:	7823      	ldrb	r3, [r4, #0]
 8015fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa4:	d10c      	bne.n	8015fc0 <_svfiprintf_r+0x130>
 8015fa6:	7863      	ldrb	r3, [r4, #1]
 8015fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8015faa:	d135      	bne.n	8016018 <_svfiprintf_r+0x188>
 8015fac:	9b03      	ldr	r3, [sp, #12]
 8015fae:	1d1a      	adds	r2, r3, #4
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	9203      	str	r2, [sp, #12]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	bfb8      	it	lt
 8015fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fbc:	3402      	adds	r4, #2
 8015fbe:	9305      	str	r3, [sp, #20]
 8015fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801608c <_svfiprintf_r+0x1fc>
 8015fc4:	7821      	ldrb	r1, [r4, #0]
 8015fc6:	2203      	movs	r2, #3
 8015fc8:	4650      	mov	r0, sl
 8015fca:	f7ea f921 	bl	8000210 <memchr>
 8015fce:	b140      	cbz	r0, 8015fe2 <_svfiprintf_r+0x152>
 8015fd0:	2340      	movs	r3, #64	; 0x40
 8015fd2:	eba0 000a 	sub.w	r0, r0, sl
 8015fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8015fda:	9b04      	ldr	r3, [sp, #16]
 8015fdc:	4303      	orrs	r3, r0
 8015fde:	3401      	adds	r4, #1
 8015fe0:	9304      	str	r3, [sp, #16]
 8015fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fe6:	4826      	ldr	r0, [pc, #152]	; (8016080 <_svfiprintf_r+0x1f0>)
 8015fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fec:	2206      	movs	r2, #6
 8015fee:	f7ea f90f 	bl	8000210 <memchr>
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d038      	beq.n	8016068 <_svfiprintf_r+0x1d8>
 8015ff6:	4b23      	ldr	r3, [pc, #140]	; (8016084 <_svfiprintf_r+0x1f4>)
 8015ff8:	bb1b      	cbnz	r3, 8016042 <_svfiprintf_r+0x1b2>
 8015ffa:	9b03      	ldr	r3, [sp, #12]
 8015ffc:	3307      	adds	r3, #7
 8015ffe:	f023 0307 	bic.w	r3, r3, #7
 8016002:	3308      	adds	r3, #8
 8016004:	9303      	str	r3, [sp, #12]
 8016006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016008:	4433      	add	r3, r6
 801600a:	9309      	str	r3, [sp, #36]	; 0x24
 801600c:	e767      	b.n	8015ede <_svfiprintf_r+0x4e>
 801600e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016012:	460c      	mov	r4, r1
 8016014:	2001      	movs	r0, #1
 8016016:	e7a5      	b.n	8015f64 <_svfiprintf_r+0xd4>
 8016018:	2300      	movs	r3, #0
 801601a:	3401      	adds	r4, #1
 801601c:	9305      	str	r3, [sp, #20]
 801601e:	4619      	mov	r1, r3
 8016020:	f04f 0c0a 	mov.w	ip, #10
 8016024:	4620      	mov	r0, r4
 8016026:	f810 2b01 	ldrb.w	r2, [r0], #1
 801602a:	3a30      	subs	r2, #48	; 0x30
 801602c:	2a09      	cmp	r2, #9
 801602e:	d903      	bls.n	8016038 <_svfiprintf_r+0x1a8>
 8016030:	2b00      	cmp	r3, #0
 8016032:	d0c5      	beq.n	8015fc0 <_svfiprintf_r+0x130>
 8016034:	9105      	str	r1, [sp, #20]
 8016036:	e7c3      	b.n	8015fc0 <_svfiprintf_r+0x130>
 8016038:	fb0c 2101 	mla	r1, ip, r1, r2
 801603c:	4604      	mov	r4, r0
 801603e:	2301      	movs	r3, #1
 8016040:	e7f0      	b.n	8016024 <_svfiprintf_r+0x194>
 8016042:	ab03      	add	r3, sp, #12
 8016044:	9300      	str	r3, [sp, #0]
 8016046:	462a      	mov	r2, r5
 8016048:	4b0f      	ldr	r3, [pc, #60]	; (8016088 <_svfiprintf_r+0x1f8>)
 801604a:	a904      	add	r1, sp, #16
 801604c:	4638      	mov	r0, r7
 801604e:	f7fd feab 	bl	8013da8 <_printf_float>
 8016052:	1c42      	adds	r2, r0, #1
 8016054:	4606      	mov	r6, r0
 8016056:	d1d6      	bne.n	8016006 <_svfiprintf_r+0x176>
 8016058:	89ab      	ldrh	r3, [r5, #12]
 801605a:	065b      	lsls	r3, r3, #25
 801605c:	f53f af2c 	bmi.w	8015eb8 <_svfiprintf_r+0x28>
 8016060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016062:	b01d      	add	sp, #116	; 0x74
 8016064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016068:	ab03      	add	r3, sp, #12
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	462a      	mov	r2, r5
 801606e:	4b06      	ldr	r3, [pc, #24]	; (8016088 <_svfiprintf_r+0x1f8>)
 8016070:	a904      	add	r1, sp, #16
 8016072:	4638      	mov	r0, r7
 8016074:	f7fe f93c 	bl	80142f0 <_printf_i>
 8016078:	e7eb      	b.n	8016052 <_svfiprintf_r+0x1c2>
 801607a:	bf00      	nop
 801607c:	0801705c 	.word	0x0801705c
 8016080:	08017066 	.word	0x08017066
 8016084:	08013da9 	.word	0x08013da9
 8016088:	08015dd9 	.word	0x08015dd9
 801608c:	08017062 	.word	0x08017062

08016090 <_read_r>:
 8016090:	b538      	push	{r3, r4, r5, lr}
 8016092:	4d07      	ldr	r5, [pc, #28]	; (80160b0 <_read_r+0x20>)
 8016094:	4604      	mov	r4, r0
 8016096:	4608      	mov	r0, r1
 8016098:	4611      	mov	r1, r2
 801609a:	2200      	movs	r2, #0
 801609c:	602a      	str	r2, [r5, #0]
 801609e:	461a      	mov	r2, r3
 80160a0:	f7ee ff38 	bl	8004f14 <_read>
 80160a4:	1c43      	adds	r3, r0, #1
 80160a6:	d102      	bne.n	80160ae <_read_r+0x1e>
 80160a8:	682b      	ldr	r3, [r5, #0]
 80160aa:	b103      	cbz	r3, 80160ae <_read_r+0x1e>
 80160ac:	6023      	str	r3, [r4, #0]
 80160ae:	bd38      	pop	{r3, r4, r5, pc}
 80160b0:	20009858 	.word	0x20009858

080160b4 <__assert_func>:
 80160b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80160b6:	4614      	mov	r4, r2
 80160b8:	461a      	mov	r2, r3
 80160ba:	4b09      	ldr	r3, [pc, #36]	; (80160e0 <__assert_func+0x2c>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	4605      	mov	r5, r0
 80160c0:	68d8      	ldr	r0, [r3, #12]
 80160c2:	b14c      	cbz	r4, 80160d8 <__assert_func+0x24>
 80160c4:	4b07      	ldr	r3, [pc, #28]	; (80160e4 <__assert_func+0x30>)
 80160c6:	9100      	str	r1, [sp, #0]
 80160c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80160cc:	4906      	ldr	r1, [pc, #24]	; (80160e8 <__assert_func+0x34>)
 80160ce:	462b      	mov	r3, r5
 80160d0:	f000 f80e 	bl	80160f0 <fiprintf>
 80160d4:	f000 fa86 	bl	80165e4 <abort>
 80160d8:	4b04      	ldr	r3, [pc, #16]	; (80160ec <__assert_func+0x38>)
 80160da:	461c      	mov	r4, r3
 80160dc:	e7f3      	b.n	80160c6 <__assert_func+0x12>
 80160de:	bf00      	nop
 80160e0:	2000039c 	.word	0x2000039c
 80160e4:	0801706d 	.word	0x0801706d
 80160e8:	0801707a 	.word	0x0801707a
 80160ec:	080170a8 	.word	0x080170a8

080160f0 <fiprintf>:
 80160f0:	b40e      	push	{r1, r2, r3}
 80160f2:	b503      	push	{r0, r1, lr}
 80160f4:	4601      	mov	r1, r0
 80160f6:	ab03      	add	r3, sp, #12
 80160f8:	4805      	ldr	r0, [pc, #20]	; (8016110 <fiprintf+0x20>)
 80160fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80160fe:	6800      	ldr	r0, [r0, #0]
 8016100:	9301      	str	r3, [sp, #4]
 8016102:	f000 f871 	bl	80161e8 <_vfiprintf_r>
 8016106:	b002      	add	sp, #8
 8016108:	f85d eb04 	ldr.w	lr, [sp], #4
 801610c:	b003      	add	sp, #12
 801610e:	4770      	bx	lr
 8016110:	2000039c 	.word	0x2000039c

08016114 <__ascii_mbtowc>:
 8016114:	b082      	sub	sp, #8
 8016116:	b901      	cbnz	r1, 801611a <__ascii_mbtowc+0x6>
 8016118:	a901      	add	r1, sp, #4
 801611a:	b142      	cbz	r2, 801612e <__ascii_mbtowc+0x1a>
 801611c:	b14b      	cbz	r3, 8016132 <__ascii_mbtowc+0x1e>
 801611e:	7813      	ldrb	r3, [r2, #0]
 8016120:	600b      	str	r3, [r1, #0]
 8016122:	7812      	ldrb	r2, [r2, #0]
 8016124:	1e10      	subs	r0, r2, #0
 8016126:	bf18      	it	ne
 8016128:	2001      	movne	r0, #1
 801612a:	b002      	add	sp, #8
 801612c:	4770      	bx	lr
 801612e:	4610      	mov	r0, r2
 8016130:	e7fb      	b.n	801612a <__ascii_mbtowc+0x16>
 8016132:	f06f 0001 	mvn.w	r0, #1
 8016136:	e7f8      	b.n	801612a <__ascii_mbtowc+0x16>

08016138 <_realloc_r>:
 8016138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801613c:	4680      	mov	r8, r0
 801613e:	4614      	mov	r4, r2
 8016140:	460e      	mov	r6, r1
 8016142:	b921      	cbnz	r1, 801614e <_realloc_r+0x16>
 8016144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016148:	4611      	mov	r1, r2
 801614a:	f7fd bd19 	b.w	8013b80 <_malloc_r>
 801614e:	b92a      	cbnz	r2, 801615c <_realloc_r+0x24>
 8016150:	f7ff fdf6 	bl	8015d40 <_free_r>
 8016154:	4625      	mov	r5, r4
 8016156:	4628      	mov	r0, r5
 8016158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801615c:	f000 faae 	bl	80166bc <_malloc_usable_size_r>
 8016160:	4284      	cmp	r4, r0
 8016162:	4607      	mov	r7, r0
 8016164:	d802      	bhi.n	801616c <_realloc_r+0x34>
 8016166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801616a:	d812      	bhi.n	8016192 <_realloc_r+0x5a>
 801616c:	4621      	mov	r1, r4
 801616e:	4640      	mov	r0, r8
 8016170:	f7fd fd06 	bl	8013b80 <_malloc_r>
 8016174:	4605      	mov	r5, r0
 8016176:	2800      	cmp	r0, #0
 8016178:	d0ed      	beq.n	8016156 <_realloc_r+0x1e>
 801617a:	42bc      	cmp	r4, r7
 801617c:	4622      	mov	r2, r4
 801617e:	4631      	mov	r1, r6
 8016180:	bf28      	it	cs
 8016182:	463a      	movcs	r2, r7
 8016184:	f7fd fcab 	bl	8013ade <memcpy>
 8016188:	4631      	mov	r1, r6
 801618a:	4640      	mov	r0, r8
 801618c:	f7ff fdd8 	bl	8015d40 <_free_r>
 8016190:	e7e1      	b.n	8016156 <_realloc_r+0x1e>
 8016192:	4635      	mov	r5, r6
 8016194:	e7df      	b.n	8016156 <_realloc_r+0x1e>

08016196 <__sfputc_r>:
 8016196:	6893      	ldr	r3, [r2, #8]
 8016198:	3b01      	subs	r3, #1
 801619a:	2b00      	cmp	r3, #0
 801619c:	b410      	push	{r4}
 801619e:	6093      	str	r3, [r2, #8]
 80161a0:	da08      	bge.n	80161b4 <__sfputc_r+0x1e>
 80161a2:	6994      	ldr	r4, [r2, #24]
 80161a4:	42a3      	cmp	r3, r4
 80161a6:	db01      	blt.n	80161ac <__sfputc_r+0x16>
 80161a8:	290a      	cmp	r1, #10
 80161aa:	d103      	bne.n	80161b4 <__sfputc_r+0x1e>
 80161ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161b0:	f000 b94a 	b.w	8016448 <__swbuf_r>
 80161b4:	6813      	ldr	r3, [r2, #0]
 80161b6:	1c58      	adds	r0, r3, #1
 80161b8:	6010      	str	r0, [r2, #0]
 80161ba:	7019      	strb	r1, [r3, #0]
 80161bc:	4608      	mov	r0, r1
 80161be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161c2:	4770      	bx	lr

080161c4 <__sfputs_r>:
 80161c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161c6:	4606      	mov	r6, r0
 80161c8:	460f      	mov	r7, r1
 80161ca:	4614      	mov	r4, r2
 80161cc:	18d5      	adds	r5, r2, r3
 80161ce:	42ac      	cmp	r4, r5
 80161d0:	d101      	bne.n	80161d6 <__sfputs_r+0x12>
 80161d2:	2000      	movs	r0, #0
 80161d4:	e007      	b.n	80161e6 <__sfputs_r+0x22>
 80161d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161da:	463a      	mov	r2, r7
 80161dc:	4630      	mov	r0, r6
 80161de:	f7ff ffda 	bl	8016196 <__sfputc_r>
 80161e2:	1c43      	adds	r3, r0, #1
 80161e4:	d1f3      	bne.n	80161ce <__sfputs_r+0xa>
 80161e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080161e8 <_vfiprintf_r>:
 80161e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ec:	460d      	mov	r5, r1
 80161ee:	b09d      	sub	sp, #116	; 0x74
 80161f0:	4614      	mov	r4, r2
 80161f2:	4698      	mov	r8, r3
 80161f4:	4606      	mov	r6, r0
 80161f6:	b118      	cbz	r0, 8016200 <_vfiprintf_r+0x18>
 80161f8:	6983      	ldr	r3, [r0, #24]
 80161fa:	b90b      	cbnz	r3, 8016200 <_vfiprintf_r+0x18>
 80161fc:	f7fd fbaa 	bl	8013954 <__sinit>
 8016200:	4b89      	ldr	r3, [pc, #548]	; (8016428 <_vfiprintf_r+0x240>)
 8016202:	429d      	cmp	r5, r3
 8016204:	d11b      	bne.n	801623e <_vfiprintf_r+0x56>
 8016206:	6875      	ldr	r5, [r6, #4]
 8016208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801620a:	07d9      	lsls	r1, r3, #31
 801620c:	d405      	bmi.n	801621a <_vfiprintf_r+0x32>
 801620e:	89ab      	ldrh	r3, [r5, #12]
 8016210:	059a      	lsls	r2, r3, #22
 8016212:	d402      	bmi.n	801621a <_vfiprintf_r+0x32>
 8016214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016216:	f7fd fc60 	bl	8013ada <__retarget_lock_acquire_recursive>
 801621a:	89ab      	ldrh	r3, [r5, #12]
 801621c:	071b      	lsls	r3, r3, #28
 801621e:	d501      	bpl.n	8016224 <_vfiprintf_r+0x3c>
 8016220:	692b      	ldr	r3, [r5, #16]
 8016222:	b9eb      	cbnz	r3, 8016260 <_vfiprintf_r+0x78>
 8016224:	4629      	mov	r1, r5
 8016226:	4630      	mov	r0, r6
 8016228:	f000 f96e 	bl	8016508 <__swsetup_r>
 801622c:	b1c0      	cbz	r0, 8016260 <_vfiprintf_r+0x78>
 801622e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016230:	07dc      	lsls	r4, r3, #31
 8016232:	d50e      	bpl.n	8016252 <_vfiprintf_r+0x6a>
 8016234:	f04f 30ff 	mov.w	r0, #4294967295
 8016238:	b01d      	add	sp, #116	; 0x74
 801623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623e:	4b7b      	ldr	r3, [pc, #492]	; (801642c <_vfiprintf_r+0x244>)
 8016240:	429d      	cmp	r5, r3
 8016242:	d101      	bne.n	8016248 <_vfiprintf_r+0x60>
 8016244:	68b5      	ldr	r5, [r6, #8]
 8016246:	e7df      	b.n	8016208 <_vfiprintf_r+0x20>
 8016248:	4b79      	ldr	r3, [pc, #484]	; (8016430 <_vfiprintf_r+0x248>)
 801624a:	429d      	cmp	r5, r3
 801624c:	bf08      	it	eq
 801624e:	68f5      	ldreq	r5, [r6, #12]
 8016250:	e7da      	b.n	8016208 <_vfiprintf_r+0x20>
 8016252:	89ab      	ldrh	r3, [r5, #12]
 8016254:	0598      	lsls	r0, r3, #22
 8016256:	d4ed      	bmi.n	8016234 <_vfiprintf_r+0x4c>
 8016258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801625a:	f7fd fc3f 	bl	8013adc <__retarget_lock_release_recursive>
 801625e:	e7e9      	b.n	8016234 <_vfiprintf_r+0x4c>
 8016260:	2300      	movs	r3, #0
 8016262:	9309      	str	r3, [sp, #36]	; 0x24
 8016264:	2320      	movs	r3, #32
 8016266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801626a:	f8cd 800c 	str.w	r8, [sp, #12]
 801626e:	2330      	movs	r3, #48	; 0x30
 8016270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016434 <_vfiprintf_r+0x24c>
 8016274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016278:	f04f 0901 	mov.w	r9, #1
 801627c:	4623      	mov	r3, r4
 801627e:	469a      	mov	sl, r3
 8016280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016284:	b10a      	cbz	r2, 801628a <_vfiprintf_r+0xa2>
 8016286:	2a25      	cmp	r2, #37	; 0x25
 8016288:	d1f9      	bne.n	801627e <_vfiprintf_r+0x96>
 801628a:	ebba 0b04 	subs.w	fp, sl, r4
 801628e:	d00b      	beq.n	80162a8 <_vfiprintf_r+0xc0>
 8016290:	465b      	mov	r3, fp
 8016292:	4622      	mov	r2, r4
 8016294:	4629      	mov	r1, r5
 8016296:	4630      	mov	r0, r6
 8016298:	f7ff ff94 	bl	80161c4 <__sfputs_r>
 801629c:	3001      	adds	r0, #1
 801629e:	f000 80aa 	beq.w	80163f6 <_vfiprintf_r+0x20e>
 80162a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162a4:	445a      	add	r2, fp
 80162a6:	9209      	str	r2, [sp, #36]	; 0x24
 80162a8:	f89a 3000 	ldrb.w	r3, [sl]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	f000 80a2 	beq.w	80163f6 <_vfiprintf_r+0x20e>
 80162b2:	2300      	movs	r3, #0
 80162b4:	f04f 32ff 	mov.w	r2, #4294967295
 80162b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162bc:	f10a 0a01 	add.w	sl, sl, #1
 80162c0:	9304      	str	r3, [sp, #16]
 80162c2:	9307      	str	r3, [sp, #28]
 80162c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162c8:	931a      	str	r3, [sp, #104]	; 0x68
 80162ca:	4654      	mov	r4, sl
 80162cc:	2205      	movs	r2, #5
 80162ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162d2:	4858      	ldr	r0, [pc, #352]	; (8016434 <_vfiprintf_r+0x24c>)
 80162d4:	f7e9 ff9c 	bl	8000210 <memchr>
 80162d8:	9a04      	ldr	r2, [sp, #16]
 80162da:	b9d8      	cbnz	r0, 8016314 <_vfiprintf_r+0x12c>
 80162dc:	06d1      	lsls	r1, r2, #27
 80162de:	bf44      	itt	mi
 80162e0:	2320      	movmi	r3, #32
 80162e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162e6:	0713      	lsls	r3, r2, #28
 80162e8:	bf44      	itt	mi
 80162ea:	232b      	movmi	r3, #43	; 0x2b
 80162ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162f0:	f89a 3000 	ldrb.w	r3, [sl]
 80162f4:	2b2a      	cmp	r3, #42	; 0x2a
 80162f6:	d015      	beq.n	8016324 <_vfiprintf_r+0x13c>
 80162f8:	9a07      	ldr	r2, [sp, #28]
 80162fa:	4654      	mov	r4, sl
 80162fc:	2000      	movs	r0, #0
 80162fe:	f04f 0c0a 	mov.w	ip, #10
 8016302:	4621      	mov	r1, r4
 8016304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016308:	3b30      	subs	r3, #48	; 0x30
 801630a:	2b09      	cmp	r3, #9
 801630c:	d94e      	bls.n	80163ac <_vfiprintf_r+0x1c4>
 801630e:	b1b0      	cbz	r0, 801633e <_vfiprintf_r+0x156>
 8016310:	9207      	str	r2, [sp, #28]
 8016312:	e014      	b.n	801633e <_vfiprintf_r+0x156>
 8016314:	eba0 0308 	sub.w	r3, r0, r8
 8016318:	fa09 f303 	lsl.w	r3, r9, r3
 801631c:	4313      	orrs	r3, r2
 801631e:	9304      	str	r3, [sp, #16]
 8016320:	46a2      	mov	sl, r4
 8016322:	e7d2      	b.n	80162ca <_vfiprintf_r+0xe2>
 8016324:	9b03      	ldr	r3, [sp, #12]
 8016326:	1d19      	adds	r1, r3, #4
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	9103      	str	r1, [sp, #12]
 801632c:	2b00      	cmp	r3, #0
 801632e:	bfbb      	ittet	lt
 8016330:	425b      	neglt	r3, r3
 8016332:	f042 0202 	orrlt.w	r2, r2, #2
 8016336:	9307      	strge	r3, [sp, #28]
 8016338:	9307      	strlt	r3, [sp, #28]
 801633a:	bfb8      	it	lt
 801633c:	9204      	strlt	r2, [sp, #16]
 801633e:	7823      	ldrb	r3, [r4, #0]
 8016340:	2b2e      	cmp	r3, #46	; 0x2e
 8016342:	d10c      	bne.n	801635e <_vfiprintf_r+0x176>
 8016344:	7863      	ldrb	r3, [r4, #1]
 8016346:	2b2a      	cmp	r3, #42	; 0x2a
 8016348:	d135      	bne.n	80163b6 <_vfiprintf_r+0x1ce>
 801634a:	9b03      	ldr	r3, [sp, #12]
 801634c:	1d1a      	adds	r2, r3, #4
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	9203      	str	r2, [sp, #12]
 8016352:	2b00      	cmp	r3, #0
 8016354:	bfb8      	it	lt
 8016356:	f04f 33ff 	movlt.w	r3, #4294967295
 801635a:	3402      	adds	r4, #2
 801635c:	9305      	str	r3, [sp, #20]
 801635e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016444 <_vfiprintf_r+0x25c>
 8016362:	7821      	ldrb	r1, [r4, #0]
 8016364:	2203      	movs	r2, #3
 8016366:	4650      	mov	r0, sl
 8016368:	f7e9 ff52 	bl	8000210 <memchr>
 801636c:	b140      	cbz	r0, 8016380 <_vfiprintf_r+0x198>
 801636e:	2340      	movs	r3, #64	; 0x40
 8016370:	eba0 000a 	sub.w	r0, r0, sl
 8016374:	fa03 f000 	lsl.w	r0, r3, r0
 8016378:	9b04      	ldr	r3, [sp, #16]
 801637a:	4303      	orrs	r3, r0
 801637c:	3401      	adds	r4, #1
 801637e:	9304      	str	r3, [sp, #16]
 8016380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016384:	482c      	ldr	r0, [pc, #176]	; (8016438 <_vfiprintf_r+0x250>)
 8016386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801638a:	2206      	movs	r2, #6
 801638c:	f7e9 ff40 	bl	8000210 <memchr>
 8016390:	2800      	cmp	r0, #0
 8016392:	d03f      	beq.n	8016414 <_vfiprintf_r+0x22c>
 8016394:	4b29      	ldr	r3, [pc, #164]	; (801643c <_vfiprintf_r+0x254>)
 8016396:	bb1b      	cbnz	r3, 80163e0 <_vfiprintf_r+0x1f8>
 8016398:	9b03      	ldr	r3, [sp, #12]
 801639a:	3307      	adds	r3, #7
 801639c:	f023 0307 	bic.w	r3, r3, #7
 80163a0:	3308      	adds	r3, #8
 80163a2:	9303      	str	r3, [sp, #12]
 80163a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a6:	443b      	add	r3, r7
 80163a8:	9309      	str	r3, [sp, #36]	; 0x24
 80163aa:	e767      	b.n	801627c <_vfiprintf_r+0x94>
 80163ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80163b0:	460c      	mov	r4, r1
 80163b2:	2001      	movs	r0, #1
 80163b4:	e7a5      	b.n	8016302 <_vfiprintf_r+0x11a>
 80163b6:	2300      	movs	r3, #0
 80163b8:	3401      	adds	r4, #1
 80163ba:	9305      	str	r3, [sp, #20]
 80163bc:	4619      	mov	r1, r3
 80163be:	f04f 0c0a 	mov.w	ip, #10
 80163c2:	4620      	mov	r0, r4
 80163c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163c8:	3a30      	subs	r2, #48	; 0x30
 80163ca:	2a09      	cmp	r2, #9
 80163cc:	d903      	bls.n	80163d6 <_vfiprintf_r+0x1ee>
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d0c5      	beq.n	801635e <_vfiprintf_r+0x176>
 80163d2:	9105      	str	r1, [sp, #20]
 80163d4:	e7c3      	b.n	801635e <_vfiprintf_r+0x176>
 80163d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80163da:	4604      	mov	r4, r0
 80163dc:	2301      	movs	r3, #1
 80163de:	e7f0      	b.n	80163c2 <_vfiprintf_r+0x1da>
 80163e0:	ab03      	add	r3, sp, #12
 80163e2:	9300      	str	r3, [sp, #0]
 80163e4:	462a      	mov	r2, r5
 80163e6:	4b16      	ldr	r3, [pc, #88]	; (8016440 <_vfiprintf_r+0x258>)
 80163e8:	a904      	add	r1, sp, #16
 80163ea:	4630      	mov	r0, r6
 80163ec:	f7fd fcdc 	bl	8013da8 <_printf_float>
 80163f0:	4607      	mov	r7, r0
 80163f2:	1c78      	adds	r0, r7, #1
 80163f4:	d1d6      	bne.n	80163a4 <_vfiprintf_r+0x1bc>
 80163f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163f8:	07d9      	lsls	r1, r3, #31
 80163fa:	d405      	bmi.n	8016408 <_vfiprintf_r+0x220>
 80163fc:	89ab      	ldrh	r3, [r5, #12]
 80163fe:	059a      	lsls	r2, r3, #22
 8016400:	d402      	bmi.n	8016408 <_vfiprintf_r+0x220>
 8016402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016404:	f7fd fb6a 	bl	8013adc <__retarget_lock_release_recursive>
 8016408:	89ab      	ldrh	r3, [r5, #12]
 801640a:	065b      	lsls	r3, r3, #25
 801640c:	f53f af12 	bmi.w	8016234 <_vfiprintf_r+0x4c>
 8016410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016412:	e711      	b.n	8016238 <_vfiprintf_r+0x50>
 8016414:	ab03      	add	r3, sp, #12
 8016416:	9300      	str	r3, [sp, #0]
 8016418:	462a      	mov	r2, r5
 801641a:	4b09      	ldr	r3, [pc, #36]	; (8016440 <_vfiprintf_r+0x258>)
 801641c:	a904      	add	r1, sp, #16
 801641e:	4630      	mov	r0, r6
 8016420:	f7fd ff66 	bl	80142f0 <_printf_i>
 8016424:	e7e4      	b.n	80163f0 <_vfiprintf_r+0x208>
 8016426:	bf00      	nop
 8016428:	08016df8 	.word	0x08016df8
 801642c:	08016e18 	.word	0x08016e18
 8016430:	08016dd8 	.word	0x08016dd8
 8016434:	0801705c 	.word	0x0801705c
 8016438:	08017066 	.word	0x08017066
 801643c:	08013da9 	.word	0x08013da9
 8016440:	080161c5 	.word	0x080161c5
 8016444:	08017062 	.word	0x08017062

08016448 <__swbuf_r>:
 8016448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801644a:	460e      	mov	r6, r1
 801644c:	4614      	mov	r4, r2
 801644e:	4605      	mov	r5, r0
 8016450:	b118      	cbz	r0, 801645a <__swbuf_r+0x12>
 8016452:	6983      	ldr	r3, [r0, #24]
 8016454:	b90b      	cbnz	r3, 801645a <__swbuf_r+0x12>
 8016456:	f7fd fa7d 	bl	8013954 <__sinit>
 801645a:	4b21      	ldr	r3, [pc, #132]	; (80164e0 <__swbuf_r+0x98>)
 801645c:	429c      	cmp	r4, r3
 801645e:	d12b      	bne.n	80164b8 <__swbuf_r+0x70>
 8016460:	686c      	ldr	r4, [r5, #4]
 8016462:	69a3      	ldr	r3, [r4, #24]
 8016464:	60a3      	str	r3, [r4, #8]
 8016466:	89a3      	ldrh	r3, [r4, #12]
 8016468:	071a      	lsls	r2, r3, #28
 801646a:	d52f      	bpl.n	80164cc <__swbuf_r+0x84>
 801646c:	6923      	ldr	r3, [r4, #16]
 801646e:	b36b      	cbz	r3, 80164cc <__swbuf_r+0x84>
 8016470:	6923      	ldr	r3, [r4, #16]
 8016472:	6820      	ldr	r0, [r4, #0]
 8016474:	1ac0      	subs	r0, r0, r3
 8016476:	6963      	ldr	r3, [r4, #20]
 8016478:	b2f6      	uxtb	r6, r6
 801647a:	4283      	cmp	r3, r0
 801647c:	4637      	mov	r7, r6
 801647e:	dc04      	bgt.n	801648a <__swbuf_r+0x42>
 8016480:	4621      	mov	r1, r4
 8016482:	4628      	mov	r0, r5
 8016484:	f7ff f85c 	bl	8015540 <_fflush_r>
 8016488:	bb30      	cbnz	r0, 80164d8 <__swbuf_r+0x90>
 801648a:	68a3      	ldr	r3, [r4, #8]
 801648c:	3b01      	subs	r3, #1
 801648e:	60a3      	str	r3, [r4, #8]
 8016490:	6823      	ldr	r3, [r4, #0]
 8016492:	1c5a      	adds	r2, r3, #1
 8016494:	6022      	str	r2, [r4, #0]
 8016496:	701e      	strb	r6, [r3, #0]
 8016498:	6963      	ldr	r3, [r4, #20]
 801649a:	3001      	adds	r0, #1
 801649c:	4283      	cmp	r3, r0
 801649e:	d004      	beq.n	80164aa <__swbuf_r+0x62>
 80164a0:	89a3      	ldrh	r3, [r4, #12]
 80164a2:	07db      	lsls	r3, r3, #31
 80164a4:	d506      	bpl.n	80164b4 <__swbuf_r+0x6c>
 80164a6:	2e0a      	cmp	r6, #10
 80164a8:	d104      	bne.n	80164b4 <__swbuf_r+0x6c>
 80164aa:	4621      	mov	r1, r4
 80164ac:	4628      	mov	r0, r5
 80164ae:	f7ff f847 	bl	8015540 <_fflush_r>
 80164b2:	b988      	cbnz	r0, 80164d8 <__swbuf_r+0x90>
 80164b4:	4638      	mov	r0, r7
 80164b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164b8:	4b0a      	ldr	r3, [pc, #40]	; (80164e4 <__swbuf_r+0x9c>)
 80164ba:	429c      	cmp	r4, r3
 80164bc:	d101      	bne.n	80164c2 <__swbuf_r+0x7a>
 80164be:	68ac      	ldr	r4, [r5, #8]
 80164c0:	e7cf      	b.n	8016462 <__swbuf_r+0x1a>
 80164c2:	4b09      	ldr	r3, [pc, #36]	; (80164e8 <__swbuf_r+0xa0>)
 80164c4:	429c      	cmp	r4, r3
 80164c6:	bf08      	it	eq
 80164c8:	68ec      	ldreq	r4, [r5, #12]
 80164ca:	e7ca      	b.n	8016462 <__swbuf_r+0x1a>
 80164cc:	4621      	mov	r1, r4
 80164ce:	4628      	mov	r0, r5
 80164d0:	f000 f81a 	bl	8016508 <__swsetup_r>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	d0cb      	beq.n	8016470 <__swbuf_r+0x28>
 80164d8:	f04f 37ff 	mov.w	r7, #4294967295
 80164dc:	e7ea      	b.n	80164b4 <__swbuf_r+0x6c>
 80164de:	bf00      	nop
 80164e0:	08016df8 	.word	0x08016df8
 80164e4:	08016e18 	.word	0x08016e18
 80164e8:	08016dd8 	.word	0x08016dd8

080164ec <__ascii_wctomb>:
 80164ec:	b149      	cbz	r1, 8016502 <__ascii_wctomb+0x16>
 80164ee:	2aff      	cmp	r2, #255	; 0xff
 80164f0:	bf85      	ittet	hi
 80164f2:	238a      	movhi	r3, #138	; 0x8a
 80164f4:	6003      	strhi	r3, [r0, #0]
 80164f6:	700a      	strbls	r2, [r1, #0]
 80164f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80164fc:	bf98      	it	ls
 80164fe:	2001      	movls	r0, #1
 8016500:	4770      	bx	lr
 8016502:	4608      	mov	r0, r1
 8016504:	4770      	bx	lr
	...

08016508 <__swsetup_r>:
 8016508:	4b32      	ldr	r3, [pc, #200]	; (80165d4 <__swsetup_r+0xcc>)
 801650a:	b570      	push	{r4, r5, r6, lr}
 801650c:	681d      	ldr	r5, [r3, #0]
 801650e:	4606      	mov	r6, r0
 8016510:	460c      	mov	r4, r1
 8016512:	b125      	cbz	r5, 801651e <__swsetup_r+0x16>
 8016514:	69ab      	ldr	r3, [r5, #24]
 8016516:	b913      	cbnz	r3, 801651e <__swsetup_r+0x16>
 8016518:	4628      	mov	r0, r5
 801651a:	f7fd fa1b 	bl	8013954 <__sinit>
 801651e:	4b2e      	ldr	r3, [pc, #184]	; (80165d8 <__swsetup_r+0xd0>)
 8016520:	429c      	cmp	r4, r3
 8016522:	d10f      	bne.n	8016544 <__swsetup_r+0x3c>
 8016524:	686c      	ldr	r4, [r5, #4]
 8016526:	89a3      	ldrh	r3, [r4, #12]
 8016528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801652c:	0719      	lsls	r1, r3, #28
 801652e:	d42c      	bmi.n	801658a <__swsetup_r+0x82>
 8016530:	06dd      	lsls	r5, r3, #27
 8016532:	d411      	bmi.n	8016558 <__swsetup_r+0x50>
 8016534:	2309      	movs	r3, #9
 8016536:	6033      	str	r3, [r6, #0]
 8016538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801653c:	81a3      	strh	r3, [r4, #12]
 801653e:	f04f 30ff 	mov.w	r0, #4294967295
 8016542:	e03e      	b.n	80165c2 <__swsetup_r+0xba>
 8016544:	4b25      	ldr	r3, [pc, #148]	; (80165dc <__swsetup_r+0xd4>)
 8016546:	429c      	cmp	r4, r3
 8016548:	d101      	bne.n	801654e <__swsetup_r+0x46>
 801654a:	68ac      	ldr	r4, [r5, #8]
 801654c:	e7eb      	b.n	8016526 <__swsetup_r+0x1e>
 801654e:	4b24      	ldr	r3, [pc, #144]	; (80165e0 <__swsetup_r+0xd8>)
 8016550:	429c      	cmp	r4, r3
 8016552:	bf08      	it	eq
 8016554:	68ec      	ldreq	r4, [r5, #12]
 8016556:	e7e6      	b.n	8016526 <__swsetup_r+0x1e>
 8016558:	0758      	lsls	r0, r3, #29
 801655a:	d512      	bpl.n	8016582 <__swsetup_r+0x7a>
 801655c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801655e:	b141      	cbz	r1, 8016572 <__swsetup_r+0x6a>
 8016560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016564:	4299      	cmp	r1, r3
 8016566:	d002      	beq.n	801656e <__swsetup_r+0x66>
 8016568:	4630      	mov	r0, r6
 801656a:	f7ff fbe9 	bl	8015d40 <_free_r>
 801656e:	2300      	movs	r3, #0
 8016570:	6363      	str	r3, [r4, #52]	; 0x34
 8016572:	89a3      	ldrh	r3, [r4, #12]
 8016574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016578:	81a3      	strh	r3, [r4, #12]
 801657a:	2300      	movs	r3, #0
 801657c:	6063      	str	r3, [r4, #4]
 801657e:	6923      	ldr	r3, [r4, #16]
 8016580:	6023      	str	r3, [r4, #0]
 8016582:	89a3      	ldrh	r3, [r4, #12]
 8016584:	f043 0308 	orr.w	r3, r3, #8
 8016588:	81a3      	strh	r3, [r4, #12]
 801658a:	6923      	ldr	r3, [r4, #16]
 801658c:	b94b      	cbnz	r3, 80165a2 <__swsetup_r+0x9a>
 801658e:	89a3      	ldrh	r3, [r4, #12]
 8016590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016598:	d003      	beq.n	80165a2 <__swsetup_r+0x9a>
 801659a:	4621      	mov	r1, r4
 801659c:	4630      	mov	r0, r6
 801659e:	f000 f84d 	bl	801663c <__smakebuf_r>
 80165a2:	89a0      	ldrh	r0, [r4, #12]
 80165a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165a8:	f010 0301 	ands.w	r3, r0, #1
 80165ac:	d00a      	beq.n	80165c4 <__swsetup_r+0xbc>
 80165ae:	2300      	movs	r3, #0
 80165b0:	60a3      	str	r3, [r4, #8]
 80165b2:	6963      	ldr	r3, [r4, #20]
 80165b4:	425b      	negs	r3, r3
 80165b6:	61a3      	str	r3, [r4, #24]
 80165b8:	6923      	ldr	r3, [r4, #16]
 80165ba:	b943      	cbnz	r3, 80165ce <__swsetup_r+0xc6>
 80165bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80165c0:	d1ba      	bne.n	8016538 <__swsetup_r+0x30>
 80165c2:	bd70      	pop	{r4, r5, r6, pc}
 80165c4:	0781      	lsls	r1, r0, #30
 80165c6:	bf58      	it	pl
 80165c8:	6963      	ldrpl	r3, [r4, #20]
 80165ca:	60a3      	str	r3, [r4, #8]
 80165cc:	e7f4      	b.n	80165b8 <__swsetup_r+0xb0>
 80165ce:	2000      	movs	r0, #0
 80165d0:	e7f7      	b.n	80165c2 <__swsetup_r+0xba>
 80165d2:	bf00      	nop
 80165d4:	2000039c 	.word	0x2000039c
 80165d8:	08016df8 	.word	0x08016df8
 80165dc:	08016e18 	.word	0x08016e18
 80165e0:	08016dd8 	.word	0x08016dd8

080165e4 <abort>:
 80165e4:	b508      	push	{r3, lr}
 80165e6:	2006      	movs	r0, #6
 80165e8:	f000 f898 	bl	801671c <raise>
 80165ec:	2001      	movs	r0, #1
 80165ee:	f7ee fc87 	bl	8004f00 <_exit>

080165f2 <__swhatbuf_r>:
 80165f2:	b570      	push	{r4, r5, r6, lr}
 80165f4:	460e      	mov	r6, r1
 80165f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165fa:	2900      	cmp	r1, #0
 80165fc:	b096      	sub	sp, #88	; 0x58
 80165fe:	4614      	mov	r4, r2
 8016600:	461d      	mov	r5, r3
 8016602:	da08      	bge.n	8016616 <__swhatbuf_r+0x24>
 8016604:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016608:	2200      	movs	r2, #0
 801660a:	602a      	str	r2, [r5, #0]
 801660c:	061a      	lsls	r2, r3, #24
 801660e:	d410      	bmi.n	8016632 <__swhatbuf_r+0x40>
 8016610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016614:	e00e      	b.n	8016634 <__swhatbuf_r+0x42>
 8016616:	466a      	mov	r2, sp
 8016618:	f000 f89c 	bl	8016754 <_fstat_r>
 801661c:	2800      	cmp	r0, #0
 801661e:	dbf1      	blt.n	8016604 <__swhatbuf_r+0x12>
 8016620:	9a01      	ldr	r2, [sp, #4]
 8016622:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016626:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801662a:	425a      	negs	r2, r3
 801662c:	415a      	adcs	r2, r3
 801662e:	602a      	str	r2, [r5, #0]
 8016630:	e7ee      	b.n	8016610 <__swhatbuf_r+0x1e>
 8016632:	2340      	movs	r3, #64	; 0x40
 8016634:	2000      	movs	r0, #0
 8016636:	6023      	str	r3, [r4, #0]
 8016638:	b016      	add	sp, #88	; 0x58
 801663a:	bd70      	pop	{r4, r5, r6, pc}

0801663c <__smakebuf_r>:
 801663c:	898b      	ldrh	r3, [r1, #12]
 801663e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016640:	079d      	lsls	r5, r3, #30
 8016642:	4606      	mov	r6, r0
 8016644:	460c      	mov	r4, r1
 8016646:	d507      	bpl.n	8016658 <__smakebuf_r+0x1c>
 8016648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801664c:	6023      	str	r3, [r4, #0]
 801664e:	6123      	str	r3, [r4, #16]
 8016650:	2301      	movs	r3, #1
 8016652:	6163      	str	r3, [r4, #20]
 8016654:	b002      	add	sp, #8
 8016656:	bd70      	pop	{r4, r5, r6, pc}
 8016658:	ab01      	add	r3, sp, #4
 801665a:	466a      	mov	r2, sp
 801665c:	f7ff ffc9 	bl	80165f2 <__swhatbuf_r>
 8016660:	9900      	ldr	r1, [sp, #0]
 8016662:	4605      	mov	r5, r0
 8016664:	4630      	mov	r0, r6
 8016666:	f7fd fa8b 	bl	8013b80 <_malloc_r>
 801666a:	b948      	cbnz	r0, 8016680 <__smakebuf_r+0x44>
 801666c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016670:	059a      	lsls	r2, r3, #22
 8016672:	d4ef      	bmi.n	8016654 <__smakebuf_r+0x18>
 8016674:	f023 0303 	bic.w	r3, r3, #3
 8016678:	f043 0302 	orr.w	r3, r3, #2
 801667c:	81a3      	strh	r3, [r4, #12]
 801667e:	e7e3      	b.n	8016648 <__smakebuf_r+0xc>
 8016680:	4b0d      	ldr	r3, [pc, #52]	; (80166b8 <__smakebuf_r+0x7c>)
 8016682:	62b3      	str	r3, [r6, #40]	; 0x28
 8016684:	89a3      	ldrh	r3, [r4, #12]
 8016686:	6020      	str	r0, [r4, #0]
 8016688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801668c:	81a3      	strh	r3, [r4, #12]
 801668e:	9b00      	ldr	r3, [sp, #0]
 8016690:	6163      	str	r3, [r4, #20]
 8016692:	9b01      	ldr	r3, [sp, #4]
 8016694:	6120      	str	r0, [r4, #16]
 8016696:	b15b      	cbz	r3, 80166b0 <__smakebuf_r+0x74>
 8016698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801669c:	4630      	mov	r0, r6
 801669e:	f000 f86b 	bl	8016778 <_isatty_r>
 80166a2:	b128      	cbz	r0, 80166b0 <__smakebuf_r+0x74>
 80166a4:	89a3      	ldrh	r3, [r4, #12]
 80166a6:	f023 0303 	bic.w	r3, r3, #3
 80166aa:	f043 0301 	orr.w	r3, r3, #1
 80166ae:	81a3      	strh	r3, [r4, #12]
 80166b0:	89a0      	ldrh	r0, [r4, #12]
 80166b2:	4305      	orrs	r5, r0
 80166b4:	81a5      	strh	r5, [r4, #12]
 80166b6:	e7cd      	b.n	8016654 <__smakebuf_r+0x18>
 80166b8:	080138ed 	.word	0x080138ed

080166bc <_malloc_usable_size_r>:
 80166bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166c0:	1f18      	subs	r0, r3, #4
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	bfbc      	itt	lt
 80166c6:	580b      	ldrlt	r3, [r1, r0]
 80166c8:	18c0      	addlt	r0, r0, r3
 80166ca:	4770      	bx	lr

080166cc <_raise_r>:
 80166cc:	291f      	cmp	r1, #31
 80166ce:	b538      	push	{r3, r4, r5, lr}
 80166d0:	4604      	mov	r4, r0
 80166d2:	460d      	mov	r5, r1
 80166d4:	d904      	bls.n	80166e0 <_raise_r+0x14>
 80166d6:	2316      	movs	r3, #22
 80166d8:	6003      	str	r3, [r0, #0]
 80166da:	f04f 30ff 	mov.w	r0, #4294967295
 80166de:	bd38      	pop	{r3, r4, r5, pc}
 80166e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80166e2:	b112      	cbz	r2, 80166ea <_raise_r+0x1e>
 80166e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166e8:	b94b      	cbnz	r3, 80166fe <_raise_r+0x32>
 80166ea:	4620      	mov	r0, r4
 80166ec:	f000 f830 	bl	8016750 <_getpid_r>
 80166f0:	462a      	mov	r2, r5
 80166f2:	4601      	mov	r1, r0
 80166f4:	4620      	mov	r0, r4
 80166f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166fa:	f000 b817 	b.w	801672c <_kill_r>
 80166fe:	2b01      	cmp	r3, #1
 8016700:	d00a      	beq.n	8016718 <_raise_r+0x4c>
 8016702:	1c59      	adds	r1, r3, #1
 8016704:	d103      	bne.n	801670e <_raise_r+0x42>
 8016706:	2316      	movs	r3, #22
 8016708:	6003      	str	r3, [r0, #0]
 801670a:	2001      	movs	r0, #1
 801670c:	e7e7      	b.n	80166de <_raise_r+0x12>
 801670e:	2400      	movs	r4, #0
 8016710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016714:	4628      	mov	r0, r5
 8016716:	4798      	blx	r3
 8016718:	2000      	movs	r0, #0
 801671a:	e7e0      	b.n	80166de <_raise_r+0x12>

0801671c <raise>:
 801671c:	4b02      	ldr	r3, [pc, #8]	; (8016728 <raise+0xc>)
 801671e:	4601      	mov	r1, r0
 8016720:	6818      	ldr	r0, [r3, #0]
 8016722:	f7ff bfd3 	b.w	80166cc <_raise_r>
 8016726:	bf00      	nop
 8016728:	2000039c 	.word	0x2000039c

0801672c <_kill_r>:
 801672c:	b538      	push	{r3, r4, r5, lr}
 801672e:	4d07      	ldr	r5, [pc, #28]	; (801674c <_kill_r+0x20>)
 8016730:	2300      	movs	r3, #0
 8016732:	4604      	mov	r4, r0
 8016734:	4608      	mov	r0, r1
 8016736:	4611      	mov	r1, r2
 8016738:	602b      	str	r3, [r5, #0]
 801673a:	f7ee fbd1 	bl	8004ee0 <_kill>
 801673e:	1c43      	adds	r3, r0, #1
 8016740:	d102      	bne.n	8016748 <_kill_r+0x1c>
 8016742:	682b      	ldr	r3, [r5, #0]
 8016744:	b103      	cbz	r3, 8016748 <_kill_r+0x1c>
 8016746:	6023      	str	r3, [r4, #0]
 8016748:	bd38      	pop	{r3, r4, r5, pc}
 801674a:	bf00      	nop
 801674c:	20009858 	.word	0x20009858

08016750 <_getpid_r>:
 8016750:	f7ee bbbe 	b.w	8004ed0 <_getpid>

08016754 <_fstat_r>:
 8016754:	b538      	push	{r3, r4, r5, lr}
 8016756:	4d07      	ldr	r5, [pc, #28]	; (8016774 <_fstat_r+0x20>)
 8016758:	2300      	movs	r3, #0
 801675a:	4604      	mov	r4, r0
 801675c:	4608      	mov	r0, r1
 801675e:	4611      	mov	r1, r2
 8016760:	602b      	str	r3, [r5, #0]
 8016762:	f7ee fc1c 	bl	8004f9e <_fstat>
 8016766:	1c43      	adds	r3, r0, #1
 8016768:	d102      	bne.n	8016770 <_fstat_r+0x1c>
 801676a:	682b      	ldr	r3, [r5, #0]
 801676c:	b103      	cbz	r3, 8016770 <_fstat_r+0x1c>
 801676e:	6023      	str	r3, [r4, #0]
 8016770:	bd38      	pop	{r3, r4, r5, pc}
 8016772:	bf00      	nop
 8016774:	20009858 	.word	0x20009858

08016778 <_isatty_r>:
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	4d06      	ldr	r5, [pc, #24]	; (8016794 <_isatty_r+0x1c>)
 801677c:	2300      	movs	r3, #0
 801677e:	4604      	mov	r4, r0
 8016780:	4608      	mov	r0, r1
 8016782:	602b      	str	r3, [r5, #0]
 8016784:	f7ee fc1b 	bl	8004fbe <_isatty>
 8016788:	1c43      	adds	r3, r0, #1
 801678a:	d102      	bne.n	8016792 <_isatty_r+0x1a>
 801678c:	682b      	ldr	r3, [r5, #0]
 801678e:	b103      	cbz	r3, 8016792 <_isatty_r+0x1a>
 8016790:	6023      	str	r3, [r4, #0]
 8016792:	bd38      	pop	{r3, r4, r5, pc}
 8016794:	20009858 	.word	0x20009858

08016798 <_init>:
 8016798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679a:	bf00      	nop
 801679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801679e:	bc08      	pop	{r3}
 80167a0:	469e      	mov	lr, r3
 80167a2:	4770      	bx	lr

080167a4 <_fini>:
 80167a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167a6:	bf00      	nop
 80167a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167aa:	bc08      	pop	{r3}
 80167ac:	469e      	mov	lr, r3
 80167ae:	4770      	bx	lr
