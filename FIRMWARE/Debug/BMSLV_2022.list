
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a1c  080167a0  080167a0  000267a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171bc  080171bc  00030588  2**0
                  CONTENTS
  4 .ARM          00000000  080171bc  080171bc  00030588  2**0
                  CONTENTS
  5 .preinit_array 00000000  080171bc  080171bc  00030588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080171bc  080171bc  000271bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080171cc  080171cc  000271cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000588  20000000  080171d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000931c  20000588  08017758  00030588  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200098a4  08017758  000398a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030588  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cc68  00000000  00000000  000305b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000088a7  00000000  00000000  0007d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b10  00000000  00000000  00085ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002818  00000000  00000000  000885d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9a1  00000000  00000000  0008adf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036109  00000000  00000000  000c6791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ee1c  00000000  00000000  000fc89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024b6b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8b0  00000000  00000000  0024b708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000588 	.word	0x20000588
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016788 	.word	0x08016788

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000058c 	.word	0x2000058c
 80001fc:	08016788 	.word	0x08016788

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <_Z20discharge_cells_taili>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int i){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(5 == i || 6 == i)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d002      	beq.n	8000bec <_Z20discharge_cells_taili+0x14>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b06      	cmp	r3, #6
 8000bea:	d102      	bne.n	8000bf2 <_Z20discharge_cells_taili+0x1a>
		return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf0:	e000      	b.n	8000bf4 <_Z20discharge_cells_taili+0x1c>
	else
		return i;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d826      	bhi.n	8000c60 <_Z18set_discharge_cellRhRi+0x60>
	{
		data.charging.cell_discharge[i] = true;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffcc 	bl	8000bd8 <_Z20discharge_cells_taili>
 8000c40:	4602      	mov	r2, r0
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000c4e:	f004 fa65 	bl	800511c <HAL_GetTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000c58:	3310      	adds	r3, #16
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c5c:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000146c 	.word	0x2000146c

08000c6c <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d827      	bhi.n	8000cd6 <_Z22set_discharge_cell_maxRhRiRb+0x6a>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000c88:	7c9b      	ldrb	r3, [r3, #18]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000ca4:	7c9b      	ldrb	r3, [r3, #18]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff91 	bl	8000bd8 <_Z20discharge_cells_taili>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000cc4:	f004 fa2a 	bl	800511c <HAL_GetTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cce:	3310      	adds	r3, #16
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cd2:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000146c 	.word	0x2000146c

08000ce4 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75bb      	strb	r3, [r7, #22]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	757b      	strb	r3, [r7, #21]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73bb      	strb	r3, [r7, #14]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d83c      	bhi.n	8000d86 <_Z15balance_controlv+0xa2>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000d0c:	4b9c      	ldr	r3, [pc, #624]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d0e:	8b9b      	ldrh	r3, [r3, #28]
 8000d10:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d807      	bhi.n	8000d28 <_Z15balance_controlv+0x44>
 8000d18:	4b99      	ldr	r3, [pc, #612]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d1a:	8b9b      	ldrh	r3, [r3, #28]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b98      	ldr	r3, [pc, #608]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d20:	8b5b      	ldrh	r3, [r3, #26]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b32      	cmp	r3, #50	; 0x32
 8000d26:	dd01      	ble.n	8000d2c <_Z15balance_controlv+0x48>
		{
			max_voltage_discharge_activation= true;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000d2c:	4b94      	ldr	r3, [pc, #592]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d2e:	8b9b      	ldrh	r3, [r3, #28]
 8000d30:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d901      	bls.n	8000d3c <_Z15balance_controlv+0x58>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000d3c:	4a90      	ldr	r2, [pc, #576]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d44:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d902      	bls.n	8000d52 <_Z15balance_controlv+0x6e>
		{
			charged_cells++;
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000d52:	4a8b      	ldr	r2, [pc, #556]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5a:	f24a 32c0 	movw	r2, #41920	; 0xa3c0
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d902      	bls.n	8000d68 <_Z15balance_controlv+0x84>
		{
			nearly_charged_cells++;
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	3301      	adds	r3, #1
 8000d66:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000d68:	4a85      	ldr	r2, [pc, #532]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d902      	bls.n	8000d7e <_Z15balance_controlv+0x9a>
		{
			cell_overcharged++;
 8000d78:	7d7b      	ldrb	r3, [r7, #21]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	3301      	adds	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	e7bf      	b.n	8000d06 <_Z15balance_controlv+0x22>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d926      	bls.n	8000dda <_Z15balance_controlv+0xf6>
 8000d8c:	4b7c      	ldr	r3, [pc, #496]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000d8e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000d92:	eef0 7ae7 	vabs.f32	s15, s15
 8000d96:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8000f84 <_Z15balance_controlv+0x2a0>
 8000d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d51a      	bpl.n	8000dda <_Z15balance_controlv+0xf6>
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d117      	bne.n	8000dda <_Z15balance_controlv+0xf6>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2104      	movs	r1, #4
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f007 fa97 	bl	80082e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	4872      	ldr	r0, [pc, #456]	; (8000f88 <_Z15balance_controlv+0x2a4>)
 8000dbe:	f007 fa91 	bl	80082e4 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000dc2:	4872      	ldr	r0, [pc, #456]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000dc4:	f003 fa2c 	bl	8004220 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000dc8:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000dd0:	4b6b      	ldr	r3, [pc, #428]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000dd8:	e043      	b.n	8000e62 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1 && data.charging.discharge_activation == 0)
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d919      	bls.n	8000e14 <_Z15balance_controlv+0x130>
 8000de0:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000de2:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d114      	bne.n	8000e14 <_Z15balance_controlv+0x130>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2104      	movs	r1, #4
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f007 fa77 	bl	80082e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	4862      	ldr	r0, [pc, #392]	; (8000f88 <_Z15balance_controlv+0x2a4>)
 8000dfe:	f007 fa71 	bl	80082e4 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e02:	4b5f      	ldr	r3, [pc, #380]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000e12:	e026      	b.n	8000e62 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch on
	else if(!data.charging.charger_plugged && nearly_charged_cells < 6 && cell_overcharged == 0 && data.charging.discharge_activation == 0)// && acuState == 0
 8000e14:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e16:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d01e      	beq.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d81b      	bhi.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e2a:	7d7b      	ldrb	r3, [r7, #21]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d118      	bne.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e30:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e32:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d113      	bne.n	8000e62 <_Z15balance_controlv+0x17e>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f007 fa4f 	bl	80082e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	484e      	ldr	r0, [pc, #312]	; (8000f88 <_Z15balance_controlv+0x2a4>)
 8000e4e:	f007 fa49 	bl	80082e4 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000e52:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 1;
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state && fabsf(data.current.value) > CHARGING_CUTOFF_CURRENT ) //charging on
 8000e62:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e64:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d150      	bne.n	8000f0e <_Z15balance_controlv+0x22a>
 8000e6c:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e6e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000e72:	eef0 7ae7 	vabs.f32	s15, s15
 8000e76:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000f84 <_Z15balance_controlv+0x2a0>
 8000e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd44      	ble.n	8000f0e <_Z15balance_controlv+0x22a>
	{
		if(false == data.charging.discharge_activation)
 8000e84:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000e86:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d172      	bne.n	8000f74 <_Z15balance_controlv+0x290>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	dc6d      	bgt.n	8000f74 <_Z15balance_controlv+0x290>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d109      	bne.n	8000eb2 <_Z15balance_controlv+0x1ce>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000e9e:	f107 020e 	add.w	r2, r7, #14
 8000ea2:	f107 0108 	add.w	r1, r7, #8
 8000ea6:	f107 030f 	add.w	r3, r7, #15
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fede 	bl	8000c6c <_Z22set_discharge_cell_maxRhRiRb>
 8000eb0:	e029      	b.n	8000f06 <_Z15balance_controlv+0x222>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eba:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d908      	bls.n	8000ed4 <_Z15balance_controlv+0x1f0>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ec2:	f107 0208 	add.w	r2, r7, #8
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe97 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000ed2:	e018      	b.n	8000f06 <_Z15balance_controlv+0x222>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000ee0:	8b5b      	ldrh	r3, [r3, #26]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b32      	cmp	r3, #50	; 0x32
 8000ee6:	dd08      	ble.n	8000efa <_Z15balance_controlv+0x216>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ee8:	f107 0208 	add.w	r2, r7, #8
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe84 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000ef8:	e005      	b.n	8000f06 <_Z15balance_controlv+0x222>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	e7c1      	b.n	8000e92 <_Z15balance_controlv+0x1ae>
		}
	}
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(not  data.charging.discharge_activation)
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000f10:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f14:	f083 0301 	eor.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d02b      	beq.n	8000f76 <_Z15balance_controlv+0x292>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	dc26      	bgt.n	8000f76 <_Z15balance_controlv+0x292>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <_Z15balance_controlv+0x25c>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000f2e:	f107 020d 	add.w	r2, r7, #13
 8000f32:	1d39      	adds	r1, r7, #4
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe97 	bl	8000c6c <_Z22set_discharge_cell_maxRhRiRb>
 8000f3e:	e015      	b.n	8000f6c <_Z15balance_controlv+0x288>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f48:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d907      	bls.n	8000f60 <_Z15balance_controlv+0x27c>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f50:	1d3a      	adds	r2, r7, #4
 8000f52:	f107 030f 	add.w	r3, r7, #15
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe51 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000f5e:	e005      	b.n	8000f6c <_Z15balance_controlv+0x288>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <_Z15balance_controlv+0x29c>)
 8000f64:	4413      	add	r3, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e7d6      	b.n	8000f22 <_Z15balance_controlv+0x23e>
		}
 8000f74:	bf00      	nop
			}
		}
	}
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000146c 	.word	0x2000146c
 8000f84:	3e99999a 	.word	0x3e99999a
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	20001640 	.word	0x20001640

08000f90 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <_Z31balance_activation_deactivationv+0xa4>)
 8000f98:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d117      	bne.n	8000fd0 <_Z31balance_activation_deactivationv+0x40>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	dc0f      	bgt.n	8000fca <_Z31balance_activation_deactivationv+0x3a>
		{
			if(true == data.charging.cell_discharge[i])
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <_Z31balance_activation_deactivationv+0xa4>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d103      	bne.n	8000fc2 <_Z31balance_activation_deactivationv+0x32>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 8000fba:	491f      	ldr	r1, [pc, #124]	; (8001038 <_Z31balance_activation_deactivationv+0xa8>)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 fdf7 	bl	8002bb0 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	e7ec      	b.n	8000fa4 <_Z31balance_activation_deactivationv+0x14>
			}
		}
		balance_deactivation_flag = true;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <_Z31balance_activation_deactivationv+0xac>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
	}
	if(data.charging.discharge_tick_end <= HAL_GetTick() && balance_deactivation_flag)
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <_Z31balance_activation_deactivationv+0xa4>)
 8000fd2:	f8d3 429c 	ldr.w	r4, [r3, #668]	; 0x29c
 8000fd6:	f004 f8a1 	bl	800511c <HAL_GetTick>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	429c      	cmp	r4, r3
 8000fde:	d805      	bhi.n	8000fec <_Z31balance_activation_deactivationv+0x5c>
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <_Z31balance_activation_deactivationv+0xac>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <_Z31balance_activation_deactivationv+0x5c>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <_Z31balance_activation_deactivationv+0x5e>
 8000fec:	2300      	movs	r3, #0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01b      	beq.n	800102a <_Z31balance_activation_deactivationv+0x9a>
	{
		balance_deactivation_flag = false;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <_Z31balance_activation_deactivationv+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
		data.charging.discharge_activation = 0;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <_Z31balance_activation_deactivationv+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b05      	cmp	r3, #5
 8001008:	dc0a      	bgt.n	8001020 <_Z31balance_activation_deactivationv+0x90>
		{
			data.charging.cell_discharge[i] = false;
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <_Z31balance_activation_deactivationv+0xa4>)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	e7f1      	b.n	8001004 <_Z31balance_activation_deactivationv+0x74>
		}
		LTC_turn_off_discharge();
 8001020:	f001 feb6 	bl	8002d90 <_Z22LTC_turn_off_dischargev>
		tick_counter = 0; // time to wait for proper voltage values
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <_Z31balance_activation_deactivationv+0xb0>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
	}
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	bf00      	nop
 8001034:	2000146c 	.word	0x2000146c
 8001038:	200016fc 	.word	0x200016fc
 800103c:	200005a4 	.word	0x200005a4
 8001040:	200005a8 	.word	0x200005a8

08001044 <_Z22start_balance_functionPv>:



void start_balance_function(void *argument){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 800104c:	2104      	movs	r1, #4
 800104e:	481a      	ldr	r0, [pc, #104]	; (80010b8 <_Z22start_balance_functionPv+0x74>)
 8001050:	f007 f930 	bl	80082b4 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <_Z22start_balance_functionPv+0x78>)
 8001062:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for(;;){
		osDelay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f00e fff0 	bl	801004c <osDelay>
		//balance test on cell 0
		//data.charging.cell_discharge[0]=true;
		//LTC_turn_on_discharge(0, data.charging.cell_discharge);
		tick_counter++;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <_Z22start_balance_functionPv+0x7c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <_Z22start_balance_functionPv+0x7c>)
 8001074:	6013      	str	r3, [r2, #0]
		if(tick_counter > BALANCE_TICKS_AFTER_BALANCE){
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <_Z22start_balance_functionPv+0x7c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b1e      	cmp	r3, #30
 800107c:	d9f3      	bls.n	8001066 <_Z22start_balance_functionPv+0x22>
			if(!data.charging.charger_plugged) //charger is plugged
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <_Z22start_balance_functionPv+0x78>)
 8001080:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <_Z22start_balance_functionPv+0x60>
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001094:	480b      	ldr	r0, [pc, #44]	; (80010c4 <_Z22start_balance_functionPv+0x80>)
 8001096:	f007 f925 	bl	80082e4 <HAL_GPIO_WritePin>

				balance_control();
 800109a:	f7ff fe23 	bl	8000ce4 <_Z15balance_controlv>
				balance_activation_deactivation();
 800109e:	f7ff ff77 	bl	8000f90 <_Z31balance_activation_deactivationv>
 80010a2:	e7e0      	b.n	8001066 <_Z22start_balance_functionPv+0x22>

			}
			else	//charger is unplugged
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <_Z22start_balance_functionPv+0x80>)
 80010ac:	f007 f91a 	bl	80082e4 <HAL_GPIO_WritePin>
				balance_activation_deactivation();
 80010b0:	f7ff ff6e 	bl	8000f90 <_Z31balance_activation_deactivationv>
		osDelay(100);
 80010b4:	e7d7      	b.n	8001066 <_Z22start_balance_functionPv+0x22>
 80010b6:	bf00      	nop
 80010b8:	48000400 	.word	0x48000400
 80010bc:	2000146c 	.word	0x2000146c
 80010c0:	200005a8 	.word	0x200005a8
 80010c4:	48000800 	.word	0x48000800

080010c8 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	2300      	movs	r3, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	601a      	str	r2, [r3, #0]
    {
    }
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    {
    }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	461a      	mov	r2, r3
 8001134:	2300      	movs	r3, #0
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	6053      	str	r3, [r2, #4]
 800113a:	6093      	str	r3, [r2, #8]
 800113c:	60d3      	str	r3, [r2, #12]
 800113e:	6113      	str	r3, [r2, #16]
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	331c      	adds	r3, #28
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	331c      	adds	r3, #28
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f006 f85f 	bl	800721a <HAL_CAN_GetRxMessage>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
    this->status =
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	791a      	ldrb	r2, [r3, #4]
 800117c:	795b      	ldrb	r3, [r3, #5]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	6938      	ldr	r0, [r7, #16]
 80011a8:	f000 fcee 	bl	8001b88 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 80011ac:	6178      	str	r0, [r7, #20]
 80011ae:	6938      	ldr	r0, [r7, #16]
 80011b0:	f000 fcf6 	bl	8001ba0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d01f      	beq.n	80011fe <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffd2 	bl	8001170 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00a      	beq.n	80011f6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	4610      	mov	r0, r2
 80011f0:	4798      	blx	r3
        return true;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e004      	b.n	8001200 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3304      	adds	r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e7db      	b.n	80011b6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 80011fe:	2300      	movs	r3, #0
  }
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff83 	bl	8001124 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800121e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001222:	2b00      	cmp	r3, #0
 8001224:	d105      	bne.n	8001232 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4619      	mov	r1, r3
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800122e:	f7ff ffb1 	bl	8001194 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	; 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 800124a:	230a      	movs	r3, #10
 800124c:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001266:	2301      	movs	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 800126a:	230a      	movs	r3, #10
 800126c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 800126e:	463b      	mov	r3, r7
 8001270:	4619      	mov	r1, r3
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <_Z8can_initv+0x50>)
 8001274:	f005 fdf3 	bl	8006e5e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001278:	2102      	movs	r1, #2
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <_Z8can_initv+0x50>)
 800127c:	f006 f8df 	bl	800743e <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <_Z8can_initv+0x50>)
 8001282:	f005 feb6 	bl	8006ff2 <HAL_CAN_Start>

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20001aa0 	.word	0x20001aa0

08001294 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	; 0x40
 8001298:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 8> errors_vector;
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fc99 	bl	8001bd4 <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>

	for(auto& error : error_conditions){
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <_Z11error_checkv+0xcc>)
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <_Z11error_checkv+0xcc>)
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <_Z11error_checkv+0xd0>)
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
 80012ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d041      	beq.n	800133a <_Z11error_checkv+0xa6>
 80012b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
		if(error.min <= error.value && error.value <= error.max){
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d825      	bhi.n	800131c <_Z11error_checkv+0x88>
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	d81a      	bhi.n	800131c <_Z11error_checkv+0x88>
			errors_vector.emplace_back(error.error);
 80012e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fc96 	bl	8001c1e <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	7d1a      	ldrb	r2, [r3, #20]
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <_Z11error_checkv+0xd4>)
 80012f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
			if(false == error.flag)
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d116      	bne.n	8001332 <_Z11error_checkv+0x9e>
			{
				error.timer = HAL_GetTick() + error.error_time;
 8001304:	f003 ff0a 	bl	800511c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	441a      	add	r2, r3
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	619a      	str	r2, [r3, #24]
				error.flag = true;
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	2201      	movs	r2, #1
 8001318:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 800131a:	e00a      	b.n	8001332 <_Z11error_checkv+0x9e>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 800131c:	f003 fefe 	bl	800511c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	441a      	add	r2, r3
 8001328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132a:	619a      	str	r2, [r3, #24]
			error.flag = false;
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	2200      	movs	r2, #0
 8001330:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001334:	3320      	adds	r3, #32
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001338:	e7b9      	b.n	80012ae <_Z11error_checkv+0x1a>
		}
	}

	if(errors_vector.empty())
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fc89 	bl	8001c54 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_Z11error_checkv+0xd4>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	etl::vector<Error_condition, 8> errors_vector;
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fc52 	bl	8001bfc <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>
	}
}
 8001358:	bf00      	nop
 800135a:	3740      	adds	r7, #64	; 0x40
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200005b8 	.word	0x200005b8
 8001364:	200006b8 	.word	0x200006b8
 8001368:	2000146c 	.word	0x2000146c

0800136c <_Z13error_executev>:

void error_execute(){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 8001372:	f003 fed3 	bl	800511c <HAL_GetTick>
 8001376:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <_Z13error_executev+0x9c>)
 800137a:	699c      	ldr	r4, [r3, #24]
 800137c:	f003 fece 	bl	800511c <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	429c      	cmp	r4, r3
 8001384:	bf94      	ite	ls
 8001386:	2301      	movls	r3, #1
 8001388:	2300      	movhi	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00a      	beq.n	80013a6 <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2104      	movs	r1, #4
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f006 ffa4 	bl	80082e4 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800139c:	2101      	movs	r1, #1
 800139e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a2:	f008 f977 	bl	8009694 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 8; i++){
 80013a6:	2303      	movs	r3, #3
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d819      	bhi.n	80013e4 <_Z13error_executev+0x78>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <_Z13error_executev+0x9c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	015b      	lsls	r3, r3, #5
 80013b6:	4413      	add	r3, r2
 80013b8:	3318      	adds	r3, #24
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	f003 feae 	bl	800511c <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	429c      	cmp	r4, r3
 80013c4:	bf94      	ite	ls
 80013c6:	2301      	movls	r3, #1
 80013c8:	2300      	movhi	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <_Z13error_executev+0x70>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f006 ff84 	bl	80082e4 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 8; i++){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e7e2      	b.n	80013aa <_Z13error_executev+0x3e>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 80013e4:	2104      	movs	r1, #4
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f006 ff63 	bl	80082b4 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <_Z13error_executev+0xa0>)
 80013fc:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	200005b8 	.word	0x200005b8
 800140c:	2000146c 	.word	0x2000146c

08001410 <_Z11serialPrintv>:

void serialPrint()
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08d      	sub	sp, #52	; 0x34
 8001414:	af02      	add	r7, sp, #8
	// FIXME count chars
	// or use {fmt}
	static char tab[3500];
	uint16_t n=0;
 8001416:	2300      	movs	r3, #0
 8001418:	84fb      	strh	r3, [r7, #38]	; 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	48ab      	ldr	r0, [pc, #684]	; (80016d0 <_Z11serialPrintv+0x2c0>)
 8001422:	f00a f84f 	bl	800b4c4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	48a8      	ldr	r0, [pc, #672]	; (80016d0 <_Z11serialPrintv+0x2c0>)
 8001430:	f00a f932 	bl	800b698 <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10'000.0;
 8001434:	4ba7      	ldr	r3, [pc, #668]	; (80016d4 <_Z11serialPrintv+0x2c4>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001440:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80016d8 <_Z11serialPrintv+0x2c8>
 8001444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001448:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 800144c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800144e:	4aa3      	ldr	r2, [pc, #652]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001450:	1898      	adds	r0, r3, r2
 8001452:	783b      	ldrb	r3, [r7, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	787b      	ldrb	r3, [r7, #1]
 8001458:	4619      	mov	r1, r3
 800145a:	78bb      	ldrb	r3, [r7, #2]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	460b      	mov	r3, r1
 8001460:	499f      	ldr	r1, [pc, #636]	; (80016e0 <_Z11serialPrintv+0x2d0>)
 8001462:	f013 f8dd 	bl	8014620 <siprintf>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146c:	4413      	add	r3, r2
 800146e:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 8001470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001472:	4a9a      	ldr	r2, [pc, #616]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001474:	4413      	add	r3, r2
 8001476:	4a97      	ldr	r2, [pc, #604]	; (80016d4 <_Z11serialPrintv+0x2c4>)
 8001478:	f892 22a0 	ldrb.w	r2, [r2, #672]	; 0x2a0
 800147c:	4999      	ldr	r1, [pc, #612]	; (80016e4 <_Z11serialPrintv+0x2d4>)
 800147e:	4618      	mov	r0, r3
 8001480:	f013 f8ce 	bl	8014620 <siprintf>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148a:	4413      	add	r3, r2
 800148c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800148e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001490:	4a92      	ldr	r2, [pc, #584]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001492:	4413      	add	r3, r2
 8001494:	4994      	ldr	r1, [pc, #592]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 8001496:	4618      	mov	r0, r3
 8001498:	f013 f8c2 	bl	8014620 <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a2:	4413      	add	r3, r2
 80014a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a8:	4a8c      	ldr	r2, [pc, #560]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80014aa:	4413      	add	r3, r2
 80014ac:	498f      	ldr	r1, [pc, #572]	; (80016ec <_Z11serialPrintv+0x2dc>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f013 f8b6 	bl	8014620 <siprintf>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ba:	4413      	add	r3, r2
 80014bc:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c0:	4a86      	ldr	r2, [pc, #536]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80014c2:	4413      	add	r3, r2
 80014c4:	4988      	ldr	r1, [pc, #544]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f013 f8aa 	bl	8014620 <siprintf>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d2:	4413      	add	r3, r2
 80014d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "0- all good");
 80014d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d8:	4a80      	ldr	r2, [pc, #512]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80014da:	4413      	add	r3, r2
 80014dc:	4984      	ldr	r1, [pc, #528]	; (80016f0 <_Z11serialPrintv+0x2e0>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f013 f89e 	bl	8014620 <siprintf>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ea:	4413      	add	r3, r2
 80014ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f0:	4a7a      	ldr	r2, [pc, #488]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80014f2:	4413      	add	r3, r2
 80014f4:	497c      	ldr	r1, [pc, #496]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f013 f892 	bl	8014620 <siprintf>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001502:	4413      	add	r3, r2
 8001504:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "1- charging");
 8001506:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001508:	4a74      	ldr	r2, [pc, #464]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800150a:	4413      	add	r3, r2
 800150c:	4979      	ldr	r1, [pc, #484]	; (80016f4 <_Z11serialPrintv+0x2e4>)
 800150e:	4618      	mov	r0, r3
 8001510:	f013 f886 	bl	8014620 <siprintf>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151a:	4413      	add	r3, r2
 800151c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800151e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001520:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001522:	4413      	add	r3, r2
 8001524:	4970      	ldr	r1, [pc, #448]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 8001526:	4618      	mov	r0, r3
 8001528:	f013 f87a 	bl	8014620 <siprintf>
 800152c:	4603      	mov	r3, r0
 800152e:	b29a      	uxth	r2, r3
 8001530:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001532:	4413      	add	r3, r2
 8001534:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 8001536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800153a:	4413      	add	r3, r2
 800153c:	496e      	ldr	r1, [pc, #440]	; (80016f8 <_Z11serialPrintv+0x2e8>)
 800153e:	4618      	mov	r0, r3
 8001540:	f013 f86e 	bl	8014620 <siprintf>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800154a:	4413      	add	r3, r2
 800154c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800154e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001550:	4a62      	ldr	r2, [pc, #392]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001552:	4413      	add	r3, r2
 8001554:	4964      	ldr	r1, [pc, #400]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 8001556:	4618      	mov	r0, r3
 8001558:	f013 f862 	bl	8014620 <siprintf>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001562:	4413      	add	r3, r2
 8001564:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 8001566:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001568:	4a5c      	ldr	r2, [pc, #368]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800156a:	4413      	add	r3, r2
 800156c:	4963      	ldr	r1, [pc, #396]	; (80016fc <_Z11serialPrintv+0x2ec>)
 800156e:	4618      	mov	r0, r3
 8001570:	f013 f856 	bl	8014620 <siprintf>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800157a:	4413      	add	r3, r2
 800157c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800157e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001580:	4a56      	ldr	r2, [pc, #344]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001582:	4413      	add	r3, r2
 8001584:	4958      	ldr	r1, [pc, #352]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 8001586:	4618      	mov	r0, r3
 8001588:	f013 f84a 	bl	8014620 <siprintf>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001592:	4413      	add	r3, r2
 8001594:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 8001596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001598:	4a50      	ldr	r2, [pc, #320]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800159a:	4413      	add	r3, r2
 800159c:	4958      	ldr	r1, [pc, #352]	; (8001700 <_Z11serialPrintv+0x2f0>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f013 f83e 	bl	8014620 <siprintf>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015aa:	4413      	add	r3, r2
 80015ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80015b2:	4413      	add	r3, r2
 80015b4:	494c      	ldr	r1, [pc, #304]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f013 f832 	bl	8014620 <siprintf>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c2:	4413      	add	r3, r2
 80015c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 80015c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c8:	4a44      	ldr	r2, [pc, #272]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80015ca:	4413      	add	r3, r2
 80015cc:	494d      	ldr	r1, [pc, #308]	; (8001704 <_Z11serialPrintv+0x2f4>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f013 f826 	bl	8014620 <siprintf>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015da:	4413      	add	r3, r2
 80015dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e0:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80015e2:	4413      	add	r3, r2
 80015e4:	4940      	ldr	r1, [pc, #256]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f013 f81a 	bl	8014620 <siprintf>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f2:	4413      	add	r3, r2
 80015f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 80015f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f8:	4a38      	ldr	r2, [pc, #224]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4942      	ldr	r1, [pc, #264]	; (8001708 <_Z11serialPrintv+0x2f8>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f013 f80e 	bl	8014620 <siprintf>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800160a:	4413      	add	r3, r2
 800160c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800160e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001610:	4a32      	ldr	r2, [pc, #200]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001612:	4413      	add	r3, r2
 8001614:	4934      	ldr	r1, [pc, #208]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 8001616:	4618      	mov	r0, r3
 8001618:	f013 f802 	bl	8014620 <siprintf>
 800161c:	4603      	mov	r3, r0
 800161e:	b29a      	uxth	r2, r3
 8001620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001622:	4413      	add	r3, r2
 8001624:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "7- too high current");
 8001626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800162a:	4413      	add	r3, r2
 800162c:	4937      	ldr	r1, [pc, #220]	; (800170c <_Z11serialPrintv+0x2fc>)
 800162e:	4618      	mov	r0, r3
 8001630:	f012 fff6 	bl	8014620 <siprintf>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800163a:	4413      	add	r3, r2
 800163c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800163e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001642:	4413      	add	r3, r2
 8001644:	4928      	ldr	r1, [pc, #160]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 8001646:	4618      	mov	r0, r3
 8001648:	f012 ffea 	bl	8014620 <siprintf>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001652:	4413      	add	r3, r2
 8001654:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 8001656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800165a:	4413      	add	r3, r2
 800165c:	492c      	ldr	r1, [pc, #176]	; (8001710 <_Z11serialPrintv+0x300>)
 800165e:	4618      	mov	r0, r3
 8001660:	f012 ffde 	bl	8014620 <siprintf>
 8001664:	4603      	mov	r3, r0
 8001666:	b29a      	uxth	r2, r3
 8001668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800166a:	4413      	add	r3, r2
 800166c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n\n");
 800166e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <_Z11serialPrintv+0x2cc>)
 8001672:	4413      	add	r3, r2
 8001674:	4927      	ldr	r1, [pc, #156]	; (8001714 <_Z11serialPrintv+0x304>)
 8001676:	4618      	mov	r0, r3
 8001678:	f012 ffd2 	bl	8014620 <siprintf>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001682:	4413      	add	r3, r2
 8001684:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 8001686:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_Z11serialPrintv+0x2cc>)
 800168a:	189c      	adds	r4, r3, r2
 800168c:	69f8      	ldr	r0, [r7, #28]
 800168e:	f7fe ff73 	bl	8000578 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4920      	ldr	r1, [pc, #128]	; (8001718 <_Z11serialPrintv+0x308>)
 8001698:	4620      	mov	r0, r4
 800169a:	f012 ffc1 	bl	8014620 <siprintf>
 800169e:	4603      	mov	r3, r0
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a4:	4413      	add	r3, r2
 80016a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80016a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80016ac:	4413      	add	r3, r2
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <_Z11serialPrintv+0x2d8>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f012 ffb5 	bl	8014620 <siprintf>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016bc:	4413      	add	r3, r2
 80016be:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 80016c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <_Z11serialPrintv+0x2cc>)
 80016c4:	189c      	adds	r4, r3, r2
 80016c6:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <_Z11serialPrintv+0x2c4>)
 80016c8:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80016cc:	e028      	b.n	8001720 <_Z11serialPrintv+0x310>
 80016ce:	bf00      	nop
 80016d0:	20001ac8 	.word	0x20001ac8
 80016d4:	2000146c 	.word	0x2000146c
 80016d8:	461c4000 	.word	0x461c4000
 80016dc:	200006b8 	.word	0x200006b8
 80016e0:	080167a0 	.word	0x080167a0
 80016e4:	080167b4 	.word	0x080167b4
 80016e8:	080167d0 	.word	0x080167d0
 80016ec:	080167d4 	.word	0x080167d4
 80016f0:	080167f0 	.word	0x080167f0
 80016f4:	080167fc 	.word	0x080167fc
 80016f8:	08016808 	.word	0x08016808
 80016fc:	08016840 	.word	0x08016840
 8001700:	08016868 	.word	0x08016868
 8001704:	0801687c 	.word	0x0801687c
 8001708:	08016890 	.word	0x08016890
 800170c:	080168a8 	.word	0x080168a8
 8001710:	080168bc 	.word	0x080168bc
 8001714:	080168cc 	.word	0x080168cc
 8001718:	080168d0 	.word	0x080168d0
 800171c:	42c80000 	.word	0x42c80000
 8001720:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800171c <_Z11serialPrintv+0x30c>
 8001724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe ff24 	bl	8000578 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	496b      	ldr	r1, [pc, #428]	; (80018e4 <_Z11serialPrintv+0x4d4>)
 8001736:	4620      	mov	r0, r4
 8001738:	f012 ff72 	bl	8014620 <siprintf>
 800173c:	4603      	mov	r3, r0
 800173e:	b29a      	uxth	r2, r3
 8001740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001742:	4413      	add	r3, r2
 8001744:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001748:	4a67      	ldr	r2, [pc, #412]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 800174a:	4413      	add	r3, r2
 800174c:	4967      	ldr	r1, [pc, #412]	; (80018ec <_Z11serialPrintv+0x4dc>)
 800174e:	4618      	mov	r0, r3
 8001750:	f012 ff66 	bl	8014620 <siprintf>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800175a:	4413      	add	r3, r2
 800175c:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b05      	cmp	r3, #5
 8001766:	dc68      	bgt.n	800183a <_Z11serialPrintv+0x42a>
	{
		float cell_value = (float)data.voltages.cells[i] / 10'000.0;
 8001768:	4a61      	ldr	r2, [pc, #388]	; (80018f0 <_Z11serialPrintv+0x4e0>)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001778:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80018f4 <_Z11serialPrintv+0x4e4>
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i);
 8001784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001786:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 8001788:	4413      	add	r3, r2
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	495a      	ldr	r1, [pc, #360]	; (80018f8 <_Z11serialPrintv+0x4e8>)
 800178e:	4618      	mov	r0, r3
 8001790:	f012 ff46 	bl	8014620 <siprintf>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800179a:	4413      	add	r3, r2
 800179c:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 800179e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a0:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 80017a2:	189c      	adds	r4, r3, r2
 80017a4:	69b8      	ldr	r0, [r7, #24]
 80017a6:	f7fe fee7 	bl	8000578 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4850      	ldr	r0, [pc, #320]	; (80018f0 <_Z11serialPrintv+0x4e0>)
 80017b0:	6a39      	ldr	r1, [r7, #32]
 80017b2:	4401      	add	r1, r0
 80017b4:	f501 7124 	add.w	r1, r1, #656	; 0x290
 80017b8:	7809      	ldrb	r1, [r1, #0]
 80017ba:	2900      	cmp	r1, #0
 80017bc:	d101      	bne.n	80017c2 <_Z11serialPrintv+0x3b2>
 80017be:	2120      	movs	r1, #32
 80017c0:	e000      	b.n	80017c4 <_Z11serialPrintv+0x3b4>
 80017c2:	212a      	movs	r1, #42	; 0x2a
 80017c4:	9100      	str	r1, [sp, #0]
 80017c6:	494d      	ldr	r1, [pc, #308]	; (80018fc <_Z11serialPrintv+0x4ec>)
 80017c8:	4620      	mov	r0, r4
 80017ca:	f012 ff29 	bl	8014620 <siprintf>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d4:	4413      	add	r3, r2
 80017d6:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i != 5)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d01d      	beq.n	800181a <_Z11serialPrintv+0x40a>
		{
		n += sprintf(&tab[n], " -T.%d-\t", i);
 80017de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e0:	4a41      	ldr	r2, [pc, #260]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 80017e2:	4413      	add	r3, r2
 80017e4:	6a3a      	ldr	r2, [r7, #32]
 80017e6:	4946      	ldr	r1, [pc, #280]	; (8001900 <_Z11serialPrintv+0x4f0>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f012 ff19 	bl	8014620 <siprintf>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017f4:	4413      	add	r3, r2
 80017f6:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
 80017f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017fa:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 80017fc:	1898      	adds	r0, r3, r2
 80017fe:	4a3c      	ldr	r2, [pc, #240]	; (80018f0 <_Z11serialPrintv+0x4e0>)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	4413      	add	r3, r2
 8001804:	3320      	adds	r3, #32
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	493e      	ldr	r1, [pc, #248]	; (8001904 <_Z11serialPrintv+0x4f4>)
 800180c:	f012 ff08 	bl	8014620 <siprintf>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001816:	4413      	add	r3, r2
 8001818:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		n += sprintf(&tab[n], "\r\n");
 800181a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 800181e:	4413      	add	r3, r2
 8001820:	4932      	ldr	r1, [pc, #200]	; (80018ec <_Z11serialPrintv+0x4dc>)
 8001822:	4618      	mov	r0, r3
 8001824:	f012 fefc 	bl	8014620 <siprintf>
 8001828:	4603      	mov	r3, r0
 800182a:	b29a      	uxth	r2, r3
 800182c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800182e:	4413      	add	r3, r2
 8001830:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	3301      	adds	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	e793      	b.n	8001762 <_Z11serialPrintv+0x352>
	}

	n += sprintf(&tab[n], "\r\n");
 800183a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 800183e:	4413      	add	r3, r2
 8001840:	492a      	ldr	r1, [pc, #168]	; (80018ec <_Z11serialPrintv+0x4dc>)
 8001842:	4618      	mov	r0, r3
 8001844:	f012 feec 	bl	8014620 <siprintf>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800184e:	4413      	add	r3, r2
 8001850:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 8001852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 8001856:	189c      	adds	r4, r3, r2
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <_Z11serialPrintv+0x4e0>)
 800185a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe8a 	bl	8000578 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4927      	ldr	r1, [pc, #156]	; (8001908 <_Z11serialPrintv+0x4f8>)
 800186a:	4620      	mov	r0, r4
 800186c:	f012 fed8 	bl	8014620 <siprintf>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001876:	4413      	add	r3, r2
 8001878:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800187a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 800187e:	4413      	add	r3, r2
 8001880:	491a      	ldr	r1, [pc, #104]	; (80018ec <_Z11serialPrintv+0x4dc>)
 8001882:	4618      	mov	r0, r3
 8001884:	f012 fecc 	bl	8014620 <siprintf>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800188e:	4413      	add	r3, r2
 8001890:	84fb      	strh	r3, [r7, #38]	; 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 8001892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 8001896:	189c      	adds	r4, r3, r2
 8001898:	2104      	movs	r1, #4
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f006 fd09 	bl	80082b4 <HAL_GPIO_ReadPin>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4919      	ldr	r1, [pc, #100]	; (800190c <_Z11serialPrintv+0x4fc>)
 80018a8:	4620      	mov	r0, r4
 80018aa:	f012 feb9 	bl	8014620 <siprintf>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018b4:	4413      	add	r3, r2
 80018b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 80018bc:	4413      	add	r3, r2
 80018be:	490b      	ldr	r1, [pc, #44]	; (80018ec <_Z11serialPrintv+0x4dc>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f012 fead 	bl	8014620 <siprintf>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018cc:	4413      	add	r3, r2
 80018ce:	84fb      	strh	r3, [r7, #38]	; 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 80018d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d2:	4619      	mov	r1, r3
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <_Z11serialPrintv+0x4d8>)
 80018d6:	f011 f917 	bl	8012b08 <CDC_Transmit_FS>
}
 80018da:	bf00      	nop
 80018dc:	372c      	adds	r7, #44	; 0x2c
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	080168f0 	.word	0x080168f0
 80018e8:	200006b8 	.word	0x200006b8
 80018ec:	080167d0 	.word	0x080167d0
 80018f0:	2000146c 	.word	0x2000146c
 80018f4:	461c4000 	.word	0x461c4000
 80018f8:	0801690c 	.word	0x0801690c
 80018fc:	08016914 	.word	0x08016914
 8001900:	08016920 	.word	0x08016920
 8001904:	0801692c 	.word	0x0801692c
 8001908:	08016930 	.word	0x08016930
 800190c:	08016948 	.word	0x08016948

08001910 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4614      	mov	r4, r2
 8001922:	461d      	mov	r5, r3
 8001924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001928:	e895 0003 	ldmia.w	r5, {r0, r1}
 800192c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3318      	adds	r3, #24
 8001934:	2206      	movs	r2, #6
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f012 f8c8 	bl	8013ace <memcpy>
  }
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}

08001948 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001964:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3318      	adds	r3, #24
 800196c:	2208      	movs	r2, #8
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f012 f8ac 	bl	8013ace <memcpy>
  }
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}

08001980 <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

	can_init();
 8001988:	f7ff fc5a 	bl	8001240 <_Z8can_initv>
	for(;;){
		osDelay(20);
 800198c:	2014      	movs	r0, #20
 800198e:	f00e fb5d 	bl	801004c <osDelay>

		error_conditions[0].value = data.current.value;
 8001992:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001994:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001998:	4a74      	ldr	r2, [pc, #464]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 800199a:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 800199c:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 800199e:	8b9b      	ldrh	r3, [r3, #28]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 80019a4:	8b5b      	ldrh	r3, [r3, #26]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b0:	4b6e      	ldr	r3, [pc, #440]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 80019b2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 80019b6:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 80019b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c4:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 80019c6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 80019cc:	8b5b      	ldrh	r3, [r3, #26]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 80019d8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 80019de:	8b9b      	ldrh	r3, [r3, #28]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e8:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 80019ea:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 80019ee:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 80019f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019fc:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 80019fe:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		error_conditions[6].value = data.temperatures.lowest_temperature;
 8001a02:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a10:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 8001a12:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		error_conditions[7].value = data.current.value;
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a18:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001a1c:	4a53      	ldr	r2, [pc, #332]	; (8001b6c <_Z23start_comm_err_functionPv+0x1ec>)
 8001a1e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

		PUTM_CAN::BMS_LV_main can_message_main{
			.voltage_sum{data.voltages.total_can},
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a24:	8b1b      	ldrh	r3, [r3, #24]
			.soc{data.soc.value_can},
			.temp_avg{data.temperatures.average},
			.current{(uint8_t)data.current.value},
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
		};
 8001a26:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			.soc{data.soc.value_can},
 8001a2a:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a2c:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
		};
 8001a30:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			.temp_avg{data.temperatures.average},
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a36:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001a3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			.current{(uint8_t)data.current.value},
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a40:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a48:	edc7 7a00 	vstr	s15, [r7]
 8001a4c:	783b      	ldrb	r3, [r7, #0]
 8001a4e:	b2db      	uxtb	r3, r3
		};
 8001a50:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
		};
 8001a5a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		PUTM_CAN::BMS_LV_temperature can_message_temp{
 8001a5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001a68:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 8001a6e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 8001a78:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 8001a82:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 8001a8c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001a92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 8001a96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		if(serial_tick < HAL_GetTick())
 8001a9a:	f003 fb3f 	bl	800511c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <_Z23start_comm_err_functionPv+0x1f0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	bf8c      	ite	hi
 8001aa8:	2301      	movhi	r3, #1
 8001aaa:	2300      	movls	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <_Z23start_comm_err_functionPv+0x144>
		{
			serialPrint();
 8001ab2:	f7ff fcad 	bl	8001410 <_Z11serialPrintv>
			serial_tick = HAL_GetTick() + 500; //0.5s
 8001ab6:	f003 fb31 	bl	800511c <HAL_GetTick>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <_Z23start_comm_err_functionPv+0x1f0>)
 8001ac2:	6013      	str	r3, [r2, #0]
		}

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_main>(can_message_main, PUTM_CAN::can_tx_header_BMS_LV_MAIN);
 8001ac4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <_Z23start_comm_err_functionPv+0x1f4>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff1e 	bl	8001910 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_temperature>(can_message_temp, PUTM_CAN::can_tx_header_BMS_LV_TEMPERATURE);
 8001ad4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001adc:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <_Z23start_comm_err_functionPv+0x1f8>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff32 	bl	8001948 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		if(can_main_tick < HAL_GetTick())
 8001ae4:	f003 fb1a 	bl	800511c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <_Z23start_comm_err_functionPv+0x1fc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	bf8c      	ite	hi
 8001af2:	2301      	movhi	r3, #1
 8001af4:	2300      	movls	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <_Z23start_comm_err_functionPv+0x19a>
		{
			auto status_main = can_message_main_frame.send(hcan1);
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	491f      	ldr	r1, [pc, #124]	; (8001b80 <_Z23start_comm_err_functionPv+0x200>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f8ba 	bl	8001c7c <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			can_main_tick = HAL_GetTick() + 40; //0.04s
 8001b0e:	f003 fb05 	bl	800511c <HAL_GetTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	3328      	adds	r3, #40	; 0x28
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <_Z23start_comm_err_functionPv+0x1fc>)
 8001b18:	6013      	str	r3, [r2, #0]
		}

		if(can_temp_tick < HAL_GetTick())
 8001b1a:	f003 faff 	bl	800511c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <_Z23start_comm_err_functionPv+0x204>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	bf8c      	ite	hi
 8001b28:	2301      	movhi	r3, #1
 8001b2a:	2300      	movls	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <_Z23start_comm_err_functionPv+0x1d0>
		{
			auto status_temp = can_message_temp_frame.send(hcan1);
 8001b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b36:	4912      	ldr	r1, [pc, #72]	; (8001b80 <_Z23start_comm_err_functionPv+0x200>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f8b3 	bl	8001ca4 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			can_temp_tick = HAL_GetTick() + 200; //0.2s
 8001b44:	f003 faea 	bl	800511c <HAL_GetTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	33c8      	adds	r3, #200	; 0xc8
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <_Z23start_comm_err_functionPv+0x204>)
 8001b4e:	6013      	str	r3, [r2, #0]
		}
		if(data.charging.charger_plugged) //charger is unplugged
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <_Z23start_comm_err_functionPv+0x1e8>)
 8001b52:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f43f af18 	beq.w	800198c <_Z23start_comm_err_functionPv+0xc>
		{
			error_check();
 8001b5c:	f7ff fb9a 	bl	8001294 <_Z11error_checkv>

			error_execute();
 8001b60:	f7ff fc04 	bl	800136c <_Z13error_executev>
		}
	}
 8001b64:	e712      	b.n	800198c <_Z23start_comm_err_functionPv+0xc>
 8001b66:	bf00      	nop
 8001b68:	2000146c 	.word	0x2000146c
 8001b6c:	200005b8 	.word	0x200005b8
 8001b70:	200005ac 	.word	0x200005ac
 8001b74:	08016a04 	.word	0x08016a04
 8001b78:	08016a1c 	.word	0x08016a1c
 8001b7c:	200005b0 	.word	0x200005b0
 8001b80:	20001aa0 	.word	0x20001aa0
 8001b84:	200005b4 	.word	0x200005b4

08001b88 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f89b 	bl	8001ccc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f88f 	bl	8001ccc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	3384      	adds	r3, #132	; 0x84
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff faa2 	bl	800110e <_ZN3etl11vector_baseD1Ev>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	330c      	adds	r3, #12
 8001be2:	2208      	movs	r2, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	f000 f87e 	bl	8001ce6 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f890 	bl	8001d12 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f897 	bl	8001d3a <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffd3 	bl	8001bba <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f000 f891 	bl	8001d50 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	681c      	ldr	r4, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4619      	mov	r1, r3
 8001c38:	2004      	movs	r0, #4
 8001c3a:	f7ff fa4d 	bl	80010d8 <_ZnwjPv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	601c      	str	r4, [r3, #0]
      ++p_end;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	1d1a      	adds	r2, r3, #4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
    }
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
    }
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f103 0218 	add.w	r2, r3, #24
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f005 f9f2 	bl	800707a <HAL_CAN_AddTxMessage>
 8001c96:	4603      	mov	r3, r0
  }
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20001464 	.word	0x20001464

08001ca4 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f103 0218 	add.w	r2, r3, #24
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f005 f9de 	bl	800707a <HAL_CAN_AddTxMessage>
 8001cbe:	4603      	mov	r3, r0
  }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20001468 	.word	0x20001468

08001ccc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f845 	bl	8001d66 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f9fa 	bl	80010f0 <_ZN3etl11vector_baseC1Ej>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
    }
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4610      	mov	r0, r2
 8001d26:	f000 f829 	bl	8001d7c <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]
    }
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
      initialise();
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffe5 	bl	8001d12 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001d58:	687b      	ldr	r3, [r7, #4]
  }
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f804 	bl	8001d96 <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f804 	bl	8001db0 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001dba:	f7ff f985 	bl	80010c8 <_ZSt21is_constant_evaluatedv>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f808 	bl	8001ddc <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001dcc:	e003      	b.n	8001dd6 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f81b 	bl	8001e0c <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d00a      	beq.n	8001e04 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f817 	bl	8001e22 <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f81e 	bl	8001e38 <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e7f0      	b.n	8001de6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xa>
	}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f804 	bl	8001e4e <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
    }
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f040 80c6 	bne.w	8002002 <_Z41__static_initialization_and_destruction_0ii+0x19e>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	f040 80c0 	bne.w	8002002 <_Z41__static_initialization_and_destruction_0ii+0x19e>
};
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	4a62      	ldr	r2, [pc, #392]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	4a62      	ldr	r2, [pc, #392]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001e8e:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001e90:	4a62      	ldr	r2, [pc, #392]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001e92:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	4a61      	ldr	r2, [pc, #388]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	751a      	strb	r2, [r3, #20]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
 8001ea8:	3320      	adds	r3, #32
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001eb4:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001eb6:	4a59      	ldr	r2, [pc, #356]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001eb8:	8b92      	ldrh	r2, [r2, #28]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ebe:	8b52      	ldrh	r2, [r2, #26]
 8001ec0:	1a8a      	subs	r2, r1, r2
 8001ec2:	ee07 2a90 	vmov	s15, r2
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001eca:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ece:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	751a      	strb	r2, [r3, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	4a51      	ldr	r2, [pc, #324]	; (800202c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	4a51      	ldr	r2, [pc, #324]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001eec:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001eee:	4a4b      	ldr	r2, [pc, #300]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ef0:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001ef4:	ee07 2a90 	vmov	s15, r2
 8001ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001efc:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	2203      	movs	r2, #3
 8001f08:	751a      	strb	r2, [r3, #20]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	771a      	strb	r2, [r3, #28]
 8001f12:	3320      	adds	r3, #32
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	4a45      	ldr	r2, [pc, #276]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001f20:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001f22:	4a3e      	ldr	r2, [pc, #248]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f24:	8b52      	ldrh	r2, [r2, #26]
 8001f26:	ee07 2a90 	vmov	s15, r2
 8001f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f2e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	751a      	strb	r2, [r3, #20]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
 8001f44:	3320      	adds	r3, #32
 8001f46:	2202      	movs	r2, #2
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001f50:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001f52:	4a32      	ldr	r2, [pc, #200]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f54:	8b92      	ldrh	r2, [r2, #28]
 8001f56:	ee07 2a90 	vmov	s15, r2
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f5e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	2205      	movs	r2, #5
 8001f6a:	751a      	strb	r2, [r3, #20]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
 8001f74:	3320      	adds	r3, #32
 8001f76:	2204      	movs	r2, #4
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	4a30      	ldr	r2, [pc, #192]	; (8002040 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001f80:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f84:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001f88:	ee07 2a90 	vmov	s15, r2
 8001f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f90:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	2206      	movs	r2, #6
 8001f9c:	751a      	strb	r2, [r3, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	771a      	strb	r2, [r3, #28]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	2205      	movs	r2, #5
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fb4:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_LOST,-1,1,data.temperatures.lowest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fb8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
};
 8001fbc:	ee07 2a90 	vmov	s15, r2
 8001fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc4:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	2206      	movs	r2, #6
 8001fd0:	751a      	strb	r2, [r3, #20]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	771a      	strb	r2, [r3, #28]
 8001fda:	3320      	adds	r3, #32
 8001fdc:	2206      	movs	r2, #6
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8001fe6:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fea:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	751a      	strb	r2, [r3, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	2200      	movs	r2, #0
 8002000:	771a      	strb	r2, [r3, #28]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200005b8 	.word	0x200005b8
 8002014:	be99999a 	.word	0xbe99999a
 8002018:	3e99999a 	.word	0x3e99999a
 800201c:	2000146c 	.word	0x2000146c
 8002020:	00124f80 	.word	0x00124f80
 8002024:	44fa0000 	.word	0x44fa0000
 8002028:	47435000 	.word	0x47435000
 800202c:	42400000 	.word	0x42400000
 8002030:	425c0000 	.word	0x425c0000
 8002034:	46ea6000 	.word	0x46ea6000
 8002038:	4724d800 	.word	0x4724d800
 800203c:	48f42400 	.word	0x48f42400
 8002040:	42f00000 	.word	0x42f00000
 8002044:	bf800000 	.word	0xbf800000
 8002048:	41a00000 	.word	0x41a00000
 800204c:	42c80000 	.word	0x42c80000

08002050 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    new_data = true;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	7993      	ldrb	r3, [r2, #6]
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1dd8      	adds	r0, r3, #7
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	331c      	adds	r3, #28
 800206c:	2203      	movs	r2, #3
 800206e:	4619      	mov	r1, r3
 8002070:	f011 fd2d 	bl	8013ace <memcpy>
  }
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	7993      	ldrb	r3, [r2, #6]
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3307      	adds	r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	321c      	adds	r2, #28
 8002098:	8812      	ldrh	r2, [r2, #0]
 800209a:	b292      	uxth	r2, r2
 800209c:	801a      	strh	r2, [r3, #0]
  }
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	7993      	ldrb	r3, [r2, #6]
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3307      	adds	r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	321c      	adds	r2, #28
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	601a      	str	r2, [r3, #0]
  }
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	7993      	ldrb	r3, [r2, #6]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1dd8      	adds	r0, r3, #7
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	331c      	adds	r3, #28
 80020f2:	2206      	movs	r2, #6
 80020f4:	4619      	mov	r1, r3
 80020f6:	f011 fcea 	bl	8013ace <memcpy>
  }
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	7993      	ldrb	r3, [r2, #6]
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	1dd8      	adds	r0, r3, #7
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	331c      	adds	r3, #28
 800211e:	2206      	movs	r2, #6
 8002120:	4619      	mov	r1, r3
 8002122:	f011 fcd4 	bl	8013ace <memcpy>
  }
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	7993      	ldrb	r3, [r2, #6]
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1dd8      	adds	r0, r3, #7
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	331c      	adds	r3, #28
 800214a:	2206      	movs	r2, #6
 800214c:	4619      	mov	r1, r3
 800214e:	f011 fcbe 	bl	8013ace <memcpy>
  }
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	7993      	ldrb	r3, [r2, #6]
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1dd8      	adds	r0, r3, #7
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	331c      	adds	r3, #28
 8002176:	2208      	movs	r2, #8
 8002178:	4619      	mov	r1, r3
 800217a:	f011 fca8 	bl	8013ace <memcpy>
  }
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	7993      	ldrb	r3, [r2, #6]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3307      	adds	r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	321c      	adds	r2, #28
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	601a      	str	r2, [r3, #0]
  }
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	7993      	ldrb	r3, [r2, #6]
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	1dd8      	adds	r0, r3, #7
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	331c      	adds	r3, #28
 80021ce:	2208      	movs	r2, #8
 80021d0:	4619      	mov	r1, r3
 80021d2:	f011 fc7c 	bl	8013ace <memcpy>
  }
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	7993      	ldrb	r3, [r2, #6]
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1dd8      	adds	r0, r3, #7
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	331c      	adds	r3, #28
 80021fa:	2203      	movs	r2, #3
 80021fc:	4619      	mov	r1, r3
 80021fe:	f011 fc66 	bl	8013ace <memcpy>
  }
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	7993      	ldrb	r3, [r2, #6]
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	1dd8      	adds	r0, r3, #7
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	331c      	adds	r3, #28
 8002226:	2203      	movs	r2, #3
 8002228:	4619      	mov	r1, r3
 800222a:	f011 fc50 	bl	8013ace <memcpy>
  }
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	7993      	ldrb	r3, [r2, #6]
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3307      	adds	r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	321c      	adds	r2, #28
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	601a      	str	r2, [r3, #0]
  }
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	7993      	ldrb	r3, [r2, #6]
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	1dd8      	adds	r0, r3, #7
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	331c      	adds	r3, #28
 800227e:	2208      	movs	r2, #8
 8002280:	4619      	mov	r1, r3
 8002282:	f011 fc24 	bl	8013ace <memcpy>
  }
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	7993      	ldrb	r3, [r2, #6]
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1dd8      	adds	r0, r3, #7
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	331c      	adds	r3, #28
 80022aa:	2208      	movs	r2, #8
 80022ac:	4619      	mov	r1, r3
 80022ae:	f011 fc0e 	bl	8013ace <memcpy>
  }
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	7993      	ldrb	r3, [r2, #6]
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1dd8      	adds	r0, r3, #7
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	331c      	adds	r3, #28
 80022d6:	2208      	movs	r2, #8
 80022d8:	4619      	mov	r1, r3
 80022da:	f011 fbf8 	bl	8013ace <memcpy>
  }
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	7993      	ldrb	r3, [r2, #6]
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	1dd8      	adds	r0, r3, #7
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	331c      	adds	r3, #28
 8002302:	2208      	movs	r2, #8
 8002304:	4619      	mov	r1, r3
 8002306:	f011 fbe2 	bl	8013ace <memcpy>
  }
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	7993      	ldrb	r3, [r2, #6]
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1dd8      	adds	r0, r3, #7
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	331c      	adds	r3, #28
 800232e:	2203      	movs	r2, #3
 8002330:	4619      	mov	r1, r3
 8002332:	f011 fbcc 	bl	8013ace <memcpy>
  }
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	7993      	ldrb	r3, [r2, #6]
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	1dd8      	adds	r0, r3, #7
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	331c      	adds	r3, #28
 800235a:	2205      	movs	r2, #5
 800235c:	4619      	mov	r1, r3
 800235e:	f011 fbb6 	bl	8013ace <memcpy>
  }
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	7993      	ldrb	r3, [r2, #6]
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3307      	adds	r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	321c      	adds	r2, #28
 8002386:	8812      	ldrh	r2, [r2, #0]
 8002388:	b292      	uxth	r2, r2
 800238a:	801a      	strh	r2, [r3, #0]
  }
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	7993      	ldrb	r3, [r2, #6]
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3307      	adds	r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	321c      	adds	r2, #28
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	701a      	strb	r2, [r3, #0]
  }
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	7993      	ldrb	r3, [r2, #6]
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3307      	adds	r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	321c      	adds	r2, #28
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	601a      	str	r2, [r3, #0]
  }
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	7993      	ldrb	r3, [r2, #6]
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3307      	adds	r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	321c      	adds	r2, #28
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	701a      	strb	r2, [r3, #0]
  }
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	7993      	ldrb	r3, [r2, #6]
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3307      	adds	r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	321c      	adds	r2, #28
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	b292      	uxth	r2, r2
 800243c:	801a      	strh	r2, [r3, #0]
  }
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	7993      	ldrb	r3, [r2, #6]
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1dd8      	adds	r0, r3, #7
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	331c      	adds	r3, #28
 8002466:	2208      	movs	r2, #8
 8002468:	4619      	mov	r1, r3
 800246a:	f011 fb30 	bl	8013ace <memcpy>
  }
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	7993      	ldrb	r3, [r2, #6]
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3307      	adds	r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	321c      	adds	r2, #28
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	701a      	strb	r2, [r3, #0]
  }
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	7993      	ldrb	r3, [r2, #6]
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1dd8      	adds	r0, r3, #7
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	331c      	adds	r3, #28
 80024be:	2208      	movs	r2, #8
 80024c0:	4619      	mov	r1, r3
 80024c2:	f011 fb04 	bl	8013ace <memcpy>
  }
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	7993      	ldrb	r3, [r2, #6]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	1dd8      	adds	r0, r3, #7
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	331c      	adds	r3, #28
 80024ea:	2206      	movs	r2, #6
 80024ec:	4619      	mov	r1, r3
 80024ee:	f011 faee 	bl	8013ace <memcpy>
  }
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	7993      	ldrb	r3, [r2, #6]
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	1dd8      	adds	r0, r3, #7
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	331c      	adds	r3, #28
 8002516:	2208      	movs	r2, #8
 8002518:	4619      	mov	r1, r3
 800251a:	f011 fad8 	bl	8013ace <memcpy>
  }
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	7993      	ldrb	r3, [r2, #6]
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3307      	adds	r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	321c      	adds	r2, #28
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	701a      	strb	r2, [r3, #0]
  }
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	7993      	ldrb	r3, [r2, #6]
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1dd8      	adds	r0, r3, #7
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	331c      	adds	r3, #28
 800256e:	2206      	movs	r2, #6
 8002570:	4619      	mov	r1, r3
 8002572:	f011 faac 	bl	8013ace <memcpy>
  }
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	7993      	ldrb	r3, [r2, #6]
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1dd8      	adds	r0, r3, #7
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	331c      	adds	r3, #28
 800259a:	2206      	movs	r2, #6
 800259c:	4619      	mov	r1, r3
 800259e:	f011 fa96 	bl	8013ace <memcpy>
  }
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	7993      	ldrb	r3, [r2, #6]
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1dd8      	adds	r0, r3, #7
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	331c      	adds	r3, #28
 80025c6:	2208      	movs	r2, #8
 80025c8:	4619      	mov	r1, r3
 80025ca:	f011 fa80 	bl	8013ace <memcpy>
  }
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	7993      	ldrb	r3, [r2, #6]
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	1dd8      	adds	r0, r3, #7
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	331c      	adds	r3, #28
 80025f2:	2205      	movs	r2, #5
 80025f4:	4619      	mov	r1, r3
 80025f6:	f011 fa6a 	bl	8013ace <memcpy>
  }
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
 8002606:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff fc2a 	bl	8001e64 <_Z41__static_initialization_and_destruction_0ii>
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ffe7 	bl	8002612 <_ZN22Battery_characteristicC1Ev>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ffeb 	bl	8002634 <_ZN7SoC_EKFC1Ev>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZN4DataC1Ev>:
	bool charging_state;
	bool discharge_activation;
	uint32_t discharge_tick_end;
};

struct Data{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ffe9 	bl	800264e <_ZN15State_of_ChargeC1Ev>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269e:	4293      	cmp	r3, r2
 80026a0:	d102      	bne.n	80026a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026a2:	4803      	ldr	r0, [pc, #12]	; (80026b0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80026a4:	f7ff ffe0 	bl	8002668 <_ZN4DataC1Ev>
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000146c 	.word	0x2000146c

080026b4 <_GLOBAL__sub_I_data>:
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff ffe3 	bl	8002688 <_Z41__static_initialization_and_destruction_0ii>
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2bff      	cmp	r3, #255	; 0xff
 80026d2:	dc26      	bgt.n	8002722 <_Z16init_PEC15_Tablev+0x5e>
	{
		remainder = i << 7;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	01db      	lsls	r3, r3, #7
 80026da:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80026dc:	2308      	movs	r3, #8
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dd14      	ble.n	8002710 <_Z16init_PEC15_Tablev+0x4c>
		{
			if (remainder & 0x4000)
 80026e6:	89fb      	ldrh	r3, [r7, #14]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <_Z16init_PEC15_Tablev+0x3e>
			{
				remainder = ((remainder << 1));
 80026f0:	89fb      	ldrh	r3, [r7, #14]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <_Z16init_PEC15_Tablev+0x6c>)
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	4053      	eors	r3, r2
 80026fe:	81fb      	strh	r3, [r7, #14]
 8002700:	e002      	b.n	8002708 <_Z16init_PEC15_Tablev+0x44>
			}
			else
			{
				remainder = ((remainder << 1));
 8002702:	89fb      	ldrh	r3, [r7, #14]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	e7e7      	b.n	80026e0 <_Z16init_PEC15_Tablev+0x1c>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 8002710:	4908      	ldr	r1, [pc, #32]	; (8002734 <_Z16init_PEC15_Tablev+0x70>)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	89fa      	ldrh	r2, [r7, #14]
 8002716:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	e7d5      	b.n	80026ce <_Z16init_PEC15_Tablev+0xa>
	}
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000210 	.word	0x20000210
 8002734:	20001710 	.word	0x20001710

08002738 <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 8002742:	2310      	movs	r3, #16
 8002744:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	da1a      	bge.n	8002788 <_Z5pec15Pci+0x50>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8002752:	8afb      	ldrh	r3, [r7, #22]
 8002754:	09db      	lsrs	r3, r3, #7
 8002756:	b29a      	uxth	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	440b      	add	r3, r1
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4053      	eors	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 800276a:	8afb      	ldrh	r3, [r7, #22]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b21a      	sxth	r2, r3
 8002770:	89fb      	ldrh	r3, [r7, #14]
 8002772:	490a      	ldr	r1, [pc, #40]	; (800279c <_Z5pec15Pci+0x64>)
 8002774:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002778:	b21b      	sxth	r3, r3
 800277a:	4053      	eors	r3, r2
 800277c:	b21b      	sxth	r3, r3
 800277e:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	3301      	adds	r3, #1
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	e7e0      	b.n	800274a <_Z5pec15Pci+0x12>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8002788:	8afb      	ldrh	r3, [r7, #22]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	b29b      	uxth	r3, r3
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20001710 	.word	0x20001710

080027a0 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b4:	f005 fd96 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 80027b8:	1d39      	adds	r1, r7, #4
 80027ba:	2301      	movs	r3, #1
 80027bc:	2202      	movs	r2, #2
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <_Z11LTC_wake_upv+0x3c>)
 80027c0:	f009 f92f 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ce:	f005 fd89 	bl	80082e4 <HAL_GPIO_WritePin>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20001afc 	.word	0x20001afc

080027e0 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 80027e6:	f248 0301 	movw	r3, #32769	; 0x8001
 80027ea:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80027fc:	463b      	mov	r3, r7
 80027fe:	2102      	movs	r1, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff99 	bl	8002738 <_Z5pec15Pci>
 8002806:	4603      	mov	r3, r0
 8002808:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 800280a:	89bb      	ldrh	r3, [r7, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	b29b      	uxth	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002814:	89bb      	ldrh	r3, [r7, #12]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <_Z18LTC_start_cell_adcv+0x11c>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <_Z18LTC_start_cell_adcv+0x11c>)
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <_Z18LTC_start_cell_adcv+0x11c>)
 8002828:	789b      	ldrb	r3, [r3, #2]
 800282a:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 800282c:	4b33      	ldr	r3, [pc, #204]	; (80028fc <_Z18LTC_start_cell_adcv+0x11c>)
 800282e:	78db      	ldrb	r3, [r3, #3]
 8002830:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002832:	4b32      	ldr	r3, [pc, #200]	; (80028fc <_Z18LTC_start_cell_adcv+0x11c>)
 8002834:	791b      	ldrb	r3, [r3, #4]
 8002836:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <_Z18LTC_start_cell_adcv+0x11c>)
 800283a:	795b      	ldrb	r3, [r3, #5]
 800283c:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 800283e:	463b      	mov	r3, r7
 8002840:	3304      	adds	r3, #4
 8002842:	2106      	movs	r1, #6
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff77 	bl	8002738 <_Z5pec15Pci>
 800284a:	4603      	mov	r3, r0
 800284c:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	b29b      	uxth	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002858:	89bb      	ldrh	r3, [r7, #12]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 800285e:	f7ff ff9f 	bl	80027a0 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286c:	f005 fd3a 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 8002870:	4639      	mov	r1, r7
 8002872:	2314      	movs	r3, #20
 8002874:	220c      	movs	r2, #12
 8002876:	4822      	ldr	r0, [pc, #136]	; (8002900 <_Z18LTC_start_cell_adcv+0x120>)
 8002878:	f009 f8d3 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002886:	f005 fd2d 	bl	80082e4 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 800288a:	463b      	mov	r3, r7
 800288c:	220c      	movs	r2, #12
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f011 f944 	bl	8013b1e <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 8002896:	f44f 731c 	mov.w	r3, #624	; 0x270
 800289a:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 800289c:	89fb      	ldrh	r3, [r7, #14]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80028ac:	463b      	mov	r3, r7
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff41 	bl	8002738 <_Z5pec15Pci>
 80028b6:	4603      	mov	r3, r0
 80028b8:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 80028ba:	89bb      	ldrh	r3, [r7, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 80028c4:	89bb      	ldrh	r3, [r7, #12]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f005 fd06 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 80028d8:	4639      	mov	r1, r7
 80028da:	2314      	movs	r3, #20
 80028dc:	2204      	movs	r2, #4
 80028de:	4808      	ldr	r0, [pc, #32]	; (8002900 <_Z18LTC_start_cell_adcv+0x120>)
 80028e0:	f009 f89f 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f005 fcf9 	bl	80082e4 <HAL_GPIO_WritePin>
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000214 	.word	0x20000214
 8002900:	20001afc 	.word	0x20001afc

08002904 <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0b8      	sub	sp, #224	; 0xe0
 8002908:	af02      	add	r7, sp, #8
 800290a:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 800290c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002910:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 8002914:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002918:	220c      	movs	r2, #12
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f011 f8fe 	bl	8013b1e <memset>
	tab[0] = (cmd>>8);
 8002922:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	b29b      	uxth	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002930:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 800293a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fef9 	bl	8002738 <_Z5pec15Pci>
 8002946:	4603      	mov	r3, r0
 8002948:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 800294c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	b29b      	uxth	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 800295a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 8002964:	f7ff ff1c 	bl	80027a0 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002972:	f005 fcb7 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002976:	f107 020c 	add.w	r2, r7, #12
 800297a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800297e:	2314      	movs	r3, #20
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	230c      	movs	r3, #12
 8002984:	4849      	ldr	r0, [pc, #292]	; (8002aac <_Z18LTC_get_values_adcPt+0x1a8>)
 8002986:	f009 f9ba 	bl	800bcfe <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002994:	f005 fca6 	bl	80082e4 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002998:	7c3b      	ldrb	r3, [r7, #16]
 800299a:	b21a      	sxth	r2, r3
 800299c:	7c7b      	ldrb	r3, [r7, #17]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 80029ac:	7cbb      	ldrb	r3, [r7, #18]
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3302      	adds	r3, #2
 80029be:	b292      	uxth	r2, r2
 80029c0:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 80029c2:	7d3b      	ldrb	r3, [r7, #20]
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	7d7b      	ldrb	r3, [r7, #21]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	b292      	uxth	r2, r2
 80029d6:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 80029d8:	f248 0306 	movw	r3, #32774	; 0x8006
 80029dc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 80029e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029e4:	220c      	movs	r2, #12
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f011 f898 	bl	8013b1e <memset>
	tab[0] = (cmd>>8);
 80029ee:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80029fc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 8002a06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fe93 	bl	8002738 <_Z5pec15Pci>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 8002a18:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002a26:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3a:	f005 fc53 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002a3e:	f107 020c 	add.w	r2, r7, #12
 8002a42:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002a46:	2314      	movs	r3, #20
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	4817      	ldr	r0, [pc, #92]	; (8002aac <_Z18LTC_get_values_adcPt+0x1a8>)
 8002a4e:	f009 f956 	bl	800bcfe <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5c:	f005 fc42 	bl	80082e4 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002a60:	7c3b      	ldrb	r3, [r7, #16]
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	7c7b      	ldrb	r3, [r7, #17]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3306      	adds	r3, #6
 8002a72:	b292      	uxth	r2, r2
 8002a74:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002a76:	7cbb      	ldrb	r3, [r7, #18]
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3308      	adds	r3, #8
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002a8c:	7d3b      	ldrb	r3, [r7, #20]
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	7d7b      	ldrb	r3, [r7, #21]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	330a      	adds	r3, #10
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	801a      	strh	r2, [r3, #0]


}
 8002aa2:	bf00      	nop
 8002aa4:	37d8      	adds	r7, #216	; 0xd8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20001afc 	.word	0x20001afc

08002ab0 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 8002ab6:	f248 0328 	movw	r3, #32808	; 0x8028
 8002aba:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002abc:	463b      	mov	r3, r7
 8002abe:	2204      	movs	r2, #4
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f011 f82b 	bl	8013b1e <memset>
	tab[0] = (cmd>>8);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fe2b 	bl	8002738 <_Z5pec15Pci>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002af0:	88bb      	ldrh	r3, [r7, #4]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002af6:	f7ff fe53 	bl	80027a0 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
 8002afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b04:	f005 fbee 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b08:	4639      	mov	r1, r7
 8002b0a:	2364      	movs	r3, #100	; 0x64
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4807      	ldr	r0, [pc, #28]	; (8002b2c <_Z8mute_disv+0x7c>)
 8002b10:	f008 ff87 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b14:	2201      	movs	r2, #1
 8002b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1e:	f005 fbe1 	bl	80082e4 <HAL_GPIO_WritePin>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20001afc 	.word	0x20001afc

08002b30 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 8002b36:	f248 0329 	movw	r3, #32809	; 0x8029
 8002b3a:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2204      	movs	r2, #4
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f010 ffeb 	bl	8013b1e <memset>
	tab[0] = (cmd>>8);
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fdeb 	bl	8002738 <_Z5pec15Pci>
 8002b62:	4603      	mov	r3, r0
 8002b64:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002b76:	f7ff fe13 	bl	80027a0 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b84:	f005 fbae 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b88:	4639      	mov	r1, r7
 8002b8a:	2364      	movs	r3, #100	; 0x64
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <_Z10unmute_disv+0x7c>)
 8002b90:	f008 ff47 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b94:	2201      	movs	r2, #1
 8002b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b9e:	f005 fba1 	bl	80082e4 <HAL_GPIO_WritePin>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20001afc 	.word	0x20001afc

08002bb0 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002bba:	f7ff ffb9 	bl	8002b30 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002bbe:	f248 0314 	movw	r3, #32788	; 0x8014
 8002bc2:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	220c      	movs	r2, #12
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f010 ffa6 	bl	8013b1e <memset>
	tab[0] = (cmd>>8);
 8002bd2:	8afb      	ldrh	r3, [r7, #22]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002bdc:	8afb      	ldrh	r3, [r7, #22]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002be2:	f107 0308 	add.w	r3, r7, #8
 8002be6:	2102      	movs	r1, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fda5 	bl	8002738 <_Z5pec15Pci>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002bf2:	8abb      	ldrh	r3, [r7, #20]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002bfc:	8abb      	ldrh	r3, [r7, #20]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b25a      	sxtb	r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b25a      	sxtb	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3303      	adds	r3, #3
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3304      	adds	r3, #4
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b25a      	sxtb	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3305      	adds	r3, #5
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2106      	movs	r1, #6
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fd68 	bl	8002738 <_Z5pec15Pci>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002c6c:	8abb      	ldrh	r3, [r7, #20]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002c76:	8abb      	ldrh	r3, [r7, #20]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002c7c:	f7ff fd90 	bl	80027a0 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8a:	f005 fb2b 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002c8e:	f107 0108 	add.w	r1, r7, #8
 8002c92:	2364      	movs	r3, #100	; 0x64
 8002c94:	220c      	movs	r2, #12
 8002c96:	483c      	ldr	r0, [pc, #240]	; (8002d88 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002c98:	f008 fec3 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca6:	f005 fb1d 	bl	80082e4 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002caa:	f248 0301 	movw	r3, #32769	; 0x8001
 8002cae:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	220c      	movs	r2, #12
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f010 ff30 	bl	8013b1e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002cbe:	8afb      	ldrh	r3, [r7, #22]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002cc8:	8afb      	ldrh	r3, [r7, #22]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fd2f 	bl	8002738 <_Z5pec15Pci>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002cde:	8abb      	ldrh	r3, [r7, #20]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002ce8:	8abb      	ldrh	r3, [r7, #20]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002d00:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d02:	78db      	ldrb	r3, [r3, #3]
 8002d04:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	dc0c      	bgt.n	8002d26 <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d0e:	791b      	ldrb	r3, [r3, #4]
 8002d10:	b25a      	sxtb	r2, r3
 8002d12:	2101      	movs	r1, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d24:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d28:	791b      	ldrb	r3, [r3, #4]
 8002d2a:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d2e:	795b      	ldrb	r3, [r3, #5]
 8002d30:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	3304      	adds	r3, #4
 8002d38:	2106      	movs	r1, #6
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fcfc 	bl	8002738 <_Z5pec15Pci>
 8002d40:	4603      	mov	r3, r0
 8002d42:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002d44:	8abb      	ldrh	r3, [r7, #20]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002d4e:	8abb      	ldrh	r3, [r7, #20]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d54:	2200      	movs	r2, #0
 8002d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5e:	f005 fac1 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002d62:	f107 0108 	add.w	r1, r7, #8
 8002d66:	2364      	movs	r3, #100	; 0x64
 8002d68:	220c      	movs	r2, #12
 8002d6a:	4807      	ldr	r0, [pc, #28]	; (8002d88 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002d6c:	f008 fe59 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7a:	f005 fab3 	bl	80082e4 <HAL_GPIO_WritePin>


}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20001afc 	.word	0x20001afc
 8002d8c:	20000214 	.word	0x20000214

08002d90 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b09a      	sub	sp, #104	; 0x68
 8002d94:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002d96:	f248 0314 	movw	r3, #32788	; 0x8014
 8002d9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002d9e:	463b      	mov	r3, r7
 8002da0:	220c      	movs	r2, #12
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f010 feba 	bl	8013b1e <memset>
	tab[0] = (cmd>>8);
 8002daa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002db6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fcb8 	bl	8002738 <_Z5pec15Pci>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002dda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002dfa:	463b      	mov	r3, r7
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2106      	movs	r1, #6
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fc99 	bl	8002738 <_Z5pec15Pci>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002e0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002e18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002e20:	f7ff fcbe 	bl	80027a0 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2e:	f005 fa59 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002e32:	4639      	mov	r1, r7
 8002e34:	2364      	movs	r3, #100	; 0x64
 8002e36:	220c      	movs	r2, #12
 8002e38:	4838      	ldr	r0, [pc, #224]	; (8002f1c <_Z22LTC_turn_off_dischargev+0x18c>)
 8002e3a:	f008 fdf2 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e48:	f005 fa4c 	bl	80082e4 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002e4c:	f248 0301 	movw	r3, #32769	; 0x8001
 8002e50:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002e54:	463b      	mov	r3, r7
 8002e56:	220c      	movs	r2, #12
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f010 fe5f 	bl	8013b1e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002e60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002e6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002e74:	463b      	mov	r3, r7
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fc5d 	bl	8002738 <_Z5pec15Pci>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002e84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002e90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eb8:	791b      	ldrb	r3, [r3, #4]
 8002eba:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ebe:	795b      	ldrb	r3, [r3, #5]
 8002ec0:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2106      	movs	r1, #6
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fc35 	bl	8002738 <_Z5pec15Pci>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002ed4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002ee0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef2:	f005 f9f7 	bl	80082e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002ef6:	4639      	mov	r1, r7
 8002ef8:	2364      	movs	r3, #100	; 0x64
 8002efa:	220c      	movs	r2, #12
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <_Z22LTC_turn_off_dischargev+0x18c>)
 8002efe:	f008 fd90 	bl	800ba22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002f02:	2201      	movs	r2, #1
 8002f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0c:	f005 f9ea 	bl	80082e4 <HAL_GPIO_WritePin>

	mute_dis();
 8002f10:	f7ff fdce 	bl	8002ab0 <_Z8mute_disv>
}
 8002f14:	bf00      	nop
 8002f16:	3768      	adds	r7, #104	; 0x68
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20001afc 	.word	0x20001afc
 8002f20:	20000214 	.word	0x20000214

08002f24 <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002f34:	2301      	movs	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b1b      	cmp	r3, #27
 8002f3c:	d841      	bhi.n	8002fc2 <_Z24temperature_calculationst+0x9e>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <_Z24temperature_calculationst+0xb4>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d335      	bcc.n	8002fba <_Z24temperature_calculationst+0x96>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 8002f4e:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <_Z24temperature_calculationst+0xb4>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <_Z24temperature_calculationst+0xb4>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f7e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002f82:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <_Z24temperature_calculationst+0xb4>)
 8002f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <_Z24temperature_calculationst+0xb4>)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8002fb8:	e003      	b.n	8002fc2 <_Z24temperature_calculationst+0x9e>
	for(unsigned int i = 1; i < 28; i++)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	e7ba      	b.n	8002f38 <_Z24temperature_calculationst+0x14>
		}
	}
	return retval;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	ee07 3a90 	vmov	s15, r3
}
 8002fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	08016bc0 	.word	0x08016bc0

08002fdc <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 8002fe2:	4b21      	ldr	r3, [pc, #132]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d829      	bhi.n	8003048 <_Z16get_temperaturesv+0x6c>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[7-i]);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff8d 	bl	8002f24 <_Z24temperature_calculationst>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003012:	ee17 3a90 	vmov	r3, s15
 8003016:	b29b      	uxth	r3, r3
 8003018:	b2d9      	uxtb	r1, r3
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3320      	adds	r3, #32
 8003022:	460a      	mov	r2, r1
 8003024:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 8003028:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	440b      	add	r3, r1
 8003032:	3320      	adds	r3, #32
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 800303c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3301      	adds	r3, #1
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	e7d2      	b.n	8002fee <_Z16get_temperaturesv+0x12>
	}
	data.temperatures.average = data.temperatures.average / 6;
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 800304a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <_Z16get_temperaturesv+0x90>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <_Z16get_temperaturesv+0x8c>)
 800305a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000146c 	.word	0x2000146c
 800306c:	aaaaaaab 	.word	0xaaaaaaab

08003070 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 800307c:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 8003080:	881a      	ldrh	r2, [r3, #0]
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 8003084:	839a      	strh	r2, [r3, #28]
	data.voltages.highest_cell_voltage_index = 0;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 8003088:	2200      	movs	r2, #0
 800308a:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 800308c:	2301      	movs	r3, #1
 800308e:	71fb      	strb	r3, [r7, #7]
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d822      	bhi.n	80030dc <_Z15min_max_voltagev+0x6c>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 8003098:	8b5a      	ldrh	r2, [r3, #26]
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4912      	ldr	r1, [pc, #72]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 800309e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d905      	bls.n	80030b2 <_Z15min_max_voltagev+0x42>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030b0:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030b4:	8b9a      	ldrh	r2, [r3, #28]
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	490b      	ldr	r1, [pc, #44]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <_Z15min_max_voltagev+0x64>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030cc:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 80030ce:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <_Z15min_max_voltagev+0x78>)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	7493      	strb	r3, [r2, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	3301      	adds	r3, #1
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	e7d9      	b.n	8003090 <_Z15min_max_voltagev+0x20>
		}
	}
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	2000146c 	.word	0x2000146c

080030ec <_Z19min_max_temperaturev>:

void min_max_temperature(){
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 80030f4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 80030fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 8003100:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 8003106:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 800310a:	2301      	movs	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d827      	bhi.n	8003164 <_Z19min_max_temperaturev+0x78>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 8003116:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800311a:	4915      	ldr	r1, [pc, #84]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	440b      	add	r3, r1
 8003120:	3320      	adds	r3, #32
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d907      	bls.n	8003138 <_Z19min_max_temperaturev+0x4c>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3320      	adds	r3, #32
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 8003134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 800313a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800313e:	490c      	ldr	r1, [pc, #48]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	440b      	add	r3, r1
 8003144:	3320      	adds	r3, #32
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_Z19min_max_temperaturev+0x70>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 800314c:	4a08      	ldr	r2, [pc, #32]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3320      	adds	r3, #32
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <_Z19min_max_temperaturev+0x84>)
 8003158:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	e7d4      	b.n	800310e <_Z19min_max_temperaturev+0x22>
		}
	}
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	2000146c 	.word	0x2000146c

08003174 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8003180:	2300      	movs	r3, #0
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b05      	cmp	r3, #5
 8003188:	dc1c      	bgt.n	80031c4 <_Z16voltage_can_calcv+0x50>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4915      	ldr	r1, [pc, #84]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003196:	4413      	add	r3, r2
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 800319a:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a4:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <_Z16voltage_can_calcv+0x74>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b2d9      	uxtb	r1, r3
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	330c      	adds	r3, #12
 80031b8:	460a      	mov	r2, r1
 80031ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	e7df      	b.n	8003184 <_Z16voltage_can_calcv+0x10>
	}

	data.voltages.total_can = data.voltages.total / 100;
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	4a08      	ldr	r2, [pc, #32]	; (80031ec <_Z16voltage_can_calcv+0x78>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <_Z16voltage_can_calcv+0x70>)
 80031d4:	831a      	strh	r2, [r3, #24]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000146c 	.word	0x2000146c
 80031e8:	10624dd3 	.word	0x10624dd3
 80031ec:	51eb851f 	.word	0x51eb851f

080031f0 <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 80031f8:	f7ff fa64 	bl	80026c4 <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f00c ff25 	bl	801004c <osDelay>
		LTC_start_cell_adc();
 8003202:	f7ff faed 	bl	80027e0 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 8003206:	201e      	movs	r0, #30
 8003208:	f00c ff20 	bl	801004c <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 800320c:	4805      	ldr	r0, [pc, #20]	; (8003224 <_Z18start_ltc_functionPv+0x34>)
 800320e:	f7ff fb79 	bl	8002904 <_Z18LTC_get_values_adcPt>

		min_max_voltage();
 8003212:	f7ff ff2d 	bl	8003070 <_Z15min_max_voltagev>

		voltage_can_calc();
 8003216:	f7ff ffad 	bl	8003174 <_Z16voltage_can_calcv>

		get_temperatures();
 800321a:	f7ff fedf 	bl	8002fdc <_Z16get_temperaturesv>

		min_max_temperature();
 800321e:	f7ff ff65 	bl	80030ec <_Z19min_max_temperaturev>
		osDelay(1);
 8003222:	e7eb      	b.n	80031fc <_Z18start_ltc_functionPv+0xc>
 8003224:	2000146c 	.word	0x2000146c

08003228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800322c:	f001 ff49 	bl	80050c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003230:	f000 f892 	bl	8003358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003234:	f000 fcac 	bl	8003b90 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003238:	f000 fc6c 	bl	8003b14 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800323c:	f000 f8f0 	bl	8003420 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003240:	f000 fa0c 	bl	800365c <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 8003244:	f000 fa78 	bl	8003738 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8003248:	f000 fab2 	bl	80037b0 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 800324c:	f000 fb20 	bl	8003890 <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8003250:	f000 fb60 	bl	8003914 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8003254:	f000 fbbc 	bl	80039d0 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8003258:	f000 fbfa 	bl	8003a50 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800325c:	f00c fe1a 	bl	800fe94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <main+0xd8>)
 8003262:	2100      	movs	r1, #0
 8003264:	4827      	ldr	r0, [pc, #156]	; (8003304 <main+0xdc>)
 8003266:	f00c fe5f 	bl	800ff28 <osThreadNew>
 800326a:	4603      	mov	r3, r0
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <main+0xe0>)
 800326e:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 8003270:	4a26      	ldr	r2, [pc, #152]	; (800330c <main+0xe4>)
 8003272:	2100      	movs	r1, #0
 8003274:	4826      	ldr	r0, [pc, #152]	; (8003310 <main+0xe8>)
 8003276:	f00c fe57 	bl	800ff28 <osThreadNew>
 800327a:	4603      	mov	r3, r0
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <main+0xec>)
 800327e:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <main+0xf0>)
 8003282:	2100      	movs	r1, #0
 8003284:	4825      	ldr	r0, [pc, #148]	; (800331c <main+0xf4>)
 8003286:	f00c fe4f 	bl	800ff28 <osThreadNew>
 800328a:	4603      	mov	r3, r0
 800328c:	4a24      	ldr	r2, [pc, #144]	; (8003320 <main+0xf8>)
 800328e:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <main+0xfc>)
 8003292:	2100      	movs	r1, #0
 8003294:	4824      	ldr	r0, [pc, #144]	; (8003328 <main+0x100>)
 8003296:	f00c fe47 	bl	800ff28 <osThreadNew>
 800329a:	4603      	mov	r3, r0
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <main+0x104>)
 800329e:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <main+0x108>)
 80032a2:	2100      	movs	r1, #0
 80032a4:	4823      	ldr	r0, [pc, #140]	; (8003334 <main+0x10c>)
 80032a6:	f00c fe3f 	bl	800ff28 <osThreadNew>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <main+0x110>)
 80032ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  HAL_Delay(2000);
 80032b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032b4:	f001 ff3e 	bl	8005134 <HAL_Delay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 80032b8:	2201      	movs	r2, #1
 80032ba:	2104      	movs	r1, #4
 80032bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c0:	f005 f810 	bl	80082e4 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80032c4:	481d      	ldr	r0, [pc, #116]	; (800333c <main+0x114>)
 80032c6:	f009 f951 	bl	800c56c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80032ca:	481d      	ldr	r0, [pc, #116]	; (8003340 <main+0x118>)
 80032cc:	f009 f8e6 	bl	800c49c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80032d0:	481c      	ldr	r0, [pc, #112]	; (8003344 <main+0x11c>)
 80032d2:	f009 f8e3 	bl	800c49c <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80032d6:	217f      	movs	r1, #127	; 0x7f
 80032d8:	481b      	ldr	r0, [pc, #108]	; (8003348 <main+0x120>)
 80032da:	f003 fb8f 	bl	80069fc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80032de:	217f      	movs	r1, #127	; 0x7f
 80032e0:	481a      	ldr	r0, [pc, #104]	; (800334c <main+0x124>)
 80032e2:	f003 fb8b 	bl	80069fc <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 80032e6:	2208      	movs	r2, #8
 80032e8:	4919      	ldr	r1, [pc, #100]	; (8003350 <main+0x128>)
 80032ea:	4817      	ldr	r0, [pc, #92]	; (8003348 <main+0x120>)
 80032ec:	f002 fac8 	bl	8005880 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 80032f0:	2264      	movs	r2, #100	; 0x64
 80032f2:	4918      	ldr	r1, [pc, #96]	; (8003354 <main+0x12c>)
 80032f4:	4815      	ldr	r0, [pc, #84]	; (800334c <main+0x124>)
 80032f6:	f002 fac3 	bl	8005880 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80032fa:	f00c fdef 	bl	800fedc <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 80032fe:	e7fe      	b.n	80032fe <main+0xd6>
 8003300:	08016c90 	.word	0x08016c90
 8003304:	08003cb5 	.word	0x08003cb5
 8003308:	20001c44 	.word	0x20001c44
 800330c:	08016cb4 	.word	0x08016cb4
 8003310:	080031f1 	.word	0x080031f1
 8003314:	20001c48 	.word	0x20001c48
 8003318:	08016cd8 	.word	0x08016cd8
 800331c:	08004675 	.word	0x08004675
 8003320:	20002508 	.word	0x20002508
 8003324:	08016cfc 	.word	0x08016cfc
 8003328:	08001045 	.word	0x08001045
 800332c:	20002dc8 	.word	0x20002dc8
 8003330:	08016d20 	.word	0x08016d20
 8003334:	08001981 	.word	0x08001981
 8003338:	20003688 	.word	0x20003688
 800333c:	20001b60 	.word	0x20001b60
 8003340:	20001bac 	.word	0x20001bac
 8003344:	20001bf8 	.word	0x20001bf8
 8003348:	20001910 	.word	0x20001910
 800334c:	20001978 	.word	0x20001978
 8003350:	20001494 	.word	0x20001494
 8003354:	200014a4 	.word	0x200014a4

08003358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b098      	sub	sp, #96	; 0x60
 800335c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800335e:	f107 0318 	add.w	r3, r7, #24
 8003362:	2248      	movs	r2, #72	; 0x48
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f010 fbd9 	bl	8013b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800337a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800337e:	f006 f9c1 	bl	8009704 <HAL_PWREx_ControlVoltageScaling>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <SystemClock_Config+0x3e>
  {
    Error_Handler();
 8003392:	f000 fcab 	bl	8003cec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8003396:	2329      	movs	r3, #41	; 0x29
 8003398:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800339a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033a0:	2301      	movs	r3, #1
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80033a4:	2301      	movs	r3, #1
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033a8:	2302      	movs	r3, #2
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ac:	2303      	movs	r3, #3
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80033b0:	2302      	movs	r3, #2
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80033b4:	2310      	movs	r3, #16
 80033b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033b8:	2302      	movs	r3, #2
 80033ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033bc:	2302      	movs	r3, #2
 80033be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033c0:	2302      	movs	r3, #2
 80033c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033c4:	f107 0318 	add.w	r3, r7, #24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f006 faa5 	bl	8009918 <HAL_RCC_OscConfig>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80033de:	f000 fc85 	bl	8003cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e2:	230f      	movs	r3, #15
 80033e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e6:	2303      	movs	r3, #3
 80033e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2103      	movs	r1, #3
 80033fc:	4618      	mov	r0, r3
 80033fe:	f006 ff07 	bl	800a210 <HAL_RCC_ClockConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003412:	f000 fc6b 	bl	8003cec <Error_Handler>
  }
}
 8003416:	bf00      	nop
 8003418:	3760      	adds	r7, #96	; 0x60
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003426:	f107 031c 	add.w	r3, r7, #28
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
 8003440:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003442:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003444:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <_ZL12MX_ADC1_Initv+0x218>)
 8003446:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003448:	4b7a      	ldr	r3, [pc, #488]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800344a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800344e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003450:	4b78      	ldr	r3, [pc, #480]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003456:	4b77      	ldr	r3, [pc, #476]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800345e:	2201      	movs	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003462:	4b74      	ldr	r3, [pc, #464]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003464:	2204      	movs	r2, #4
 8003466:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003468:	4b72      	ldr	r3, [pc, #456]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800346a:	2200      	movs	r2, #0
 800346c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800346e:	4b71      	ldr	r3, [pc, #452]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003470:	2201      	movs	r2, #1
 8003472:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003476:	2208      	movs	r2, #8
 8003478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800347a:	4b6e      	ldr	r3, [pc, #440]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003482:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003484:	2200      	movs	r2, #0
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800348a:	2200      	movs	r2, #0
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800348e:	4b69      	ldr	r3, [pc, #420]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003498:	2200      	movs	r2, #0
 800349a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800349c:	4b65      	ldr	r3, [pc, #404]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034a4:	4863      	ldr	r0, [pc, #396]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 80034a6:	f002 f899 	bl	80055dc <HAL_ADC_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 80034ba:	f000 fc17 	bl	8003cec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	485a      	ldr	r0, [pc, #360]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 80034ca:	f003 fb29 	bl	8006b20 <HAL_ADCEx_MultiModeConfigChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80034de:	f000 fc05 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <_ZL12MX_ADC1_Initv+0x21c>)
 80034e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034e6:	2306      	movs	r3, #6
 80034e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80034ea:	2306      	movs	r3, #6
 80034ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034ee:	237f      	movs	r3, #127	; 0x7f
 80034f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034f2:	2304      	movs	r3, #4
 80034f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	484d      	ldr	r0, [pc, #308]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003500:	f002 fcb4 	bl	8005e6c <HAL_ADC_ConfigChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8003514:	f000 fbea 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003518:	4b49      	ldr	r3, [pc, #292]	; (8003640 <_ZL12MX_ADC1_Initv+0x220>)
 800351a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800351c:	230c      	movs	r3, #12
 800351e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4843      	ldr	r0, [pc, #268]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003526:	f002 fca1 	bl	8005e6c <HAL_ADC_ConfigChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 800353a:	f000 fbd7 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <_ZL12MX_ADC1_Initv+0x224>)
 8003540:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003542:	2312      	movs	r3, #18
 8003544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	4619      	mov	r1, r3
 800354a:	483a      	ldr	r0, [pc, #232]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800354c:	f002 fc8e 	bl	8005e6c <HAL_ADC_ConfigChannel>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 8003560:	f000 fbc4 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <_ZL12MX_ADC1_Initv+0x228>)
 8003566:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003568:	2318      	movs	r3, #24
 800356a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4830      	ldr	r0, [pc, #192]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003572:	f002 fc7b 	bl	8005e6c <HAL_ADC_ConfigChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 8003586:	f000 fbb1 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800358a:	4b30      	ldr	r3, [pc, #192]	; (800364c <_ZL12MX_ADC1_Initv+0x22c>)
 800358c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800358e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003592:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4826      	ldr	r0, [pc, #152]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 800359a:	f002 fc67 	bl	8005e6c <HAL_ADC_ConfigChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 80035ae:	f000 fb9d 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80035b2:	4b27      	ldr	r3, [pc, #156]	; (8003650 <_ZL12MX_ADC1_Initv+0x230>)
 80035b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80035b6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80035ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	481c      	ldr	r0, [pc, #112]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 80035c2:	f002 fc53 	bl	8005e6c <HAL_ADC_ConfigChannel>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 80035d6:	f000 fb89 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <_ZL12MX_ADC1_Initv+0x234>)
 80035dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80035de:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80035e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4812      	ldr	r0, [pc, #72]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 80035ea:	f002 fc3f 	bl	8005e6c <HAL_ADC_ConfigChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 80035fe:	f000 fb75 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <_ZL12MX_ADC1_Initv+0x238>)
 8003604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003606:	f44f 7389 	mov.w	r3, #274	; 0x112
 800360a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4808      	ldr	r0, [pc, #32]	; (8003634 <_ZL12MX_ADC1_Initv+0x214>)
 8003612:	f002 fc2b 	bl	8005e6c <HAL_ADC_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 8003626:	f000 fb61 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800362a:	bf00      	nop
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20001910 	.word	0x20001910
 8003638:	50040000 	.word	0x50040000
 800363c:	21800100 	.word	0x21800100
 8003640:	25b00200 	.word	0x25b00200
 8003644:	2a000400 	.word	0x2a000400
 8003648:	2e300800 	.word	0x2e300800
 800364c:	32601000 	.word	0x32601000
 8003650:	36902000 	.word	0x36902000
 8003654:	3ac04000 	.word	0x3ac04000
 8003658:	3ef08000 	.word	0x3ef08000

0800365c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003662:	463b      	mov	r3, r7
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
 8003670:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 8003674:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <_ZL12MX_ADC2_Initv+0xd4>)
 8003676:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003678:	4b2c      	ldr	r3, [pc, #176]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 800367a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800367e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 8003688:	2200      	movs	r2, #0
 800368a:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 8003694:	2204      	movs	r2, #4
 8003696:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 800369a:	2200      	movs	r2, #0
 800369c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800369e:	4b23      	ldr	r3, [pc, #140]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036b8:	4b1c      	ldr	r3, [pc, #112]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80036be:	4b1b      	ldr	r3, [pc, #108]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80036cc:	4b17      	ldr	r3, [pc, #92]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036d4:	4815      	ldr	r0, [pc, #84]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 80036d6:	f001 ff81 	bl	80055dc <HAL_ADC_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 80036ea:	f000 faff 	bl	8003cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <_ZL12MX_ADC2_Initv+0xd8>)
 80036f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036f2:	2306      	movs	r3, #6
 80036f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80036f6:	2306      	movs	r3, #6
 80036f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036fa:	237f      	movs	r3, #127	; 0x7f
 80036fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003706:	463b      	mov	r3, r7
 8003708:	4619      	mov	r1, r3
 800370a:	4808      	ldr	r0, [pc, #32]	; (800372c <_ZL12MX_ADC2_Initv+0xd0>)
 800370c:	f002 fbae 	bl	8005e6c <HAL_ADC_ConfigChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8003720:	f000 fae4 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20001978 	.word	0x20001978
 8003730:	50040100 	.word	0x50040100
 8003734:	43210000 	.word	0x43210000

08003738 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <_ZL12MX_CAN1_Initv+0x74>)
 8003740:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003744:	2202      	movs	r2, #2
 8003746:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003756:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800375a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 800375e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003762:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003766:	2200      	movs	r2, #0
 8003768:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 800376c:	2200      	movs	r2, #0
 800376e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003772:	2200      	movs	r2, #0
 8003774:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003778:	2200      	movs	r2, #0
 800377a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 800377e:	2200      	movs	r2, #0
 8003780:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 8003784:	2200      	movs	r2, #0
 8003786:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003788:	4807      	ldr	r0, [pc, #28]	; (80037a8 <_ZL12MX_CAN1_Initv+0x70>)
 800378a:	f003 fa6d 	bl	8006c68 <HAL_CAN_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 800379e:	f000 faa5 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20001aa0 	.word	0x20001aa0
 80037ac:	40006400 	.word	0x40006400

080037b0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037c4:	2300      	movs	r3, #0
 80037c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037ca:	4a30      	ldr	r2, [pc, #192]	; (800388c <_ZL11MX_RTC_Initv+0xdc>)
 80037cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037ce:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80037d4:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037d6:	227f      	movs	r2, #127	; 0x7f
 80037d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80037da:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037e0:	4b29      	ldr	r3, [pc, #164]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037ec:	4b26      	ldr	r3, [pc, #152]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037f8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80037fa:	4b23      	ldr	r3, [pc, #140]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003800:	4821      	ldr	r0, [pc, #132]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 8003802:	f007 fd2f 	bl	800b264 <HAL_RTC_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8003816:	f000 fa69 	bl	8003cec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800381a:	2300      	movs	r3, #0
 800381c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800381e:	2300      	movs	r3, #0
 8003820:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003822:	2300      	movs	r3, #0
 8003824:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2201      	movs	r2, #1
 8003832:	4619      	mov	r1, r3
 8003834:	4814      	ldr	r0, [pc, #80]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 8003836:	f007 fda5 	bl	800b384 <HAL_RTC_SetTime>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 800384a:	f000 fa4f 	bl	8003cec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800384e:	2301      	movs	r3, #1
 8003850:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003852:	2301      	movs	r3, #1
 8003854:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003856:	2301      	movs	r3, #1
 8003858:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800385a:	2300      	movs	r3, #0
 800385c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800385e:	463b      	mov	r3, r7
 8003860:	2201      	movs	r2, #1
 8003862:	4619      	mov	r1, r3
 8003864:	4808      	ldr	r0, [pc, #32]	; (8003888 <_ZL11MX_RTC_Initv+0xd8>)
 8003866:	f007 fe8f 	bl	800b588 <HAL_RTC_SetDate>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 800387a:	f000 fa37 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20001ac8 	.word	0x20001ac8
 800388c:	40002800 	.word	0x40002800

08003890 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <_ZL12MX_SPI1_Initv+0x80>)
 8003898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800389a:	4b1c      	ldr	r3, [pc, #112]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 800389c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038b2:	2202      	movs	r2, #2
 80038b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038c6:	2228      	movs	r2, #40	; 0x28
 80038c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038de:	2207      	movs	r2, #7
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038ee:	4807      	ldr	r0, [pc, #28]	; (800390c <_ZL12MX_SPI1_Initv+0x7c>)
 80038f0:	f007 fff4 	bl	800b8dc <HAL_SPI_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8003904:	f000 f9f2 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20001afc 	.word	0x20001afc
 8003910:	40013000 	.word	0x40013000

08003914 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391a:	f107 0310 	add.w	r3, r7, #16
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003932:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003934:	4a25      	ldr	r2, [pc, #148]	; (80039cc <_ZL12MX_TIM3_Initv+0xb8>)
 8003936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 800393a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800393e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003948:	2231      	movs	r2, #49	; 0x31
 800394a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800394c:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003958:	481b      	ldr	r0, [pc, #108]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 800395a:	f008 fd47 	bl	800c3ec <HAL_TIM_Base_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800396e:	f000 f9bd 	bl	8003cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003978:	f107 0310 	add.w	r3, r7, #16
 800397c:	4619      	mov	r1, r3
 800397e:	4812      	ldr	r0, [pc, #72]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003980:	f008 ff83 	bl	800c88a <HAL_TIM_ConfigClockSource>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8003994:	f000 f9aa 	bl	8003cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4808      	ldr	r0, [pc, #32]	; (80039c8 <_ZL12MX_TIM3_Initv+0xb4>)
 80039a6:	f009 f995 	bl	800ccd4 <HAL_TIMEx_MasterConfigSynchronization>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80039ba:	f000 f997 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20001b60 	.word	0x20001b60
 80039cc:	40000400 	.word	0x40000400

080039d0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 80039e2:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <_ZL12MX_TIM6_Initv+0x7c>)
 80039e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 80039e8:	f640 125f 	movw	r2, #2399	; 0x95f
 80039ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 80039f6:	2209      	movs	r2, #9
 80039f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a00:	4811      	ldr	r0, [pc, #68]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 8003a02:	f008 fcf3 	bl	800c3ec <HAL_TIM_Base_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003a16:	f000 f969 	bl	8003cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <_ZL12MX_TIM6_Initv+0x78>)
 8003a28:	f009 f954 	bl	800ccd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003a3c:	f000 f956 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20001bac 	.word	0x20001bac
 8003a4c:	40001000 	.word	0x40001000

08003a50 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a56:	f107 0310 	add.w	r3, r7, #16
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <_ZL12MX_TIM8_Initv+0xc0>)
 8003a72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a76:	225f      	movs	r2, #95	; 0x5f
 8003a78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a82:	2231      	movs	r2, #49	; 0x31
 8003a84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a8c:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003a98:	481c      	ldr	r0, [pc, #112]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003a9a:	f008 fca7 	bl	800c3ec <HAL_TIM_Base_Init>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003aae:	f000 f91d 	bl	8003cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	4619      	mov	r1, r3
 8003abe:	4813      	ldr	r0, [pc, #76]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ac0:	f008 fee3 	bl	800c88a <HAL_TIM_ConfigClockSource>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003ad4:	f000 f90a 	bl	8003cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ae0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4808      	ldr	r0, [pc, #32]	; (8003b0c <_ZL12MX_TIM8_Initv+0xbc>)
 8003aec:	f009 f8f2 	bl	800ccd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8003b00:	f000 f8f4 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003b04:	bf00      	nop
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20001bf8 	.word	0x20001bf8
 8003b10:	40013400 	.word	0x40013400

08003b14 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6493      	str	r3, [r2, #72]	; 0x48
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6493      	str	r3, [r2, #72]	; 0x48
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	6493      	str	r3, [r2, #72]	; 0x48
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <_ZL11MX_DMA_Initv+0x78>)
 8003b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2105      	movs	r1, #5
 8003b66:	200b      	movs	r0, #11
 8003b68:	f003 ff76 	bl	8007a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b6c:	200b      	movs	r0, #11
 8003b6e:	f003 ff8f 	bl	8007a90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	2105      	movs	r1, #5
 8003b76:	2038      	movs	r0, #56	; 0x38
 8003b78:	f003 ff6e 	bl	8007a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003b7c:	2038      	movs	r0, #56	; 0x38
 8003b7e:	f003 ff87 	bl	8007a90 <HAL_NVIC_EnableIRQ>

}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000

08003b90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	60da      	str	r2, [r3, #12]
 8003ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ba6:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb2:	4b3d      	ldr	r3, [pc, #244]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	4a39      	ldr	r2, [pc, #228]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bca:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd6:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	f248 0104 	movw	r1, #32772	; 0x8004
 8003c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c10:	f004 fb68 	bl	80082e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUSE_VOLTAGE_GPIO_Port, FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c1a:	4824      	ldr	r0, [pc, #144]	; (8003cac <_ZL12MX_GPIO_Initv+0x11c>)
 8003c1c:	f004 fb62 	bl	80082e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003c20:	2201      	movs	r2, #1
 8003c22:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003c26:	4822      	ldr	r0, [pc, #136]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x120>)
 8003c28:	f004 fb5c 	bl	80082e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003c2c:	f248 0304 	movw	r3, #32772	; 0x8004
 8003c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c48:	f004 f9a2 	bl	8007f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERLOCK_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin;
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4813      	ldr	r0, [pc, #76]	; (8003cac <_ZL12MX_GPIO_Initv+0x11c>)
 8003c60:	f004 f996 	bl	8007f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = FUSE_VOLTAGE_Pin;
 8003c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FUSE_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003c76:	f107 0314 	add.w	r3, r7, #20
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	480b      	ldr	r0, [pc, #44]	; (8003cac <_ZL12MX_GPIO_Initv+0x11c>)
 8003c7e:	f004 f987 	bl	8007f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003c82:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c90:	2300      	movs	r3, #0
 8003c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x120>)
 8003c9c:	f004 f978 	bl	8007f90 <HAL_GPIO_Init>

}
 8003ca0:	bf00      	nop
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800

08003cb4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003cbc:	f00e fe66 	bl	801298c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f00c f9c3 	bl	801004c <osDelay>
 8003cc6:	e7fb      	b.n	8003cc0 <_Z16StartDefaultTaskPv+0xc>

08003cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cda:	f001 fa0b 	bl	80050f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40014400 	.word	0x40014400

08003cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf0:	b672      	cpsid	i
}
 8003cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cf4:	e7fe      	b.n	8003cf4 <Error_Handler+0x8>
	...

08003cf8 <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d1a:	eeb1 7a67 	vneg.f32	s14, s15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d28:	eeb0 0a66 	vmov.f32	s0, s13
 8003d2c:	f00f fc78 	bl	8013620 <expf>
 8003d30:	eef0 7a40 	vmov.f32	s15, s0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d40:	eeb1 7a67 	vneg.f32	s14, s15
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d4e:	eeb0 0a66 	vmov.f32	s0, s13
 8003d52:	f00f fc65 	bl	8013620 <expf>
 8003d56:	eef0 7a40 	vmov.f32	s15, s0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d66:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d7e:	eef1 6a67 	vneg.f32	s13, s15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003e38 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d94:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003e38 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003d98:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	ed93 7a05 	vldr	s14, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	ed93 7a06 	vldr	s14, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003e02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 8003e0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 8003e2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	42700000 	.word	0x42700000
 8003e3c:	3ba3d70a 	.word	0x3ba3d70a
 8003e40:	3dcccccd 	.word	0x3dcccccd
 8003e44:	3951b717 	.word	0x3951b717
 8003e48:	48f42400 	.word	0x48f42400

08003e4c <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6178      	str	r0, [r7, #20]
 8003e54:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e58:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e5c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e60:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	; 0x30
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	edd3 6a00 	vldr	s13, [r3]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	edd3 6a00 	vldr	s13, [r3]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	edd3 6a00 	vldr	s13, [r3]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f103 0020 	add.w	r0, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	33a8      	adds	r3, #168	; 0xa8
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2109      	movs	r1, #9
 8003fa6:	f000 f9a4 	bl	80042f2 <_Z6hornerPKfjS0_>
 8003faa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fde:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003fe2:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	edd3 6a00 	vldr	s13, [r3]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ff2:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8004016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	ed93 7a00 	vldr	s14, [r3]
 8004024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	33a8      	adds	r3, #168	; 0xa8
 800403a:	461a      	mov	r2, r3
 800403c:	2108      	movs	r1, #8
 800403e:	f000 f958 	bl	80042f2 <_Z6hornerPKfjS0_>
 8004042:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800404c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004054:	edd7 7a08 	vldr	s15, [r7, #32]
 8004058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8004070:	edd7 7a08 	vldr	s15, [r7, #32]
 8004074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004078:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800407c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004080:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004088:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8004092:	edd7 6a06 	vldr	s13, [r7, #24]
 8004096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800409a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800409e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 80040a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80040ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80040b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	33a8      	adds	r3, #168	; 0xa8
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	613a      	str	r2, [r7, #16]
 80040d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040da:	617a      	str	r2, [r7, #20]
 80040dc:	f107 0214 	add.w	r2, r7, #20
 80040e0:	f107 0110 	add.w	r1, r7, #16
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f932 	bl	800434e <_ZSt5clampIfERKT_S2_S2_S2_>
 80040ea:	4603      	mov	r3, r0
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80040f4:	bf00      	nop
 80040f6:	3730      	adds	r7, #48	; 0x30
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 8004106:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004194 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f897 	bl	800423e <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fdf1 	bl	8003cf8 <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 8004116:	eddf 1a20 	vldr	s3, [pc, #128]	; 8004198 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800411a:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8004198 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800411e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800419c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 8004122:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fe90 	bl	8003e4c <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80041a0 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa4>
 800413e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d50d      	bpl.n	8004164 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x68>
        update(0, Voltage);
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fe9a 	bl	8003e90 <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e7e5      	b.n	8004130 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x34>
    }

    set_filter_covariance();
 8004164:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8004198 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 8004168:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8004198 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800416c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800419c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 8004170:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80041a4 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa8>
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fe69 	bl	8003e4c <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 800417a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80041a8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xac>
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f85d 	bl	800423e <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fdb7 	bl	8003cf8 <_ZN7SoC_EKF17set_update_matrixEv>
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	42c80000 	.word	0x42c80000
 8004198:	3dcccccd 	.word	0x3dcccccd
 800419c:	3951b717 	.word	0x3951b717
 80041a0:	461c4000 	.word	0x461c4000
 80041a4:	48f42400 	.word	0x48f42400
 80041a8:	3d4ccccd 	.word	0x3d4ccccd

080041ac <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f8ef 	bl	800439c <_ZSt12__miter_baseIPKfET_S2_>
 80041be:	4604      	mov	r4, r0
 80041c0:	68b8      	ldr	r0, [r7, #8]
 80041c2:	f000 f8eb 	bl	800439c <_ZSt12__miter_baseIPKfET_S2_>
 80041c6:	4603      	mov	r3, r0
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4619      	mov	r1, r3
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 f8f0 	bl	80043b2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80041d2:	4603      	mov	r3, r0
    }
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f103 0118 	add.w	r1, r3, #24
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3308      	adds	r3, #8
 80041f0:	461a      	mov	r2, r3
 80041f2:	6838      	ldr	r0, [r7, #0]
 80041f4:	f7ff ffda 	bl	80041ac <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800422e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	671a      	str	r2, [r3, #112]	; 0x70
};
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]
};
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	18d1      	adds	r1, r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3320      	adds	r3, #32
 800429c:	461a      	mov	r2, r3
 800429e:	68b8      	ldr	r0, [r7, #8]
 80042a0:	f7ff ff84 	bl	80041ac <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d21b      	bcs.n	80042ea <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x66>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4413      	add	r3, r2
 80042ca:	edd3 7a00 	vldr	s15, [r3]
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3310      	adds	r3, #16
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3301      	adds	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e7de      	b.n	80042a8 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x24>
    }
};
 80042ea:	bf00      	nop
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
    float s = 0;
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	d214      	bcs.n	800433a <_Z6hornerPKfjS0_+0x48>
        s = s*(*x) + arry[i];
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	ed93 7a00 	vldr	s14, [r3]
 8004316:	edd7 7a05 	vldr	s15, [r7, #20]
 800431a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	edd3 7a00 	vldr	s15, [r3]
 800432a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432e:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3301      	adds	r3, #1
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e7e6      	b.n	8004308 <_Z6hornerPKfjS0_+0x16>
    }
    return s;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	ee07 3a90 	vmov	s15, r3
}
 8004340:	eeb0 0a67 	vmov.f32	s0, s15
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	ed93 7a00 	vldr	s14, [r3]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436e:	d501      	bpl.n	8004374 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	e00d      	b.n	8004390 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	ed93 7a00 	vldr	s14, [r3]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004388:	d501      	bpl.n	800438e <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	e000      	b.n	8004390 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800438e:	68fb      	ldr	r3, [r7, #12]
    }
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80043b2:	b5b0      	push	{r4, r5, r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f81a 	bl	80043f8 <_ZSt12__niter_baseIPKfET_S2_>
 80043c4:	4604      	mov	r4, r0
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f000 f816 	bl	80043f8 <_ZSt12__niter_baseIPKfET_S2_>
 80043cc:	4605      	mov	r5, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f81c 	bl	800440e <_ZSt12__niter_baseIPfET_S1_>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	4629      	mov	r1, r5
 80043dc:	4620      	mov	r0, r4
 80043de:	f000 f821 	bl	8004424 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80043e2:	4602      	mov	r2, r0
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f82b 	bl	8004444 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80043ee:	4603      	mov	r3, r0
    }
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdb0      	pop	{r4, r5, r7, pc}

080043f8 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f811 	bl	800445c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800443a:	4603      	mov	r3, r0
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8004468:	f7fc fe2e 	bl	80010c8 <_ZSt21is_constant_evaluatedv>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f80d 	bl	8004496 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800447c:	4603      	mov	r3, r0
 800447e:	e006      	b.n	800448e <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f829 	bl	80044dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800448a:	4603      	mov	r3, r0
 800448c:	bf00      	nop
    }
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	109b      	asrs	r3, r3, #2
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	dd0d      	ble.n	80044ce <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
	      ++__first;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3304      	adds	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e7ee      	b.n	80044ac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x16>
	  return __result;
 80044ce:	687b      	ldr	r3, [r7, #4]
	}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	109b      	asrs	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f00f faf2 	bl	8013aea <memmove>
	  return __result + _Num;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
	}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eeb0 0a67 	vmov.f32	s0, s15
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 800454e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b63      	cmp	r3, #99	; 0x63
 8004558:	dc3f      	bgt.n	80045da <_Z17calculate_currentv+0xa2>
	{
		int16_t raw_value = data.current.adc[i];
 800455a:	4a42      	ldr	r2, [pc, #264]	; (8004664 <_Z17calculate_currentv+0x12c>)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	330e      	adds	r3, #14
 8004560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004564:	80fb      	strh	r3, [r7, #6]
		raw_sum += raw_value;
 8004566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004572:	ed97 7a05 	vldr	s14, [r7, #20]
 8004576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800457a:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 800457e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458a:	ed97 7a04 	vldr	s14, [r7, #16]
 800458e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	d507      	bpl.n	80045a8 <_Z17calculate_currentv+0x70>
 8004598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a4:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 80045a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80045b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	dd07      	ble.n	80045d2 <_Z17calculate_currentv+0x9a>
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ce:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	e7bc      	b.n	8004554 <_Z17calculate_currentv+0x1c>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 80045da:	ed97 7a05 	vldr	s14, [r7, #20]
 80045de:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004668 <_Z17calculate_currentv+0x130>
 80045e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045e6:	edc7 7a00 	vstr	s15, [r7]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 80045ea:	edd7 7a00 	vldr	s15, [r7]
 80045ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800466c <_Z17calculate_currentv+0x134>
 80045f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045f6:	edc7 7a00 	vstr	s15, [r7]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 80045fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80045fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800466c <_Z17calculate_currentv+0x134>
 8004602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004606:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 800460a:	edd7 7a03 	vldr	s15, [r7, #12]
 800460e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800466c <_Z17calculate_currentv+0x134>
 8004612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004616:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 800461a:	4b15      	ldr	r3, [pc, #84]	; (8004670 <_Z17calculate_currentv+0x138>)
 800461c:	ed93 7a00 	vldr	s14, [r3]
 8004620:	edd7 7a00 	vldr	s15, [r7]
 8004624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <_Z17calculate_currentv+0x12c>)
 800462a:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
	data.current.value_max = (float)raw_max * output_current_factor;
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <_Z17calculate_currentv+0x138>)
 8004630:	ed93 7a00 	vldr	s14, [r3]
 8004634:	edd7 7a04 	vldr	s15, [r7, #16]
 8004638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <_Z17calculate_currentv+0x12c>)
 800463e:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	data.current.value_min = (float)raw_min * output_current_factor;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <_Z17calculate_currentv+0x138>)
 8004644:	ed93 7a00 	vldr	s14, [r3]
 8004648:	edd7 7a03 	vldr	s15, [r7, #12]
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <_Z17calculate_currentv+0x12c>)
 8004652:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000146c 	.word	0x2000146c
 8004668:	42c80000 	.word	0x42c80000
 800466c:	4501b000 	.word	0x4501b000
 8004670:	20003f48 	.word	0x20003f48

08004674 <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 800467c:	4933      	ldr	r1, [pc, #204]	; (800474c <_Z18start_soc_functionPv+0xd8>)
 800467e:	4834      	ldr	r0, [pc, #208]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 8004680:	f7ff fdac 	bl	80041dc <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 8004684:	2209      	movs	r2, #9
 8004686:	4933      	ldr	r1, [pc, #204]	; (8004754 <_Z18start_soc_functionPv+0xe0>)
 8004688:	4831      	ldr	r0, [pc, #196]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 800468a:	f7ff fdfb 	bl	8004284 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 2);
 800468e:	2301      	movs	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	2302      	movs	r3, #2
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	f107 0214 	add.w	r2, r7, #20
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4619      	mov	r1, r3
 80046a0:	482b      	ldr	r0, [pc, #172]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 80046a2:	f7ff fddb 	bl	800425c <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.03f);
 80046a6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004758 <_Z18start_soc_functionPv+0xe4>
 80046aa:	4829      	ldr	r0, [pc, #164]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 80046ac:	f7ff fdc7 	bl	800423e <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 80046b0:	4827      	ldr	r0, [pc, #156]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 80046b2:	f7ff fb21 	bl	8003cf8 <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 80046b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80046ba:	4825      	ldr	r0, [pc, #148]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 80046bc:	f7ff fda0 	bl	8004200 <_ZN7SoC_EKF15set_initial_SoCEf>

	osDelay(100);
 80046c0:	2064      	movs	r0, #100	; 0x64
 80046c2:	f00b fcc3 	bl	801004c <osDelay>

	float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 80046c6:	4b25      	ldr	r3, [pc, #148]	; (800475c <_Z18start_soc_functionPv+0xe8>)
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046d2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004760 <_Z18start_soc_functionPv+0xec>
 80046d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046da:	edc7 7a03 	vstr	s15, [r7, #12]
	data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 80046de:	f107 030c 	add.w	r3, r7, #12
 80046e2:	4619      	mov	r1, r3
 80046e4:	481a      	ldr	r0, [pc, #104]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 80046e6:	f7ff fd09 	bl	80040fc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>

	for(;;){
		osDelay(30);
 80046ea:	201e      	movs	r0, #30
 80046ec:	f00b fcae 	bl	801004c <osDelay>

		calculate_current();
 80046f0:	f7ff ff22 	bl	8004538 <_Z17calculate_currentv>

		float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <_Z18start_soc_functionPv+0xe8>)
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004700:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004760 <_Z18start_soc_functionPv+0xec>
 8004704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004708:	edc7 7a02 	vstr	s15, [r7, #8]
		data.soc.main.update(data.current.value, temp_voltage);
 800470c:	f107 0308 	add.w	r3, r7, #8
 8004710:	461a      	mov	r2, r3
 8004712:	4914      	ldr	r1, [pc, #80]	; (8004764 <_Z18start_soc_functionPv+0xf0>)
 8004714:	480e      	ldr	r0, [pc, #56]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 8004716:	f7ff fbbb 	bl	8003e90 <_ZN7SoC_EKF6updateERKfS1_>
		data.soc.value = data.soc.main.get_SoC();
 800471a:	480d      	ldr	r0, [pc, #52]	; (8004750 <_Z18start_soc_functionPv+0xdc>)
 800471c:	f7ff fefb 	bl	8004516 <_ZN7SoC_EKF7get_SoCEv>
 8004720:	eef0 7a40 	vmov.f32	s15, s0
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <_Z18start_soc_functionPv+0xe8>)
 8004726:	edc3 7aa2 	vstr	s15, [r3, #648]	; 0x288
		data.soc.value_can = (uint8_t)(data.soc.value * 100);
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <_Z18start_soc_functionPv+0xe8>)
 800472c:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8004730:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004768 <_Z18start_soc_functionPv+0xf4>
 8004734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473c:	edc7 7a00 	vstr	s15, [r7]
 8004740:	783b      	ldrb	r3, [r7, #0]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <_Z18start_soc_functionPv+0xe8>)
 8004746:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c

	}
 800474a:	e7ce      	b.n	80046ea <_Z18start_soc_functionPv+0x76>
 800474c:	08016d44 	.word	0x08016d44
 8004750:	20001640 	.word	0x20001640
 8004754:	08016d5c 	.word	0x08016d5c
 8004758:	3cf5c28f 	.word	0x3cf5c28f
 800475c:	2000146c 	.word	0x2000146c
 8004760:	461c4000 	.word	0x461c4000
 8004764:	20001634 	.word	0x20001634
 8004768:	42c80000 	.word	0x42c80000

0800476c <_Z41__static_initialization_and_destruction_0ii>:
}
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d117      	bne.n	80047ac <_Z41__static_initialization_and_destruction_0ii+0x40>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004782:	4293      	cmp	r3, r2
 8004784:	d112      	bne.n	80047ac <_Z41__static_initialization_and_destruction_0ii+0x40>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004788:	edd3 7a00 	vldr	s15, [r3]
 800478c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80047bc <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004790:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004796:	edd3 6a00 	vldr	s13, [r3]
 800479a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800479e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80047a8:	edc3 7a00 	vstr	s15, [r3]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	2000021c 	.word	0x2000021c
 80047bc:	45800000 	.word	0x45800000
 80047c0:	20000220 	.word	0x20000220
 80047c4:	20003f48 	.word	0x20003f48

080047c8 <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7ff ffcb 	bl	800476c <_Z41__static_initialization_and_destruction_0ii>
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_MspInit+0x4c>)
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <HAL_MspInit+0x4c>)
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6613      	str	r3, [r2, #96]	; 0x60
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_MspInit+0x4c>)
 80047ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_MspInit+0x4c>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <HAL_MspInit+0x4c>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6593      	str	r3, [r2, #88]	; 0x58
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_MspInit+0x4c>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	210f      	movs	r1, #15
 8004812:	f06f 0001 	mvn.w	r0, #1
 8004816:	f003 f91f 	bl	8007a58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b0b4      	sub	sp, #208	; 0xd0
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004830:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004844:	2298      	movs	r2, #152	; 0x98
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f00f f968 	bl	8013b1e <memset>
  if(hadc->Instance==ADC1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a97      	ldr	r2, [pc, #604]	; (8004ab0 <HAL_ADC_MspInit+0x288>)
 8004854:	4293      	cmp	r3, r2
 8004856:	f040 80ad 	bne.w	80049b4 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800485a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004860:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f005 ffa5 	bl	800a7bc <HAL_RCCEx_PeriphCLKConfig>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8004878:	f7ff fa38 	bl	8003cec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800487c:	4b8d      	ldr	r3, [pc, #564]	; (8004ab4 <HAL_ADC_MspInit+0x28c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a8c      	ldr	r2, [pc, #560]	; (8004ab4 <HAL_ADC_MspInit+0x28c>)
 8004884:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004886:	4b8b      	ldr	r3, [pc, #556]	; (8004ab4 <HAL_ADC_MspInit+0x28c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10b      	bne.n	80048a6 <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 800488e:	4b8a      	ldr	r3, [pc, #552]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	4a89      	ldr	r2, [pc, #548]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 8004894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800489a:	4b87      	ldr	r3, [pc, #540]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a6:	4b84      	ldr	r3, [pc, #528]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	4a83      	ldr	r2, [pc, #524]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b2:	4b81      	ldr	r3, [pc, #516]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048be:	4b7e      	ldr	r3, [pc, #504]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	4a7d      	ldr	r2, [pc, #500]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ca:	4b7b      	ldr	r3, [pc, #492]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d6:	4b78      	ldr	r3, [pc, #480]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	4a77      	ldr	r2, [pc, #476]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048e2:	4b75      	ldr	r3, [pc, #468]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 80048ee:	23f8      	movs	r3, #248	; 0xf8
 80048f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80048f4:	230b      	movs	r3, #11
 80048f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004900:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004904:	4619      	mov	r1, r3
 8004906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800490a:	f003 fb41 	bl	8007f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 800490e:	2330      	movs	r3, #48	; 0x30
 8004910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004914:	230b      	movs	r3, #11
 8004916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004920:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004924:	4619      	mov	r1, r3
 8004926:	4865      	ldr	r0, [pc, #404]	; (8004abc <HAL_ADC_MspInit+0x294>)
 8004928:	f003 fb32 	bl	8007f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 800492c:	2301      	movs	r3, #1
 800492e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004932:	230b      	movs	r3, #11
 8004934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 800493e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004942:	4619      	mov	r1, r3
 8004944:	485e      	ldr	r0, [pc, #376]	; (8004ac0 <HAL_ADC_MspInit+0x298>)
 8004946:	f003 fb23 	bl	8007f90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800494a:	4b5e      	ldr	r3, [pc, #376]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 800494c:	4a5e      	ldr	r2, [pc, #376]	; (8004ac8 <HAL_ADC_MspInit+0x2a0>)
 800494e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004950:	4b5c      	ldr	r3, [pc, #368]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 8004952:	2205      	movs	r2, #5
 8004954:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004956:	4b5b      	ldr	r3, [pc, #364]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800495c:	4b59      	ldr	r3, [pc, #356]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004962:	4b58      	ldr	r3, [pc, #352]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 8004964:	2280      	movs	r2, #128	; 0x80
 8004966:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004968:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 800496a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800496e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004970:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 8004972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004976:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004978:	4b52      	ldr	r3, [pc, #328]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 800497a:	2220      	movs	r2, #32
 800497c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800497e:	4b51      	ldr	r3, [pc, #324]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 8004980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004984:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004986:	484f      	ldr	r0, [pc, #316]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 8004988:	f003 f890 	bl	8007aac <HAL_DMA_Init>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8004992:	f7ff f9ab 	bl	8003cec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4a      	ldr	r2, [pc, #296]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 800499a:	651a      	str	r2, [r3, #80]	; 0x50
 800499c:	4a49      	ldr	r2, [pc, #292]	; (8004ac4 <HAL_ADC_MspInit+0x29c>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2105      	movs	r1, #5
 80049a6:	2012      	movs	r0, #18
 80049a8:	f003 f856 	bl	8007a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80049ac:	2012      	movs	r0, #18
 80049ae:	f003 f86f 	bl	8007a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80049b2:	e079      	b.n	8004aa8 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a44      	ldr	r2, [pc, #272]	; (8004acc <HAL_ADC_MspInit+0x2a4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d174      	bne.n	8004aa8 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80049be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80049c4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80049c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f005 fef3 	bl	800a7bc <HAL_RCCEx_PeriphCLKConfig>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80049dc:	f7ff f986 	bl	8003cec <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80049e0:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <HAL_ADC_MspInit+0x28c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <HAL_ADC_MspInit+0x28c>)
 80049e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80049ea:	4b32      	ldr	r3, [pc, #200]	; (8004ab4 <HAL_ADC_MspInit+0x28c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10b      	bne.n	8004a0a <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	4a30      	ldr	r2, [pc, #192]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 80049f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fe:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a16:	4b28      	ldr	r3, [pc, #160]	; (8004ab8 <HAL_ADC_MspInit+0x290>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004a22:	2302      	movs	r3, #2
 8004a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004a28:	230b      	movs	r3, #11
 8004a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004a34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4821      	ldr	r0, [pc, #132]	; (8004ac0 <HAL_ADC_MspInit+0x298>)
 8004a3c:	f003 faa8 	bl	8007f90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a42:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <HAL_ADC_MspInit+0x2ac>)
 8004a44:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a48:	2206      	movs	r2, #6
 8004a4a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a4c:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a52:	4b1f      	ldr	r3, [pc, #124]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a64:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a6c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a70:	2220      	movs	r2, #32
 8004a72:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004a74:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004a7c:	4814      	ldr	r0, [pc, #80]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a7e:	f003 f815 	bl	8007aac <HAL_DMA_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004a88:	f7ff f930 	bl	8003cec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a10      	ldr	r2, [pc, #64]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a90:	651a      	str	r2, [r3, #80]	; 0x50
 8004a92:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <HAL_ADC_MspInit+0x2a8>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2105      	movs	r1, #5
 8004a9c:	2012      	movs	r0, #18
 8004a9e:	f002 ffdb 	bl	8007a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004aa2:	2012      	movs	r0, #18
 8004aa4:	f002 fff4 	bl	8007a90 <HAL_NVIC_EnableIRQ>
}
 8004aa8:	bf00      	nop
 8004aaa:	37d0      	adds	r7, #208	; 0xd0
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	50040000 	.word	0x50040000
 8004ab4:	20003f4c 	.word	0x20003f4c
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	48000800 	.word	0x48000800
 8004ac0:	48000400 	.word	0x48000400
 8004ac4:	200019e0 	.word	0x200019e0
 8004ac8:	40020008 	.word	0x40020008
 8004acc:	50040100 	.word	0x50040100
 8004ad0:	20001a40 	.word	0x20001a40
 8004ad4:	40020408 	.word	0x40020408

08004ad8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_CAN_MspInit+0x8c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d130      	bne.n	8004b5c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <HAL_CAN_MspInit+0x90>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_CAN_MspInit+0x90>)
 8004b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <HAL_CAN_MspInit+0x90>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_CAN_MspInit+0x90>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <HAL_CAN_MspInit+0x90>)
 8004b18:	f043 0302 	orr.w	r3, r3, #2
 8004b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_CAN_MspInit+0x90>)
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b30:	2302      	movs	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004b3c:	2309      	movs	r3, #9
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	4619      	mov	r1, r3
 8004b46:	4809      	ldr	r0, [pc, #36]	; (8004b6c <HAL_CAN_MspInit+0x94>)
 8004b48:	f003 fa22 	bl	8007f90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2105      	movs	r1, #5
 8004b50:	2013      	movs	r0, #19
 8004b52:	f002 ff81 	bl	8007a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004b56:	2013      	movs	r0, #19
 8004b58:	f002 ff9a 	bl	8007a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004b5c:	bf00      	nop
 8004b5e:	3728      	adds	r7, #40	; 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40006400 	.word	0x40006400
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	48000400 	.word	0x48000400

08004b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b0aa      	sub	sp, #168	; 0xa8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	2298      	movs	r2, #152	; 0x98
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f00e ffcc 	bl	8013b1e <memset>
  if(hrtc->Instance==RTC)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_RTC_MspInit+0x74>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d124      	bne.n	8004bda <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b9e:	f107 0310 	add.w	r3, r7, #16
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f005 fe0a 	bl	800a7bc <HAL_RCCEx_PeriphCLKConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004bae:	f7ff f89d 	bl	8003cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <HAL_RTC_MspInit+0x78>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <HAL_RTC_MspInit+0x78>)
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RTC_MspInit+0x78>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <HAL_RTC_MspInit+0x78>)
 8004bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RTC_MspInit+0x78>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bda:	bf00      	nop
 8004bdc:	37a8      	adds	r7, #168	; 0xa8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40002800 	.word	0x40002800
 8004be8:	40021000 	.word	0x40021000

08004bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <HAL_SPI_MspInit+0x9c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d137      	bne.n	8004c7e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_SPI_MspInit+0xa0>)
 8004c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <HAL_SPI_MspInit+0xa0>)
 8004c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c18:	6613      	str	r3, [r2, #96]	; 0x60
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <HAL_SPI_MspInit+0xa0>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_SPI_MspInit+0xa0>)
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_SPI_MspInit+0xa0>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c32:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_SPI_MspInit+0xa0>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004c3e:	2328      	movs	r3, #40	; 0x28
 8004c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c4e:	2305      	movs	r3, #5
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	4619      	mov	r1, r3
 8004c58:	480d      	ldr	r0, [pc, #52]	; (8004c90 <HAL_SPI_MspInit+0xa4>)
 8004c5a:	f003 f999 	bl	8007f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c5e:	2310      	movs	r3, #16
 8004c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c6e:	2305      	movs	r3, #5
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	4619      	mov	r1, r3
 8004c78:	4805      	ldr	r0, [pc, #20]	; (8004c90 <HAL_SPI_MspInit+0xa4>)
 8004c7a:	f003 f989 	bl	8007f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c7e:	bf00      	nop
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40013000 	.word	0x40013000
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	48000400 	.word	0x48000400

08004c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a23      	ldr	r2, [pc, #140]	; (8004d30 <HAL_TIM_Base_MspInit+0x9c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d114      	bne.n	8004cd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2105      	movs	r1, #5
 8004cc2:	201d      	movs	r0, #29
 8004cc4:	f002 fec8 	bl	8007a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cc8:	201d      	movs	r0, #29
 8004cca:	f002 fee1 	bl	8007a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004cce:	e02a      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <HAL_TIM_Base_MspInit+0xa4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d114      	bne.n	8004d04 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004ce0:	f043 0310 	orr.w	r3, r3, #16
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce6:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2105      	movs	r1, #5
 8004cf6:	2036      	movs	r0, #54	; 0x36
 8004cf8:	f002 feae 	bl	8007a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004cfc:	2036      	movs	r0, #54	; 0x36
 8004cfe:	f002 fec7 	bl	8007a90 <HAL_NVIC_EnableIRQ>
}
 8004d02:	e010      	b.n	8004d26 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <HAL_TIM_Base_MspInit+0xa8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10b      	bne.n	8004d26 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d18:	6613      	str	r3, [r2, #96]	; 0x60
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_TIM_Base_MspInit+0xa0>)
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40001000 	.word	0x40001000
 8004d3c:	40013400 	.word	0x40013400

08004d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	; 0x30
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004d50:	2200      	movs	r2, #0
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	2019      	movs	r0, #25
 8004d56:	f002 fe7f 	bl	8007a58 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d5a:	2019      	movs	r0, #25
 8004d5c:	f002 fe98 	bl	8007a90 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_InitTick+0x9c>)
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_InitTick+0x9c>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_InitTick+0x9c>)
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d78:	f107 0210 	add.w	r2, r7, #16
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f005 fc2a 	bl	800a5dc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004d88:	f005 fc12 	bl	800a5b0 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <HAL_InitTick+0xa0>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	0c9b      	lsrs	r3, r3, #18
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_InitTick+0xa4>)
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <HAL_InitTick+0xa8>)
 8004da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_InitTick+0xa4>)
 8004da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004da8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004daa:	4a0e      	ldr	r2, [pc, #56]	; (8004de4 <HAL_InitTick+0xa4>)
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <HAL_InitTick+0xa4>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_InitTick+0xa4>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8004dbc:	4809      	ldr	r0, [pc, #36]	; (8004de4 <HAL_InitTick+0xa4>)
 8004dbe:	f007 fb15 	bl	800c3ec <HAL_TIM_Base_Init>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004dc8:	4806      	ldr	r0, [pc, #24]	; (8004de4 <HAL_InitTick+0xa4>)
 8004dca:	f007 fbcf 	bl	800c56c <HAL_TIM_Base_Start_IT>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	e000      	b.n	8004dd4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3730      	adds	r7, #48	; 0x30
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	431bde83 	.word	0x431bde83
 8004de4:	20003f50 	.word	0x20003f50
 8004de8:	40014400 	.word	0x40014400

08004dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <NMI_Handler+0x4>

08004df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004df6:	e7fe      	b.n	8004df6 <HardFault_Handler+0x4>

08004df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dfc:	e7fe      	b.n	8004dfc <MemManage_Handler+0x4>

08004dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e02:	e7fe      	b.n	8004e02 <BusFault_Handler+0x4>

08004e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <UsageFault_Handler+0x4>

08004e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e1c:	4802      	ldr	r0, [pc, #8]	; (8004e28 <DMA1_Channel1_IRQHandler+0x10>)
 8004e1e:	f002 ff68 	bl	8007cf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200019e0 	.word	0x200019e0

08004e2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <ADC1_2_IRQHandler+0x14>)
 8004e32:	f000 fdd9 	bl	80059e8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004e36:	4803      	ldr	r0, [pc, #12]	; (8004e44 <ADC1_2_IRQHandler+0x18>)
 8004e38:	f000 fdd6 	bl	80059e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20001910 	.word	0x20001910
 8004e44:	20001978 	.word	0x20001978

08004e48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <CAN1_TX_IRQHandler+0x10>)
 8004e4e:	f002 fb1c 	bl	800748a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20001aa0 	.word	0x20001aa0

08004e5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004e62:	f007 fbf3 	bl	800c64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20003f50 	.word	0x20003f50

08004e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <TIM3_IRQHandler+0x10>)
 8004e76:	f007 fbe9 	bl	800c64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20001b60 	.word	0x20001b60

08004e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e88:	4802      	ldr	r0, [pc, #8]	; (8004e94 <TIM6_DAC_IRQHandler+0x10>)
 8004e8a:	f007 fbdf 	bl	800c64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20001bac 	.word	0x20001bac

08004e98 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004e9c:	4802      	ldr	r0, [pc, #8]	; (8004ea8 <DMA2_Channel1_IRQHandler+0x10>)
 8004e9e:	f002 ff28 	bl	8007cf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20001a40 	.word	0x20001a40

08004eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <OTG_FS_IRQHandler+0x10>)
 8004eb2:	f003 fb82 	bl	80085ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20009168 	.word	0x20009168

08004ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
	return 1;
 8004ec4:	2301      	movs	r3, #1
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <_kill>:

int _kill(int pid, int sig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004eda:	f00e fcd5 	bl	8013888 <__errno>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2216      	movs	r2, #22
 8004ee2:	601a      	str	r2, [r3, #0]
	return -1;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_exit>:

void _exit (int status)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ffe7 	bl	8004ed0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f02:	e7fe      	b.n	8004f02 <_exit+0x12>

08004f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	e00a      	b.n	8004f2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f16:	f3af 8000 	nop.w
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	60ba      	str	r2, [r7, #8]
 8004f22:	b2ca      	uxtb	r2, r1
 8004f24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dbf0      	blt.n	8004f16 <_read+0x12>
	}

return len;
 8004f34:	687b      	ldr	r3, [r7, #4]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e009      	b.n	8004f64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	60ba      	str	r2, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	3301      	adds	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	dbf1      	blt.n	8004f50 <_write+0x12>
	}
	return len;
 8004f6c:	687b      	ldr	r3, [r7, #4]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_close>:

int _close(int file)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
	return -1;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f9e:	605a      	str	r2, [r3, #4]
	return 0;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <_isatty>:

int _isatty(int file)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
	return 1;
 8004fb6:	2301      	movs	r3, #1
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
	return 0;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <_sbrk+0x5c>)
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <_sbrk+0x60>)
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <_sbrk+0x64>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <_sbrk+0x64>)
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <_sbrk+0x68>)
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <_sbrk+0x64>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	429a      	cmp	r2, r3
 800500e:	d207      	bcs.n	8005020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005010:	f00e fc3a 	bl	8013888 <__errno>
 8005014:	4603      	mov	r3, r0
 8005016:	220c      	movs	r2, #12
 8005018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800501a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800501e:	e009      	b.n	8005034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005020:	4b08      	ldr	r3, [pc, #32]	; (8005044 <_sbrk+0x64>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <_sbrk+0x64>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	4a05      	ldr	r2, [pc, #20]	; (8005044 <_sbrk+0x64>)
 8005030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20050000 	.word	0x20050000
 8005040:	00000400 	.word	0x00000400
 8005044:	20003f9c 	.word	0x20003f9c
 8005048:	200098a8 	.word	0x200098a8

0800504c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <SystemInit+0x20>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <SystemInit+0x20>)
 8005058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800505c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005074:	f7ff ffea 	bl	800504c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005078:	480c      	ldr	r0, [pc, #48]	; (80050ac <LoopForever+0x6>)
  ldr r1, =_edata
 800507a:	490d      	ldr	r1, [pc, #52]	; (80050b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <LoopForever+0xe>)
  movs r3, #0
 800507e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005080:	e002      	b.n	8005088 <LoopCopyDataInit>

08005082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005086:	3304      	adds	r3, #4

08005088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800508c:	d3f9      	bcc.n	8005082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800508e:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005090:	4c0a      	ldr	r4, [pc, #40]	; (80050bc <LoopForever+0x16>)
  movs r3, #0
 8005092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005094:	e001      	b.n	800509a <LoopFillZerobss>

08005096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005098:	3204      	adds	r2, #4

0800509a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800509c:	d3fb      	bcc.n	8005096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800509e:	f00e fcef 	bl	8013a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050a2:	f7fe f8c1 	bl	8003228 <main>

080050a6 <LoopForever>:

LoopForever:
    b LoopForever
 80050a6:	e7fe      	b.n	80050a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80050a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80050ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b0:	20000588 	.word	0x20000588
  ldr r2, =_sidata
 80050b4:	080171d0 	.word	0x080171d0
  ldr r2, =_sbss
 80050b8:	20000588 	.word	0x20000588
  ldr r4, =_ebss
 80050bc:	200098a4 	.word	0x200098a4

080050c0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050c0:	e7fe      	b.n	80050c0 <CAN1_RX0_IRQHandler>

080050c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050cc:	2003      	movs	r0, #3
 80050ce:	f002 fcb8 	bl	8007a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050d2:	200f      	movs	r0, #15
 80050d4:	f7ff fe34 	bl	8004d40 <HAL_InitTick>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	71fb      	strb	r3, [r7, #7]
 80050e2:	e001      	b.n	80050e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050e4:	f7ff fb78 	bl	80047d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050e8:	79fb      	ldrb	r3, [r7, #7]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_IncTick+0x20>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_IncTick+0x24>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4413      	add	r3, r2
 8005104:	4a04      	ldr	r2, [pc, #16]	; (8005118 <HAL_IncTick+0x24>)
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000022c 	.word	0x2000022c
 8005118:	20003fa0 	.word	0x20003fa0

0800511c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return uwTick;
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <HAL_GetTick+0x14>)
 8005122:	681b      	ldr	r3, [r3, #0]
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20003fa0 	.word	0x20003fa0

08005134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800513c:	f7ff ffee 	bl	800511c <HAL_GetTick>
 8005140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514c:	d005      	beq.n	800515a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_Delay+0x44>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800515a:	bf00      	nop
 800515c:	f7ff ffde 	bl	800511c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d8f7      	bhi.n	800515c <HAL_Delay+0x28>
  {
  }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2000022c 	.word	0x2000022c

0800517c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	609a      	str	r2, [r3, #8]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3360      	adds	r3, #96	; 0x60
 80051f6:	461a      	mov	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b08      	ldr	r3, [pc, #32]	; (8005228 <LL_ADC_SetOffset+0x44>)
 8005206:	4013      	ands	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	03fff000 	.word	0x03fff000

0800522c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3360      	adds	r3, #96	; 0x60
 800523a:	461a      	mov	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3360      	adds	r3, #96	; 0x60
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	431a      	orrs	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	615a      	str	r2, [r3, #20]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3330      	adds	r3, #48	; 0x30
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	4413      	add	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	211f      	movs	r1, #31
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	401a      	ands	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0e9b      	lsrs	r3, r3, #26
 8005312:	f003 011f 	and.w	r1, r3, #31
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	431a      	orrs	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3314      	adds	r3, #20
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0e5b      	lsrs	r3, r3, #25
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	4413      	add	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	0d1b      	lsrs	r3, r3, #20
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2107      	movs	r1, #7
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	401a      	ands	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	fa01 f303 	lsl.w	r3, r1, r3
 800539c:	431a      	orrs	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c8:	43db      	mvns	r3, r3
 80053ca:	401a      	ands	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0318 	and.w	r3, r3, #24
 80053d2:	4908      	ldr	r1, [pc, #32]	; (80053f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80053d4:	40d9      	lsrs	r1, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	400b      	ands	r3, r1
 80053da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053de:	431a      	orrs	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	0007ffff 	.word	0x0007ffff

080053f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 031f 	and.w	r3, r3, #31
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6093      	str	r3, [r2, #8]
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d101      	bne.n	800546e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800548c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b8:	d101      	bne.n	80054be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054e0:	f043 0201 	orr.w	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005508:	f043 0202 	orr.w	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <LL_ADC_IsEnabled+0x18>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <LL_ADC_IsEnabled+0x1a>
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d101      	bne.n	800555a <LL_ADC_IsDisableOngoing+0x18>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <LL_ADC_IsDisableOngoing+0x1a>
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800557c:	f043 0204 	orr.w	r2, r3, #4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d101      	bne.n	80055a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d101      	bne.n	80055ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e134      	b.n	8005860 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff f90f 	bl	8004828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff19 	bl	8005454 <LL_ADC_IsDeepPowerDownEnabled>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff feff 	bl	8005430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff ff34 	bl	80054a4 <LL_ADC_IsInternalRegulatorEnabled>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d115      	bne.n	800566e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff18 	bl	800547c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800564c:	4b86      	ldr	r3, [pc, #536]	; (8005868 <HAL_ADC_Init+0x28c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	099b      	lsrs	r3, r3, #6
 8005652:	4a86      	ldr	r2, [pc, #536]	; (800586c <HAL_ADC_Init+0x290>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	3301      	adds	r3, #1
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005660:	e002      	b.n	8005668 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3b01      	subs	r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f9      	bne.n	8005662 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff16 	bl	80054a4 <LL_ADC_IsInternalRegulatorEnabled>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	f043 0210 	orr.w	r2, r3, #16
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff ff76 	bl	8005590 <LL_ADC_REG_IsConversionOngoing>
 80056a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 80cd 	bne.w	800584e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 80c9 	bne.w	800584e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056c4:	f043 0202 	orr.w	r2, r3, #2
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ff23 	bl	800551c <LL_ADC_IsEnabled>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d110      	bne.n	80056fe <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056dc:	4864      	ldr	r0, [pc, #400]	; (8005870 <HAL_ADC_Init+0x294>)
 80056de:	f7ff ff1d 	bl	800551c <LL_ADC_IsEnabled>
 80056e2:	4604      	mov	r4, r0
 80056e4:	4863      	ldr	r0, [pc, #396]	; (8005874 <HAL_ADC_Init+0x298>)
 80056e6:	f7ff ff19 	bl	800551c <LL_ADC_IsEnabled>
 80056ea:	4603      	mov	r3, r0
 80056ec:	4323      	orrs	r3, r4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4619      	mov	r1, r3
 80056f8:	485f      	ldr	r0, [pc, #380]	; (8005878 <HAL_ADC_Init+0x29c>)
 80056fa:	f7ff fd3f 	bl	800517c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	7e5b      	ldrb	r3, [r3, #25]
 8005702:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005708:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800570e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005714:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800571c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d106      	bne.n	800573a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	3b01      	subs	r3, #1
 8005732:	045b      	lsls	r3, r3, #17
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	4b47      	ldr	r3, [pc, #284]	; (800587c <HAL_ADC_Init+0x2a0>)
 800575e:	4013      	ands	r3, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	430b      	orrs	r3, r1
 8005768:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff ff0e 	bl	8005590 <LL_ADC_REG_IsConversionOngoing>
 8005774:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff ff1b 	bl	80055b6 <LL_ADC_INJ_IsConversionOngoing>
 8005780:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d140      	bne.n	800580a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d13d      	bne.n	800580a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7e1b      	ldrb	r3, [r3, #24]
 8005796:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005798:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b0:	f023 0306 	bic.w	r3, r3, #6
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	69b9      	ldr	r1, [r7, #24]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d118      	bne.n	80057fa <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057d2:	f023 0304 	bic.w	r3, r3, #4
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057de:	4311      	orrs	r1, r2
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057e4:	4311      	orrs	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057ea:	430a      	orrs	r2, r1
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	611a      	str	r2, [r3, #16]
 80057f8:	e007      	b.n	800580a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d10c      	bne.n	800582c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f023 010f 	bic.w	r1, r3, #15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	1e5a      	subs	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
 800582a:	e007      	b.n	800583c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 020f 	bic.w	r2, r2, #15
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	f023 0303 	bic.w	r3, r3, #3
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	659a      	str	r2, [r3, #88]	; 0x58
 800584c:	e007      	b.n	800585e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	f043 0210 	orr.w	r2, r3, #16
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800585e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3724      	adds	r7, #36	; 0x24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd90      	pop	{r4, r7, pc}
 8005868:	20000224 	.word	0x20000224
 800586c:	053e2d63 	.word	0x053e2d63
 8005870:	50040000 	.word	0x50040000
 8005874:	50040100 	.word	0x50040100
 8005878:	50040300 	.word	0x50040300
 800587c:	fff0c007 	.word	0xfff0c007

08005880 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800588c:	4850      	ldr	r0, [pc, #320]	; (80059d0 <HAL_ADC_Start_DMA+0x150>)
 800588e:	f7ff fdb3 	bl	80053f8 <LL_ADC_GetMultimode>
 8005892:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fe79 	bl	8005590 <LL_ADC_REG_IsConversionOngoing>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f040 808e 	bne.w	80059c2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_ADC_Start_DMA+0x34>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e089      	b.n	80059c8 <HAL_ADC_Start_DMA+0x148>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b05      	cmp	r3, #5
 80058c6:	d002      	beq.n	80058ce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b09      	cmp	r3, #9
 80058cc:	d172      	bne.n	80059b4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fec8 	bl	8006664 <ADC_Enable>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d165      	bne.n	80059aa <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a37      	ldr	r2, [pc, #220]	; (80059d4 <HAL_ADC_Start_DMA+0x154>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d002      	beq.n	8005902 <HAL_ADC_Start_DMA+0x82>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	e000      	b.n	8005904 <HAL_ADC_Start_DMA+0x84>
 8005902:	4b35      	ldr	r3, [pc, #212]	; (80059d8 <HAL_ADC_Start_DMA+0x158>)
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	4293      	cmp	r3, r2
 800590a:	d002      	beq.n	8005912 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d006      	beq.n	8005938 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	f023 0206 	bic.w	r2, r3, #6
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	65da      	str	r2, [r3, #92]	; 0x5c
 8005936:	e002      	b.n	800593e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005942:	4a26      	ldr	r2, [pc, #152]	; (80059dc <HAL_ADC_Start_DMA+0x15c>)
 8005944:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <HAL_ADC_Start_DMA+0x160>)
 800594c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	4a24      	ldr	r2, [pc, #144]	; (80059e4 <HAL_ADC_Start_DMA+0x164>)
 8005954:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	221c      	movs	r2, #28
 800595c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0210 	orr.w	r2, r2, #16
 8005974:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3340      	adds	r3, #64	; 0x40
 8005990:	4619      	mov	r1, r3
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f002 f931 	bl	8007bfc <HAL_DMA_Start_IT>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fde0 	bl	8005568 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80059a8:	e00d      	b.n	80059c6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80059b2:	e008      	b.n	80059c6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80059c0:	e001      	b.n	80059c6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	50040300 	.word	0x50040300
 80059d4:	50040100 	.word	0x50040100
 80059d8:	50040000 	.word	0x50040000
 80059dc:	0800682f 	.word	0x0800682f
 80059e0:	08006907 	.word	0x08006907
 80059e4:	08006923 	.word	0x08006923

080059e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a04:	4882      	ldr	r0, [pc, #520]	; (8005c10 <HAL_ADC_IRQHandler+0x228>)
 8005a06:	f7ff fcf7 	bl	80053f8 <LL_ADC_GetMultimode>
 8005a0a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d017      	beq.n	8005a46 <HAL_ADC_IRQHandler+0x5e>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 f867 	bl	8006b0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2202      	movs	r2, #2
 8005a44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <HAL_ADC_IRQHandler+0x72>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8083 	beq.w	8005b6c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d07d      	beq.n	8005b6c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d105      	bne.n	8005a88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fc11 	bl	80052b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d062      	beq.n	8005b5e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5d      	ldr	r2, [pc, #372]	; (8005c14 <HAL_ADC_IRQHandler+0x22c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d002      	beq.n	8005aa8 <HAL_ADC_IRQHandler+0xc0>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	e000      	b.n	8005aaa <HAL_ADC_IRQHandler+0xc2>
 8005aa8:	4b5b      	ldr	r3, [pc, #364]	; (8005c18 <HAL_ADC_IRQHandler+0x230>)
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d008      	beq.n	8005ac4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d002      	beq.n	8005ac4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	d104      	bne.n	8005ace <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	e00c      	b.n	8005ae8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a50      	ldr	r2, [pc, #320]	; (8005c14 <HAL_ADC_IRQHandler+0x22c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d002      	beq.n	8005ade <HAL_ADC_IRQHandler+0xf6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	e000      	b.n	8005ae0 <HAL_ADC_IRQHandler+0xf8>
 8005ade:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <HAL_ADC_IRQHandler+0x230>)
 8005ae0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d135      	bne.n	8005b5e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d12e      	bne.n	8005b5e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fd43 	bl	8005590 <LL_ADC_REG_IsConversionOngoing>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11a      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 020c 	bic.w	r2, r2, #12
 8005b1e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d112      	bne.n	8005b5e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	659a      	str	r2, [r3, #88]	; 0x58
 8005b44:	e00b      	b.n	8005b5e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	f043 0210 	orr.w	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f95c 	bl	8005e1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	220c      	movs	r2, #12
 8005b6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_ADC_IRQHandler+0x198>
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 809f 	beq.w	8005cca <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8099 	beq.w	8005cca <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fbbc 	bl	8005332 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005bba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fb77 	bl	80052b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bc6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <HAL_ADC_IRQHandler+0x22c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d002      	beq.n	8005bd8 <HAL_ADC_IRQHandler+0x1f0>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	e000      	b.n	8005bda <HAL_ADC_IRQHandler+0x1f2>
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <HAL_ADC_IRQHandler+0x230>)
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6812      	ldr	r2, [r2, #0]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d008      	beq.n	8005bf4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b06      	cmp	r3, #6
 8005bec:	d002      	beq.n	8005bf4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b07      	cmp	r3, #7
 8005bf2:	d104      	bne.n	8005bfe <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	e013      	b.n	8005c26 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a04      	ldr	r2, [pc, #16]	; (8005c14 <HAL_ADC_IRQHandler+0x22c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d009      	beq.n	8005c1c <HAL_ADC_IRQHandler+0x234>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	e007      	b.n	8005c1e <HAL_ADC_IRQHandler+0x236>
 8005c0e:	bf00      	nop
 8005c10:	50040300 	.word	0x50040300
 8005c14:	50040100 	.word	0x50040100
 8005c18:	50040000 	.word	0x50040000
 8005c1c:	4b7d      	ldr	r3, [pc, #500]	; (8005e14 <HAL_ADC_IRQHandler+0x42c>)
 8005c1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d047      	beq.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_ADC_IRQHandler+0x25e>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d03f      	beq.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d13a      	bne.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d133      	bne.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d12e      	bne.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fca7 	bl	80055b6 <LL_ADC_INJ_IsConversionOngoing>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11a      	bne.n	8005ca4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c7c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d112      	bne.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ca2:	e00b      	b.n	8005cbc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca8:	f043 0210 	orr.w	r2, r3, #16
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fefd 	bl	8006abc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2260      	movs	r2, #96	; 0x60
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d011      	beq.n	8005cf8 <HAL_ADC_IRQHandler+0x310>
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8aa 	bl	8005e44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d012      	beq.n	8005d28 <HAL_ADC_IRQHandler+0x340>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00d      	beq.n	8005d28 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fee3 	bl	8006ae4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d012      	beq.n	8005d58 <HAL_ADC_IRQHandler+0x370>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fed5 	bl	8006af8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d036      	beq.n	8005dd0 <HAL_ADC_IRQHandler+0x3e8>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d031      	beq.n	8005dd0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005d74:	2301      	movs	r3, #1
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
 8005d78:	e014      	b.n	8005da4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d80:	4825      	ldr	r0, [pc, #148]	; (8005e18 <HAL_ADC_IRQHandler+0x430>)
 8005d82:	f7ff fb47 	bl	8005414 <LL_ADC_GetMultiDMATransfer>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d90:	e008      	b.n	8005da4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005da0:	2301      	movs	r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10e      	bne.n	8005dc8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	f043 0202 	orr.w	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f848 	bl	8005e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <HAL_ADC_IRQHandler+0x424>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d013      	beq.n	8005e0c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df4:	f043 0208 	orr.w	r2, r3, #8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e04:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fe62 	bl	8006ad0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005e0c:	bf00      	nop
 8005e0e:	3728      	adds	r7, #40	; 0x28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	50040000 	.word	0x50040000
 8005e18:	50040300 	.word	0x50040300

08005e1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b0b6      	sub	sp, #216	; 0xd8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x22>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e3d5      	b.n	800663a <HAL_ADC_ConfigChannel+0x7ce>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fb78 	bl	8005590 <LL_ADC_REG_IsConversionOngoing>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 83ba 	bne.w	800661c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d824      	bhi.n	8005efa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	3b02      	subs	r3, #2
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d81b      	bhi.n	8005ef2 <HAL_ADC_ConfigChannel+0x86>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_ADC_ConfigChannel+0x54>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005ed9 	.word	0x08005ed9
 8005ec8:	08005ee1 	.word	0x08005ee1
 8005ecc:	08005ee9 	.word	0x08005ee9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	220c      	movs	r2, #12
 8005ed4:	605a      	str	r2, [r3, #4]
          break;
 8005ed6:	e011      	b.n	8005efc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2212      	movs	r2, #18
 8005edc:	605a      	str	r2, [r3, #4]
          break;
 8005ede:	e00d      	b.n	8005efc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2218      	movs	r2, #24
 8005ee4:	605a      	str	r2, [r3, #4]
          break;
 8005ee6:	e009      	b.n	8005efc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eee:	605a      	str	r2, [r3, #4]
          break;
 8005ef0:	e004      	b.n	8005efc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2206      	movs	r2, #6
 8005ef6:	605a      	str	r2, [r3, #4]
          break;
 8005ef8:	e000      	b.n	8005efc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005efa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f7ff f9e6 	bl	80052da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fb3c 	bl	8005590 <LL_ADC_REG_IsConversionOngoing>
 8005f18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fb48 	bl	80055b6 <LL_ADC_INJ_IsConversionOngoing>
 8005f26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 81c1 	bne.w	80062b6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 81bc 	bne.w	80062b6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f46:	d10f      	bne.n	8005f68 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2200      	movs	r2, #0
 8005f52:	4619      	mov	r1, r3
 8005f54:	f7ff fa00 	bl	8005358 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff f994 	bl	800528e <LL_ADC_SetSamplingTimeCommonConfig>
 8005f66:	e00e      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6819      	ldr	r1, [r3, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f7ff f9ef 	bl	8005358 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f984 	bl	800528e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	08db      	lsrs	r3, r3, #3
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d00a      	beq.n	8005fbe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6919      	ldr	r1, [r3, #16]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fb8:	f7ff f914 	bl	80051e4 <LL_ADC_SetOffset>
 8005fbc:	e17b      	b.n	80062b6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff f931 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <HAL_ADC_ConfigChannel+0x17e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff f926 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	0e9b      	lsrs	r3, r3, #26
 8005fe4:	f003 021f 	and.w	r2, r3, #31
 8005fe8:	e01e      	b.n	8006028 <HAL_ADC_ConfigChannel+0x1bc>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff f91b 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006000:	fa93 f3a3 	rbit	r3, r3
 8006004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800600c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006018:	2320      	movs	r3, #32
 800601a:	e004      	b.n	8006026 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800601c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006020:	fab3 f383 	clz	r3, r3
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x1d4>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	0e9b      	lsrs	r3, r3, #26
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	e018      	b.n	8006072 <HAL_ADC_ConfigChannel+0x206>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800604c:	fa93 f3a3 	rbit	r3, r3
 8006050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800605c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8006064:	2320      	movs	r3, #32
 8006066:	e004      	b.n	8006072 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800606c:	fab3 f383 	clz	r3, r3
 8006070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006072:	429a      	cmp	r2, r3
 8006074:	d106      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff f8ea 	bl	8005258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2101      	movs	r1, #1
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff f8ce 	bl	800522c <LL_ADC_GetOffsetChannel>
 8006090:	4603      	mov	r3, r0
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <HAL_ADC_ConfigChannel+0x244>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2101      	movs	r1, #1
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff f8c3 	bl	800522c <LL_ADC_GetOffsetChannel>
 80060a6:	4603      	mov	r3, r0
 80060a8:	0e9b      	lsrs	r3, r3, #26
 80060aa:	f003 021f 	and.w	r2, r3, #31
 80060ae:	e01e      	b.n	80060ee <HAL_ADC_ConfigChannel+0x282>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f8b8 	bl	800522c <LL_ADC_GetOffsetChannel>
 80060bc:	4603      	mov	r3, r0
 80060be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060c6:	fa93 f3a3 	rbit	r3, r3
 80060ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80060ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80060d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80060de:	2320      	movs	r3, #32
 80060e0:	e004      	b.n	80060ec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80060e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d105      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x29a>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	0e9b      	lsrs	r3, r3, #26
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	e018      	b.n	8006138 <HAL_ADC_ConfigChannel+0x2cc>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006112:	fa93 f3a3 	rbit	r3, r3
 8006116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800611a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800611e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006122:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800612a:	2320      	movs	r3, #32
 800612c:	e004      	b.n	8006138 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800612e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006132:	fab3 f383 	clz	r3, r3
 8006136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006138:	429a      	cmp	r2, r3
 800613a:	d106      	bne.n	800614a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff f887 	bl	8005258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2102      	movs	r1, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff f86b 	bl	800522c <LL_ADC_GetOffsetChannel>
 8006156:	4603      	mov	r3, r0
 8006158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <HAL_ADC_ConfigChannel+0x30a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff f860 	bl	800522c <LL_ADC_GetOffsetChannel>
 800616c:	4603      	mov	r3, r0
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	e01e      	b.n	80061b4 <HAL_ADC_ConfigChannel+0x348>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2102      	movs	r1, #2
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff f855 	bl	800522c <LL_ADC_GetOffsetChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800618c:	fa93 f3a3 	rbit	r3, r3
 8006190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800619c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80061a4:	2320      	movs	r3, #32
 80061a6:	e004      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80061a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061ac:	fab3 f383 	clz	r3, r3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_ADC_ConfigChannel+0x360>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	0e9b      	lsrs	r3, r3, #26
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	e016      	b.n	80061fa <HAL_ADC_ConfigChannel+0x38e>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80061de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80061e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80061ec:	2320      	movs	r3, #32
 80061ee:	e004      	b.n	80061fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80061f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f4:	fab3 f383 	clz	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d106      	bne.n	800620c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	2102      	movs	r1, #2
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff f826 	bl	8005258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2103      	movs	r1, #3
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f80a 	bl	800522c <LL_ADC_GetOffsetChannel>
 8006218:	4603      	mov	r3, r0
 800621a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x3cc>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2103      	movs	r1, #3
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe ffff 	bl	800522c <LL_ADC_GetOffsetChannel>
 800622e:	4603      	mov	r3, r0
 8006230:	0e9b      	lsrs	r3, r3, #26
 8006232:	f003 021f 	and.w	r2, r3, #31
 8006236:	e017      	b.n	8006268 <HAL_ADC_ConfigChannel+0x3fc>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2103      	movs	r1, #3
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fff4 	bl	800522c <LL_ADC_GetOffsetChannel>
 8006244:	4603      	mov	r3, r0
 8006246:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624a:	fa93 f3a3 	rbit	r3, r3
 800624e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006252:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800625a:	2320      	movs	r3, #32
 800625c:	e003      	b.n	8006266 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800625e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006260:	fab3 f383 	clz	r3, r3
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <HAL_ADC_ConfigChannel+0x414>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	0e9b      	lsrs	r3, r3, #26
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	e011      	b.n	80062a4 <HAL_ADC_ConfigChannel+0x438>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800628e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006290:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006298:	2320      	movs	r3, #32
 800629a:	e003      	b.n	80062a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800629c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629e:	fab3 f383 	clz	r3, r3
 80062a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d106      	bne.n	80062b6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2200      	movs	r2, #0
 80062ae:	2103      	movs	r1, #3
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe ffd1 	bl	8005258 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff f92e 	bl	800551c <LL_ADC_IsEnabled>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 8140 	bne.w	8006548 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f7ff f86b 	bl	80053b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4a8f      	ldr	r2, [pc, #572]	; (800651c <HAL_ADC_ConfigChannel+0x6b0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	f040 8131 	bne.w	8006548 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <HAL_ADC_ConfigChannel+0x4a2>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	0e9b      	lsrs	r3, r3, #26
 80062fc:	3301      	adds	r3, #1
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2b09      	cmp	r3, #9
 8006304:	bf94      	ite	ls
 8006306:	2301      	movls	r3, #1
 8006308:	2300      	movhi	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e019      	b.n	8006342 <HAL_ADC_ConfigChannel+0x4d6>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800631c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800631e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006326:	2320      	movs	r3, #32
 8006328:	e003      	b.n	8006332 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800632a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800632c:	fab3 f383 	clz	r3, r3
 8006330:	b2db      	uxtb	r3, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2b09      	cmp	r3, #9
 800633a:	bf94      	ite	ls
 800633c:	2301      	movls	r3, #1
 800633e:	2300      	movhi	r3, #0
 8006340:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006342:	2b00      	cmp	r3, #0
 8006344:	d079      	beq.n	800643a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x4f6>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	0e9b      	lsrs	r3, r3, #26
 8006358:	3301      	adds	r3, #1
 800635a:	069b      	lsls	r3, r3, #26
 800635c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006360:	e015      	b.n	800638e <HAL_ADC_ConfigChannel+0x522>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636a:	fa93 f3a3 	rbit	r3, r3
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800637a:	2320      	movs	r3, #32
 800637c:	e003      	b.n	8006386 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800637e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006380:	fab3 f383 	clz	r3, r3
 8006384:	b2db      	uxtb	r3, r3
 8006386:	3301      	adds	r3, #1
 8006388:	069b      	lsls	r3, r3, #26
 800638a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_ADC_ConfigChannel+0x542>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	0e9b      	lsrs	r3, r3, #26
 80063a0:	3301      	adds	r3, #1
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	2101      	movs	r1, #1
 80063a8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ac:	e017      	b.n	80063de <HAL_ADC_ConfigChannel+0x572>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b6:	fa93 f3a3 	rbit	r3, r3
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80063c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80063c6:	2320      	movs	r3, #32
 80063c8:	e003      	b.n	80063d2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80063ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063cc:	fab3 f383 	clz	r3, r3
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	3301      	adds	r3, #1
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	ea42 0103 	orr.w	r1, r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <HAL_ADC_ConfigChannel+0x598>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	0e9b      	lsrs	r3, r3, #26
 80063f4:	3301      	adds	r3, #1
 80063f6:	f003 021f 	and.w	r2, r3, #31
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	e018      	b.n	8006436 <HAL_ADC_ConfigChannel+0x5ca>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	fa93 f3a3 	rbit	r3, r3
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800641c:	2320      	movs	r3, #32
 800641e:	e003      	b.n	8006428 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006422:	fab3 f383 	clz	r3, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	3301      	adds	r3, #1
 800642a:	f003 021f 	and.w	r2, r3, #31
 800642e:	4613      	mov	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006436:	430b      	orrs	r3, r1
 8006438:	e081      	b.n	800653e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006442:	2b00      	cmp	r3, #0
 8006444:	d107      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x5ea>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	0e9b      	lsrs	r3, r3, #26
 800644c:	3301      	adds	r3, #1
 800644e:	069b      	lsls	r3, r3, #26
 8006450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006454:	e015      	b.n	8006482 <HAL_ADC_ConfigChannel+0x616>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	fa93 f3a3 	rbit	r3, r3
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800646e:	2320      	movs	r3, #32
 8006470:	e003      	b.n	800647a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	fab3 f383 	clz	r3, r3
 8006478:	b2db      	uxtb	r3, r3
 800647a:	3301      	adds	r3, #1
 800647c:	069b      	lsls	r3, r3, #26
 800647e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <HAL_ADC_ConfigChannel+0x636>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	0e9b      	lsrs	r3, r3, #26
 8006494:	3301      	adds	r3, #1
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f303 	lsl.w	r3, r1, r3
 80064a0:	e017      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x666>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	fa93 f3a3 	rbit	r3, r3
 80064ae:	61fb      	str	r3, [r7, #28]
  return result;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80064ba:	2320      	movs	r3, #32
 80064bc:	e003      	b.n	80064c6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	fab3 f383 	clz	r3, r3
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	3301      	adds	r3, #1
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	ea42 0103 	orr.w	r1, r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x692>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	0e9b      	lsrs	r3, r3, #26
 80064e8:	3301      	adds	r3, #1
 80064ea:	f003 021f 	and.w	r2, r3, #31
 80064ee:	4613      	mov	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	4413      	add	r3, r2
 80064f4:	3b1e      	subs	r3, #30
 80064f6:	051b      	lsls	r3, r3, #20
 80064f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064fc:	e01e      	b.n	800653c <HAL_ADC_ConfigChannel+0x6d0>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	fa93 f3a3 	rbit	r3, r3
 800650a:	613b      	str	r3, [r7, #16]
  return result;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006516:	2320      	movs	r3, #32
 8006518:	e006      	b.n	8006528 <HAL_ADC_ConfigChannel+0x6bc>
 800651a:	bf00      	nop
 800651c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3301      	adds	r3, #1
 800652a:	f003 021f 	and.w	r2, r3, #31
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	3b1e      	subs	r3, #30
 8006536:	051b      	lsls	r3, r3, #20
 8006538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800653c:	430b      	orrs	r3, r1
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	6892      	ldr	r2, [r2, #8]
 8006542:	4619      	mov	r1, r3
 8006544:	f7fe ff08 	bl	8005358 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b3d      	ldr	r3, [pc, #244]	; (8006644 <HAL_ADC_ConfigChannel+0x7d8>)
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d06c      	beq.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006554:	483c      	ldr	r0, [pc, #240]	; (8006648 <HAL_ADC_ConfigChannel+0x7dc>)
 8006556:	f7fe fe37 	bl	80051c8 <LL_ADC_GetCommonPathInternalCh>
 800655a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <HAL_ADC_ConfigChannel+0x7e0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d127      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800656c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d121      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a35      	ldr	r2, [pc, #212]	; (8006650 <HAL_ADC_ConfigChannel+0x7e4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d157      	bne.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800657e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006586:	4619      	mov	r1, r3
 8006588:	482f      	ldr	r0, [pc, #188]	; (8006648 <HAL_ADC_ConfigChannel+0x7dc>)
 800658a:	f7fe fe0a 	bl	80051a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800658e:	4b31      	ldr	r3, [pc, #196]	; (8006654 <HAL_ADC_ConfigChannel+0x7e8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	099b      	lsrs	r3, r3, #6
 8006594:	4a30      	ldr	r2, [pc, #192]	; (8006658 <HAL_ADC_ConfigChannel+0x7ec>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	099b      	lsrs	r3, r3, #6
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	4613      	mov	r3, r2
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80065a8:	e002      	b.n	80065b0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f9      	bne.n	80065aa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065b6:	e03a      	b.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a27      	ldr	r2, [pc, #156]	; (800665c <HAL_ADC_ConfigChannel+0x7f0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d113      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x77e>
 80065c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <HAL_ADC_ConfigChannel+0x7e4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d12a      	bne.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065e0:	4619      	mov	r1, r3
 80065e2:	4819      	ldr	r0, [pc, #100]	; (8006648 <HAL_ADC_ConfigChannel+0x7dc>)
 80065e4:	f7fe fddd 	bl	80051a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065e8:	e021      	b.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <HAL_ADC_ConfigChannel+0x7f4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d11c      	bne.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d116      	bne.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a12      	ldr	r2, [pc, #72]	; (8006650 <HAL_ADC_ConfigChannel+0x7e4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d111      	bne.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800660a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800660e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006612:	4619      	mov	r1, r3
 8006614:	480c      	ldr	r0, [pc, #48]	; (8006648 <HAL_ADC_ConfigChannel+0x7dc>)
 8006616:	f7fe fdc4 	bl	80051a2 <LL_ADC_SetCommonPathInternalCh>
 800661a:	e008      	b.n	800662e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006636:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800663a:	4618      	mov	r0, r3
 800663c:	37d8      	adds	r7, #216	; 0xd8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	80080000 	.word	0x80080000
 8006648:	50040300 	.word	0x50040300
 800664c:	c7520000 	.word	0xc7520000
 8006650:	50040000 	.word	0x50040000
 8006654:	20000224 	.word	0x20000224
 8006658:	053e2d63 	.word	0x053e2d63
 800665c:	cb840000 	.word	0xcb840000
 8006660:	80000001 	.word	0x80000001

08006664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800666c:	2300      	movs	r3, #0
 800666e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe ff51 	bl	800551c <LL_ADC_IsEnabled>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d169      	bne.n	8006754 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	4b36      	ldr	r3, [pc, #216]	; (8006760 <ADC_Enable+0xfc>)
 8006688:	4013      	ands	r3, r2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006692:	f043 0210 	orr.w	r2, r3, #16
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669e:	f043 0201 	orr.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e055      	b.n	8006756 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe ff0c 	bl	80054cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80066b4:	482b      	ldr	r0, [pc, #172]	; (8006764 <ADC_Enable+0x100>)
 80066b6:	f7fe fd87 	bl	80051c8 <LL_ADC_GetCommonPathInternalCh>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d013      	beq.n	80066ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066c4:	4b28      	ldr	r3, [pc, #160]	; (8006768 <ADC_Enable+0x104>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	099b      	lsrs	r3, r3, #6
 80066ca:	4a28      	ldr	r2, [pc, #160]	; (800676c <ADC_Enable+0x108>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	099b      	lsrs	r3, r3, #6
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	4613      	mov	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80066de:	e002      	b.n	80066e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f9      	bne.n	80066e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80066ec:	f7fe fd16 	bl	800511c <HAL_GetTick>
 80066f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066f2:	e028      	b.n	8006746 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe ff0f 	bl	800551c <LL_ADC_IsEnabled>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fedf 	bl	80054cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800670e:	f7fe fd05 	bl	800511c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d914      	bls.n	8006746 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	d00d      	beq.n	8006746 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672e:	f043 0210 	orr.w	r2, r3, #16
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673a:	f043 0201 	orr.w	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e007      	b.n	8006756 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d1cf      	bne.n	80066f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	8000003f 	.word	0x8000003f
 8006764:	50040300 	.word	0x50040300
 8006768:	20000224 	.word	0x20000224
 800676c:	053e2d63 	.word	0x053e2d63

08006770 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fee0 	bl	8005542 <LL_ADC_IsDisableOngoing>
 8006782:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fec7 	bl	800551c <LL_ADC_IsEnabled>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d047      	beq.n	8006824 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d144      	bne.n	8006824 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 030d 	and.w	r3, r3, #13
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d10c      	bne.n	80067c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fea1 	bl	80054f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2203      	movs	r2, #3
 80067b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80067ba:	f7fe fcaf 	bl	800511c <HAL_GetTick>
 80067be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067c0:	e029      	b.n	8006816 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c6:	f043 0210 	orr.w	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e023      	b.n	8006826 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80067de:	f7fe fc9d 	bl	800511c <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d914      	bls.n	8006816 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00d      	beq.n	8006816 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	f043 0210 	orr.w	r2, r3, #16
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e007      	b.n	8006826 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1dc      	bne.n	80067de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006844:	2b00      	cmp	r3, #0
 8006846:	d14b      	bne.n	80068e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d021      	beq.n	80068a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fd24 	bl	80052b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d032      	beq.n	80068d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d12b      	bne.n	80068d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11f      	bne.n	80068d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	659a      	str	r2, [r3, #88]	; 0x58
 80068a4:	e018      	b.n	80068d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d111      	bne.n	80068d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	f043 0201 	orr.w	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff fa9f 	bl	8005e1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80068de:	e00e      	b.n	80068fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff fab3 	bl	8005e58 <HAL_ADC_ErrorCallback>
}
 80068f2:	e004      	b.n	80068fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff fa8b 	bl	8005e30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006934:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006940:	f043 0204 	orr.w	r2, r3, #4
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fa85 	bl	8005e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <LL_ADC_IsEnabled>:
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <LL_ADC_IsEnabled+0x18>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <LL_ADC_IsEnabled+0x1a>
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_ADC_StartCalibration>:
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800698e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006998:	4313      	orrs	r3, r2
 800699a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	609a      	str	r2, [r3, #8]
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <LL_ADC_IsCalibrationOnGoing>:
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c2:	d101      	bne.n	80069c8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <LL_ADC_IsCalibrationOnGoing+0x1c>
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d101      	bne.n	80069ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_ADCEx_Calibration_Start+0x1c>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e04d      	b.n	8006ab4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fea5 	bl	8006770 <ADC_Disable>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d136      	bne.n	8006a9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a38:	f023 0302 	bic.w	r3, r3, #2
 8006a3c:	f043 0202 	orr.w	r2, r3, #2
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff ff96 	bl	800697c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a50:	e014      	b.n	8006a7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006a5e:	d30d      	bcc.n	8006a7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a64:	f023 0312 	bic.w	r3, r3, #18
 8006a68:	f043 0210 	orr.w	r2, r3, #16
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e01b      	b.n	8006ab4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff ff94 	bl	80069ae <LL_ADC_IsCalibrationOnGoing>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e2      	bne.n	8006a52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	f043 0201 	orr.w	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8006a9c:	e005      	b.n	8006aaa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa2:	f043 0210 	orr.w	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b0a1      	sub	sp, #132	; 0x84
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e089      	b.n	8006c52 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006b46:	2300      	movs	r3, #0
 8006b48:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a42      	ldr	r2, [pc, #264]	; (8006c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d102      	bne.n	8006b5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006b58:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e001      	b.n	8006b62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6c:	f043 0220 	orr.w	r2, r3, #32
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e068      	b.n	8006c52 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff ff27 	bl	80069d6 <LL_ADC_REG_IsConversionOngoing>
 8006b88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff ff21 	bl	80069d6 <LL_ADC_REG_IsConversionOngoing>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d14a      	bne.n	8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d147      	bne.n	8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ba0:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006ba2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d027      	beq.n	8006bfc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bbe:	035b      	lsls	r3, r3, #13
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bc8:	4824      	ldr	r0, [pc, #144]	; (8006c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006bca:	f7ff fec4 	bl	8006956 <LL_ADC_IsEnabled>
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4823      	ldr	r0, [pc, #140]	; (8006c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006bd2:	f7ff fec0 	bl	8006956 <LL_ADC_IsEnabled>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4323      	orrs	r3, r4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d132      	bne.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006be6:	f023 030f 	bic.w	r3, r3, #15
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	6892      	ldr	r2, [r2, #8]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006bfa:	e023      	b.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c08:	4814      	ldr	r0, [pc, #80]	; (8006c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c0a:	f7ff fea4 	bl	8006956 <LL_ADC_IsEnabled>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4813      	ldr	r0, [pc, #76]	; (8006c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006c12:	f7ff fea0 	bl	8006956 <LL_ADC_IsEnabled>
 8006c16:	4603      	mov	r3, r0
 8006c18:	4323      	orrs	r3, r4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d112      	bne.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c26:	f023 030f 	bic.w	r3, r3, #15
 8006c2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c2e:	e009      	b.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006c42:	e000      	b.n	8006c46 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006c4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3784      	adds	r7, #132	; 0x84
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd90      	pop	{r4, r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	50040000 	.word	0x50040000
 8006c60:	50040100 	.word	0x50040100
 8006c64:	50040300 	.word	0x50040300

08006c68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e0ed      	b.n	8006e56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fd ff26 	bl	8004ad8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c9c:	f7fe fa3e 	bl	800511c <HAL_GetTick>
 8006ca0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ca2:	e012      	b.n	8006cca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ca4:	f7fe fa3a 	bl	800511c <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b0a      	cmp	r3, #10
 8006cb0:	d90b      	bls.n	8006cca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e0c5      	b.n	8006e56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0e5      	beq.n	8006ca4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0202 	bic.w	r2, r2, #2
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ce8:	f7fe fa18 	bl	800511c <HAL_GetTick>
 8006cec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cee:	e012      	b.n	8006d16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cf0:	f7fe fa14 	bl	800511c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b0a      	cmp	r3, #10
 8006cfc:	d90b      	bls.n	8006d16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e09f      	b.n	8006e56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7e1b      	ldrb	r3, [r3, #24]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d108      	bne.n	8006d3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e007      	b.n	8006d4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7e5b      	ldrb	r3, [r3, #25]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d108      	bne.n	8006d68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e007      	b.n	8006d78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7e9b      	ldrb	r3, [r3, #26]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d108      	bne.n	8006d92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0220 	orr.w	r2, r2, #32
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e007      	b.n	8006da2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0220 	bic.w	r2, r2, #32
 8006da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7edb      	ldrb	r3, [r3, #27]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d108      	bne.n	8006dbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0210 	bic.w	r2, r2, #16
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	e007      	b.n	8006dcc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0210 	orr.w	r2, r2, #16
 8006dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	7f1b      	ldrb	r3, [r3, #28]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d108      	bne.n	8006de6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e007      	b.n	8006df6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0208 	bic.w	r2, r2, #8
 8006df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7f5b      	ldrb	r3, [r3, #29]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d108      	bne.n	8006e10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0204 	orr.w	r2, r2, #4
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e007      	b.n	8006e20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	ea42 0103 	orr.w	r1, r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b087      	sub	sp, #28
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e74:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006e76:	7cfb      	ldrb	r3, [r7, #19]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d003      	beq.n	8006e84 <HAL_CAN_ConfigFilter+0x26>
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	f040 80aa 	bne.w	8006fd8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e8a:	f043 0201 	orr.w	r2, r3, #1
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	43db      	mvns	r3, r3
 8006eae:	401a      	ands	r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d123      	bne.n	8006f06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	401a      	ands	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006ee0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3248      	adds	r2, #72	; 0x48
 8006ee6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006efa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006efc:	6979      	ldr	r1, [r7, #20]
 8006efe:	3348      	adds	r3, #72	; 0x48
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	440b      	add	r3, r1
 8006f04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d122      	bne.n	8006f54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	3248      	adds	r2, #72	; 0x48
 8006f34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f4a:	6979      	ldr	r1, [r7, #20]
 8006f4c:	3348      	adds	r3, #72	; 0x48
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	440b      	add	r3, r1
 8006f52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	43db      	mvns	r3, r3
 8006f66:	401a      	ands	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006f6e:	e007      	b.n	8006f80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	401a      	ands	r2, r3
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006f9a:	e007      	b.n	8006fac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d107      	bne.n	8006fc4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fca:	f023 0201 	bic.w	r2, r3, #1
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e006      	b.n	8006fe6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d12e      	bne.n	8007064 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0201 	bic.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800701e:	f7fe f87d 	bl	800511c <HAL_GetTick>
 8007022:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007024:	e012      	b.n	800704c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007026:	f7fe f879 	bl	800511c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b0a      	cmp	r3, #10
 8007032:	d90b      	bls.n	800704c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2205      	movs	r2, #5
 8007044:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e012      	b.n	8007072 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e5      	bne.n	8007026 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	e006      	b.n	8007072 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800707a:	b480      	push	{r7}
 800707c:	b089      	sub	sp, #36	; 0x24
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800708e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007098:	7ffb      	ldrb	r3, [r7, #31]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d003      	beq.n	80070a6 <HAL_CAN_AddTxMessage+0x2c>
 800709e:	7ffb      	ldrb	r3, [r7, #31]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	f040 80ad 	bne.w	8007200 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8095 	beq.w	80071f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	0e1b      	lsrs	r3, r3, #24
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80070d0:	2201      	movs	r2, #1
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	409a      	lsls	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80070ec:	68f9      	ldr	r1, [r7, #12]
 80070ee:	6809      	ldr	r1, [r1, #0]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	3318      	adds	r3, #24
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	440b      	add	r3, r1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e00f      	b.n	800711e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007108:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007112:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3318      	adds	r3, #24
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	440b      	add	r3, r1
 800711c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	3318      	adds	r3, #24
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	440b      	add	r3, r1
 800712e:	3304      	adds	r3, #4
 8007130:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d111      	bne.n	800715e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	3318      	adds	r3, #24
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	4413      	add	r3, r2
 8007146:	3304      	adds	r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	3318      	adds	r3, #24
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	440b      	add	r3, r1
 800715a:	3304      	adds	r3, #4
 800715c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3307      	adds	r3, #7
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	061a      	lsls	r2, r3, #24
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3306      	adds	r3, #6
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3305      	adds	r3, #5
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	4313      	orrs	r3, r2
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	3204      	adds	r2, #4
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	4610      	mov	r0, r2
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	ea43 0200 	orr.w	r2, r3, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	440b      	add	r3, r1
 8007190:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007194:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3303      	adds	r3, #3
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	061a      	lsls	r2, r3, #24
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3302      	adds	r3, #2
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3301      	adds	r3, #1
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	4313      	orrs	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	4610      	mov	r0, r2
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	6811      	ldr	r1, [r2, #0]
 80071bc:	ea43 0200 	orr.w	r2, r3, r0
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	440b      	add	r3, r1
 80071c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80071ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	3318      	adds	r3, #24
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	4413      	add	r3, r2
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	6811      	ldr	r1, [r2, #0]
 80071de:	f043 0201 	orr.w	r2, r3, #1
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3318      	adds	r3, #24
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	440b      	add	r3, r1
 80071ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e00e      	b.n	800720e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e006      	b.n	800720e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
  }
}
 800720e:	4618      	mov	r0, r3
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800721a:	b480      	push	{r7}
 800721c:	b087      	sub	sp, #28
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800722e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d003      	beq.n	800723e <HAL_CAN_GetRxMessage+0x24>
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f040 80f3 	bne.w	8007424 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10e      	bne.n	8007262 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d116      	bne.n	8007280 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0e7      	b.n	8007432 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d107      	bne.n	8007280 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0d8      	b.n	8007432 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	331b      	adds	r3, #27
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	4413      	add	r3, r2
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0204 	and.w	r2, r3, #4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10c      	bne.n	80072b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	331b      	adds	r3, #27
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	4413      	add	r3, r2
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	0d5b      	lsrs	r3, r3, #21
 80072ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	e00b      	b.n	80072d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	331b      	adds	r3, #27
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	4413      	add	r3, r2
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	08db      	lsrs	r3, r3, #3
 80072c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	331b      	adds	r3, #27
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	4413      	add	r3, r2
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0202 	and.w	r2, r3, #2
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	331b      	adds	r3, #27
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	4413      	add	r3, r2
 80072f2:	3304      	adds	r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	331b      	adds	r3, #27
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4413      	add	r3, r2
 800730a:	3304      	adds	r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	b2da      	uxtb	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	331b      	adds	r3, #27
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	4413      	add	r3, r2
 8007322:	3304      	adds	r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	4413      	add	r3, r2
 8007338:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	b2da      	uxtb	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	4413      	add	r3, r2
 800734e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	0a1a      	lsrs	r2, r3, #8
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	4413      	add	r3, r2
 8007368:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	0c1a      	lsrs	r2, r3, #16
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	3302      	adds	r3, #2
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	4413      	add	r3, r2
 8007382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	0e1a      	lsrs	r2, r3, #24
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	3303      	adds	r3, #3
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	4413      	add	r3, r2
 800739c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	3304      	adds	r3, #4
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	0a1a      	lsrs	r2, r3, #8
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	3305      	adds	r3, #5
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	0c1a      	lsrs	r2, r3, #16
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	3306      	adds	r3, #6
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	0e1a      	lsrs	r2, r3, #24
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	3307      	adds	r3, #7
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d108      	bne.n	8007410 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0220 	orr.w	r2, r2, #32
 800740c:	60da      	str	r2, [r3, #12]
 800740e:	e007      	b.n	8007420 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0220 	orr.w	r2, r2, #32
 800741e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e006      	b.n	8007432 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800744e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d002      	beq.n	800745c <HAL_CAN_ActivateNotification+0x1e>
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d109      	bne.n	8007470 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6959      	ldr	r1, [r3, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e006      	b.n	800747e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
  }
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b08a      	sub	sp, #40	; 0x28
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007492:	2300      	movs	r3, #0
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d07c      	beq.n	80075ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d023      	beq.n	8007522 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2201      	movs	r2, #1
 80074e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f983 	bl	80077f8 <HAL_CAN_TxMailbox0CompleteCallback>
 80074f2:	e016      	b.n	8007522 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
 8007506:	e00c      	b.n	8007522 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f003 0308 	and.w	r3, r3, #8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
 800751a:	e002      	b.n	8007522 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f989 	bl	8007834 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007528:	2b00      	cmp	r3, #0
 800752a:	d024      	beq.n	8007576 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007534:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f963 	bl	800780c <HAL_CAN_TxMailbox1CompleteCallback>
 8007546:	e016      	b.n	8007576 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	e00c      	b.n	8007576 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
 800756e:	e002      	b.n	8007576 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f969 	bl	8007848 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d024      	beq.n	80075ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f943 	bl	8007820 <HAL_CAN_TxMailbox2CompleteCallback>
 800759a:	e016      	b.n	80075ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
 80075ae:	e00c      	b.n	80075ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
 80075c2:	e002      	b.n	80075ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f949 	bl	800785c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00c      	beq.n	80075ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d006      	beq.n	8007610 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2208      	movs	r2, #8
 8007608:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f930 	bl	8007870 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7f9 fded 	bl	8001208 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00c      	beq.n	8007652 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007648:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2210      	movs	r2, #16
 8007650:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2208      	movs	r2, #8
 800766c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f912 	bl	8007898 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f8f9 	bl	8007884 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2210      	movs	r2, #16
 80076ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8fc 	bl	80078ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d006      	beq.n	80076d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2208      	movs	r2, #8
 80076ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f8f5 	bl	80078c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d07b      	beq.n	80077d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d072      	beq.n	80077d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	f043 0301 	orr.w	r3, r3, #1
 8007704:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	f043 0302 	orr.w	r3, r3, #2
 8007720:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	f043 0304 	orr.w	r3, r3, #4
 800773c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007744:	2b00      	cmp	r3, #0
 8007746:	d043      	beq.n	80077d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800774e:	2b00      	cmp	r3, #0
 8007750:	d03e      	beq.n	80077d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007758:	2b60      	cmp	r3, #96	; 0x60
 800775a:	d02b      	beq.n	80077b4 <HAL_CAN_IRQHandler+0x32a>
 800775c:	2b60      	cmp	r3, #96	; 0x60
 800775e:	d82e      	bhi.n	80077be <HAL_CAN_IRQHandler+0x334>
 8007760:	2b50      	cmp	r3, #80	; 0x50
 8007762:	d022      	beq.n	80077aa <HAL_CAN_IRQHandler+0x320>
 8007764:	2b50      	cmp	r3, #80	; 0x50
 8007766:	d82a      	bhi.n	80077be <HAL_CAN_IRQHandler+0x334>
 8007768:	2b40      	cmp	r3, #64	; 0x40
 800776a:	d019      	beq.n	80077a0 <HAL_CAN_IRQHandler+0x316>
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d826      	bhi.n	80077be <HAL_CAN_IRQHandler+0x334>
 8007770:	2b30      	cmp	r3, #48	; 0x30
 8007772:	d010      	beq.n	8007796 <HAL_CAN_IRQHandler+0x30c>
 8007774:	2b30      	cmp	r3, #48	; 0x30
 8007776:	d822      	bhi.n	80077be <HAL_CAN_IRQHandler+0x334>
 8007778:	2b10      	cmp	r3, #16
 800777a:	d002      	beq.n	8007782 <HAL_CAN_IRQHandler+0x2f8>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d005      	beq.n	800778c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007780:	e01d      	b.n	80077be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800778a:	e019      	b.n	80077c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f043 0310 	orr.w	r3, r3, #16
 8007792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007794:	e014      	b.n	80077c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	f043 0320 	orr.w	r3, r3, #32
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800779e:	e00f      	b.n	80077c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077a8:	e00a      	b.n	80077c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077b2:	e005      	b.n	80077c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077bc:	e000      	b.n	80077c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80077be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80077ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2204      	movs	r2, #4
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d008      	beq.n	80077f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f872 	bl	80078d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80077f0:	bf00      	nop
 80077f2:	3728      	adds	r7, #40	; 0x28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <__NVIC_SetPriorityGrouping+0x44>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007904:	4013      	ands	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800791a:	4a04      	ldr	r2, [pc, #16]	; (800792c <__NVIC_SetPriorityGrouping+0x44>)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	60d3      	str	r3, [r2, #12]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <__NVIC_GetPriorityGrouping+0x18>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	f003 0307 	and.w	r3, r3, #7
}
 800793e:	4618      	mov	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	db0b      	blt.n	8007976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	f003 021f 	and.w	r2, r3, #31
 8007964:	4907      	ldr	r1, [pc, #28]	; (8007984 <__NVIC_EnableIRQ+0x38>)
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	2001      	movs	r0, #1
 800796e:	fa00 f202 	lsl.w	r2, r0, r2
 8007972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	e000e100 	.word	0xe000e100

08007988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007998:	2b00      	cmp	r3, #0
 800799a:	db0a      	blt.n	80079b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	490c      	ldr	r1, [pc, #48]	; (80079d4 <__NVIC_SetPriority+0x4c>)
 80079a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a6:	0112      	lsls	r2, r2, #4
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	440b      	add	r3, r1
 80079ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079b0:	e00a      	b.n	80079c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	4908      	ldr	r1, [pc, #32]	; (80079d8 <__NVIC_SetPriority+0x50>)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	3b04      	subs	r3, #4
 80079c0:	0112      	lsls	r2, r2, #4
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	440b      	add	r3, r1
 80079c6:	761a      	strb	r2, [r3, #24]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	e000e100 	.word	0xe000e100
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	; 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f1c3 0307 	rsb	r3, r3, #7
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf28      	it	cs
 80079fa:	2304      	movcs	r3, #4
 80079fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d902      	bls.n	8007a0c <NVIC_EncodePriority+0x30>
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3b03      	subs	r3, #3
 8007a0a:	e000      	b.n	8007a0e <NVIC_EncodePriority+0x32>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	401a      	ands	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	43d9      	mvns	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a34:	4313      	orrs	r3, r2
         );
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3724      	adds	r7, #36	; 0x24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff ff4c 	bl	80078e8 <__NVIC_SetPriorityGrouping>
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a6a:	f7ff ff61 	bl	8007930 <__NVIC_GetPriorityGrouping>
 8007a6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	6978      	ldr	r0, [r7, #20]
 8007a76:	f7ff ffb1 	bl	80079dc <NVIC_EncodePriority>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff ff80 	bl	8007988 <__NVIC_SetPriority>
}
 8007a88:	bf00      	nop
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff ff54 	bl	800794c <__NVIC_EnableIRQ>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e08d      	b.n	8007bda <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4b47      	ldr	r3, [pc, #284]	; (8007be4 <HAL_DMA_Init+0x138>)
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d80f      	bhi.n	8007aea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4b45      	ldr	r3, [pc, #276]	; (8007be8 <HAL_DMA_Init+0x13c>)
 8007ad2:	4413      	add	r3, r2
 8007ad4:	4a45      	ldr	r2, [pc, #276]	; (8007bec <HAL_DMA_Init+0x140>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	091b      	lsrs	r3, r3, #4
 8007adc:	009a      	lsls	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a42      	ldr	r2, [pc, #264]	; (8007bf0 <HAL_DMA_Init+0x144>)
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8007ae8:	e00e      	b.n	8007b08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	4b40      	ldr	r3, [pc, #256]	; (8007bf4 <HAL_DMA_Init+0x148>)
 8007af2:	4413      	add	r3, r2
 8007af4:	4a3d      	ldr	r2, [pc, #244]	; (8007bec <HAL_DMA_Init+0x140>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	009a      	lsls	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a3c      	ldr	r2, [pc, #240]	; (8007bf8 <HAL_DMA_Init+0x14c>)
 8007b06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9b6 	bl	8007ecc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b68:	d102      	bne.n	8007b70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b84:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d010      	beq.n	8007bb0 <HAL_DMA_Init+0x104>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d80c      	bhi.n	8007bb0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9d6 	bl	8007f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007bac:	605a      	str	r2, [r3, #4]
 8007bae:	e008      	b.n	8007bc2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40020407 	.word	0x40020407
 8007be8:	bffdfff8 	.word	0xbffdfff8
 8007bec:	cccccccd 	.word	0xcccccccd
 8007bf0:	40020000 	.word	0x40020000
 8007bf4:	bffdfbf8 	.word	0xbffdfbf8
 8007bf8:	40020400 	.word	0x40020400

08007bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_DMA_Start_IT+0x20>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e066      	b.n	8007cea <HAL_DMA_Start_IT+0xee>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d155      	bne.n	8007cdc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f8fb 	bl	8007e50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d008      	beq.n	8007c74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 020e 	orr.w	r2, r2, #14
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e00f      	b.n	8007c94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0204 	bic.w	r2, r2, #4
 8007c82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 020a 	orr.w	r2, r2, #10
 8007c92:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cb0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cc8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	e005      	b.n	8007ce8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	f003 031c 	and.w	r3, r3, #28
 8007d12:	2204      	movs	r2, #4
 8007d14:	409a      	lsls	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d026      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x7a>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d021      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d107      	bne.n	8007d46 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0204 	bic.w	r2, r2, #4
 8007d44:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	f003 021c 	and.w	r2, r3, #28
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	2104      	movs	r1, #4
 8007d54:	fa01 f202 	lsl.w	r2, r1, r2
 8007d58:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d071      	beq.n	8007e46 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007d6a:	e06c      	b.n	8007e46 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d70:	f003 031c 	and.w	r3, r3, #28
 8007d74:	2202      	movs	r2, #2
 8007d76:	409a      	lsls	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d02e      	beq.n	8007dde <HAL_DMA_IRQHandler+0xec>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d029      	beq.n	8007dde <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 020a 	bic.w	r2, r2, #10
 8007da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db4:	f003 021c 	and.w	r2, r3, #28
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8007dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d038      	beq.n	8007e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007ddc:	e033      	b.n	8007e46 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f003 031c 	and.w	r3, r3, #28
 8007de6:	2208      	movs	r2, #8
 8007de8:	409a      	lsls	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d02a      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x156>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d025      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 020e 	bic.w	r2, r2, #14
 8007e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e10:	f003 021c 	and.w	r2, r3, #28
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
}
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e66:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e78:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	f003 021c 	and.w	r2, r3, #28
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	2101      	movs	r1, #1
 8007e88:	fa01 f202 	lsl.w	r2, r1, r2
 8007e8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d108      	bne.n	8007eb0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007eae:	e007      	b.n	8007ec0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]
}
 8007ec0:	bf00      	nop
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d80a      	bhi.n	8007ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee4:	089b      	lsrs	r3, r3, #2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007eec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6493      	str	r3, [r2, #72]	; 0x48
 8007ef4:	e007      	b.n	8007f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efa:	089b      	lsrs	r3, r3, #2
 8007efc:	009a      	lsls	r2, r3, #2
 8007efe:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f00:	4413      	add	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	3b08      	subs	r3, #8
 8007f0e:	4a0c      	ldr	r2, [pc, #48]	; (8007f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2201      	movs	r2, #1
 8007f26:	409a      	lsls	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	40020407 	.word	0x40020407
 8007f3c:	4002081c 	.word	0x4002081c
 8007f40:	cccccccd 	.word	0xcccccccd
 8007f44:	40020880 	.word	0x40020880

08007f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	461a      	mov	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a08      	ldr	r2, [pc, #32]	; (8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	2201      	movs	r2, #1
 8007f76:	409a      	lsls	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	1000823f 	.word	0x1000823f
 8007f8c:	40020940 	.word	0x40020940

08007f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f9e:	e166      	b.n	800826e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8158 	beq.w	8008268 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f003 0303 	and.w	r3, r3, #3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d005      	beq.n	8007fd0 <HAL_GPIO_Init+0x40>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d130      	bne.n	8008032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	2203      	movs	r2, #3
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008006:	2201      	movs	r2, #1
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	43db      	mvns	r3, r3
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	091b      	lsrs	r3, r3, #4
 800801c:	f003 0201 	and.w	r2, r3, #1
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b03      	cmp	r3, #3
 800803c:	d017      	beq.n	800806e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	2203      	movs	r2, #3
 800804a:	fa02 f303 	lsl.w	r3, r2, r3
 800804e:	43db      	mvns	r3, r3
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4013      	ands	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d123      	bne.n	80080c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	08da      	lsrs	r2, r3, #3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3208      	adds	r2, #8
 8008082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	220f      	movs	r2, #15
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	43db      	mvns	r3, r3
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4013      	ands	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	08da      	lsrs	r2, r3, #3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3208      	adds	r2, #8
 80080bc:	6939      	ldr	r1, [r7, #16]
 80080be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	2203      	movs	r2, #3
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	43db      	mvns	r3, r3
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	4013      	ands	r3, r2
 80080d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f003 0203 	and.w	r2, r3, #3
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80b2 	beq.w	8008268 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008104:	4b61      	ldr	r3, [pc, #388]	; (800828c <HAL_GPIO_Init+0x2fc>)
 8008106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008108:	4a60      	ldr	r2, [pc, #384]	; (800828c <HAL_GPIO_Init+0x2fc>)
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	6613      	str	r3, [r2, #96]	; 0x60
 8008110:	4b5e      	ldr	r3, [pc, #376]	; (800828c <HAL_GPIO_Init+0x2fc>)
 8008112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	60bb      	str	r3, [r7, #8]
 800811a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800811c:	4a5c      	ldr	r2, [pc, #368]	; (8008290 <HAL_GPIO_Init+0x300>)
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	089b      	lsrs	r3, r3, #2
 8008122:	3302      	adds	r3, #2
 8008124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f003 0303 	and.w	r3, r3, #3
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	220f      	movs	r2, #15
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	43db      	mvns	r3, r3
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4013      	ands	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008146:	d02b      	beq.n	80081a0 <HAL_GPIO_Init+0x210>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a52      	ldr	r2, [pc, #328]	; (8008294 <HAL_GPIO_Init+0x304>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d025      	beq.n	800819c <HAL_GPIO_Init+0x20c>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a51      	ldr	r2, [pc, #324]	; (8008298 <HAL_GPIO_Init+0x308>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d01f      	beq.n	8008198 <HAL_GPIO_Init+0x208>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a50      	ldr	r2, [pc, #320]	; (800829c <HAL_GPIO_Init+0x30c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d019      	beq.n	8008194 <HAL_GPIO_Init+0x204>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a4f      	ldr	r2, [pc, #316]	; (80082a0 <HAL_GPIO_Init+0x310>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d013      	beq.n	8008190 <HAL_GPIO_Init+0x200>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a4e      	ldr	r2, [pc, #312]	; (80082a4 <HAL_GPIO_Init+0x314>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00d      	beq.n	800818c <HAL_GPIO_Init+0x1fc>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a4d      	ldr	r2, [pc, #308]	; (80082a8 <HAL_GPIO_Init+0x318>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d007      	beq.n	8008188 <HAL_GPIO_Init+0x1f8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a4c      	ldr	r2, [pc, #304]	; (80082ac <HAL_GPIO_Init+0x31c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d101      	bne.n	8008184 <HAL_GPIO_Init+0x1f4>
 8008180:	2307      	movs	r3, #7
 8008182:	e00e      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 8008184:	2308      	movs	r3, #8
 8008186:	e00c      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 8008188:	2306      	movs	r3, #6
 800818a:	e00a      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 800818c:	2305      	movs	r3, #5
 800818e:	e008      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 8008190:	2304      	movs	r3, #4
 8008192:	e006      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 8008194:	2303      	movs	r3, #3
 8008196:	e004      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 8008198:	2302      	movs	r3, #2
 800819a:	e002      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <HAL_GPIO_Init+0x212>
 80081a0:	2300      	movs	r3, #0
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	f002 0203 	and.w	r2, r2, #3
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	4093      	lsls	r3, r2
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80081b2:	4937      	ldr	r1, [pc, #220]	; (8008290 <HAL_GPIO_Init+0x300>)
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	089b      	lsrs	r3, r3, #2
 80081b8:	3302      	adds	r3, #2
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081c0:	4b3b      	ldr	r3, [pc, #236]	; (80082b0 <HAL_GPIO_Init+0x320>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	43db      	mvns	r3, r3
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4013      	ands	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081e4:	4a32      	ldr	r2, [pc, #200]	; (80082b0 <HAL_GPIO_Init+0x320>)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081ea:	4b31      	ldr	r3, [pc, #196]	; (80082b0 <HAL_GPIO_Init+0x320>)
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4013      	ands	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800820e:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <HAL_GPIO_Init+0x320>)
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008214:	4b26      	ldr	r3, [pc, #152]	; (80082b0 <HAL_GPIO_Init+0x320>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	43db      	mvns	r3, r3
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4013      	ands	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008238:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <HAL_GPIO_Init+0x320>)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <HAL_GPIO_Init+0x320>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	43db      	mvns	r3, r3
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4013      	ands	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008262:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <HAL_GPIO_Init+0x320>)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	3301      	adds	r3, #1
 800826c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	fa22 f303 	lsr.w	r3, r2, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	f47f ae91 	bne.w	8007fa0 <HAL_GPIO_Init+0x10>
  }
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	40021000 	.word	0x40021000
 8008290:	40010000 	.word	0x40010000
 8008294:	48000400 	.word	0x48000400
 8008298:	48000800 	.word	0x48000800
 800829c:	48000c00 	.word	0x48000c00
 80082a0:	48001000 	.word	0x48001000
 80082a4:	48001400 	.word	0x48001400
 80082a8:	48001800 	.word	0x48001800
 80082ac:	48001c00 	.word	0x48001c00
 80082b0:	40010400 	.word	0x40010400

080082b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	e001      	b.n	80082d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	807b      	strh	r3, [r7, #2]
 80082f0:	4613      	mov	r3, r2
 80082f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082f4:	787b      	ldrb	r3, [r7, #1]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082fa:	887a      	ldrh	r2, [r7, #2]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008300:	e002      	b.n	8008308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008302:	887a      	ldrh	r2, [r7, #2]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008316:	b08f      	sub	sp, #60	; 0x3c
 8008318:	af0a      	add	r7, sp, #40	; 0x28
 800831a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e116      	b.n	8008554 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d106      	bne.n	8008346 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f00a fd3b 	bl	8012dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2203      	movs	r2, #3
 800834a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f004 fe34 	bl	800cfd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	687e      	ldr	r6, [r7, #4]
 8008372:	466d      	mov	r5, sp
 8008374:	f106 0410 	add.w	r4, r6, #16
 8008378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800837a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800837c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800837e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008384:	e885 0003 	stmia.w	r5, {r0, r1}
 8008388:	1d33      	adds	r3, r6, #4
 800838a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800838c:	6838      	ldr	r0, [r7, #0]
 800838e:	f004 fd47 	bl	800ce20 <USB_CoreInit>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d005      	beq.n	80083a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0d7      	b.n	8008554 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f004 fe22 	bl	800cff4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
 80083b4:	e04a      	b.n	800844c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083b6:	7bfa      	ldrb	r2, [r7, #15]
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	333d      	adds	r3, #61	; 0x3d
 80083c6:	2201      	movs	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083ca:	7bfa      	ldrb	r2, [r7, #15]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	333c      	adds	r3, #60	; 0x3c
 80083da:	7bfa      	ldrb	r2, [r7, #15]
 80083dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083de:	7bfa      	ldrb	r2, [r7, #15]
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	b298      	uxth	r0, r3
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	3344      	adds	r3, #68	; 0x44
 80083f2:	4602      	mov	r2, r0
 80083f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083f6:	7bfa      	ldrb	r2, [r7, #15]
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	3340      	adds	r3, #64	; 0x40
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800840a:	7bfa      	ldrb	r2, [r7, #15]
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4613      	mov	r3, r2
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	440b      	add	r3, r1
 8008418:	3348      	adds	r3, #72	; 0x48
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800841e:	7bfa      	ldrb	r2, [r7, #15]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	334c      	adds	r3, #76	; 0x4c
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008432:	7bfa      	ldrb	r2, [r7, #15]
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	3354      	adds	r3, #84	; 0x54
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	3301      	adds	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	7bfa      	ldrb	r2, [r7, #15]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d3af      	bcc.n	80083b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
 800845a:	e044      	b.n	80084e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800845c:	7bfa      	ldrb	r2, [r7, #15]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008472:	7bfa      	ldrb	r2, [r7, #15]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008484:	7bfa      	ldrb	r2, [r7, #15]
 8008486:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800849e:	7bfa      	ldrb	r2, [r7, #15]
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084b4:	7bfa      	ldrb	r2, [r7, #15]
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084ca:	7bfa      	ldrb	r2, [r7, #15]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	3301      	adds	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
 80084e6:	7bfa      	ldrb	r2, [r7, #15]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d3b5      	bcc.n	800845c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	687e      	ldr	r6, [r7, #4]
 80084f8:	466d      	mov	r5, sp
 80084fa:	f106 0410 	add.w	r4, r6, #16
 80084fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800850a:	e885 0003 	stmia.w	r5, {r0, r1}
 800850e:	1d33      	adds	r3, r6, #4
 8008510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008512:	6838      	ldr	r0, [r7, #0]
 8008514:	f004 fdba 	bl	800d08c <USB_DevInit>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e014      	b.n	8008554 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b01      	cmp	r3, #1
 8008540:	d102      	bne.n	8008548 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 f882 	bl	800964c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f005 fe42 	bl	800e1d6 <USB_DevDisconnect>

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800855c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_PCD_Start+0x1c>
 8008574:	2302      	movs	r3, #2
 8008576:	e01c      	b.n	80085b2 <HAL_PCD_Start+0x56>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008584:	2b01      	cmp	r3, #1
 8008586:	d105      	bne.n	8008594 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f004 fd09 	bl	800cfb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f005 fdf6 	bl	800e194 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80085ba:	b590      	push	{r4, r7, lr}
 80085bc:	b08d      	sub	sp, #52	; 0x34
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f005 feb4 	bl	800e33e <USB_GetMode>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 847e 	bne.w	8008eda <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f005 fe18 	bl	800e218 <USB_ReadInterrupts>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8474 	beq.w	8008ed8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	0a1b      	lsrs	r3, r3, #8
 80085fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f005 fe05 	bl	800e218 <USB_ReadInterrupts>
 800860e:	4603      	mov	r3, r0
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d107      	bne.n	8008628 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695a      	ldr	r2, [r3, #20]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f002 0202 	and.w	r2, r2, #2
 8008626:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f005 fdf3 	bl	800e218 <USB_ReadInterrupts>
 8008632:	4603      	mov	r3, r0
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b10      	cmp	r3, #16
 800863a:	d161      	bne.n	8008700 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0210 	bic.w	r2, r2, #16
 800864a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	f003 020f 	and.w	r2, r3, #15
 8008658:	4613      	mov	r3, r2
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	3304      	adds	r3, #4
 800866a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	0c5b      	lsrs	r3, r3, #17
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	2b02      	cmp	r3, #2
 8008676:	d124      	bne.n	80086c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800867e:	4013      	ands	r3, r2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d035      	beq.n	80086f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	091b      	lsrs	r3, r3, #4
 800868c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800868e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008692:	b29b      	uxth	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	6a38      	ldr	r0, [r7, #32]
 8008698:	f005 fc2a 	bl	800def0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	091b      	lsrs	r3, r3, #4
 80086a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086a8:	441a      	add	r2, r3
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	6a1a      	ldr	r2, [r3, #32]
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ba:	441a      	add	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	621a      	str	r2, [r3, #32]
 80086c0:	e016      	b.n	80086f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	0c5b      	lsrs	r3, r3, #17
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	2b06      	cmp	r3, #6
 80086cc:	d110      	bne.n	80086f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086d4:	2208      	movs	r2, #8
 80086d6:	4619      	mov	r1, r3
 80086d8:	6a38      	ldr	r0, [r7, #32]
 80086da:	f005 fc09 	bl	800def0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6a1a      	ldr	r2, [r3, #32]
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	091b      	lsrs	r3, r3, #4
 80086e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ea:	441a      	add	r2, r3
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0210 	orr.w	r2, r2, #16
 80086fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f005 fd87 	bl	800e218 <USB_ReadInterrupts>
 800870a:	4603      	mov	r3, r0
 800870c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008710:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008714:	f040 80a7 	bne.w	8008866 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f005 fd8c 	bl	800e23e <USB_ReadDevAllOutEpInterrupt>
 8008726:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008728:	e099      	b.n	800885e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 808e 	beq.w	8008852 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f005 fdb0 	bl	800e2a6 <USB_ReadDevOutEPInterrupt>
 8008746:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00c      	beq.n	800876c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875e:	461a      	mov	r2, r3
 8008760:	2301      	movs	r3, #1
 8008762:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fe96 	bl	8009498 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	461a      	mov	r2, r3
 8008784:	2308      	movs	r3, #8
 8008786:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fed2 	bl	8009534 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f003 0310 	and.w	r3, r3, #16
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	461a      	mov	r2, r3
 80087a8:	2310      	movs	r3, #16
 80087aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d030      	beq.n	8008818 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087be:	2b80      	cmp	r3, #128	; 0x80
 80087c0:	d109      	bne.n	80087d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80087d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	78db      	ldrb	r3, [r3, #3]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d108      	bne.n	8008806 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2200      	movs	r2, #0
 80087f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f00a fc1f 	bl	8013044 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	461a      	mov	r2, r3
 8008814:	2302      	movs	r3, #2
 8008816:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882e:	461a      	mov	r2, r3
 8008830:	2320      	movs	r3, #32
 8008832:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	461a      	mov	r2, r3
 800884c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008850:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	3301      	adds	r3, #1
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	2b00      	cmp	r3, #0
 8008862:	f47f af62 	bne.w	800872a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f005 fcd4 	bl	800e218 <USB_ReadInterrupts>
 8008870:	4603      	mov	r3, r0
 8008872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800887a:	f040 80a4 	bne.w	80089c6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f005 fcf5 	bl	800e272 <USB_ReadDevAllInEpInterrupt>
 8008888:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800888e:	e096      	b.n	80089be <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 808b 	beq.w	80089b2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f005 fd1b 	bl	800e2e2 <USB_ReadDevInEPInterrupt>
 80088ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d020      	beq.n	80088fa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	2201      	movs	r2, #1
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	43db      	mvns	r3, r3
 80088d2:	69f9      	ldr	r1, [r7, #28]
 80088d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088d8:	4013      	ands	r3, r2
 80088da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e8:	461a      	mov	r2, r3
 80088ea:	2301      	movs	r3, #1
 80088ec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f00a fb10 	bl	8012f1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f003 0308 	and.w	r3, r3, #8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	461a      	mov	r2, r3
 8008912:	2308      	movs	r3, #8
 8008914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892c:	461a      	mov	r2, r3
 800892e:	2310      	movs	r3, #16
 8008930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	d008      	beq.n	800894e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	461a      	mov	r2, r3
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d023      	beq.n	80089a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800895a:	6a38      	ldr	r0, [r7, #32]
 800895c:	f004 fce2 	bl	800d324 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	4613      	mov	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	3338      	adds	r3, #56	; 0x38
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	3304      	adds	r3, #4
 8008972:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	78db      	ldrb	r3, [r3, #3]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d108      	bne.n	800898e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2200      	movs	r2, #0
 8008980:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f00a fb6d 	bl	8013068 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899a:	461a      	mov	r2, r3
 800899c:	2302      	movs	r3, #2
 800899e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fcea 	bl	8009386 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	3301      	adds	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f47f af65 	bne.w	8008890 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f005 fc24 	bl	800e218 <USB_ReadInterrupts>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089da:	d122      	bne.n	8008a22 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ea:	f023 0301 	bic.w	r3, r3, #1
 80089ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d108      	bne.n	8008a0c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a02:	2100      	movs	r1, #0
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f00a fd9f 	bl	8013548 <HAL_PCDEx_LPM_Callback>
 8008a0a:	e002      	b.n	8008a12 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f00a faf1 	bl	8012ff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695a      	ldr	r2, [r3, #20]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f005 fbf6 	bl	800e218 <USB_ReadInterrupts>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a36:	d112      	bne.n	8008a5e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d102      	bne.n	8008a4e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f00a faad 	bl	8012fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	695a      	ldr	r2, [r3, #20]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f005 fbd8 	bl	800e218 <USB_ReadInterrupts>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a72:	d121      	bne.n	8008ab8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695a      	ldr	r2, [r3, #20]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a82:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d111      	bne.n	8008ab2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9c:	089b      	lsrs	r3, r3, #2
 8008a9e:	f003 020f 	and.w	r2, r3, #15
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f00a fd4c 	bl	8013548 <HAL_PCDEx_LPM_Callback>
 8008ab0:	e002      	b.n	8008ab8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f00a fa78 	bl	8012fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f005 fbab 	bl	800e218 <USB_ReadInterrupts>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008acc:	f040 80b5 	bne.w	8008c3a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2110      	movs	r1, #16
 8008aea:	4618      	mov	r0, r3
 8008aec:	f004 fc1a 	bl	800d324 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008af0:	2300      	movs	r3, #0
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af4:	e046      	b.n	8008b84 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b02:	461a      	mov	r2, r3
 8008b04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1a:	0151      	lsls	r1, r2, #5
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	440a      	add	r2, r1
 8008b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	461a      	mov	r2, r3
 8008b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	3301      	adds	r3, #1
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d3b3      	bcc.n	8008af6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ba0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d016      	beq.n	8008bd8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bba:	f043 030b 	orr.w	r3, r3, #11
 8008bbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd0:	f043 030b 	orr.w	r3, r3, #11
 8008bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008bd6:	e015      	b.n	8008c04 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008bea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008bee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfe:	f043 030b 	orr.w	r3, r3, #11
 8008c02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f005 fbbb 	bl	800e3a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f005 faea 	bl	800e218 <USB_ReadInterrupts>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4e:	d124      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f005 fb80 	bl	800e35a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f004 fbdd 	bl	800d41e <USB_GetDevSpeed>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681c      	ldr	r4, [r3, #0]
 8008c70:	f001 fc92 	bl	800a598 <HAL_RCC_GetHCLKFreq>
 8008c74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f004 f8fa 	bl	800ce78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f00a f970 	bl	8012f6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	695a      	ldr	r2, [r3, #20]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f005 faba 	bl	800e218 <USB_ReadInterrupts>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d10a      	bne.n	8008cc4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f00a f94d 	bl	8012f4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	695a      	ldr	r2, [r3, #20]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f002 0208 	and.w	r2, r2, #8
 8008cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f005 faa5 	bl	800e218 <USB_ReadInterrupts>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd4:	2b80      	cmp	r3, #128	; 0x80
 8008cd6:	d122      	bne.n	8008d1e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce8:	e014      	b.n	8008d14 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cee:	4613      	mov	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d105      	bne.n	8008d0e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb0b 	bl	8009324 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d3e5      	bcc.n	8008cea <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f005 fa78 	bl	800e218 <USB_ReadInterrupts>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d32:	d13b      	bne.n	8008dac <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d34:	2301      	movs	r3, #1
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
 8008d38:	e02b      	b.n	8008d92 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4e:	4613      	mov	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	440b      	add	r3, r1
 8008d58:	3340      	adds	r3, #64	; 0x40
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d115      	bne.n	8008d8c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da12      	bge.n	8008d8c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	333f      	adds	r3, #63	; 0x3f
 8008d76:	2201      	movs	r2, #1
 8008d78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 facc 	bl	8009324 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	3301      	adds	r3, #1
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3ce      	bcc.n	8008d3a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f005 fa31 	bl	800e218 <USB_ReadInterrupts>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dc0:	d155      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc6:	e045      	b.n	8008e54 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ddc:	4613      	mov	r3, r2
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d12e      	bne.n	8008e4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008df0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da2b      	bge.n	8008e4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d121      	bne.n	8008e4e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0e:	4613      	mov	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e4a:	6053      	str	r3, [r2, #4]
            break;
 8008e4c:	e007      	b.n	8008e5e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	3301      	adds	r3, #1
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d3b4      	bcc.n	8008dc8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	695a      	ldr	r2, [r3, #20]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f005 f9d0 	bl	800e218 <USB_ReadInterrupts>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d10a      	bne.n	8008e9a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f00a f901 	bl	801308c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695a      	ldr	r2, [r3, #20]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f005 f9ba 	bl	800e218 <USB_ReadInterrupts>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d115      	bne.n	8008eda <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f00a f8f1 	bl	80130a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6859      	ldr	r1, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
 8008ed6:	e000      	b.n	8008eda <HAL_PCD_IRQHandler+0x920>
      return;
 8008ed8:	bf00      	nop
    }
  }
}
 8008eda:	3734      	adds	r7, #52	; 0x34
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}

08008ee0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_PCD_SetAddress+0x1a>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e013      	b.n	8008f22 <HAL_PCD_SetAddress+0x42>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	78fa      	ldrb	r2, [r7, #3]
 8008f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f005 f918 	bl	800e148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	70fb      	strb	r3, [r7, #3]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	803b      	strh	r3, [r7, #0]
 8008f40:	4613      	mov	r3, r2
 8008f42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	da0f      	bge.n	8008f70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	f003 020f 	and.w	r2, r3, #15
 8008f56:	4613      	mov	r3, r2
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	3338      	adds	r3, #56	; 0x38
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4413      	add	r3, r2
 8008f64:	3304      	adds	r3, #4
 8008f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	705a      	strb	r2, [r3, #1]
 8008f6e:	e00f      	b.n	8008f90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	4413      	add	r3, r2
 8008f86:	3304      	adds	r3, #4
 8008f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008f9c:	883a      	ldrh	r2, [r7, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	78ba      	ldrb	r2, [r7, #2]
 8008fa6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fba:	78bb      	ldrb	r3, [r7, #2]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d102      	bne.n	8008fc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_PCD_EP_Open+0xaa>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e00e      	b.n	8008ff2 <HAL_PCD_EP_Open+0xc8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f004 fa3a 	bl	800d45c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da0f      	bge.n	800902e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	3338      	adds	r3, #56	; 0x38
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	3304      	adds	r3, #4
 8009024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	705a      	strb	r2, [r3, #1]
 800902c:	e00f      	b.n	800904e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	f003 020f 	and.w	r2, r3, #15
 8009034:	4613      	mov	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	3304      	adds	r3, #4
 8009046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	f003 030f 	and.w	r3, r3, #15
 8009054:	b2da      	uxtb	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_PCD_EP_Close+0x6e>
 8009064:	2302      	movs	r3, #2
 8009066:	e00e      	b.n	8009086 <HAL_PCD_EP_Close+0x8c>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68f9      	ldr	r1, [r7, #12]
 8009076:	4618      	mov	r0, r3
 8009078:	f004 fa78 	bl	800d56c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
 800909a:	460b      	mov	r3, r1
 800909c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	f003 020f 	and.w	r2, r3, #15
 80090a4:	4613      	mov	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	3304      	adds	r3, #4
 80090b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2200      	movs	r2, #0
 80090c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2200      	movs	r2, #0
 80090ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6979      	ldr	r1, [r7, #20]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f004 fcf9 	bl	800dae4 <USB_EP0StartXfer>
 80090f2:	e005      	b.n	8009100 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6979      	ldr	r1, [r7, #20]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f004 fb12 	bl	800d724 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	440b      	add	r3, r1
 8009128:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800912c:	681b      	ldr	r3, [r3, #0]
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	460b      	mov	r3, r1
 8009148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	f003 020f 	and.w	r2, r3, #15
 8009150:	4613      	mov	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	3338      	adds	r3, #56	; 0x38
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	3304      	adds	r3, #4
 8009160:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2200      	movs	r2, #0
 8009172:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2201      	movs	r2, #1
 8009178:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	f003 030f 	and.w	r3, r3, #15
 8009180:	b2da      	uxtb	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	2b00      	cmp	r3, #0
 800918e:	d106      	bne.n	800919e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6979      	ldr	r1, [r7, #20]
 8009196:	4618      	mov	r0, r3
 8009198:	f004 fca4 	bl	800dae4 <USB_EP0StartXfer>
 800919c:	e005      	b.n	80091aa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6979      	ldr	r1, [r7, #20]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f004 fabd 	bl	800d724 <USB_EPStartXfer>
  }

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	f003 020f 	and.w	r2, r3, #15
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d901      	bls.n	80091d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e04e      	b.n	8009270 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da0f      	bge.n	80091fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	f003 020f 	and.w	r2, r3, #15
 80091e0:	4613      	mov	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3338      	adds	r3, #56	; 0x38
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	3304      	adds	r3, #4
 80091f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	705a      	strb	r2, [r3, #1]
 80091f8:	e00d      	b.n	8009216 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4613      	mov	r3, r2
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	4413      	add	r3, r2
 800920c:	3304      	adds	r3, #4
 800920e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	b2da      	uxtb	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800922e:	2b01      	cmp	r3, #1
 8009230:	d101      	bne.n	8009236 <HAL_PCD_EP_SetStall+0x82>
 8009232:	2302      	movs	r3, #2
 8009234:	e01c      	b.n	8009270 <HAL_PCD_EP_SetStall+0xbc>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	4618      	mov	r0, r3
 8009246:	f004 feab 	bl	800dfa0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	2b00      	cmp	r3, #0
 8009252:	d108      	bne.n	8009266 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f005 f89d 	bl	800e3a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	f003 020f 	and.w	r2, r3, #15
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	429a      	cmp	r2, r3
 8009290:	d901      	bls.n	8009296 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e042      	b.n	800931c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800929a:	2b00      	cmp	r3, #0
 800929c:	da0f      	bge.n	80092be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	f003 020f 	and.w	r2, r3, #15
 80092a4:	4613      	mov	r3, r2
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3338      	adds	r3, #56	; 0x38
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	3304      	adds	r3, #4
 80092b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	705a      	strb	r2, [r3, #1]
 80092bc:	e00f      	b.n	80092de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	f003 020f 	and.w	r2, r3, #15
 80092c4:	4613      	mov	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	3304      	adds	r3, #4
 80092d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	f003 030f 	and.w	r3, r3, #15
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <HAL_PCD_EP_ClrStall+0x86>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e00e      	b.n	800931c <HAL_PCD_EP_ClrStall+0xa4>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	4618      	mov	r0, r3
 800930e:	f004 feb5 	bl	800e07c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009334:	2b00      	cmp	r3, #0
 8009336:	da0c      	bge.n	8009352 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	f003 020f 	and.w	r2, r3, #15
 800933e:	4613      	mov	r3, r2
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	4413      	add	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	3338      	adds	r3, #56	; 0x38
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	4413      	add	r3, r2
 800934c:	3304      	adds	r3, #4
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e00c      	b.n	800936c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	4613      	mov	r3, r2
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	4413      	add	r3, r2
 8009368:	3304      	adds	r3, #4
 800936a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68f9      	ldr	r1, [r7, #12]
 8009372:	4618      	mov	r0, r3
 8009374:	f004 fcd8 	bl	800dd28 <USB_EPStopXfer>
 8009378:	4603      	mov	r3, r0
 800937a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800937c:	7afb      	ldrb	r3, [r7, #11]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b088      	sub	sp, #32
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	3338      	adds	r3, #56	; 0x38
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	4413      	add	r3, r2
 80093aa:	3304      	adds	r3, #4
 80093ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a1a      	ldr	r2, [r3, #32]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d901      	bls.n	80093be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e067      	b.n	800948e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6a1b      	ldr	r3, [r3, #32]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d902      	bls.n	80093da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	3303      	adds	r3, #3
 80093de:	089b      	lsrs	r3, r3, #2
 80093e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093e2:	e026      	b.n	8009432 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d902      	bls.n	8009400 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	3303      	adds	r3, #3
 8009404:	089b      	lsrs	r3, r3, #2
 8009406:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6919      	ldr	r1, [r3, #16]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	b2da      	uxtb	r2, r3
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	b29b      	uxth	r3, r3
 8009414:	6978      	ldr	r0, [r7, #20]
 8009416:	f004 fd31 	bl	800de7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	441a      	add	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6a1a      	ldr	r2, [r3, #32]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	441a      	add	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	b29b      	uxth	r3, r3
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	429a      	cmp	r2, r3
 8009446:	d809      	bhi.n	800945c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a1a      	ldr	r2, [r3, #32]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009450:	429a      	cmp	r2, r3
 8009452:	d203      	bcs.n	800945c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1c3      	bne.n	80093e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699a      	ldr	r2, [r3, #24]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	429a      	cmp	r2, r3
 8009466:	d811      	bhi.n	800948c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	2201      	movs	r2, #1
 8009470:	fa02 f303 	lsl.w	r3, r2, r3
 8009474:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	43db      	mvns	r3, r3
 8009482:	6939      	ldr	r1, [r7, #16]
 8009484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009488:	4013      	ands	r3, r2
 800948a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3720      	adds	r7, #32
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	333c      	adds	r3, #60	; 0x3c
 80094b0:	3304      	adds	r3, #4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4a19      	ldr	r2, [pc, #100]	; (8009530 <PCD_EP_OutXfrComplete_int+0x98>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d124      	bne.n	8009518 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e4:	461a      	mov	r2, r3
 80094e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ea:	6093      	str	r3, [r2, #8]
 80094ec:	e01a      	b.n	8009524 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d008      	beq.n	800950a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009504:	461a      	mov	r2, r3
 8009506:	2320      	movs	r3, #32
 8009508:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f009 fce7 	bl	8012ee4 <HAL_PCD_DataOutStageCallback>
 8009516:	e005      	b.n	8009524 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f009 fce0 	bl	8012ee4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	4f54310a 	.word	0x4f54310a

08009534 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	333c      	adds	r3, #60	; 0x3c
 800954c:	3304      	adds	r3, #4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a0c      	ldr	r2, [pc, #48]	; (8009598 <PCD_EP_OutSetupPacket_int+0x64>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d90e      	bls.n	8009588 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009570:	2b00      	cmp	r3, #0
 8009572:	d009      	beq.n	8009588 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	461a      	mov	r2, r3
 8009582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009586:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f009 fc99 	bl	8012ec0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	4f54300a 	.word	0x4f54300a

0800959c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
 80095a8:	4613      	mov	r3, r2
 80095aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d107      	bne.n	80095ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80095ba:	883b      	ldrh	r3, [r7, #0]
 80095bc:	0419      	lsls	r1, r3, #16
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28
 80095c8:	e028      	b.n	800961c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	0c1b      	lsrs	r3, r3, #16
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	4413      	add	r3, r2
 80095d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
 80095dc:	e00d      	b.n	80095fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	3340      	adds	r3, #64	; 0x40
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	0c1b      	lsrs	r3, r3, #16
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	4413      	add	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	3301      	adds	r3, #1
 80095f8:	73fb      	strb	r3, [r7, #15]
 80095fa:	7bfa      	ldrb	r2, [r7, #15]
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	3b01      	subs	r3, #1
 8009600:	429a      	cmp	r2, r3
 8009602:	d3ec      	bcc.n	80095de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009604:	883b      	ldrh	r3, [r7, #0]
 8009606:	0418      	lsls	r0, r3, #16
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6819      	ldr	r1, [r3, #0]
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	3b01      	subs	r3, #1
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	4302      	orrs	r2, r0
 8009614:	3340      	adds	r3, #64	; 0x40
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	887a      	ldrh	r2, [r7, #2]
 800963c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800967e:	f043 0303 	orr.w	r3, r3, #3
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096a6:	d104      	bne.n	80096b2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f908 	bl	80098c0 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80096b0:	e003      	b.n	80096ba <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f8d9 	bl	800986c <HAL_PWREx_EnterSTOP0Mode>
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80096c8:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <HAL_PWREx_GetVoltageRange+0x3c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096d4:	d102      	bne.n	80096dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80096d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096da:	e00b      	b.n	80096f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80096dc:	4b08      	ldr	r3, [pc, #32]	; (8009700 <HAL_PWREx_GetVoltageRange+0x3c>)
 80096de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ea:	d102      	bne.n	80096f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80096ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096f0:	e000      	b.n	80096f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80096f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40007000 	.word	0x40007000

08009704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d141      	bne.n	8009796 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009712:	4b4b      	ldr	r3, [pc, #300]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800971a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800971e:	d131      	bne.n	8009784 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009720:	4b47      	ldr	r3, [pc, #284]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009726:	4a46      	ldr	r2, [pc, #280]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800972c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009730:	4b43      	ldr	r3, [pc, #268]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009738:	4a41      	ldr	r2, [pc, #260]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800973a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800973e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009740:	4b40      	ldr	r3, [pc, #256]	; (8009844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2232      	movs	r2, #50	; 0x32
 8009746:	fb02 f303 	mul.w	r3, r2, r3
 800974a:	4a3f      	ldr	r2, [pc, #252]	; (8009848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800974c:	fba2 2303 	umull	r2, r3, r2, r3
 8009750:	0c9b      	lsrs	r3, r3, #18
 8009752:	3301      	adds	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009756:	e002      	b.n	800975e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3b01      	subs	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800975e:	4b38      	ldr	r3, [pc, #224]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800976a:	d102      	bne.n	8009772 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1f2      	bne.n	8009758 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009772:	4b33      	ldr	r3, [pc, #204]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800977a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977e:	d158      	bne.n	8009832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e057      	b.n	8009834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009784:	4b2e      	ldr	r3, [pc, #184]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800978a:	4a2d      	ldr	r2, [pc, #180]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800978c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009794:	e04d      	b.n	8009832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800979c:	d141      	bne.n	8009822 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800979e:	4b28      	ldr	r3, [pc, #160]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097aa:	d131      	bne.n	8009810 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097ac:	4b24      	ldr	r3, [pc, #144]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b2:	4a23      	ldr	r2, [pc, #140]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097bc:	4b20      	ldr	r3, [pc, #128]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097c4:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097cc:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2232      	movs	r2, #50	; 0x32
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
 80097d6:	4a1c      	ldr	r2, [pc, #112]	; (8009848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097d8:	fba2 2303 	umull	r2, r3, r2, r3
 80097dc:	0c9b      	lsrs	r3, r3, #18
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097e2:	e002      	b.n	80097ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097ea:	4b15      	ldr	r3, [pc, #84]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097f6:	d102      	bne.n	80097fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f2      	bne.n	80097e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097fe:	4b10      	ldr	r3, [pc, #64]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980a:	d112      	bne.n	8009832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e011      	b.n	8009834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009810:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009816:	4a0a      	ldr	r2, [pc, #40]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800981c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009820:	e007      	b.n	8009832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009822:	4b07      	ldr	r3, [pc, #28]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800982a:	4a05      	ldr	r2, [pc, #20]	; (8009840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800982c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009830:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	40007000 	.word	0x40007000
 8009844:	20000224 	.word	0x20000224
 8009848:	431bde83 	.word	0x431bde83

0800984c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009850:	4b05      	ldr	r3, [pc, #20]	; (8009868 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a04      	ldr	r2, [pc, #16]	; (8009868 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800985a:	6053      	str	r3, [r2, #4]
}
 800985c:	bf00      	nop
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40007000 	.word	0x40007000

0800986c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009876:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a0f      	ldr	r2, [pc, #60]	; (80098b8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800987c:	f023 0307 	bic.w	r3, r3, #7
 8009880:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009882:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009888:	f043 0304 	orr.w	r3, r3, #4
 800988c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800988e:	79fb      	ldrb	r3, [r7, #7]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d101      	bne.n	8009898 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009894:	bf30      	wfi
 8009896:	e002      	b.n	800989e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009898:	bf40      	sev
    __WFE();
 800989a:	bf20      	wfe
    __WFE();
 800989c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800989e:	4b07      	ldr	r3, [pc, #28]	; (80098bc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	4a06      	ldr	r2, [pc, #24]	; (80098bc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098a4:	f023 0304 	bic.w	r3, r3, #4
 80098a8:	6113      	str	r3, [r2, #16]
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	40007000 	.word	0x40007000
 80098bc:	e000ed00 	.word	0xe000ed00

080098c0 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80098ca:	4b11      	ldr	r3, [pc, #68]	; (8009910 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f023 0307 	bic.w	r3, r3, #7
 80098d2:	4a0f      	ldr	r2, [pc, #60]	; (8009910 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80098d4:	f043 0301 	orr.w	r3, r3, #1
 80098d8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	4a0d      	ldr	r2, [pc, #52]	; (8009914 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80098ec:	bf30      	wfi
 80098ee:	e002      	b.n	80098f6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80098f0:	bf40      	sev
    __WFE();
 80098f2:	bf20      	wfe
    __WFE();
 80098f4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80098f6:	4b07      	ldr	r3, [pc, #28]	; (8009914 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	4a06      	ldr	r2, [pc, #24]	; (8009914 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80098fc:	f023 0304 	bic.w	r3, r3, #4
 8009900:	6113      	str	r3, [r2, #16]
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40007000 	.word	0x40007000
 8009914:	e000ed00 	.word	0xe000ed00

08009918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d102      	bne.n	800992c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f000 bc68 	b.w	800a1fc <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800992c:	4b97      	ldr	r3, [pc, #604]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f003 030c 	and.w	r3, r3, #12
 8009934:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009936:	4b95      	ldr	r3, [pc, #596]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 80e6 	beq.w	8009b1a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d007      	beq.n	8009964 <HAL_RCC_OscConfig+0x4c>
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	2b0c      	cmp	r3, #12
 8009958:	f040 808d 	bne.w	8009a76 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b01      	cmp	r3, #1
 8009960:	f040 8089 	bne.w	8009a76 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009964:	4b89      	ldr	r3, [pc, #548]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <HAL_RCC_OscConfig+0x66>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	f000 bc3f 	b.w	800a1fc <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009982:	4b82      	ldr	r3, [pc, #520]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <HAL_RCC_OscConfig+0x80>
 800998e:	4b7f      	ldr	r3, [pc, #508]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009996:	e005      	b.n	80099a4 <HAL_RCC_OscConfig+0x8c>
 8009998:	4b7c      	ldr	r3, [pc, #496]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 800999a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800999e:	091b      	lsrs	r3, r3, #4
 80099a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d224      	bcs.n	80099f2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fe47 	bl	800a640 <RCC_SetFlashLatencyFromMSIRange>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	f000 bc1f 	b.w	800a1fc <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099be:	4b73      	ldr	r3, [pc, #460]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a72      	ldr	r2, [pc, #456]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099c4:	f043 0308 	orr.w	r3, r3, #8
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	4b70      	ldr	r3, [pc, #448]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	496d      	ldr	r1, [pc, #436]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80099dc:	4b6b      	ldr	r3, [pc, #428]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	4968      	ldr	r1, [pc, #416]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	604b      	str	r3, [r1, #4]
 80099f0:	e025      	b.n	8009a3e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099f2:	4b66      	ldr	r3, [pc, #408]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a65      	ldr	r2, [pc, #404]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 80099f8:	f043 0308 	orr.w	r3, r3, #8
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	4b63      	ldr	r3, [pc, #396]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	4960      	ldr	r1, [pc, #384]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a10:	4b5e      	ldr	r3, [pc, #376]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	495b      	ldr	r1, [pc, #364]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 fe06 	bl	800a640 <RCC_SetFlashLatencyFromMSIRange>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e3de      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a3e:	f000 fd21 	bl	800a484 <HAL_RCC_GetSysClockFreq>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b51      	ldr	r3, [pc, #324]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	091b      	lsrs	r3, r3, #4
 8009a4a:	f003 030f 	and.w	r3, r3, #15
 8009a4e:	4950      	ldr	r1, [pc, #320]	; (8009b90 <HAL_RCC_OscConfig+0x278>)
 8009a50:	5ccb      	ldrb	r3, [r1, r3]
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5a:	4a4e      	ldr	r2, [pc, #312]	; (8009b94 <HAL_RCC_OscConfig+0x27c>)
 8009a5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009a5e:	4b4e      	ldr	r3, [pc, #312]	; (8009b98 <HAL_RCC_OscConfig+0x280>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fb f96c 	bl	8004d40 <HAL_InitTick>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d052      	beq.n	8009b18 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	e3c2      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d032      	beq.n	8009ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009a7e:	4b43      	ldr	r3, [pc, #268]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a42      	ldr	r2, [pc, #264]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009a84:	f043 0301 	orr.w	r3, r3, #1
 8009a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009a8a:	f7fb fb47 	bl	800511c <HAL_GetTick>
 8009a8e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009a92:	f7fb fb43 	bl	800511c <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e3ab      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009aa4:	4b39      	ldr	r3, [pc, #228]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0f0      	beq.n	8009a92 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ab0:	4b36      	ldr	r3, [pc, #216]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a35      	ldr	r2, [pc, #212]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009ab6:	f043 0308 	orr.w	r3, r3, #8
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	4b33      	ldr	r3, [pc, #204]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	4930      	ldr	r1, [pc, #192]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ace:	4b2f      	ldr	r3, [pc, #188]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	492b      	ldr	r1, [pc, #172]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	604b      	str	r3, [r1, #4]
 8009ae2:	e01a      	b.n	8009b1a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009ae4:	4b29      	ldr	r3, [pc, #164]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a28      	ldr	r2, [pc, #160]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009aea:	f023 0301 	bic.w	r3, r3, #1
 8009aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009af0:	f7fb fb14 	bl	800511c <HAL_GetTick>
 8009af4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009af6:	e008      	b.n	8009b0a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009af8:	f7fb fb10 	bl	800511c <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d901      	bls.n	8009b0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e378      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b0a:	4b20      	ldr	r3, [pc, #128]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1f0      	bne.n	8009af8 <HAL_RCC_OscConfig+0x1e0>
 8009b16:	e000      	b.n	8009b1a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d073      	beq.n	8009c0e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d005      	beq.n	8009b38 <HAL_RCC_OscConfig+0x220>
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	2b0c      	cmp	r3, #12
 8009b30:	d10e      	bne.n	8009b50 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d10b      	bne.n	8009b50 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b38:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d063      	beq.n	8009c0c <HAL_RCC_OscConfig+0x2f4>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d15f      	bne.n	8009c0c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e355      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b58:	d106      	bne.n	8009b68 <HAL_RCC_OscConfig+0x250>
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a0b      	ldr	r2, [pc, #44]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b64:	6013      	str	r3, [r2, #0]
 8009b66:	e025      	b.n	8009bb4 <HAL_RCC_OscConfig+0x29c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b70:	d114      	bne.n	8009b9c <HAL_RCC_OscConfig+0x284>
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a05      	ldr	r2, [pc, #20]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	4b03      	ldr	r3, [pc, #12]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a02      	ldr	r2, [pc, #8]	; (8009b8c <HAL_RCC_OscConfig+0x274>)
 8009b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e013      	b.n	8009bb4 <HAL_RCC_OscConfig+0x29c>
 8009b8c:	40021000 	.word	0x40021000
 8009b90:	08016d80 	.word	0x08016d80
 8009b94:	20000224 	.word	0x20000224
 8009b98:	20000228 	.word	0x20000228
 8009b9c:	4b8f      	ldr	r3, [pc, #572]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a8e      	ldr	r2, [pc, #568]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	4b8c      	ldr	r3, [pc, #560]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a8b      	ldr	r2, [pc, #556]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d013      	beq.n	8009be4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bbc:	f7fb faae 	bl	800511c <HAL_GetTick>
 8009bc0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bc4:	f7fb faaa 	bl	800511c <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b64      	cmp	r3, #100	; 0x64
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e312      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bd6:	4b81      	ldr	r3, [pc, #516]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x2ac>
 8009be2:	e014      	b.n	8009c0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be4:	f7fb fa9a 	bl	800511c <HAL_GetTick>
 8009be8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bec:	f7fb fa96 	bl	800511c <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b64      	cmp	r3, #100	; 0x64
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e2fe      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bfe:	4b77      	ldr	r3, [pc, #476]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1f0      	bne.n	8009bec <HAL_RCC_OscConfig+0x2d4>
 8009c0a:	e000      	b.n	8009c0e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d060      	beq.n	8009cdc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d005      	beq.n	8009c2c <HAL_RCC_OscConfig+0x314>
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	2b0c      	cmp	r3, #12
 8009c24:	d119      	bne.n	8009c5a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d116      	bne.n	8009c5a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c2c:	4b6b      	ldr	r3, [pc, #428]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <HAL_RCC_OscConfig+0x32c>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e2db      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c44:	4b65      	ldr	r3, [pc, #404]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	061b      	lsls	r3, r3, #24
 8009c52:	4962      	ldr	r1, [pc, #392]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c58:	e040      	b.n	8009cdc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d023      	beq.n	8009caa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c62:	4b5e      	ldr	r3, [pc, #376]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a5d      	ldr	r2, [pc, #372]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6e:	f7fb fa55 	bl	800511c <HAL_GetTick>
 8009c72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c74:	e008      	b.n	8009c88 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c76:	f7fb fa51 	bl	800511c <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d901      	bls.n	8009c88 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e2b9      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c88:	4b54      	ldr	r3, [pc, #336]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0f0      	beq.n	8009c76 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c94:	4b51      	ldr	r3, [pc, #324]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	061b      	lsls	r3, r3, #24
 8009ca2:	494e      	ldr	r1, [pc, #312]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	604b      	str	r3, [r1, #4]
 8009ca8:	e018      	b.n	8009cdc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009caa:	4b4c      	ldr	r3, [pc, #304]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a4b      	ldr	r2, [pc, #300]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb6:	f7fb fa31 	bl	800511c <HAL_GetTick>
 8009cba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cbe:	f7fb fa2d 	bl	800511c <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e295      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cd0:	4b42      	ldr	r3, [pc, #264]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f0      	bne.n	8009cbe <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8082 	beq.w	8009dee <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d05f      	beq.n	8009db2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009cf2:	4b3a      	ldr	r3, [pc, #232]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cf8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699a      	ldr	r2, [r3, #24]
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d037      	beq.n	8009d78 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e26d      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d01b      	beq.n	8009d62 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009d2a:	4b2c      	ldr	r3, [pc, #176]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d30:	4a2a      	ldr	r2, [pc, #168]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d32:	f023 0301 	bic.w	r3, r3, #1
 8009d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d3a:	f7fb f9ef 	bl	800511c <HAL_GetTick>
 8009d3e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d40:	e008      	b.n	8009d54 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d42:	f7fb f9eb 	bl	800511c <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b11      	cmp	r3, #17
 8009d4e:	d901      	bls.n	8009d54 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e253      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d54:	4b21      	ldr	r3, [pc, #132]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1ef      	bne.n	8009d42 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009d62:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d68:	f023 0210 	bic.w	r2, r3, #16
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	491a      	ldr	r1, [pc, #104]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d78:	4b18      	ldr	r3, [pc, #96]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d7e:	4a17      	ldr	r2, [pc, #92]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009d80:	f043 0301 	orr.w	r3, r3, #1
 8009d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d88:	f7fb f9c8 	bl	800511c <HAL_GetTick>
 8009d8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d8e:	e008      	b.n	8009da2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d90:	f7fb f9c4 	bl	800511c <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	2b11      	cmp	r3, #17
 8009d9c:	d901      	bls.n	8009da2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e22c      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009da2:	4b0e      	ldr	r3, [pc, #56]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0ef      	beq.n	8009d90 <HAL_RCC_OscConfig+0x478>
 8009db0:	e01d      	b.n	8009dee <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009db8:	4a08      	ldr	r2, [pc, #32]	; (8009ddc <HAL_RCC_OscConfig+0x4c4>)
 8009dba:	f023 0301 	bic.w	r3, r3, #1
 8009dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc2:	f7fb f9ab 	bl	800511c <HAL_GetTick>
 8009dc6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009dc8:	e00a      	b.n	8009de0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dca:	f7fb f9a7 	bl	800511c <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b11      	cmp	r3, #17
 8009dd6:	d903      	bls.n	8009de0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e20f      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
 8009ddc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009de0:	4b83      	ldr	r3, [pc, #524]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1ed      	bne.n	8009dca <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80bd 	beq.w	8009f76 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e02:	4b7b      	ldr	r3, [pc, #492]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10e      	bne.n	8009e2c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e0e:	4b78      	ldr	r3, [pc, #480]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e12:	4a77      	ldr	r2, [pc, #476]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e18:	6593      	str	r3, [r2, #88]	; 0x58
 8009e1a:	4b75      	ldr	r3, [pc, #468]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e2c:	4b71      	ldr	r3, [pc, #452]	; (8009ff4 <HAL_RCC_OscConfig+0x6dc>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d118      	bne.n	8009e6a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e38:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <HAL_RCC_OscConfig+0x6dc>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a6d      	ldr	r2, [pc, #436]	; (8009ff4 <HAL_RCC_OscConfig+0x6dc>)
 8009e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e44:	f7fb f96a 	bl	800511c <HAL_GetTick>
 8009e48:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e4c:	f7fb f966 	bl	800511c <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e1ce      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e5e:	4b65      	ldr	r3, [pc, #404]	; (8009ff4 <HAL_RCC_OscConfig+0x6dc>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f0      	beq.n	8009e4c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d02c      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8009e76:	4b5e      	ldr	r3, [pc, #376]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e88:	4959      	ldr	r1, [pc, #356]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d010      	beq.n	8009ebe <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009e9c:	4b54      	ldr	r3, [pc, #336]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ea2:	4a53      	ldr	r2, [pc, #332]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ea4:	f043 0304 	orr.w	r3, r3, #4
 8009ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009eac:	4b50      	ldr	r3, [pc, #320]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb2:	4a4f      	ldr	r2, [pc, #316]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ebc:	e018      	b.n	8009ef0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ebe:	4b4c      	ldr	r3, [pc, #304]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec4:	4a4a      	ldr	r2, [pc, #296]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ec6:	f043 0301 	orr.w	r3, r3, #1
 8009eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ece:	e00f      	b.n	8009ef0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ed0:	4b47      	ldr	r3, [pc, #284]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed6:	4a46      	ldr	r2, [pc, #280]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ed8:	f023 0301 	bic.w	r3, r3, #1
 8009edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009ee0:	4b43      	ldr	r3, [pc, #268]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee6:	4a42      	ldr	r2, [pc, #264]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009ee8:	f023 0304 	bic.w	r3, r3, #4
 8009eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d016      	beq.n	8009f26 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef8:	f7fb f910 	bl	800511c <HAL_GetTick>
 8009efc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009efe:	e00a      	b.n	8009f16 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f00:	f7fb f90c 	bl	800511c <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d901      	bls.n	8009f16 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e172      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f16:	4b36      	ldr	r3, [pc, #216]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0ed      	beq.n	8009f00 <HAL_RCC_OscConfig+0x5e8>
 8009f24:	e01d      	b.n	8009f62 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f26:	f7fb f8f9 	bl	800511c <HAL_GetTick>
 8009f2a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f2c:	e00a      	b.n	8009f44 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f2e:	f7fb f8f5 	bl	800511c <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d901      	bls.n	8009f44 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e15b      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f44:	4b2a      	ldr	r3, [pc, #168]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ed      	bne.n	8009f2e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8009f52:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f58:	4a25      	ldr	r2, [pc, #148]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d105      	bne.n	8009f76 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f6a:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6e:	4a20      	ldr	r2, [pc, #128]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0320 	and.w	r3, r3, #32
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d041      	beq.n	800a006 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d01c      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f8a:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f90:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009f92:	f043 0301 	orr.w	r3, r3, #1
 8009f96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f9a:	f7fb f8bf 	bl	800511c <HAL_GetTick>
 8009f9e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fa0:	e008      	b.n	8009fb4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fa2:	f7fb f8bb 	bl	800511c <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d901      	bls.n	8009fb4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e123      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0ef      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x68a>
 8009fc2:	e020      	b.n	800a006 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fca:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <HAL_RCC_OscConfig+0x6d8>)
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd4:	f7fb f8a2 	bl	800511c <HAL_GetTick>
 8009fd8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009fda:	e00d      	b.n	8009ff8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fdc:	f7fb f89e 	bl	800511c <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d906      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e106      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
 8009fee:	bf00      	nop
 8009ff0:	40021000 	.word	0x40021000
 8009ff4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ff8:	4b82      	ldr	r3, [pc, #520]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 8009ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1ea      	bne.n	8009fdc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 80f5 	beq.w	800a1fa <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	2b02      	cmp	r3, #2
 800a016:	f040 80cb 	bne.w	800a1b0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a01a:	4b7a      	ldr	r3, [pc, #488]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f003 0203 	and.w	r2, r3, #3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d12c      	bne.n	800a088 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a038:	3b01      	subs	r3, #1
 800a03a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d123      	bne.n	800a088 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d11b      	bne.n	800a088 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d113      	bne.n	800a088 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	3b01      	subs	r3, #1
 800a06e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a070:	429a      	cmp	r2, r3
 800a072:	d109      	bne.n	800a088 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07e:	085b      	lsrs	r3, r3, #1
 800a080:	3b01      	subs	r3, #1
 800a082:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a084:	429a      	cmp	r2, r3
 800a086:	d06d      	beq.n	800a164 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	2b0c      	cmp	r3, #12
 800a08c:	d068      	beq.n	800a160 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a08e:	4b5d      	ldr	r3, [pc, #372]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a09a:	4b5a      	ldr	r3, [pc, #360]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e0a8      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a0aa:	4b56      	ldr	r3, [pc, #344]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a55      	ldr	r2, [pc, #340]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a0b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a0b6:	f7fb f831 	bl	800511c <HAL_GetTick>
 800a0ba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0be:	f7fb f82d 	bl	800511c <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e095      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0d0:	4b4c      	ldr	r3, [pc, #304]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f0      	bne.n	800a0be <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0dc:	4b49      	ldr	r3, [pc, #292]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a0de:	68da      	ldr	r2, [r3, #12]
 800a0e0:	4b49      	ldr	r3, [pc, #292]	; (800a208 <HAL_RCC_OscConfig+0x8f0>)
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a0ec:	3a01      	subs	r2, #1
 800a0ee:	0112      	lsls	r2, r2, #4
 800a0f0:	4311      	orrs	r1, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0f6:	0212      	lsls	r2, r2, #8
 800a0f8:	4311      	orrs	r1, r2
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a0fe:	0852      	lsrs	r2, r2, #1
 800a100:	3a01      	subs	r2, #1
 800a102:	0552      	lsls	r2, r2, #21
 800a104:	4311      	orrs	r1, r2
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a10a:	0852      	lsrs	r2, r2, #1
 800a10c:	3a01      	subs	r2, #1
 800a10e:	0652      	lsls	r2, r2, #25
 800a110:	4311      	orrs	r1, r2
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a116:	06d2      	lsls	r2, r2, #27
 800a118:	430a      	orrs	r2, r1
 800a11a:	493a      	ldr	r1, [pc, #232]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a120:	4b38      	ldr	r3, [pc, #224]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a37      	ldr	r2, [pc, #220]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a12a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a12c:	4b35      	ldr	r3, [pc, #212]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4a34      	ldr	r2, [pc, #208]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a136:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a138:	f7fa fff0 	bl	800511c <HAL_GetTick>
 800a13c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a13e:	e008      	b.n	800a152 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a140:	f7fa ffec 	bl	800511c <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e054      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a152:	4b2c      	ldr	r3, [pc, #176]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f0      	beq.n	800a140 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a15e:	e04c      	b.n	800a1fa <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e04b      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a164:	4b27      	ldr	r3, [pc, #156]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d144      	bne.n	800a1fa <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a170:	4b24      	ldr	r3, [pc, #144]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a23      	ldr	r2, [pc, #140]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a17a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a17c:	4b21      	ldr	r3, [pc, #132]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	4a20      	ldr	r2, [pc, #128]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a186:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a188:	f7fa ffc8 	bl	800511c <HAL_GetTick>
 800a18c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a18e:	e008      	b.n	800a1a2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a190:	f7fa ffc4 	bl	800511c <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d901      	bls.n	800a1a2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e02c      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1a2:	4b18      	ldr	r3, [pc, #96]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0f0      	beq.n	800a190 <HAL_RCC_OscConfig+0x878>
 800a1ae:	e024      	b.n	800a1fa <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	2b0c      	cmp	r3, #12
 800a1b4:	d01f      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a12      	ldr	r2, [pc, #72]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a1bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c2:	f7fa ffab 	bl	800511c <HAL_GetTick>
 800a1c6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1c8:	e008      	b.n	800a1dc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ca:	f7fa ffa7 	bl	800511c <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e00f      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1f0      	bne.n	800a1ca <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	4905      	ldr	r1, [pc, #20]	; (800a204 <HAL_RCC_OscConfig+0x8ec>)
 800a1ee:	4b07      	ldr	r3, [pc, #28]	; (800a20c <HAL_RCC_OscConfig+0x8f4>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60cb      	str	r3, [r1, #12]
 800a1f4:	e001      	b.n	800a1fa <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3728      	adds	r7, #40	; 0x28
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	40021000 	.word	0x40021000
 800a208:	019d800c 	.word	0x019d800c
 800a20c:	feeefffc 	.word	0xfeeefffc

0800a210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e11d      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a228:	4b90      	ldr	r3, [pc, #576]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d910      	bls.n	800a258 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a236:	4b8d      	ldr	r3, [pc, #564]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f023 020f 	bic.w	r2, r3, #15
 800a23e:	498b      	ldr	r1, [pc, #556]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	4313      	orrs	r3, r2
 800a244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a246:	4b89      	ldr	r3, [pc, #548]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 030f 	and.w	r3, r3, #15
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d001      	beq.n	800a258 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e105      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d010      	beq.n	800a286 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	4b81      	ldr	r3, [pc, #516]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a270:	429a      	cmp	r2, r3
 800a272:	d908      	bls.n	800a286 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a274:	4b7e      	ldr	r3, [pc, #504]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	497b      	ldr	r1, [pc, #492]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a282:	4313      	orrs	r3, r2
 800a284:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d079      	beq.n	800a386 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2b03      	cmp	r3, #3
 800a298:	d11e      	bne.n	800a2d8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a29a:	4b75      	ldr	r3, [pc, #468]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e0dc      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a2aa:	f000 fa23 	bl	800a6f4 <RCC_GetSysClockFreqFromPLLSource>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4a70      	ldr	r2, [pc, #448]	; (800a474 <HAL_RCC_ClockConfig+0x264>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d946      	bls.n	800a344 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a2b6:	4b6e      	ldr	r3, [pc, #440]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d140      	bne.n	800a344 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a2c2:	4b6b      	ldr	r3, [pc, #428]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2ca:	4a69      	ldr	r2, [pc, #420]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a2d2:	2380      	movs	r3, #128	; 0x80
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e035      	b.n	800a344 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d107      	bne.n	800a2f0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2e0:	4b63      	ldr	r3, [pc, #396]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d115      	bne.n	800a318 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e0b9      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d107      	bne.n	800a308 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2f8:	4b5d      	ldr	r3, [pc, #372]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e0ad      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a308:	4b59      	ldr	r3, [pc, #356]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e0a5      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a318:	f000 f8b4 	bl	800a484 <HAL_RCC_GetSysClockFreq>
 800a31c:	4603      	mov	r3, r0
 800a31e:	4a55      	ldr	r2, [pc, #340]	; (800a474 <HAL_RCC_ClockConfig+0x264>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d90f      	bls.n	800a344 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a324:	4b52      	ldr	r3, [pc, #328]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d109      	bne.n	800a344 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a330:	4b4f      	ldr	r3, [pc, #316]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a338:	4a4d      	ldr	r2, [pc, #308]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a340:	2380      	movs	r3, #128	; 0x80
 800a342:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a344:	4b4a      	ldr	r3, [pc, #296]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f023 0203 	bic.w	r2, r3, #3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4947      	ldr	r1, [pc, #284]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a352:	4313      	orrs	r3, r2
 800a354:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a356:	f7fa fee1 	bl	800511c <HAL_GetTick>
 800a35a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35c:	e00a      	b.n	800a374 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a35e:	f7fa fedd 	bl	800511c <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	f241 3288 	movw	r2, #5000	; 0x1388
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d901      	bls.n	800a374 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	e077      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a374:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f003 020c 	and.w	r2, r3, #12
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	429a      	cmp	r2, r3
 800a384:	d1eb      	bne.n	800a35e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2b80      	cmp	r3, #128	; 0x80
 800a38a:	d105      	bne.n	800a398 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a38c:	4b38      	ldr	r3, [pc, #224]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	4a37      	ldr	r2, [pc, #220]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a396:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d010      	beq.n	800a3c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	4b31      	ldr	r3, [pc, #196]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d208      	bcs.n	800a3c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3b4:	4b2e      	ldr	r3, [pc, #184]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	492b      	ldr	r1, [pc, #172]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3c6:	4b29      	ldr	r3, [pc, #164]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d210      	bcs.n	800a3f6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3d4:	4b25      	ldr	r3, [pc, #148]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f023 020f 	bic.w	r2, r3, #15
 800a3dc:	4923      	ldr	r1, [pc, #140]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3e4:	4b21      	ldr	r3, [pc, #132]	; (800a46c <HAL_RCC_ClockConfig+0x25c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d001      	beq.n	800a3f6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e036      	b.n	800a464 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0304 	and.w	r3, r3, #4
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d008      	beq.n	800a414 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a402:	4b1b      	ldr	r3, [pc, #108]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	4918      	ldr	r1, [pc, #96]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a410:	4313      	orrs	r3, r2
 800a412:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d009      	beq.n	800a434 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	4910      	ldr	r1, [pc, #64]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a430:	4313      	orrs	r3, r2
 800a432:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a434:	f000 f826 	bl	800a484 <HAL_RCC_GetSysClockFreq>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b0d      	ldr	r3, [pc, #52]	; (800a470 <HAL_RCC_ClockConfig+0x260>)
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	091b      	lsrs	r3, r3, #4
 800a440:	f003 030f 	and.w	r3, r3, #15
 800a444:	490c      	ldr	r1, [pc, #48]	; (800a478 <HAL_RCC_ClockConfig+0x268>)
 800a446:	5ccb      	ldrb	r3, [r1, r3]
 800a448:	f003 031f 	and.w	r3, r3, #31
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
 800a450:	4a0a      	ldr	r2, [pc, #40]	; (800a47c <HAL_RCC_ClockConfig+0x26c>)
 800a452:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a454:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <HAL_RCC_ClockConfig+0x270>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fa fc71 	bl	8004d40 <HAL_InitTick>
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]

  return status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	40022000 	.word	0x40022000
 800a470:	40021000 	.word	0x40021000
 800a474:	04c4b400 	.word	0x04c4b400
 800a478:	08016d80 	.word	0x08016d80
 800a47c:	20000224 	.word	0x20000224
 800a480:	20000228 	.word	0x20000228

0800a484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a484:	b480      	push	{r7}
 800a486:	b089      	sub	sp, #36	; 0x24
 800a488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	61fb      	str	r3, [r7, #28]
 800a48e:	2300      	movs	r3, #0
 800a490:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a492:	4b3e      	ldr	r3, [pc, #248]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f003 030c 	and.w	r3, r3, #12
 800a49a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a49c:	4b3b      	ldr	r3, [pc, #236]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f003 0303 	and.w	r3, r3, #3
 800a4a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x34>
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2b0c      	cmp	r3, #12
 800a4b0:	d121      	bne.n	800a4f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d11e      	bne.n	800a4f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a4b8:	4b34      	ldr	r3, [pc, #208]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0308 	and.w	r3, r3, #8
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d107      	bne.n	800a4d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a4c4:	4b31      	ldr	r3, [pc, #196]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	e005      	b.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a4d4:	4b2d      	ldr	r3, [pc, #180]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	091b      	lsrs	r3, r3, #4
 800a4da:	f003 030f 	and.w	r3, r3, #15
 800a4de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a4e0:	4a2b      	ldr	r2, [pc, #172]	; (800a590 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10d      	bne.n	800a50c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4f4:	e00a      	b.n	800a50c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d102      	bne.n	800a502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a4fc:	4b25      	ldr	r3, [pc, #148]	; (800a594 <HAL_RCC_GetSysClockFreq+0x110>)
 800a4fe:	61bb      	str	r3, [r7, #24]
 800a500:	e004      	b.n	800a50c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b08      	cmp	r3, #8
 800a506:	d101      	bne.n	800a50c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a508:	4b22      	ldr	r3, [pc, #136]	; (800a594 <HAL_RCC_GetSysClockFreq+0x110>)
 800a50a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2b0c      	cmp	r3, #12
 800a510:	d134      	bne.n	800a57c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a512:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d003      	beq.n	800a52a <HAL_RCC_GetSysClockFreq+0xa6>
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d003      	beq.n	800a530 <HAL_RCC_GetSysClockFreq+0xac>
 800a528:	e005      	b.n	800a536 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a52a:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <HAL_RCC_GetSysClockFreq+0x110>)
 800a52c:	617b      	str	r3, [r7, #20]
      break;
 800a52e:	e005      	b.n	800a53c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a530:	4b18      	ldr	r3, [pc, #96]	; (800a594 <HAL_RCC_GetSysClockFreq+0x110>)
 800a532:	617b      	str	r3, [r7, #20]
      break;
 800a534:	e002      	b.n	800a53c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	617b      	str	r3, [r7, #20]
      break;
 800a53a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a53c:	4b13      	ldr	r3, [pc, #76]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	3301      	adds	r3, #1
 800a548:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a54a:	4b10      	ldr	r3, [pc, #64]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	0a1b      	lsrs	r3, r3, #8
 800a550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	fb03 f202 	mul.w	r2, r3, r2
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a560:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a562:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <HAL_RCC_GetSysClockFreq+0x108>)
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	0e5b      	lsrs	r3, r3, #25
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	3301      	adds	r3, #1
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a57c:	69bb      	ldr	r3, [r7, #24]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3724      	adds	r7, #36	; 0x24
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40021000 	.word	0x40021000
 800a590:	08016d98 	.word	0x08016d98
 800a594:	00f42400 	.word	0x00f42400

0800a598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a59c:	4b03      	ldr	r3, [pc, #12]	; (800a5ac <HAL_RCC_GetHCLKFreq+0x14>)
 800a59e:	681b      	ldr	r3, [r3, #0]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	20000224 	.word	0x20000224

0800a5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a5b4:	f7ff fff0 	bl	800a598 <HAL_RCC_GetHCLKFreq>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	0adb      	lsrs	r3, r3, #11
 800a5c0:	f003 0307 	and.w	r3, r3, #7
 800a5c4:	4904      	ldr	r1, [pc, #16]	; (800a5d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5c6:	5ccb      	ldrb	r3, [r1, r3]
 800a5c8:	f003 031f 	and.w	r3, r3, #31
 800a5cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	40021000 	.word	0x40021000
 800a5d8:	08016d90 	.word	0x08016d90

0800a5dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	220f      	movs	r2, #15
 800a5ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a5ec:	4b12      	ldr	r3, [pc, #72]	; (800a638 <HAL_RCC_GetClockConfig+0x5c>)
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f003 0203 	and.w	r2, r3, #3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <HAL_RCC_GetClockConfig+0x5c>)
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a604:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <HAL_RCC_GetClockConfig+0x5c>)
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a610:	4b09      	ldr	r3, [pc, #36]	; (800a638 <HAL_RCC_GetClockConfig+0x5c>)
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	08db      	lsrs	r3, r3, #3
 800a616:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <HAL_RCC_GetClockConfig+0x60>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 020f 	and.w	r2, r3, #15
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	40021000 	.word	0x40021000
 800a63c:	40022000 	.word	0x40022000

0800a640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a648:	2300      	movs	r3, #0
 800a64a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a64c:	4b27      	ldr	r3, [pc, #156]	; (800a6ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a658:	f7ff f834 	bl	80096c4 <HAL_PWREx_GetVoltageRange>
 800a65c:	6178      	str	r0, [r7, #20]
 800a65e:	e014      	b.n	800a68a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a660:	4b22      	ldr	r3, [pc, #136]	; (800a6ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a664:	4a21      	ldr	r2, [pc, #132]	; (800a6ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a66a:	6593      	str	r3, [r2, #88]	; 0x58
 800a66c:	4b1f      	ldr	r3, [pc, #124]	; (800a6ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a678:	f7ff f824 	bl	80096c4 <HAL_PWREx_GetVoltageRange>
 800a67c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a67e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a682:	4a1a      	ldr	r2, [pc, #104]	; (800a6ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a688:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a690:	d10b      	bne.n	800a6aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b80      	cmp	r3, #128	; 0x80
 800a696:	d913      	bls.n	800a6c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2ba0      	cmp	r3, #160	; 0xa0
 800a69c:	d902      	bls.n	800a6a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a69e:	2302      	movs	r3, #2
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	e00d      	b.n	800a6c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	e00a      	b.n	800a6c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b7f      	cmp	r3, #127	; 0x7f
 800a6ae:	d902      	bls.n	800a6b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	613b      	str	r3, [r7, #16]
 800a6b4:	e004      	b.n	800a6c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b70      	cmp	r3, #112	; 0x70
 800a6ba:	d101      	bne.n	800a6c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a6bc:	2301      	movs	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f023 020f 	bic.w	r2, r3, #15
 800a6c8:	4909      	ldr	r1, [pc, #36]	; (800a6f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a6d0:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 030f 	and.w	r3, r3, #15
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d001      	beq.n	800a6e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	40021000 	.word	0x40021000
 800a6f0:	40022000 	.word	0x40022000

0800a6f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6fa:	4b2d      	ldr	r3, [pc, #180]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b03      	cmp	r3, #3
 800a708:	d00b      	beq.n	800a722 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d825      	bhi.n	800a75c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d008      	beq.n	800a728 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d11f      	bne.n	800a75c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a71e:	613b      	str	r3, [r7, #16]
    break;
 800a720:	e01f      	b.n	800a762 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a722:	4b24      	ldr	r3, [pc, #144]	; (800a7b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a724:	613b      	str	r3, [r7, #16]
    break;
 800a726:	e01c      	b.n	800a762 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a728:	4b21      	ldr	r3, [pc, #132]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d107      	bne.n	800a744 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a734:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a73a:	0a1b      	lsrs	r3, r3, #8
 800a73c:	f003 030f 	and.w	r3, r3, #15
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	e005      	b.n	800a750 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a744:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	091b      	lsrs	r3, r3, #4
 800a74a:	f003 030f 	and.w	r3, r3, #15
 800a74e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a750:	4a19      	ldr	r2, [pc, #100]	; (800a7b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a758:	613b      	str	r3, [r7, #16]
    break;
 800a75a:	e002      	b.n	800a762 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	613b      	str	r3, [r7, #16]
    break;
 800a760:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a762:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	091b      	lsrs	r3, r3, #4
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	3301      	adds	r3, #1
 800a76e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	0a1b      	lsrs	r3, r3, #8
 800a776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	fb03 f202 	mul.w	r2, r3, r2
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	fbb2 f3f3 	udiv	r3, r2, r3
 800a786:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a788:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	0e5b      	lsrs	r3, r3, #25
 800a78e:	f003 0303 	and.w	r3, r3, #3
 800a792:	3301      	adds	r3, #1
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a7a2:	683b      	ldr	r3, [r7, #0]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	40021000 	.word	0x40021000
 800a7b4:	00f42400 	.word	0x00f42400
 800a7b8:	08016d98 	.word	0x08016d98

0800a7bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d040      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7dc:	2b80      	cmp	r3, #128	; 0x80
 800a7de:	d02a      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7e0:	2b80      	cmp	r3, #128	; 0x80
 800a7e2:	d825      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a7e4:	2b60      	cmp	r3, #96	; 0x60
 800a7e6:	d026      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7e8:	2b60      	cmp	r3, #96	; 0x60
 800a7ea:	d821      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a7ec:	2b40      	cmp	r3, #64	; 0x40
 800a7ee:	d006      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a7f0:	2b40      	cmp	r3, #64	; 0x40
 800a7f2:	d81d      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a7f8:	2b20      	cmp	r3, #32
 800a7fa:	d010      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a7fc:	e018      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a7fe:	4b89      	ldr	r3, [pc, #548]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	4a88      	ldr	r2, [pc, #544]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a808:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a80a:	e015      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3304      	adds	r3, #4
 800a810:	2100      	movs	r1, #0
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fb3e 	bl	800ae94 <RCCEx_PLLSAI1_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a81c:	e00c      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3320      	adds	r3, #32
 800a822:	2100      	movs	r1, #0
 800a824:	4618      	mov	r0, r3
 800a826:	f000 fc29 	bl	800b07c <RCCEx_PLLSAI2_Config>
 800a82a:	4603      	mov	r3, r0
 800a82c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a82e:	e003      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	74fb      	strb	r3, [r7, #19]
      break;
 800a834:	e000      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a836:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a838:	7cfb      	ldrb	r3, [r7, #19]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10b      	bne.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a83e:	4b79      	ldr	r3, [pc, #484]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a844:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a84c:	4975      	ldr	r1, [pc, #468]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a854:	e001      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a856:	7cfb      	ldrb	r3, [r7, #19]
 800a858:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d047      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86e:	d030      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a874:	d82a      	bhi.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a87a:	d02a      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a87c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a880:	d824      	bhi.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a886:	d008      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a88c:	d81e      	bhi.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a896:	d010      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a898:	e018      	b.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a89a:	4b62      	ldr	r3, [pc, #392]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	4a61      	ldr	r2, [pc, #388]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8a6:	e015      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 faf0 	bl	800ae94 <RCCEx_PLLSAI1_Config>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8b8:	e00c      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3320      	adds	r3, #32
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fbdb 	bl	800b07c <RCCEx_PLLSAI2_Config>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8ca:	e003      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	74fb      	strb	r3, [r7, #19]
      break;
 800a8d0:	e000      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a8d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8d4:	7cfb      	ldrb	r3, [r7, #19]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10b      	bne.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a8da:	4b52      	ldr	r3, [pc, #328]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e8:	494e      	ldr	r1, [pc, #312]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a8f0:	e001      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f2:	7cfb      	ldrb	r3, [r7, #19]
 800a8f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 809f 	beq.w	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a904:	2300      	movs	r3, #0
 800a906:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a908:	4b46      	ldr	r3, [pc, #280]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a918:	2300      	movs	r3, #0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00d      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a91e:	4b41      	ldr	r3, [pc, #260]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a922:	4a40      	ldr	r2, [pc, #256]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a928:	6593      	str	r3, [r2, #88]	; 0x58
 800a92a:	4b3e      	ldr	r3, [pc, #248]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a932:	60bb      	str	r3, [r7, #8]
 800a934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a936:	2301      	movs	r3, #1
 800a938:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a93a:	4b3b      	ldr	r3, [pc, #236]	; (800aa28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a3a      	ldr	r2, [pc, #232]	; (800aa28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a946:	f7fa fbe9 	bl	800511c <HAL_GetTick>
 800a94a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a94c:	e009      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a94e:	f7fa fbe5 	bl	800511c <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d902      	bls.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	74fb      	strb	r3, [r7, #19]
        break;
 800a960:	e005      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a962:	4b31      	ldr	r3, [pc, #196]	; (800aa28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0ef      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a96e:	7cfb      	ldrb	r3, [r7, #19]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d15b      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a974:	4b2b      	ldr	r3, [pc, #172]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a97e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d01f      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d019      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a992:	4b24      	ldr	r3, [pc, #144]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a99c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a99e:	4b21      	ldr	r3, [pc, #132]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a4:	4a1f      	ldr	r2, [pc, #124]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9ae:	4b1d      	ldr	r3, [pc, #116]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b4:	4a1b      	ldr	r2, [pc, #108]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a9be:	4a19      	ldr	r2, [pc, #100]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d016      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d0:	f7fa fba4 	bl	800511c <HAL_GetTick>
 800a9d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9d6:	e00b      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9d8:	f7fa fba0 	bl	800511c <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d902      	bls.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	74fb      	strb	r3, [r7, #19]
            break;
 800a9ee:	e006      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9f0:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f6:	f003 0302 	and.w	r3, r3, #2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0ec      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a9fe:	7cfb      	ldrb	r3, [r7, #19]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10c      	bne.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa04:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa14:	4903      	ldr	r1, [pc, #12]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa1c:	e008      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa1e:	7cfb      	ldrb	r3, [r7, #19]
 800aa20:	74bb      	strb	r3, [r7, #18]
 800aa22:	e005      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800aa24:	40021000 	.word	0x40021000
 800aa28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa2c:	7cfb      	ldrb	r3, [r7, #19]
 800aa2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa30:	7c7b      	ldrb	r3, [r7, #17]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d105      	bne.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa36:	4ba0      	ldr	r3, [pc, #640]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3a:	4a9f      	ldr	r2, [pc, #636]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa4e:	4b9a      	ldr	r3, [pc, #616]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa54:	f023 0203 	bic.w	r2, r3, #3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5c:	4996      	ldr	r1, [pc, #600]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00a      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa70:	4b91      	ldr	r3, [pc, #580]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa76:	f023 020c 	bic.w	r2, r3, #12
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	498e      	ldr	r1, [pc, #568]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aa92:	4b89      	ldr	r3, [pc, #548]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa0:	4985      	ldr	r1, [pc, #532]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0308 	and.w	r3, r3, #8
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00a      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aab4:	4b80      	ldr	r3, [pc, #512]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac2:	497d      	ldr	r1, [pc, #500]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00a      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aad6:	4b78      	ldr	r3, [pc, #480]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aadc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae4:	4974      	ldr	r1, [pc, #464]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0320 	and.w	r3, r3, #32
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00a      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aaf8:	4b6f      	ldr	r3, [pc, #444]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab06:	496c      	ldr	r1, [pc, #432]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00a      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab1a:	4b67      	ldr	r3, [pc, #412]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab28:	4963      	ldr	r1, [pc, #396]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab3c:	4b5e      	ldr	r3, [pc, #376]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab4a:	495b      	ldr	r1, [pc, #364]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab5e:	4b56      	ldr	r3, [pc, #344]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6c:	4952      	ldr	r1, [pc, #328]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ab80:	4b4d      	ldr	r3, [pc, #308]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8e:	494a      	ldr	r1, [pc, #296]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aba2:	4b45      	ldr	r3, [pc, #276]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb0:	4941      	ldr	r1, [pc, #260]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abc4:	4b3c      	ldr	r3, [pc, #240]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abca:	f023 0203 	bic.w	r2, r3, #3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd2:	4939      	ldr	r1, [pc, #228]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d028      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abe6:	4b34      	ldr	r3, [pc, #208]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf4:	4930      	ldr	r1, [pc, #192]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac04:	d106      	bne.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac06:	4b2c      	ldr	r3, [pc, #176]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	4a2b      	ldr	r2, [pc, #172]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac10:	60d3      	str	r3, [r2, #12]
 800ac12:	e011      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac1c:	d10c      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3304      	adds	r3, #4
 800ac22:	2101      	movs	r1, #1
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f935 	bl	800ae94 <RCCEx_PLLSAI1_Config>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ac2e:	7cfb      	ldrb	r3, [r7, #19]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d04d      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac4c:	d108      	bne.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800ac4e:	4b1a      	ldr	r3, [pc, #104]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac54:	4a18      	ldr	r2, [pc, #96]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ac5e:	e012      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800ac60:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac66:	4a14      	ldr	r2, [pc, #80]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ac70:	4b11      	ldr	r3, [pc, #68]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac7e:	490e      	ldr	r1, [pc, #56]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac8e:	d106      	bne.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac90:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac9a:	60d3      	str	r3, [r2, #12]
 800ac9c:	e020      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aca6:	d109      	bne.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aca8:	4b03      	ldr	r3, [pc, #12]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	4a02      	ldr	r2, [pc, #8]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acb2:	60d3      	str	r3, [r2, #12]
 800acb4:	e014      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800acb6:	bf00      	nop
 800acb8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acc4:	d10c      	bne.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3304      	adds	r3, #4
 800acca:	2101      	movs	r1, #1
 800accc:	4618      	mov	r0, r3
 800acce:	f000 f8e1 	bl	800ae94 <RCCEx_PLLSAI1_Config>
 800acd2:	4603      	mov	r3, r0
 800acd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800acd6:	7cfb      	ldrb	r3, [r7, #19]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800acdc:	7cfb      	ldrb	r3, [r7, #19]
 800acde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d028      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acec:	4b68      	ldr	r3, [pc, #416]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acfa:	4965      	ldr	r1, [pc, #404]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad0a:	d106      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad0c:	4b60      	ldr	r3, [pc, #384]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4a5f      	ldr	r2, [pc, #380]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad16:	60d3      	str	r3, [r2, #12]
 800ad18:	e011      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad22:	d10c      	bne.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3304      	adds	r3, #4
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f8b2 	bl	800ae94 <RCCEx_PLLSAI1_Config>
 800ad30:	4603      	mov	r3, r0
 800ad32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad34:	7cfb      	ldrb	r3, [r7, #19]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800ad3a:	7cfb      	ldrb	r3, [r7, #19]
 800ad3c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d01e      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad4a:	4b51      	ldr	r3, [pc, #324]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad5a:	494d      	ldr	r1, [pc, #308]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad6c:	d10c      	bne.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3304      	adds	r3, #4
 800ad72:	2102      	movs	r1, #2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 f88d 	bl	800ae94 <RCCEx_PLLSAI1_Config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad7e:	7cfb      	ldrb	r3, [r7, #19]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800ad84:	7cfb      	ldrb	r3, [r7, #19]
 800ad86:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad94:	4b3e      	ldr	r3, [pc, #248]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad9a:	f023 0204 	bic.w	r2, r3, #4
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ada4:	493a      	ldr	r1, [pc, #232]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800adb8:	4b35      	ldr	r3, [pc, #212]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adbe:	f023 0218 	bic.w	r2, r3, #24
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc8:	4931      	ldr	r1, [pc, #196]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adca:	4313      	orrs	r3, r2
 800adcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d035      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800addc:	4b2c      	ldr	r3, [pc, #176]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a2b      	ldr	r2, [pc, #172]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ade2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ade6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ade8:	f7fa f998 	bl	800511c <HAL_GetTick>
 800adec:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800adee:	e009      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800adf0:	f7fa f994 	bl	800511c <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d902      	bls.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	74fb      	strb	r3, [r7, #19]
        break;
 800ae02:	e005      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ae04:	4b22      	ldr	r3, [pc, #136]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1ef      	bne.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800ae10:	7cfb      	ldrb	r3, [r7, #19]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d113      	bne.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800ae16:	4b1e      	ldr	r3, [pc, #120]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae26:	491a      	ldr	r1, [pc, #104]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3320      	adds	r3, #32
 800ae32:	2102      	movs	r1, #2
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f921 	bl	800b07c <RCCEx_PLLSAI2_Config>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800ae3e:	7cfb      	ldrb	r3, [r7, #19]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800ae44:	7cfb      	ldrb	r3, [r7, #19]
 800ae46:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d017      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ae54:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae64:	490a      	ldr	r1, [pc, #40]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae76:	d105      	bne.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	4a04      	ldr	r2, [pc, #16]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ae84:	7cbb      	ldrb	r3, [r7, #18]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	40021000 	.word	0x40021000

0800ae94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aea2:	4b72      	ldr	r3, [pc, #456]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00e      	beq.n	800aecc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800aeae:	4b6f      	ldr	r3, [pc, #444]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	f003 0203 	and.w	r2, r3, #3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d103      	bne.n	800aec6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
       ||
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d142      	bne.n	800af4c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	73fb      	strb	r3, [r7, #15]
 800aeca:	e03f      	b.n	800af4c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d018      	beq.n	800af06 <RCCEx_PLLSAI1_Config+0x72>
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d825      	bhi.n	800af24 <RCCEx_PLLSAI1_Config+0x90>
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d002      	beq.n	800aee2 <RCCEx_PLLSAI1_Config+0x4e>
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d009      	beq.n	800aef4 <RCCEx_PLLSAI1_Config+0x60>
 800aee0:	e020      	b.n	800af24 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aee2:	4b62      	ldr	r3, [pc, #392]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d11d      	bne.n	800af2a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aef2:	e01a      	b.n	800af2a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aef4:	4b5d      	ldr	r3, [pc, #372]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d116      	bne.n	800af2e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af04:	e013      	b.n	800af2e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af06:	4b59      	ldr	r3, [pc, #356]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10f      	bne.n	800af32 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800af12:	4b56      	ldr	r3, [pc, #344]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d109      	bne.n	800af32 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af22:	e006      	b.n	800af32 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	73fb      	strb	r3, [r7, #15]
      break;
 800af28:	e004      	b.n	800af34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af2a:	bf00      	nop
 800af2c:	e002      	b.n	800af34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af2e:	bf00      	nop
 800af30:	e000      	b.n	800af34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af32:	bf00      	nop
    }

    if(status == HAL_OK)
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d108      	bne.n	800af4c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800af3a:	4b4c      	ldr	r3, [pc, #304]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f023 0203 	bic.w	r2, r3, #3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4949      	ldr	r1, [pc, #292]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f040 8086 	bne.w	800b060 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800af54:	4b45      	ldr	r3, [pc, #276]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a44      	ldr	r2, [pc, #272]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af60:	f7fa f8dc 	bl	800511c <HAL_GetTick>
 800af64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af66:	e009      	b.n	800af7c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af68:	f7fa f8d8 	bl	800511c <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d902      	bls.n	800af7c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	73fb      	strb	r3, [r7, #15]
        break;
 800af7a:	e005      	b.n	800af88 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af7c:	4b3b      	ldr	r3, [pc, #236]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1ef      	bne.n	800af68 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d168      	bne.n	800b060 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d113      	bne.n	800afbc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af94:	4b35      	ldr	r3, [pc, #212]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800af96:	691a      	ldr	r2, [r3, #16]
 800af98:	4b35      	ldr	r3, [pc, #212]	; (800b070 <RCCEx_PLLSAI1_Config+0x1dc>)
 800af9a:	4013      	ands	r3, r2
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6892      	ldr	r2, [r2, #8]
 800afa0:	0211      	lsls	r1, r2, #8
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	68d2      	ldr	r2, [r2, #12]
 800afa6:	06d2      	lsls	r2, r2, #27
 800afa8:	4311      	orrs	r1, r2
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6852      	ldr	r2, [r2, #4]
 800afae:	3a01      	subs	r2, #1
 800afb0:	0112      	lsls	r2, r2, #4
 800afb2:	430a      	orrs	r2, r1
 800afb4:	492d      	ldr	r1, [pc, #180]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	610b      	str	r3, [r1, #16]
 800afba:	e02d      	b.n	800b018 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d115      	bne.n	800afee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800afc2:	4b2a      	ldr	r3, [pc, #168]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	4b2b      	ldr	r3, [pc, #172]	; (800b074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800afc8:	4013      	ands	r3, r2
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	6892      	ldr	r2, [r2, #8]
 800afce:	0211      	lsls	r1, r2, #8
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6912      	ldr	r2, [r2, #16]
 800afd4:	0852      	lsrs	r2, r2, #1
 800afd6:	3a01      	subs	r2, #1
 800afd8:	0552      	lsls	r2, r2, #21
 800afda:	4311      	orrs	r1, r2
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6852      	ldr	r2, [r2, #4]
 800afe0:	3a01      	subs	r2, #1
 800afe2:	0112      	lsls	r2, r2, #4
 800afe4:	430a      	orrs	r2, r1
 800afe6:	4921      	ldr	r1, [pc, #132]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800afe8:	4313      	orrs	r3, r2
 800afea:	610b      	str	r3, [r1, #16]
 800afec:	e014      	b.n	800b018 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800afee:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aff0:	691a      	ldr	r2, [r3, #16]
 800aff2:	4b21      	ldr	r3, [pc, #132]	; (800b078 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6892      	ldr	r2, [r2, #8]
 800affa:	0211      	lsls	r1, r2, #8
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	6952      	ldr	r2, [r2, #20]
 800b000:	0852      	lsrs	r2, r2, #1
 800b002:	3a01      	subs	r2, #1
 800b004:	0652      	lsls	r2, r2, #25
 800b006:	4311      	orrs	r1, r2
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6852      	ldr	r2, [r2, #4]
 800b00c:	3a01      	subs	r2, #1
 800b00e:	0112      	lsls	r2, r2, #4
 800b010:	430a      	orrs	r2, r1
 800b012:	4916      	ldr	r1, [pc, #88]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b014:	4313      	orrs	r3, r2
 800b016:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b018:	4b14      	ldr	r3, [pc, #80]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a13      	ldr	r2, [pc, #76]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b01e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b022:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b024:	f7fa f87a 	bl	800511c <HAL_GetTick>
 800b028:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b02a:	e009      	b.n	800b040 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b02c:	f7fa f876 	bl	800511c <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	2b02      	cmp	r3, #2
 800b038:	d902      	bls.n	800b040 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	73fb      	strb	r3, [r7, #15]
          break;
 800b03e:	e005      	b.n	800b04c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d0ef      	beq.n	800b02c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b054:	691a      	ldr	r2, [r3, #16]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	4904      	ldr	r1, [pc, #16]	; (800b06c <RCCEx_PLLSAI1_Config+0x1d8>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b060:	7bfb      	ldrb	r3, [r7, #15]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40021000 	.word	0x40021000
 800b070:	07ff800f 	.word	0x07ff800f
 800b074:	ff9f800f 	.word	0xff9f800f
 800b078:	f9ff800f 	.word	0xf9ff800f

0800b07c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b08a:	4b72      	ldr	r3, [pc, #456]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00e      	beq.n	800b0b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b096:	4b6f      	ldr	r3, [pc, #444]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	f003 0203 	and.w	r2, r3, #3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d103      	bne.n	800b0ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
       ||
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d142      	bne.n	800b134 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	73fb      	strb	r3, [r7, #15]
 800b0b2:	e03f      	b.n	800b134 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d018      	beq.n	800b0ee <RCCEx_PLLSAI2_Config+0x72>
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d825      	bhi.n	800b10c <RCCEx_PLLSAI2_Config+0x90>
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d002      	beq.n	800b0ca <RCCEx_PLLSAI2_Config+0x4e>
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d009      	beq.n	800b0dc <RCCEx_PLLSAI2_Config+0x60>
 800b0c8:	e020      	b.n	800b10c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b0ca:	4b62      	ldr	r3, [pc, #392]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d11d      	bne.n	800b112 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0da:	e01a      	b.n	800b112 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b0dc:	4b5d      	ldr	r3, [pc, #372]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d116      	bne.n	800b116 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0ec:	e013      	b.n	800b116 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b0ee:	4b59      	ldr	r3, [pc, #356]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10f      	bne.n	800b11a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b0fa:	4b56      	ldr	r3, [pc, #344]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d109      	bne.n	800b11a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b10a:	e006      	b.n	800b11a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	73fb      	strb	r3, [r7, #15]
      break;
 800b110:	e004      	b.n	800b11c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b112:	bf00      	nop
 800b114:	e002      	b.n	800b11c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b116:	bf00      	nop
 800b118:	e000      	b.n	800b11c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b11a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d108      	bne.n	800b134 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b122:	4b4c      	ldr	r3, [pc, #304]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f023 0203 	bic.w	r2, r3, #3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4949      	ldr	r1, [pc, #292]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b130:	4313      	orrs	r3, r2
 800b132:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f040 8086 	bne.w	800b248 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b13c:	4b45      	ldr	r3, [pc, #276]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a44      	ldr	r2, [pc, #272]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b148:	f7f9 ffe8 	bl	800511c <HAL_GetTick>
 800b14c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b14e:	e009      	b.n	800b164 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b150:	f7f9 ffe4 	bl	800511c <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d902      	bls.n	800b164 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	73fb      	strb	r3, [r7, #15]
        break;
 800b162:	e005      	b.n	800b170 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b164:	4b3b      	ldr	r3, [pc, #236]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1ef      	bne.n	800b150 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d168      	bne.n	800b248 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d113      	bne.n	800b1a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b17c:	4b35      	ldr	r3, [pc, #212]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b17e:	695a      	ldr	r2, [r3, #20]
 800b180:	4b35      	ldr	r3, [pc, #212]	; (800b258 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b182:	4013      	ands	r3, r2
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6892      	ldr	r2, [r2, #8]
 800b188:	0211      	lsls	r1, r2, #8
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	68d2      	ldr	r2, [r2, #12]
 800b18e:	06d2      	lsls	r2, r2, #27
 800b190:	4311      	orrs	r1, r2
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	6852      	ldr	r2, [r2, #4]
 800b196:	3a01      	subs	r2, #1
 800b198:	0112      	lsls	r2, r2, #4
 800b19a:	430a      	orrs	r2, r1
 800b19c:	492d      	ldr	r1, [pc, #180]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	614b      	str	r3, [r1, #20]
 800b1a2:	e02d      	b.n	800b200 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d115      	bne.n	800b1d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b1aa:	4b2a      	ldr	r3, [pc, #168]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1ac:	695a      	ldr	r2, [r3, #20]
 800b1ae:	4b2b      	ldr	r3, [pc, #172]	; (800b25c <RCCEx_PLLSAI2_Config+0x1e0>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6892      	ldr	r2, [r2, #8]
 800b1b6:	0211      	lsls	r1, r2, #8
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6912      	ldr	r2, [r2, #16]
 800b1bc:	0852      	lsrs	r2, r2, #1
 800b1be:	3a01      	subs	r2, #1
 800b1c0:	0552      	lsls	r2, r2, #21
 800b1c2:	4311      	orrs	r1, r2
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	6852      	ldr	r2, [r2, #4]
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	0112      	lsls	r2, r2, #4
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	4921      	ldr	r1, [pc, #132]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	614b      	str	r3, [r1, #20]
 800b1d4:	e014      	b.n	800b200 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b1d6:	4b1f      	ldr	r3, [pc, #124]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1d8:	695a      	ldr	r2, [r3, #20]
 800b1da:	4b21      	ldr	r3, [pc, #132]	; (800b260 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	6892      	ldr	r2, [r2, #8]
 800b1e2:	0211      	lsls	r1, r2, #8
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	6952      	ldr	r2, [r2, #20]
 800b1e8:	0852      	lsrs	r2, r2, #1
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	0652      	lsls	r2, r2, #25
 800b1ee:	4311      	orrs	r1, r2
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6852      	ldr	r2, [r2, #4]
 800b1f4:	3a01      	subs	r2, #1
 800b1f6:	0112      	lsls	r2, r2, #4
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	4916      	ldr	r1, [pc, #88]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b200:	4b14      	ldr	r3, [pc, #80]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a13      	ldr	r2, [pc, #76]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b20a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b20c:	f7f9 ff86 	bl	800511c <HAL_GetTick>
 800b210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b212:	e009      	b.n	800b228 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b214:	f7f9 ff82 	bl	800511c <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d902      	bls.n	800b228 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	73fb      	strb	r3, [r7, #15]
          break;
 800b226:	e005      	b.n	800b234 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b228:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0ef      	beq.n	800b214 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b23a:	4b06      	ldr	r3, [pc, #24]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b23c:	695a      	ldr	r2, [r3, #20]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	4904      	ldr	r1, [pc, #16]	; (800b254 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b244:	4313      	orrs	r3, r2
 800b246:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	40021000 	.word	0x40021000
 800b258:	07ff800f 	.word	0x07ff800f
 800b25c:	ff9f800f 	.word	0xff9f800f
 800b260:	f9ff800f 	.word	0xf9ff800f

0800b264 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d07f      	beq.n	800b376 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7f9 fc70 	bl	8004b70 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b296:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2202      	movs	r2, #2
 800b29c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	22ca      	movs	r2, #202	; 0xca
 800b2a6:	625a      	str	r2, [r3, #36]	; 0x24
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2253      	movs	r2, #83	; 0x53
 800b2ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fa65 	bl	800b780 <RTC_EnterInitMode>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d15a      	bne.n	800b376 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	6812      	ldr	r2, [r2, #0]
 800b2ca:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2d2:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6999      	ldr	r1, [r3, #24]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	431a      	orrs	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	6912      	ldr	r2, [r2, #16]
 800b2fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6919      	ldr	r1, [r3, #16]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	041a      	lsls	r2, r3, #16
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b310:	4b1b      	ldr	r3, [pc, #108]	; (800b380 <HAL_RTC_Init+0x11c>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	430b      	orrs	r3, r1
 800b322:	4917      	ldr	r1, [pc, #92]	; (800b380 <HAL_RTC_Init+0x11c>)
 800b324:	4313      	orrs	r3, r2
 800b326:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fa5f 	bl	800b7ec <RTC_ExitInitMode>
 800b32e:	4603      	mov	r3, r0
 800b330:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d11e      	bne.n	800b376 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	699a      	ldr	r2, [r3, #24]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b346:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6999      	ldr	r1, [r3, #24]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	431a      	orrs	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	431a      	orrs	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	22ff      	movs	r2, #255	; 0xff
 800b36c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800b376:	7bfb      	ldrb	r3, [r7, #15]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	40002800 	.word	0x40002800

0800b384 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b384:	b590      	push	{r4, r7, lr}
 800b386:	b087      	sub	sp, #28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b396:	2b01      	cmp	r3, #1
 800b398:	d101      	bne.n	800b39e <HAL_RTC_SetTime+0x1a>
 800b39a:	2302      	movs	r3, #2
 800b39c:	e08b      	b.n	800b4b6 <HAL_RTC_SetTime+0x132>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	22ca      	movs	r2, #202	; 0xca
 800b3b4:	625a      	str	r2, [r3, #36]	; 0x24
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2253      	movs	r2, #83	; 0x53
 800b3bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f000 f9de 	bl	800b780 <RTC_EnterInitMode>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b3c8:	7cfb      	ldrb	r3, [r7, #19]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d15e      	bne.n	800b48c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b3ce:	4b3c      	ldr	r3, [pc, #240]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3da:	d057      	beq.n	800b48c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d125      	bne.n	800b42e <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b3e2:	4b37      	ldr	r3, [pc, #220]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d102      	bne.n	800b3f4 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fa35 	bl	800b868 <RTC_ByteToBcd2>
 800b3fe:	4603      	mov	r3, r0
 800b400:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	785b      	ldrb	r3, [r3, #1]
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fa2e 	bl	800b868 <RTC_ByteToBcd2>
 800b40c:	4603      	mov	r3, r0
 800b40e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b410:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	789b      	ldrb	r3, [r3, #2]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fa26 	bl	800b868 <RTC_ByteToBcd2>
 800b41c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b41e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	78db      	ldrb	r3, [r3, #3]
 800b426:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b428:	4313      	orrs	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	e017      	b.n	800b45e <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b42e:	4b24      	ldr	r3, [pc, #144]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b436:	2b00      	cmp	r3, #0
 800b438:	d102      	bne.n	800b440 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	785b      	ldrb	r3, [r3, #1]
 800b44a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b44c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b452:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	78db      	ldrb	r3, [r3, #3]
 800b458:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b45a:	4313      	orrs	r3, r2
 800b45c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b45e:	4a18      	ldr	r2, [pc, #96]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b466:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b46a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b46c:	4b14      	ldr	r3, [pc, #80]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	4a13      	ldr	r2, [pc, #76]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b476:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b478:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b47a:	699a      	ldr	r2, [r3, #24]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	68d9      	ldr	r1, [r3, #12]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	430b      	orrs	r3, r1
 800b486:	490e      	ldr	r1, [pc, #56]	; (800b4c0 <HAL_RTC_SetTime+0x13c>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f9ad 	bl	800b7ec <RTC_ExitInitMode>
 800b492:	4603      	mov	r3, r0
 800b494:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	22ff      	movs	r2, #255	; 0xff
 800b49c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b49e:	7cfb      	ldrb	r3, [r7, #19]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d103      	bne.n	800b4ac <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b4b4:	7cfb      	ldrb	r3, [r7, #19]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	40002800 	.word	0x40002800

0800b4c4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b4d0:	4b2c      	ldr	r3, [pc, #176]	; (800b584 <HAL_RTC_GetTime+0xc0>)
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b4d8:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <HAL_RTC_GetTime+0xc0>)
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e4:	d049      	beq.n	800b57a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b4e6:	4b27      	ldr	r3, [pc, #156]	; (800b584 <HAL_RTC_GetTime+0xc0>)
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b4f2:	4b24      	ldr	r3, [pc, #144]	; (800b584 <HAL_RTC_GetTime+0xc0>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b4fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b4fe:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	0c1b      	lsrs	r3, r3, #16
 800b504:	b2db      	uxtb	r3, r3
 800b506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	b2db      	uxtb	r3, r3
 800b516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	0d9b      	lsrs	r3, r3, #22
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d11a      	bne.n	800b57a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f9ad 	bl	800b8a8 <RTC_Bcd2ToByte>
 800b54e:	4603      	mov	r3, r0
 800b550:	461a      	mov	r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	785b      	ldrb	r3, [r3, #1]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 f9a4 	bl	800b8a8 <RTC_Bcd2ToByte>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	789b      	ldrb	r3, [r3, #2]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 f99b 	bl	800b8a8 <RTC_Bcd2ToByte>
 800b572:	4603      	mov	r3, r0
 800b574:	461a      	mov	r2, r3
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	40002800 	.word	0x40002800

0800b588 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <HAL_RTC_SetDate+0x1a>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	e074      	b.n	800b68c <HAL_RTC_SetDate+0x104>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2202      	movs	r2, #2
 800b5ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10e      	bne.n	800b5d6 <HAL_RTC_SetDate+0x4e>
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	785b      	ldrb	r3, [r3, #1]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d008      	beq.n	800b5d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	785b      	ldrb	r3, [r3, #1]
 800b5c8:	f023 0310 	bic.w	r3, r3, #16
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	330a      	adds	r3, #10
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d11c      	bne.n	800b616 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	78db      	ldrb	r3, [r3, #3]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 f941 	bl	800b868 <RTC_ByteToBcd2>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f93a 	bl	800b868 <RTC_ByteToBcd2>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b5f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	789b      	ldrb	r3, [r3, #2]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 f932 	bl	800b868 <RTC_ByteToBcd2>
 800b604:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b606:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e00e      	b.n	800b634 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	78db      	ldrb	r3, [r3, #3]
 800b61a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	785b      	ldrb	r3, [r3, #1]
 800b620:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b622:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b628:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	22ca      	movs	r2, #202	; 0xca
 800b63a:	625a      	str	r2, [r3, #36]	; 0x24
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2253      	movs	r2, #83	; 0x53
 800b642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 f89b 	bl	800b780 <RTC_EnterInitMode>
 800b64a:	4603      	mov	r3, r0
 800b64c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b64e:	7cfb      	ldrb	r3, [r7, #19]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10b      	bne.n	800b66c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b654:	4a0f      	ldr	r2, [pc, #60]	; (800b694 <HAL_RTC_SetDate+0x10c>)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b65c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b660:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 f8c2 	bl	800b7ec <RTC_ExitInitMode>
 800b668:	4603      	mov	r3, r0
 800b66a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	22ff      	movs	r2, #255	; 0xff
 800b672:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b674:	7cfb      	ldrb	r3, [r7, #19]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b68a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	371c      	adds	r7, #28
 800b690:	46bd      	mov	sp, r7
 800b692:	bd90      	pop	{r4, r7, pc}
 800b694:	40002800 	.word	0x40002800

0800b698 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b6a4:	4b22      	ldr	r3, [pc, #136]	; (800b730 <HAL_RTC_GetDate+0x98>)
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	0c1b      	lsrs	r3, r3, #16
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	0a1b      	lsrs	r3, r3, #8
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	f003 031f 	and.w	r3, r3, #31
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	0b5b      	lsrs	r3, r3, #13
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	f003 0307 	and.w	r3, r3, #7
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d11a      	bne.n	800b726 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	78db      	ldrb	r3, [r3, #3]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f8d7 	bl	800b8a8 <RTC_Bcd2ToByte>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	4618      	mov	r0, r3
 800b708:	f000 f8ce 	bl	800b8a8 <RTC_Bcd2ToByte>
 800b70c:	4603      	mov	r3, r0
 800b70e:	461a      	mov	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	789b      	ldrb	r3, [r3, #2]
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 f8c5 	bl	800b8a8 <RTC_Bcd2ToByte>
 800b71e:	4603      	mov	r3, r0
 800b720:	461a      	mov	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	40002800 	.word	0x40002800

0800b734 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b74a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800b74c:	f7f9 fce6 	bl	800511c <HAL_GetTick>
 800b750:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b752:	e009      	b.n	800b768 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b754:	f7f9 fce2 	bl	800511c <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b762:	d901      	bls.n	800b768 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e007      	b.n	800b778 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	f003 0320 	and.w	r3, r3, #32
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0ee      	beq.n	800b754 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b796:	2b00      	cmp	r3, #0
 800b798:	d123      	bne.n	800b7e2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b7a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b7aa:	f7f9 fcb7 	bl	800511c <HAL_GetTick>
 800b7ae:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7b0:	e00d      	b.n	800b7ce <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b7b2:	f7f9 fcb3 	bl	800511c <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7c0:	d905      	bls.n	800b7ce <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2203      	movs	r2, #3
 800b7ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <RTC_EnterInitMode+0x62>
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d1e7      	bne.n	800b7b2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b7f8:	4b1a      	ldr	r3, [pc, #104]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	4a19      	ldr	r2, [pc, #100]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b802:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b804:	4b17      	ldr	r3, [pc, #92]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10c      	bne.n	800b82a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff ff8f 	bl	800b734 <HAL_RTC_WaitForSynchro>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01e      	beq.n	800b85a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2203      	movs	r2, #3
 800b820:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	73fb      	strb	r3, [r7, #15]
 800b828:	e017      	b.n	800b85a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b82a:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	4a0d      	ldr	r2, [pc, #52]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b830:	f023 0320 	bic.w	r3, r3, #32
 800b834:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7ff ff7c 	bl	800b734 <HAL_RTC_WaitForSynchro>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2203      	movs	r2, #3
 800b846:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b84e:	4b05      	ldr	r3, [pc, #20]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	4a04      	ldr	r2, [pc, #16]	; (800b864 <RTC_ExitInitMode+0x78>)
 800b854:	f043 0320 	orr.w	r3, r3, #32
 800b858:	6193      	str	r3, [r2, #24]
  }

  return status;
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	40002800 	.word	0x40002800

0800b868 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b87a:	e005      	b.n	800b888 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	3301      	adds	r3, #1
 800b880:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b882:	7afb      	ldrb	r3, [r7, #11]
 800b884:	3b0a      	subs	r3, #10
 800b886:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b888:	7afb      	ldrb	r3, [r7, #11]
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	d8f6      	bhi.n	800b87c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	b2da      	uxtb	r2, r3
 800b896:	7afb      	ldrb	r3, [r7, #11]
 800b898:	4313      	orrs	r3, r2
 800b89a:	b2db      	uxtb	r3, r3
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	091b      	lsrs	r3, r3, #4
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	0092      	lsls	r2, r2, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b8c2:	79fb      	ldrb	r3, [r7, #7]
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	b2db      	uxtb	r3, r3
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e095      	b.n	800ba1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d108      	bne.n	800b908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8fe:	d009      	beq.n	800b914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	61da      	str	r2, [r3, #28]
 800b906:	e005      	b.n	800b914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7f9 f95c 	bl	8004bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b94a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b954:	d902      	bls.n	800b95c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	e002      	b.n	800b962 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b95c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b960:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b96a:	d007      	beq.n	800b97c <HAL_SPI_Init+0xa0>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b974:	d002      	beq.n	800b97c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b98c:	431a      	orrs	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	f003 0302 	and.w	r3, r3, #2
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9aa:	431a      	orrs	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9b4:	431a      	orrs	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9be:	ea42 0103 	orr.w	r1, r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	0c1b      	lsrs	r3, r3, #16
 800b9d8:	f003 0204 	and.w	r2, r3, #4
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	f003 0310 	and.w	r3, r3, #16
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	f003 0308 	and.w	r3, r3, #8
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b9f8:	ea42 0103 	orr.w	r1, r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b088      	sub	sp, #32
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	603b      	str	r3, [r7, #0]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d101      	bne.n	800ba44 <HAL_SPI_Transmit+0x22>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e158      	b.n	800bcf6 <HAL_SPI_Transmit+0x2d4>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba4c:	f7f9 fb66 	bl	800511c <HAL_GetTick>
 800ba50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ba52:	88fb      	ldrh	r3, [r7, #6]
 800ba54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d002      	beq.n	800ba68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ba62:	2302      	movs	r3, #2
 800ba64:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba66:	e13d      	b.n	800bce4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <HAL_SPI_Transmit+0x52>
 800ba6e:	88fb      	ldrh	r3, [r7, #6]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba78:	e134      	b.n	800bce4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	88fa      	ldrh	r2, [r7, #6]
 800ba92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	88fa      	ldrh	r2, [r7, #6]
 800ba98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bac4:	d10f      	bne.n	800bae6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b40      	cmp	r3, #64	; 0x40
 800baf2:	d007      	beq.n	800bb04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb0c:	d94b      	bls.n	800bba6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <HAL_SPI_Transmit+0xfa>
 800bb16:	8afb      	ldrh	r3, [r7, #22]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d13e      	bne.n	800bb9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb20:	881a      	ldrh	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2c:	1c9a      	adds	r2, r3, #2
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bb40:	e02b      	b.n	800bb9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d112      	bne.n	800bb76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	881a      	ldrh	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb60:	1c9a      	adds	r2, r3, #2
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb74:	e011      	b.n	800bb9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb76:	f7f9 fad1 	bl	800511c <HAL_GetTick>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d803      	bhi.n	800bb8e <HAL_SPI_Transmit+0x16c>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb8c:	d102      	bne.n	800bb94 <HAL_SPI_Transmit+0x172>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb98:	e0a4      	b.n	800bce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1ce      	bne.n	800bb42 <HAL_SPI_Transmit+0x120>
 800bba4:	e07c      	b.n	800bca0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <HAL_SPI_Transmit+0x192>
 800bbae:	8afb      	ldrh	r3, [r7, #22]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d170      	bne.n	800bc96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d912      	bls.n	800bbe4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	881a      	ldrh	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbce:	1c9a      	adds	r2, r3, #2
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	3b02      	subs	r3, #2
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbe2:	e058      	b.n	800bc96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	330c      	adds	r3, #12
 800bbee:	7812      	ldrb	r2, [r2, #0]
 800bbf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	3b01      	subs	r3, #1
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bc0a:	e044      	b.n	800bc96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d12b      	bne.n	800bc72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d912      	bls.n	800bc4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc28:	881a      	ldrh	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc34:	1c9a      	adds	r2, r3, #2
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3b02      	subs	r3, #2
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc48:	e025      	b.n	800bc96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	330c      	adds	r3, #12
 800bc54:	7812      	ldrb	r2, [r2, #0]
 800bc56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc70:	e011      	b.n	800bc96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc72:	f7f9 fa53 	bl	800511c <HAL_GetTick>
 800bc76:	4602      	mov	r2, r0
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d803      	bhi.n	800bc8a <HAL_SPI_Transmit+0x268>
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc88:	d102      	bne.n	800bc90 <HAL_SPI_Transmit+0x26e>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bc94:	e026      	b.n	800bce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1b5      	bne.n	800bc0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 fb5b 	bl	800c360 <SPI_EndRxTxTransaction>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2220      	movs	r2, #32
 800bcb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	77fb      	strb	r3, [r7, #31]
 800bce0:	e000      	b.n	800bce4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bcf4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b08a      	sub	sp, #40	; 0x28
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	60f8      	str	r0, [r7, #12]
 800bd06:	60b9      	str	r1, [r7, #8]
 800bd08:	607a      	str	r2, [r7, #4]
 800bd0a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d101      	bne.n	800bd24 <HAL_SPI_TransmitReceive+0x26>
 800bd20:	2302      	movs	r3, #2
 800bd22:	e1fb      	b.n	800c11c <HAL_SPI_TransmitReceive+0x41e>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd2c:	f7f9 f9f6 	bl	800511c <HAL_GetTick>
 800bd30:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd38:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bd40:	887b      	ldrh	r3, [r7, #2]
 800bd42:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bd44:	887b      	ldrh	r3, [r7, #2]
 800bd46:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd48:	7efb      	ldrb	r3, [r7, #27]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d00e      	beq.n	800bd6c <HAL_SPI_TransmitReceive+0x6e>
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd54:	d106      	bne.n	800bd64 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <HAL_SPI_TransmitReceive+0x66>
 800bd5e:	7efb      	ldrb	r3, [r7, #27]
 800bd60:	2b04      	cmp	r3, #4
 800bd62:	d003      	beq.n	800bd6c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bd64:	2302      	movs	r3, #2
 800bd66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bd6a:	e1cd      	b.n	800c108 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d005      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0x80>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0x80>
 800bd78:	887b      	ldrh	r3, [r7, #2]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d103      	bne.n	800bd86 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bd84:	e1c0      	b.n	800c108 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d003      	beq.n	800bd9a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2205      	movs	r2, #5
 800bd96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	887a      	ldrh	r2, [r7, #2]
 800bdaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	887a      	ldrh	r2, [r7, #2]
 800bdb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	887a      	ldrh	r2, [r7, #2]
 800bdc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	887a      	ldrh	r2, [r7, #2]
 800bdc6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bddc:	d802      	bhi.n	800bde4 <HAL_SPI_TransmitReceive+0xe6>
 800bdde:	8a3b      	ldrh	r3, [r7, #16]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d908      	bls.n	800bdf6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bdf2:	605a      	str	r2, [r3, #4]
 800bdf4:	e007      	b.n	800be06 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be04:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be10:	2b40      	cmp	r3, #64	; 0x40
 800be12:	d007      	beq.n	800be24 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be2c:	d97c      	bls.n	800bf28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <HAL_SPI_TransmitReceive+0x13e>
 800be36:	8a7b      	ldrh	r3, [r7, #18]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d169      	bne.n	800bf10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	881a      	ldrh	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	1c9a      	adds	r2, r3, #2
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be56:	b29b      	uxth	r3, r3
 800be58:	3b01      	subs	r3, #1
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be60:	e056      	b.n	800bf10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d11b      	bne.n	800bea8 <HAL_SPI_TransmitReceive+0x1aa>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be74:	b29b      	uxth	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d016      	beq.n	800bea8 <HAL_SPI_TransmitReceive+0x1aa>
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d113      	bne.n	800bea8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be84:	881a      	ldrh	r2, [r3, #0]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be90:	1c9a      	adds	r2, r3, #2
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	3b01      	subs	r3, #1
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d11c      	bne.n	800bef0 <HAL_SPI_TransmitReceive+0x1f2>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d016      	beq.n	800bef0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68da      	ldr	r2, [r3, #12]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800becc:	b292      	uxth	r2, r2
 800bece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed4:	1c9a      	adds	r2, r3, #2
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	3b01      	subs	r3, #1
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800beec:	2301      	movs	r3, #1
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bef0:	f7f9 f914 	bl	800511c <HAL_GetTick>
 800bef4:	4602      	mov	r2, r0
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800befc:	429a      	cmp	r2, r3
 800befe:	d807      	bhi.n	800bf10 <HAL_SPI_TransmitReceive+0x212>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf06:	d003      	beq.n	800bf10 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bf0e:	e0fb      	b.n	800c108 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1a3      	bne.n	800be62 <HAL_SPI_TransmitReceive+0x164>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d19d      	bne.n	800be62 <HAL_SPI_TransmitReceive+0x164>
 800bf26:	e0df      	b.n	800c0e8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <HAL_SPI_TransmitReceive+0x23a>
 800bf30:	8a7b      	ldrh	r3, [r7, #18]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	f040 80cb 	bne.w	800c0ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d912      	bls.n	800bf68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	881a      	ldrh	r2, [r3, #0]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	1c9a      	adds	r2, r3, #2
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	3b02      	subs	r3, #2
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf66:	e0b2      	b.n	800c0ce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	330c      	adds	r3, #12
 800bf72:	7812      	ldrb	r2, [r2, #0]
 800bf74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	3b01      	subs	r3, #1
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf8e:	e09e      	b.n	800c0ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d134      	bne.n	800c008 <HAL_SPI_TransmitReceive+0x30a>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d02f      	beq.n	800c008 <HAL_SPI_TransmitReceive+0x30a>
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d12c      	bne.n	800c008 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d912      	bls.n	800bfde <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfbc:	881a      	ldrh	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc8:	1c9a      	adds	r2, r3, #2
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	3b02      	subs	r3, #2
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfdc:	e012      	b.n	800c004 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	7812      	ldrb	r2, [r2, #0]
 800bfea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b01      	cmp	r3, #1
 800c014:	d148      	bne.n	800c0a8 <HAL_SPI_TransmitReceive+0x3aa>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d042      	beq.n	800c0a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d923      	bls.n	800c076 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c038:	b292      	uxth	r2, r2
 800c03a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	1c9a      	adds	r2, r3, #2
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	3b02      	subs	r3, #2
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c05e:	b29b      	uxth	r3, r3
 800c060:	2b01      	cmp	r3, #1
 800c062:	d81f      	bhi.n	800c0a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c072:	605a      	str	r2, [r3, #4]
 800c074:	e016      	b.n	800c0a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f103 020c 	add.w	r2, r3, #12
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	7812      	ldrb	r2, [r2, #0]
 800c084:	b2d2      	uxtb	r2, r2
 800c086:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	1c5a      	adds	r2, r3, #1
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c098:	b29b      	uxth	r3, r3
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c0a8:	f7f9 f838 	bl	800511c <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d803      	bhi.n	800c0c0 <HAL_SPI_TransmitReceive+0x3c2>
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0be:	d102      	bne.n	800c0c6 <HAL_SPI_TransmitReceive+0x3c8>
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c0cc:	e01c      	b.n	800c108 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f47f af5b 	bne.w	800bf90 <HAL_SPI_TransmitReceive+0x292>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f47f af54 	bne.w	800bf90 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 f937 	bl	800c360 <SPI_EndRxTxTransaction>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d006      	beq.n	800c106 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2220      	movs	r2, #32
 800c102:	661a      	str	r2, [r3, #96]	; 0x60
 800c104:	e000      	b.n	800c108 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3728      	adds	r7, #40	; 0x28
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	4613      	mov	r3, r2
 800c132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c134:	f7f8 fff2 	bl	800511c <HAL_GetTick>
 800c138:	4602      	mov	r2, r0
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	1a9b      	subs	r3, r3, r2
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	4413      	add	r3, r2
 800c142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c144:	f7f8 ffea 	bl	800511c <HAL_GetTick>
 800c148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c14a:	4b39      	ldr	r3, [pc, #228]	; (800c230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	015b      	lsls	r3, r3, #5
 800c150:	0d1b      	lsrs	r3, r3, #20
 800c152:	69fa      	ldr	r2, [r7, #28]
 800c154:	fb02 f303 	mul.w	r3, r2, r3
 800c158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c15a:	e054      	b.n	800c206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c162:	d050      	beq.n	800c206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c164:	f7f8 ffda 	bl	800511c <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	429a      	cmp	r2, r3
 800c172:	d902      	bls.n	800c17a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d13d      	bne.n	800c1f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c192:	d111      	bne.n	800c1b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c19c:	d004      	beq.n	800c1a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a6:	d107      	bne.n	800c1b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1c0:	d10f      	bne.n	800c1e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e017      	b.n	800c226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	3b01      	subs	r3, #1
 800c204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	4013      	ands	r3, r2
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	429a      	cmp	r2, r3
 800c214:	bf0c      	ite	eq
 800c216:	2301      	moveq	r3, #1
 800c218:	2300      	movne	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	461a      	mov	r2, r3
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	429a      	cmp	r2, r3
 800c222:	d19b      	bne.n	800c15c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3720      	adds	r7, #32
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000224 	.word	0x20000224

0800c234 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08a      	sub	sp, #40	; 0x28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c246:	f7f8 ff69 	bl	800511c <HAL_GetTick>
 800c24a:	4602      	mov	r2, r0
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	1a9b      	subs	r3, r3, r2
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	4413      	add	r3, r2
 800c254:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c256:	f7f8 ff61 	bl	800511c <HAL_GetTick>
 800c25a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	330c      	adds	r3, #12
 800c262:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c264:	4b3d      	ldr	r3, [pc, #244]	; (800c35c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	00da      	lsls	r2, r3, #3
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	0d1b      	lsrs	r3, r3, #20
 800c274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c27c:	e060      	b.n	800c340 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c284:	d107      	bne.n	800c296 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	b2db      	uxtb	r3, r3
 800c292:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c294:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c29c:	d050      	beq.n	800c340 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c29e:	f7f8 ff3d 	bl	800511c <HAL_GetTick>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d902      	bls.n	800c2b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d13d      	bne.n	800c330 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2cc:	d111      	bne.n	800c2f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2d6:	d004      	beq.n	800c2e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2e0:	d107      	bne.n	800c2f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2fa:	d10f      	bne.n	800c31c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c31a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e010      	b.n	800c352 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	689a      	ldr	r2, [r3, #8]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	4013      	ands	r3, r2
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d196      	bne.n	800c27e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3728      	adds	r7, #40	; 0x28
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000224 	.word	0x20000224

0800c360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af02      	add	r7, sp, #8
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2200      	movs	r2, #0
 800c374:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff ff5b 	bl	800c234 <SPI_WaitFifoStateUntilTimeout>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d007      	beq.n	800c394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c388:	f043 0220 	orr.w	r2, r3, #32
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e027      	b.n	800c3e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2200      	movs	r2, #0
 800c39c:	2180      	movs	r1, #128	; 0x80
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f7ff fec0 	bl	800c124 <SPI_WaitFlagStateUntilTimeout>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d007      	beq.n	800c3ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ae:	f043 0220 	orr.w	r2, r3, #32
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e014      	b.n	800c3e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff ff34 	bl	800c234 <SPI_WaitFifoStateUntilTimeout>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3d6:	f043 0220 	orr.w	r2, r3, #32
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e000      	b.n	800c3e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d101      	bne.n	800c3fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e049      	b.n	800c492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7f8 fc3e 	bl	8004c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2202      	movs	r2, #2
 800c41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3304      	adds	r3, #4
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f000 fb1e 	bl	800ca6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d001      	beq.n	800c4b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e047      	b.n	800c544 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a23      	ldr	r2, [pc, #140]	; (800c550 <HAL_TIM_Base_Start+0xb4>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d01d      	beq.n	800c502 <HAL_TIM_Base_Start+0x66>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ce:	d018      	beq.n	800c502 <HAL_TIM_Base_Start+0x66>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a1f      	ldr	r2, [pc, #124]	; (800c554 <HAL_TIM_Base_Start+0xb8>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d013      	beq.n	800c502 <HAL_TIM_Base_Start+0x66>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a1e      	ldr	r2, [pc, #120]	; (800c558 <HAL_TIM_Base_Start+0xbc>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d00e      	beq.n	800c502 <HAL_TIM_Base_Start+0x66>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a1c      	ldr	r2, [pc, #112]	; (800c55c <HAL_TIM_Base_Start+0xc0>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d009      	beq.n	800c502 <HAL_TIM_Base_Start+0x66>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a1b      	ldr	r2, [pc, #108]	; (800c560 <HAL_TIM_Base_Start+0xc4>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d004      	beq.n	800c502 <HAL_TIM_Base_Start+0x66>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a19      	ldr	r2, [pc, #100]	; (800c564 <HAL_TIM_Base_Start+0xc8>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d115      	bne.n	800c52e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	4b17      	ldr	r3, [pc, #92]	; (800c568 <HAL_TIM_Base_Start+0xcc>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b06      	cmp	r3, #6
 800c512:	d015      	beq.n	800c540 <HAL_TIM_Base_Start+0xa4>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c51a:	d011      	beq.n	800c540 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f042 0201 	orr.w	r2, r2, #1
 800c52a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c52c:	e008      	b.n	800c540 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f042 0201 	orr.w	r2, r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	e000      	b.n	800c542 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c540:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	40012c00 	.word	0x40012c00
 800c554:	40000400 	.word	0x40000400
 800c558:	40000800 	.word	0x40000800
 800c55c:	40000c00 	.word	0x40000c00
 800c560:	40013400 	.word	0x40013400
 800c564:	40014000 	.word	0x40014000
 800c568:	00010007 	.word	0x00010007

0800c56c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d001      	beq.n	800c584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e04f      	b.n	800c624 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68da      	ldr	r2, [r3, #12]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0201 	orr.w	r2, r2, #1
 800c59a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a23      	ldr	r2, [pc, #140]	; (800c630 <HAL_TIM_Base_Start_IT+0xc4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d01d      	beq.n	800c5e2 <HAL_TIM_Base_Start_IT+0x76>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ae:	d018      	beq.n	800c5e2 <HAL_TIM_Base_Start_IT+0x76>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a1f      	ldr	r2, [pc, #124]	; (800c634 <HAL_TIM_Base_Start_IT+0xc8>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d013      	beq.n	800c5e2 <HAL_TIM_Base_Start_IT+0x76>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a1e      	ldr	r2, [pc, #120]	; (800c638 <HAL_TIM_Base_Start_IT+0xcc>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d00e      	beq.n	800c5e2 <HAL_TIM_Base_Start_IT+0x76>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a1c      	ldr	r2, [pc, #112]	; (800c63c <HAL_TIM_Base_Start_IT+0xd0>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d009      	beq.n	800c5e2 <HAL_TIM_Base_Start_IT+0x76>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a1b      	ldr	r2, [pc, #108]	; (800c640 <HAL_TIM_Base_Start_IT+0xd4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d004      	beq.n	800c5e2 <HAL_TIM_Base_Start_IT+0x76>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a19      	ldr	r2, [pc, #100]	; (800c644 <HAL_TIM_Base_Start_IT+0xd8>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d115      	bne.n	800c60e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689a      	ldr	r2, [r3, #8]
 800c5e8:	4b17      	ldr	r3, [pc, #92]	; (800c648 <HAL_TIM_Base_Start_IT+0xdc>)
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b06      	cmp	r3, #6
 800c5f2:	d015      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0xb4>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fa:	d011      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f042 0201 	orr.w	r2, r2, #1
 800c60a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c60c:	e008      	b.n	800c620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f042 0201 	orr.w	r2, r2, #1
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	e000      	b.n	800c622 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	40012c00 	.word	0x40012c00
 800c634:	40000400 	.word	0x40000400
 800c638:	40000800 	.word	0x40000800
 800c63c:	40000c00 	.word	0x40000c00
 800c640:	40013400 	.word	0x40013400
 800c644:	40014000 	.word	0x40014000
 800c648:	00010007 	.word	0x00010007

0800c64c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	f003 0302 	and.w	r3, r3, #2
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d122      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f003 0302 	and.w	r3, r3, #2
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d11b      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f06f 0202 	mvn.w	r2, #2
 800c678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	f003 0303 	and.w	r3, r3, #3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f9ce 	bl	800ca30 <HAL_TIM_IC_CaptureCallback>
 800c694:	e005      	b.n	800c6a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f9c0 	bl	800ca1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f9d1 	bl	800ca44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d122      	bne.n	800c6fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f003 0304 	and.w	r3, r3, #4
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d11b      	bne.n	800c6fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f06f 0204 	mvn.w	r2, #4
 800c6cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f9a4 	bl	800ca30 <HAL_TIM_IC_CaptureCallback>
 800c6e8:	e005      	b.n	800c6f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f996 	bl	800ca1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f9a7 	bl	800ca44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b08      	cmp	r3, #8
 800c708:	d122      	bne.n	800c750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	f003 0308 	and.w	r3, r3, #8
 800c714:	2b08      	cmp	r3, #8
 800c716:	d11b      	bne.n	800c750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f06f 0208 	mvn.w	r2, #8
 800c720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2204      	movs	r2, #4
 800c726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	69db      	ldr	r3, [r3, #28]
 800c72e:	f003 0303 	and.w	r3, r3, #3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f97a 	bl	800ca30 <HAL_TIM_IC_CaptureCallback>
 800c73c:	e005      	b.n	800c74a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f96c 	bl	800ca1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f97d 	bl	800ca44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f003 0310 	and.w	r3, r3, #16
 800c75a:	2b10      	cmp	r3, #16
 800c75c:	d122      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f003 0310 	and.w	r3, r3, #16
 800c768:	2b10      	cmp	r3, #16
 800c76a:	d11b      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f06f 0210 	mvn.w	r2, #16
 800c774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2208      	movs	r2, #8
 800c77a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f950 	bl	800ca30 <HAL_TIM_IC_CaptureCallback>
 800c790:	e005      	b.n	800c79e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f942 	bl	800ca1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f953 	bl	800ca44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d10e      	bne.n	800c7d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d107      	bne.n	800c7d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f06f 0201 	mvn.w	r2, #1
 800c7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7f7 fa7c 	bl	8003cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7da:	2b80      	cmp	r3, #128	; 0x80
 800c7dc:	d10e      	bne.n	800c7fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e8:	2b80      	cmp	r3, #128	; 0x80
 800c7ea:	d107      	bne.n	800c7fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fafe 	bl	800cdf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c80a:	d10e      	bne.n	800c82a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c816:	2b80      	cmp	r3, #128	; 0x80
 800c818:	d107      	bne.n	800c82a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 faf1 	bl	800ce0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c834:	2b40      	cmp	r3, #64	; 0x40
 800c836:	d10e      	bne.n	800c856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c842:	2b40      	cmp	r3, #64	; 0x40
 800c844:	d107      	bne.n	800c856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f901 	bl	800ca58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	f003 0320 	and.w	r3, r3, #32
 800c860:	2b20      	cmp	r3, #32
 800c862:	d10e      	bne.n	800c882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	f003 0320 	and.w	r3, r3, #32
 800c86e:	2b20      	cmp	r3, #32
 800c870:	d107      	bne.n	800c882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f06f 0220 	mvn.w	r2, #32
 800c87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fab1 	bl	800cde4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d101      	bne.n	800c8a6 <HAL_TIM_ConfigClockSource+0x1c>
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	e0b6      	b.n	800ca14 <HAL_TIM_ConfigClockSource+0x18a>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c8c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8e2:	d03e      	beq.n	800c962 <HAL_TIM_ConfigClockSource+0xd8>
 800c8e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8e8:	f200 8087 	bhi.w	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f0:	f000 8086 	beq.w	800ca00 <HAL_TIM_ConfigClockSource+0x176>
 800c8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f8:	d87f      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c8fa:	2b70      	cmp	r3, #112	; 0x70
 800c8fc:	d01a      	beq.n	800c934 <HAL_TIM_ConfigClockSource+0xaa>
 800c8fe:	2b70      	cmp	r3, #112	; 0x70
 800c900:	d87b      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c902:	2b60      	cmp	r3, #96	; 0x60
 800c904:	d050      	beq.n	800c9a8 <HAL_TIM_ConfigClockSource+0x11e>
 800c906:	2b60      	cmp	r3, #96	; 0x60
 800c908:	d877      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c90a:	2b50      	cmp	r3, #80	; 0x50
 800c90c:	d03c      	beq.n	800c988 <HAL_TIM_ConfigClockSource+0xfe>
 800c90e:	2b50      	cmp	r3, #80	; 0x50
 800c910:	d873      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c912:	2b40      	cmp	r3, #64	; 0x40
 800c914:	d058      	beq.n	800c9c8 <HAL_TIM_ConfigClockSource+0x13e>
 800c916:	2b40      	cmp	r3, #64	; 0x40
 800c918:	d86f      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c91a:	2b30      	cmp	r3, #48	; 0x30
 800c91c:	d064      	beq.n	800c9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800c91e:	2b30      	cmp	r3, #48	; 0x30
 800c920:	d86b      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c922:	2b20      	cmp	r3, #32
 800c924:	d060      	beq.n	800c9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800c926:	2b20      	cmp	r3, #32
 800c928:	d867      	bhi.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d05c      	beq.n	800c9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800c92e:	2b10      	cmp	r3, #16
 800c930:	d05a      	beq.n	800c9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800c932:	e062      	b.n	800c9fa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6818      	ldr	r0, [r3, #0]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	6899      	ldr	r1, [r3, #8]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f000 f9a6 	bl	800cc94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	609a      	str	r2, [r3, #8]
      break;
 800c960:	e04f      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	6899      	ldr	r1, [r3, #8]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	f000 f98f 	bl	800cc94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c984:	609a      	str	r2, [r3, #8]
      break;
 800c986:	e03c      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6818      	ldr	r0, [r3, #0]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	6859      	ldr	r1, [r3, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	461a      	mov	r2, r3
 800c996:	f000 f903 	bl	800cba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2150      	movs	r1, #80	; 0x50
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 f95c 	bl	800cc5e <TIM_ITRx_SetConfig>
      break;
 800c9a6:	e02c      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6818      	ldr	r0, [r3, #0]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	6859      	ldr	r1, [r3, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f000 f922 	bl	800cbfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2160      	movs	r1, #96	; 0x60
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 f94c 	bl	800cc5e <TIM_ITRx_SetConfig>
      break;
 800c9c6:	e01c      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	6859      	ldr	r1, [r3, #4]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	f000 f8e3 	bl	800cba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2140      	movs	r1, #64	; 0x40
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 f93c 	bl	800cc5e <TIM_ITRx_SetConfig>
      break;
 800c9e6:	e00c      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f000 f933 	bl	800cc5e <TIM_ITRx_SetConfig>
      break;
 800c9f8:	e003      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800c9fe:	e000      	b.n	800ca02 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a40      	ldr	r2, [pc, #256]	; (800cb80 <TIM_Base_SetConfig+0x114>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d013      	beq.n	800caac <TIM_Base_SetConfig+0x40>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca8a:	d00f      	beq.n	800caac <TIM_Base_SetConfig+0x40>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a3d      	ldr	r2, [pc, #244]	; (800cb84 <TIM_Base_SetConfig+0x118>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00b      	beq.n	800caac <TIM_Base_SetConfig+0x40>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a3c      	ldr	r2, [pc, #240]	; (800cb88 <TIM_Base_SetConfig+0x11c>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d007      	beq.n	800caac <TIM_Base_SetConfig+0x40>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a3b      	ldr	r2, [pc, #236]	; (800cb8c <TIM_Base_SetConfig+0x120>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d003      	beq.n	800caac <TIM_Base_SetConfig+0x40>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a3a      	ldr	r2, [pc, #232]	; (800cb90 <TIM_Base_SetConfig+0x124>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d108      	bne.n	800cabe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a2f      	ldr	r2, [pc, #188]	; (800cb80 <TIM_Base_SetConfig+0x114>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d01f      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cacc:	d01b      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a2c      	ldr	r2, [pc, #176]	; (800cb84 <TIM_Base_SetConfig+0x118>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d017      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a2b      	ldr	r2, [pc, #172]	; (800cb88 <TIM_Base_SetConfig+0x11c>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d013      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a2a      	ldr	r2, [pc, #168]	; (800cb8c <TIM_Base_SetConfig+0x120>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d00f      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a29      	ldr	r2, [pc, #164]	; (800cb90 <TIM_Base_SetConfig+0x124>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00b      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a28      	ldr	r2, [pc, #160]	; (800cb94 <TIM_Base_SetConfig+0x128>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d007      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a27      	ldr	r2, [pc, #156]	; (800cb98 <TIM_Base_SetConfig+0x12c>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d003      	beq.n	800cb06 <TIM_Base_SetConfig+0x9a>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a26      	ldr	r2, [pc, #152]	; (800cb9c <TIM_Base_SetConfig+0x130>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d108      	bne.n	800cb18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a10      	ldr	r2, [pc, #64]	; (800cb80 <TIM_Base_SetConfig+0x114>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d00f      	beq.n	800cb64 <TIM_Base_SetConfig+0xf8>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a12      	ldr	r2, [pc, #72]	; (800cb90 <TIM_Base_SetConfig+0x124>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d00b      	beq.n	800cb64 <TIM_Base_SetConfig+0xf8>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a11      	ldr	r2, [pc, #68]	; (800cb94 <TIM_Base_SetConfig+0x128>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d007      	beq.n	800cb64 <TIM_Base_SetConfig+0xf8>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a10      	ldr	r2, [pc, #64]	; (800cb98 <TIM_Base_SetConfig+0x12c>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d003      	beq.n	800cb64 <TIM_Base_SetConfig+0xf8>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a0f      	ldr	r2, [pc, #60]	; (800cb9c <TIM_Base_SetConfig+0x130>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d103      	bne.n	800cb6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	691a      	ldr	r2, [r3, #16]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	615a      	str	r2, [r3, #20]
}
 800cb72:	bf00      	nop
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	40012c00 	.word	0x40012c00
 800cb84:	40000400 	.word	0x40000400
 800cb88:	40000800 	.word	0x40000800
 800cb8c:	40000c00 	.word	0x40000c00
 800cb90:	40013400 	.word	0x40013400
 800cb94:	40014000 	.word	0x40014000
 800cb98:	40014400 	.word	0x40014400
 800cb9c:	40014800 	.word	0x40014800

0800cba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b087      	sub	sp, #28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6a1b      	ldr	r3, [r3, #32]
 800cbb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	f023 0201 	bic.w	r2, r3, #1
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	011b      	lsls	r3, r3, #4
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f023 030a 	bic.w	r3, r3, #10
 800cbdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	621a      	str	r2, [r3, #32]
}
 800cbf2:	bf00      	nop
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b087      	sub	sp, #28
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	60b9      	str	r1, [r7, #8]
 800cc08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	f023 0210 	bic.w	r2, r3, #16
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	031b      	lsls	r3, r3, #12
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	011b      	lsls	r3, r3, #4
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	621a      	str	r2, [r3, #32]
}
 800cc52:	bf00      	nop
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	f043 0307 	orr.w	r3, r3, #7
 800cc80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	609a      	str	r2, [r3, #8]
}
 800cc88:	bf00      	nop
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	021a      	lsls	r2, r3, #8
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	609a      	str	r2, [r3, #8]
}
 800ccc8:	bf00      	nop
 800ccca:	371c      	adds	r7, #28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d101      	bne.n	800ccec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cce8:	2302      	movs	r3, #2
 800ccea:	e068      	b.n	800cdbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a2e      	ldr	r2, [pc, #184]	; (800cdcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d004      	beq.n	800cd20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a2d      	ldr	r2, [pc, #180]	; (800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d108      	bne.n	800cd32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a1e      	ldr	r2, [pc, #120]	; (800cdcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d01d      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd5e:	d018      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a1b      	ldr	r2, [pc, #108]	; (800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d013      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a1a      	ldr	r2, [pc, #104]	; (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00e      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a18      	ldr	r2, [pc, #96]	; (800cddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d009      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a13      	ldr	r2, [pc, #76]	; (800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d004      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a14      	ldr	r2, [pc, #80]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d10c      	bne.n	800cdac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	40012c00 	.word	0x40012c00
 800cdd0:	40013400 	.word	0x40013400
 800cdd4:	40000400 	.word	0x40000400
 800cdd8:	40000800 	.word	0x40000800
 800cddc:	40000c00 	.word	0x40000c00
 800cde0:	40014000 	.word	0x40014000

0800cde4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce20:	b084      	sub	sp, #16
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	f107 001c 	add.w	r0, r7, #28
 800ce2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f001 faf6 	bl	800e430 <USB_CoreReset>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ce48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	639a      	str	r2, [r3, #56]	; 0x38
 800ce5a:	e005      	b.n	800ce68 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce74:	b004      	add	sp, #16
 800ce76:	4770      	bx	lr

0800ce78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ce86:	79fb      	ldrb	r3, [r7, #7]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d165      	bne.n	800cf58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	4a3e      	ldr	r2, [pc, #248]	; (800cf88 <USB_SetTurnaroundTime+0x110>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d906      	bls.n	800cea2 <USB_SetTurnaroundTime+0x2a>
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	4a3d      	ldr	r2, [pc, #244]	; (800cf8c <USB_SetTurnaroundTime+0x114>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d202      	bcs.n	800cea2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ce9c:	230f      	movs	r3, #15
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	e05c      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	4a39      	ldr	r2, [pc, #228]	; (800cf8c <USB_SetTurnaroundTime+0x114>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d306      	bcc.n	800ceb8 <USB_SetTurnaroundTime+0x40>
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	4a38      	ldr	r2, [pc, #224]	; (800cf90 <USB_SetTurnaroundTime+0x118>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d202      	bcs.n	800ceb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ceb2:	230e      	movs	r3, #14
 800ceb4:	617b      	str	r3, [r7, #20]
 800ceb6:	e051      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	4a35      	ldr	r2, [pc, #212]	; (800cf90 <USB_SetTurnaroundTime+0x118>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d306      	bcc.n	800cece <USB_SetTurnaroundTime+0x56>
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	4a34      	ldr	r2, [pc, #208]	; (800cf94 <USB_SetTurnaroundTime+0x11c>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d202      	bcs.n	800cece <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cec8:	230d      	movs	r3, #13
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	e046      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	4a30      	ldr	r2, [pc, #192]	; (800cf94 <USB_SetTurnaroundTime+0x11c>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d306      	bcc.n	800cee4 <USB_SetTurnaroundTime+0x6c>
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	4a2f      	ldr	r2, [pc, #188]	; (800cf98 <USB_SetTurnaroundTime+0x120>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d802      	bhi.n	800cee4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cede:	230c      	movs	r3, #12
 800cee0:	617b      	str	r3, [r7, #20]
 800cee2:	e03b      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	4a2c      	ldr	r2, [pc, #176]	; (800cf98 <USB_SetTurnaroundTime+0x120>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d906      	bls.n	800cefa <USB_SetTurnaroundTime+0x82>
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	4a2b      	ldr	r2, [pc, #172]	; (800cf9c <USB_SetTurnaroundTime+0x124>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d802      	bhi.n	800cefa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cef4:	230b      	movs	r3, #11
 800cef6:	617b      	str	r3, [r7, #20]
 800cef8:	e030      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	4a27      	ldr	r2, [pc, #156]	; (800cf9c <USB_SetTurnaroundTime+0x124>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d906      	bls.n	800cf10 <USB_SetTurnaroundTime+0x98>
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	4a26      	ldr	r2, [pc, #152]	; (800cfa0 <USB_SetTurnaroundTime+0x128>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d802      	bhi.n	800cf10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf0a:	230a      	movs	r3, #10
 800cf0c:	617b      	str	r3, [r7, #20]
 800cf0e:	e025      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	4a23      	ldr	r2, [pc, #140]	; (800cfa0 <USB_SetTurnaroundTime+0x128>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d906      	bls.n	800cf26 <USB_SetTurnaroundTime+0xae>
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	4a22      	ldr	r2, [pc, #136]	; (800cfa4 <USB_SetTurnaroundTime+0x12c>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d202      	bcs.n	800cf26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf20:	2309      	movs	r3, #9
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	e01a      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	4a1e      	ldr	r2, [pc, #120]	; (800cfa4 <USB_SetTurnaroundTime+0x12c>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d306      	bcc.n	800cf3c <USB_SetTurnaroundTime+0xc4>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	4a1d      	ldr	r2, [pc, #116]	; (800cfa8 <USB_SetTurnaroundTime+0x130>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d802      	bhi.n	800cf3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf36:	2308      	movs	r3, #8
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	e00f      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	4a1a      	ldr	r2, [pc, #104]	; (800cfa8 <USB_SetTurnaroundTime+0x130>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d906      	bls.n	800cf52 <USB_SetTurnaroundTime+0xda>
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	4a19      	ldr	r2, [pc, #100]	; (800cfac <USB_SetTurnaroundTime+0x134>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d202      	bcs.n	800cf52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf4c:	2307      	movs	r3, #7
 800cf4e:	617b      	str	r3, [r7, #20]
 800cf50:	e004      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf52:	2306      	movs	r3, #6
 800cf54:	617b      	str	r3, [r7, #20]
 800cf56:	e001      	b.n	800cf5c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf58:	2309      	movs	r3, #9
 800cf5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	68da      	ldr	r2, [r3, #12]
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	029b      	lsls	r3, r3, #10
 800cf70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cf74:	431a      	orrs	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	371c      	adds	r7, #28
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	00d8acbf 	.word	0x00d8acbf
 800cf8c:	00e4e1c0 	.word	0x00e4e1c0
 800cf90:	00f42400 	.word	0x00f42400
 800cf94:	01067380 	.word	0x01067380
 800cf98:	011a499f 	.word	0x011a499f
 800cf9c:	01312cff 	.word	0x01312cff
 800cfa0:	014ca43f 	.word	0x014ca43f
 800cfa4:	016e3600 	.word	0x016e3600
 800cfa8:	01a6ab1f 	.word	0x01a6ab1f
 800cfac:	01e84800 	.word	0x01e84800

0800cfb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f043 0201 	orr.w	r2, r3, #1
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	f023 0201 	bic.w	r2, r3, #1
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d000:	2300      	movs	r3, #0
 800d002:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d010:	78fb      	ldrb	r3, [r7, #3]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d115      	bne.n	800d042 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d022:	2001      	movs	r0, #1
 800d024:	f7f8 f886 	bl	8005134 <HAL_Delay>
      ms++;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3301      	adds	r3, #1
 800d02c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f001 f985 	bl	800e33e <USB_GetMode>
 800d034:	4603      	mov	r3, r0
 800d036:	2b01      	cmp	r3, #1
 800d038:	d01e      	beq.n	800d078 <USB_SetCurrentMode+0x84>
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2b31      	cmp	r3, #49	; 0x31
 800d03e:	d9f0      	bls.n	800d022 <USB_SetCurrentMode+0x2e>
 800d040:	e01a      	b.n	800d078 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d042:	78fb      	ldrb	r3, [r7, #3]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d115      	bne.n	800d074 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d054:	2001      	movs	r0, #1
 800d056:	f7f8 f86d 	bl	8005134 <HAL_Delay>
      ms++;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3301      	adds	r3, #1
 800d05e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f001 f96c 	bl	800e33e <USB_GetMode>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <USB_SetCurrentMode+0x84>
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b31      	cmp	r3, #49	; 0x31
 800d070:	d9f0      	bls.n	800d054 <USB_SetCurrentMode+0x60>
 800d072:	e001      	b.n	800d078 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e005      	b.n	800d084 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b32      	cmp	r3, #50	; 0x32
 800d07c:	d101      	bne.n	800d082 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e000      	b.n	800d084 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d08c:	b084      	sub	sp, #16
 800d08e:	b580      	push	{r7, lr}
 800d090:	b086      	sub	sp, #24
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d09a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	613b      	str	r3, [r7, #16]
 800d0aa:	e009      	b.n	800d0c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	3340      	adds	r3, #64	; 0x40
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	613b      	str	r3, [r7, #16]
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	2b0e      	cmp	r3, #14
 800d0c4:	d9f2      	bls.n	800d0ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d11c      	bne.n	800d106 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0da:	f043 0302 	orr.w	r3, r3, #2
 800d0de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	e005      	b.n	800d112 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d118:	461a      	mov	r2, r3
 800d11a:	2300      	movs	r3, #0
 800d11c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d124:	4619      	mov	r1, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12c:	461a      	mov	r2, r3
 800d12e:	680b      	ldr	r3, [r1, #0]
 800d130:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d132:	2103      	movs	r1, #3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f959 	bl	800d3ec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d13a:	2110      	movs	r1, #16
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f8f1 	bl	800d324 <USB_FlushTxFifo>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f91d 	bl	800d38c <USB_FlushRxFifo>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d162:	461a      	mov	r2, r3
 800d164:	2300      	movs	r3, #0
 800d166:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d16e:	461a      	mov	r2, r3
 800d170:	2300      	movs	r3, #0
 800d172:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d17a:	461a      	mov	r2, r3
 800d17c:	2300      	movs	r3, #0
 800d17e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d180:	2300      	movs	r3, #0
 800d182:	613b      	str	r3, [r7, #16]
 800d184:	e043      	b.n	800d20e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d19c:	d118      	bne.n	800d1d0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	e013      	b.n	800d1e2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	e008      	b.n	800d1e2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1dc:	461a      	mov	r2, r3
 800d1de:	2300      	movs	r3, #0
 800d1e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	015a      	lsls	r2, r3, #5
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d200:	461a      	mov	r2, r3
 800d202:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	3301      	adds	r3, #1
 800d20c:	613b      	str	r3, [r7, #16]
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	429a      	cmp	r2, r3
 800d214:	d3b7      	bcc.n	800d186 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d216:	2300      	movs	r3, #0
 800d218:	613b      	str	r3, [r7, #16]
 800d21a:	e043      	b.n	800d2a4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	015a      	lsls	r2, r3, #5
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4413      	add	r3, r2
 800d224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d22e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d232:	d118      	bne.n	800d266 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10a      	bne.n	800d250 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	015a      	lsls	r2, r3, #5
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	4413      	add	r3, r2
 800d242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d246:	461a      	mov	r2, r3
 800d248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	e013      	b.n	800d278 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	4413      	add	r3, r2
 800d258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25c:	461a      	mov	r2, r3
 800d25e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	e008      	b.n	800d278 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	015a      	lsls	r2, r3, #5
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	4413      	add	r3, r2
 800d26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d272:	461a      	mov	r2, r3
 800d274:	2300      	movs	r3, #0
 800d276:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	015a      	lsls	r2, r3, #5
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d284:	461a      	mov	r2, r3
 800d286:	2300      	movs	r3, #0
 800d288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d296:	461a      	mov	r2, r3
 800d298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d29c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	613b      	str	r3, [r7, #16]
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d3b7      	bcc.n	800d21c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d2cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	f043 0210 	orr.w	r2, r3, #16
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	699a      	ldr	r2, [r3, #24]
 800d2de:	4b10      	ldr	r3, [pc, #64]	; (800d320 <USB_DevInit+0x294>)
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d005      	beq.n	800d2f8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	f043 0208 	orr.w	r2, r3, #8
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d107      	bne.n	800d30e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d306:	f043 0304 	orr.w	r3, r3, #4
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d31a:	b004      	add	sp, #16
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	803c3800 	.word	0x803c3800

0800d324 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3301      	adds	r3, #1
 800d336:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	4a13      	ldr	r2, [pc, #76]	; (800d388 <USB_FlushTxFifo+0x64>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d901      	bls.n	800d344 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e01b      	b.n	800d37c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	daf2      	bge.n	800d332 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	019b      	lsls	r3, r3, #6
 800d354:	f043 0220 	orr.w	r2, r3, #32
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3301      	adds	r3, #1
 800d360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	4a08      	ldr	r2, [pc, #32]	; (800d388 <USB_FlushTxFifo+0x64>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d901      	bls.n	800d36e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e006      	b.n	800d37c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	f003 0320 	and.w	r3, r3, #32
 800d376:	2b20      	cmp	r3, #32
 800d378:	d0f0      	beq.n	800d35c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3714      	adds	r7, #20
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	00030d40 	.word	0x00030d40

0800d38c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d394:	2300      	movs	r3, #0
 800d396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3301      	adds	r3, #1
 800d39c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	4a11      	ldr	r2, [pc, #68]	; (800d3e8 <USB_FlushRxFifo+0x5c>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d901      	bls.n	800d3aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e018      	b.n	800d3dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	daf2      	bge.n	800d398 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2210      	movs	r2, #16
 800d3ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4a08      	ldr	r2, [pc, #32]	; (800d3e8 <USB_FlushRxFifo+0x5c>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d901      	bls.n	800d3ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	e006      	b.n	800d3dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	f003 0310 	and.w	r3, r3, #16
 800d3d6:	2b10      	cmp	r3, #16
 800d3d8:	d0f0      	beq.n	800d3bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	00030d40 	.word	0x00030d40

0800d3ec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	68f9      	ldr	r1, [r7, #12]
 800d408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d40c:	4313      	orrs	r3, r2
 800d40e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d41e:	b480      	push	{r7}
 800d420:	b087      	sub	sp, #28
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	f003 0306 	and.w	r3, r3, #6
 800d436:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d002      	beq.n	800d444 <USB_GetDevSpeed+0x26>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b06      	cmp	r3, #6
 800d442:	d102      	bne.n	800d44a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d444:	2302      	movs	r3, #2
 800d446:	75fb      	strb	r3, [r7, #23]
 800d448:	e001      	b.n	800d44e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d44a:	230f      	movs	r3, #15
 800d44c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d450:	4618      	mov	r0, r3
 800d452:	371c      	adds	r7, #28
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d13a      	bne.n	800d4ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d47e:	69da      	ldr	r2, [r3, #28]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	f003 030f 	and.w	r3, r3, #15
 800d488:	2101      	movs	r1, #1
 800d48a:	fa01 f303 	lsl.w	r3, r1, r3
 800d48e:	b29b      	uxth	r3, r3
 800d490:	68f9      	ldr	r1, [r7, #12]
 800d492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d496:	4313      	orrs	r3, r2
 800d498:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	015a      	lsls	r2, r3, #5
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d155      	bne.n	800d55c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	791b      	ldrb	r3, [r3, #4]
 800d4ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	059b      	lsls	r3, r3, #22
 800d4d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	0151      	lsls	r1, r2, #5
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	440a      	add	r2, r1
 800d4de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4ea:	6013      	str	r3, [r2, #0]
 800d4ec:	e036      	b.n	800d55c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f4:	69da      	ldr	r2, [r3, #28]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	f003 030f 	and.w	r3, r3, #15
 800d4fe:	2101      	movs	r1, #1
 800d500:	fa01 f303 	lsl.w	r3, r1, r3
 800d504:	041b      	lsls	r3, r3, #16
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d50c:	4313      	orrs	r3, r2
 800d50e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	4413      	add	r3, r2
 800d518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d522:	2b00      	cmp	r3, #0
 800d524:	d11a      	bne.n	800d55c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	015a      	lsls	r2, r3, #5
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	4413      	add	r3, r2
 800d52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	791b      	ldrb	r3, [r3, #4]
 800d540:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d542:	430b      	orrs	r3, r1
 800d544:	4313      	orrs	r3, r2
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	0151      	lsls	r1, r2, #5
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	440a      	add	r2, r1
 800d54e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d55a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
	...

0800d56c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	785b      	ldrb	r3, [r3, #1]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d161      	bne.n	800d64c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	015a      	lsls	r2, r3, #5
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4413      	add	r3, r2
 800d590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d59a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d59e:	d11f      	bne.n	800d5e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	015a      	lsls	r2, r3, #5
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	0151      	lsls	r1, r2, #5
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	440a      	add	r2, r1
 800d5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	0151      	lsls	r1, r2, #5
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	440a      	add	r2, r1
 800d5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	f003 030f 	and.w	r3, r3, #15
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	43db      	mvns	r3, r3
 800d5fa:	68f9      	ldr	r1, [r7, #12]
 800d5fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d600:	4013      	ands	r3, r2
 800d602:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d60a:	69da      	ldr	r2, [r3, #28]
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	f003 030f 	and.w	r3, r3, #15
 800d614:	2101      	movs	r1, #1
 800d616:	fa01 f303 	lsl.w	r3, r1, r3
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	43db      	mvns	r3, r3
 800d61e:	68f9      	ldr	r1, [r7, #12]
 800d620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d624:	4013      	ands	r3, r2
 800d626:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	0159      	lsls	r1, r3, #5
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	440b      	add	r3, r1
 800d63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d642:	4619      	mov	r1, r3
 800d644:	4b35      	ldr	r3, [pc, #212]	; (800d71c <USB_DeactivateEndpoint+0x1b0>)
 800d646:	4013      	ands	r3, r2
 800d648:	600b      	str	r3, [r1, #0]
 800d64a:	e060      	b.n	800d70e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	015a      	lsls	r2, r3, #5
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	4413      	add	r3, r2
 800d654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d65e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d662:	d11f      	bne.n	800d6a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	0151      	lsls	r1, r2, #5
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	440a      	add	r2, r1
 800d67a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d67e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d682:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	015a      	lsls	r2, r3, #5
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	4413      	add	r3, r2
 800d68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	0151      	lsls	r1, r2, #5
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	440a      	add	r2, r1
 800d69a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d69e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ba:	041b      	lsls	r3, r3, #16
 800d6bc:	43db      	mvns	r3, r3
 800d6be:	68f9      	ldr	r1, [r7, #12]
 800d6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ce:	69da      	ldr	r2, [r3, #28]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	2101      	movs	r1, #1
 800d6da:	fa01 f303 	lsl.w	r3, r1, r3
 800d6de:	041b      	lsls	r3, r3, #16
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	68f9      	ldr	r1, [r7, #12]
 800d6e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	0159      	lsls	r1, r3, #5
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	440b      	add	r3, r1
 800d702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d706:	4619      	mov	r1, r3
 800d708:	4b05      	ldr	r3, [pc, #20]	; (800d720 <USB_DeactivateEndpoint+0x1b4>)
 800d70a:	4013      	ands	r3, r2
 800d70c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	3714      	adds	r7, #20
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	ec337800 	.word	0xec337800
 800d720:	eff37800 	.word	0xeff37800

0800d724 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	785b      	ldrb	r3, [r3, #1]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	f040 810a 	bne.w	800d956 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d132      	bne.n	800d7b0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	4413      	add	r3, r2
 800d752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	693a      	ldr	r2, [r7, #16]
 800d75a:	0151      	lsls	r1, r2, #5
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	440a      	add	r2, r1
 800d760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	440a      	add	r2, r1
 800d784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d78c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	015a      	lsls	r2, r3, #5
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	4413      	add	r3, r2
 800d796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	693a      	ldr	r2, [r7, #16]
 800d79e:	0151      	lsls	r1, r2, #5
 800d7a0:	697a      	ldr	r2, [r7, #20]
 800d7a2:	440a      	add	r2, r1
 800d7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7a8:	0cdb      	lsrs	r3, r3, #19
 800d7aa:	04db      	lsls	r3, r3, #19
 800d7ac:	6113      	str	r3, [r2, #16]
 800d7ae:	e074      	b.n	800d89a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	0151      	lsls	r1, r2, #5
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	440a      	add	r2, r1
 800d7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ca:	0cdb      	lsrs	r3, r3, #19
 800d7cc:	04db      	lsls	r3, r3, #19
 800d7ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	015a      	lsls	r2, r3, #5
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	693a      	ldr	r2, [r7, #16]
 800d7e0:	0151      	lsls	r1, r2, #5
 800d7e2:	697a      	ldr	r2, [r7, #20]
 800d7e4:	440a      	add	r2, r1
 800d7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d800:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	6999      	ldr	r1, [r3, #24]
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	440b      	add	r3, r1
 800d80c:	1e59      	subs	r1, r3, #1
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	fbb1 f3f3 	udiv	r3, r1, r3
 800d816:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d818:	4b9e      	ldr	r3, [pc, #632]	; (800da94 <USB_EPStartXfer+0x370>)
 800d81a:	400b      	ands	r3, r1
 800d81c:	6939      	ldr	r1, [r7, #16]
 800d81e:	0148      	lsls	r0, r1, #5
 800d820:	6979      	ldr	r1, [r7, #20]
 800d822:	4401      	add	r1, r0
 800d824:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d828:	4313      	orrs	r3, r2
 800d82a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	015a      	lsls	r2, r3, #5
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	4413      	add	r3, r2
 800d834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d838:	691a      	ldr	r2, [r3, #16]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d842:	6939      	ldr	r1, [r7, #16]
 800d844:	0148      	lsls	r0, r1, #5
 800d846:	6979      	ldr	r1, [r7, #20]
 800d848:	4401      	add	r1, r0
 800d84a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d84e:	4313      	orrs	r3, r2
 800d850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	791b      	ldrb	r3, [r3, #4]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d11f      	bne.n	800d89a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	015a      	lsls	r2, r3, #5
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	4413      	add	r3, r2
 800d862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	693a      	ldr	r2, [r7, #16]
 800d86a:	0151      	lsls	r1, r2, #5
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	440a      	add	r2, r1
 800d870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d874:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	015a      	lsls	r2, r3, #5
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	4413      	add	r3, r2
 800d882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	0151      	lsls	r1, r2, #5
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	440a      	add	r2, r1
 800d890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d898:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	015a      	lsls	r2, r3, #5
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	0151      	lsls	r1, r2, #5
 800d8ac:	697a      	ldr	r2, [r7, #20]
 800d8ae:	440a      	add	r2, r1
 800d8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8b8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	791b      	ldrb	r3, [r3, #4]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d015      	beq.n	800d8ee <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	699b      	ldr	r3, [r3, #24]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 8106 	beq.w	800dad8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	f003 030f 	and.w	r3, r3, #15
 800d8dc:	2101      	movs	r1, #1
 800d8de:	fa01 f303 	lsl.w	r3, r1, r3
 800d8e2:	6979      	ldr	r1, [r7, #20]
 800d8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	634b      	str	r3, [r1, #52]	; 0x34
 800d8ec:	e0f4      	b.n	800dad8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d110      	bne.n	800d920 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	015a      	lsls	r2, r3, #5
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	4413      	add	r3, r2
 800d906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	0151      	lsls	r1, r2, #5
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	440a      	add	r2, r1
 800d914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d91c:	6013      	str	r3, [r2, #0]
 800d91e:	e00f      	b.n	800d940 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	015a      	lsls	r2, r3, #5
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	4413      	add	r3, r2
 800d928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	693a      	ldr	r2, [r7, #16]
 800d930:	0151      	lsls	r1, r2, #5
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	440a      	add	r2, r1
 800d936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d93a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d93e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	6919      	ldr	r1, [r3, #16]
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	781a      	ldrb	r2, [r3, #0]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fa94 	bl	800de7c <USB_WritePacket>
 800d954:	e0c0      	b.n	800dad8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	015a      	lsls	r2, r3, #5
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	0151      	lsls	r1, r2, #5
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	440a      	add	r2, r1
 800d96c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d970:	0cdb      	lsrs	r3, r3, #19
 800d972:	04db      	lsls	r3, r3, #19
 800d974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	015a      	lsls	r2, r3, #5
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	4413      	add	r3, r2
 800d97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	693a      	ldr	r2, [r7, #16]
 800d986:	0151      	lsls	r1, r2, #5
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	440a      	add	r2, r1
 800d98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d998:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d123      	bne.n	800d9ea <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	015a      	lsls	r2, r3, #5
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ae:	691a      	ldr	r2, [r3, #16]
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9b8:	6939      	ldr	r1, [r7, #16]
 800d9ba:	0148      	lsls	r0, r1, #5
 800d9bc:	6979      	ldr	r1, [r7, #20]
 800d9be:	4401      	add	r1, r0
 800d9c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	015a      	lsls	r2, r3, #5
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	693a      	ldr	r2, [r7, #16]
 800d9d8:	0151      	lsls	r1, r2, #5
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	440a      	add	r2, r1
 800d9de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9e6:	6113      	str	r3, [r2, #16]
 800d9e8:	e037      	b.n	800da5a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	1e5a      	subs	r2, r3, #1
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9fe:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	89fa      	ldrh	r2, [r7, #14]
 800da06:	fb03 f202 	mul.w	r2, r3, r2
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	015a      	lsls	r2, r3, #5
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	4413      	add	r3, r2
 800da16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1a:	691a      	ldr	r2, [r3, #16]
 800da1c:	89fb      	ldrh	r3, [r7, #14]
 800da1e:	04d9      	lsls	r1, r3, #19
 800da20:	4b1c      	ldr	r3, [pc, #112]	; (800da94 <USB_EPStartXfer+0x370>)
 800da22:	400b      	ands	r3, r1
 800da24:	6939      	ldr	r1, [r7, #16]
 800da26:	0148      	lsls	r0, r1, #5
 800da28:	6979      	ldr	r1, [r7, #20]
 800da2a:	4401      	add	r1, r0
 800da2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da30:	4313      	orrs	r3, r2
 800da32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	015a      	lsls	r2, r3, #5
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da40:	691a      	ldr	r2, [r3, #16]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	69db      	ldr	r3, [r3, #28]
 800da46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da4a:	6939      	ldr	r1, [r7, #16]
 800da4c:	0148      	lsls	r0, r1, #5
 800da4e:	6979      	ldr	r1, [r7, #20]
 800da50:	4401      	add	r1, r0
 800da52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da56:	4313      	orrs	r3, r2
 800da58:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	791b      	ldrb	r3, [r3, #4]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d12a      	bne.n	800dab8 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d112      	bne.n	800da98 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	015a      	lsls	r2, r3, #5
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	4413      	add	r3, r2
 800da7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	693a      	ldr	r2, [r7, #16]
 800da82:	0151      	lsls	r1, r2, #5
 800da84:	697a      	ldr	r2, [r7, #20]
 800da86:	440a      	add	r2, r1
 800da88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	e011      	b.n	800dab8 <USB_EPStartXfer+0x394>
 800da94:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	0151      	lsls	r1, r2, #5
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	440a      	add	r2, r1
 800daae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dab6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	015a      	lsls	r2, r3, #5
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	4413      	add	r3, r2
 800dac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	0151      	lsls	r1, r2, #5
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	440a      	add	r2, r1
 800dace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop

0800dae4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	785b      	ldrb	r3, [r3, #1]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	f040 80ab 	bne.w	800dc58 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d132      	bne.n	800db70 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	015a      	lsls	r2, r3, #5
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	4413      	add	r3, r2
 800db12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	0151      	lsls	r1, r2, #5
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	440a      	add	r2, r1
 800db20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	015a      	lsls	r2, r3, #5
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	4413      	add	r3, r2
 800db36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	0151      	lsls	r1, r2, #5
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	440a      	add	r2, r1
 800db44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	4413      	add	r3, r2
 800db56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	0151      	lsls	r1, r2, #5
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	440a      	add	r2, r1
 800db64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db68:	0cdb      	lsrs	r3, r3, #19
 800db6a:	04db      	lsls	r3, r3, #19
 800db6c:	6113      	str	r3, [r2, #16]
 800db6e:	e04e      	b.n	800dc0e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	0151      	lsls	r1, r2, #5
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	440a      	add	r2, r1
 800db86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db8a:	0cdb      	lsrs	r3, r3, #19
 800db8c:	04db      	lsls	r3, r3, #19
 800db8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	015a      	lsls	r2, r3, #5
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	4413      	add	r3, r2
 800db98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	0151      	lsls	r1, r2, #5
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	440a      	add	r2, r1
 800dba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dbae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dbb2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	699a      	ldr	r2, [r3, #24]
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d903      	bls.n	800dbc8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	68da      	ldr	r2, [r3, #12]
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	015a      	lsls	r2, r3, #5
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	4413      	add	r3, r2
 800dbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	0151      	lsls	r1, r2, #5
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	440a      	add	r2, r1
 800dbde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	0148      	lsls	r0, r1, #5
 800dc02:	68f9      	ldr	r1, [r7, #12]
 800dc04:	4401      	add	r1, r0
 800dc06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	015a      	lsls	r2, r3, #5
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	4413      	add	r3, r2
 800dc16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	0151      	lsls	r1, r2, #5
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	440a      	add	r2, r1
 800dc24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc2c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d071      	beq.n	800dd1a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	f003 030f 	and.w	r3, r3, #15
 800dc46:	2101      	movs	r1, #1
 800dc48:	fa01 f303 	lsl.w	r3, r1, r3
 800dc4c:	68f9      	ldr	r1, [r7, #12]
 800dc4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc52:	4313      	orrs	r3, r2
 800dc54:	634b      	str	r3, [r1, #52]	; 0x34
 800dc56:	e060      	b.n	800dd1a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	015a      	lsls	r2, r3, #5
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	0151      	lsls	r1, r2, #5
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	440a      	add	r2, r1
 800dc6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc72:	0cdb      	lsrs	r3, r3, #19
 800dc74:	04db      	lsls	r3, r3, #19
 800dc76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	0151      	lsls	r1, r2, #5
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	440a      	add	r2, r1
 800dc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc9a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d003      	beq.n	800dcac <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	68da      	ldr	r2, [r3, #12]
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	68da      	ldr	r2, [r3, #12]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	0151      	lsls	r1, r2, #5
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	440a      	add	r2, r1
 800dcca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce0:	691a      	ldr	r2, [r3, #16]
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	69db      	ldr	r3, [r3, #28]
 800dce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcea:	68b9      	ldr	r1, [r7, #8]
 800dcec:	0148      	lsls	r0, r1, #5
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	4401      	add	r1, r0
 800dcf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	015a      	lsls	r2, r3, #5
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	0151      	lsls	r1, r2, #5
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	440a      	add	r2, r1
 800dd10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b087      	sub	sp, #28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	785b      	ldrb	r3, [r3, #1]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d14a      	bne.n	800dddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	015a      	lsls	r2, r3, #5
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd5e:	f040 8086 	bne.w	800de6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	7812      	ldrb	r2, [r2, #0]
 800dd76:	0151      	lsls	r1, r2, #5
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	015a      	lsls	r2, r3, #5
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	4413      	add	r3, r2
 800dd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	7812      	ldrb	r2, [r2, #0]
 800dd9a:	0151      	lsls	r1, r2, #5
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	440a      	add	r2, r1
 800dda0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dda4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dda8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3301      	adds	r3, #1
 800ddae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f242 7210 	movw	r2, #10000	; 0x2710
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d902      	bls.n	800ddc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	75fb      	strb	r3, [r7, #23]
          break;
 800ddbe:	e056      	b.n	800de6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	015a      	lsls	r2, r3, #5
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	4413      	add	r3, r2
 800ddca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddd8:	d0e7      	beq.n	800ddaa <USB_EPStopXfer+0x82>
 800ddda:	e048      	b.n	800de6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	015a      	lsls	r2, r3, #5
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	4413      	add	r3, r2
 800dde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddf4:	d13b      	bne.n	800de6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	015a      	lsls	r2, r3, #5
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	4413      	add	r3, r2
 800de00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	7812      	ldrb	r2, [r2, #0]
 800de0a:	0151      	lsls	r1, r2, #5
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	440a      	add	r2, r1
 800de10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	7812      	ldrb	r2, [r2, #0]
 800de2e:	0151      	lsls	r1, r2, #5
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	440a      	add	r2, r1
 800de34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3301      	adds	r3, #1
 800de42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f242 7210 	movw	r2, #10000	; 0x2710
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d902      	bls.n	800de54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	75fb      	strb	r3, [r7, #23]
          break;
 800de52:	e00c      	b.n	800de6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	015a      	lsls	r2, r3, #5
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	4413      	add	r3, r2
 800de5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de6c:	d0e7      	beq.n	800de3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de70:	4618      	mov	r0, r3
 800de72:	371c      	adds	r7, #28
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b089      	sub	sp, #36	; 0x24
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	4611      	mov	r1, r2
 800de88:	461a      	mov	r2, r3
 800de8a:	460b      	mov	r3, r1
 800de8c:	71fb      	strb	r3, [r7, #7]
 800de8e:	4613      	mov	r3, r2
 800de90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800de9a:	88bb      	ldrh	r3, [r7, #4]
 800de9c:	3303      	adds	r3, #3
 800de9e:	089b      	lsrs	r3, r3, #2
 800dea0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800dea2:	2300      	movs	r3, #0
 800dea4:	61bb      	str	r3, [r7, #24]
 800dea6:	e018      	b.n	800deda <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	031a      	lsls	r2, r3, #12
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	4413      	add	r3, r2
 800deb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deb4:	461a      	mov	r2, r3
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6013      	str	r3, [r2, #0]
    pSrc++;
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	3301      	adds	r3, #1
 800dec0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	3301      	adds	r3, #1
 800dec6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	3301      	adds	r3, #1
 800decc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	3301      	adds	r3, #1
 800ded2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	3301      	adds	r3, #1
 800ded8:	61bb      	str	r3, [r7, #24]
 800deda:	69ba      	ldr	r2, [r7, #24]
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d3e2      	bcc.n	800dea8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3724      	adds	r7, #36	; 0x24
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800def0:	b480      	push	{r7}
 800def2:	b08b      	sub	sp, #44	; 0x2c
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	4613      	mov	r3, r2
 800defc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df06:	88fb      	ldrh	r3, [r7, #6]
 800df08:	089b      	lsrs	r3, r3, #2
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df0e:	88fb      	ldrh	r3, [r7, #6]
 800df10:	f003 0303 	and.w	r3, r3, #3
 800df14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df16:	2300      	movs	r3, #0
 800df18:	623b      	str	r3, [r7, #32]
 800df1a:	e014      	b.n	800df46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	601a      	str	r2, [r3, #0]
    pDest++;
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	3301      	adds	r3, #1
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	3301      	adds	r3, #1
 800df32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	3301      	adds	r3, #1
 800df38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	3301      	adds	r3, #1
 800df3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800df40:	6a3b      	ldr	r3, [r7, #32]
 800df42:	3301      	adds	r3, #1
 800df44:	623b      	str	r3, [r7, #32]
 800df46:	6a3a      	ldr	r2, [r7, #32]
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d3e6      	bcc.n	800df1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800df4e:	8bfb      	ldrh	r3, [r7, #30]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d01e      	beq.n	800df92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df5e:	461a      	mov	r2, r3
 800df60:	f107 0310 	add.w	r3, r7, #16
 800df64:	6812      	ldr	r2, [r2, #0]
 800df66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	fa22 f303 	lsr.w	r3, r2, r3
 800df74:	b2da      	uxtb	r2, r3
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	701a      	strb	r2, [r3, #0]
      i++;
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	3301      	adds	r3, #1
 800df7e:	623b      	str	r3, [r7, #32]
      pDest++;
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	3301      	adds	r3, #1
 800df84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800df86:	8bfb      	ldrh	r3, [r7, #30]
 800df88:	3b01      	subs	r3, #1
 800df8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800df8c:	8bfb      	ldrh	r3, [r7, #30]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1ea      	bne.n	800df68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df94:	4618      	mov	r0, r3
 800df96:	372c      	adds	r7, #44	; 0x2c
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	785b      	ldrb	r3, [r3, #1]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d12c      	bne.n	800e016 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	db12      	blt.n	800dff4 <USB_EPSetStall+0x54>
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00f      	beq.n	800dff4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	015a      	lsls	r2, r3, #5
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	0151      	lsls	r1, r2, #5
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	440a      	add	r2, r1
 800dfea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dff2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	015a      	lsls	r2, r3, #5
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	4413      	add	r3, r2
 800dffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	0151      	lsls	r1, r2, #5
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	440a      	add	r2, r1
 800e00a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e00e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	e02b      	b.n	800e06e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	db12      	blt.n	800e04e <USB_EPSetStall+0xae>
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00f      	beq.n	800e04e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	4413      	add	r3, r2
 800e036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	0151      	lsls	r1, r2, #5
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	440a      	add	r2, r1
 800e044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e048:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e04c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	015a      	lsls	r2, r3, #5
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	4413      	add	r3, r2
 800e056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68ba      	ldr	r2, [r7, #8]
 800e05e:	0151      	lsls	r1, r2, #5
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	440a      	add	r2, r1
 800e064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e06c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d128      	bne.n	800e0ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	0151      	lsls	r1, r2, #5
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	440a      	add	r2, r1
 800e0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e0b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	791b      	ldrb	r3, [r3, #4]
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	d003      	beq.n	800e0c8 <USB_EPClearStall+0x4c>
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	791b      	ldrb	r3, [r3, #4]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d138      	bne.n	800e13a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	015a      	lsls	r2, r3, #5
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	0151      	lsls	r1, r2, #5
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	440a      	add	r2, r1
 800e0de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0e6:	6013      	str	r3, [r2, #0]
 800e0e8:	e027      	b.n	800e13a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	015a      	lsls	r2, r3, #5
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	0151      	lsls	r1, r2, #5
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	440a      	add	r2, r1
 800e100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e104:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e108:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	791b      	ldrb	r3, [r3, #4]
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d003      	beq.n	800e11a <USB_EPClearStall+0x9e>
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	791b      	ldrb	r3, [r3, #4]
 800e116:	2b02      	cmp	r3, #2
 800e118:	d10f      	bne.n	800e13a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	015a      	lsls	r2, r3, #5
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	4413      	add	r3, r2
 800e122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	0151      	lsls	r1, r2, #5
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	440a      	add	r2, r1
 800e130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e138:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3714      	adds	r7, #20
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e166:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e16a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	78fb      	ldrb	r3, [r7, #3]
 800e176:	011b      	lsls	r3, r3, #4
 800e178:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e17c:	68f9      	ldr	r1, [r7, #12]
 800e17e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e182:	4313      	orrs	r3, r2
 800e184:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3714      	adds	r7, #20
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e194:	b480      	push	{r7}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1ae:	f023 0303 	bic.w	r3, r3, #3
 800e1b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1c2:	f023 0302 	bic.w	r3, r3, #2
 800e1c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b085      	sub	sp, #20
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1f0:	f023 0303 	bic.w	r3, r3, #3
 800e1f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e204:	f043 0302 	orr.w	r3, r3, #2
 800e208:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	4013      	ands	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e230:	68fb      	ldr	r3, [r7, #12]
}
 800e232:	4618      	mov	r0, r3
 800e234:	3714      	adds	r7, #20
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e23e:	b480      	push	{r7}
 800e240:	b085      	sub	sp, #20
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e25a:	69db      	ldr	r3, [r3, #28]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	4013      	ands	r3, r2
 800e260:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	0c1b      	lsrs	r3, r3, #16
}
 800e266:	4618      	mov	r0, r3
 800e268:	3714      	adds	r7, #20
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e272:	b480      	push	{r7}
 800e274:	b085      	sub	sp, #20
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	4013      	ands	r3, r2
 800e294:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	b29b      	uxth	r3, r3
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2a6:	b480      	push	{r7}
 800e2a8:	b085      	sub	sp, #20
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	015a      	lsls	r2, r3, #5
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b087      	sub	sp, #28
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e304:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e306:	78fb      	ldrb	r3, [r7, #3]
 800e308:	f003 030f 	and.w	r3, r3, #15
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	fa22 f303 	lsr.w	r3, r2, r3
 800e312:	01db      	lsls	r3, r3, #7
 800e314:	b2db      	uxtb	r3, r3
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	4313      	orrs	r3, r2
 800e31a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e31c:	78fb      	ldrb	r3, [r7, #3]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	4013      	ands	r3, r2
 800e32e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e330:	68bb      	ldr	r3, [r7, #8]
}
 800e332:	4618      	mov	r0, r3
 800e334:	371c      	adds	r7, #28
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e33e:	b480      	push	{r7}
 800e340:	b083      	sub	sp, #12
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	f003 0301 	and.w	r3, r3, #1
}
 800e34e:	4618      	mov	r0, r3
 800e350:	370c      	adds	r7, #12
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr

0800e35a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e35a:	b480      	push	{r7}
 800e35c:	b085      	sub	sp, #20
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e374:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e378:	f023 0307 	bic.w	r3, r3, #7
 800e37c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	333c      	adds	r3, #60	; 0x3c
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	4a1c      	ldr	r2, [pc, #112]	; (800e42c <USB_EP0_OutStart+0x8c>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d90a      	bls.n	800e3d6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3d0:	d101      	bne.n	800e3d6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e024      	b.n	800e420 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3dc:	461a      	mov	r2, r3
 800e3de:	2300      	movs	r3, #0
 800e3e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e404:	f043 0318 	orr.w	r3, r3, #24
 800e408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e418:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e41c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e41e:	2300      	movs	r3, #0
}
 800e420:	4618      	mov	r0, r3
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	4f54300a 	.word	0x4f54300a

0800e430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e438:	2300      	movs	r3, #0
 800e43a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3301      	adds	r3, #1
 800e440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	4a13      	ldr	r2, [pc, #76]	; (800e494 <USB_CoreReset+0x64>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d901      	bls.n	800e44e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e44a:	2303      	movs	r3, #3
 800e44c:	e01b      	b.n	800e486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	2b00      	cmp	r3, #0
 800e454:	daf2      	bge.n	800e43c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	f043 0201 	orr.w	r2, r3, #1
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3301      	adds	r3, #1
 800e46a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4a09      	ldr	r2, [pc, #36]	; (800e494 <USB_CoreReset+0x64>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d901      	bls.n	800e478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e474:	2303      	movs	r3, #3
 800e476:	e006      	b.n	800e486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	f003 0301 	and.w	r3, r3, #1
 800e480:	2b01      	cmp	r3, #1
 800e482:	d0f0      	beq.n	800e466 <USB_CoreReset+0x36>

  return HAL_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3714      	adds	r7, #20
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	00030d40 	.word	0x00030d40

0800e498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e4a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e4a8:	f005 f89c 	bl	80135e4 <USBD_static_malloc>
 800e4ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d105      	bne.n	800e4c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e4bc:	2302      	movs	r3, #2
 800e4be:	e066      	b.n	800e58e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	7c1b      	ldrb	r3, [r3, #16]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d119      	bne.n	800e504 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	2181      	movs	r1, #129	; 0x81
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f004 fe6f 	bl	80131bc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e4e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	2101      	movs	r1, #1
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f004 fe65 	bl	80131bc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2210      	movs	r2, #16
 800e4fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e502:	e016      	b.n	800e532 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e504:	2340      	movs	r3, #64	; 0x40
 800e506:	2202      	movs	r2, #2
 800e508:	2181      	movs	r1, #129	; 0x81
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f004 fe56 	bl	80131bc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e516:	2340      	movs	r3, #64	; 0x40
 800e518:	2202      	movs	r2, #2
 800e51a:	2101      	movs	r1, #1
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f004 fe4d 	bl	80131bc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2201      	movs	r2, #1
 800e526:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2210      	movs	r2, #16
 800e52e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e532:	2308      	movs	r3, #8
 800e534:	2203      	movs	r2, #3
 800e536:	2182      	movs	r1, #130	; 0x82
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f004 fe3f 	bl	80131bc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	7c1b      	ldrb	r3, [r3, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d109      	bne.n	800e57c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e56e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e572:	2101      	movs	r1, #1
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f004 ff9b 	bl	80134b0 <USBD_LL_PrepareReceive>
 800e57a:	e007      	b.n	800e58c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e582:	2340      	movs	r3, #64	; 0x40
 800e584:	2101      	movs	r1, #1
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f004 ff92 	bl	80134b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e5a2:	2181      	movs	r1, #129	; 0x81
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f004 fe47 	bl	8013238 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f004 fe40 	bl	8013238 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e5c0:	2182      	movs	r1, #130	; 0x82
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f004 fe38 	bl	8013238 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00e      	beq.n	800e600 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f005 f804 	bl	8013600 <USBD_static_free>
    pdev->pClassData = NULL;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b086      	sub	sp, #24
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e61c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e61e:	2300      	movs	r3, #0
 800e620:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e626:	2300      	movs	r3, #0
 800e628:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d101      	bne.n	800e634 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e630:	2303      	movs	r3, #3
 800e632:	e0af      	b.n	800e794 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d03f      	beq.n	800e6c0 <USBD_CDC_Setup+0xb4>
 800e640:	2b20      	cmp	r3, #32
 800e642:	f040 809f 	bne.w	800e784 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	88db      	ldrh	r3, [r3, #6]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d02e      	beq.n	800e6ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	b25b      	sxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	da16      	bge.n	800e686 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e664:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e666:	683a      	ldr	r2, [r7, #0]
 800e668:	88d2      	ldrh	r2, [r2, #6]
 800e66a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	88db      	ldrh	r3, [r3, #6]
 800e670:	2b07      	cmp	r3, #7
 800e672:	bf28      	it	cs
 800e674:	2307      	movcs	r3, #7
 800e676:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	89fa      	ldrh	r2, [r7, #14]
 800e67c:	4619      	mov	r1, r3
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f001 fb43 	bl	800fd0a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e684:	e085      	b.n	800e792 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	785a      	ldrb	r2, [r3, #1]
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	88db      	ldrh	r3, [r3, #6]
 800e694:	b2da      	uxtb	r2, r3
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e69c:	6939      	ldr	r1, [r7, #16]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	88db      	ldrh	r3, [r3, #6]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f001 fb5c 	bl	800fd62 <USBD_CtlPrepareRx>
      break;
 800e6aa:	e072      	b.n	800e792 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	7850      	ldrb	r0, [r2, #1]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	4798      	blx	r3
      break;
 800e6be:	e068      	b.n	800e792 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	2b0b      	cmp	r3, #11
 800e6c6:	d852      	bhi.n	800e76e <USBD_CDC_Setup+0x162>
 800e6c8:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <USBD_CDC_Setup+0xc4>)
 800e6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ce:	bf00      	nop
 800e6d0:	0800e701 	.word	0x0800e701
 800e6d4:	0800e77d 	.word	0x0800e77d
 800e6d8:	0800e76f 	.word	0x0800e76f
 800e6dc:	0800e76f 	.word	0x0800e76f
 800e6e0:	0800e76f 	.word	0x0800e76f
 800e6e4:	0800e76f 	.word	0x0800e76f
 800e6e8:	0800e76f 	.word	0x0800e76f
 800e6ec:	0800e76f 	.word	0x0800e76f
 800e6f0:	0800e76f 	.word	0x0800e76f
 800e6f4:	0800e76f 	.word	0x0800e76f
 800e6f8:	0800e72b 	.word	0x0800e72b
 800e6fc:	0800e755 	.word	0x0800e755
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e706:	b2db      	uxtb	r3, r3
 800e708:	2b03      	cmp	r3, #3
 800e70a:	d107      	bne.n	800e71c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e70c:	f107 030a 	add.w	r3, r7, #10
 800e710:	2202      	movs	r2, #2
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f001 faf8 	bl	800fd0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e71a:	e032      	b.n	800e782 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f001 fa82 	bl	800fc28 <USBD_CtlError>
            ret = USBD_FAIL;
 800e724:	2303      	movs	r3, #3
 800e726:	75fb      	strb	r3, [r7, #23]
          break;
 800e728:	e02b      	b.n	800e782 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b03      	cmp	r3, #3
 800e734:	d107      	bne.n	800e746 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e736:	f107 030d 	add.w	r3, r7, #13
 800e73a:	2201      	movs	r2, #1
 800e73c:	4619      	mov	r1, r3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f001 fae3 	bl	800fd0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e744:	e01d      	b.n	800e782 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e746:	6839      	ldr	r1, [r7, #0]
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f001 fa6d 	bl	800fc28 <USBD_CtlError>
            ret = USBD_FAIL;
 800e74e:	2303      	movs	r3, #3
 800e750:	75fb      	strb	r3, [r7, #23]
          break;
 800e752:	e016      	b.n	800e782 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	d00f      	beq.n	800e780 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e760:	6839      	ldr	r1, [r7, #0]
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f001 fa60 	bl	800fc28 <USBD_CtlError>
            ret = USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e76c:	e008      	b.n	800e780 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f001 fa59 	bl	800fc28 <USBD_CtlError>
          ret = USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	75fb      	strb	r3, [r7, #23]
          break;
 800e77a:	e002      	b.n	800e782 <USBD_CDC_Setup+0x176>
          break;
 800e77c:	bf00      	nop
 800e77e:	e008      	b.n	800e792 <USBD_CDC_Setup+0x186>
          break;
 800e780:	bf00      	nop
      }
      break;
 800e782:	e006      	b.n	800e792 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f001 fa4e 	bl	800fc28 <USBD_CtlError>
      ret = USBD_FAIL;
 800e78c:	2303      	movs	r3, #3
 800e78e:	75fb      	strb	r3, [r7, #23]
      break;
 800e790:	bf00      	nop
  }

  return (uint8_t)ret;
 800e792:	7dfb      	ldrb	r3, [r7, #23]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e7ba:	2303      	movs	r3, #3
 800e7bc:	e04f      	b.n	800e85e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e7c6:	78fa      	ldrb	r2, [r7, #3]
 800e7c8:	6879      	ldr	r1, [r7, #4]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4413      	add	r3, r2
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	440b      	add	r3, r1
 800e7d4:	3318      	adds	r3, #24
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d029      	beq.n	800e830 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e7dc:	78fa      	ldrb	r2, [r7, #3]
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	4413      	add	r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	440b      	add	r3, r1
 800e7ea:	3318      	adds	r3, #24
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	78f9      	ldrb	r1, [r7, #3]
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	440b      	add	r3, r1
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4403      	add	r3, r0
 800e7fc:	3348      	adds	r3, #72	; 0x48
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	fbb2 f1f3 	udiv	r1, r2, r3
 800e804:	fb01 f303 	mul.w	r3, r1, r3
 800e808:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d110      	bne.n	800e830 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e80e:	78fa      	ldrb	r2, [r7, #3]
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	4613      	mov	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	4413      	add	r3, r2
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	440b      	add	r3, r1
 800e81c:	3318      	adds	r3, #24
 800e81e:	2200      	movs	r2, #0
 800e820:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e822:	78f9      	ldrb	r1, [r7, #3]
 800e824:	2300      	movs	r3, #0
 800e826:	2200      	movs	r2, #0
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f004 fe09 	bl	8013440 <USBD_LL_Transmit>
 800e82e:	e015      	b.n	800e85c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2200      	movs	r2, #0
 800e834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00b      	beq.n	800e85c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e858:	78fa      	ldrb	r2, [r7, #3]
 800e85a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e866:	b580      	push	{r7, lr}
 800e868:	b084      	sub	sp, #16
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	460b      	mov	r3, r1
 800e870:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e878:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e884:	2303      	movs	r3, #3
 800e886:	e015      	b.n	800e8b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e888:	78fb      	ldrb	r3, [r7, #3]
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f004 fe47 	bl	8013520 <USBD_LL_GetRxDataSize>
 800e892:	4602      	mov	r2, r0
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	e01b      	b.n	800e90e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d015      	beq.n	800e90c <USBD_CDC_EP0_RxReady+0x50>
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e8e6:	2bff      	cmp	r3, #255	; 0xff
 800e8e8:	d010      	beq.n	800e90c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e8f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e900:	b292      	uxth	r2, r2
 800e902:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	22ff      	movs	r2, #255	; 0xff
 800e908:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
	...

0800e918 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2243      	movs	r2, #67	; 0x43
 800e924:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e926:	4b03      	ldr	r3, [pc, #12]	; (800e934 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e928:	4618      	mov	r0, r3
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr
 800e934:	200002b8 	.word	0x200002b8

0800e938 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2243      	movs	r2, #67	; 0x43
 800e944:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e946:	4b03      	ldr	r3, [pc, #12]	; (800e954 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	20000274 	.word	0x20000274

0800e958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2243      	movs	r2, #67	; 0x43
 800e964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e966:	4b03      	ldr	r3, [pc, #12]	; (800e974 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e968:	4618      	mov	r0, r3
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	200002fc 	.word	0x200002fc

0800e978 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	220a      	movs	r2, #10
 800e984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e986:	4b03      	ldr	r3, [pc, #12]	; (800e994 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e988:	4618      	mov	r0, r3
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	20000230 	.word	0x20000230

0800e998 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	e004      	b.n	800e9b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	683a      	ldr	r2, [r7, #0]
 800e9b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	b087      	sub	sp, #28
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	60f8      	str	r0, [r7, #12]
 800e9ca:	60b9      	str	r1, [r7, #8]
 800e9cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	e008      	b.n	800e9f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	371c      	adds	r7, #28
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	b085      	sub	sp, #20
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
 800ea06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e004      	b.n	800ea24 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ea40:	2301      	movs	r3, #1
 800ea42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	e01a      	b.n	800ea88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d114      	bne.n	800ea86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ea7a:	2181      	movs	r1, #129	; 0x81
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f004 fcdf 	bl	8013440 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d101      	bne.n	800eaae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	e016      	b.n	800eadc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7c1b      	ldrb	r3, [r3, #16]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d109      	bne.n	800eaca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eabc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eac0:	2101      	movs	r1, #1
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f004 fcf4 	bl	80134b0 <USBD_LL_PrepareReceive>
 800eac8:	e007      	b.n	800eada <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ead0:	2340      	movs	r3, #64	; 0x40
 800ead2:	2101      	movs	r1, #1
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f004 fceb 	bl	80134b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	4613      	mov	r3, r2
 800eaf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d101      	bne.n	800eafc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	e01f      	b.n	800eb3c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68ba      	ldr	r2, [r7, #8]
 800eb1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2201      	movs	r2, #1
 800eb26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	79fa      	ldrb	r2, [r7, #7]
 800eb2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f004 fac7 	bl	80130c4 <USBD_LL_Init>
 800eb36:	4603      	mov	r3, r0
 800eb38:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3718      	adds	r7, #24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e016      	b.n	800eb8a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00b      	beq.n	800eb88 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb78:	f107 020e 	add.w	r2, r7, #14
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	4798      	blx	r3
 800eb80:	4602      	mov	r2, r0
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f004 fadc 	bl	8013158 <USBD_LL_Start>
 800eba0:	4603      	mov	r3, r0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ebaa:	b480      	push	{r7}
 800ebac:	b083      	sub	sp, #12
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ebcc:	2303      	movs	r3, #3
 800ebce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d009      	beq.n	800ebee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	78fa      	ldrb	r2, [r7, #3]
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	4798      	blx	r3
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	78fa      	ldrb	r2, [r7, #3]
 800ec18:	4611      	mov	r1, r2
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	4798      	blx	r3
  }

  return USBD_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 ffba 	bl	800fbb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec4e:	461a      	mov	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec5c:	f003 031f 	and.w	r3, r3, #31
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d01a      	beq.n	800ec9a <USBD_LL_SetupStage+0x72>
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d822      	bhi.n	800ecae <USBD_LL_SetupStage+0x86>
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <USBD_LL_SetupStage+0x4a>
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d00a      	beq.n	800ec86 <USBD_LL_SetupStage+0x5e>
 800ec70:	e01d      	b.n	800ecae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec78:	4619      	mov	r1, r3
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fa62 	bl	800f144 <USBD_StdDevReq>
 800ec80:	4603      	mov	r3, r0
 800ec82:	73fb      	strb	r3, [r7, #15]
      break;
 800ec84:	e020      	b.n	800ecc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 fac6 	bl	800f220 <USBD_StdItfReq>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73fb      	strb	r3, [r7, #15]
      break;
 800ec98:	e016      	b.n	800ecc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eca0:	4619      	mov	r1, r3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 fb05 	bl	800f2b2 <USBD_StdEPReq>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ecac:	e00c      	b.n	800ecc8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f004 faf1 	bl	80132a4 <USBD_LL_StallEP>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc6:	bf00      	nop
  }

  return ret;
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b086      	sub	sp, #24
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	60f8      	str	r0, [r7, #12]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	607a      	str	r2, [r7, #4]
 800ecde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ece0:	7afb      	ldrb	r3, [r7, #11]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d138      	bne.n	800ed58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ecec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ecf4:	2b03      	cmp	r3, #3
 800ecf6:	d14a      	bne.n	800ed8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	689a      	ldr	r2, [r3, #8]
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d913      	bls.n	800ed2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	689a      	ldr	r2, [r3, #8]
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	1ad2      	subs	r2, r2, r3
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	68da      	ldr	r2, [r3, #12]
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	bf28      	it	cs
 800ed1e:	4613      	movcs	r3, r2
 800ed20:	461a      	mov	r2, r3
 800ed22:	6879      	ldr	r1, [r7, #4]
 800ed24:	68f8      	ldr	r0, [r7, #12]
 800ed26:	f001 f839 	bl	800fd9c <USBD_CtlContinueRx>
 800ed2a:	e030      	b.n	800ed8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b03      	cmp	r3, #3
 800ed36:	d10b      	bne.n	800ed50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d005      	beq.n	800ed50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f001 f834 	bl	800fdbe <USBD_CtlSendStatus>
 800ed56:	e01a      	b.n	800ed8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	2b03      	cmp	r3, #3
 800ed62:	d114      	bne.n	800ed8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed6a:	699b      	ldr	r3, [r3, #24]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00e      	beq.n	800ed8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	7afa      	ldrb	r2, [r7, #11]
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	4798      	blx	r3
 800ed80:	4603      	mov	r3, r0
 800ed82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
 800ed8c:	e000      	b.n	800ed90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3718      	adds	r7, #24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b086      	sub	sp, #24
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	460b      	mov	r3, r1
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eda6:	7afb      	ldrb	r3, [r7, #11]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d16b      	bne.n	800ee84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	3314      	adds	r3, #20
 800edb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d156      	bne.n	800ee6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d914      	bls.n	800edf2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	689a      	ldr	r2, [r3, #8]
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	1ad2      	subs	r2, r2, r3
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	461a      	mov	r2, r3
 800eddc:	6879      	ldr	r1, [r7, #4]
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f000 ffae 	bl	800fd40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ede4:	2300      	movs	r3, #0
 800ede6:	2200      	movs	r2, #0
 800ede8:	2100      	movs	r1, #0
 800edea:	68f8      	ldr	r0, [r7, #12]
 800edec:	f004 fb60 	bl	80134b0 <USBD_LL_PrepareReceive>
 800edf0:	e03b      	b.n	800ee6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	68da      	ldr	r2, [r3, #12]
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d11c      	bne.n	800ee38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d316      	bcc.n	800ee38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d20f      	bcs.n	800ee38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 ff8f 	bl	800fd40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	2100      	movs	r1, #0
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f004 fb3d 	bl	80134b0 <USBD_LL_PrepareReceive>
 800ee36:	e018      	b.n	800ee6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b03      	cmp	r3, #3
 800ee42:	d10b      	bne.n	800ee5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d005      	beq.n	800ee5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee5c:	2180      	movs	r1, #128	; 0x80
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f004 fa20 	bl	80132a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f000 ffbd 	bl	800fde4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d122      	bne.n	800eeba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7ff fe98 	bl	800ebaa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee82:	e01a      	b.n	800eeba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d114      	bne.n	800eeba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00e      	beq.n	800eeba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	7afa      	ldrb	r2, [r7, #11]
 800eea6:	4611      	mov	r1, r2
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	4798      	blx	r3
 800eeac:	4603      	mov	r3, r0
 800eeae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eeb0:	7dfb      	ldrb	r3, [r7, #23]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800eeb6:	7dfb      	ldrb	r3, [r7, #23]
 800eeb8:	e000      	b.n	800eebc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800eeba:	2300      	movs	r3, #0
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3718      	adds	r7, #24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d101      	bne.n	800eef8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800eef4:	2303      	movs	r3, #3
 800eef6:	e02f      	b.n	800ef58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00f      	beq.n	800ef22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d009      	beq.n	800ef22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	6852      	ldr	r2, [r2, #4]
 800ef1a:	b2d2      	uxtb	r2, r2
 800ef1c:	4611      	mov	r1, r2
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef22:	2340      	movs	r3, #64	; 0x40
 800ef24:	2200      	movs	r2, #0
 800ef26:	2100      	movs	r1, #0
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f004 f947 	bl	80131bc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2201      	movs	r2, #1
 800ef32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2240      	movs	r2, #64	; 0x40
 800ef3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef3e:	2340      	movs	r3, #64	; 0x40
 800ef40:	2200      	movs	r2, #0
 800ef42:	2180      	movs	r1, #128	; 0x80
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f004 f939 	bl	80131bc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2240      	movs	r2, #64	; 0x40
 800ef54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	78fa      	ldrb	r2, [r7, #3]
 800ef70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2204      	movs	r2, #4
 800ef9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	2b04      	cmp	r3, #4
 800efbe:	d106      	bne.n	800efce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800efee:	2303      	movs	r3, #3
 800eff0:	e012      	b.n	800f018 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b03      	cmp	r3, #3
 800effc:	d10b      	bne.n	800f016 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f004:	69db      	ldr	r3, [r3, #28]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d005      	beq.n	800f016 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f010:	69db      	ldr	r3, [r3, #28]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	460b      	mov	r3, r1
 800f02a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f036:	2303      	movs	r3, #3
 800f038:	e014      	b.n	800f064 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b03      	cmp	r3, #3
 800f044:	d10d      	bne.n	800f062 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d007      	beq.n	800f062 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f058:	6a1b      	ldr	r3, [r3, #32]
 800f05a:	78fa      	ldrb	r2, [r7, #3]
 800f05c:	4611      	mov	r1, r2
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f082:	2303      	movs	r3, #3
 800f084:	e014      	b.n	800f0b0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	2b03      	cmp	r3, #3
 800f090:	d10d      	bne.n	800f0ae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d007      	beq.n	800f0ae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a6:	78fa      	ldrb	r2, [r7, #3]
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0ae:	2300      	movs	r3, #0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	370c      	adds	r7, #12
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr

0800f0ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d009      	beq.n	800f0fc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	6852      	ldr	r2, [r2, #4]
 800f0f4:	b2d2      	uxtb	r2, r2
 800f0f6:	4611      	mov	r1, r2
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	4798      	blx	r3
  }

  return USBD_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f106:	b480      	push	{r7}
 800f108:	b087      	sub	sp, #28
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	3301      	adds	r3, #1
 800f11c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f124:	8a3b      	ldrh	r3, [r7, #16]
 800f126:	021b      	lsls	r3, r3, #8
 800f128:	b21a      	sxth	r2, r3
 800f12a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f12e:	4313      	orrs	r3, r2
 800f130:	b21b      	sxth	r3, r3
 800f132:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f134:	89fb      	ldrh	r3, [r7, #14]
}
 800f136:	4618      	mov	r0, r3
 800f138:	371c      	adds	r7, #28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
	...

0800f144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f15a:	2b40      	cmp	r3, #64	; 0x40
 800f15c:	d005      	beq.n	800f16a <USBD_StdDevReq+0x26>
 800f15e:	2b40      	cmp	r3, #64	; 0x40
 800f160:	d853      	bhi.n	800f20a <USBD_StdDevReq+0xc6>
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00b      	beq.n	800f17e <USBD_StdDevReq+0x3a>
 800f166:	2b20      	cmp	r3, #32
 800f168:	d14f      	bne.n	800f20a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	4798      	blx	r3
 800f178:	4603      	mov	r3, r0
 800f17a:	73fb      	strb	r3, [r7, #15]
      break;
 800f17c:	e04a      	b.n	800f214 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	785b      	ldrb	r3, [r3, #1]
 800f182:	2b09      	cmp	r3, #9
 800f184:	d83b      	bhi.n	800f1fe <USBD_StdDevReq+0xba>
 800f186:	a201      	add	r2, pc, #4	; (adr r2, 800f18c <USBD_StdDevReq+0x48>)
 800f188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18c:	0800f1e1 	.word	0x0800f1e1
 800f190:	0800f1f5 	.word	0x0800f1f5
 800f194:	0800f1ff 	.word	0x0800f1ff
 800f198:	0800f1eb 	.word	0x0800f1eb
 800f19c:	0800f1ff 	.word	0x0800f1ff
 800f1a0:	0800f1bf 	.word	0x0800f1bf
 800f1a4:	0800f1b5 	.word	0x0800f1b5
 800f1a8:	0800f1ff 	.word	0x0800f1ff
 800f1ac:	0800f1d7 	.word	0x0800f1d7
 800f1b0:	0800f1c9 	.word	0x0800f1c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1b4:	6839      	ldr	r1, [r7, #0]
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 f9de 	bl	800f578 <USBD_GetDescriptor>
          break;
 800f1bc:	e024      	b.n	800f208 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1be:	6839      	ldr	r1, [r7, #0]
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 fb6d 	bl	800f8a0 <USBD_SetAddress>
          break;
 800f1c6:	e01f      	b.n	800f208 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1c8:	6839      	ldr	r1, [r7, #0]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fbac 	bl	800f928 <USBD_SetConfig>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]
          break;
 800f1d4:	e018      	b.n	800f208 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1d6:	6839      	ldr	r1, [r7, #0]
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fc4b 	bl	800fa74 <USBD_GetConfig>
          break;
 800f1de:	e013      	b.n	800f208 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fc7c 	bl	800fae0 <USBD_GetStatus>
          break;
 800f1e8:	e00e      	b.n	800f208 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 fcab 	bl	800fb48 <USBD_SetFeature>
          break;
 800f1f2:	e009      	b.n	800f208 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f1f4:	6839      	ldr	r1, [r7, #0]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fcba 	bl	800fb70 <USBD_ClrFeature>
          break;
 800f1fc:	e004      	b.n	800f208 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fd11 	bl	800fc28 <USBD_CtlError>
          break;
 800f206:	bf00      	nop
      }
      break;
 800f208:	e004      	b.n	800f214 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f20a:	6839      	ldr	r1, [r7, #0]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fd0b 	bl	800fc28 <USBD_CtlError>
      break;
 800f212:	bf00      	nop
  }

  return ret;
 800f214:	7bfb      	ldrb	r3, [r7, #15]
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop

0800f220 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f22a:	2300      	movs	r3, #0
 800f22c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f236:	2b40      	cmp	r3, #64	; 0x40
 800f238:	d005      	beq.n	800f246 <USBD_StdItfReq+0x26>
 800f23a:	2b40      	cmp	r3, #64	; 0x40
 800f23c:	d82f      	bhi.n	800f29e <USBD_StdItfReq+0x7e>
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <USBD_StdItfReq+0x26>
 800f242:	2b20      	cmp	r3, #32
 800f244:	d12b      	bne.n	800f29e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	3b01      	subs	r3, #1
 800f250:	2b02      	cmp	r3, #2
 800f252:	d81d      	bhi.n	800f290 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	889b      	ldrh	r3, [r3, #4]
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d813      	bhi.n	800f286 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	4798      	blx	r3
 800f26c:	4603      	mov	r3, r0
 800f26e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	88db      	ldrh	r3, [r3, #6]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d110      	bne.n	800f29a <USBD_StdItfReq+0x7a>
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10d      	bne.n	800f29a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fd9d 	bl	800fdbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f284:	e009      	b.n	800f29a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fccd 	bl	800fc28 <USBD_CtlError>
          break;
 800f28e:	e004      	b.n	800f29a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fcc8 	bl	800fc28 <USBD_CtlError>
          break;
 800f298:	e000      	b.n	800f29c <USBD_StdItfReq+0x7c>
          break;
 800f29a:	bf00      	nop
      }
      break;
 800f29c:	e004      	b.n	800f2a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 fcc1 	bl	800fc28 <USBD_CtlError>
      break;
 800f2a6:	bf00      	nop
  }

  return ret;
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b084      	sub	sp, #16
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
 800f2ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	889b      	ldrh	r3, [r3, #4]
 800f2c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2ce:	2b40      	cmp	r3, #64	; 0x40
 800f2d0:	d007      	beq.n	800f2e2 <USBD_StdEPReq+0x30>
 800f2d2:	2b40      	cmp	r3, #64	; 0x40
 800f2d4:	f200 8145 	bhi.w	800f562 <USBD_StdEPReq+0x2b0>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00c      	beq.n	800f2f6 <USBD_StdEPReq+0x44>
 800f2dc:	2b20      	cmp	r3, #32
 800f2de:	f040 8140 	bne.w	800f562 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	4798      	blx	r3
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f2f4:	e13a      	b.n	800f56c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	785b      	ldrb	r3, [r3, #1]
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	d007      	beq.n	800f30e <USBD_StdEPReq+0x5c>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	f300 8129 	bgt.w	800f556 <USBD_StdEPReq+0x2a4>
 800f304:	2b00      	cmp	r3, #0
 800f306:	d07f      	beq.n	800f408 <USBD_StdEPReq+0x156>
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d03c      	beq.n	800f386 <USBD_StdEPReq+0xd4>
 800f30c:	e123      	b.n	800f556 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b02      	cmp	r3, #2
 800f318:	d002      	beq.n	800f320 <USBD_StdEPReq+0x6e>
 800f31a:	2b03      	cmp	r3, #3
 800f31c:	d016      	beq.n	800f34c <USBD_StdEPReq+0x9a>
 800f31e:	e02c      	b.n	800f37a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f320:	7bbb      	ldrb	r3, [r7, #14]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00d      	beq.n	800f342 <USBD_StdEPReq+0x90>
 800f326:	7bbb      	ldrb	r3, [r7, #14]
 800f328:	2b80      	cmp	r3, #128	; 0x80
 800f32a:	d00a      	beq.n	800f342 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f32c:	7bbb      	ldrb	r3, [r7, #14]
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f003 ffb7 	bl	80132a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f336:	2180      	movs	r1, #128	; 0x80
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f003 ffb3 	bl	80132a4 <USBD_LL_StallEP>
 800f33e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f340:	e020      	b.n	800f384 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fc6f 	bl	800fc28 <USBD_CtlError>
              break;
 800f34a:	e01b      	b.n	800f384 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	885b      	ldrh	r3, [r3, #2]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10e      	bne.n	800f372 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00b      	beq.n	800f372 <USBD_StdEPReq+0xc0>
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
 800f35c:	2b80      	cmp	r3, #128	; 0x80
 800f35e:	d008      	beq.n	800f372 <USBD_StdEPReq+0xc0>
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	88db      	ldrh	r3, [r3, #6]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d104      	bne.n	800f372 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f368:	7bbb      	ldrb	r3, [r7, #14]
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f003 ff99 	bl	80132a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fd23 	bl	800fdbe <USBD_CtlSendStatus>

              break;
 800f378:	e004      	b.n	800f384 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 fc53 	bl	800fc28 <USBD_CtlError>
              break;
 800f382:	bf00      	nop
          }
          break;
 800f384:	e0ec      	b.n	800f560 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	2b02      	cmp	r3, #2
 800f390:	d002      	beq.n	800f398 <USBD_StdEPReq+0xe6>
 800f392:	2b03      	cmp	r3, #3
 800f394:	d016      	beq.n	800f3c4 <USBD_StdEPReq+0x112>
 800f396:	e030      	b.n	800f3fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f398:	7bbb      	ldrb	r3, [r7, #14]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00d      	beq.n	800f3ba <USBD_StdEPReq+0x108>
 800f39e:	7bbb      	ldrb	r3, [r7, #14]
 800f3a0:	2b80      	cmp	r3, #128	; 0x80
 800f3a2:	d00a      	beq.n	800f3ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f003 ff7b 	bl	80132a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3ae:	2180      	movs	r1, #128	; 0x80
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f003 ff77 	bl	80132a4 <USBD_LL_StallEP>
 800f3b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3b8:	e025      	b.n	800f406 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f3ba:	6839      	ldr	r1, [r7, #0]
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fc33 	bl	800fc28 <USBD_CtlError>
              break;
 800f3c2:	e020      	b.n	800f406 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	885b      	ldrh	r3, [r3, #2]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d11b      	bne.n	800f404 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3d6:	7bbb      	ldrb	r3, [r7, #14]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f003 ff98 	bl	8013310 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fcec 	bl	800fdbe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	6839      	ldr	r1, [r7, #0]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	4798      	blx	r3
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f3f8:	e004      	b.n	800f404 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f3fa:	6839      	ldr	r1, [r7, #0]
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fc13 	bl	800fc28 <USBD_CtlError>
              break;
 800f402:	e000      	b.n	800f406 <USBD_StdEPReq+0x154>
              break;
 800f404:	bf00      	nop
          }
          break;
 800f406:	e0ab      	b.n	800f560 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	2b02      	cmp	r3, #2
 800f412:	d002      	beq.n	800f41a <USBD_StdEPReq+0x168>
 800f414:	2b03      	cmp	r3, #3
 800f416:	d032      	beq.n	800f47e <USBD_StdEPReq+0x1cc>
 800f418:	e097      	b.n	800f54a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f41a:	7bbb      	ldrb	r3, [r7, #14]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d007      	beq.n	800f430 <USBD_StdEPReq+0x17e>
 800f420:	7bbb      	ldrb	r3, [r7, #14]
 800f422:	2b80      	cmp	r3, #128	; 0x80
 800f424:	d004      	beq.n	800f430 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fbfd 	bl	800fc28 <USBD_CtlError>
                break;
 800f42e:	e091      	b.n	800f554 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f434:	2b00      	cmp	r3, #0
 800f436:	da0b      	bge.n	800f450 <USBD_StdEPReq+0x19e>
 800f438:	7bbb      	ldrb	r3, [r7, #14]
 800f43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f43e:	4613      	mov	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4413      	add	r3, r2
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	3310      	adds	r3, #16
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	4413      	add	r3, r2
 800f44c:	3304      	adds	r3, #4
 800f44e:	e00b      	b.n	800f468 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f450:	7bbb      	ldrb	r3, [r7, #14]
 800f452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f456:	4613      	mov	r3, r2
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	4413      	add	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	4413      	add	r3, r2
 800f466:	3304      	adds	r3, #4
 800f468:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2202      	movs	r2, #2
 800f474:	4619      	mov	r1, r3
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 fc47 	bl	800fd0a <USBD_CtlSendData>
              break;
 800f47c:	e06a      	b.n	800f554 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f47e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f482:	2b00      	cmp	r3, #0
 800f484:	da11      	bge.n	800f4aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	f003 020f 	and.w	r2, r3, #15
 800f48c:	6879      	ldr	r1, [r7, #4]
 800f48e:	4613      	mov	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4413      	add	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	440b      	add	r3, r1
 800f498:	3324      	adds	r3, #36	; 0x24
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d117      	bne.n	800f4d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 fbc0 	bl	800fc28 <USBD_CtlError>
                  break;
 800f4a8:	e054      	b.n	800f554 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4aa:	7bbb      	ldrb	r3, [r7, #14]
 800f4ac:	f003 020f 	and.w	r2, r3, #15
 800f4b0:	6879      	ldr	r1, [r7, #4]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	4413      	add	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	440b      	add	r3, r1
 800f4bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d104      	bne.n	800f4d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fbad 	bl	800fc28 <USBD_CtlError>
                  break;
 800f4ce:	e041      	b.n	800f554 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	da0b      	bge.n	800f4f0 <USBD_StdEPReq+0x23e>
 800f4d8:	7bbb      	ldrb	r3, [r7, #14]
 800f4da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4de:	4613      	mov	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	4413      	add	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	3310      	adds	r3, #16
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	e00b      	b.n	800f508 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4f0:	7bbb      	ldrb	r3, [r7, #14]
 800f4f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4413      	add	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	4413      	add	r3, r2
 800f506:	3304      	adds	r3, #4
 800f508:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d002      	beq.n	800f516 <USBD_StdEPReq+0x264>
 800f510:	7bbb      	ldrb	r3, [r7, #14]
 800f512:	2b80      	cmp	r3, #128	; 0x80
 800f514:	d103      	bne.n	800f51e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2200      	movs	r2, #0
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	e00e      	b.n	800f53c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	4619      	mov	r1, r3
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f003 ff2a 	bl	801337c <USBD_LL_IsStallEP>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d003      	beq.n	800f536 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2201      	movs	r2, #1
 800f532:	601a      	str	r2, [r3, #0]
 800f534:	e002      	b.n	800f53c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2200      	movs	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2202      	movs	r2, #2
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fbe1 	bl	800fd0a <USBD_CtlSendData>
              break;
 800f548:	e004      	b.n	800f554 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fb6b 	bl	800fc28 <USBD_CtlError>
              break;
 800f552:	bf00      	nop
          }
          break;
 800f554:	e004      	b.n	800f560 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f556:	6839      	ldr	r1, [r7, #0]
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 fb65 	bl	800fc28 <USBD_CtlError>
          break;
 800f55e:	bf00      	nop
      }
      break;
 800f560:	e004      	b.n	800f56c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f562:	6839      	ldr	r1, [r7, #0]
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 fb5f 	bl	800fc28 <USBD_CtlError>
      break;
 800f56a:	bf00      	nop
  }

  return ret;
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
	...

0800f578 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f582:	2300      	movs	r3, #0
 800f584:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f58a:	2300      	movs	r3, #0
 800f58c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	885b      	ldrh	r3, [r3, #2]
 800f592:	0a1b      	lsrs	r3, r3, #8
 800f594:	b29b      	uxth	r3, r3
 800f596:	3b01      	subs	r3, #1
 800f598:	2b0e      	cmp	r3, #14
 800f59a:	f200 8152 	bhi.w	800f842 <USBD_GetDescriptor+0x2ca>
 800f59e:	a201      	add	r2, pc, #4	; (adr r2, 800f5a4 <USBD_GetDescriptor+0x2c>)
 800f5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a4:	0800f615 	.word	0x0800f615
 800f5a8:	0800f62d 	.word	0x0800f62d
 800f5ac:	0800f66d 	.word	0x0800f66d
 800f5b0:	0800f843 	.word	0x0800f843
 800f5b4:	0800f843 	.word	0x0800f843
 800f5b8:	0800f7e3 	.word	0x0800f7e3
 800f5bc:	0800f80f 	.word	0x0800f80f
 800f5c0:	0800f843 	.word	0x0800f843
 800f5c4:	0800f843 	.word	0x0800f843
 800f5c8:	0800f843 	.word	0x0800f843
 800f5cc:	0800f843 	.word	0x0800f843
 800f5d0:	0800f843 	.word	0x0800f843
 800f5d4:	0800f843 	.word	0x0800f843
 800f5d8:	0800f843 	.word	0x0800f843
 800f5dc:	0800f5e1 	.word	0x0800f5e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00b      	beq.n	800f604 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5f2:	69db      	ldr	r3, [r3, #28]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	7c12      	ldrb	r2, [r2, #16]
 800f5f8:	f107 0108 	add.w	r1, r7, #8
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	4798      	blx	r3
 800f600:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f602:	e126      	b.n	800f852 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 fb0e 	bl	800fc28 <USBD_CtlError>
        err++;
 800f60c:	7afb      	ldrb	r3, [r7, #11]
 800f60e:	3301      	adds	r3, #1
 800f610:	72fb      	strb	r3, [r7, #11]
      break;
 800f612:	e11e      	b.n	800f852 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	7c12      	ldrb	r2, [r2, #16]
 800f620:	f107 0108 	add.w	r1, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
      break;
 800f62a:	e112      	b.n	800f852 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	7c1b      	ldrb	r3, [r3, #16]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d10d      	bne.n	800f650 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f63c:	f107 0208 	add.w	r2, r7, #8
 800f640:	4610      	mov	r0, r2
 800f642:	4798      	blx	r3
 800f644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	3301      	adds	r3, #1
 800f64a:	2202      	movs	r2, #2
 800f64c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f64e:	e100      	b.n	800f852 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f658:	f107 0208 	add.w	r2, r7, #8
 800f65c:	4610      	mov	r0, r2
 800f65e:	4798      	blx	r3
 800f660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	3301      	adds	r3, #1
 800f666:	2202      	movs	r2, #2
 800f668:	701a      	strb	r2, [r3, #0]
      break;
 800f66a:	e0f2      	b.n	800f852 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	885b      	ldrh	r3, [r3, #2]
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b05      	cmp	r3, #5
 800f674:	f200 80ac 	bhi.w	800f7d0 <USBD_GetDescriptor+0x258>
 800f678:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <USBD_GetDescriptor+0x108>)
 800f67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f67e:	bf00      	nop
 800f680:	0800f699 	.word	0x0800f699
 800f684:	0800f6cd 	.word	0x0800f6cd
 800f688:	0800f701 	.word	0x0800f701
 800f68c:	0800f735 	.word	0x0800f735
 800f690:	0800f769 	.word	0x0800f769
 800f694:	0800f79d 	.word	0x0800f79d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00b      	beq.n	800f6bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	7c12      	ldrb	r2, [r2, #16]
 800f6b0:	f107 0108 	add.w	r1, r7, #8
 800f6b4:	4610      	mov	r0, r2
 800f6b6:	4798      	blx	r3
 800f6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ba:	e091      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 fab2 	bl	800fc28 <USBD_CtlError>
            err++;
 800f6c4:	7afb      	ldrb	r3, [r7, #11]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ca:	e089      	b.n	800f7e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00b      	beq.n	800f6f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	7c12      	ldrb	r2, [r2, #16]
 800f6e4:	f107 0108 	add.w	r1, r7, #8
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	4798      	blx	r3
 800f6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ee:	e077      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6f0:	6839      	ldr	r1, [r7, #0]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 fa98 	bl	800fc28 <USBD_CtlError>
            err++;
 800f6f8:	7afb      	ldrb	r3, [r7, #11]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f6fe:	e06f      	b.n	800f7e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00b      	beq.n	800f724 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	7c12      	ldrb	r2, [r2, #16]
 800f718:	f107 0108 	add.w	r1, r7, #8
 800f71c:	4610      	mov	r0, r2
 800f71e:	4798      	blx	r3
 800f720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f722:	e05d      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f724:	6839      	ldr	r1, [r7, #0]
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 fa7e 	bl	800fc28 <USBD_CtlError>
            err++;
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	3301      	adds	r3, #1
 800f730:	72fb      	strb	r3, [r7, #11]
          break;
 800f732:	e055      	b.n	800f7e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00b      	beq.n	800f758 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f746:	691b      	ldr	r3, [r3, #16]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	7c12      	ldrb	r2, [r2, #16]
 800f74c:	f107 0108 	add.w	r1, r7, #8
 800f750:	4610      	mov	r0, r2
 800f752:	4798      	blx	r3
 800f754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f756:	e043      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 fa64 	bl	800fc28 <USBD_CtlError>
            err++;
 800f760:	7afb      	ldrb	r3, [r7, #11]
 800f762:	3301      	adds	r3, #1
 800f764:	72fb      	strb	r3, [r7, #11]
          break;
 800f766:	e03b      	b.n	800f7e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	695b      	ldr	r3, [r3, #20]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00b      	beq.n	800f78c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f77a:	695b      	ldr	r3, [r3, #20]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	7c12      	ldrb	r2, [r2, #16]
 800f780:	f107 0108 	add.w	r1, r7, #8
 800f784:	4610      	mov	r0, r2
 800f786:	4798      	blx	r3
 800f788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f78a:	e029      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f78c:	6839      	ldr	r1, [r7, #0]
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fa4a 	bl	800fc28 <USBD_CtlError>
            err++;
 800f794:	7afb      	ldrb	r3, [r7, #11]
 800f796:	3301      	adds	r3, #1
 800f798:	72fb      	strb	r3, [r7, #11]
          break;
 800f79a:	e021      	b.n	800f7e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	699b      	ldr	r3, [r3, #24]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d00b      	beq.n	800f7c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	7c12      	ldrb	r2, [r2, #16]
 800f7b4:	f107 0108 	add.w	r1, r7, #8
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
 800f7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7be:	e00f      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 fa30 	bl	800fc28 <USBD_CtlError>
            err++;
 800f7c8:	7afb      	ldrb	r3, [r7, #11]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f7ce:	e007      	b.n	800f7e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fa28 	bl	800fc28 <USBD_CtlError>
          err++;
 800f7d8:	7afb      	ldrb	r3, [r7, #11]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f7de:	bf00      	nop
      }
      break;
 800f7e0:	e037      	b.n	800f852 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	7c1b      	ldrb	r3, [r3, #16]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d109      	bne.n	800f7fe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f2:	f107 0208 	add.w	r2, r7, #8
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	4798      	blx	r3
 800f7fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7fc:	e029      	b.n	800f852 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f7fe:	6839      	ldr	r1, [r7, #0]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 fa11 	bl	800fc28 <USBD_CtlError>
        err++;
 800f806:	7afb      	ldrb	r3, [r7, #11]
 800f808:	3301      	adds	r3, #1
 800f80a:	72fb      	strb	r3, [r7, #11]
      break;
 800f80c:	e021      	b.n	800f852 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	7c1b      	ldrb	r3, [r3, #16]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d10d      	bne.n	800f832 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f81e:	f107 0208 	add.w	r2, r7, #8
 800f822:	4610      	mov	r0, r2
 800f824:	4798      	blx	r3
 800f826:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3301      	adds	r3, #1
 800f82c:	2207      	movs	r2, #7
 800f82e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f830:	e00f      	b.n	800f852 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 f9f7 	bl	800fc28 <USBD_CtlError>
        err++;
 800f83a:	7afb      	ldrb	r3, [r7, #11]
 800f83c:	3301      	adds	r3, #1
 800f83e:	72fb      	strb	r3, [r7, #11]
      break;
 800f840:	e007      	b.n	800f852 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f9ef 	bl	800fc28 <USBD_CtlError>
      err++;
 800f84a:	7afb      	ldrb	r3, [r7, #11]
 800f84c:	3301      	adds	r3, #1
 800f84e:	72fb      	strb	r3, [r7, #11]
      break;
 800f850:	bf00      	nop
  }

  if (err != 0U)
 800f852:	7afb      	ldrb	r3, [r7, #11]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d11e      	bne.n	800f896 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	88db      	ldrh	r3, [r3, #6]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d016      	beq.n	800f88e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f860:	893b      	ldrh	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00e      	beq.n	800f884 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	88da      	ldrh	r2, [r3, #6]
 800f86a:	893b      	ldrh	r3, [r7, #8]
 800f86c:	4293      	cmp	r3, r2
 800f86e:	bf28      	it	cs
 800f870:	4613      	movcs	r3, r2
 800f872:	b29b      	uxth	r3, r3
 800f874:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f876:	893b      	ldrh	r3, [r7, #8]
 800f878:	461a      	mov	r2, r3
 800f87a:	68f9      	ldr	r1, [r7, #12]
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fa44 	bl	800fd0a <USBD_CtlSendData>
 800f882:	e009      	b.n	800f898 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 f9ce 	bl	800fc28 <USBD_CtlError>
 800f88c:	e004      	b.n	800f898 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 fa95 	bl	800fdbe <USBD_CtlSendStatus>
 800f894:	e000      	b.n	800f898 <USBD_GetDescriptor+0x320>
    return;
 800f896:	bf00      	nop
  }
}
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop

0800f8a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	889b      	ldrh	r3, [r3, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d131      	bne.n	800f916 <USBD_SetAddress+0x76>
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	88db      	ldrh	r3, [r3, #6]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d12d      	bne.n	800f916 <USBD_SetAddress+0x76>
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	885b      	ldrh	r3, [r3, #2]
 800f8be:	2b7f      	cmp	r3, #127	; 0x7f
 800f8c0:	d829      	bhi.n	800f916 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	885b      	ldrh	r3, [r3, #2]
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d104      	bne.n	800f8e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 f9a3 	bl	800fc28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8e2:	e01d      	b.n	800f920 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7bfa      	ldrb	r2, [r7, #15]
 800f8e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8ec:	7bfb      	ldrb	r3, [r7, #15]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f003 fd6f 	bl	80133d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fa61 	bl	800fdbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d004      	beq.n	800f90c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2202      	movs	r2, #2
 800f906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f90a:	e009      	b.n	800f920 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2201      	movs	r2, #1
 800f910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f914:	e004      	b.n	800f920 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 f985 	bl	800fc28 <USBD_CtlError>
  }
}
 800f91e:	bf00      	nop
 800f920:	bf00      	nop
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	885b      	ldrh	r3, [r3, #2]
 800f93a:	b2da      	uxtb	r2, r3
 800f93c:	4b4c      	ldr	r3, [pc, #304]	; (800fa70 <USBD_SetConfig+0x148>)
 800f93e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f940:	4b4b      	ldr	r3, [pc, #300]	; (800fa70 <USBD_SetConfig+0x148>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d905      	bls.n	800f954 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f948:	6839      	ldr	r1, [r7, #0]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f96c 	bl	800fc28 <USBD_CtlError>
    return USBD_FAIL;
 800f950:	2303      	movs	r3, #3
 800f952:	e088      	b.n	800fa66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d002      	beq.n	800f966 <USBD_SetConfig+0x3e>
 800f960:	2b03      	cmp	r3, #3
 800f962:	d025      	beq.n	800f9b0 <USBD_SetConfig+0x88>
 800f964:	e071      	b.n	800fa4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f966:	4b42      	ldr	r3, [pc, #264]	; (800fa70 <USBD_SetConfig+0x148>)
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d01c      	beq.n	800f9a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f96e:	4b40      	ldr	r3, [pc, #256]	; (800fa70 <USBD_SetConfig+0x148>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	461a      	mov	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f978:	4b3d      	ldr	r3, [pc, #244]	; (800fa70 <USBD_SetConfig+0x148>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	4619      	mov	r1, r3
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7ff f91e 	bl	800ebc0 <USBD_SetClassConfig>
 800f984:	4603      	mov	r3, r0
 800f986:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f988:	7bfb      	ldrb	r3, [r7, #15]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d004      	beq.n	800f998 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 f949 	bl	800fc28 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f996:	e065      	b.n	800fa64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fa10 	bl	800fdbe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2203      	movs	r2, #3
 800f9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f9a6:	e05d      	b.n	800fa64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fa08 	bl	800fdbe <USBD_CtlSendStatus>
      break;
 800f9ae:	e059      	b.n	800fa64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9b0:	4b2f      	ldr	r3, [pc, #188]	; (800fa70 <USBD_SetConfig+0x148>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d112      	bne.n	800f9de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f9c0:	4b2b      	ldr	r3, [pc, #172]	; (800fa70 <USBD_SetConfig+0x148>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9ca:	4b29      	ldr	r3, [pc, #164]	; (800fa70 <USBD_SetConfig+0x148>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff f911 	bl	800ebf8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f9f1 	bl	800fdbe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9dc:	e042      	b.n	800fa64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f9de:	4b24      	ldr	r3, [pc, #144]	; (800fa70 <USBD_SetConfig+0x148>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d02a      	beq.n	800fa42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7ff f8ff 	bl	800ebf8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9fa:	4b1d      	ldr	r3, [pc, #116]	; (800fa70 <USBD_SetConfig+0x148>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa04:	4b1a      	ldr	r3, [pc, #104]	; (800fa70 <USBD_SetConfig+0x148>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff f8d8 	bl	800ebc0 <USBD_SetClassConfig>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00f      	beq.n	800fa3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f903 	bl	800fc28 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7ff f8e4 	bl	800ebf8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2202      	movs	r2, #2
 800fa34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa38:	e014      	b.n	800fa64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f9bf 	bl	800fdbe <USBD_CtlSendStatus>
      break;
 800fa40:	e010      	b.n	800fa64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f9bb 	bl	800fdbe <USBD_CtlSendStatus>
      break;
 800fa48:	e00c      	b.n	800fa64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fa4a:	6839      	ldr	r1, [r7, #0]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f8eb 	bl	800fc28 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa52:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <USBD_SetConfig+0x148>)
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff f8cd 	bl	800ebf8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa5e:	2303      	movs	r3, #3
 800fa60:	73fb      	strb	r3, [r7, #15]
      break;
 800fa62:	bf00      	nop
  }

  return ret;
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20003fa4 	.word	0x20003fa4

0800fa74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	88db      	ldrh	r3, [r3, #6]
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d004      	beq.n	800fa90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f8cd 	bl	800fc28 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa8e:	e023      	b.n	800fad8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	dc02      	bgt.n	800faa2 <USBD_GetConfig+0x2e>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	dc03      	bgt.n	800faa8 <USBD_GetConfig+0x34>
 800faa0:	e015      	b.n	800face <USBD_GetConfig+0x5a>
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d00b      	beq.n	800fabe <USBD_GetConfig+0x4a>
 800faa6:	e012      	b.n	800face <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3308      	adds	r3, #8
 800fab2:	2201      	movs	r2, #1
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f927 	bl	800fd0a <USBD_CtlSendData>
        break;
 800fabc:	e00c      	b.n	800fad8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3304      	adds	r3, #4
 800fac2:	2201      	movs	r2, #1
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f91f 	bl	800fd0a <USBD_CtlSendData>
        break;
 800facc:	e004      	b.n	800fad8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800face:	6839      	ldr	r1, [r7, #0]
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f8a9 	bl	800fc28 <USBD_CtlError>
        break;
 800fad6:	bf00      	nop
}
 800fad8:	bf00      	nop
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	3b01      	subs	r3, #1
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d81e      	bhi.n	800fb36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	88db      	ldrh	r3, [r3, #6]
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d004      	beq.n	800fb0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 f890 	bl	800fc28 <USBD_CtlError>
        break;
 800fb08:	e01a      	b.n	800fb40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d005      	beq.n	800fb26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	f043 0202 	orr.w	r2, r3, #2
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	330c      	adds	r3, #12
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f8eb 	bl	800fd0a <USBD_CtlSendData>
      break;
 800fb34:	e004      	b.n	800fb40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb36:	6839      	ldr	r1, [r7, #0]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 f875 	bl	800fc28 <USBD_CtlError>
      break;
 800fb3e:	bf00      	nop
  }
}
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	885b      	ldrh	r3, [r3, #2]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d106      	bne.n	800fb68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f92b 	bl	800fdbe <USBD_CtlSendStatus>
  }
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	3b01      	subs	r3, #1
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	d80b      	bhi.n	800fba0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	885b      	ldrh	r3, [r3, #2]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d10c      	bne.n	800fbaa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f910 	bl	800fdbe <USBD_CtlSendStatus>
      }
      break;
 800fb9e:	e004      	b.n	800fbaa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 f840 	bl	800fc28 <USBD_CtlError>
      break;
 800fba8:	e000      	b.n	800fbac <USBD_ClrFeature+0x3c>
      break;
 800fbaa:	bf00      	nop
  }
}
 800fbac:	bf00      	nop
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	781a      	ldrb	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	781a      	ldrb	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f7ff fa91 	bl	800f106 <SWAPBYTE>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f7ff fa84 	bl	800f106 <SWAPBYTE>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	461a      	mov	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f7ff fa77 	bl	800f106 <SWAPBYTE>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	80da      	strh	r2, [r3, #6]
}
 800fc20:	bf00      	nop
 800fc22:	3710      	adds	r7, #16
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc32:	2180      	movs	r1, #128	; 0x80
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f003 fb35 	bl	80132a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc3a:	2100      	movs	r1, #0
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f003 fb31 	bl	80132a4 <USBD_LL_StallEP>
}
 800fc42:	bf00      	nop
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b086      	sub	sp, #24
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc56:	2300      	movs	r3, #0
 800fc58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d036      	beq.n	800fcce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc64:	6938      	ldr	r0, [r7, #16]
 800fc66:	f000 f836 	bl	800fcd6 <USBD_GetLen>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc78:	7dfb      	ldrb	r3, [r7, #23]
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	7812      	ldrb	r2, [r2, #0]
 800fc82:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc84:	7dfb      	ldrb	r3, [r7, #23]
 800fc86:	3301      	adds	r3, #1
 800fc88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	4413      	add	r3, r2
 800fc90:	2203      	movs	r2, #3
 800fc92:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	3301      	adds	r3, #1
 800fc98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc9a:	e013      	b.n	800fcc4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc9c:	7dfb      	ldrb	r3, [r7, #23]
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	4413      	add	r3, r2
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	7812      	ldrb	r2, [r2, #0]
 800fca6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	613b      	str	r3, [r7, #16]
    idx++;
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	4413      	add	r3, r2
 800fcba:	2200      	movs	r2, #0
 800fcbc:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1e7      	bne.n	800fc9c <USBD_GetString+0x52>
 800fccc:	e000      	b.n	800fcd0 <USBD_GetString+0x86>
    return;
 800fcce:	bf00      	nop
  }
}
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcd6:	b480      	push	{r7}
 800fcd8:	b085      	sub	sp, #20
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fce6:	e005      	b.n	800fcf4 <USBD_GetLen+0x1e>
  {
    len++;
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	3301      	adds	r3, #1
 800fcec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1f5      	bne.n	800fce8 <USBD_GetLen+0x12>
  }

  return len;
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b084      	sub	sp, #16
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	60f8      	str	r0, [r7, #12]
 800fd12:	60b9      	str	r1, [r7, #8]
 800fd14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2202      	movs	r2, #2
 800fd1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	2100      	movs	r1, #0
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f003 fb85 	bl	8013440 <USBD_LL_Transmit>

  return USBD_OK;
 800fd36:	2300      	movs	r3, #0
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	2100      	movs	r1, #0
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f003 fb74 	bl	8013440 <USBD_LL_Transmit>

  return USBD_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b084      	sub	sp, #16
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	60f8      	str	r0, [r7, #12]
 800fd6a:	60b9      	str	r1, [r7, #8]
 800fd6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2203      	movs	r2, #3
 800fd72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f003 fb8f 	bl	80134b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	2100      	movs	r1, #0
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f003 fb7e 	bl	80134b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b082      	sub	sp, #8
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2204      	movs	r2, #4
 800fdca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdce:	2300      	movs	r3, #0
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f003 fb33 	bl	8013440 <USBD_LL_Transmit>

  return USBD_OK;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2205      	movs	r2, #5
 800fdf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f003 fb58 	bl	80134b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <__NVIC_SetPriority>:
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	6039      	str	r1, [r7, #0]
 800fe16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	db0a      	blt.n	800fe36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	490c      	ldr	r1, [pc, #48]	; (800fe58 <__NVIC_SetPriority+0x4c>)
 800fe26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe2a:	0112      	lsls	r2, r2, #4
 800fe2c:	b2d2      	uxtb	r2, r2
 800fe2e:	440b      	add	r3, r1
 800fe30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fe34:	e00a      	b.n	800fe4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	4908      	ldr	r1, [pc, #32]	; (800fe5c <__NVIC_SetPriority+0x50>)
 800fe3c:	79fb      	ldrb	r3, [r7, #7]
 800fe3e:	f003 030f 	and.w	r3, r3, #15
 800fe42:	3b04      	subs	r3, #4
 800fe44:	0112      	lsls	r2, r2, #4
 800fe46:	b2d2      	uxtb	r2, r2
 800fe48:	440b      	add	r3, r1
 800fe4a:	761a      	strb	r2, [r3, #24]
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	e000e100 	.word	0xe000e100
 800fe5c:	e000ed00 	.word	0xe000ed00

0800fe60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fe64:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <SysTick_Handler+0x1c>)
 800fe66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fe68:	f001 fd28 	bl	80118bc <xTaskGetSchedulerState>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d001      	beq.n	800fe76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fe72:	f002 fb11 	bl	8012498 <xPortSysTickHandler>
  }
}
 800fe76:	bf00      	nop
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	e000e010 	.word	0xe000e010

0800fe80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fe80:	b580      	push	{r7, lr}
 800fe82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fe84:	2100      	movs	r1, #0
 800fe86:	f06f 0004 	mvn.w	r0, #4
 800fe8a:	f7ff ffbf 	bl	800fe0c <__NVIC_SetPriority>
#endif
}
 800fe8e:	bf00      	nop
 800fe90:	bd80      	pop	{r7, pc}
	...

0800fe94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe9a:	f3ef 8305 	mrs	r3, IPSR
 800fe9e:	603b      	str	r3, [r7, #0]
  return(result);
 800fea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d003      	beq.n	800feae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fea6:	f06f 0305 	mvn.w	r3, #5
 800feaa:	607b      	str	r3, [r7, #4]
 800feac:	e00c      	b.n	800fec8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800feae:	4b0a      	ldr	r3, [pc, #40]	; (800fed8 <osKernelInitialize+0x44>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d105      	bne.n	800fec2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800feb6:	4b08      	ldr	r3, [pc, #32]	; (800fed8 <osKernelInitialize+0x44>)
 800feb8:	2201      	movs	r2, #1
 800feba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800febc:	2300      	movs	r3, #0
 800febe:	607b      	str	r3, [r7, #4]
 800fec0:	e002      	b.n	800fec8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fec8:	687b      	ldr	r3, [r7, #4]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	370c      	adds	r7, #12
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	20003fa8 	.word	0x20003fa8

0800fedc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fee2:	f3ef 8305 	mrs	r3, IPSR
 800fee6:	603b      	str	r3, [r7, #0]
  return(result);
 800fee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800feea:	2b00      	cmp	r3, #0
 800feec:	d003      	beq.n	800fef6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800feee:	f06f 0305 	mvn.w	r3, #5
 800fef2:	607b      	str	r3, [r7, #4]
 800fef4:	e010      	b.n	800ff18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fef6:	4b0b      	ldr	r3, [pc, #44]	; (800ff24 <osKernelStart+0x48>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d109      	bne.n	800ff12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fefe:	f7ff ffbf 	bl	800fe80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff02:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <osKernelStart+0x48>)
 800ff04:	2202      	movs	r2, #2
 800ff06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff08:	f001 f87c 	bl	8011004 <vTaskStartScheduler>
      stat = osOK;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	607b      	str	r3, [r7, #4]
 800ff10:	e002      	b.n	800ff18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ff12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff18:	687b      	ldr	r3, [r7, #4]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	20003fa8 	.word	0x20003fa8

0800ff28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08e      	sub	sp, #56	; 0x38
 800ff2c:	af04      	add	r7, sp, #16
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ff34:	2300      	movs	r3, #0
 800ff36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff38:	f3ef 8305 	mrs	r3, IPSR
 800ff3c:	617b      	str	r3, [r7, #20]
  return(result);
 800ff3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d17e      	bne.n	8010042 <osThreadNew+0x11a>
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d07b      	beq.n	8010042 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ff4a:	2380      	movs	r3, #128	; 0x80
 800ff4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ff4e:	2318      	movs	r3, #24
 800ff50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ff52:	2300      	movs	r3, #0
 800ff54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ff56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d045      	beq.n	800ffee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d002      	beq.n	800ff70 <osThreadNew+0x48>
        name = attr->name;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d002      	beq.n	800ff7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	699b      	ldr	r3, [r3, #24]
 800ff7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d008      	beq.n	800ff96 <osThreadNew+0x6e>
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	2b38      	cmp	r3, #56	; 0x38
 800ff88:	d805      	bhi.n	800ff96 <osThreadNew+0x6e>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	f003 0301 	and.w	r3, r3, #1
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <osThreadNew+0x72>
        return (NULL);
 800ff96:	2300      	movs	r3, #0
 800ff98:	e054      	b.n	8010044 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	695b      	ldr	r3, [r3, #20]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d003      	beq.n	800ffaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	695b      	ldr	r3, [r3, #20]
 800ffa6:	089b      	lsrs	r3, r3, #2
 800ffa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	689b      	ldr	r3, [r3, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00e      	beq.n	800ffd0 <osThreadNew+0xa8>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	68db      	ldr	r3, [r3, #12]
 800ffb6:	2bbb      	cmp	r3, #187	; 0xbb
 800ffb8:	d90a      	bls.n	800ffd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d006      	beq.n	800ffd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	695b      	ldr	r3, [r3, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d002      	beq.n	800ffd0 <osThreadNew+0xa8>
        mem = 1;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	61bb      	str	r3, [r7, #24]
 800ffce:	e010      	b.n	800fff2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10c      	bne.n	800fff2 <osThreadNew+0xca>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d108      	bne.n	800fff2 <osThreadNew+0xca>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d104      	bne.n	800fff2 <osThreadNew+0xca>
          mem = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	61bb      	str	r3, [r7, #24]
 800ffec:	e001      	b.n	800fff2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d110      	bne.n	801001a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010000:	9202      	str	r2, [sp, #8]
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	6a3a      	ldr	r2, [r7, #32]
 801000c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f000 fe0c 	bl	8010c2c <xTaskCreateStatic>
 8010014:	4603      	mov	r3, r0
 8010016:	613b      	str	r3, [r7, #16]
 8010018:	e013      	b.n	8010042 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d110      	bne.n	8010042 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010020:	6a3b      	ldr	r3, [r7, #32]
 8010022:	b29a      	uxth	r2, r3
 8010024:	f107 0310 	add.w	r3, r7, #16
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f000 fe57 	bl	8010ce6 <xTaskCreate>
 8010038:	4603      	mov	r3, r0
 801003a:	2b01      	cmp	r3, #1
 801003c:	d001      	beq.n	8010042 <osThreadNew+0x11a>
            hTask = NULL;
 801003e:	2300      	movs	r3, #0
 8010040:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010042:	693b      	ldr	r3, [r7, #16]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3728      	adds	r7, #40	; 0x28
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010054:	f3ef 8305 	mrs	r3, IPSR
 8010058:	60bb      	str	r3, [r7, #8]
  return(result);
 801005a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801005c:	2b00      	cmp	r3, #0
 801005e:	d003      	beq.n	8010068 <osDelay+0x1c>
    stat = osErrorISR;
 8010060:	f06f 0305 	mvn.w	r3, #5
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	e007      	b.n	8010078 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010068:	2300      	movs	r3, #0
 801006a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d002      	beq.n	8010078 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 ff92 	bl	8010f9c <vTaskDelay>
    }
  }

  return (stat);
 8010078:	68fb      	ldr	r3, [r7, #12]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4a07      	ldr	r2, [pc, #28]	; (80100b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8010094:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	4a06      	ldr	r2, [pc, #24]	; (80100b4 <vApplicationGetIdleTaskMemory+0x30>)
 801009a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2280      	movs	r2, #128	; 0x80
 80100a0:	601a      	str	r2, [r3, #0]
}
 80100a2:	bf00      	nop
 80100a4:	3714      	adds	r7, #20
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	20003fac 	.word	0x20003fac
 80100b4:	20004068 	.word	0x20004068

080100b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	4a07      	ldr	r2, [pc, #28]	; (80100e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80100c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	4a06      	ldr	r2, [pc, #24]	; (80100e8 <vApplicationGetTimerTaskMemory+0x30>)
 80100ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100d6:	601a      	str	r2, [r3, #0]
}
 80100d8:	bf00      	nop
 80100da:	3714      	adds	r7, #20
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	20004268 	.word	0x20004268
 80100e8:	20004324 	.word	0x20004324

080100ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f103 0208 	add.w	r2, r3, #8
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f103 0208 	add.w	r2, r3, #8
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f103 0208 	add.w	r2, r3, #8
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801013a:	bf00      	nop
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010146:	b480      	push	{r7}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
 801014e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	689a      	ldr	r2, [r3, #8]
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	683a      	ldr	r2, [r7, #0]
 801016a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	1c5a      	adds	r2, r3, #1
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	601a      	str	r2, [r3, #0]
}
 8010182:	bf00      	nop
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801018e:	b480      	push	{r7}
 8010190:	b085      	sub	sp, #20
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101a4:	d103      	bne.n	80101ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	60fb      	str	r3, [r7, #12]
 80101ac:	e00c      	b.n	80101c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3308      	adds	r3, #8
 80101b2:	60fb      	str	r3, [r7, #12]
 80101b4:	e002      	b.n	80101bc <vListInsert+0x2e>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d2f6      	bcs.n	80101b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	683a      	ldr	r2, [r7, #0]
 80101e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	601a      	str	r2, [r3, #0]
}
 80101f4:	bf00      	nop
 80101f6:	3714      	adds	r7, #20
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	6892      	ldr	r2, [r2, #8]
 8010216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	6852      	ldr	r2, [r2, #4]
 8010220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	429a      	cmp	r2, r3
 801022a:	d103      	bne.n	8010234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	689a      	ldr	r2, [r3, #8]
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2200      	movs	r2, #0
 8010238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	1e5a      	subs	r2, r3, #1
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d10a      	bne.n	801027e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026c:	f383 8811 	msr	BASEPRI, r3
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801027a:	bf00      	nop
 801027c:	e7fe      	b.n	801027c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801027e:	f002 f879 	bl	8012374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801028a:	68f9      	ldr	r1, [r7, #12]
 801028c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801028e:	fb01 f303 	mul.w	r3, r1, r3
 8010292:	441a      	add	r2, r3
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ae:	3b01      	subs	r3, #1
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102b4:	fb01 f303 	mul.w	r3, r1, r3
 80102b8:	441a      	add	r2, r3
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	22ff      	movs	r2, #255	; 0xff
 80102c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	22ff      	movs	r2, #255	; 0xff
 80102ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d114      	bne.n	80102fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d01a      	beq.n	8010312 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3310      	adds	r3, #16
 80102e0:	4618      	mov	r0, r3
 80102e2:	f001 f929 	bl	8011538 <xTaskRemoveFromEventList>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d012      	beq.n	8010312 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80102ec:	4b0c      	ldr	r3, [pc, #48]	; (8010320 <xQueueGenericReset+0xcc>)
 80102ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102f2:	601a      	str	r2, [r3, #0]
 80102f4:	f3bf 8f4f 	dsb	sy
 80102f8:	f3bf 8f6f 	isb	sy
 80102fc:	e009      	b.n	8010312 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	3310      	adds	r3, #16
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff fef2 	bl	80100ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	3324      	adds	r3, #36	; 0x24
 801030c:	4618      	mov	r0, r3
 801030e:	f7ff feed 	bl	80100ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010312:	f002 f85f 	bl	80123d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010316:	2301      	movs	r3, #1
}
 8010318:	4618      	mov	r0, r3
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	e000ed04 	.word	0xe000ed04

08010324 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08e      	sub	sp, #56	; 0x38
 8010328:	af02      	add	r7, sp, #8
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
 8010330:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d10a      	bne.n	801034e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033c:	f383 8811 	msr	BASEPRI, r3
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	f3bf 8f4f 	dsb	sy
 8010348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801034a:	bf00      	nop
 801034c:	e7fe      	b.n	801034c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10a      	bne.n	801036a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010366:	bf00      	nop
 8010368:	e7fe      	b.n	8010368 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <xQueueGenericCreateStatic+0x52>
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d001      	beq.n	801037a <xQueueGenericCreateStatic+0x56>
 8010376:	2301      	movs	r3, #1
 8010378:	e000      	b.n	801037c <xQueueGenericCreateStatic+0x58>
 801037a:	2300      	movs	r3, #0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10a      	bne.n	8010396 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	623b      	str	r3, [r7, #32]
}
 8010392:	bf00      	nop
 8010394:	e7fe      	b.n	8010394 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d102      	bne.n	80103a2 <xQueueGenericCreateStatic+0x7e>
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <xQueueGenericCreateStatic+0x82>
 80103a2:	2301      	movs	r3, #1
 80103a4:	e000      	b.n	80103a8 <xQueueGenericCreateStatic+0x84>
 80103a6:	2300      	movs	r3, #0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d10a      	bne.n	80103c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80103ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b0:	f383 8811 	msr	BASEPRI, r3
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	61fb      	str	r3, [r7, #28]
}
 80103be:	bf00      	nop
 80103c0:	e7fe      	b.n	80103c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80103c2:	2350      	movs	r3, #80	; 0x50
 80103c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2b50      	cmp	r3, #80	; 0x50
 80103ca:	d00a      	beq.n	80103e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80103cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d0:	f383 8811 	msr	BASEPRI, r3
 80103d4:	f3bf 8f6f 	isb	sy
 80103d8:	f3bf 8f4f 	dsb	sy
 80103dc:	61bb      	str	r3, [r7, #24]
}
 80103de:	bf00      	nop
 80103e0:	e7fe      	b.n	80103e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80103e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00d      	beq.n	801040a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80103fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	4613      	mov	r3, r2
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	68b9      	ldr	r1, [r7, #8]
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f000 f805 	bl	8010414 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801040c:	4618      	mov	r0, r3
 801040e:	3730      	adds	r7, #48	; 0x30
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d103      	bne.n	8010430 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	69ba      	ldr	r2, [r7, #24]
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	e002      	b.n	8010436 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010442:	2101      	movs	r1, #1
 8010444:	69b8      	ldr	r0, [r7, #24]
 8010446:	f7ff ff05 	bl	8010254 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	78fa      	ldrb	r2, [r7, #3]
 801044e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010452:	bf00      	nop
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
	...

0801045c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b08e      	sub	sp, #56	; 0x38
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
 8010468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801046a:	2300      	movs	r3, #0
 801046c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10a      	bne.n	801048e <xQueueGenericSend+0x32>
	__asm volatile
 8010478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047c:	f383 8811 	msr	BASEPRI, r3
 8010480:	f3bf 8f6f 	isb	sy
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801048a:	bf00      	nop
 801048c:	e7fe      	b.n	801048c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d103      	bne.n	801049c <xQueueGenericSend+0x40>
 8010494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010498:	2b00      	cmp	r3, #0
 801049a:	d101      	bne.n	80104a0 <xQueueGenericSend+0x44>
 801049c:	2301      	movs	r3, #1
 801049e:	e000      	b.n	80104a2 <xQueueGenericSend+0x46>
 80104a0:	2300      	movs	r3, #0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d10a      	bne.n	80104bc <xQueueGenericSend+0x60>
	__asm volatile
 80104a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104aa:	f383 8811 	msr	BASEPRI, r3
 80104ae:	f3bf 8f6f 	isb	sy
 80104b2:	f3bf 8f4f 	dsb	sy
 80104b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104b8:	bf00      	nop
 80104ba:	e7fe      	b.n	80104ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d103      	bne.n	80104ca <xQueueGenericSend+0x6e>
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d101      	bne.n	80104ce <xQueueGenericSend+0x72>
 80104ca:	2301      	movs	r3, #1
 80104cc:	e000      	b.n	80104d0 <xQueueGenericSend+0x74>
 80104ce:	2300      	movs	r3, #0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d10a      	bne.n	80104ea <xQueueGenericSend+0x8e>
	__asm volatile
 80104d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d8:	f383 8811 	msr	BASEPRI, r3
 80104dc:	f3bf 8f6f 	isb	sy
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	623b      	str	r3, [r7, #32]
}
 80104e6:	bf00      	nop
 80104e8:	e7fe      	b.n	80104e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104ea:	f001 f9e7 	bl	80118bc <xTaskGetSchedulerState>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d102      	bne.n	80104fa <xQueueGenericSend+0x9e>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <xQueueGenericSend+0xa2>
 80104fa:	2301      	movs	r3, #1
 80104fc:	e000      	b.n	8010500 <xQueueGenericSend+0xa4>
 80104fe:	2300      	movs	r3, #0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10a      	bne.n	801051a <xQueueGenericSend+0xbe>
	__asm volatile
 8010504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	61fb      	str	r3, [r7, #28]
}
 8010516:	bf00      	nop
 8010518:	e7fe      	b.n	8010518 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801051a:	f001 ff2b 	bl	8012374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010526:	429a      	cmp	r2, r3
 8010528:	d302      	bcc.n	8010530 <xQueueGenericSend+0xd4>
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	2b02      	cmp	r3, #2
 801052e:	d129      	bne.n	8010584 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	68b9      	ldr	r1, [r7, #8]
 8010534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010536:	f000 fa0b 	bl	8010950 <prvCopyDataToQueue>
 801053a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010540:	2b00      	cmp	r3, #0
 8010542:	d010      	beq.n	8010566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010546:	3324      	adds	r3, #36	; 0x24
 8010548:	4618      	mov	r0, r3
 801054a:	f000 fff5 	bl	8011538 <xTaskRemoveFromEventList>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d013      	beq.n	801057c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010554:	4b3f      	ldr	r3, [pc, #252]	; (8010654 <xQueueGenericSend+0x1f8>)
 8010556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	f3bf 8f4f 	dsb	sy
 8010560:	f3bf 8f6f 	isb	sy
 8010564:	e00a      	b.n	801057c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	2b00      	cmp	r3, #0
 801056a:	d007      	beq.n	801057c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801056c:	4b39      	ldr	r3, [pc, #228]	; (8010654 <xQueueGenericSend+0x1f8>)
 801056e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	f3bf 8f4f 	dsb	sy
 8010578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801057c:	f001 ff2a 	bl	80123d4 <vPortExitCritical>
				return pdPASS;
 8010580:	2301      	movs	r3, #1
 8010582:	e063      	b.n	801064c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d103      	bne.n	8010592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801058a:	f001 ff23 	bl	80123d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801058e:	2300      	movs	r3, #0
 8010590:	e05c      	b.n	801064c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010598:	f107 0314 	add.w	r3, r7, #20
 801059c:	4618      	mov	r0, r3
 801059e:	f001 f82f 	bl	8011600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105a2:	2301      	movs	r3, #1
 80105a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105a6:	f001 ff15 	bl	80123d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105aa:	f000 fd9b 	bl	80110e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105ae:	f001 fee1 	bl	8012374 <vPortEnterCritical>
 80105b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105b8:	b25b      	sxtb	r3, r3
 80105ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105be:	d103      	bne.n	80105c8 <xQueueGenericSend+0x16c>
 80105c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c2:	2200      	movs	r2, #0
 80105c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105ce:	b25b      	sxtb	r3, r3
 80105d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105d4:	d103      	bne.n	80105de <xQueueGenericSend+0x182>
 80105d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105de:	f001 fef9 	bl	80123d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80105e2:	1d3a      	adds	r2, r7, #4
 80105e4:	f107 0314 	add.w	r3, r7, #20
 80105e8:	4611      	mov	r1, r2
 80105ea:	4618      	mov	r0, r3
 80105ec:	f001 f81e 	bl	801162c <xTaskCheckForTimeOut>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d124      	bne.n	8010640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80105f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105f8:	f000 faa2 	bl	8010b40 <prvIsQueueFull>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d018      	beq.n	8010634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	3310      	adds	r3, #16
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f000 ff44 	bl	8011498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010612:	f000 fa2d 	bl	8010a70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010616:	f000 fd73 	bl	8011100 <xTaskResumeAll>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	f47f af7c 	bne.w	801051a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010622:	4b0c      	ldr	r3, [pc, #48]	; (8010654 <xQueueGenericSend+0x1f8>)
 8010624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	e772      	b.n	801051a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010636:	f000 fa1b 	bl	8010a70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801063a:	f000 fd61 	bl	8011100 <xTaskResumeAll>
 801063e:	e76c      	b.n	801051a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010642:	f000 fa15 	bl	8010a70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010646:	f000 fd5b 	bl	8011100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801064a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801064c:	4618      	mov	r0, r3
 801064e:	3738      	adds	r7, #56	; 0x38
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	e000ed04 	.word	0xe000ed04

08010658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b090      	sub	sp, #64	; 0x40
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801066a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10a      	bne.n	8010686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010682:	bf00      	nop
 8010684:	e7fe      	b.n	8010684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d103      	bne.n	8010694 <xQueueGenericSendFromISR+0x3c>
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010690:	2b00      	cmp	r3, #0
 8010692:	d101      	bne.n	8010698 <xQueueGenericSendFromISR+0x40>
 8010694:	2301      	movs	r3, #1
 8010696:	e000      	b.n	801069a <xQueueGenericSendFromISR+0x42>
 8010698:	2300      	movs	r3, #0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d10a      	bne.n	80106b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106b0:	bf00      	nop
 80106b2:	e7fe      	b.n	80106b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2b02      	cmp	r3, #2
 80106b8:	d103      	bne.n	80106c2 <xQueueGenericSendFromISR+0x6a>
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d101      	bne.n	80106c6 <xQueueGenericSendFromISR+0x6e>
 80106c2:	2301      	movs	r3, #1
 80106c4:	e000      	b.n	80106c8 <xQueueGenericSendFromISR+0x70>
 80106c6:	2300      	movs	r3, #0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d10a      	bne.n	80106e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80106cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d0:	f383 8811 	msr	BASEPRI, r3
 80106d4:	f3bf 8f6f 	isb	sy
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	623b      	str	r3, [r7, #32]
}
 80106de:	bf00      	nop
 80106e0:	e7fe      	b.n	80106e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80106e2:	f001 ff29 	bl	8012538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80106e6:	f3ef 8211 	mrs	r2, BASEPRI
 80106ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	61fa      	str	r2, [r7, #28]
 80106fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80106fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010700:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801070a:	429a      	cmp	r2, r3
 801070c:	d302      	bcc.n	8010714 <xQueueGenericSendFromISR+0xbc>
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b02      	cmp	r3, #2
 8010712:	d12f      	bne.n	8010774 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801071a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801071e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010722:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	68b9      	ldr	r1, [r7, #8]
 8010728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801072a:	f000 f911 	bl	8010950 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801072e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010736:	d112      	bne.n	801075e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073c:	2b00      	cmp	r3, #0
 801073e:	d016      	beq.n	801076e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010742:	3324      	adds	r3, #36	; 0x24
 8010744:	4618      	mov	r0, r3
 8010746:	f000 fef7 	bl	8011538 <xTaskRemoveFromEventList>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00e      	beq.n	801076e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00b      	beq.n	801076e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2201      	movs	r2, #1
 801075a:	601a      	str	r2, [r3, #0]
 801075c:	e007      	b.n	801076e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801075e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010762:	3301      	adds	r3, #1
 8010764:	b2db      	uxtb	r3, r3
 8010766:	b25a      	sxtb	r2, r3
 8010768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801076e:	2301      	movs	r3, #1
 8010770:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010772:	e001      	b.n	8010778 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010774:	2300      	movs	r3, #0
 8010776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010782:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010786:	4618      	mov	r0, r3
 8010788:	3740      	adds	r7, #64	; 0x40
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
	...

08010790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b08c      	sub	sp, #48	; 0x30
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801079c:	2300      	movs	r3, #0
 801079e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10a      	bne.n	80107c0 <xQueueReceive+0x30>
	__asm volatile
 80107aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ae:	f383 8811 	msr	BASEPRI, r3
 80107b2:	f3bf 8f6f 	isb	sy
 80107b6:	f3bf 8f4f 	dsb	sy
 80107ba:	623b      	str	r3, [r7, #32]
}
 80107bc:	bf00      	nop
 80107be:	e7fe      	b.n	80107be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d103      	bne.n	80107ce <xQueueReceive+0x3e>
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <xQueueReceive+0x42>
 80107ce:	2301      	movs	r3, #1
 80107d0:	e000      	b.n	80107d4 <xQueueReceive+0x44>
 80107d2:	2300      	movs	r3, #0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10a      	bne.n	80107ee <xQueueReceive+0x5e>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	f383 8811 	msr	BASEPRI, r3
 80107e0:	f3bf 8f6f 	isb	sy
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	61fb      	str	r3, [r7, #28]
}
 80107ea:	bf00      	nop
 80107ec:	e7fe      	b.n	80107ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107ee:	f001 f865 	bl	80118bc <xTaskGetSchedulerState>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d102      	bne.n	80107fe <xQueueReceive+0x6e>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <xQueueReceive+0x72>
 80107fe:	2301      	movs	r3, #1
 8010800:	e000      	b.n	8010804 <xQueueReceive+0x74>
 8010802:	2300      	movs	r3, #0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d10a      	bne.n	801081e <xQueueReceive+0x8e>
	__asm volatile
 8010808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080c:	f383 8811 	msr	BASEPRI, r3
 8010810:	f3bf 8f6f 	isb	sy
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	61bb      	str	r3, [r7, #24]
}
 801081a:	bf00      	nop
 801081c:	e7fe      	b.n	801081c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801081e:	f001 fda9 	bl	8012374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	2b00      	cmp	r3, #0
 801082c:	d01f      	beq.n	801086e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801082e:	68b9      	ldr	r1, [r7, #8]
 8010830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010832:	f000 f8f7 	bl	8010a24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010838:	1e5a      	subs	r2, r3, #1
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d00f      	beq.n	8010866 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010848:	3310      	adds	r3, #16
 801084a:	4618      	mov	r0, r3
 801084c:	f000 fe74 	bl	8011538 <xTaskRemoveFromEventList>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d007      	beq.n	8010866 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010856:	4b3d      	ldr	r3, [pc, #244]	; (801094c <xQueueReceive+0x1bc>)
 8010858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010866:	f001 fdb5 	bl	80123d4 <vPortExitCritical>
				return pdPASS;
 801086a:	2301      	movs	r3, #1
 801086c:	e069      	b.n	8010942 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d103      	bne.n	801087c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010874:	f001 fdae 	bl	80123d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010878:	2300      	movs	r3, #0
 801087a:	e062      	b.n	8010942 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	2b00      	cmp	r3, #0
 8010880:	d106      	bne.n	8010890 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010882:	f107 0310 	add.w	r3, r7, #16
 8010886:	4618      	mov	r0, r3
 8010888:	f000 feba 	bl	8011600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801088c:	2301      	movs	r3, #1
 801088e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010890:	f001 fda0 	bl	80123d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010894:	f000 fc26 	bl	80110e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010898:	f001 fd6c 	bl	8012374 <vPortEnterCritical>
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108a2:	b25b      	sxtb	r3, r3
 80108a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108a8:	d103      	bne.n	80108b2 <xQueueReceive+0x122>
 80108aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108b8:	b25b      	sxtb	r3, r3
 80108ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108be:	d103      	bne.n	80108c8 <xQueueReceive+0x138>
 80108c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108c8:	f001 fd84 	bl	80123d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108cc:	1d3a      	adds	r2, r7, #4
 80108ce:	f107 0310 	add.w	r3, r7, #16
 80108d2:	4611      	mov	r1, r2
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 fea9 	bl	801162c <xTaskCheckForTimeOut>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d123      	bne.n	8010928 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108e2:	f000 f917 	bl	8010b14 <prvIsQueueEmpty>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d017      	beq.n	801091c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	3324      	adds	r3, #36	; 0x24
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	4611      	mov	r1, r2
 80108f4:	4618      	mov	r0, r3
 80108f6:	f000 fdcf 	bl	8011498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108fc:	f000 f8b8 	bl	8010a70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010900:	f000 fbfe 	bl	8011100 <xTaskResumeAll>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d189      	bne.n	801081e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801090a:	4b10      	ldr	r3, [pc, #64]	; (801094c <xQueueReceive+0x1bc>)
 801090c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010910:	601a      	str	r2, [r3, #0]
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	f3bf 8f6f 	isb	sy
 801091a:	e780      	b.n	801081e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801091c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801091e:	f000 f8a7 	bl	8010a70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010922:	f000 fbed 	bl	8011100 <xTaskResumeAll>
 8010926:	e77a      	b.n	801081e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801092a:	f000 f8a1 	bl	8010a70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801092e:	f000 fbe7 	bl	8011100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010934:	f000 f8ee 	bl	8010b14 <prvIsQueueEmpty>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	f43f af6f 	beq.w	801081e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010942:	4618      	mov	r0, r3
 8010944:	3730      	adds	r7, #48	; 0x30
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	e000ed04 	.word	0xe000ed04

08010950 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b086      	sub	sp, #24
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801095c:	2300      	movs	r3, #0
 801095e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010964:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10d      	bne.n	801098a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d14d      	bne.n	8010a12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	689b      	ldr	r3, [r3, #8]
 801097a:	4618      	mov	r0, r3
 801097c:	f000 ffbc 	bl	80118f8 <xTaskPriorityDisinherit>
 8010980:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	609a      	str	r2, [r3, #8]
 8010988:	e043      	b.n	8010a12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d119      	bne.n	80109c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	6858      	ldr	r0, [r3, #4]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010998:	461a      	mov	r2, r3
 801099a:	68b9      	ldr	r1, [r7, #8]
 801099c:	f003 f897 	bl	8013ace <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a8:	441a      	add	r2, r3
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	685a      	ldr	r2, [r3, #4]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d32b      	bcc.n	8010a12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	605a      	str	r2, [r3, #4]
 80109c2:	e026      	b.n	8010a12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	68d8      	ldr	r0, [r3, #12]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109cc:	461a      	mov	r2, r3
 80109ce:	68b9      	ldr	r1, [r7, #8]
 80109d0:	f003 f87d 	bl	8013ace <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	68da      	ldr	r2, [r3, #12]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109dc:	425b      	negs	r3, r3
 80109de:	441a      	add	r2, r3
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	68da      	ldr	r2, [r3, #12]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d207      	bcs.n	8010a00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	689a      	ldr	r2, [r3, #8]
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f8:	425b      	negs	r3, r3
 80109fa:	441a      	add	r2, r3
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	d105      	bne.n	8010a12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d002      	beq.n	8010a12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	1c5a      	adds	r2, r3, #1
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010a1a:	697b      	ldr	r3, [r7, #20]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3718      	adds	r7, #24
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d018      	beq.n	8010a68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	68da      	ldr	r2, [r3, #12]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a3e:	441a      	add	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	68da      	ldr	r2, [r3, #12]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	689b      	ldr	r3, [r3, #8]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d303      	bcc.n	8010a58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	68d9      	ldr	r1, [r3, #12]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a60:	461a      	mov	r2, r3
 8010a62:	6838      	ldr	r0, [r7, #0]
 8010a64:	f003 f833 	bl	8013ace <memcpy>
	}
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a78:	f001 fc7c 	bl	8012374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a84:	e011      	b.n	8010aaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d012      	beq.n	8010ab4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	3324      	adds	r3, #36	; 0x24
 8010a92:	4618      	mov	r0, r3
 8010a94:	f000 fd50 	bl	8011538 <xTaskRemoveFromEventList>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d001      	beq.n	8010aa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a9e:	f000 fe27 	bl	80116f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010aa2:	7bfb      	ldrb	r3, [r7, #15]
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	dce9      	bgt.n	8010a86 <prvUnlockQueue+0x16>
 8010ab2:	e000      	b.n	8010ab6 <prvUnlockQueue+0x46>
					break;
 8010ab4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	22ff      	movs	r2, #255	; 0xff
 8010aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010abe:	f001 fc89 	bl	80123d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010ac2:	f001 fc57 	bl	8012374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010acc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ace:	e011      	b.n	8010af4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	691b      	ldr	r3, [r3, #16]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d012      	beq.n	8010afe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	3310      	adds	r3, #16
 8010adc:	4618      	mov	r0, r3
 8010ade:	f000 fd2b 	bl	8011538 <xTaskRemoveFromEventList>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010ae8:	f000 fe02 	bl	80116f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010aec:	7bbb      	ldrb	r3, [r7, #14]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010af4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	dce9      	bgt.n	8010ad0 <prvUnlockQueue+0x60>
 8010afc:	e000      	b.n	8010b00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010afe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	22ff      	movs	r2, #255	; 0xff
 8010b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010b08:	f001 fc64 	bl	80123d4 <vPortExitCritical>
}
 8010b0c:	bf00      	nop
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b1c:	f001 fc2a 	bl	8012374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d102      	bne.n	8010b2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	e001      	b.n	8010b32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b32:	f001 fc4f 	bl	80123d4 <vPortExitCritical>

	return xReturn;
 8010b36:	68fb      	ldr	r3, [r7, #12]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b48:	f001 fc14 	bl	8012374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d102      	bne.n	8010b5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	60fb      	str	r3, [r7, #12]
 8010b5c:	e001      	b.n	8010b62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b62:	f001 fc37 	bl	80123d4 <vPortExitCritical>

	return xReturn;
 8010b66:	68fb      	ldr	r3, [r7, #12]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	e014      	b.n	8010baa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b80:	4a0f      	ldr	r2, [pc, #60]	; (8010bc0 <vQueueAddToRegistry+0x50>)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10b      	bne.n	8010ba4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b8c:	490c      	ldr	r1, [pc, #48]	; (8010bc0 <vQueueAddToRegistry+0x50>)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	683a      	ldr	r2, [r7, #0]
 8010b92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b96:	4a0a      	ldr	r2, [pc, #40]	; (8010bc0 <vQueueAddToRegistry+0x50>)
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	4413      	add	r3, r2
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010ba2:	e006      	b.n	8010bb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	60fb      	str	r3, [r7, #12]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2b07      	cmp	r3, #7
 8010bae:	d9e7      	bls.n	8010b80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010bb0:	bf00      	nop
 8010bb2:	bf00      	nop
 8010bb4:	3714      	adds	r7, #20
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	20004724 	.word	0x20004724

08010bc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b086      	sub	sp, #24
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010bd4:	f001 fbce 	bl	8012374 <vPortEnterCritical>
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bde:	b25b      	sxtb	r3, r3
 8010be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010be4:	d103      	bne.n	8010bee <vQueueWaitForMessageRestricted+0x2a>
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bf4:	b25b      	sxtb	r3, r3
 8010bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bfa:	d103      	bne.n	8010c04 <vQueueWaitForMessageRestricted+0x40>
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c04:	f001 fbe6 	bl	80123d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d106      	bne.n	8010c1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	3324      	adds	r3, #36	; 0x24
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	68b9      	ldr	r1, [r7, #8]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 fc61 	bl	80114e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c1e:	6978      	ldr	r0, [r7, #20]
 8010c20:	f7ff ff26 	bl	8010a70 <prvUnlockQueue>
	}
 8010c24:	bf00      	nop
 8010c26:	3718      	adds	r7, #24
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b08e      	sub	sp, #56	; 0x38
 8010c30:	af04      	add	r7, sp, #16
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d10a      	bne.n	8010c56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c44:	f383 8811 	msr	BASEPRI, r3
 8010c48:	f3bf 8f6f 	isb	sy
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	623b      	str	r3, [r7, #32]
}
 8010c52:	bf00      	nop
 8010c54:	e7fe      	b.n	8010c54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d10a      	bne.n	8010c72 <xTaskCreateStatic+0x46>
	__asm volatile
 8010c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c60:	f383 8811 	msr	BASEPRI, r3
 8010c64:	f3bf 8f6f 	isb	sy
 8010c68:	f3bf 8f4f 	dsb	sy
 8010c6c:	61fb      	str	r3, [r7, #28]
}
 8010c6e:	bf00      	nop
 8010c70:	e7fe      	b.n	8010c70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c72:	23bc      	movs	r3, #188	; 0xbc
 8010c74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	2bbc      	cmp	r3, #188	; 0xbc
 8010c7a:	d00a      	beq.n	8010c92 <xTaskCreateStatic+0x66>
	__asm volatile
 8010c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c80:	f383 8811 	msr	BASEPRI, r3
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	61bb      	str	r3, [r7, #24]
}
 8010c8e:	bf00      	nop
 8010c90:	e7fe      	b.n	8010c90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d01e      	beq.n	8010cd8 <xTaskCreateStatic+0xac>
 8010c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d01b      	beq.n	8010cd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ca8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cac:	2202      	movs	r2, #2
 8010cae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	9303      	str	r3, [sp, #12]
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb8:	9302      	str	r3, [sp, #8]
 8010cba:	f107 0314 	add.w	r3, r7, #20
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	68b9      	ldr	r1, [r7, #8]
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 f850 	bl	8010d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cd2:	f000 f8f3 	bl	8010ebc <prvAddNewTaskToReadyList>
 8010cd6:	e001      	b.n	8010cdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010cdc:	697b      	ldr	r3, [r7, #20]
	}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3728      	adds	r7, #40	; 0x28
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}

08010ce6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ce6:	b580      	push	{r7, lr}
 8010ce8:	b08c      	sub	sp, #48	; 0x30
 8010cea:	af04      	add	r7, sp, #16
 8010cec:	60f8      	str	r0, [r7, #12]
 8010cee:	60b9      	str	r1, [r7, #8]
 8010cf0:	603b      	str	r3, [r7, #0]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010cf6:	88fb      	ldrh	r3, [r7, #6]
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f001 fc5c 	bl	80125b8 <pvPortMalloc>
 8010d00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00e      	beq.n	8010d26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d08:	20bc      	movs	r0, #188	; 0xbc
 8010d0a:	f001 fc55 	bl	80125b8 <pvPortMalloc>
 8010d0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d003      	beq.n	8010d1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8010d1c:	e005      	b.n	8010d2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d1e:	6978      	ldr	r0, [r7, #20]
 8010d20:	f001 fd16 	bl	8012750 <vPortFree>
 8010d24:	e001      	b.n	8010d2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d26:	2300      	movs	r3, #0
 8010d28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d2a:	69fb      	ldr	r3, [r7, #28]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d017      	beq.n	8010d60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	2200      	movs	r2, #0
 8010d34:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d38:	88fa      	ldrh	r2, [r7, #6]
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	9303      	str	r3, [sp, #12]
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	9302      	str	r3, [sp, #8]
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	9301      	str	r3, [sp, #4]
 8010d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d48:	9300      	str	r3, [sp, #0]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	68b9      	ldr	r1, [r7, #8]
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f000 f80e 	bl	8010d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d54:	69f8      	ldr	r0, [r7, #28]
 8010d56:	f000 f8b1 	bl	8010ebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	61bb      	str	r3, [r7, #24]
 8010d5e:	e002      	b.n	8010d66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d66:	69bb      	ldr	r3, [r7, #24]
	}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3720      	adds	r7, #32
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b088      	sub	sp, #32
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	461a      	mov	r2, r3
 8010d88:	21a5      	movs	r1, #165	; 0xa5
 8010d8a:	f002 fec8 	bl	8013b1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010d98:	3b01      	subs	r3, #1
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	f023 0307 	bic.w	r3, r3, #7
 8010da6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	f003 0307 	and.w	r3, r3, #7
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00a      	beq.n	8010dc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db6:	f383 8811 	msr	BASEPRI, r3
 8010dba:	f3bf 8f6f 	isb	sy
 8010dbe:	f3bf 8f4f 	dsb	sy
 8010dc2:	617b      	str	r3, [r7, #20]
}
 8010dc4:	bf00      	nop
 8010dc6:	e7fe      	b.n	8010dc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d01f      	beq.n	8010e0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010dce:	2300      	movs	r3, #0
 8010dd0:	61fb      	str	r3, [r7, #28]
 8010dd2:	e012      	b.n	8010dfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	4413      	add	r3, r2
 8010dda:	7819      	ldrb	r1, [r3, #0]
 8010ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	4413      	add	r3, r2
 8010de2:	3334      	adds	r3, #52	; 0x34
 8010de4:	460a      	mov	r2, r1
 8010de6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010de8:	68ba      	ldr	r2, [r7, #8]
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	4413      	add	r3, r2
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d006      	beq.n	8010e02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	3301      	adds	r3, #1
 8010df8:	61fb      	str	r3, [r7, #28]
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	2b0f      	cmp	r3, #15
 8010dfe:	d9e9      	bls.n	8010dd4 <prvInitialiseNewTask+0x64>
 8010e00:	e000      	b.n	8010e04 <prvInitialiseNewTask+0x94>
			{
				break;
 8010e02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e06:	2200      	movs	r2, #0
 8010e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e0c:	e003      	b.n	8010e16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	2200      	movs	r2, #0
 8010e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e18:	2b37      	cmp	r3, #55	; 0x37
 8010e1a:	d901      	bls.n	8010e20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e1c:	2337      	movs	r3, #55	; 0x37
 8010e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2e:	2200      	movs	r2, #0
 8010e30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	3304      	adds	r3, #4
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff f978 	bl	801012c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3e:	3318      	adds	r3, #24
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7ff f973 	bl	801012c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	3354      	adds	r3, #84	; 0x54
 8010e70:	2260      	movs	r2, #96	; 0x60
 8010e72:	2100      	movs	r1, #0
 8010e74:	4618      	mov	r0, r3
 8010e76:	f002 fe52 	bl	8013b1e <memset>
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	4a0c      	ldr	r2, [pc, #48]	; (8010eb0 <prvInitialiseNewTask+0x140>)
 8010e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	4a0c      	ldr	r2, [pc, #48]	; (8010eb4 <prvInitialiseNewTask+0x144>)
 8010e84:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	4a0b      	ldr	r2, [pc, #44]	; (8010eb8 <prvInitialiseNewTask+0x148>)
 8010e8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e8c:	683a      	ldr	r2, [r7, #0]
 8010e8e:	68f9      	ldr	r1, [r7, #12]
 8010e90:	69b8      	ldr	r0, [r7, #24]
 8010e92:	f001 f941 	bl	8012118 <pxPortInitialiseStack>
 8010e96:	4602      	mov	r2, r0
 8010e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d002      	beq.n	8010ea8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ea6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ea8:	bf00      	nop
 8010eaa:	3720      	adds	r7, #32
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	08016e00 	.word	0x08016e00
 8010eb4:	08016e20 	.word	0x08016e20
 8010eb8:	08016de0 	.word	0x08016de0

08010ebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ec4:	f001 fa56 	bl	8012374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ec8:	4b2d      	ldr	r3, [pc, #180]	; (8010f80 <prvAddNewTaskToReadyList+0xc4>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	4a2c      	ldr	r2, [pc, #176]	; (8010f80 <prvAddNewTaskToReadyList+0xc4>)
 8010ed0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ed2:	4b2c      	ldr	r3, [pc, #176]	; (8010f84 <prvAddNewTaskToReadyList+0xc8>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d109      	bne.n	8010eee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010eda:	4a2a      	ldr	r2, [pc, #168]	; (8010f84 <prvAddNewTaskToReadyList+0xc8>)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ee0:	4b27      	ldr	r3, [pc, #156]	; (8010f80 <prvAddNewTaskToReadyList+0xc4>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d110      	bne.n	8010f0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ee8:	f000 fc26 	bl	8011738 <prvInitialiseTaskLists>
 8010eec:	e00d      	b.n	8010f0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010eee:	4b26      	ldr	r3, [pc, #152]	; (8010f88 <prvAddNewTaskToReadyList+0xcc>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d109      	bne.n	8010f0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ef6:	4b23      	ldr	r3, [pc, #140]	; (8010f84 <prvAddNewTaskToReadyList+0xc8>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d802      	bhi.n	8010f0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f04:	4a1f      	ldr	r2, [pc, #124]	; (8010f84 <prvAddNewTaskToReadyList+0xc8>)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f0a:	4b20      	ldr	r3, [pc, #128]	; (8010f8c <prvAddNewTaskToReadyList+0xd0>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	4a1e      	ldr	r2, [pc, #120]	; (8010f8c <prvAddNewTaskToReadyList+0xd0>)
 8010f12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f14:	4b1d      	ldr	r3, [pc, #116]	; (8010f8c <prvAddNewTaskToReadyList+0xd0>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f20:	4b1b      	ldr	r3, [pc, #108]	; (8010f90 <prvAddNewTaskToReadyList+0xd4>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d903      	bls.n	8010f30 <prvAddNewTaskToReadyList+0x74>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2c:	4a18      	ldr	r2, [pc, #96]	; (8010f90 <prvAddNewTaskToReadyList+0xd4>)
 8010f2e:	6013      	str	r3, [r2, #0]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f34:	4613      	mov	r3, r2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4a15      	ldr	r2, [pc, #84]	; (8010f94 <prvAddNewTaskToReadyList+0xd8>)
 8010f3e:	441a      	add	r2, r3
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	3304      	adds	r3, #4
 8010f44:	4619      	mov	r1, r3
 8010f46:	4610      	mov	r0, r2
 8010f48:	f7ff f8fd 	bl	8010146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f4c:	f001 fa42 	bl	80123d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f50:	4b0d      	ldr	r3, [pc, #52]	; (8010f88 <prvAddNewTaskToReadyList+0xcc>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00e      	beq.n	8010f76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f58:	4b0a      	ldr	r3, [pc, #40]	; (8010f84 <prvAddNewTaskToReadyList+0xc8>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d207      	bcs.n	8010f76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f66:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <prvAddNewTaskToReadyList+0xdc>)
 8010f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f6c:	601a      	str	r2, [r3, #0]
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f76:	bf00      	nop
 8010f78:	3708      	adds	r7, #8
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	20004c38 	.word	0x20004c38
 8010f84:	20004764 	.word	0x20004764
 8010f88:	20004c44 	.word	0x20004c44
 8010f8c:	20004c54 	.word	0x20004c54
 8010f90:	20004c40 	.word	0x20004c40
 8010f94:	20004768 	.word	0x20004768
 8010f98:	e000ed04 	.word	0xe000ed04

08010f9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d017      	beq.n	8010fde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fae:	4b13      	ldr	r3, [pc, #76]	; (8010ffc <vTaskDelay+0x60>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00a      	beq.n	8010fcc <vTaskDelay+0x30>
	__asm volatile
 8010fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fba:	f383 8811 	msr	BASEPRI, r3
 8010fbe:	f3bf 8f6f 	isb	sy
 8010fc2:	f3bf 8f4f 	dsb	sy
 8010fc6:	60bb      	str	r3, [r7, #8]
}
 8010fc8:	bf00      	nop
 8010fca:	e7fe      	b.n	8010fca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010fcc:	f000 f88a 	bl	80110e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 fcfe 	bl	80119d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fd8:	f000 f892 	bl	8011100 <xTaskResumeAll>
 8010fdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d107      	bne.n	8010ff4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010fe4:	4b06      	ldr	r3, [pc, #24]	; (8011000 <vTaskDelay+0x64>)
 8010fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fea:	601a      	str	r2, [r3, #0]
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ff4:	bf00      	nop
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	20004c60 	.word	0x20004c60
 8011000:	e000ed04 	.word	0xe000ed04

08011004 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b08a      	sub	sp, #40	; 0x28
 8011008:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801100a:	2300      	movs	r3, #0
 801100c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011012:	463a      	mov	r2, r7
 8011014:	1d39      	adds	r1, r7, #4
 8011016:	f107 0308 	add.w	r3, r7, #8
 801101a:	4618      	mov	r0, r3
 801101c:	f7ff f832 	bl	8010084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011020:	6839      	ldr	r1, [r7, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	9202      	str	r2, [sp, #8]
 8011028:	9301      	str	r3, [sp, #4]
 801102a:	2300      	movs	r3, #0
 801102c:	9300      	str	r3, [sp, #0]
 801102e:	2300      	movs	r3, #0
 8011030:	460a      	mov	r2, r1
 8011032:	4924      	ldr	r1, [pc, #144]	; (80110c4 <vTaskStartScheduler+0xc0>)
 8011034:	4824      	ldr	r0, [pc, #144]	; (80110c8 <vTaskStartScheduler+0xc4>)
 8011036:	f7ff fdf9 	bl	8010c2c <xTaskCreateStatic>
 801103a:	4603      	mov	r3, r0
 801103c:	4a23      	ldr	r2, [pc, #140]	; (80110cc <vTaskStartScheduler+0xc8>)
 801103e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011040:	4b22      	ldr	r3, [pc, #136]	; (80110cc <vTaskStartScheduler+0xc8>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011048:	2301      	movs	r3, #1
 801104a:	617b      	str	r3, [r7, #20]
 801104c:	e001      	b.n	8011052 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801104e:	2300      	movs	r3, #0
 8011050:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	2b01      	cmp	r3, #1
 8011056:	d102      	bne.n	801105e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011058:	f000 fd10 	bl	8011a7c <xTimerCreateTimerTask>
 801105c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d11b      	bne.n	801109c <vTaskStartScheduler+0x98>
	__asm volatile
 8011064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011068:	f383 8811 	msr	BASEPRI, r3
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	613b      	str	r3, [r7, #16]
}
 8011076:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011078:	4b15      	ldr	r3, [pc, #84]	; (80110d0 <vTaskStartScheduler+0xcc>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	3354      	adds	r3, #84	; 0x54
 801107e:	4a15      	ldr	r2, [pc, #84]	; (80110d4 <vTaskStartScheduler+0xd0>)
 8011080:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011082:	4b15      	ldr	r3, [pc, #84]	; (80110d8 <vTaskStartScheduler+0xd4>)
 8011084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011088:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801108a:	4b14      	ldr	r3, [pc, #80]	; (80110dc <vTaskStartScheduler+0xd8>)
 801108c:	2201      	movs	r2, #1
 801108e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011090:	4b13      	ldr	r3, [pc, #76]	; (80110e0 <vTaskStartScheduler+0xdc>)
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011096:	f001 f8cb 	bl	8012230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801109a:	e00e      	b.n	80110ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110a2:	d10a      	bne.n	80110ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	60fb      	str	r3, [r7, #12]
}
 80110b6:	bf00      	nop
 80110b8:	e7fe      	b.n	80110b8 <vTaskStartScheduler+0xb4>
}
 80110ba:	bf00      	nop
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	080169a4 	.word	0x080169a4
 80110c8:	08011709 	.word	0x08011709
 80110cc:	20004c5c 	.word	0x20004c5c
 80110d0:	20004764 	.word	0x20004764
 80110d4:	200003b8 	.word	0x200003b8
 80110d8:	20004c58 	.word	0x20004c58
 80110dc:	20004c44 	.word	0x20004c44
 80110e0:	20004c3c 	.word	0x20004c3c

080110e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110e4:	b480      	push	{r7}
 80110e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110e8:	4b04      	ldr	r3, [pc, #16]	; (80110fc <vTaskSuspendAll+0x18>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	3301      	adds	r3, #1
 80110ee:	4a03      	ldr	r2, [pc, #12]	; (80110fc <vTaskSuspendAll+0x18>)
 80110f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110f2:	bf00      	nop
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	20004c60 	.word	0x20004c60

08011100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801110a:	2300      	movs	r3, #0
 801110c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801110e:	4b42      	ldr	r3, [pc, #264]	; (8011218 <xTaskResumeAll+0x118>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d10a      	bne.n	801112c <xTaskResumeAll+0x2c>
	__asm volatile
 8011116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111a:	f383 8811 	msr	BASEPRI, r3
 801111e:	f3bf 8f6f 	isb	sy
 8011122:	f3bf 8f4f 	dsb	sy
 8011126:	603b      	str	r3, [r7, #0]
}
 8011128:	bf00      	nop
 801112a:	e7fe      	b.n	801112a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801112c:	f001 f922 	bl	8012374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011130:	4b39      	ldr	r3, [pc, #228]	; (8011218 <xTaskResumeAll+0x118>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	3b01      	subs	r3, #1
 8011136:	4a38      	ldr	r2, [pc, #224]	; (8011218 <xTaskResumeAll+0x118>)
 8011138:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801113a:	4b37      	ldr	r3, [pc, #220]	; (8011218 <xTaskResumeAll+0x118>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d162      	bne.n	8011208 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011142:	4b36      	ldr	r3, [pc, #216]	; (801121c <xTaskResumeAll+0x11c>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d05e      	beq.n	8011208 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801114a:	e02f      	b.n	80111ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801114c:	4b34      	ldr	r3, [pc, #208]	; (8011220 <xTaskResumeAll+0x120>)
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	3318      	adds	r3, #24
 8011158:	4618      	mov	r0, r3
 801115a:	f7ff f851 	bl	8010200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	3304      	adds	r3, #4
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff f84c 	bl	8010200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801116c:	4b2d      	ldr	r3, [pc, #180]	; (8011224 <xTaskResumeAll+0x124>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	429a      	cmp	r2, r3
 8011172:	d903      	bls.n	801117c <xTaskResumeAll+0x7c>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011178:	4a2a      	ldr	r2, [pc, #168]	; (8011224 <xTaskResumeAll+0x124>)
 801117a:	6013      	str	r3, [r2, #0]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011180:	4613      	mov	r3, r2
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4413      	add	r3, r2
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	4a27      	ldr	r2, [pc, #156]	; (8011228 <xTaskResumeAll+0x128>)
 801118a:	441a      	add	r2, r3
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	3304      	adds	r3, #4
 8011190:	4619      	mov	r1, r3
 8011192:	4610      	mov	r0, r2
 8011194:	f7fe ffd7 	bl	8010146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119c:	4b23      	ldr	r3, [pc, #140]	; (801122c <xTaskResumeAll+0x12c>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d302      	bcc.n	80111ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111a6:	4b22      	ldr	r3, [pc, #136]	; (8011230 <xTaskResumeAll+0x130>)
 80111a8:	2201      	movs	r2, #1
 80111aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111ac:	4b1c      	ldr	r3, [pc, #112]	; (8011220 <xTaskResumeAll+0x120>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1cb      	bne.n	801114c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d001      	beq.n	80111be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111ba:	f000 fb5f 	bl	801187c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111be:	4b1d      	ldr	r3, [pc, #116]	; (8011234 <xTaskResumeAll+0x134>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d010      	beq.n	80111ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111ca:	f000 f847 	bl	801125c <xTaskIncrementTick>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111d4:	4b16      	ldr	r3, [pc, #88]	; (8011230 <xTaskResumeAll+0x130>)
 80111d6:	2201      	movs	r2, #1
 80111d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3b01      	subs	r3, #1
 80111de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1f1      	bne.n	80111ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111e6:	4b13      	ldr	r3, [pc, #76]	; (8011234 <xTaskResumeAll+0x134>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111ec:	4b10      	ldr	r3, [pc, #64]	; (8011230 <xTaskResumeAll+0x130>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d009      	beq.n	8011208 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111f4:	2301      	movs	r3, #1
 80111f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111f8:	4b0f      	ldr	r3, [pc, #60]	; (8011238 <xTaskResumeAll+0x138>)
 80111fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	f3bf 8f4f 	dsb	sy
 8011204:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011208:	f001 f8e4 	bl	80123d4 <vPortExitCritical>

	return xAlreadyYielded;
 801120c:	68bb      	ldr	r3, [r7, #8]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	20004c60 	.word	0x20004c60
 801121c:	20004c38 	.word	0x20004c38
 8011220:	20004bf8 	.word	0x20004bf8
 8011224:	20004c40 	.word	0x20004c40
 8011228:	20004768 	.word	0x20004768
 801122c:	20004764 	.word	0x20004764
 8011230:	20004c4c 	.word	0x20004c4c
 8011234:	20004c48 	.word	0x20004c48
 8011238:	e000ed04 	.word	0xe000ed04

0801123c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011242:	4b05      	ldr	r3, [pc, #20]	; (8011258 <xTaskGetTickCount+0x1c>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011248:	687b      	ldr	r3, [r7, #4]
}
 801124a:	4618      	mov	r0, r3
 801124c:	370c      	adds	r7, #12
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	20004c3c 	.word	0x20004c3c

0801125c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011262:	2300      	movs	r3, #0
 8011264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011266:	4b4f      	ldr	r3, [pc, #316]	; (80113a4 <xTaskIncrementTick+0x148>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	f040 808f 	bne.w	801138e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011270:	4b4d      	ldr	r3, [pc, #308]	; (80113a8 <xTaskIncrementTick+0x14c>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3301      	adds	r3, #1
 8011276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011278:	4a4b      	ldr	r2, [pc, #300]	; (80113a8 <xTaskIncrementTick+0x14c>)
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d120      	bne.n	80112c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011284:	4b49      	ldr	r3, [pc, #292]	; (80113ac <xTaskIncrementTick+0x150>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00a      	beq.n	80112a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011292:	f383 8811 	msr	BASEPRI, r3
 8011296:	f3bf 8f6f 	isb	sy
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	603b      	str	r3, [r7, #0]
}
 80112a0:	bf00      	nop
 80112a2:	e7fe      	b.n	80112a2 <xTaskIncrementTick+0x46>
 80112a4:	4b41      	ldr	r3, [pc, #260]	; (80113ac <xTaskIncrementTick+0x150>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	60fb      	str	r3, [r7, #12]
 80112aa:	4b41      	ldr	r3, [pc, #260]	; (80113b0 <xTaskIncrementTick+0x154>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4a3f      	ldr	r2, [pc, #252]	; (80113ac <xTaskIncrementTick+0x150>)
 80112b0:	6013      	str	r3, [r2, #0]
 80112b2:	4a3f      	ldr	r2, [pc, #252]	; (80113b0 <xTaskIncrementTick+0x154>)
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	4b3e      	ldr	r3, [pc, #248]	; (80113b4 <xTaskIncrementTick+0x158>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3301      	adds	r3, #1
 80112be:	4a3d      	ldr	r2, [pc, #244]	; (80113b4 <xTaskIncrementTick+0x158>)
 80112c0:	6013      	str	r3, [r2, #0]
 80112c2:	f000 fadb 	bl	801187c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112c6:	4b3c      	ldr	r3, [pc, #240]	; (80113b8 <xTaskIncrementTick+0x15c>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	693a      	ldr	r2, [r7, #16]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d349      	bcc.n	8011364 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112d0:	4b36      	ldr	r3, [pc, #216]	; (80113ac <xTaskIncrementTick+0x150>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d104      	bne.n	80112e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112da:	4b37      	ldr	r3, [pc, #220]	; (80113b8 <xTaskIncrementTick+0x15c>)
 80112dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112e0:	601a      	str	r2, [r3, #0]
					break;
 80112e2:	e03f      	b.n	8011364 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112e4:	4b31      	ldr	r3, [pc, #196]	; (80113ac <xTaskIncrementTick+0x150>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	68db      	ldr	r3, [r3, #12]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112f4:	693a      	ldr	r2, [r7, #16]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d203      	bcs.n	8011304 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80112fc:	4a2e      	ldr	r2, [pc, #184]	; (80113b8 <xTaskIncrementTick+0x15c>)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011302:	e02f      	b.n	8011364 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	3304      	adds	r3, #4
 8011308:	4618      	mov	r0, r3
 801130a:	f7fe ff79 	bl	8010200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011312:	2b00      	cmp	r3, #0
 8011314:	d004      	beq.n	8011320 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	3318      	adds	r3, #24
 801131a:	4618      	mov	r0, r3
 801131c:	f7fe ff70 	bl	8010200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011324:	4b25      	ldr	r3, [pc, #148]	; (80113bc <xTaskIncrementTick+0x160>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	429a      	cmp	r2, r3
 801132a:	d903      	bls.n	8011334 <xTaskIncrementTick+0xd8>
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011330:	4a22      	ldr	r2, [pc, #136]	; (80113bc <xTaskIncrementTick+0x160>)
 8011332:	6013      	str	r3, [r2, #0]
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011338:	4613      	mov	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	4413      	add	r3, r2
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	4a1f      	ldr	r2, [pc, #124]	; (80113c0 <xTaskIncrementTick+0x164>)
 8011342:	441a      	add	r2, r3
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	3304      	adds	r3, #4
 8011348:	4619      	mov	r1, r3
 801134a:	4610      	mov	r0, r2
 801134c:	f7fe fefb 	bl	8010146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011354:	4b1b      	ldr	r3, [pc, #108]	; (80113c4 <xTaskIncrementTick+0x168>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801135a:	429a      	cmp	r2, r3
 801135c:	d3b8      	bcc.n	80112d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801135e:	2301      	movs	r3, #1
 8011360:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011362:	e7b5      	b.n	80112d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011364:	4b17      	ldr	r3, [pc, #92]	; (80113c4 <xTaskIncrementTick+0x168>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136a:	4915      	ldr	r1, [pc, #84]	; (80113c0 <xTaskIncrementTick+0x164>)
 801136c:	4613      	mov	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	440b      	add	r3, r1
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d901      	bls.n	8011380 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801137c:	2301      	movs	r3, #1
 801137e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011380:	4b11      	ldr	r3, [pc, #68]	; (80113c8 <xTaskIncrementTick+0x16c>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d007      	beq.n	8011398 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011388:	2301      	movs	r3, #1
 801138a:	617b      	str	r3, [r7, #20]
 801138c:	e004      	b.n	8011398 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801138e:	4b0f      	ldr	r3, [pc, #60]	; (80113cc <xTaskIncrementTick+0x170>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3301      	adds	r3, #1
 8011394:	4a0d      	ldr	r2, [pc, #52]	; (80113cc <xTaskIncrementTick+0x170>)
 8011396:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011398:	697b      	ldr	r3, [r7, #20]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3718      	adds	r7, #24
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	20004c60 	.word	0x20004c60
 80113a8:	20004c3c 	.word	0x20004c3c
 80113ac:	20004bf0 	.word	0x20004bf0
 80113b0:	20004bf4 	.word	0x20004bf4
 80113b4:	20004c50 	.word	0x20004c50
 80113b8:	20004c58 	.word	0x20004c58
 80113bc:	20004c40 	.word	0x20004c40
 80113c0:	20004768 	.word	0x20004768
 80113c4:	20004764 	.word	0x20004764
 80113c8:	20004c4c 	.word	0x20004c4c
 80113cc:	20004c48 	.word	0x20004c48

080113d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113d0:	b480      	push	{r7}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113d6:	4b2a      	ldr	r3, [pc, #168]	; (8011480 <vTaskSwitchContext+0xb0>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d003      	beq.n	80113e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113de:	4b29      	ldr	r3, [pc, #164]	; (8011484 <vTaskSwitchContext+0xb4>)
 80113e0:	2201      	movs	r2, #1
 80113e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113e4:	e046      	b.n	8011474 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80113e6:	4b27      	ldr	r3, [pc, #156]	; (8011484 <vTaskSwitchContext+0xb4>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ec:	4b26      	ldr	r3, [pc, #152]	; (8011488 <vTaskSwitchContext+0xb8>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	60fb      	str	r3, [r7, #12]
 80113f2:	e010      	b.n	8011416 <vTaskSwitchContext+0x46>
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d10a      	bne.n	8011410 <vTaskSwitchContext+0x40>
	__asm volatile
 80113fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	607b      	str	r3, [r7, #4]
}
 801140c:	bf00      	nop
 801140e:	e7fe      	b.n	801140e <vTaskSwitchContext+0x3e>
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	3b01      	subs	r3, #1
 8011414:	60fb      	str	r3, [r7, #12]
 8011416:	491d      	ldr	r1, [pc, #116]	; (801148c <vTaskSwitchContext+0xbc>)
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	4613      	mov	r3, r2
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	4413      	add	r3, r2
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	440b      	add	r3, r1
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d0e4      	beq.n	80113f4 <vTaskSwitchContext+0x24>
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	4613      	mov	r3, r2
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	4413      	add	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4a15      	ldr	r2, [pc, #84]	; (801148c <vTaskSwitchContext+0xbc>)
 8011436:	4413      	add	r3, r2
 8011438:	60bb      	str	r3, [r7, #8]
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	685a      	ldr	r2, [r3, #4]
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	605a      	str	r2, [r3, #4]
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	685a      	ldr	r2, [r3, #4]
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	3308      	adds	r3, #8
 801144c:	429a      	cmp	r2, r3
 801144e:	d104      	bne.n	801145a <vTaskSwitchContext+0x8a>
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	685a      	ldr	r2, [r3, #4]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	605a      	str	r2, [r3, #4]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	4a0b      	ldr	r2, [pc, #44]	; (8011490 <vTaskSwitchContext+0xc0>)
 8011462:	6013      	str	r3, [r2, #0]
 8011464:	4a08      	ldr	r2, [pc, #32]	; (8011488 <vTaskSwitchContext+0xb8>)
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801146a:	4b09      	ldr	r3, [pc, #36]	; (8011490 <vTaskSwitchContext+0xc0>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	3354      	adds	r3, #84	; 0x54
 8011470:	4a08      	ldr	r2, [pc, #32]	; (8011494 <vTaskSwitchContext+0xc4>)
 8011472:	6013      	str	r3, [r2, #0]
}
 8011474:	bf00      	nop
 8011476:	3714      	adds	r7, #20
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr
 8011480:	20004c60 	.word	0x20004c60
 8011484:	20004c4c 	.word	0x20004c4c
 8011488:	20004c40 	.word	0x20004c40
 801148c:	20004768 	.word	0x20004768
 8011490:	20004764 	.word	0x20004764
 8011494:	200003b8 	.word	0x200003b8

08011498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10a      	bne.n	80114be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80114a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ac:	f383 8811 	msr	BASEPRI, r3
 80114b0:	f3bf 8f6f 	isb	sy
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	60fb      	str	r3, [r7, #12]
}
 80114ba:	bf00      	nop
 80114bc:	e7fe      	b.n	80114bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114be:	4b07      	ldr	r3, [pc, #28]	; (80114dc <vTaskPlaceOnEventList+0x44>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	3318      	adds	r3, #24
 80114c4:	4619      	mov	r1, r3
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7fe fe61 	bl	801018e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114cc:	2101      	movs	r1, #1
 80114ce:	6838      	ldr	r0, [r7, #0]
 80114d0:	f000 fa80 	bl	80119d4 <prvAddCurrentTaskToDelayedList>
}
 80114d4:	bf00      	nop
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	20004764 	.word	0x20004764

080114e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d10a      	bne.n	8011508 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80114f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f6:	f383 8811 	msr	BASEPRI, r3
 80114fa:	f3bf 8f6f 	isb	sy
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	617b      	str	r3, [r7, #20]
}
 8011504:	bf00      	nop
 8011506:	e7fe      	b.n	8011506 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011508:	4b0a      	ldr	r3, [pc, #40]	; (8011534 <vTaskPlaceOnEventListRestricted+0x54>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	3318      	adds	r3, #24
 801150e:	4619      	mov	r1, r3
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7fe fe18 	bl	8010146 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801151c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011520:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011522:	6879      	ldr	r1, [r7, #4]
 8011524:	68b8      	ldr	r0, [r7, #8]
 8011526:	f000 fa55 	bl	80119d4 <prvAddCurrentTaskToDelayedList>
	}
 801152a:	bf00      	nop
 801152c:	3718      	adds	r7, #24
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	20004764 	.word	0x20004764

08011538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10a      	bne.n	8011564 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	60fb      	str	r3, [r7, #12]
}
 8011560:	bf00      	nop
 8011562:	e7fe      	b.n	8011562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	3318      	adds	r3, #24
 8011568:	4618      	mov	r0, r3
 801156a:	f7fe fe49 	bl	8010200 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801156e:	4b1e      	ldr	r3, [pc, #120]	; (80115e8 <xTaskRemoveFromEventList+0xb0>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d11d      	bne.n	80115b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	3304      	adds	r3, #4
 801157a:	4618      	mov	r0, r3
 801157c:	f7fe fe40 	bl	8010200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011584:	4b19      	ldr	r3, [pc, #100]	; (80115ec <xTaskRemoveFromEventList+0xb4>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	429a      	cmp	r2, r3
 801158a:	d903      	bls.n	8011594 <xTaskRemoveFromEventList+0x5c>
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011590:	4a16      	ldr	r2, [pc, #88]	; (80115ec <xTaskRemoveFromEventList+0xb4>)
 8011592:	6013      	str	r3, [r2, #0]
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011598:	4613      	mov	r3, r2
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	4413      	add	r3, r2
 801159e:	009b      	lsls	r3, r3, #2
 80115a0:	4a13      	ldr	r2, [pc, #76]	; (80115f0 <xTaskRemoveFromEventList+0xb8>)
 80115a2:	441a      	add	r2, r3
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	3304      	adds	r3, #4
 80115a8:	4619      	mov	r1, r3
 80115aa:	4610      	mov	r0, r2
 80115ac:	f7fe fdcb 	bl	8010146 <vListInsertEnd>
 80115b0:	e005      	b.n	80115be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	3318      	adds	r3, #24
 80115b6:	4619      	mov	r1, r3
 80115b8:	480e      	ldr	r0, [pc, #56]	; (80115f4 <xTaskRemoveFromEventList+0xbc>)
 80115ba:	f7fe fdc4 	bl	8010146 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c2:	4b0d      	ldr	r3, [pc, #52]	; (80115f8 <xTaskRemoveFromEventList+0xc0>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d905      	bls.n	80115d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80115cc:	2301      	movs	r3, #1
 80115ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80115d0:	4b0a      	ldr	r3, [pc, #40]	; (80115fc <xTaskRemoveFromEventList+0xc4>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	601a      	str	r2, [r3, #0]
 80115d6:	e001      	b.n	80115dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80115d8:	2300      	movs	r3, #0
 80115da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115dc:	697b      	ldr	r3, [r7, #20]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3718      	adds	r7, #24
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	20004c60 	.word	0x20004c60
 80115ec:	20004c40 	.word	0x20004c40
 80115f0:	20004768 	.word	0x20004768
 80115f4:	20004bf8 	.word	0x20004bf8
 80115f8:	20004764 	.word	0x20004764
 80115fc:	20004c4c 	.word	0x20004c4c

08011600 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011608:	4b06      	ldr	r3, [pc, #24]	; (8011624 <vTaskInternalSetTimeOutState+0x24>)
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011610:	4b05      	ldr	r3, [pc, #20]	; (8011628 <vTaskInternalSetTimeOutState+0x28>)
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	605a      	str	r2, [r3, #4]
}
 8011618:	bf00      	nop
 801161a:	370c      	adds	r7, #12
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr
 8011624:	20004c50 	.word	0x20004c50
 8011628:	20004c3c 	.word	0x20004c3c

0801162c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b088      	sub	sp, #32
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d10a      	bne.n	8011652 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801163c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011640:	f383 8811 	msr	BASEPRI, r3
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	613b      	str	r3, [r7, #16]
}
 801164e:	bf00      	nop
 8011650:	e7fe      	b.n	8011650 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d10a      	bne.n	801166e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801165c:	f383 8811 	msr	BASEPRI, r3
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	60fb      	str	r3, [r7, #12]
}
 801166a:	bf00      	nop
 801166c:	e7fe      	b.n	801166c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801166e:	f000 fe81 	bl	8012374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011672:	4b1d      	ldr	r3, [pc, #116]	; (80116e8 <xTaskCheckForTimeOut+0xbc>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	69ba      	ldr	r2, [r7, #24]
 801167e:	1ad3      	subs	r3, r2, r3
 8011680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801168a:	d102      	bne.n	8011692 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801168c:	2300      	movs	r3, #0
 801168e:	61fb      	str	r3, [r7, #28]
 8011690:	e023      	b.n	80116da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	4b15      	ldr	r3, [pc, #84]	; (80116ec <xTaskCheckForTimeOut+0xc0>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	429a      	cmp	r2, r3
 801169c:	d007      	beq.n	80116ae <xTaskCheckForTimeOut+0x82>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	69ba      	ldr	r2, [r7, #24]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d302      	bcc.n	80116ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116a8:	2301      	movs	r3, #1
 80116aa:	61fb      	str	r3, [r7, #28]
 80116ac:	e015      	b.n	80116da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d20b      	bcs.n	80116d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	1ad2      	subs	r2, r2, r3
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7ff ff9b 	bl	8011600 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80116ca:	2300      	movs	r3, #0
 80116cc:	61fb      	str	r3, [r7, #28]
 80116ce:	e004      	b.n	80116da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	2200      	movs	r2, #0
 80116d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80116d6:	2301      	movs	r3, #1
 80116d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116da:	f000 fe7b 	bl	80123d4 <vPortExitCritical>

	return xReturn;
 80116de:	69fb      	ldr	r3, [r7, #28]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3720      	adds	r7, #32
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	20004c3c 	.word	0x20004c3c
 80116ec:	20004c50 	.word	0x20004c50

080116f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116f0:	b480      	push	{r7}
 80116f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116f4:	4b03      	ldr	r3, [pc, #12]	; (8011704 <vTaskMissedYield+0x14>)
 80116f6:	2201      	movs	r2, #1
 80116f8:	601a      	str	r2, [r3, #0]
}
 80116fa:	bf00      	nop
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr
 8011704:	20004c4c 	.word	0x20004c4c

08011708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011710:	f000 f852 	bl	80117b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011714:	4b06      	ldr	r3, [pc, #24]	; (8011730 <prvIdleTask+0x28>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b01      	cmp	r3, #1
 801171a:	d9f9      	bls.n	8011710 <prvIdleTask+0x8>
			{
				taskYIELD();
 801171c:	4b05      	ldr	r3, [pc, #20]	; (8011734 <prvIdleTask+0x2c>)
 801171e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	f3bf 8f4f 	dsb	sy
 8011728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801172c:	e7f0      	b.n	8011710 <prvIdleTask+0x8>
 801172e:	bf00      	nop
 8011730:	20004768 	.word	0x20004768
 8011734:	e000ed04 	.word	0xe000ed04

08011738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801173e:	2300      	movs	r3, #0
 8011740:	607b      	str	r3, [r7, #4]
 8011742:	e00c      	b.n	801175e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	4613      	mov	r3, r2
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	4413      	add	r3, r2
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	4a12      	ldr	r2, [pc, #72]	; (8011798 <prvInitialiseTaskLists+0x60>)
 8011750:	4413      	add	r3, r2
 8011752:	4618      	mov	r0, r3
 8011754:	f7fe fcca 	bl	80100ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	3301      	adds	r3, #1
 801175c:	607b      	str	r3, [r7, #4]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2b37      	cmp	r3, #55	; 0x37
 8011762:	d9ef      	bls.n	8011744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011764:	480d      	ldr	r0, [pc, #52]	; (801179c <prvInitialiseTaskLists+0x64>)
 8011766:	f7fe fcc1 	bl	80100ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801176a:	480d      	ldr	r0, [pc, #52]	; (80117a0 <prvInitialiseTaskLists+0x68>)
 801176c:	f7fe fcbe 	bl	80100ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011770:	480c      	ldr	r0, [pc, #48]	; (80117a4 <prvInitialiseTaskLists+0x6c>)
 8011772:	f7fe fcbb 	bl	80100ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011776:	480c      	ldr	r0, [pc, #48]	; (80117a8 <prvInitialiseTaskLists+0x70>)
 8011778:	f7fe fcb8 	bl	80100ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801177c:	480b      	ldr	r0, [pc, #44]	; (80117ac <prvInitialiseTaskLists+0x74>)
 801177e:	f7fe fcb5 	bl	80100ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011782:	4b0b      	ldr	r3, [pc, #44]	; (80117b0 <prvInitialiseTaskLists+0x78>)
 8011784:	4a05      	ldr	r2, [pc, #20]	; (801179c <prvInitialiseTaskLists+0x64>)
 8011786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011788:	4b0a      	ldr	r3, [pc, #40]	; (80117b4 <prvInitialiseTaskLists+0x7c>)
 801178a:	4a05      	ldr	r2, [pc, #20]	; (80117a0 <prvInitialiseTaskLists+0x68>)
 801178c:	601a      	str	r2, [r3, #0]
}
 801178e:	bf00      	nop
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	20004768 	.word	0x20004768
 801179c:	20004bc8 	.word	0x20004bc8
 80117a0:	20004bdc 	.word	0x20004bdc
 80117a4:	20004bf8 	.word	0x20004bf8
 80117a8:	20004c0c 	.word	0x20004c0c
 80117ac:	20004c24 	.word	0x20004c24
 80117b0:	20004bf0 	.word	0x20004bf0
 80117b4:	20004bf4 	.word	0x20004bf4

080117b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117be:	e019      	b.n	80117f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80117c0:	f000 fdd8 	bl	8012374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117c4:	4b10      	ldr	r3, [pc, #64]	; (8011808 <prvCheckTasksWaitingTermination+0x50>)
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	68db      	ldr	r3, [r3, #12]
 80117ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3304      	adds	r3, #4
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fe fd15 	bl	8010200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117d6:	4b0d      	ldr	r3, [pc, #52]	; (801180c <prvCheckTasksWaitingTermination+0x54>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	3b01      	subs	r3, #1
 80117dc:	4a0b      	ldr	r2, [pc, #44]	; (801180c <prvCheckTasksWaitingTermination+0x54>)
 80117de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117e0:	4b0b      	ldr	r3, [pc, #44]	; (8011810 <prvCheckTasksWaitingTermination+0x58>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3b01      	subs	r3, #1
 80117e6:	4a0a      	ldr	r2, [pc, #40]	; (8011810 <prvCheckTasksWaitingTermination+0x58>)
 80117e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117ea:	f000 fdf3 	bl	80123d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f810 	bl	8011814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117f4:	4b06      	ldr	r3, [pc, #24]	; (8011810 <prvCheckTasksWaitingTermination+0x58>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1e1      	bne.n	80117c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117fc:	bf00      	nop
 80117fe:	bf00      	nop
 8011800:	3708      	adds	r7, #8
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	20004c0c 	.word	0x20004c0c
 801180c:	20004c38 	.word	0x20004c38
 8011810:	20004c20 	.word	0x20004c20

08011814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	3354      	adds	r3, #84	; 0x54
 8011820:	4618      	mov	r0, r3
 8011822:	f002 fe91 	bl	8014548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801182c:	2b00      	cmp	r3, #0
 801182e:	d108      	bne.n	8011842 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011834:	4618      	mov	r0, r3
 8011836:	f000 ff8b 	bl	8012750 <vPortFree>
				vPortFree( pxTCB );
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 ff88 	bl	8012750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011840:	e018      	b.n	8011874 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011848:	2b01      	cmp	r3, #1
 801184a:	d103      	bne.n	8011854 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f000 ff7f 	bl	8012750 <vPortFree>
	}
 8011852:	e00f      	b.n	8011874 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801185a:	2b02      	cmp	r3, #2
 801185c:	d00a      	beq.n	8011874 <prvDeleteTCB+0x60>
	__asm volatile
 801185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011862:	f383 8811 	msr	BASEPRI, r3
 8011866:	f3bf 8f6f 	isb	sy
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	60fb      	str	r3, [r7, #12]
}
 8011870:	bf00      	nop
 8011872:	e7fe      	b.n	8011872 <prvDeleteTCB+0x5e>
	}
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011882:	4b0c      	ldr	r3, [pc, #48]	; (80118b4 <prvResetNextTaskUnblockTime+0x38>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d104      	bne.n	8011896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801188c:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <prvResetNextTaskUnblockTime+0x3c>)
 801188e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011894:	e008      	b.n	80118a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011896:	4b07      	ldr	r3, [pc, #28]	; (80118b4 <prvResetNextTaskUnblockTime+0x38>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	4a04      	ldr	r2, [pc, #16]	; (80118b8 <prvResetNextTaskUnblockTime+0x3c>)
 80118a6:	6013      	str	r3, [r2, #0]
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	20004bf0 	.word	0x20004bf0
 80118b8:	20004c58 	.word	0x20004c58

080118bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80118c2:	4b0b      	ldr	r3, [pc, #44]	; (80118f0 <xTaskGetSchedulerState+0x34>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d102      	bne.n	80118d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80118ca:	2301      	movs	r3, #1
 80118cc:	607b      	str	r3, [r7, #4]
 80118ce:	e008      	b.n	80118e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118d0:	4b08      	ldr	r3, [pc, #32]	; (80118f4 <xTaskGetSchedulerState+0x38>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d102      	bne.n	80118de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118d8:	2302      	movs	r3, #2
 80118da:	607b      	str	r3, [r7, #4]
 80118dc:	e001      	b.n	80118e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118de:	2300      	movs	r3, #0
 80118e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118e2:	687b      	ldr	r3, [r7, #4]
	}
 80118e4:	4618      	mov	r0, r3
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	20004c44 	.word	0x20004c44
 80118f4:	20004c60 	.word	0x20004c60

080118f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011904:	2300      	movs	r3, #0
 8011906:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d056      	beq.n	80119bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801190e:	4b2e      	ldr	r3, [pc, #184]	; (80119c8 <xTaskPriorityDisinherit+0xd0>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	429a      	cmp	r2, r3
 8011916:	d00a      	beq.n	801192e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	60fb      	str	r3, [r7, #12]
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011932:	2b00      	cmp	r3, #0
 8011934:	d10a      	bne.n	801194c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801193a:	f383 8811 	msr	BASEPRI, r3
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f3bf 8f4f 	dsb	sy
 8011946:	60bb      	str	r3, [r7, #8]
}
 8011948:	bf00      	nop
 801194a:	e7fe      	b.n	801194a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011950:	1e5a      	subs	r2, r3, #1
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801195e:	429a      	cmp	r2, r3
 8011960:	d02c      	beq.n	80119bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011966:	2b00      	cmp	r3, #0
 8011968:	d128      	bne.n	80119bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	3304      	adds	r3, #4
 801196e:	4618      	mov	r0, r3
 8011970:	f7fe fc46 	bl	8010200 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011980:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801198c:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <xTaskPriorityDisinherit+0xd4>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	429a      	cmp	r2, r3
 8011992:	d903      	bls.n	801199c <xTaskPriorityDisinherit+0xa4>
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011998:	4a0c      	ldr	r2, [pc, #48]	; (80119cc <xTaskPriorityDisinherit+0xd4>)
 801199a:	6013      	str	r3, [r2, #0]
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a0:	4613      	mov	r3, r2
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	4413      	add	r3, r2
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4a09      	ldr	r2, [pc, #36]	; (80119d0 <xTaskPriorityDisinherit+0xd8>)
 80119aa:	441a      	add	r2, r3
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	3304      	adds	r3, #4
 80119b0:	4619      	mov	r1, r3
 80119b2:	4610      	mov	r0, r2
 80119b4:	f7fe fbc7 	bl	8010146 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80119b8:	2301      	movs	r3, #1
 80119ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119bc:	697b      	ldr	r3, [r7, #20]
	}
 80119be:	4618      	mov	r0, r3
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	20004764 	.word	0x20004764
 80119cc:	20004c40 	.word	0x20004c40
 80119d0:	20004768 	.word	0x20004768

080119d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80119de:	4b21      	ldr	r3, [pc, #132]	; (8011a64 <prvAddCurrentTaskToDelayedList+0x90>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119e4:	4b20      	ldr	r3, [pc, #128]	; (8011a68 <prvAddCurrentTaskToDelayedList+0x94>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	3304      	adds	r3, #4
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe fc08 	bl	8010200 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119f6:	d10a      	bne.n	8011a0e <prvAddCurrentTaskToDelayedList+0x3a>
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d007      	beq.n	8011a0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119fe:	4b1a      	ldr	r3, [pc, #104]	; (8011a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	3304      	adds	r3, #4
 8011a04:	4619      	mov	r1, r3
 8011a06:	4819      	ldr	r0, [pc, #100]	; (8011a6c <prvAddCurrentTaskToDelayedList+0x98>)
 8011a08:	f7fe fb9d 	bl	8010146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a0c:	e026      	b.n	8011a5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a0e:	68fa      	ldr	r2, [r7, #12]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4413      	add	r3, r2
 8011a14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a16:	4b14      	ldr	r3, [pc, #80]	; (8011a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d209      	bcs.n	8011a3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a26:	4b12      	ldr	r3, [pc, #72]	; (8011a70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	4b0f      	ldr	r3, [pc, #60]	; (8011a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	3304      	adds	r3, #4
 8011a30:	4619      	mov	r1, r3
 8011a32:	4610      	mov	r0, r2
 8011a34:	f7fe fbab 	bl	801018e <vListInsert>
}
 8011a38:	e010      	b.n	8011a5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a3a:	4b0e      	ldr	r3, [pc, #56]	; (8011a74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	4b0a      	ldr	r3, [pc, #40]	; (8011a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	3304      	adds	r3, #4
 8011a44:	4619      	mov	r1, r3
 8011a46:	4610      	mov	r0, r2
 8011a48:	f7fe fba1 	bl	801018e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a4c:	4b0a      	ldr	r3, [pc, #40]	; (8011a78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d202      	bcs.n	8011a5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011a56:	4a08      	ldr	r2, [pc, #32]	; (8011a78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	6013      	str	r3, [r2, #0]
}
 8011a5c:	bf00      	nop
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	20004c3c 	.word	0x20004c3c
 8011a68:	20004764 	.word	0x20004764
 8011a6c:	20004c24 	.word	0x20004c24
 8011a70:	20004bf4 	.word	0x20004bf4
 8011a74:	20004bf0 	.word	0x20004bf0
 8011a78:	20004c58 	.word	0x20004c58

08011a7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b08a      	sub	sp, #40	; 0x28
 8011a80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011a82:	2300      	movs	r3, #0
 8011a84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011a86:	f000 fb07 	bl	8012098 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011a8a:	4b1c      	ldr	r3, [pc, #112]	; (8011afc <xTimerCreateTimerTask+0x80>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d021      	beq.n	8011ad6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011a92:	2300      	movs	r3, #0
 8011a94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011a96:	2300      	movs	r3, #0
 8011a98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011a9a:	1d3a      	adds	r2, r7, #4
 8011a9c:	f107 0108 	add.w	r1, r7, #8
 8011aa0:	f107 030c 	add.w	r3, r7, #12
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fe fb07 	bl	80100b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011aaa:	6879      	ldr	r1, [r7, #4]
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	68fa      	ldr	r2, [r7, #12]
 8011ab0:	9202      	str	r2, [sp, #8]
 8011ab2:	9301      	str	r3, [sp, #4]
 8011ab4:	2302      	movs	r3, #2
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	460a      	mov	r2, r1
 8011abc:	4910      	ldr	r1, [pc, #64]	; (8011b00 <xTimerCreateTimerTask+0x84>)
 8011abe:	4811      	ldr	r0, [pc, #68]	; (8011b04 <xTimerCreateTimerTask+0x88>)
 8011ac0:	f7ff f8b4 	bl	8010c2c <xTaskCreateStatic>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	4a10      	ldr	r2, [pc, #64]	; (8011b08 <xTimerCreateTimerTask+0x8c>)
 8011ac8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011aca:	4b0f      	ldr	r3, [pc, #60]	; (8011b08 <xTimerCreateTimerTask+0x8c>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d001      	beq.n	8011ad6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d10a      	bne.n	8011af2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	613b      	str	r3, [r7, #16]
}
 8011aee:	bf00      	nop
 8011af0:	e7fe      	b.n	8011af0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011af2:	697b      	ldr	r3, [r7, #20]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3718      	adds	r7, #24
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20004c94 	.word	0x20004c94
 8011b00:	080169ac 	.word	0x080169ac
 8011b04:	08011c41 	.word	0x08011c41
 8011b08:	20004c98 	.word	0x20004c98

08011b0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b08a      	sub	sp, #40	; 0x28
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10a      	bne.n	8011b3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b28:	f383 8811 	msr	BASEPRI, r3
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	f3bf 8f4f 	dsb	sy
 8011b34:	623b      	str	r3, [r7, #32]
}
 8011b36:	bf00      	nop
 8011b38:	e7fe      	b.n	8011b38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011b3a:	4b1a      	ldr	r3, [pc, #104]	; (8011ba4 <xTimerGenericCommand+0x98>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d02a      	beq.n	8011b98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	2b05      	cmp	r3, #5
 8011b52:	dc18      	bgt.n	8011b86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011b54:	f7ff feb2 	bl	80118bc <xTaskGetSchedulerState>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b02      	cmp	r3, #2
 8011b5c:	d109      	bne.n	8011b72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011b5e:	4b11      	ldr	r3, [pc, #68]	; (8011ba4 <xTimerGenericCommand+0x98>)
 8011b60:	6818      	ldr	r0, [r3, #0]
 8011b62:	f107 0110 	add.w	r1, r7, #16
 8011b66:	2300      	movs	r3, #0
 8011b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b6a:	f7fe fc77 	bl	801045c <xQueueGenericSend>
 8011b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8011b70:	e012      	b.n	8011b98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011b72:	4b0c      	ldr	r3, [pc, #48]	; (8011ba4 <xTimerGenericCommand+0x98>)
 8011b74:	6818      	ldr	r0, [r3, #0]
 8011b76:	f107 0110 	add.w	r1, r7, #16
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f7fe fc6d 	bl	801045c <xQueueGenericSend>
 8011b82:	6278      	str	r0, [r7, #36]	; 0x24
 8011b84:	e008      	b.n	8011b98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011b86:	4b07      	ldr	r3, [pc, #28]	; (8011ba4 <xTimerGenericCommand+0x98>)
 8011b88:	6818      	ldr	r0, [r3, #0]
 8011b8a:	f107 0110 	add.w	r1, r7, #16
 8011b8e:	2300      	movs	r3, #0
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	f7fe fd61 	bl	8010658 <xQueueGenericSendFromISR>
 8011b96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3728      	adds	r7, #40	; 0x28
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20004c94 	.word	0x20004c94

08011ba8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b088      	sub	sp, #32
 8011bac:	af02      	add	r7, sp, #8
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bb2:	4b22      	ldr	r3, [pc, #136]	; (8011c3c <prvProcessExpiredTimer+0x94>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fe fb1d 	bl	8010200 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bcc:	f003 0304 	and.w	r3, r3, #4
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d022      	beq.n	8011c1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	699a      	ldr	r2, [r3, #24]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	18d1      	adds	r1, r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	683a      	ldr	r2, [r7, #0]
 8011be0:	6978      	ldr	r0, [r7, #20]
 8011be2:	f000 f8d1 	bl	8011d88 <prvInsertTimerInActiveList>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d01f      	beq.n	8011c2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bec:	2300      	movs	r3, #0
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	6978      	ldr	r0, [r7, #20]
 8011bf8:	f7ff ff88 	bl	8011b0c <xTimerGenericCommand>
 8011bfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d113      	bne.n	8011c2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c08:	f383 8811 	msr	BASEPRI, r3
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	60fb      	str	r3, [r7, #12]
}
 8011c16:	bf00      	nop
 8011c18:	e7fe      	b.n	8011c18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c20:	f023 0301 	bic.w	r3, r3, #1
 8011c24:	b2da      	uxtb	r2, r3
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	6a1b      	ldr	r3, [r3, #32]
 8011c30:	6978      	ldr	r0, [r7, #20]
 8011c32:	4798      	blx	r3
}
 8011c34:	bf00      	nop
 8011c36:	3718      	adds	r7, #24
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	20004c8c 	.word	0x20004c8c

08011c40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c48:	f107 0308 	add.w	r3, r7, #8
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f000 f857 	bl	8011d00 <prvGetNextExpireTime>
 8011c52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	4619      	mov	r1, r3
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f000 f803 	bl	8011c64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011c5e:	f000 f8d5 	bl	8011e0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c62:	e7f1      	b.n	8011c48 <prvTimerTask+0x8>

08011c64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011c6e:	f7ff fa39 	bl	80110e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c72:	f107 0308 	add.w	r3, r7, #8
 8011c76:	4618      	mov	r0, r3
 8011c78:	f000 f866 	bl	8011d48 <prvSampleTimeNow>
 8011c7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d130      	bne.n	8011ce6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d10a      	bne.n	8011ca0 <prvProcessTimerOrBlockTask+0x3c>
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d806      	bhi.n	8011ca0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011c92:	f7ff fa35 	bl	8011100 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011c96:	68f9      	ldr	r1, [r7, #12]
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f7ff ff85 	bl	8011ba8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011c9e:	e024      	b.n	8011cea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d008      	beq.n	8011cb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011ca6:	4b13      	ldr	r3, [pc, #76]	; (8011cf4 <prvProcessTimerOrBlockTask+0x90>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <prvProcessTimerOrBlockTask+0x50>
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	e000      	b.n	8011cb6 <prvProcessTimerOrBlockTask+0x52>
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011cb8:	4b0f      	ldr	r3, [pc, #60]	; (8011cf8 <prvProcessTimerOrBlockTask+0x94>)
 8011cba:	6818      	ldr	r0, [r3, #0]
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	1ad3      	subs	r3, r2, r3
 8011cc2:	683a      	ldr	r2, [r7, #0]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	f7fe ff7d 	bl	8010bc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011cca:	f7ff fa19 	bl	8011100 <xTaskResumeAll>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d10a      	bne.n	8011cea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011cd4:	4b09      	ldr	r3, [pc, #36]	; (8011cfc <prvProcessTimerOrBlockTask+0x98>)
 8011cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cda:	601a      	str	r2, [r3, #0]
 8011cdc:	f3bf 8f4f 	dsb	sy
 8011ce0:	f3bf 8f6f 	isb	sy
}
 8011ce4:	e001      	b.n	8011cea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011ce6:	f7ff fa0b 	bl	8011100 <xTaskResumeAll>
}
 8011cea:	bf00      	nop
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	20004c90 	.word	0x20004c90
 8011cf8:	20004c94 	.word	0x20004c94
 8011cfc:	e000ed04 	.word	0xe000ed04

08011d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d00:	b480      	push	{r7}
 8011d02:	b085      	sub	sp, #20
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d08:	4b0e      	ldr	r3, [pc, #56]	; (8011d44 <prvGetNextExpireTime+0x44>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d101      	bne.n	8011d16 <prvGetNextExpireTime+0x16>
 8011d12:	2201      	movs	r2, #1
 8011d14:	e000      	b.n	8011d18 <prvGetNextExpireTime+0x18>
 8011d16:	2200      	movs	r2, #0
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d105      	bne.n	8011d30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d24:	4b07      	ldr	r3, [pc, #28]	; (8011d44 <prvGetNextExpireTime+0x44>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	e001      	b.n	8011d34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011d30:	2300      	movs	r3, #0
 8011d32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011d34:	68fb      	ldr	r3, [r7, #12]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	20004c8c 	.word	0x20004c8c

08011d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b084      	sub	sp, #16
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011d50:	f7ff fa74 	bl	801123c <xTaskGetTickCount>
 8011d54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011d56:	4b0b      	ldr	r3, [pc, #44]	; (8011d84 <prvSampleTimeNow+0x3c>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	68fa      	ldr	r2, [r7, #12]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d205      	bcs.n	8011d6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011d60:	f000 f936 	bl	8011fd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	601a      	str	r2, [r3, #0]
 8011d6a:	e002      	b.n	8011d72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011d72:	4a04      	ldr	r2, [pc, #16]	; (8011d84 <prvSampleTimeNow+0x3c>)
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011d78:	68fb      	ldr	r3, [r7, #12]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3710      	adds	r7, #16
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	20004c9c 	.word	0x20004c9c

08011d88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b086      	sub	sp, #24
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	607a      	str	r2, [r7, #4]
 8011d94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011d96:	2300      	movs	r3, #0
 8011d98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	68ba      	ldr	r2, [r7, #8]
 8011d9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011da6:	68ba      	ldr	r2, [r7, #8]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d812      	bhi.n	8011dd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	1ad2      	subs	r2, r2, r3
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	699b      	ldr	r3, [r3, #24]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d302      	bcc.n	8011dc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	617b      	str	r3, [r7, #20]
 8011dc0:	e01b      	b.n	8011dfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011dc2:	4b10      	ldr	r3, [pc, #64]	; (8011e04 <prvInsertTimerInActiveList+0x7c>)
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3304      	adds	r3, #4
 8011dca:	4619      	mov	r1, r3
 8011dcc:	4610      	mov	r0, r2
 8011dce:	f7fe f9de 	bl	801018e <vListInsert>
 8011dd2:	e012      	b.n	8011dfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d206      	bcs.n	8011dea <prvInsertTimerInActiveList+0x62>
 8011ddc:	68ba      	ldr	r2, [r7, #8]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d302      	bcc.n	8011dea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011de4:	2301      	movs	r3, #1
 8011de6:	617b      	str	r3, [r7, #20]
 8011de8:	e007      	b.n	8011dfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011dea:	4b07      	ldr	r3, [pc, #28]	; (8011e08 <prvInsertTimerInActiveList+0x80>)
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	3304      	adds	r3, #4
 8011df2:	4619      	mov	r1, r3
 8011df4:	4610      	mov	r0, r2
 8011df6:	f7fe f9ca 	bl	801018e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011dfa:	697b      	ldr	r3, [r7, #20]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	20004c90 	.word	0x20004c90
 8011e08:	20004c8c 	.word	0x20004c8c

08011e0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b08e      	sub	sp, #56	; 0x38
 8011e10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e12:	e0ca      	b.n	8011faa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	da18      	bge.n	8011e4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e1a:	1d3b      	adds	r3, r7, #4
 8011e1c:	3304      	adds	r3, #4
 8011e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d10a      	bne.n	8011e3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	61fb      	str	r3, [r7, #28]
}
 8011e38:	bf00      	nop
 8011e3a:	e7fe      	b.n	8011e3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e42:	6850      	ldr	r0, [r2, #4]
 8011e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e46:	6892      	ldr	r2, [r2, #8]
 8011e48:	4611      	mov	r1, r2
 8011e4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f2c0 80aa 	blt.w	8011fa8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5a:	695b      	ldr	r3, [r3, #20]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d004      	beq.n	8011e6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e62:	3304      	adds	r3, #4
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fe f9cb 	bl	8010200 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e6a:	463b      	mov	r3, r7
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ff ff6b 	bl	8011d48 <prvSampleTimeNow>
 8011e72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b09      	cmp	r3, #9
 8011e78:	f200 8097 	bhi.w	8011faa <prvProcessReceivedCommands+0x19e>
 8011e7c:	a201      	add	r2, pc, #4	; (adr r2, 8011e84 <prvProcessReceivedCommands+0x78>)
 8011e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e82:	bf00      	nop
 8011e84:	08011ead 	.word	0x08011ead
 8011e88:	08011ead 	.word	0x08011ead
 8011e8c:	08011ead 	.word	0x08011ead
 8011e90:	08011f21 	.word	0x08011f21
 8011e94:	08011f35 	.word	0x08011f35
 8011e98:	08011f7f 	.word	0x08011f7f
 8011e9c:	08011ead 	.word	0x08011ead
 8011ea0:	08011ead 	.word	0x08011ead
 8011ea4:	08011f21 	.word	0x08011f21
 8011ea8:	08011f35 	.word	0x08011f35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011eb2:	f043 0301 	orr.w	r3, r3, #1
 8011eb6:	b2da      	uxtb	r2, r3
 8011eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec2:	699b      	ldr	r3, [r3, #24]
 8011ec4:	18d1      	adds	r1, r2, r3
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ecc:	f7ff ff5c 	bl	8011d88 <prvInsertTimerInActiveList>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d069      	beq.n	8011faa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	6a1b      	ldr	r3, [r3, #32]
 8011eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011edc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ee4:	f003 0304 	and.w	r3, r3, #4
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d05e      	beq.n	8011faa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	699b      	ldr	r3, [r3, #24]
 8011ef2:	441a      	add	r2, r3
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	9300      	str	r3, [sp, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	2100      	movs	r1, #0
 8011efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011efe:	f7ff fe05 	bl	8011b0c <xTimerGenericCommand>
 8011f02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d14f      	bne.n	8011faa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0e:	f383 8811 	msr	BASEPRI, r3
 8011f12:	f3bf 8f6f 	isb	sy
 8011f16:	f3bf 8f4f 	dsb	sy
 8011f1a:	61bb      	str	r3, [r7, #24]
}
 8011f1c:	bf00      	nop
 8011f1e:	e7fe      	b.n	8011f1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f26:	f023 0301 	bic.w	r3, r3, #1
 8011f2a:	b2da      	uxtb	r2, r3
 8011f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011f32:	e03a      	b.n	8011faa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f3a:	f043 0301 	orr.w	r3, r3, #1
 8011f3e:	b2da      	uxtb	r2, r3
 8011f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011f46:	68ba      	ldr	r2, [r7, #8]
 8011f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4e:	699b      	ldr	r3, [r3, #24]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d10a      	bne.n	8011f6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f58:	f383 8811 	msr	BASEPRI, r3
 8011f5c:	f3bf 8f6f 	isb	sy
 8011f60:	f3bf 8f4f 	dsb	sy
 8011f64:	617b      	str	r3, [r7, #20]
}
 8011f66:	bf00      	nop
 8011f68:	e7fe      	b.n	8011f68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6c:	699a      	ldr	r2, [r3, #24]
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f70:	18d1      	adds	r1, r2, r3
 8011f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f78:	f7ff ff06 	bl	8011d88 <prvInsertTimerInActiveList>
					break;
 8011f7c:	e015      	b.n	8011faa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f84:	f003 0302 	and.w	r3, r3, #2
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d103      	bne.n	8011f94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f8e:	f000 fbdf 	bl	8012750 <vPortFree>
 8011f92:	e00a      	b.n	8011faa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f9a:	f023 0301 	bic.w	r3, r3, #1
 8011f9e:	b2da      	uxtb	r2, r3
 8011fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011fa6:	e000      	b.n	8011faa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011fa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011faa:	4b08      	ldr	r3, [pc, #32]	; (8011fcc <prvProcessReceivedCommands+0x1c0>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	1d39      	adds	r1, r7, #4
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fe fbec 	bl	8010790 <xQueueReceive>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f47f af2a 	bne.w	8011e14 <prvProcessReceivedCommands+0x8>
	}
}
 8011fc0:	bf00      	nop
 8011fc2:	bf00      	nop
 8011fc4:	3730      	adds	r7, #48	; 0x30
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	20004c94 	.word	0x20004c94

08011fd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b088      	sub	sp, #32
 8011fd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011fd6:	e048      	b.n	801206a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011fd8:	4b2d      	ldr	r3, [pc, #180]	; (8012090 <prvSwitchTimerLists+0xc0>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fe2:	4b2b      	ldr	r3, [pc, #172]	; (8012090 <prvSwitchTimerLists+0xc0>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	3304      	adds	r3, #4
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7fe f905 	bl	8010200 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012004:	f003 0304 	and.w	r3, r3, #4
 8012008:	2b00      	cmp	r3, #0
 801200a:	d02e      	beq.n	801206a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	699b      	ldr	r3, [r3, #24]
 8012010:	693a      	ldr	r2, [r7, #16]
 8012012:	4413      	add	r3, r2
 8012014:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012016:	68ba      	ldr	r2, [r7, #8]
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	429a      	cmp	r2, r3
 801201c:	d90e      	bls.n	801203c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	68ba      	ldr	r2, [r7, #8]
 8012022:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	68fa      	ldr	r2, [r7, #12]
 8012028:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801202a:	4b19      	ldr	r3, [pc, #100]	; (8012090 <prvSwitchTimerLists+0xc0>)
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3304      	adds	r3, #4
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7fe f8aa 	bl	801018e <vListInsert>
 801203a:	e016      	b.n	801206a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801203c:	2300      	movs	r3, #0
 801203e:	9300      	str	r3, [sp, #0]
 8012040:	2300      	movs	r3, #0
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	2100      	movs	r1, #0
 8012046:	68f8      	ldr	r0, [r7, #12]
 8012048:	f7ff fd60 	bl	8011b0c <xTimerGenericCommand>
 801204c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d10a      	bne.n	801206a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012058:	f383 8811 	msr	BASEPRI, r3
 801205c:	f3bf 8f6f 	isb	sy
 8012060:	f3bf 8f4f 	dsb	sy
 8012064:	603b      	str	r3, [r7, #0]
}
 8012066:	bf00      	nop
 8012068:	e7fe      	b.n	8012068 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801206a:	4b09      	ldr	r3, [pc, #36]	; (8012090 <prvSwitchTimerLists+0xc0>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1b1      	bne.n	8011fd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012074:	4b06      	ldr	r3, [pc, #24]	; (8012090 <prvSwitchTimerLists+0xc0>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801207a:	4b06      	ldr	r3, [pc, #24]	; (8012094 <prvSwitchTimerLists+0xc4>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	4a04      	ldr	r2, [pc, #16]	; (8012090 <prvSwitchTimerLists+0xc0>)
 8012080:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012082:	4a04      	ldr	r2, [pc, #16]	; (8012094 <prvSwitchTimerLists+0xc4>)
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	6013      	str	r3, [r2, #0]
}
 8012088:	bf00      	nop
 801208a:	3718      	adds	r7, #24
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	20004c8c 	.word	0x20004c8c
 8012094:	20004c90 	.word	0x20004c90

08012098 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801209e:	f000 f969 	bl	8012374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80120a2:	4b15      	ldr	r3, [pc, #84]	; (80120f8 <prvCheckForValidListAndQueue+0x60>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d120      	bne.n	80120ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80120aa:	4814      	ldr	r0, [pc, #80]	; (80120fc <prvCheckForValidListAndQueue+0x64>)
 80120ac:	f7fe f81e 	bl	80100ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80120b0:	4813      	ldr	r0, [pc, #76]	; (8012100 <prvCheckForValidListAndQueue+0x68>)
 80120b2:	f7fe f81b 	bl	80100ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80120b6:	4b13      	ldr	r3, [pc, #76]	; (8012104 <prvCheckForValidListAndQueue+0x6c>)
 80120b8:	4a10      	ldr	r2, [pc, #64]	; (80120fc <prvCheckForValidListAndQueue+0x64>)
 80120ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80120bc:	4b12      	ldr	r3, [pc, #72]	; (8012108 <prvCheckForValidListAndQueue+0x70>)
 80120be:	4a10      	ldr	r2, [pc, #64]	; (8012100 <prvCheckForValidListAndQueue+0x68>)
 80120c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80120c2:	2300      	movs	r3, #0
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	4b11      	ldr	r3, [pc, #68]	; (801210c <prvCheckForValidListAndQueue+0x74>)
 80120c8:	4a11      	ldr	r2, [pc, #68]	; (8012110 <prvCheckForValidListAndQueue+0x78>)
 80120ca:	2110      	movs	r1, #16
 80120cc:	200a      	movs	r0, #10
 80120ce:	f7fe f929 	bl	8010324 <xQueueGenericCreateStatic>
 80120d2:	4603      	mov	r3, r0
 80120d4:	4a08      	ldr	r2, [pc, #32]	; (80120f8 <prvCheckForValidListAndQueue+0x60>)
 80120d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80120d8:	4b07      	ldr	r3, [pc, #28]	; (80120f8 <prvCheckForValidListAndQueue+0x60>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d005      	beq.n	80120ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80120e0:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <prvCheckForValidListAndQueue+0x60>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	490b      	ldr	r1, [pc, #44]	; (8012114 <prvCheckForValidListAndQueue+0x7c>)
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fe fd42 	bl	8010b70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80120ec:	f000 f972 	bl	80123d4 <vPortExitCritical>
}
 80120f0:	bf00      	nop
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	20004c94 	.word	0x20004c94
 80120fc:	20004c64 	.word	0x20004c64
 8012100:	20004c78 	.word	0x20004c78
 8012104:	20004c8c 	.word	0x20004c8c
 8012108:	20004c90 	.word	0x20004c90
 801210c:	20004d40 	.word	0x20004d40
 8012110:	20004ca0 	.word	0x20004ca0
 8012114:	080169b4 	.word	0x080169b4

08012118 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012118:	b480      	push	{r7}
 801211a:	b085      	sub	sp, #20
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	3b04      	subs	r3, #4
 8012128:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	3b04      	subs	r3, #4
 8012136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	f023 0201 	bic.w	r2, r3, #1
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	3b04      	subs	r3, #4
 8012146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012148:	4a0c      	ldr	r2, [pc, #48]	; (801217c <pxPortInitialiseStack+0x64>)
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	3b14      	subs	r3, #20
 8012152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	3b04      	subs	r3, #4
 801215e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f06f 0202 	mvn.w	r2, #2
 8012166:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	3b20      	subs	r3, #32
 801216c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801216e:	68fb      	ldr	r3, [r7, #12]
}
 8012170:	4618      	mov	r0, r3
 8012172:	3714      	adds	r7, #20
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr
 801217c:	08012181 	.word	0x08012181

08012180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012180:	b480      	push	{r7}
 8012182:	b085      	sub	sp, #20
 8012184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012186:	2300      	movs	r3, #0
 8012188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801218a:	4b12      	ldr	r3, [pc, #72]	; (80121d4 <prvTaskExitError+0x54>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012192:	d00a      	beq.n	80121aa <prvTaskExitError+0x2a>
	__asm volatile
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	60fb      	str	r3, [r7, #12]
}
 80121a6:	bf00      	nop
 80121a8:	e7fe      	b.n	80121a8 <prvTaskExitError+0x28>
	__asm volatile
 80121aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ae:	f383 8811 	msr	BASEPRI, r3
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	f3bf 8f4f 	dsb	sy
 80121ba:	60bb      	str	r3, [r7, #8]
}
 80121bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80121be:	bf00      	nop
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d0fc      	beq.n	80121c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80121c6:	bf00      	nop
 80121c8:	bf00      	nop
 80121ca:	3714      	adds	r7, #20
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr
 80121d4:	20000340 	.word	0x20000340
	...

080121e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80121e0:	4b07      	ldr	r3, [pc, #28]	; (8012200 <pxCurrentTCBConst2>)
 80121e2:	6819      	ldr	r1, [r3, #0]
 80121e4:	6808      	ldr	r0, [r1, #0]
 80121e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ea:	f380 8809 	msr	PSP, r0
 80121ee:	f3bf 8f6f 	isb	sy
 80121f2:	f04f 0000 	mov.w	r0, #0
 80121f6:	f380 8811 	msr	BASEPRI, r0
 80121fa:	4770      	bx	lr
 80121fc:	f3af 8000 	nop.w

08012200 <pxCurrentTCBConst2>:
 8012200:	20004764 	.word	0x20004764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop

08012208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012208:	4808      	ldr	r0, [pc, #32]	; (801222c <prvPortStartFirstTask+0x24>)
 801220a:	6800      	ldr	r0, [r0, #0]
 801220c:	6800      	ldr	r0, [r0, #0]
 801220e:	f380 8808 	msr	MSP, r0
 8012212:	f04f 0000 	mov.w	r0, #0
 8012216:	f380 8814 	msr	CONTROL, r0
 801221a:	b662      	cpsie	i
 801221c:	b661      	cpsie	f
 801221e:	f3bf 8f4f 	dsb	sy
 8012222:	f3bf 8f6f 	isb	sy
 8012226:	df00      	svc	0
 8012228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801222a:	bf00      	nop
 801222c:	e000ed08 	.word	0xe000ed08

08012230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b086      	sub	sp, #24
 8012234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012236:	4b46      	ldr	r3, [pc, #280]	; (8012350 <xPortStartScheduler+0x120>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a46      	ldr	r2, [pc, #280]	; (8012354 <xPortStartScheduler+0x124>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d10a      	bne.n	8012256 <xPortStartScheduler+0x26>
	__asm volatile
 8012240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012244:	f383 8811 	msr	BASEPRI, r3
 8012248:	f3bf 8f6f 	isb	sy
 801224c:	f3bf 8f4f 	dsb	sy
 8012250:	613b      	str	r3, [r7, #16]
}
 8012252:	bf00      	nop
 8012254:	e7fe      	b.n	8012254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012256:	4b3e      	ldr	r3, [pc, #248]	; (8012350 <xPortStartScheduler+0x120>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	4a3f      	ldr	r2, [pc, #252]	; (8012358 <xPortStartScheduler+0x128>)
 801225c:	4293      	cmp	r3, r2
 801225e:	d10a      	bne.n	8012276 <xPortStartScheduler+0x46>
	__asm volatile
 8012260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	60fb      	str	r3, [r7, #12]
}
 8012272:	bf00      	nop
 8012274:	e7fe      	b.n	8012274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012276:	4b39      	ldr	r3, [pc, #228]	; (801235c <xPortStartScheduler+0x12c>)
 8012278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	b2db      	uxtb	r3, r3
 8012280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	22ff      	movs	r2, #255	; 0xff
 8012286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	b2db      	uxtb	r3, r3
 801228e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012290:	78fb      	ldrb	r3, [r7, #3]
 8012292:	b2db      	uxtb	r3, r3
 8012294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012298:	b2da      	uxtb	r2, r3
 801229a:	4b31      	ldr	r3, [pc, #196]	; (8012360 <xPortStartScheduler+0x130>)
 801229c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801229e:	4b31      	ldr	r3, [pc, #196]	; (8012364 <xPortStartScheduler+0x134>)
 80122a0:	2207      	movs	r2, #7
 80122a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122a4:	e009      	b.n	80122ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80122a6:	4b2f      	ldr	r3, [pc, #188]	; (8012364 <xPortStartScheduler+0x134>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	3b01      	subs	r3, #1
 80122ac:	4a2d      	ldr	r2, [pc, #180]	; (8012364 <xPortStartScheduler+0x134>)
 80122ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122ba:	78fb      	ldrb	r3, [r7, #3]
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122c2:	2b80      	cmp	r3, #128	; 0x80
 80122c4:	d0ef      	beq.n	80122a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80122c6:	4b27      	ldr	r3, [pc, #156]	; (8012364 <xPortStartScheduler+0x134>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f1c3 0307 	rsb	r3, r3, #7
 80122ce:	2b04      	cmp	r3, #4
 80122d0:	d00a      	beq.n	80122e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80122d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d6:	f383 8811 	msr	BASEPRI, r3
 80122da:	f3bf 8f6f 	isb	sy
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	60bb      	str	r3, [r7, #8]
}
 80122e4:	bf00      	nop
 80122e6:	e7fe      	b.n	80122e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80122e8:	4b1e      	ldr	r3, [pc, #120]	; (8012364 <xPortStartScheduler+0x134>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	021b      	lsls	r3, r3, #8
 80122ee:	4a1d      	ldr	r2, [pc, #116]	; (8012364 <xPortStartScheduler+0x134>)
 80122f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80122f2:	4b1c      	ldr	r3, [pc, #112]	; (8012364 <xPortStartScheduler+0x134>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80122fa:	4a1a      	ldr	r2, [pc, #104]	; (8012364 <xPortStartScheduler+0x134>)
 80122fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	b2da      	uxtb	r2, r3
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012306:	4b18      	ldr	r3, [pc, #96]	; (8012368 <xPortStartScheduler+0x138>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	4a17      	ldr	r2, [pc, #92]	; (8012368 <xPortStartScheduler+0x138>)
 801230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012312:	4b15      	ldr	r3, [pc, #84]	; (8012368 <xPortStartScheduler+0x138>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	4a14      	ldr	r2, [pc, #80]	; (8012368 <xPortStartScheduler+0x138>)
 8012318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801231c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801231e:	f000 f8dd 	bl	80124dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012322:	4b12      	ldr	r3, [pc, #72]	; (801236c <xPortStartScheduler+0x13c>)
 8012324:	2200      	movs	r2, #0
 8012326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012328:	f000 f8fc 	bl	8012524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801232c:	4b10      	ldr	r3, [pc, #64]	; (8012370 <xPortStartScheduler+0x140>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4a0f      	ldr	r2, [pc, #60]	; (8012370 <xPortStartScheduler+0x140>)
 8012332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012338:	f7ff ff66 	bl	8012208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801233c:	f7ff f848 	bl	80113d0 <vTaskSwitchContext>
	prvTaskExitError();
 8012340:	f7ff ff1e 	bl	8012180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3718      	adds	r7, #24
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	e000ed00 	.word	0xe000ed00
 8012354:	410fc271 	.word	0x410fc271
 8012358:	410fc270 	.word	0x410fc270
 801235c:	e000e400 	.word	0xe000e400
 8012360:	20004d90 	.word	0x20004d90
 8012364:	20004d94 	.word	0x20004d94
 8012368:	e000ed20 	.word	0xe000ed20
 801236c:	20000340 	.word	0x20000340
 8012370:	e000ef34 	.word	0xe000ef34

08012374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
	__asm volatile
 801237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237e:	f383 8811 	msr	BASEPRI, r3
 8012382:	f3bf 8f6f 	isb	sy
 8012386:	f3bf 8f4f 	dsb	sy
 801238a:	607b      	str	r3, [r7, #4]
}
 801238c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801238e:	4b0f      	ldr	r3, [pc, #60]	; (80123cc <vPortEnterCritical+0x58>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	3301      	adds	r3, #1
 8012394:	4a0d      	ldr	r2, [pc, #52]	; (80123cc <vPortEnterCritical+0x58>)
 8012396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012398:	4b0c      	ldr	r3, [pc, #48]	; (80123cc <vPortEnterCritical+0x58>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b01      	cmp	r3, #1
 801239e:	d10f      	bne.n	80123c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80123a0:	4b0b      	ldr	r3, [pc, #44]	; (80123d0 <vPortEnterCritical+0x5c>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00a      	beq.n	80123c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80123aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ae:	f383 8811 	msr	BASEPRI, r3
 80123b2:	f3bf 8f6f 	isb	sy
 80123b6:	f3bf 8f4f 	dsb	sy
 80123ba:	603b      	str	r3, [r7, #0]
}
 80123bc:	bf00      	nop
 80123be:	e7fe      	b.n	80123be <vPortEnterCritical+0x4a>
	}
}
 80123c0:	bf00      	nop
 80123c2:	370c      	adds	r7, #12
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr
 80123cc:	20000340 	.word	0x20000340
 80123d0:	e000ed04 	.word	0xe000ed04

080123d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80123da:	4b12      	ldr	r3, [pc, #72]	; (8012424 <vPortExitCritical+0x50>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d10a      	bne.n	80123f8 <vPortExitCritical+0x24>
	__asm volatile
 80123e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e6:	f383 8811 	msr	BASEPRI, r3
 80123ea:	f3bf 8f6f 	isb	sy
 80123ee:	f3bf 8f4f 	dsb	sy
 80123f2:	607b      	str	r3, [r7, #4]
}
 80123f4:	bf00      	nop
 80123f6:	e7fe      	b.n	80123f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80123f8:	4b0a      	ldr	r3, [pc, #40]	; (8012424 <vPortExitCritical+0x50>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	3b01      	subs	r3, #1
 80123fe:	4a09      	ldr	r2, [pc, #36]	; (8012424 <vPortExitCritical+0x50>)
 8012400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012402:	4b08      	ldr	r3, [pc, #32]	; (8012424 <vPortExitCritical+0x50>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d105      	bne.n	8012416 <vPortExitCritical+0x42>
 801240a:	2300      	movs	r3, #0
 801240c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	f383 8811 	msr	BASEPRI, r3
}
 8012414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012416:	bf00      	nop
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop
 8012424:	20000340 	.word	0x20000340
	...

08012430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012430:	f3ef 8009 	mrs	r0, PSP
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	4b15      	ldr	r3, [pc, #84]	; (8012490 <pxCurrentTCBConst>)
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	f01e 0f10 	tst.w	lr, #16
 8012440:	bf08      	it	eq
 8012442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244a:	6010      	str	r0, [r2, #0]
 801244c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012454:	f380 8811 	msr	BASEPRI, r0
 8012458:	f3bf 8f4f 	dsb	sy
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f7fe ffb6 	bl	80113d0 <vTaskSwitchContext>
 8012464:	f04f 0000 	mov.w	r0, #0
 8012468:	f380 8811 	msr	BASEPRI, r0
 801246c:	bc09      	pop	{r0, r3}
 801246e:	6819      	ldr	r1, [r3, #0]
 8012470:	6808      	ldr	r0, [r1, #0]
 8012472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012476:	f01e 0f10 	tst.w	lr, #16
 801247a:	bf08      	it	eq
 801247c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012480:	f380 8809 	msr	PSP, r0
 8012484:	f3bf 8f6f 	isb	sy
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop
 801248c:	f3af 8000 	nop.w

08012490 <pxCurrentTCBConst>:
 8012490:	20004764 	.word	0x20004764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012494:	bf00      	nop
 8012496:	bf00      	nop

08012498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
	__asm volatile
 801249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a2:	f383 8811 	msr	BASEPRI, r3
 80124a6:	f3bf 8f6f 	isb	sy
 80124aa:	f3bf 8f4f 	dsb	sy
 80124ae:	607b      	str	r3, [r7, #4]
}
 80124b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80124b2:	f7fe fed3 	bl	801125c <xTaskIncrementTick>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d003      	beq.n	80124c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80124bc:	4b06      	ldr	r3, [pc, #24]	; (80124d8 <xPortSysTickHandler+0x40>)
 80124be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124c2:	601a      	str	r2, [r3, #0]
 80124c4:	2300      	movs	r3, #0
 80124c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	f383 8811 	msr	BASEPRI, r3
}
 80124ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80124d0:	bf00      	nop
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	e000ed04 	.word	0xe000ed04

080124dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80124dc:	b480      	push	{r7}
 80124de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80124e0:	4b0b      	ldr	r3, [pc, #44]	; (8012510 <vPortSetupTimerInterrupt+0x34>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80124e6:	4b0b      	ldr	r3, [pc, #44]	; (8012514 <vPortSetupTimerInterrupt+0x38>)
 80124e8:	2200      	movs	r2, #0
 80124ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80124ec:	4b0a      	ldr	r3, [pc, #40]	; (8012518 <vPortSetupTimerInterrupt+0x3c>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a0a      	ldr	r2, [pc, #40]	; (801251c <vPortSetupTimerInterrupt+0x40>)
 80124f2:	fba2 2303 	umull	r2, r3, r2, r3
 80124f6:	099b      	lsrs	r3, r3, #6
 80124f8:	4a09      	ldr	r2, [pc, #36]	; (8012520 <vPortSetupTimerInterrupt+0x44>)
 80124fa:	3b01      	subs	r3, #1
 80124fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80124fe:	4b04      	ldr	r3, [pc, #16]	; (8012510 <vPortSetupTimerInterrupt+0x34>)
 8012500:	2207      	movs	r2, #7
 8012502:	601a      	str	r2, [r3, #0]
}
 8012504:	bf00      	nop
 8012506:	46bd      	mov	sp, r7
 8012508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop
 8012510:	e000e010 	.word	0xe000e010
 8012514:	e000e018 	.word	0xe000e018
 8012518:	20000224 	.word	0x20000224
 801251c:	10624dd3 	.word	0x10624dd3
 8012520:	e000e014 	.word	0xe000e014

08012524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012534 <vPortEnableVFP+0x10>
 8012528:	6801      	ldr	r1, [r0, #0]
 801252a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801252e:	6001      	str	r1, [r0, #0]
 8012530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012532:	bf00      	nop
 8012534:	e000ed88 	.word	0xe000ed88

08012538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012538:	b480      	push	{r7}
 801253a:	b085      	sub	sp, #20
 801253c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801253e:	f3ef 8305 	mrs	r3, IPSR
 8012542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2b0f      	cmp	r3, #15
 8012548:	d914      	bls.n	8012574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801254a:	4a17      	ldr	r2, [pc, #92]	; (80125a8 <vPortValidateInterruptPriority+0x70>)
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	4413      	add	r3, r2
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012554:	4b15      	ldr	r3, [pc, #84]	; (80125ac <vPortValidateInterruptPriority+0x74>)
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	7afa      	ldrb	r2, [r7, #11]
 801255a:	429a      	cmp	r2, r3
 801255c:	d20a      	bcs.n	8012574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012562:	f383 8811 	msr	BASEPRI, r3
 8012566:	f3bf 8f6f 	isb	sy
 801256a:	f3bf 8f4f 	dsb	sy
 801256e:	607b      	str	r3, [r7, #4]
}
 8012570:	bf00      	nop
 8012572:	e7fe      	b.n	8012572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012574:	4b0e      	ldr	r3, [pc, #56]	; (80125b0 <vPortValidateInterruptPriority+0x78>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801257c:	4b0d      	ldr	r3, [pc, #52]	; (80125b4 <vPortValidateInterruptPriority+0x7c>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	429a      	cmp	r2, r3
 8012582:	d90a      	bls.n	801259a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	603b      	str	r3, [r7, #0]
}
 8012596:	bf00      	nop
 8012598:	e7fe      	b.n	8012598 <vPortValidateInterruptPriority+0x60>
	}
 801259a:	bf00      	nop
 801259c:	3714      	adds	r7, #20
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop
 80125a8:	e000e3f0 	.word	0xe000e3f0
 80125ac:	20004d90 	.word	0x20004d90
 80125b0:	e000ed0c 	.word	0xe000ed0c
 80125b4:	20004d94 	.word	0x20004d94

080125b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08a      	sub	sp, #40	; 0x28
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80125c0:	2300      	movs	r3, #0
 80125c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80125c4:	f7fe fd8e 	bl	80110e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80125c8:	4b5b      	ldr	r3, [pc, #364]	; (8012738 <pvPortMalloc+0x180>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d101      	bne.n	80125d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80125d0:	f000 f920 	bl	8012814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80125d4:	4b59      	ldr	r3, [pc, #356]	; (801273c <pvPortMalloc+0x184>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	4013      	ands	r3, r2
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f040 8093 	bne.w	8012708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d01d      	beq.n	8012624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80125e8:	2208      	movs	r2, #8
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4413      	add	r3, r2
 80125ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f003 0307 	and.w	r3, r3, #7
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d014      	beq.n	8012624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f023 0307 	bic.w	r3, r3, #7
 8012600:	3308      	adds	r3, #8
 8012602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f003 0307 	and.w	r3, r3, #7
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00a      	beq.n	8012624 <pvPortMalloc+0x6c>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	617b      	str	r3, [r7, #20]
}
 8012620:	bf00      	nop
 8012622:	e7fe      	b.n	8012622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d06e      	beq.n	8012708 <pvPortMalloc+0x150>
 801262a:	4b45      	ldr	r3, [pc, #276]	; (8012740 <pvPortMalloc+0x188>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	429a      	cmp	r2, r3
 8012632:	d869      	bhi.n	8012708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012634:	4b43      	ldr	r3, [pc, #268]	; (8012744 <pvPortMalloc+0x18c>)
 8012636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012638:	4b42      	ldr	r3, [pc, #264]	; (8012744 <pvPortMalloc+0x18c>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801263e:	e004      	b.n	801264a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	429a      	cmp	r2, r3
 8012652:	d903      	bls.n	801265c <pvPortMalloc+0xa4>
 8012654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d1f1      	bne.n	8012640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801265c:	4b36      	ldr	r3, [pc, #216]	; (8012738 <pvPortMalloc+0x180>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012662:	429a      	cmp	r2, r3
 8012664:	d050      	beq.n	8012708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012666:	6a3b      	ldr	r3, [r7, #32]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	2208      	movs	r2, #8
 801266c:	4413      	add	r3, r2
 801266e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	6a3b      	ldr	r3, [r7, #32]
 8012676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	685a      	ldr	r2, [r3, #4]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	1ad2      	subs	r2, r2, r3
 8012680:	2308      	movs	r3, #8
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	429a      	cmp	r2, r3
 8012686:	d91f      	bls.n	80126c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	4413      	add	r3, r2
 801268e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	f003 0307 	and.w	r3, r3, #7
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00a      	beq.n	80126b0 <pvPortMalloc+0xf8>
	__asm volatile
 801269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	613b      	str	r3, [r7, #16]
}
 80126ac:	bf00      	nop
 80126ae:	e7fe      	b.n	80126ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80126b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	1ad2      	subs	r2, r2, r3
 80126b8:	69bb      	ldr	r3, [r7, #24]
 80126ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80126bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80126c2:	69b8      	ldr	r0, [r7, #24]
 80126c4:	f000 f908 	bl	80128d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80126c8:	4b1d      	ldr	r3, [pc, #116]	; (8012740 <pvPortMalloc+0x188>)
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	4a1b      	ldr	r2, [pc, #108]	; (8012740 <pvPortMalloc+0x188>)
 80126d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80126d6:	4b1a      	ldr	r3, [pc, #104]	; (8012740 <pvPortMalloc+0x188>)
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	4b1b      	ldr	r3, [pc, #108]	; (8012748 <pvPortMalloc+0x190>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d203      	bcs.n	80126ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80126e2:	4b17      	ldr	r3, [pc, #92]	; (8012740 <pvPortMalloc+0x188>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4a18      	ldr	r2, [pc, #96]	; (8012748 <pvPortMalloc+0x190>)
 80126e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80126ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ec:	685a      	ldr	r2, [r3, #4]
 80126ee:	4b13      	ldr	r3, [pc, #76]	; (801273c <pvPortMalloc+0x184>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	431a      	orrs	r2, r3
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	2200      	movs	r2, #0
 80126fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80126fe:	4b13      	ldr	r3, [pc, #76]	; (801274c <pvPortMalloc+0x194>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	3301      	adds	r3, #1
 8012704:	4a11      	ldr	r2, [pc, #68]	; (801274c <pvPortMalloc+0x194>)
 8012706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012708:	f7fe fcfa 	bl	8011100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	f003 0307 	and.w	r3, r3, #7
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00a      	beq.n	801272c <pvPortMalloc+0x174>
	__asm volatile
 8012716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	60fb      	str	r3, [r7, #12]
}
 8012728:	bf00      	nop
 801272a:	e7fe      	b.n	801272a <pvPortMalloc+0x172>
	return pvReturn;
 801272c:	69fb      	ldr	r3, [r7, #28]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3728      	adds	r7, #40	; 0x28
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	20007c80 	.word	0x20007c80
 801273c:	20007c94 	.word	0x20007c94
 8012740:	20007c84 	.word	0x20007c84
 8012744:	20007c78 	.word	0x20007c78
 8012748:	20007c88 	.word	0x20007c88
 801274c:	20007c8c 	.word	0x20007c8c

08012750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d04d      	beq.n	80127fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012762:	2308      	movs	r3, #8
 8012764:	425b      	negs	r3, r3
 8012766:	697a      	ldr	r2, [r7, #20]
 8012768:	4413      	add	r3, r2
 801276a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	685a      	ldr	r2, [r3, #4]
 8012774:	4b24      	ldr	r3, [pc, #144]	; (8012808 <vPortFree+0xb8>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4013      	ands	r3, r2
 801277a:	2b00      	cmp	r3, #0
 801277c:	d10a      	bne.n	8012794 <vPortFree+0x44>
	__asm volatile
 801277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012782:	f383 8811 	msr	BASEPRI, r3
 8012786:	f3bf 8f6f 	isb	sy
 801278a:	f3bf 8f4f 	dsb	sy
 801278e:	60fb      	str	r3, [r7, #12]
}
 8012790:	bf00      	nop
 8012792:	e7fe      	b.n	8012792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d00a      	beq.n	80127b2 <vPortFree+0x62>
	__asm volatile
 801279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a0:	f383 8811 	msr	BASEPRI, r3
 80127a4:	f3bf 8f6f 	isb	sy
 80127a8:	f3bf 8f4f 	dsb	sy
 80127ac:	60bb      	str	r3, [r7, #8]
}
 80127ae:	bf00      	nop
 80127b0:	e7fe      	b.n	80127b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	685a      	ldr	r2, [r3, #4]
 80127b6:	4b14      	ldr	r3, [pc, #80]	; (8012808 <vPortFree+0xb8>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4013      	ands	r3, r2
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d01e      	beq.n	80127fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d11a      	bne.n	80127fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	685a      	ldr	r2, [r3, #4]
 80127cc:	4b0e      	ldr	r3, [pc, #56]	; (8012808 <vPortFree+0xb8>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	43db      	mvns	r3, r3
 80127d2:	401a      	ands	r2, r3
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80127d8:	f7fe fc84 	bl	80110e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	685a      	ldr	r2, [r3, #4]
 80127e0:	4b0a      	ldr	r3, [pc, #40]	; (801280c <vPortFree+0xbc>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	4413      	add	r3, r2
 80127e6:	4a09      	ldr	r2, [pc, #36]	; (801280c <vPortFree+0xbc>)
 80127e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80127ea:	6938      	ldr	r0, [r7, #16]
 80127ec:	f000 f874 	bl	80128d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <vPortFree+0xc0>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	3301      	adds	r3, #1
 80127f6:	4a06      	ldr	r2, [pc, #24]	; (8012810 <vPortFree+0xc0>)
 80127f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80127fa:	f7fe fc81 	bl	8011100 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80127fe:	bf00      	nop
 8012800:	3718      	adds	r7, #24
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	20007c94 	.word	0x20007c94
 801280c:	20007c84 	.word	0x20007c84
 8012810:	20007c90 	.word	0x20007c90

08012814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012814:	b480      	push	{r7}
 8012816:	b085      	sub	sp, #20
 8012818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801281a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801281e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012820:	4b27      	ldr	r3, [pc, #156]	; (80128c0 <prvHeapInit+0xac>)
 8012822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f003 0307 	and.w	r3, r3, #7
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00c      	beq.n	8012848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	3307      	adds	r3, #7
 8012832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f023 0307 	bic.w	r3, r3, #7
 801283a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801283c:	68ba      	ldr	r2, [r7, #8]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	4a1f      	ldr	r2, [pc, #124]	; (80128c0 <prvHeapInit+0xac>)
 8012844:	4413      	add	r3, r2
 8012846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801284c:	4a1d      	ldr	r2, [pc, #116]	; (80128c4 <prvHeapInit+0xb0>)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012852:	4b1c      	ldr	r3, [pc, #112]	; (80128c4 <prvHeapInit+0xb0>)
 8012854:	2200      	movs	r2, #0
 8012856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	68ba      	ldr	r2, [r7, #8]
 801285c:	4413      	add	r3, r2
 801285e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012860:	2208      	movs	r2, #8
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	1a9b      	subs	r3, r3, r2
 8012866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f023 0307 	bic.w	r3, r3, #7
 801286e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	4a15      	ldr	r2, [pc, #84]	; (80128c8 <prvHeapInit+0xb4>)
 8012874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012876:	4b14      	ldr	r3, [pc, #80]	; (80128c8 <prvHeapInit+0xb4>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	2200      	movs	r2, #0
 801287c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801287e:	4b12      	ldr	r3, [pc, #72]	; (80128c8 <prvHeapInit+0xb4>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2200      	movs	r2, #0
 8012884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	68fa      	ldr	r2, [r7, #12]
 801288e:	1ad2      	subs	r2, r2, r3
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012894:	4b0c      	ldr	r3, [pc, #48]	; (80128c8 <prvHeapInit+0xb4>)
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	4a0a      	ldr	r2, [pc, #40]	; (80128cc <prvHeapInit+0xb8>)
 80128a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	4a09      	ldr	r2, [pc, #36]	; (80128d0 <prvHeapInit+0xbc>)
 80128aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80128ac:	4b09      	ldr	r3, [pc, #36]	; (80128d4 <prvHeapInit+0xc0>)
 80128ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80128b2:	601a      	str	r2, [r3, #0]
}
 80128b4:	bf00      	nop
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	20004d98 	.word	0x20004d98
 80128c4:	20007c78 	.word	0x20007c78
 80128c8:	20007c80 	.word	0x20007c80
 80128cc:	20007c88 	.word	0x20007c88
 80128d0:	20007c84 	.word	0x20007c84
 80128d4:	20007c94 	.word	0x20007c94

080128d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80128d8:	b480      	push	{r7}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80128e0:	4b28      	ldr	r3, [pc, #160]	; (8012984 <prvInsertBlockIntoFreeList+0xac>)
 80128e2:	60fb      	str	r3, [r7, #12]
 80128e4:	e002      	b.n	80128ec <prvInsertBlockIntoFreeList+0x14>
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	60fb      	str	r3, [r7, #12]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d8f7      	bhi.n	80128e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	685b      	ldr	r3, [r3, #4]
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	4413      	add	r3, r2
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	429a      	cmp	r2, r3
 8012906:	d108      	bne.n	801291a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	685a      	ldr	r2, [r3, #4]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	441a      	add	r2, r3
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	68ba      	ldr	r2, [r7, #8]
 8012924:	441a      	add	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	429a      	cmp	r2, r3
 801292c:	d118      	bne.n	8012960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681a      	ldr	r2, [r3, #0]
 8012932:	4b15      	ldr	r3, [pc, #84]	; (8012988 <prvInsertBlockIntoFreeList+0xb0>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	429a      	cmp	r2, r3
 8012938:	d00d      	beq.n	8012956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	441a      	add	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	e008      	b.n	8012968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012956:	4b0c      	ldr	r3, [pc, #48]	; (8012988 <prvInsertBlockIntoFreeList+0xb0>)
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	601a      	str	r2, [r3, #0]
 801295e:	e003      	b.n	8012968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012968:	68fa      	ldr	r2, [r7, #12]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	429a      	cmp	r2, r3
 801296e:	d002      	beq.n	8012976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012976:	bf00      	nop
 8012978:	3714      	adds	r7, #20
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr
 8012982:	bf00      	nop
 8012984:	20007c78 	.word	0x20007c78
 8012988:	20007c80 	.word	0x20007c80

0801298c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012990:	2200      	movs	r2, #0
 8012992:	4912      	ldr	r1, [pc, #72]	; (80129dc <MX_USB_DEVICE_Init+0x50>)
 8012994:	4812      	ldr	r0, [pc, #72]	; (80129e0 <MX_USB_DEVICE_Init+0x54>)
 8012996:	f7fc f8a5 	bl	800eae4 <USBD_Init>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80129a0:	f7f1 f9a4 	bl	8003cec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80129a4:	490f      	ldr	r1, [pc, #60]	; (80129e4 <MX_USB_DEVICE_Init+0x58>)
 80129a6:	480e      	ldr	r0, [pc, #56]	; (80129e0 <MX_USB_DEVICE_Init+0x54>)
 80129a8:	f7fc f8cc 	bl	800eb44 <USBD_RegisterClass>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d001      	beq.n	80129b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80129b2:	f7f1 f99b 	bl	8003cec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80129b6:	490c      	ldr	r1, [pc, #48]	; (80129e8 <MX_USB_DEVICE_Init+0x5c>)
 80129b8:	4809      	ldr	r0, [pc, #36]	; (80129e0 <MX_USB_DEVICE_Init+0x54>)
 80129ba:	f7fb ffed 	bl	800e998 <USBD_CDC_RegisterInterface>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d001      	beq.n	80129c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80129c4:	f7f1 f992 	bl	8003cec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80129c8:	4805      	ldr	r0, [pc, #20]	; (80129e0 <MX_USB_DEVICE_Init+0x54>)
 80129ca:	f7fc f8e2 	bl	800eb92 <USBD_Start>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80129d4:	f7f1 f98a 	bl	8003cec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80129d8:	bf00      	nop
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20000358 	.word	0x20000358
 80129e0:	20007c98 	.word	0x20007c98
 80129e4:	2000023c 	.word	0x2000023c
 80129e8:	20000344 	.word	0x20000344

080129ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80129f0:	2200      	movs	r2, #0
 80129f2:	4905      	ldr	r1, [pc, #20]	; (8012a08 <CDC_Init_FS+0x1c>)
 80129f4:	4805      	ldr	r0, [pc, #20]	; (8012a0c <CDC_Init_FS+0x20>)
 80129f6:	f7fb ffe4 	bl	800e9c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80129fa:	4905      	ldr	r1, [pc, #20]	; (8012a10 <CDC_Init_FS+0x24>)
 80129fc:	4803      	ldr	r0, [pc, #12]	; (8012a0c <CDC_Init_FS+0x20>)
 80129fe:	f7fb fffe 	bl	800e9fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	20008768 	.word	0x20008768
 8012a0c:	20007c98 	.word	0x20007c98
 8012a10:	20007f68 	.word	0x20007f68

08012a14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a14:	b480      	push	{r7}
 8012a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	6039      	str	r1, [r7, #0]
 8012a2e:	71fb      	strb	r3, [r7, #7]
 8012a30:	4613      	mov	r3, r2
 8012a32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012a34:	79fb      	ldrb	r3, [r7, #7]
 8012a36:	2b23      	cmp	r3, #35	; 0x23
 8012a38:	d84a      	bhi.n	8012ad0 <CDC_Control_FS+0xac>
 8012a3a:	a201      	add	r2, pc, #4	; (adr r2, 8012a40 <CDC_Control_FS+0x1c>)
 8012a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a40:	08012ad1 	.word	0x08012ad1
 8012a44:	08012ad1 	.word	0x08012ad1
 8012a48:	08012ad1 	.word	0x08012ad1
 8012a4c:	08012ad1 	.word	0x08012ad1
 8012a50:	08012ad1 	.word	0x08012ad1
 8012a54:	08012ad1 	.word	0x08012ad1
 8012a58:	08012ad1 	.word	0x08012ad1
 8012a5c:	08012ad1 	.word	0x08012ad1
 8012a60:	08012ad1 	.word	0x08012ad1
 8012a64:	08012ad1 	.word	0x08012ad1
 8012a68:	08012ad1 	.word	0x08012ad1
 8012a6c:	08012ad1 	.word	0x08012ad1
 8012a70:	08012ad1 	.word	0x08012ad1
 8012a74:	08012ad1 	.word	0x08012ad1
 8012a78:	08012ad1 	.word	0x08012ad1
 8012a7c:	08012ad1 	.word	0x08012ad1
 8012a80:	08012ad1 	.word	0x08012ad1
 8012a84:	08012ad1 	.word	0x08012ad1
 8012a88:	08012ad1 	.word	0x08012ad1
 8012a8c:	08012ad1 	.word	0x08012ad1
 8012a90:	08012ad1 	.word	0x08012ad1
 8012a94:	08012ad1 	.word	0x08012ad1
 8012a98:	08012ad1 	.word	0x08012ad1
 8012a9c:	08012ad1 	.word	0x08012ad1
 8012aa0:	08012ad1 	.word	0x08012ad1
 8012aa4:	08012ad1 	.word	0x08012ad1
 8012aa8:	08012ad1 	.word	0x08012ad1
 8012aac:	08012ad1 	.word	0x08012ad1
 8012ab0:	08012ad1 	.word	0x08012ad1
 8012ab4:	08012ad1 	.word	0x08012ad1
 8012ab8:	08012ad1 	.word	0x08012ad1
 8012abc:	08012ad1 	.word	0x08012ad1
 8012ac0:	08012ad1 	.word	0x08012ad1
 8012ac4:	08012ad1 	.word	0x08012ad1
 8012ac8:	08012ad1 	.word	0x08012ad1
 8012acc:	08012ad1 	.word	0x08012ad1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012ad0:	bf00      	nop
  }

  return (USBD_OK);
 8012ad2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012aea:	6879      	ldr	r1, [r7, #4]
 8012aec:	4805      	ldr	r0, [pc, #20]	; (8012b04 <CDC_Receive_FS+0x24>)
 8012aee:	f7fb ff86 	bl	800e9fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012af2:	4804      	ldr	r0, [pc, #16]	; (8012b04 <CDC_Receive_FS+0x24>)
 8012af4:	f7fb ffcc 	bl	800ea90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012af8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3708      	adds	r7, #8
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	20007c98 	.word	0x20007c98

08012b08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	460b      	mov	r3, r1
 8012b12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012b14:	2300      	movs	r3, #0
 8012b16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012b18:	4b0d      	ldr	r3, [pc, #52]	; (8012b50 <CDC_Transmit_FS+0x48>)
 8012b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e00b      	b.n	8012b46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012b2e:	887b      	ldrh	r3, [r7, #2]
 8012b30:	461a      	mov	r2, r3
 8012b32:	6879      	ldr	r1, [r7, #4]
 8012b34:	4806      	ldr	r0, [pc, #24]	; (8012b50 <CDC_Transmit_FS+0x48>)
 8012b36:	f7fb ff44 	bl	800e9c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012b3a:	4805      	ldr	r0, [pc, #20]	; (8012b50 <CDC_Transmit_FS+0x48>)
 8012b3c:	f7fb ff78 	bl	800ea30 <USBD_CDC_TransmitPacket>
 8012b40:	4603      	mov	r3, r0
 8012b42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	3710      	adds	r7, #16
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	20007c98 	.word	0x20007c98

08012b54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012b54:	b480      	push	{r7}
 8012b56:	b087      	sub	sp, #28
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012b62:	2300      	movs	r3, #0
 8012b64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	371c      	adds	r7, #28
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b74:	4770      	bx	lr
	...

08012b78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	6039      	str	r1, [r7, #0]
 8012b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	2212      	movs	r2, #18
 8012b88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012b8a:	4b03      	ldr	r3, [pc, #12]	; (8012b98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr
 8012b98:	20000378 	.word	0x20000378

08012b9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	6039      	str	r1, [r7, #0]
 8012ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	2204      	movs	r2, #4
 8012bac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012bae:	4b03      	ldr	r3, [pc, #12]	; (8012bbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr
 8012bbc:	20000398 	.word	0x20000398

08012bc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	6039      	str	r1, [r7, #0]
 8012bca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012bcc:	79fb      	ldrb	r3, [r7, #7]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d105      	bne.n	8012bde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bd2:	683a      	ldr	r2, [r7, #0]
 8012bd4:	4907      	ldr	r1, [pc, #28]	; (8012bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012bd6:	4808      	ldr	r0, [pc, #32]	; (8012bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012bd8:	f7fd f837 	bl	800fc4a <USBD_GetString>
 8012bdc:	e004      	b.n	8012be8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	4904      	ldr	r1, [pc, #16]	; (8012bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012be2:	4805      	ldr	r0, [pc, #20]	; (8012bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012be4:	f7fd f831 	bl	800fc4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012be8:	4b02      	ldr	r3, [pc, #8]	; (8012bf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	20008f68 	.word	0x20008f68
 8012bf8:	080169bc 	.word	0x080169bc

08012bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	4603      	mov	r3, r0
 8012c04:	6039      	str	r1, [r7, #0]
 8012c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012c08:	683a      	ldr	r2, [r7, #0]
 8012c0a:	4904      	ldr	r1, [pc, #16]	; (8012c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012c0c:	4804      	ldr	r0, [pc, #16]	; (8012c20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012c0e:	f7fd f81c 	bl	800fc4a <USBD_GetString>
  return USBD_StrDesc;
 8012c12:	4b02      	ldr	r3, [pc, #8]	; (8012c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20008f68 	.word	0x20008f68
 8012c20:	080169d4 	.word	0x080169d4

08012c24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	6039      	str	r1, [r7, #0]
 8012c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	221a      	movs	r2, #26
 8012c34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c36:	f000 f855 	bl	8012ce4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012c3a:	4b02      	ldr	r3, [pc, #8]	; (8012c44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3708      	adds	r7, #8
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	2000039c 	.word	0x2000039c

08012c48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	4603      	mov	r3, r0
 8012c50:	6039      	str	r1, [r7, #0]
 8012c52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012c54:	79fb      	ldrb	r3, [r7, #7]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d105      	bne.n	8012c66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	4907      	ldr	r1, [pc, #28]	; (8012c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c5e:	4808      	ldr	r0, [pc, #32]	; (8012c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c60:	f7fc fff3 	bl	800fc4a <USBD_GetString>
 8012c64:	e004      	b.n	8012c70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	4904      	ldr	r1, [pc, #16]	; (8012c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c6a:	4805      	ldr	r0, [pc, #20]	; (8012c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c6c:	f7fc ffed 	bl	800fc4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c70:	4b02      	ldr	r3, [pc, #8]	; (8012c7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20008f68 	.word	0x20008f68
 8012c80:	080169e8 	.word	0x080169e8

08012c84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	6039      	str	r1, [r7, #0]
 8012c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d105      	bne.n	8012ca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	4907      	ldr	r1, [pc, #28]	; (8012cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012c9a:	4808      	ldr	r0, [pc, #32]	; (8012cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012c9c:	f7fc ffd5 	bl	800fc4a <USBD_GetString>
 8012ca0:	e004      	b.n	8012cac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	4904      	ldr	r1, [pc, #16]	; (8012cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ca6:	4805      	ldr	r0, [pc, #20]	; (8012cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012ca8:	f7fc ffcf 	bl	800fc4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cac:	4b02      	ldr	r3, [pc, #8]	; (8012cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	20008f68 	.word	0x20008f68
 8012cbc:	080169f4 	.word	0x080169f4

08012cc0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	6039      	str	r1, [r7, #0]
 8012cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	220c      	movs	r2, #12
 8012cd0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012cd2:	4b03      	ldr	r3, [pc, #12]	; (8012ce0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr
 8012ce0:	2000038c 	.word	0x2000038c

08012ce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012cea:	4b0f      	ldr	r3, [pc, #60]	; (8012d28 <Get_SerialNum+0x44>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012cf0:	4b0e      	ldr	r3, [pc, #56]	; (8012d2c <Get_SerialNum+0x48>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012cf6:	4b0e      	ldr	r3, [pc, #56]	; (8012d30 <Get_SerialNum+0x4c>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012cfc:	68fa      	ldr	r2, [r7, #12]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	4413      	add	r3, r2
 8012d02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d009      	beq.n	8012d1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012d0a:	2208      	movs	r2, #8
 8012d0c:	4909      	ldr	r1, [pc, #36]	; (8012d34 <Get_SerialNum+0x50>)
 8012d0e:	68f8      	ldr	r0, [r7, #12]
 8012d10:	f000 f814 	bl	8012d3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012d14:	2204      	movs	r2, #4
 8012d16:	4908      	ldr	r1, [pc, #32]	; (8012d38 <Get_SerialNum+0x54>)
 8012d18:	68b8      	ldr	r0, [r7, #8]
 8012d1a:	f000 f80f 	bl	8012d3c <IntToUnicode>
  }
}
 8012d1e:	bf00      	nop
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	1fff7590 	.word	0x1fff7590
 8012d2c:	1fff7594 	.word	0x1fff7594
 8012d30:	1fff7598 	.word	0x1fff7598
 8012d34:	2000039e 	.word	0x2000039e
 8012d38:	200003ae 	.word	0x200003ae

08012d3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b087      	sub	sp, #28
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d4e:	2300      	movs	r3, #0
 8012d50:	75fb      	strb	r3, [r7, #23]
 8012d52:	e027      	b.n	8012da4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	0f1b      	lsrs	r3, r3, #28
 8012d58:	2b09      	cmp	r3, #9
 8012d5a:	d80b      	bhi.n	8012d74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	0f1b      	lsrs	r3, r3, #28
 8012d60:	b2da      	uxtb	r2, r3
 8012d62:	7dfb      	ldrb	r3, [r7, #23]
 8012d64:	005b      	lsls	r3, r3, #1
 8012d66:	4619      	mov	r1, r3
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	440b      	add	r3, r1
 8012d6c:	3230      	adds	r2, #48	; 0x30
 8012d6e:	b2d2      	uxtb	r2, r2
 8012d70:	701a      	strb	r2, [r3, #0]
 8012d72:	e00a      	b.n	8012d8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	0f1b      	lsrs	r3, r3, #28
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	005b      	lsls	r3, r3, #1
 8012d7e:	4619      	mov	r1, r3
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	440b      	add	r3, r1
 8012d84:	3237      	adds	r2, #55	; 0x37
 8012d86:	b2d2      	uxtb	r2, r2
 8012d88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	011b      	lsls	r3, r3, #4
 8012d8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012d90:	7dfb      	ldrb	r3, [r7, #23]
 8012d92:	005b      	lsls	r3, r3, #1
 8012d94:	3301      	adds	r3, #1
 8012d96:	68ba      	ldr	r2, [r7, #8]
 8012d98:	4413      	add	r3, r2
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012d9e:	7dfb      	ldrb	r3, [r7, #23]
 8012da0:	3301      	adds	r3, #1
 8012da2:	75fb      	strb	r3, [r7, #23]
 8012da4:	7dfa      	ldrb	r2, [r7, #23]
 8012da6:	79fb      	ldrb	r3, [r7, #7]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d3d3      	bcc.n	8012d54 <IntToUnicode+0x18>
  }
}
 8012dac:	bf00      	nop
 8012dae:	bf00      	nop
 8012db0:	371c      	adds	r7, #28
 8012db2:	46bd      	mov	sp, r7
 8012db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db8:	4770      	bx	lr
	...

08012dbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b0b0      	sub	sp, #192	; 0xc0
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012dc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012dc8:	2200      	movs	r2, #0
 8012dca:	601a      	str	r2, [r3, #0]
 8012dcc:	605a      	str	r2, [r3, #4]
 8012dce:	609a      	str	r2, [r3, #8]
 8012dd0:	60da      	str	r2, [r3, #12]
 8012dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012dd4:	f107 0314 	add.w	r3, r7, #20
 8012dd8:	2298      	movs	r2, #152	; 0x98
 8012dda:	2100      	movs	r1, #0
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f000 fe9e 	bl	8013b1e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012dea:	d163      	bne.n	8012eb4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012df0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012df2:	2300      	movs	r3, #0
 8012df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012df8:	f107 0314 	add.w	r3, r7, #20
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7f7 fcdd 	bl	800a7bc <HAL_RCCEx_PeriphCLKConfig>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d001      	beq.n	8012e0c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012e08:	f7f0 ff70 	bl	8003cec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e0c:	4b2b      	ldr	r3, [pc, #172]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e10:	4a2a      	ldr	r2, [pc, #168]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e12:	f043 0301 	orr.w	r3, r3, #1
 8012e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e18:	4b28      	ldr	r3, [pc, #160]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e1c:	f003 0301 	and.w	r3, r3, #1
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012e24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e2c:	2302      	movs	r3, #2
 8012e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e32:	2300      	movs	r3, #0
 8012e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e38:	2303      	movs	r3, #3
 8012e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012e3e:	230a      	movs	r3, #10
 8012e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012e48:	4619      	mov	r1, r3
 8012e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012e4e:	f7f5 f89f 	bl	8007f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012e52:	4b1a      	ldr	r3, [pc, #104]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e56:	4a19      	ldr	r2, [pc, #100]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e5e:	4b17      	ldr	r3, [pc, #92]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012e66:	60fb      	str	r3, [r7, #12]
 8012e68:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012e6a:	4b14      	ldr	r3, [pc, #80]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d114      	bne.n	8012ea0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012e76:	4b11      	ldr	r3, [pc, #68]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e7a:	4a10      	ldr	r2, [pc, #64]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e80:	6593      	str	r3, [r2, #88]	; 0x58
 8012e82:	4b0e      	ldr	r3, [pc, #56]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e8a:	60bb      	str	r3, [r7, #8]
 8012e8c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012e8e:	f7f6 fcdd 	bl	800984c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012e92:	4b0a      	ldr	r3, [pc, #40]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e96:	4a09      	ldr	r2, [pc, #36]	; (8012ebc <HAL_PCD_MspInit+0x100>)
 8012e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8012e9e:	e001      	b.n	8012ea4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012ea0:	f7f6 fcd4 	bl	800984c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	2105      	movs	r1, #5
 8012ea8:	2043      	movs	r0, #67	; 0x43
 8012eaa:	f7f4 fdd5 	bl	8007a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012eae:	2043      	movs	r0, #67	; 0x43
 8012eb0:	f7f4 fdee 	bl	8007a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012eb4:	bf00      	nop
 8012eb6:	37c0      	adds	r7, #192	; 0xc0
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	40021000 	.word	0x40021000

08012ec0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	4610      	mov	r0, r2
 8012ed8:	f7fb fea6 	bl	800ec28 <USBD_LL_SetupStage>
}
 8012edc:	bf00      	nop
 8012ede:	3708      	adds	r7, #8
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b082      	sub	sp, #8
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	460b      	mov	r3, r1
 8012eee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012ef6:	78fa      	ldrb	r2, [r7, #3]
 8012ef8:	6879      	ldr	r1, [r7, #4]
 8012efa:	4613      	mov	r3, r2
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	4413      	add	r3, r2
 8012f00:	009b      	lsls	r3, r3, #2
 8012f02:	440b      	add	r3, r1
 8012f04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	78fb      	ldrb	r3, [r7, #3]
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	f7fb fee0 	bl	800ecd2 <USBD_LL_DataOutStage>
}
 8012f12:	bf00      	nop
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b082      	sub	sp, #8
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
 8012f22:	460b      	mov	r3, r1
 8012f24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012f2c:	78fa      	ldrb	r2, [r7, #3]
 8012f2e:	6879      	ldr	r1, [r7, #4]
 8012f30:	4613      	mov	r3, r2
 8012f32:	00db      	lsls	r3, r3, #3
 8012f34:	4413      	add	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	440b      	add	r3, r1
 8012f3a:	334c      	adds	r3, #76	; 0x4c
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	78fb      	ldrb	r3, [r7, #3]
 8012f40:	4619      	mov	r1, r3
 8012f42:	f7fb ff29 	bl	800ed98 <USBD_LL_DataInStage>
}
 8012f46:	bf00      	nop
 8012f48:	3708      	adds	r7, #8
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}

08012f4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f4e:	b580      	push	{r7, lr}
 8012f50:	b082      	sub	sp, #8
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fc f83d 	bl	800efdc <USBD_LL_SOF>
}
 8012f62:	bf00      	nop
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b084      	sub	sp, #16
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012f72:	2301      	movs	r3, #1
 8012f74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	2b02      	cmp	r3, #2
 8012f7c:	d001      	beq.n	8012f82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012f7e:	f7f0 feb5 	bl	8003cec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f88:	7bfa      	ldrb	r2, [r7, #15]
 8012f8a:	4611      	mov	r1, r2
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fb ffe7 	bl	800ef60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7fb ff93 	bl	800eec4 <USBD_LL_Reset>
}
 8012f9e:	bf00      	nop
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
	...

08012fa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	6812      	ldr	r2, [r2, #0]
 8012fbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012fc2:	f043 0301 	orr.w	r3, r3, #1
 8012fc6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7fb ffd6 	bl	800ef80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a1b      	ldr	r3, [r3, #32]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d005      	beq.n	8012fe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012fdc:	4b04      	ldr	r3, [pc, #16]	; (8012ff0 <HAL_PCD_SuspendCallback+0x48>)
 8012fde:	691b      	ldr	r3, [r3, #16]
 8012fe0:	4a03      	ldr	r2, [pc, #12]	; (8012ff0 <HAL_PCD_SuspendCallback+0x48>)
 8012fe2:	f043 0306 	orr.w	r3, r3, #6
 8012fe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012fe8:	bf00      	nop
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	e000ed00 	.word	0xe000ed00

08012ff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	6812      	ldr	r2, [r2, #0]
 801300a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801300e:	f023 0301 	bic.w	r3, r3, #1
 8013012:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6a1b      	ldr	r3, [r3, #32]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d007      	beq.n	801302c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801301c:	4b08      	ldr	r3, [pc, #32]	; (8013040 <HAL_PCD_ResumeCallback+0x4c>)
 801301e:	691b      	ldr	r3, [r3, #16]
 8013020:	4a07      	ldr	r2, [pc, #28]	; (8013040 <HAL_PCD_ResumeCallback+0x4c>)
 8013022:	f023 0306 	bic.w	r3, r3, #6
 8013026:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013028:	f000 faf4 	bl	8013614 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013032:	4618      	mov	r0, r3
 8013034:	f7fb ffba 	bl	800efac <USBD_LL_Resume>
}
 8013038:	bf00      	nop
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	e000ed00 	.word	0xe000ed00

08013044 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	460b      	mov	r3, r1
 801304e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013056:	78fa      	ldrb	r2, [r7, #3]
 8013058:	4611      	mov	r1, r2
 801305a:	4618      	mov	r0, r3
 801305c:	f7fc f806 	bl	800f06c <USBD_LL_IsoOUTIncomplete>
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}

08013068 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	460b      	mov	r3, r1
 8013072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801307a:	78fa      	ldrb	r2, [r7, #3]
 801307c:	4611      	mov	r1, r2
 801307e:	4618      	mov	r0, r3
 8013080:	f7fb ffce 	bl	800f020 <USBD_LL_IsoINIncomplete>
}
 8013084:	bf00      	nop
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801309a:	4618      	mov	r0, r3
 801309c:	f7fc f80c 	bl	800f0b8 <USBD_LL_DevConnected>
}
 80130a0:	bf00      	nop
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7fc f809 	bl	800f0ce <USBD_LL_DevDisconnected>
}
 80130bc:	bf00      	nop
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d139      	bne.n	8013148 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80130d4:	4a1f      	ldr	r2, [pc, #124]	; (8013154 <USBD_LL_Init+0x90>)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4a1d      	ldr	r2, [pc, #116]	; (8013154 <USBD_LL_Init+0x90>)
 80130e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80130e4:	4b1b      	ldr	r3, [pc, #108]	; (8013154 <USBD_LL_Init+0x90>)
 80130e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80130ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80130ec:	4b19      	ldr	r3, [pc, #100]	; (8013154 <USBD_LL_Init+0x90>)
 80130ee:	2206      	movs	r2, #6
 80130f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80130f2:	4b18      	ldr	r3, [pc, #96]	; (8013154 <USBD_LL_Init+0x90>)
 80130f4:	2202      	movs	r2, #2
 80130f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80130f8:	4b16      	ldr	r3, [pc, #88]	; (8013154 <USBD_LL_Init+0x90>)
 80130fa:	2200      	movs	r2, #0
 80130fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80130fe:	4b15      	ldr	r3, [pc, #84]	; (8013154 <USBD_LL_Init+0x90>)
 8013100:	2200      	movs	r2, #0
 8013102:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013104:	4b13      	ldr	r3, [pc, #76]	; (8013154 <USBD_LL_Init+0x90>)
 8013106:	2200      	movs	r2, #0
 8013108:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801310a:	4b12      	ldr	r3, [pc, #72]	; (8013154 <USBD_LL_Init+0x90>)
 801310c:	2200      	movs	r2, #0
 801310e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013110:	4b10      	ldr	r3, [pc, #64]	; (8013154 <USBD_LL_Init+0x90>)
 8013112:	2200      	movs	r2, #0
 8013114:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013116:	4b0f      	ldr	r3, [pc, #60]	; (8013154 <USBD_LL_Init+0x90>)
 8013118:	2200      	movs	r2, #0
 801311a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801311c:	480d      	ldr	r0, [pc, #52]	; (8013154 <USBD_LL_Init+0x90>)
 801311e:	f7f5 f8f9 	bl	8008314 <HAL_PCD_Init>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d001      	beq.n	801312c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013128:	f7f0 fde0 	bl	8003cec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801312c:	2180      	movs	r1, #128	; 0x80
 801312e:	4809      	ldr	r0, [pc, #36]	; (8013154 <USBD_LL_Init+0x90>)
 8013130:	f7f6 fa7b 	bl	800962a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013134:	2240      	movs	r2, #64	; 0x40
 8013136:	2100      	movs	r1, #0
 8013138:	4806      	ldr	r0, [pc, #24]	; (8013154 <USBD_LL_Init+0x90>)
 801313a:	f7f6 fa2f 	bl	800959c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801313e:	2280      	movs	r2, #128	; 0x80
 8013140:	2101      	movs	r1, #1
 8013142:	4804      	ldr	r0, [pc, #16]	; (8013154 <USBD_LL_Init+0x90>)
 8013144:	f7f6 fa2a 	bl	800959c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	20009168 	.word	0x20009168

08013158 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013160:	2300      	movs	r3, #0
 8013162:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013164:	2300      	movs	r3, #0
 8013166:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801316e:	4618      	mov	r0, r3
 8013170:	f7f5 f9f4 	bl	800855c <HAL_PCD_Start>
 8013174:	4603      	mov	r3, r0
 8013176:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013178:	7bbb      	ldrb	r3, [r7, #14]
 801317a:	2b03      	cmp	r3, #3
 801317c:	d816      	bhi.n	80131ac <USBD_LL_Start+0x54>
 801317e:	a201      	add	r2, pc, #4	; (adr r2, 8013184 <USBD_LL_Start+0x2c>)
 8013180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013184:	08013195 	.word	0x08013195
 8013188:	0801319b 	.word	0x0801319b
 801318c:	080131a1 	.word	0x080131a1
 8013190:	080131a7 	.word	0x080131a7
    case HAL_OK :
      usb_status = USBD_OK;
 8013194:	2300      	movs	r3, #0
 8013196:	73fb      	strb	r3, [r7, #15]
    break;
 8013198:	e00b      	b.n	80131b2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801319a:	2303      	movs	r3, #3
 801319c:	73fb      	strb	r3, [r7, #15]
    break;
 801319e:	e008      	b.n	80131b2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131a0:	2301      	movs	r3, #1
 80131a2:	73fb      	strb	r3, [r7, #15]
    break;
 80131a4:	e005      	b.n	80131b2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131a6:	2303      	movs	r3, #3
 80131a8:	73fb      	strb	r3, [r7, #15]
    break;
 80131aa:	e002      	b.n	80131b2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80131ac:	2303      	movs	r3, #3
 80131ae:	73fb      	strb	r3, [r7, #15]
    break;
 80131b0:	bf00      	nop
  }
  return usb_status;
 80131b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3710      	adds	r7, #16
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	4608      	mov	r0, r1
 80131c6:	4611      	mov	r1, r2
 80131c8:	461a      	mov	r2, r3
 80131ca:	4603      	mov	r3, r0
 80131cc:	70fb      	strb	r3, [r7, #3]
 80131ce:	460b      	mov	r3, r1
 80131d0:	70bb      	strb	r3, [r7, #2]
 80131d2:	4613      	mov	r3, r2
 80131d4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131d6:	2300      	movs	r3, #0
 80131d8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131da:	2300      	movs	r3, #0
 80131dc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80131e4:	78bb      	ldrb	r3, [r7, #2]
 80131e6:	883a      	ldrh	r2, [r7, #0]
 80131e8:	78f9      	ldrb	r1, [r7, #3]
 80131ea:	f7f5 fe9e 	bl	8008f2a <HAL_PCD_EP_Open>
 80131ee:	4603      	mov	r3, r0
 80131f0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80131f2:	7bbb      	ldrb	r3, [r7, #14]
 80131f4:	2b03      	cmp	r3, #3
 80131f6:	d817      	bhi.n	8013228 <USBD_LL_OpenEP+0x6c>
 80131f8:	a201      	add	r2, pc, #4	; (adr r2, 8013200 <USBD_LL_OpenEP+0x44>)
 80131fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131fe:	bf00      	nop
 8013200:	08013211 	.word	0x08013211
 8013204:	08013217 	.word	0x08013217
 8013208:	0801321d 	.word	0x0801321d
 801320c:	08013223 	.word	0x08013223
    case HAL_OK :
      usb_status = USBD_OK;
 8013210:	2300      	movs	r3, #0
 8013212:	73fb      	strb	r3, [r7, #15]
    break;
 8013214:	e00b      	b.n	801322e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013216:	2303      	movs	r3, #3
 8013218:	73fb      	strb	r3, [r7, #15]
    break;
 801321a:	e008      	b.n	801322e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801321c:	2301      	movs	r3, #1
 801321e:	73fb      	strb	r3, [r7, #15]
    break;
 8013220:	e005      	b.n	801322e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013222:	2303      	movs	r3, #3
 8013224:	73fb      	strb	r3, [r7, #15]
    break;
 8013226:	e002      	b.n	801322e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013228:	2303      	movs	r3, #3
 801322a:	73fb      	strb	r3, [r7, #15]
    break;
 801322c:	bf00      	nop
  }
  return usb_status;
 801322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013230:	4618      	mov	r0, r3
 8013232:	3710      	adds	r7, #16
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	460b      	mov	r3, r1
 8013242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013244:	2300      	movs	r3, #0
 8013246:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013248:	2300      	movs	r3, #0
 801324a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013252:	78fa      	ldrb	r2, [r7, #3]
 8013254:	4611      	mov	r1, r2
 8013256:	4618      	mov	r0, r3
 8013258:	f7f5 fecf 	bl	8008ffa <HAL_PCD_EP_Close>
 801325c:	4603      	mov	r3, r0
 801325e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013260:	7bbb      	ldrb	r3, [r7, #14]
 8013262:	2b03      	cmp	r3, #3
 8013264:	d816      	bhi.n	8013294 <USBD_LL_CloseEP+0x5c>
 8013266:	a201      	add	r2, pc, #4	; (adr r2, 801326c <USBD_LL_CloseEP+0x34>)
 8013268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801326c:	0801327d 	.word	0x0801327d
 8013270:	08013283 	.word	0x08013283
 8013274:	08013289 	.word	0x08013289
 8013278:	0801328f 	.word	0x0801328f
    case HAL_OK :
      usb_status = USBD_OK;
 801327c:	2300      	movs	r3, #0
 801327e:	73fb      	strb	r3, [r7, #15]
    break;
 8013280:	e00b      	b.n	801329a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013282:	2303      	movs	r3, #3
 8013284:	73fb      	strb	r3, [r7, #15]
    break;
 8013286:	e008      	b.n	801329a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013288:	2301      	movs	r3, #1
 801328a:	73fb      	strb	r3, [r7, #15]
    break;
 801328c:	e005      	b.n	801329a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801328e:	2303      	movs	r3, #3
 8013290:	73fb      	strb	r3, [r7, #15]
    break;
 8013292:	e002      	b.n	801329a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013294:	2303      	movs	r3, #3
 8013296:	73fb      	strb	r3, [r7, #15]
    break;
 8013298:	bf00      	nop
  }
  return usb_status;
 801329a:	7bfb      	ldrb	r3, [r7, #15]
}
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b084      	sub	sp, #16
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	460b      	mov	r3, r1
 80132ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132b0:	2300      	movs	r3, #0
 80132b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132b4:	2300      	movs	r3, #0
 80132b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132be:	78fa      	ldrb	r2, [r7, #3]
 80132c0:	4611      	mov	r1, r2
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7f5 ff76 	bl	80091b4 <HAL_PCD_EP_SetStall>
 80132c8:	4603      	mov	r3, r0
 80132ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80132cc:	7bbb      	ldrb	r3, [r7, #14]
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	d816      	bhi.n	8013300 <USBD_LL_StallEP+0x5c>
 80132d2:	a201      	add	r2, pc, #4	; (adr r2, 80132d8 <USBD_LL_StallEP+0x34>)
 80132d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d8:	080132e9 	.word	0x080132e9
 80132dc:	080132ef 	.word	0x080132ef
 80132e0:	080132f5 	.word	0x080132f5
 80132e4:	080132fb 	.word	0x080132fb
    case HAL_OK :
      usb_status = USBD_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	73fb      	strb	r3, [r7, #15]
    break;
 80132ec:	e00b      	b.n	8013306 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132ee:	2303      	movs	r3, #3
 80132f0:	73fb      	strb	r3, [r7, #15]
    break;
 80132f2:	e008      	b.n	8013306 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132f4:	2301      	movs	r3, #1
 80132f6:	73fb      	strb	r3, [r7, #15]
    break;
 80132f8:	e005      	b.n	8013306 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132fa:	2303      	movs	r3, #3
 80132fc:	73fb      	strb	r3, [r7, #15]
    break;
 80132fe:	e002      	b.n	8013306 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013300:	2303      	movs	r3, #3
 8013302:	73fb      	strb	r3, [r7, #15]
    break;
 8013304:	bf00      	nop
  }
  return usb_status;
 8013306:	7bfb      	ldrb	r3, [r7, #15]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3710      	adds	r7, #16
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	460b      	mov	r3, r1
 801331a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013320:	2300      	movs	r3, #0
 8013322:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801332a:	78fa      	ldrb	r2, [r7, #3]
 801332c:	4611      	mov	r1, r2
 801332e:	4618      	mov	r0, r3
 8013330:	f7f5 ffa2 	bl	8009278 <HAL_PCD_EP_ClrStall>
 8013334:	4603      	mov	r3, r0
 8013336:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013338:	7bbb      	ldrb	r3, [r7, #14]
 801333a:	2b03      	cmp	r3, #3
 801333c:	d816      	bhi.n	801336c <USBD_LL_ClearStallEP+0x5c>
 801333e:	a201      	add	r2, pc, #4	; (adr r2, 8013344 <USBD_LL_ClearStallEP+0x34>)
 8013340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013344:	08013355 	.word	0x08013355
 8013348:	0801335b 	.word	0x0801335b
 801334c:	08013361 	.word	0x08013361
 8013350:	08013367 	.word	0x08013367
    case HAL_OK :
      usb_status = USBD_OK;
 8013354:	2300      	movs	r3, #0
 8013356:	73fb      	strb	r3, [r7, #15]
    break;
 8013358:	e00b      	b.n	8013372 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801335a:	2303      	movs	r3, #3
 801335c:	73fb      	strb	r3, [r7, #15]
    break;
 801335e:	e008      	b.n	8013372 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013360:	2301      	movs	r3, #1
 8013362:	73fb      	strb	r3, [r7, #15]
    break;
 8013364:	e005      	b.n	8013372 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013366:	2303      	movs	r3, #3
 8013368:	73fb      	strb	r3, [r7, #15]
    break;
 801336a:	e002      	b.n	8013372 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801336c:	2303      	movs	r3, #3
 801336e:	73fb      	strb	r3, [r7, #15]
    break;
 8013370:	bf00      	nop
  }
  return usb_status;
 8013372:	7bfb      	ldrb	r3, [r7, #15]
}
 8013374:	4618      	mov	r0, r3
 8013376:	3710      	adds	r7, #16
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801337c:	b480      	push	{r7}
 801337e:	b085      	sub	sp, #20
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801338e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013394:	2b00      	cmp	r3, #0
 8013396:	da0b      	bge.n	80133b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013398:	78fb      	ldrb	r3, [r7, #3]
 801339a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801339e:	68f9      	ldr	r1, [r7, #12]
 80133a0:	4613      	mov	r3, r2
 80133a2:	00db      	lsls	r3, r3, #3
 80133a4:	4413      	add	r3, r2
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	440b      	add	r3, r1
 80133aa:	333e      	adds	r3, #62	; 0x3e
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	e00b      	b.n	80133c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80133b0:	78fb      	ldrb	r3, [r7, #3]
 80133b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133b6:	68f9      	ldr	r1, [r7, #12]
 80133b8:	4613      	mov	r3, r2
 80133ba:	00db      	lsls	r3, r3, #3
 80133bc:	4413      	add	r3, r2
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	440b      	add	r3, r1
 80133c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80133c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3714      	adds	r7, #20
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b084      	sub	sp, #16
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	460b      	mov	r3, r1
 80133de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133e0:	2300      	movs	r3, #0
 80133e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133e4:	2300      	movs	r3, #0
 80133e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133ee:	78fa      	ldrb	r2, [r7, #3]
 80133f0:	4611      	mov	r1, r2
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7f5 fd74 	bl	8008ee0 <HAL_PCD_SetAddress>
 80133f8:	4603      	mov	r3, r0
 80133fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80133fc:	7bbb      	ldrb	r3, [r7, #14]
 80133fe:	2b03      	cmp	r3, #3
 8013400:	d816      	bhi.n	8013430 <USBD_LL_SetUSBAddress+0x5c>
 8013402:	a201      	add	r2, pc, #4	; (adr r2, 8013408 <USBD_LL_SetUSBAddress+0x34>)
 8013404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013408:	08013419 	.word	0x08013419
 801340c:	0801341f 	.word	0x0801341f
 8013410:	08013425 	.word	0x08013425
 8013414:	0801342b 	.word	0x0801342b
    case HAL_OK :
      usb_status = USBD_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	73fb      	strb	r3, [r7, #15]
    break;
 801341c:	e00b      	b.n	8013436 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801341e:	2303      	movs	r3, #3
 8013420:	73fb      	strb	r3, [r7, #15]
    break;
 8013422:	e008      	b.n	8013436 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013424:	2301      	movs	r3, #1
 8013426:	73fb      	strb	r3, [r7, #15]
    break;
 8013428:	e005      	b.n	8013436 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801342a:	2303      	movs	r3, #3
 801342c:	73fb      	strb	r3, [r7, #15]
    break;
 801342e:	e002      	b.n	8013436 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013430:	2303      	movs	r3, #3
 8013432:	73fb      	strb	r3, [r7, #15]
    break;
 8013434:	bf00      	nop
  }
  return usb_status;
 8013436:	7bfb      	ldrb	r3, [r7, #15]
}
 8013438:	4618      	mov	r0, r3
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b086      	sub	sp, #24
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	607a      	str	r2, [r7, #4]
 801344a:	603b      	str	r3, [r7, #0]
 801344c:	460b      	mov	r3, r1
 801344e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013450:	2300      	movs	r3, #0
 8013452:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013454:	2300      	movs	r3, #0
 8013456:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801345e:	7af9      	ldrb	r1, [r7, #11]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	f7f5 fe69 	bl	800913a <HAL_PCD_EP_Transmit>
 8013468:	4603      	mov	r3, r0
 801346a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801346c:	7dbb      	ldrb	r3, [r7, #22]
 801346e:	2b03      	cmp	r3, #3
 8013470:	d816      	bhi.n	80134a0 <USBD_LL_Transmit+0x60>
 8013472:	a201      	add	r2, pc, #4	; (adr r2, 8013478 <USBD_LL_Transmit+0x38>)
 8013474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013478:	08013489 	.word	0x08013489
 801347c:	0801348f 	.word	0x0801348f
 8013480:	08013495 	.word	0x08013495
 8013484:	0801349b 	.word	0x0801349b
    case HAL_OK :
      usb_status = USBD_OK;
 8013488:	2300      	movs	r3, #0
 801348a:	75fb      	strb	r3, [r7, #23]
    break;
 801348c:	e00b      	b.n	80134a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801348e:	2303      	movs	r3, #3
 8013490:	75fb      	strb	r3, [r7, #23]
    break;
 8013492:	e008      	b.n	80134a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013494:	2301      	movs	r3, #1
 8013496:	75fb      	strb	r3, [r7, #23]
    break;
 8013498:	e005      	b.n	80134a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801349a:	2303      	movs	r3, #3
 801349c:	75fb      	strb	r3, [r7, #23]
    break;
 801349e:	e002      	b.n	80134a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80134a0:	2303      	movs	r3, #3
 80134a2:	75fb      	strb	r3, [r7, #23]
    break;
 80134a4:	bf00      	nop
  }
  return usb_status;
 80134a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3718      	adds	r7, #24
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b086      	sub	sp, #24
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	607a      	str	r2, [r7, #4]
 80134ba:	603b      	str	r3, [r7, #0]
 80134bc:	460b      	mov	r3, r1
 80134be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134ce:	7af9      	ldrb	r1, [r7, #11]
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	f7f5 fddb 	bl	800908e <HAL_PCD_EP_Receive>
 80134d8:	4603      	mov	r3, r0
 80134da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80134dc:	7dbb      	ldrb	r3, [r7, #22]
 80134de:	2b03      	cmp	r3, #3
 80134e0:	d816      	bhi.n	8013510 <USBD_LL_PrepareReceive+0x60>
 80134e2:	a201      	add	r2, pc, #4	; (adr r2, 80134e8 <USBD_LL_PrepareReceive+0x38>)
 80134e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e8:	080134f9 	.word	0x080134f9
 80134ec:	080134ff 	.word	0x080134ff
 80134f0:	08013505 	.word	0x08013505
 80134f4:	0801350b 	.word	0x0801350b
    case HAL_OK :
      usb_status = USBD_OK;
 80134f8:	2300      	movs	r3, #0
 80134fa:	75fb      	strb	r3, [r7, #23]
    break;
 80134fc:	e00b      	b.n	8013516 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134fe:	2303      	movs	r3, #3
 8013500:	75fb      	strb	r3, [r7, #23]
    break;
 8013502:	e008      	b.n	8013516 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013504:	2301      	movs	r3, #1
 8013506:	75fb      	strb	r3, [r7, #23]
    break;
 8013508:	e005      	b.n	8013516 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801350a:	2303      	movs	r3, #3
 801350c:	75fb      	strb	r3, [r7, #23]
    break;
 801350e:	e002      	b.n	8013516 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013510:	2303      	movs	r3, #3
 8013512:	75fb      	strb	r3, [r7, #23]
    break;
 8013514:	bf00      	nop
  }
  return usb_status;
 8013516:	7dfb      	ldrb	r3, [r7, #23]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	460b      	mov	r3, r1
 801352a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013532:	78fa      	ldrb	r2, [r7, #3]
 8013534:	4611      	mov	r1, r2
 8013536:	4618      	mov	r0, r3
 8013538:	f7f5 fde7 	bl	800910a <HAL_PCD_EP_GetRxCount>
 801353c:	4603      	mov	r3, r0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
	...

08013548 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	460b      	mov	r3, r1
 8013552:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013554:	78fb      	ldrb	r3, [r7, #3]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d002      	beq.n	8013560 <HAL_PCDEx_LPM_Callback+0x18>
 801355a:	2b01      	cmp	r3, #1
 801355c:	d01f      	beq.n	801359e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801355e:	e03b      	b.n	80135d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6a1b      	ldr	r3, [r3, #32]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d007      	beq.n	8013578 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013568:	f000 f854 	bl	8013614 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801356c:	4b1c      	ldr	r3, [pc, #112]	; (80135e0 <HAL_PCDEx_LPM_Callback+0x98>)
 801356e:	691b      	ldr	r3, [r3, #16]
 8013570:	4a1b      	ldr	r2, [pc, #108]	; (80135e0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013572:	f023 0306 	bic.w	r3, r3, #6
 8013576:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	6812      	ldr	r2, [r2, #0]
 8013586:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801358a:	f023 0301 	bic.w	r3, r3, #1
 801358e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013596:	4618      	mov	r0, r3
 8013598:	f7fb fd08 	bl	800efac <USBD_LL_Resume>
    break;
 801359c:	e01c      	b.n	80135d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	6812      	ldr	r2, [r2, #0]
 80135ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80135b0:	f043 0301 	orr.w	r3, r3, #1
 80135b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fb fcdf 	bl	800ef80 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a1b      	ldr	r3, [r3, #32]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d005      	beq.n	80135d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80135ca:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <HAL_PCDEx_LPM_Callback+0x98>)
 80135cc:	691b      	ldr	r3, [r3, #16]
 80135ce:	4a04      	ldr	r2, [pc, #16]	; (80135e0 <HAL_PCDEx_LPM_Callback+0x98>)
 80135d0:	f043 0306 	orr.w	r3, r3, #6
 80135d4:	6113      	str	r3, [r2, #16]
    break;
 80135d6:	bf00      	nop
}
 80135d8:	bf00      	nop
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	e000ed00 	.word	0xe000ed00

080135e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80135ec:	4b03      	ldr	r3, [pc, #12]	; (80135fc <USBD_static_malloc+0x18>)
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr
 80135fa:	bf00      	nop
 80135fc:	20009674 	.word	0x20009674

08013600 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]

}
 8013608:	bf00      	nop
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr

08013614 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013618:	f7ef fe9e 	bl	8003358 <SystemClock_Config>
}
 801361c:	bf00      	nop
 801361e:	bd80      	pop	{r7, pc}

08013620 <expf>:
 8013620:	b508      	push	{r3, lr}
 8013622:	ed2d 8b02 	vpush	{d8}
 8013626:	eef0 8a40 	vmov.f32	s17, s0
 801362a:	f000 f82f 	bl	801368c <__ieee754_expf>
 801362e:	eeb0 8a40 	vmov.f32	s16, s0
 8013632:	eeb0 0a68 	vmov.f32	s0, s17
 8013636:	f000 f919 	bl	801386c <finitef>
 801363a:	b160      	cbz	r0, 8013656 <expf+0x36>
 801363c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801367c <expf+0x5c>
 8013640:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013648:	dd0a      	ble.n	8013660 <expf+0x40>
 801364a:	f000 f91d 	bl	8013888 <__errno>
 801364e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013680 <expf+0x60>
 8013652:	2322      	movs	r3, #34	; 0x22
 8013654:	6003      	str	r3, [r0, #0]
 8013656:	eeb0 0a48 	vmov.f32	s0, s16
 801365a:	ecbd 8b02 	vpop	{d8}
 801365e:	bd08      	pop	{r3, pc}
 8013660:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013684 <expf+0x64>
 8013664:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366c:	d5f3      	bpl.n	8013656 <expf+0x36>
 801366e:	f000 f90b 	bl	8013888 <__errno>
 8013672:	2322      	movs	r3, #34	; 0x22
 8013674:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013688 <expf+0x68>
 8013678:	6003      	str	r3, [r0, #0]
 801367a:	e7ec      	b.n	8013656 <expf+0x36>
 801367c:	42b17180 	.word	0x42b17180
 8013680:	7f800000 	.word	0x7f800000
 8013684:	c2cff1b5 	.word	0xc2cff1b5
 8013688:	00000000 	.word	0x00000000

0801368c <__ieee754_expf>:
 801368c:	ee10 2a10 	vmov	r2, s0
 8013690:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013694:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013698:	d902      	bls.n	80136a0 <__ieee754_expf+0x14>
 801369a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801369e:	4770      	bx	lr
 80136a0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80136a4:	d106      	bne.n	80136b4 <__ieee754_expf+0x28>
 80136a6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80137e0 <__ieee754_expf+0x154>
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	bf18      	it	ne
 80136ae:	eeb0 0a67 	vmovne.f32	s0, s15
 80136b2:	4770      	bx	lr
 80136b4:	484b      	ldr	r0, [pc, #300]	; (80137e4 <__ieee754_expf+0x158>)
 80136b6:	4282      	cmp	r2, r0
 80136b8:	dd02      	ble.n	80136c0 <__ieee754_expf+0x34>
 80136ba:	2000      	movs	r0, #0
 80136bc:	f000 b8d0 	b.w	8013860 <__math_oflowf>
 80136c0:	2a00      	cmp	r2, #0
 80136c2:	da05      	bge.n	80136d0 <__ieee754_expf+0x44>
 80136c4:	4a48      	ldr	r2, [pc, #288]	; (80137e8 <__ieee754_expf+0x15c>)
 80136c6:	4291      	cmp	r1, r2
 80136c8:	d902      	bls.n	80136d0 <__ieee754_expf+0x44>
 80136ca:	2000      	movs	r0, #0
 80136cc:	f000 b8c2 	b.w	8013854 <__math_uflowf>
 80136d0:	4a46      	ldr	r2, [pc, #280]	; (80137ec <__ieee754_expf+0x160>)
 80136d2:	4291      	cmp	r1, r2
 80136d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80136d8:	d952      	bls.n	8013780 <__ieee754_expf+0xf4>
 80136da:	4a45      	ldr	r2, [pc, #276]	; (80137f0 <__ieee754_expf+0x164>)
 80136dc:	4291      	cmp	r1, r2
 80136de:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80136e2:	d834      	bhi.n	801374e <__ieee754_expf+0xc2>
 80136e4:	4943      	ldr	r1, [pc, #268]	; (80137f4 <__ieee754_expf+0x168>)
 80136e6:	4411      	add	r1, r2
 80136e8:	ed91 7a00 	vldr	s14, [r1]
 80136ec:	4942      	ldr	r1, [pc, #264]	; (80137f8 <__ieee754_expf+0x16c>)
 80136ee:	440a      	add	r2, r1
 80136f0:	edd2 7a00 	vldr	s15, [r2]
 80136f4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80136f8:	f1c3 0201 	rsb	r2, r3, #1
 80136fc:	1ad2      	subs	r2, r2, r3
 80136fe:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013702:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013706:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80137fc <__ieee754_expf+0x170>
 801370a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013800 <__ieee754_expf+0x174>
 801370e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013712:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013804 <__ieee754_expf+0x178>
 8013716:	eea6 5a86 	vfma.f32	s10, s13, s12
 801371a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8013808 <__ieee754_expf+0x17c>
 801371e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013722:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801380c <__ieee754_expf+0x180>
 8013726:	eea6 5a86 	vfma.f32	s10, s13, s12
 801372a:	eef0 6a40 	vmov.f32	s13, s0
 801372e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013732:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013736:	ee20 5a26 	vmul.f32	s10, s0, s13
 801373a:	bb92      	cbnz	r2, 80137a2 <__ieee754_expf+0x116>
 801373c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013740:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013744:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013748:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801374c:	4770      	bx	lr
 801374e:	4b30      	ldr	r3, [pc, #192]	; (8013810 <__ieee754_expf+0x184>)
 8013750:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013814 <__ieee754_expf+0x188>
 8013754:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013818 <__ieee754_expf+0x18c>
 8013758:	4413      	add	r3, r2
 801375a:	edd3 7a00 	vldr	s15, [r3]
 801375e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013762:	eeb0 7a40 	vmov.f32	s14, s0
 8013766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801376a:	ee17 2a90 	vmov	r2, s15
 801376e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013772:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013776:	eddf 6a29 	vldr	s13, [pc, #164]	; 801381c <__ieee754_expf+0x190>
 801377a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801377e:	e7be      	b.n	80136fe <__ieee754_expf+0x72>
 8013780:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8013784:	d20b      	bcs.n	801379e <__ieee754_expf+0x112>
 8013786:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013820 <__ieee754_expf+0x194>
 801378a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801378e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013796:	dd02      	ble.n	801379e <__ieee754_expf+0x112>
 8013798:	ee30 0a25 	vadd.f32	s0, s0, s11
 801379c:	4770      	bx	lr
 801379e:	2200      	movs	r2, #0
 80137a0:	e7af      	b.n	8013702 <__ieee754_expf+0x76>
 80137a2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80137a6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80137aa:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80137ae:	bfb8      	it	lt
 80137b0:	3264      	addlt	r2, #100	; 0x64
 80137b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80137b6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80137ba:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80137be:	ee17 3a90 	vmov	r3, s15
 80137c2:	bfab      	itete	ge
 80137c4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80137c8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80137cc:	ee00 3a10 	vmovge	s0, r3
 80137d0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013824 <__ieee754_expf+0x198>
 80137d4:	bfbc      	itt	lt
 80137d6:	ee00 3a10 	vmovlt	s0, r3
 80137da:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80137de:	4770      	bx	lr
 80137e0:	00000000 	.word	0x00000000
 80137e4:	42b17217 	.word	0x42b17217
 80137e8:	42cff1b5 	.word	0x42cff1b5
 80137ec:	3eb17218 	.word	0x3eb17218
 80137f0:	3f851591 	.word	0x3f851591
 80137f4:	08016dd0 	.word	0x08016dd0
 80137f8:	08016dd8 	.word	0x08016dd8
 80137fc:	3331bb4c 	.word	0x3331bb4c
 8013800:	b5ddea0e 	.word	0xb5ddea0e
 8013804:	388ab355 	.word	0x388ab355
 8013808:	bb360b61 	.word	0xbb360b61
 801380c:	3e2aaaab 	.word	0x3e2aaaab
 8013810:	08016dc8 	.word	0x08016dc8
 8013814:	3fb8aa3b 	.word	0x3fb8aa3b
 8013818:	3f317180 	.word	0x3f317180
 801381c:	3717f7d1 	.word	0x3717f7d1
 8013820:	7149f2ca 	.word	0x7149f2ca
 8013824:	0d800000 	.word	0x0d800000

08013828 <with_errnof>:
 8013828:	b513      	push	{r0, r1, r4, lr}
 801382a:	4604      	mov	r4, r0
 801382c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013830:	f000 f82a 	bl	8013888 <__errno>
 8013834:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013838:	6004      	str	r4, [r0, #0]
 801383a:	b002      	add	sp, #8
 801383c:	bd10      	pop	{r4, pc}

0801383e <xflowf>:
 801383e:	b130      	cbz	r0, 801384e <xflowf+0x10>
 8013840:	eef1 7a40 	vneg.f32	s15, s0
 8013844:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013848:	2022      	movs	r0, #34	; 0x22
 801384a:	f7ff bfed 	b.w	8013828 <with_errnof>
 801384e:	eef0 7a40 	vmov.f32	s15, s0
 8013852:	e7f7      	b.n	8013844 <xflowf+0x6>

08013854 <__math_uflowf>:
 8013854:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801385c <__math_uflowf+0x8>
 8013858:	f7ff bff1 	b.w	801383e <xflowf>
 801385c:	10000000 	.word	0x10000000

08013860 <__math_oflowf>:
 8013860:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013868 <__math_oflowf+0x8>
 8013864:	f7ff bfeb 	b.w	801383e <xflowf>
 8013868:	70000000 	.word	0x70000000

0801386c <finitef>:
 801386c:	b082      	sub	sp, #8
 801386e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013872:	9801      	ldr	r0, [sp, #4]
 8013874:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013878:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801387c:	bfac      	ite	ge
 801387e:	2000      	movge	r0, #0
 8013880:	2001      	movlt	r0, #1
 8013882:	b002      	add	sp, #8
 8013884:	4770      	bx	lr
	...

08013888 <__errno>:
 8013888:	4b01      	ldr	r3, [pc, #4]	; (8013890 <__errno+0x8>)
 801388a:	6818      	ldr	r0, [r3, #0]
 801388c:	4770      	bx	lr
 801388e:	bf00      	nop
 8013890:	200003b8 	.word	0x200003b8

08013894 <std>:
 8013894:	2300      	movs	r3, #0
 8013896:	b510      	push	{r4, lr}
 8013898:	4604      	mov	r4, r0
 801389a:	e9c0 3300 	strd	r3, r3, [r0]
 801389e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138a2:	6083      	str	r3, [r0, #8]
 80138a4:	8181      	strh	r1, [r0, #12]
 80138a6:	6643      	str	r3, [r0, #100]	; 0x64
 80138a8:	81c2      	strh	r2, [r0, #14]
 80138aa:	6183      	str	r3, [r0, #24]
 80138ac:	4619      	mov	r1, r3
 80138ae:	2208      	movs	r2, #8
 80138b0:	305c      	adds	r0, #92	; 0x5c
 80138b2:	f000 f934 	bl	8013b1e <memset>
 80138b6:	4b05      	ldr	r3, [pc, #20]	; (80138cc <std+0x38>)
 80138b8:	6263      	str	r3, [r4, #36]	; 0x24
 80138ba:	4b05      	ldr	r3, [pc, #20]	; (80138d0 <std+0x3c>)
 80138bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80138be:	4b05      	ldr	r3, [pc, #20]	; (80138d4 <std+0x40>)
 80138c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138c2:	4b05      	ldr	r3, [pc, #20]	; (80138d8 <std+0x44>)
 80138c4:	6224      	str	r4, [r4, #32]
 80138c6:	6323      	str	r3, [r4, #48]	; 0x30
 80138c8:	bd10      	pop	{r4, pc}
 80138ca:	bf00      	nop
 80138cc:	08014661 	.word	0x08014661
 80138d0:	08014683 	.word	0x08014683
 80138d4:	080146bb 	.word	0x080146bb
 80138d8:	080146df 	.word	0x080146df

080138dc <_cleanup_r>:
 80138dc:	4901      	ldr	r1, [pc, #4]	; (80138e4 <_cleanup_r+0x8>)
 80138de:	f000 b8af 	b.w	8013a40 <_fwalk_reent>
 80138e2:	bf00      	nop
 80138e4:	08015531 	.word	0x08015531

080138e8 <__sfmoreglue>:
 80138e8:	b570      	push	{r4, r5, r6, lr}
 80138ea:	2268      	movs	r2, #104	; 0x68
 80138ec:	1e4d      	subs	r5, r1, #1
 80138ee:	4355      	muls	r5, r2
 80138f0:	460e      	mov	r6, r1
 80138f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138f6:	f000 f93b 	bl	8013b70 <_malloc_r>
 80138fa:	4604      	mov	r4, r0
 80138fc:	b140      	cbz	r0, 8013910 <__sfmoreglue+0x28>
 80138fe:	2100      	movs	r1, #0
 8013900:	e9c0 1600 	strd	r1, r6, [r0]
 8013904:	300c      	adds	r0, #12
 8013906:	60a0      	str	r0, [r4, #8]
 8013908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801390c:	f000 f907 	bl	8013b1e <memset>
 8013910:	4620      	mov	r0, r4
 8013912:	bd70      	pop	{r4, r5, r6, pc}

08013914 <__sfp_lock_acquire>:
 8013914:	4801      	ldr	r0, [pc, #4]	; (801391c <__sfp_lock_acquire+0x8>)
 8013916:	f000 b8d8 	b.w	8013aca <__retarget_lock_acquire_recursive>
 801391a:	bf00      	nop
 801391c:	20009895 	.word	0x20009895

08013920 <__sfp_lock_release>:
 8013920:	4801      	ldr	r0, [pc, #4]	; (8013928 <__sfp_lock_release+0x8>)
 8013922:	f000 b8d3 	b.w	8013acc <__retarget_lock_release_recursive>
 8013926:	bf00      	nop
 8013928:	20009895 	.word	0x20009895

0801392c <__sinit_lock_acquire>:
 801392c:	4801      	ldr	r0, [pc, #4]	; (8013934 <__sinit_lock_acquire+0x8>)
 801392e:	f000 b8cc 	b.w	8013aca <__retarget_lock_acquire_recursive>
 8013932:	bf00      	nop
 8013934:	20009896 	.word	0x20009896

08013938 <__sinit_lock_release>:
 8013938:	4801      	ldr	r0, [pc, #4]	; (8013940 <__sinit_lock_release+0x8>)
 801393a:	f000 b8c7 	b.w	8013acc <__retarget_lock_release_recursive>
 801393e:	bf00      	nop
 8013940:	20009896 	.word	0x20009896

08013944 <__sinit>:
 8013944:	b510      	push	{r4, lr}
 8013946:	4604      	mov	r4, r0
 8013948:	f7ff fff0 	bl	801392c <__sinit_lock_acquire>
 801394c:	69a3      	ldr	r3, [r4, #24]
 801394e:	b11b      	cbz	r3, 8013958 <__sinit+0x14>
 8013950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013954:	f7ff bff0 	b.w	8013938 <__sinit_lock_release>
 8013958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801395c:	6523      	str	r3, [r4, #80]	; 0x50
 801395e:	4b13      	ldr	r3, [pc, #76]	; (80139ac <__sinit+0x68>)
 8013960:	4a13      	ldr	r2, [pc, #76]	; (80139b0 <__sinit+0x6c>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	62a2      	str	r2, [r4, #40]	; 0x28
 8013966:	42a3      	cmp	r3, r4
 8013968:	bf04      	itt	eq
 801396a:	2301      	moveq	r3, #1
 801396c:	61a3      	streq	r3, [r4, #24]
 801396e:	4620      	mov	r0, r4
 8013970:	f000 f820 	bl	80139b4 <__sfp>
 8013974:	6060      	str	r0, [r4, #4]
 8013976:	4620      	mov	r0, r4
 8013978:	f000 f81c 	bl	80139b4 <__sfp>
 801397c:	60a0      	str	r0, [r4, #8]
 801397e:	4620      	mov	r0, r4
 8013980:	f000 f818 	bl	80139b4 <__sfp>
 8013984:	2200      	movs	r2, #0
 8013986:	60e0      	str	r0, [r4, #12]
 8013988:	2104      	movs	r1, #4
 801398a:	6860      	ldr	r0, [r4, #4]
 801398c:	f7ff ff82 	bl	8013894 <std>
 8013990:	68a0      	ldr	r0, [r4, #8]
 8013992:	2201      	movs	r2, #1
 8013994:	2109      	movs	r1, #9
 8013996:	f7ff ff7d 	bl	8013894 <std>
 801399a:	68e0      	ldr	r0, [r4, #12]
 801399c:	2202      	movs	r2, #2
 801399e:	2112      	movs	r1, #18
 80139a0:	f7ff ff78 	bl	8013894 <std>
 80139a4:	2301      	movs	r3, #1
 80139a6:	61a3      	str	r3, [r4, #24]
 80139a8:	e7d2      	b.n	8013950 <__sinit+0xc>
 80139aa:	bf00      	nop
 80139ac:	08016e40 	.word	0x08016e40
 80139b0:	080138dd 	.word	0x080138dd

080139b4 <__sfp>:
 80139b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139b6:	4607      	mov	r7, r0
 80139b8:	f7ff ffac 	bl	8013914 <__sfp_lock_acquire>
 80139bc:	4b1e      	ldr	r3, [pc, #120]	; (8013a38 <__sfp+0x84>)
 80139be:	681e      	ldr	r6, [r3, #0]
 80139c0:	69b3      	ldr	r3, [r6, #24]
 80139c2:	b913      	cbnz	r3, 80139ca <__sfp+0x16>
 80139c4:	4630      	mov	r0, r6
 80139c6:	f7ff ffbd 	bl	8013944 <__sinit>
 80139ca:	3648      	adds	r6, #72	; 0x48
 80139cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80139d0:	3b01      	subs	r3, #1
 80139d2:	d503      	bpl.n	80139dc <__sfp+0x28>
 80139d4:	6833      	ldr	r3, [r6, #0]
 80139d6:	b30b      	cbz	r3, 8013a1c <__sfp+0x68>
 80139d8:	6836      	ldr	r6, [r6, #0]
 80139da:	e7f7      	b.n	80139cc <__sfp+0x18>
 80139dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139e0:	b9d5      	cbnz	r5, 8013a18 <__sfp+0x64>
 80139e2:	4b16      	ldr	r3, [pc, #88]	; (8013a3c <__sfp+0x88>)
 80139e4:	60e3      	str	r3, [r4, #12]
 80139e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139ea:	6665      	str	r5, [r4, #100]	; 0x64
 80139ec:	f000 f86c 	bl	8013ac8 <__retarget_lock_init_recursive>
 80139f0:	f7ff ff96 	bl	8013920 <__sfp_lock_release>
 80139f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80139f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80139fc:	6025      	str	r5, [r4, #0]
 80139fe:	61a5      	str	r5, [r4, #24]
 8013a00:	2208      	movs	r2, #8
 8013a02:	4629      	mov	r1, r5
 8013a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a08:	f000 f889 	bl	8013b1e <memset>
 8013a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a14:	4620      	mov	r0, r4
 8013a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a18:	3468      	adds	r4, #104	; 0x68
 8013a1a:	e7d9      	b.n	80139d0 <__sfp+0x1c>
 8013a1c:	2104      	movs	r1, #4
 8013a1e:	4638      	mov	r0, r7
 8013a20:	f7ff ff62 	bl	80138e8 <__sfmoreglue>
 8013a24:	4604      	mov	r4, r0
 8013a26:	6030      	str	r0, [r6, #0]
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d1d5      	bne.n	80139d8 <__sfp+0x24>
 8013a2c:	f7ff ff78 	bl	8013920 <__sfp_lock_release>
 8013a30:	230c      	movs	r3, #12
 8013a32:	603b      	str	r3, [r7, #0]
 8013a34:	e7ee      	b.n	8013a14 <__sfp+0x60>
 8013a36:	bf00      	nop
 8013a38:	08016e40 	.word	0x08016e40
 8013a3c:	ffff0001 	.word	0xffff0001

08013a40 <_fwalk_reent>:
 8013a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a44:	4606      	mov	r6, r0
 8013a46:	4688      	mov	r8, r1
 8013a48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a4c:	2700      	movs	r7, #0
 8013a4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a52:	f1b9 0901 	subs.w	r9, r9, #1
 8013a56:	d505      	bpl.n	8013a64 <_fwalk_reent+0x24>
 8013a58:	6824      	ldr	r4, [r4, #0]
 8013a5a:	2c00      	cmp	r4, #0
 8013a5c:	d1f7      	bne.n	8013a4e <_fwalk_reent+0xe>
 8013a5e:	4638      	mov	r0, r7
 8013a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a64:	89ab      	ldrh	r3, [r5, #12]
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	d907      	bls.n	8013a7a <_fwalk_reent+0x3a>
 8013a6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a6e:	3301      	adds	r3, #1
 8013a70:	d003      	beq.n	8013a7a <_fwalk_reent+0x3a>
 8013a72:	4629      	mov	r1, r5
 8013a74:	4630      	mov	r0, r6
 8013a76:	47c0      	blx	r8
 8013a78:	4307      	orrs	r7, r0
 8013a7a:	3568      	adds	r5, #104	; 0x68
 8013a7c:	e7e9      	b.n	8013a52 <_fwalk_reent+0x12>
	...

08013a80 <__libc_init_array>:
 8013a80:	b570      	push	{r4, r5, r6, lr}
 8013a82:	4d0d      	ldr	r5, [pc, #52]	; (8013ab8 <__libc_init_array+0x38>)
 8013a84:	4c0d      	ldr	r4, [pc, #52]	; (8013abc <__libc_init_array+0x3c>)
 8013a86:	1b64      	subs	r4, r4, r5
 8013a88:	10a4      	asrs	r4, r4, #2
 8013a8a:	2600      	movs	r6, #0
 8013a8c:	42a6      	cmp	r6, r4
 8013a8e:	d109      	bne.n	8013aa4 <__libc_init_array+0x24>
 8013a90:	4d0b      	ldr	r5, [pc, #44]	; (8013ac0 <__libc_init_array+0x40>)
 8013a92:	4c0c      	ldr	r4, [pc, #48]	; (8013ac4 <__libc_init_array+0x44>)
 8013a94:	f002 fe78 	bl	8016788 <_init>
 8013a98:	1b64      	subs	r4, r4, r5
 8013a9a:	10a4      	asrs	r4, r4, #2
 8013a9c:	2600      	movs	r6, #0
 8013a9e:	42a6      	cmp	r6, r4
 8013aa0:	d105      	bne.n	8013aae <__libc_init_array+0x2e>
 8013aa2:	bd70      	pop	{r4, r5, r6, pc}
 8013aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013aa8:	4798      	blx	r3
 8013aaa:	3601      	adds	r6, #1
 8013aac:	e7ee      	b.n	8013a8c <__libc_init_array+0xc>
 8013aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ab2:	4798      	blx	r3
 8013ab4:	3601      	adds	r6, #1
 8013ab6:	e7f2      	b.n	8013a9e <__libc_init_array+0x1e>
 8013ab8:	080171bc 	.word	0x080171bc
 8013abc:	080171bc 	.word	0x080171bc
 8013ac0:	080171bc 	.word	0x080171bc
 8013ac4:	080171cc 	.word	0x080171cc

08013ac8 <__retarget_lock_init_recursive>:
 8013ac8:	4770      	bx	lr

08013aca <__retarget_lock_acquire_recursive>:
 8013aca:	4770      	bx	lr

08013acc <__retarget_lock_release_recursive>:
 8013acc:	4770      	bx	lr

08013ace <memcpy>:
 8013ace:	440a      	add	r2, r1
 8013ad0:	4291      	cmp	r1, r2
 8013ad2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013ad6:	d100      	bne.n	8013ada <memcpy+0xc>
 8013ad8:	4770      	bx	lr
 8013ada:	b510      	push	{r4, lr}
 8013adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ae4:	4291      	cmp	r1, r2
 8013ae6:	d1f9      	bne.n	8013adc <memcpy+0xe>
 8013ae8:	bd10      	pop	{r4, pc}

08013aea <memmove>:
 8013aea:	4288      	cmp	r0, r1
 8013aec:	b510      	push	{r4, lr}
 8013aee:	eb01 0402 	add.w	r4, r1, r2
 8013af2:	d902      	bls.n	8013afa <memmove+0x10>
 8013af4:	4284      	cmp	r4, r0
 8013af6:	4623      	mov	r3, r4
 8013af8:	d807      	bhi.n	8013b0a <memmove+0x20>
 8013afa:	1e43      	subs	r3, r0, #1
 8013afc:	42a1      	cmp	r1, r4
 8013afe:	d008      	beq.n	8013b12 <memmove+0x28>
 8013b00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b08:	e7f8      	b.n	8013afc <memmove+0x12>
 8013b0a:	4402      	add	r2, r0
 8013b0c:	4601      	mov	r1, r0
 8013b0e:	428a      	cmp	r2, r1
 8013b10:	d100      	bne.n	8013b14 <memmove+0x2a>
 8013b12:	bd10      	pop	{r4, pc}
 8013b14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b1c:	e7f7      	b.n	8013b0e <memmove+0x24>

08013b1e <memset>:
 8013b1e:	4402      	add	r2, r0
 8013b20:	4603      	mov	r3, r0
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d100      	bne.n	8013b28 <memset+0xa>
 8013b26:	4770      	bx	lr
 8013b28:	f803 1b01 	strb.w	r1, [r3], #1
 8013b2c:	e7f9      	b.n	8013b22 <memset+0x4>
	...

08013b30 <sbrk_aligned>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	4e0e      	ldr	r6, [pc, #56]	; (8013b6c <sbrk_aligned+0x3c>)
 8013b34:	460c      	mov	r4, r1
 8013b36:	6831      	ldr	r1, [r6, #0]
 8013b38:	4605      	mov	r5, r0
 8013b3a:	b911      	cbnz	r1, 8013b42 <sbrk_aligned+0x12>
 8013b3c:	f000 fd60 	bl	8014600 <_sbrk_r>
 8013b40:	6030      	str	r0, [r6, #0]
 8013b42:	4621      	mov	r1, r4
 8013b44:	4628      	mov	r0, r5
 8013b46:	f000 fd5b 	bl	8014600 <_sbrk_r>
 8013b4a:	1c43      	adds	r3, r0, #1
 8013b4c:	d00a      	beq.n	8013b64 <sbrk_aligned+0x34>
 8013b4e:	1cc4      	adds	r4, r0, #3
 8013b50:	f024 0403 	bic.w	r4, r4, #3
 8013b54:	42a0      	cmp	r0, r4
 8013b56:	d007      	beq.n	8013b68 <sbrk_aligned+0x38>
 8013b58:	1a21      	subs	r1, r4, r0
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	f000 fd50 	bl	8014600 <_sbrk_r>
 8013b60:	3001      	adds	r0, #1
 8013b62:	d101      	bne.n	8013b68 <sbrk_aligned+0x38>
 8013b64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013b68:	4620      	mov	r0, r4
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	2000989c 	.word	0x2000989c

08013b70 <_malloc_r>:
 8013b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b74:	1ccd      	adds	r5, r1, #3
 8013b76:	f025 0503 	bic.w	r5, r5, #3
 8013b7a:	3508      	adds	r5, #8
 8013b7c:	2d0c      	cmp	r5, #12
 8013b7e:	bf38      	it	cc
 8013b80:	250c      	movcc	r5, #12
 8013b82:	2d00      	cmp	r5, #0
 8013b84:	4607      	mov	r7, r0
 8013b86:	db01      	blt.n	8013b8c <_malloc_r+0x1c>
 8013b88:	42a9      	cmp	r1, r5
 8013b8a:	d905      	bls.n	8013b98 <_malloc_r+0x28>
 8013b8c:	230c      	movs	r3, #12
 8013b8e:	603b      	str	r3, [r7, #0]
 8013b90:	2600      	movs	r6, #0
 8013b92:	4630      	mov	r0, r6
 8013b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b98:	4e2e      	ldr	r6, [pc, #184]	; (8013c54 <_malloc_r+0xe4>)
 8013b9a:	f001 fd23 	bl	80155e4 <__malloc_lock>
 8013b9e:	6833      	ldr	r3, [r6, #0]
 8013ba0:	461c      	mov	r4, r3
 8013ba2:	bb34      	cbnz	r4, 8013bf2 <_malloc_r+0x82>
 8013ba4:	4629      	mov	r1, r5
 8013ba6:	4638      	mov	r0, r7
 8013ba8:	f7ff ffc2 	bl	8013b30 <sbrk_aligned>
 8013bac:	1c43      	adds	r3, r0, #1
 8013bae:	4604      	mov	r4, r0
 8013bb0:	d14d      	bne.n	8013c4e <_malloc_r+0xde>
 8013bb2:	6834      	ldr	r4, [r6, #0]
 8013bb4:	4626      	mov	r6, r4
 8013bb6:	2e00      	cmp	r6, #0
 8013bb8:	d140      	bne.n	8013c3c <_malloc_r+0xcc>
 8013bba:	6823      	ldr	r3, [r4, #0]
 8013bbc:	4631      	mov	r1, r6
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	eb04 0803 	add.w	r8, r4, r3
 8013bc4:	f000 fd1c 	bl	8014600 <_sbrk_r>
 8013bc8:	4580      	cmp	r8, r0
 8013bca:	d13a      	bne.n	8013c42 <_malloc_r+0xd2>
 8013bcc:	6821      	ldr	r1, [r4, #0]
 8013bce:	3503      	adds	r5, #3
 8013bd0:	1a6d      	subs	r5, r5, r1
 8013bd2:	f025 0503 	bic.w	r5, r5, #3
 8013bd6:	3508      	adds	r5, #8
 8013bd8:	2d0c      	cmp	r5, #12
 8013bda:	bf38      	it	cc
 8013bdc:	250c      	movcc	r5, #12
 8013bde:	4629      	mov	r1, r5
 8013be0:	4638      	mov	r0, r7
 8013be2:	f7ff ffa5 	bl	8013b30 <sbrk_aligned>
 8013be6:	3001      	adds	r0, #1
 8013be8:	d02b      	beq.n	8013c42 <_malloc_r+0xd2>
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	442b      	add	r3, r5
 8013bee:	6023      	str	r3, [r4, #0]
 8013bf0:	e00e      	b.n	8013c10 <_malloc_r+0xa0>
 8013bf2:	6822      	ldr	r2, [r4, #0]
 8013bf4:	1b52      	subs	r2, r2, r5
 8013bf6:	d41e      	bmi.n	8013c36 <_malloc_r+0xc6>
 8013bf8:	2a0b      	cmp	r2, #11
 8013bfa:	d916      	bls.n	8013c2a <_malloc_r+0xba>
 8013bfc:	1961      	adds	r1, r4, r5
 8013bfe:	42a3      	cmp	r3, r4
 8013c00:	6025      	str	r5, [r4, #0]
 8013c02:	bf18      	it	ne
 8013c04:	6059      	strne	r1, [r3, #4]
 8013c06:	6863      	ldr	r3, [r4, #4]
 8013c08:	bf08      	it	eq
 8013c0a:	6031      	streq	r1, [r6, #0]
 8013c0c:	5162      	str	r2, [r4, r5]
 8013c0e:	604b      	str	r3, [r1, #4]
 8013c10:	4638      	mov	r0, r7
 8013c12:	f104 060b 	add.w	r6, r4, #11
 8013c16:	f001 fceb 	bl	80155f0 <__malloc_unlock>
 8013c1a:	f026 0607 	bic.w	r6, r6, #7
 8013c1e:	1d23      	adds	r3, r4, #4
 8013c20:	1af2      	subs	r2, r6, r3
 8013c22:	d0b6      	beq.n	8013b92 <_malloc_r+0x22>
 8013c24:	1b9b      	subs	r3, r3, r6
 8013c26:	50a3      	str	r3, [r4, r2]
 8013c28:	e7b3      	b.n	8013b92 <_malloc_r+0x22>
 8013c2a:	6862      	ldr	r2, [r4, #4]
 8013c2c:	42a3      	cmp	r3, r4
 8013c2e:	bf0c      	ite	eq
 8013c30:	6032      	streq	r2, [r6, #0]
 8013c32:	605a      	strne	r2, [r3, #4]
 8013c34:	e7ec      	b.n	8013c10 <_malloc_r+0xa0>
 8013c36:	4623      	mov	r3, r4
 8013c38:	6864      	ldr	r4, [r4, #4]
 8013c3a:	e7b2      	b.n	8013ba2 <_malloc_r+0x32>
 8013c3c:	4634      	mov	r4, r6
 8013c3e:	6876      	ldr	r6, [r6, #4]
 8013c40:	e7b9      	b.n	8013bb6 <_malloc_r+0x46>
 8013c42:	230c      	movs	r3, #12
 8013c44:	603b      	str	r3, [r7, #0]
 8013c46:	4638      	mov	r0, r7
 8013c48:	f001 fcd2 	bl	80155f0 <__malloc_unlock>
 8013c4c:	e7a1      	b.n	8013b92 <_malloc_r+0x22>
 8013c4e:	6025      	str	r5, [r4, #0]
 8013c50:	e7de      	b.n	8013c10 <_malloc_r+0xa0>
 8013c52:	bf00      	nop
 8013c54:	20009898 	.word	0x20009898

08013c58 <__cvt>:
 8013c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c5c:	ec55 4b10 	vmov	r4, r5, d0
 8013c60:	2d00      	cmp	r5, #0
 8013c62:	460e      	mov	r6, r1
 8013c64:	4619      	mov	r1, r3
 8013c66:	462b      	mov	r3, r5
 8013c68:	bfbb      	ittet	lt
 8013c6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013c6e:	461d      	movlt	r5, r3
 8013c70:	2300      	movge	r3, #0
 8013c72:	232d      	movlt	r3, #45	; 0x2d
 8013c74:	700b      	strb	r3, [r1, #0]
 8013c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013c7c:	4691      	mov	r9, r2
 8013c7e:	f023 0820 	bic.w	r8, r3, #32
 8013c82:	bfbc      	itt	lt
 8013c84:	4622      	movlt	r2, r4
 8013c86:	4614      	movlt	r4, r2
 8013c88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c8c:	d005      	beq.n	8013c9a <__cvt+0x42>
 8013c8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013c92:	d100      	bne.n	8013c96 <__cvt+0x3e>
 8013c94:	3601      	adds	r6, #1
 8013c96:	2102      	movs	r1, #2
 8013c98:	e000      	b.n	8013c9c <__cvt+0x44>
 8013c9a:	2103      	movs	r1, #3
 8013c9c:	ab03      	add	r3, sp, #12
 8013c9e:	9301      	str	r3, [sp, #4]
 8013ca0:	ab02      	add	r3, sp, #8
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	ec45 4b10 	vmov	d0, r4, r5
 8013ca8:	4653      	mov	r3, sl
 8013caa:	4632      	mov	r2, r6
 8013cac:	f000 fdcc 	bl	8014848 <_dtoa_r>
 8013cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013cb4:	4607      	mov	r7, r0
 8013cb6:	d102      	bne.n	8013cbe <__cvt+0x66>
 8013cb8:	f019 0f01 	tst.w	r9, #1
 8013cbc:	d022      	beq.n	8013d04 <__cvt+0xac>
 8013cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013cc2:	eb07 0906 	add.w	r9, r7, r6
 8013cc6:	d110      	bne.n	8013cea <__cvt+0x92>
 8013cc8:	783b      	ldrb	r3, [r7, #0]
 8013cca:	2b30      	cmp	r3, #48	; 0x30
 8013ccc:	d10a      	bne.n	8013ce4 <__cvt+0x8c>
 8013cce:	2200      	movs	r2, #0
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	f7ec ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8013cda:	b918      	cbnz	r0, 8013ce4 <__cvt+0x8c>
 8013cdc:	f1c6 0601 	rsb	r6, r6, #1
 8013ce0:	f8ca 6000 	str.w	r6, [sl]
 8013ce4:	f8da 3000 	ldr.w	r3, [sl]
 8013ce8:	4499      	add	r9, r3
 8013cea:	2200      	movs	r2, #0
 8013cec:	2300      	movs	r3, #0
 8013cee:	4620      	mov	r0, r4
 8013cf0:	4629      	mov	r1, r5
 8013cf2:	f7ec ff01 	bl	8000af8 <__aeabi_dcmpeq>
 8013cf6:	b108      	cbz	r0, 8013cfc <__cvt+0xa4>
 8013cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8013cfc:	2230      	movs	r2, #48	; 0x30
 8013cfe:	9b03      	ldr	r3, [sp, #12]
 8013d00:	454b      	cmp	r3, r9
 8013d02:	d307      	bcc.n	8013d14 <__cvt+0xbc>
 8013d04:	9b03      	ldr	r3, [sp, #12]
 8013d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d08:	1bdb      	subs	r3, r3, r7
 8013d0a:	4638      	mov	r0, r7
 8013d0c:	6013      	str	r3, [r2, #0]
 8013d0e:	b004      	add	sp, #16
 8013d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d14:	1c59      	adds	r1, r3, #1
 8013d16:	9103      	str	r1, [sp, #12]
 8013d18:	701a      	strb	r2, [r3, #0]
 8013d1a:	e7f0      	b.n	8013cfe <__cvt+0xa6>

08013d1c <__exponent>:
 8013d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2900      	cmp	r1, #0
 8013d22:	bfb8      	it	lt
 8013d24:	4249      	neglt	r1, r1
 8013d26:	f803 2b02 	strb.w	r2, [r3], #2
 8013d2a:	bfb4      	ite	lt
 8013d2c:	222d      	movlt	r2, #45	; 0x2d
 8013d2e:	222b      	movge	r2, #43	; 0x2b
 8013d30:	2909      	cmp	r1, #9
 8013d32:	7042      	strb	r2, [r0, #1]
 8013d34:	dd2a      	ble.n	8013d8c <__exponent+0x70>
 8013d36:	f10d 0407 	add.w	r4, sp, #7
 8013d3a:	46a4      	mov	ip, r4
 8013d3c:	270a      	movs	r7, #10
 8013d3e:	46a6      	mov	lr, r4
 8013d40:	460a      	mov	r2, r1
 8013d42:	fb91 f6f7 	sdiv	r6, r1, r7
 8013d46:	fb07 1516 	mls	r5, r7, r6, r1
 8013d4a:	3530      	adds	r5, #48	; 0x30
 8013d4c:	2a63      	cmp	r2, #99	; 0x63
 8013d4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013d52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013d56:	4631      	mov	r1, r6
 8013d58:	dcf1      	bgt.n	8013d3e <__exponent+0x22>
 8013d5a:	3130      	adds	r1, #48	; 0x30
 8013d5c:	f1ae 0502 	sub.w	r5, lr, #2
 8013d60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013d64:	1c44      	adds	r4, r0, #1
 8013d66:	4629      	mov	r1, r5
 8013d68:	4561      	cmp	r1, ip
 8013d6a:	d30a      	bcc.n	8013d82 <__exponent+0x66>
 8013d6c:	f10d 0209 	add.w	r2, sp, #9
 8013d70:	eba2 020e 	sub.w	r2, r2, lr
 8013d74:	4565      	cmp	r5, ip
 8013d76:	bf88      	it	hi
 8013d78:	2200      	movhi	r2, #0
 8013d7a:	4413      	add	r3, r2
 8013d7c:	1a18      	subs	r0, r3, r0
 8013d7e:	b003      	add	sp, #12
 8013d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013d8a:	e7ed      	b.n	8013d68 <__exponent+0x4c>
 8013d8c:	2330      	movs	r3, #48	; 0x30
 8013d8e:	3130      	adds	r1, #48	; 0x30
 8013d90:	7083      	strb	r3, [r0, #2]
 8013d92:	70c1      	strb	r1, [r0, #3]
 8013d94:	1d03      	adds	r3, r0, #4
 8013d96:	e7f1      	b.n	8013d7c <__exponent+0x60>

08013d98 <_printf_float>:
 8013d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d9c:	ed2d 8b02 	vpush	{d8}
 8013da0:	b08d      	sub	sp, #52	; 0x34
 8013da2:	460c      	mov	r4, r1
 8013da4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013da8:	4616      	mov	r6, r2
 8013daa:	461f      	mov	r7, r3
 8013dac:	4605      	mov	r5, r0
 8013dae:	f001 fbfb 	bl	80155a8 <_localeconv_r>
 8013db2:	f8d0 a000 	ldr.w	sl, [r0]
 8013db6:	4650      	mov	r0, sl
 8013db8:	f7ec fa22 	bl	8000200 <strlen>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013dc0:	6823      	ldr	r3, [r4, #0]
 8013dc2:	9305      	str	r3, [sp, #20]
 8013dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8013dc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013dcc:	3307      	adds	r3, #7
 8013dce:	f023 0307 	bic.w	r3, r3, #7
 8013dd2:	f103 0208 	add.w	r2, r3, #8
 8013dd6:	f8c8 2000 	str.w	r2, [r8]
 8013dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013de2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013dea:	9307      	str	r3, [sp, #28]
 8013dec:	f8cd 8018 	str.w	r8, [sp, #24]
 8013df0:	ee08 0a10 	vmov	s16, r0
 8013df4:	4b9f      	ldr	r3, [pc, #636]	; (8014074 <_printf_float+0x2dc>)
 8013df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dfe:	f7ec fead 	bl	8000b5c <__aeabi_dcmpun>
 8013e02:	bb88      	cbnz	r0, 8013e68 <_printf_float+0xd0>
 8013e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e08:	4b9a      	ldr	r3, [pc, #616]	; (8014074 <_printf_float+0x2dc>)
 8013e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e0e:	f7ec fe87 	bl	8000b20 <__aeabi_dcmple>
 8013e12:	bb48      	cbnz	r0, 8013e68 <_printf_float+0xd0>
 8013e14:	2200      	movs	r2, #0
 8013e16:	2300      	movs	r3, #0
 8013e18:	4640      	mov	r0, r8
 8013e1a:	4649      	mov	r1, r9
 8013e1c:	f7ec fe76 	bl	8000b0c <__aeabi_dcmplt>
 8013e20:	b110      	cbz	r0, 8013e28 <_printf_float+0x90>
 8013e22:	232d      	movs	r3, #45	; 0x2d
 8013e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e28:	4b93      	ldr	r3, [pc, #588]	; (8014078 <_printf_float+0x2e0>)
 8013e2a:	4894      	ldr	r0, [pc, #592]	; (801407c <_printf_float+0x2e4>)
 8013e2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013e30:	bf94      	ite	ls
 8013e32:	4698      	movls	r8, r3
 8013e34:	4680      	movhi	r8, r0
 8013e36:	2303      	movs	r3, #3
 8013e38:	6123      	str	r3, [r4, #16]
 8013e3a:	9b05      	ldr	r3, [sp, #20]
 8013e3c:	f023 0204 	bic.w	r2, r3, #4
 8013e40:	6022      	str	r2, [r4, #0]
 8013e42:	f04f 0900 	mov.w	r9, #0
 8013e46:	9700      	str	r7, [sp, #0]
 8013e48:	4633      	mov	r3, r6
 8013e4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8013e4c:	4621      	mov	r1, r4
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f000 f9d8 	bl	8014204 <_printf_common>
 8013e54:	3001      	adds	r0, #1
 8013e56:	f040 8090 	bne.w	8013f7a <_printf_float+0x1e2>
 8013e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e5e:	b00d      	add	sp, #52	; 0x34
 8013e60:	ecbd 8b02 	vpop	{d8}
 8013e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e68:	4642      	mov	r2, r8
 8013e6a:	464b      	mov	r3, r9
 8013e6c:	4640      	mov	r0, r8
 8013e6e:	4649      	mov	r1, r9
 8013e70:	f7ec fe74 	bl	8000b5c <__aeabi_dcmpun>
 8013e74:	b140      	cbz	r0, 8013e88 <_printf_float+0xf0>
 8013e76:	464b      	mov	r3, r9
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	bfbc      	itt	lt
 8013e7c:	232d      	movlt	r3, #45	; 0x2d
 8013e7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013e82:	487f      	ldr	r0, [pc, #508]	; (8014080 <_printf_float+0x2e8>)
 8013e84:	4b7f      	ldr	r3, [pc, #508]	; (8014084 <_printf_float+0x2ec>)
 8013e86:	e7d1      	b.n	8013e2c <_printf_float+0x94>
 8013e88:	6863      	ldr	r3, [r4, #4]
 8013e8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013e8e:	9206      	str	r2, [sp, #24]
 8013e90:	1c5a      	adds	r2, r3, #1
 8013e92:	d13f      	bne.n	8013f14 <_printf_float+0x17c>
 8013e94:	2306      	movs	r3, #6
 8013e96:	6063      	str	r3, [r4, #4]
 8013e98:	9b05      	ldr	r3, [sp, #20]
 8013e9a:	6861      	ldr	r1, [r4, #4]
 8013e9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	9303      	str	r3, [sp, #12]
 8013ea4:	ab0a      	add	r3, sp, #40	; 0x28
 8013ea6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013eaa:	ab09      	add	r3, sp, #36	; 0x24
 8013eac:	ec49 8b10 	vmov	d0, r8, r9
 8013eb0:	9300      	str	r3, [sp, #0]
 8013eb2:	6022      	str	r2, [r4, #0]
 8013eb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f7ff fecd 	bl	8013c58 <__cvt>
 8013ebe:	9b06      	ldr	r3, [sp, #24]
 8013ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ec2:	2b47      	cmp	r3, #71	; 0x47
 8013ec4:	4680      	mov	r8, r0
 8013ec6:	d108      	bne.n	8013eda <_printf_float+0x142>
 8013ec8:	1cc8      	adds	r0, r1, #3
 8013eca:	db02      	blt.n	8013ed2 <_printf_float+0x13a>
 8013ecc:	6863      	ldr	r3, [r4, #4]
 8013ece:	4299      	cmp	r1, r3
 8013ed0:	dd41      	ble.n	8013f56 <_printf_float+0x1be>
 8013ed2:	f1ab 0b02 	sub.w	fp, fp, #2
 8013ed6:	fa5f fb8b 	uxtb.w	fp, fp
 8013eda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ede:	d820      	bhi.n	8013f22 <_printf_float+0x18a>
 8013ee0:	3901      	subs	r1, #1
 8013ee2:	465a      	mov	r2, fp
 8013ee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8013eea:	f7ff ff17 	bl	8013d1c <__exponent>
 8013eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ef0:	1813      	adds	r3, r2, r0
 8013ef2:	2a01      	cmp	r2, #1
 8013ef4:	4681      	mov	r9, r0
 8013ef6:	6123      	str	r3, [r4, #16]
 8013ef8:	dc02      	bgt.n	8013f00 <_printf_float+0x168>
 8013efa:	6822      	ldr	r2, [r4, #0]
 8013efc:	07d2      	lsls	r2, r2, #31
 8013efe:	d501      	bpl.n	8013f04 <_printf_float+0x16c>
 8013f00:	3301      	adds	r3, #1
 8013f02:	6123      	str	r3, [r4, #16]
 8013f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d09c      	beq.n	8013e46 <_printf_float+0xae>
 8013f0c:	232d      	movs	r3, #45	; 0x2d
 8013f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f12:	e798      	b.n	8013e46 <_printf_float+0xae>
 8013f14:	9a06      	ldr	r2, [sp, #24]
 8013f16:	2a47      	cmp	r2, #71	; 0x47
 8013f18:	d1be      	bne.n	8013e98 <_printf_float+0x100>
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1bc      	bne.n	8013e98 <_printf_float+0x100>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	e7b9      	b.n	8013e96 <_printf_float+0xfe>
 8013f22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013f26:	d118      	bne.n	8013f5a <_printf_float+0x1c2>
 8013f28:	2900      	cmp	r1, #0
 8013f2a:	6863      	ldr	r3, [r4, #4]
 8013f2c:	dd0b      	ble.n	8013f46 <_printf_float+0x1ae>
 8013f2e:	6121      	str	r1, [r4, #16]
 8013f30:	b913      	cbnz	r3, 8013f38 <_printf_float+0x1a0>
 8013f32:	6822      	ldr	r2, [r4, #0]
 8013f34:	07d0      	lsls	r0, r2, #31
 8013f36:	d502      	bpl.n	8013f3e <_printf_float+0x1a6>
 8013f38:	3301      	adds	r3, #1
 8013f3a:	440b      	add	r3, r1
 8013f3c:	6123      	str	r3, [r4, #16]
 8013f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013f40:	f04f 0900 	mov.w	r9, #0
 8013f44:	e7de      	b.n	8013f04 <_printf_float+0x16c>
 8013f46:	b913      	cbnz	r3, 8013f4e <_printf_float+0x1b6>
 8013f48:	6822      	ldr	r2, [r4, #0]
 8013f4a:	07d2      	lsls	r2, r2, #31
 8013f4c:	d501      	bpl.n	8013f52 <_printf_float+0x1ba>
 8013f4e:	3302      	adds	r3, #2
 8013f50:	e7f4      	b.n	8013f3c <_printf_float+0x1a4>
 8013f52:	2301      	movs	r3, #1
 8013f54:	e7f2      	b.n	8013f3c <_printf_float+0x1a4>
 8013f56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f5c:	4299      	cmp	r1, r3
 8013f5e:	db05      	blt.n	8013f6c <_printf_float+0x1d4>
 8013f60:	6823      	ldr	r3, [r4, #0]
 8013f62:	6121      	str	r1, [r4, #16]
 8013f64:	07d8      	lsls	r0, r3, #31
 8013f66:	d5ea      	bpl.n	8013f3e <_printf_float+0x1a6>
 8013f68:	1c4b      	adds	r3, r1, #1
 8013f6a:	e7e7      	b.n	8013f3c <_printf_float+0x1a4>
 8013f6c:	2900      	cmp	r1, #0
 8013f6e:	bfd4      	ite	le
 8013f70:	f1c1 0202 	rsble	r2, r1, #2
 8013f74:	2201      	movgt	r2, #1
 8013f76:	4413      	add	r3, r2
 8013f78:	e7e0      	b.n	8013f3c <_printf_float+0x1a4>
 8013f7a:	6823      	ldr	r3, [r4, #0]
 8013f7c:	055a      	lsls	r2, r3, #21
 8013f7e:	d407      	bmi.n	8013f90 <_printf_float+0x1f8>
 8013f80:	6923      	ldr	r3, [r4, #16]
 8013f82:	4642      	mov	r2, r8
 8013f84:	4631      	mov	r1, r6
 8013f86:	4628      	mov	r0, r5
 8013f88:	47b8      	blx	r7
 8013f8a:	3001      	adds	r0, #1
 8013f8c:	d12c      	bne.n	8013fe8 <_printf_float+0x250>
 8013f8e:	e764      	b.n	8013e5a <_printf_float+0xc2>
 8013f90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013f94:	f240 80e0 	bls.w	8014158 <_printf_float+0x3c0>
 8013f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	f7ec fdaa 	bl	8000af8 <__aeabi_dcmpeq>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	d034      	beq.n	8014012 <_printf_float+0x27a>
 8013fa8:	4a37      	ldr	r2, [pc, #220]	; (8014088 <_printf_float+0x2f0>)
 8013faa:	2301      	movs	r3, #1
 8013fac:	4631      	mov	r1, r6
 8013fae:	4628      	mov	r0, r5
 8013fb0:	47b8      	blx	r7
 8013fb2:	3001      	adds	r0, #1
 8013fb4:	f43f af51 	beq.w	8013e5a <_printf_float+0xc2>
 8013fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	db02      	blt.n	8013fc6 <_printf_float+0x22e>
 8013fc0:	6823      	ldr	r3, [r4, #0]
 8013fc2:	07d8      	lsls	r0, r3, #31
 8013fc4:	d510      	bpl.n	8013fe8 <_printf_float+0x250>
 8013fc6:	ee18 3a10 	vmov	r3, s16
 8013fca:	4652      	mov	r2, sl
 8013fcc:	4631      	mov	r1, r6
 8013fce:	4628      	mov	r0, r5
 8013fd0:	47b8      	blx	r7
 8013fd2:	3001      	adds	r0, #1
 8013fd4:	f43f af41 	beq.w	8013e5a <_printf_float+0xc2>
 8013fd8:	f04f 0800 	mov.w	r8, #0
 8013fdc:	f104 091a 	add.w	r9, r4, #26
 8013fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	4543      	cmp	r3, r8
 8013fe6:	dc09      	bgt.n	8013ffc <_printf_float+0x264>
 8013fe8:	6823      	ldr	r3, [r4, #0]
 8013fea:	079b      	lsls	r3, r3, #30
 8013fec:	f100 8105 	bmi.w	80141fa <_printf_float+0x462>
 8013ff0:	68e0      	ldr	r0, [r4, #12]
 8013ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ff4:	4298      	cmp	r0, r3
 8013ff6:	bfb8      	it	lt
 8013ff8:	4618      	movlt	r0, r3
 8013ffa:	e730      	b.n	8013e5e <_printf_float+0xc6>
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	464a      	mov	r2, r9
 8014000:	4631      	mov	r1, r6
 8014002:	4628      	mov	r0, r5
 8014004:	47b8      	blx	r7
 8014006:	3001      	adds	r0, #1
 8014008:	f43f af27 	beq.w	8013e5a <_printf_float+0xc2>
 801400c:	f108 0801 	add.w	r8, r8, #1
 8014010:	e7e6      	b.n	8013fe0 <_printf_float+0x248>
 8014012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014014:	2b00      	cmp	r3, #0
 8014016:	dc39      	bgt.n	801408c <_printf_float+0x2f4>
 8014018:	4a1b      	ldr	r2, [pc, #108]	; (8014088 <_printf_float+0x2f0>)
 801401a:	2301      	movs	r3, #1
 801401c:	4631      	mov	r1, r6
 801401e:	4628      	mov	r0, r5
 8014020:	47b8      	blx	r7
 8014022:	3001      	adds	r0, #1
 8014024:	f43f af19 	beq.w	8013e5a <_printf_float+0xc2>
 8014028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801402c:	4313      	orrs	r3, r2
 801402e:	d102      	bne.n	8014036 <_printf_float+0x29e>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	07d9      	lsls	r1, r3, #31
 8014034:	d5d8      	bpl.n	8013fe8 <_printf_float+0x250>
 8014036:	ee18 3a10 	vmov	r3, s16
 801403a:	4652      	mov	r2, sl
 801403c:	4631      	mov	r1, r6
 801403e:	4628      	mov	r0, r5
 8014040:	47b8      	blx	r7
 8014042:	3001      	adds	r0, #1
 8014044:	f43f af09 	beq.w	8013e5a <_printf_float+0xc2>
 8014048:	f04f 0900 	mov.w	r9, #0
 801404c:	f104 0a1a 	add.w	sl, r4, #26
 8014050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014052:	425b      	negs	r3, r3
 8014054:	454b      	cmp	r3, r9
 8014056:	dc01      	bgt.n	801405c <_printf_float+0x2c4>
 8014058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801405a:	e792      	b.n	8013f82 <_printf_float+0x1ea>
 801405c:	2301      	movs	r3, #1
 801405e:	4652      	mov	r2, sl
 8014060:	4631      	mov	r1, r6
 8014062:	4628      	mov	r0, r5
 8014064:	47b8      	blx	r7
 8014066:	3001      	adds	r0, #1
 8014068:	f43f aef7 	beq.w	8013e5a <_printf_float+0xc2>
 801406c:	f109 0901 	add.w	r9, r9, #1
 8014070:	e7ee      	b.n	8014050 <_printf_float+0x2b8>
 8014072:	bf00      	nop
 8014074:	7fefffff 	.word	0x7fefffff
 8014078:	08016e44 	.word	0x08016e44
 801407c:	08016e48 	.word	0x08016e48
 8014080:	08016e50 	.word	0x08016e50
 8014084:	08016e4c 	.word	0x08016e4c
 8014088:	08016e54 	.word	0x08016e54
 801408c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801408e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014090:	429a      	cmp	r2, r3
 8014092:	bfa8      	it	ge
 8014094:	461a      	movge	r2, r3
 8014096:	2a00      	cmp	r2, #0
 8014098:	4691      	mov	r9, r2
 801409a:	dc37      	bgt.n	801410c <_printf_float+0x374>
 801409c:	f04f 0b00 	mov.w	fp, #0
 80140a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140a4:	f104 021a 	add.w	r2, r4, #26
 80140a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80140aa:	9305      	str	r3, [sp, #20]
 80140ac:	eba3 0309 	sub.w	r3, r3, r9
 80140b0:	455b      	cmp	r3, fp
 80140b2:	dc33      	bgt.n	801411c <_printf_float+0x384>
 80140b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140b8:	429a      	cmp	r2, r3
 80140ba:	db3b      	blt.n	8014134 <_printf_float+0x39c>
 80140bc:	6823      	ldr	r3, [r4, #0]
 80140be:	07da      	lsls	r2, r3, #31
 80140c0:	d438      	bmi.n	8014134 <_printf_float+0x39c>
 80140c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140c4:	9a05      	ldr	r2, [sp, #20]
 80140c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140c8:	1a9a      	subs	r2, r3, r2
 80140ca:	eba3 0901 	sub.w	r9, r3, r1
 80140ce:	4591      	cmp	r9, r2
 80140d0:	bfa8      	it	ge
 80140d2:	4691      	movge	r9, r2
 80140d4:	f1b9 0f00 	cmp.w	r9, #0
 80140d8:	dc35      	bgt.n	8014146 <_printf_float+0x3ae>
 80140da:	f04f 0800 	mov.w	r8, #0
 80140de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140e2:	f104 0a1a 	add.w	sl, r4, #26
 80140e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140ea:	1a9b      	subs	r3, r3, r2
 80140ec:	eba3 0309 	sub.w	r3, r3, r9
 80140f0:	4543      	cmp	r3, r8
 80140f2:	f77f af79 	ble.w	8013fe8 <_printf_float+0x250>
 80140f6:	2301      	movs	r3, #1
 80140f8:	4652      	mov	r2, sl
 80140fa:	4631      	mov	r1, r6
 80140fc:	4628      	mov	r0, r5
 80140fe:	47b8      	blx	r7
 8014100:	3001      	adds	r0, #1
 8014102:	f43f aeaa 	beq.w	8013e5a <_printf_float+0xc2>
 8014106:	f108 0801 	add.w	r8, r8, #1
 801410a:	e7ec      	b.n	80140e6 <_printf_float+0x34e>
 801410c:	4613      	mov	r3, r2
 801410e:	4631      	mov	r1, r6
 8014110:	4642      	mov	r2, r8
 8014112:	4628      	mov	r0, r5
 8014114:	47b8      	blx	r7
 8014116:	3001      	adds	r0, #1
 8014118:	d1c0      	bne.n	801409c <_printf_float+0x304>
 801411a:	e69e      	b.n	8013e5a <_printf_float+0xc2>
 801411c:	2301      	movs	r3, #1
 801411e:	4631      	mov	r1, r6
 8014120:	4628      	mov	r0, r5
 8014122:	9205      	str	r2, [sp, #20]
 8014124:	47b8      	blx	r7
 8014126:	3001      	adds	r0, #1
 8014128:	f43f ae97 	beq.w	8013e5a <_printf_float+0xc2>
 801412c:	9a05      	ldr	r2, [sp, #20]
 801412e:	f10b 0b01 	add.w	fp, fp, #1
 8014132:	e7b9      	b.n	80140a8 <_printf_float+0x310>
 8014134:	ee18 3a10 	vmov	r3, s16
 8014138:	4652      	mov	r2, sl
 801413a:	4631      	mov	r1, r6
 801413c:	4628      	mov	r0, r5
 801413e:	47b8      	blx	r7
 8014140:	3001      	adds	r0, #1
 8014142:	d1be      	bne.n	80140c2 <_printf_float+0x32a>
 8014144:	e689      	b.n	8013e5a <_printf_float+0xc2>
 8014146:	9a05      	ldr	r2, [sp, #20]
 8014148:	464b      	mov	r3, r9
 801414a:	4442      	add	r2, r8
 801414c:	4631      	mov	r1, r6
 801414e:	4628      	mov	r0, r5
 8014150:	47b8      	blx	r7
 8014152:	3001      	adds	r0, #1
 8014154:	d1c1      	bne.n	80140da <_printf_float+0x342>
 8014156:	e680      	b.n	8013e5a <_printf_float+0xc2>
 8014158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801415a:	2a01      	cmp	r2, #1
 801415c:	dc01      	bgt.n	8014162 <_printf_float+0x3ca>
 801415e:	07db      	lsls	r3, r3, #31
 8014160:	d538      	bpl.n	80141d4 <_printf_float+0x43c>
 8014162:	2301      	movs	r3, #1
 8014164:	4642      	mov	r2, r8
 8014166:	4631      	mov	r1, r6
 8014168:	4628      	mov	r0, r5
 801416a:	47b8      	blx	r7
 801416c:	3001      	adds	r0, #1
 801416e:	f43f ae74 	beq.w	8013e5a <_printf_float+0xc2>
 8014172:	ee18 3a10 	vmov	r3, s16
 8014176:	4652      	mov	r2, sl
 8014178:	4631      	mov	r1, r6
 801417a:	4628      	mov	r0, r5
 801417c:	47b8      	blx	r7
 801417e:	3001      	adds	r0, #1
 8014180:	f43f ae6b 	beq.w	8013e5a <_printf_float+0xc2>
 8014184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014188:	2200      	movs	r2, #0
 801418a:	2300      	movs	r3, #0
 801418c:	f7ec fcb4 	bl	8000af8 <__aeabi_dcmpeq>
 8014190:	b9d8      	cbnz	r0, 80141ca <_printf_float+0x432>
 8014192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014194:	f108 0201 	add.w	r2, r8, #1
 8014198:	3b01      	subs	r3, #1
 801419a:	4631      	mov	r1, r6
 801419c:	4628      	mov	r0, r5
 801419e:	47b8      	blx	r7
 80141a0:	3001      	adds	r0, #1
 80141a2:	d10e      	bne.n	80141c2 <_printf_float+0x42a>
 80141a4:	e659      	b.n	8013e5a <_printf_float+0xc2>
 80141a6:	2301      	movs	r3, #1
 80141a8:	4652      	mov	r2, sl
 80141aa:	4631      	mov	r1, r6
 80141ac:	4628      	mov	r0, r5
 80141ae:	47b8      	blx	r7
 80141b0:	3001      	adds	r0, #1
 80141b2:	f43f ae52 	beq.w	8013e5a <_printf_float+0xc2>
 80141b6:	f108 0801 	add.w	r8, r8, #1
 80141ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141bc:	3b01      	subs	r3, #1
 80141be:	4543      	cmp	r3, r8
 80141c0:	dcf1      	bgt.n	80141a6 <_printf_float+0x40e>
 80141c2:	464b      	mov	r3, r9
 80141c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80141c8:	e6dc      	b.n	8013f84 <_printf_float+0x1ec>
 80141ca:	f04f 0800 	mov.w	r8, #0
 80141ce:	f104 0a1a 	add.w	sl, r4, #26
 80141d2:	e7f2      	b.n	80141ba <_printf_float+0x422>
 80141d4:	2301      	movs	r3, #1
 80141d6:	4642      	mov	r2, r8
 80141d8:	e7df      	b.n	801419a <_printf_float+0x402>
 80141da:	2301      	movs	r3, #1
 80141dc:	464a      	mov	r2, r9
 80141de:	4631      	mov	r1, r6
 80141e0:	4628      	mov	r0, r5
 80141e2:	47b8      	blx	r7
 80141e4:	3001      	adds	r0, #1
 80141e6:	f43f ae38 	beq.w	8013e5a <_printf_float+0xc2>
 80141ea:	f108 0801 	add.w	r8, r8, #1
 80141ee:	68e3      	ldr	r3, [r4, #12]
 80141f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141f2:	1a5b      	subs	r3, r3, r1
 80141f4:	4543      	cmp	r3, r8
 80141f6:	dcf0      	bgt.n	80141da <_printf_float+0x442>
 80141f8:	e6fa      	b.n	8013ff0 <_printf_float+0x258>
 80141fa:	f04f 0800 	mov.w	r8, #0
 80141fe:	f104 0919 	add.w	r9, r4, #25
 8014202:	e7f4      	b.n	80141ee <_printf_float+0x456>

08014204 <_printf_common>:
 8014204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014208:	4616      	mov	r6, r2
 801420a:	4699      	mov	r9, r3
 801420c:	688a      	ldr	r2, [r1, #8]
 801420e:	690b      	ldr	r3, [r1, #16]
 8014210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014214:	4293      	cmp	r3, r2
 8014216:	bfb8      	it	lt
 8014218:	4613      	movlt	r3, r2
 801421a:	6033      	str	r3, [r6, #0]
 801421c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014220:	4607      	mov	r7, r0
 8014222:	460c      	mov	r4, r1
 8014224:	b10a      	cbz	r2, 801422a <_printf_common+0x26>
 8014226:	3301      	adds	r3, #1
 8014228:	6033      	str	r3, [r6, #0]
 801422a:	6823      	ldr	r3, [r4, #0]
 801422c:	0699      	lsls	r1, r3, #26
 801422e:	bf42      	ittt	mi
 8014230:	6833      	ldrmi	r3, [r6, #0]
 8014232:	3302      	addmi	r3, #2
 8014234:	6033      	strmi	r3, [r6, #0]
 8014236:	6825      	ldr	r5, [r4, #0]
 8014238:	f015 0506 	ands.w	r5, r5, #6
 801423c:	d106      	bne.n	801424c <_printf_common+0x48>
 801423e:	f104 0a19 	add.w	sl, r4, #25
 8014242:	68e3      	ldr	r3, [r4, #12]
 8014244:	6832      	ldr	r2, [r6, #0]
 8014246:	1a9b      	subs	r3, r3, r2
 8014248:	42ab      	cmp	r3, r5
 801424a:	dc26      	bgt.n	801429a <_printf_common+0x96>
 801424c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014250:	1e13      	subs	r3, r2, #0
 8014252:	6822      	ldr	r2, [r4, #0]
 8014254:	bf18      	it	ne
 8014256:	2301      	movne	r3, #1
 8014258:	0692      	lsls	r2, r2, #26
 801425a:	d42b      	bmi.n	80142b4 <_printf_common+0xb0>
 801425c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014260:	4649      	mov	r1, r9
 8014262:	4638      	mov	r0, r7
 8014264:	47c0      	blx	r8
 8014266:	3001      	adds	r0, #1
 8014268:	d01e      	beq.n	80142a8 <_printf_common+0xa4>
 801426a:	6823      	ldr	r3, [r4, #0]
 801426c:	68e5      	ldr	r5, [r4, #12]
 801426e:	6832      	ldr	r2, [r6, #0]
 8014270:	f003 0306 	and.w	r3, r3, #6
 8014274:	2b04      	cmp	r3, #4
 8014276:	bf08      	it	eq
 8014278:	1aad      	subeq	r5, r5, r2
 801427a:	68a3      	ldr	r3, [r4, #8]
 801427c:	6922      	ldr	r2, [r4, #16]
 801427e:	bf0c      	ite	eq
 8014280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014284:	2500      	movne	r5, #0
 8014286:	4293      	cmp	r3, r2
 8014288:	bfc4      	itt	gt
 801428a:	1a9b      	subgt	r3, r3, r2
 801428c:	18ed      	addgt	r5, r5, r3
 801428e:	2600      	movs	r6, #0
 8014290:	341a      	adds	r4, #26
 8014292:	42b5      	cmp	r5, r6
 8014294:	d11a      	bne.n	80142cc <_printf_common+0xc8>
 8014296:	2000      	movs	r0, #0
 8014298:	e008      	b.n	80142ac <_printf_common+0xa8>
 801429a:	2301      	movs	r3, #1
 801429c:	4652      	mov	r2, sl
 801429e:	4649      	mov	r1, r9
 80142a0:	4638      	mov	r0, r7
 80142a2:	47c0      	blx	r8
 80142a4:	3001      	adds	r0, #1
 80142a6:	d103      	bne.n	80142b0 <_printf_common+0xac>
 80142a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142b0:	3501      	adds	r5, #1
 80142b2:	e7c6      	b.n	8014242 <_printf_common+0x3e>
 80142b4:	18e1      	adds	r1, r4, r3
 80142b6:	1c5a      	adds	r2, r3, #1
 80142b8:	2030      	movs	r0, #48	; 0x30
 80142ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142be:	4422      	add	r2, r4
 80142c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142c8:	3302      	adds	r3, #2
 80142ca:	e7c7      	b.n	801425c <_printf_common+0x58>
 80142cc:	2301      	movs	r3, #1
 80142ce:	4622      	mov	r2, r4
 80142d0:	4649      	mov	r1, r9
 80142d2:	4638      	mov	r0, r7
 80142d4:	47c0      	blx	r8
 80142d6:	3001      	adds	r0, #1
 80142d8:	d0e6      	beq.n	80142a8 <_printf_common+0xa4>
 80142da:	3601      	adds	r6, #1
 80142dc:	e7d9      	b.n	8014292 <_printf_common+0x8e>
	...

080142e0 <_printf_i>:
 80142e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142e4:	7e0f      	ldrb	r7, [r1, #24]
 80142e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80142e8:	2f78      	cmp	r7, #120	; 0x78
 80142ea:	4691      	mov	r9, r2
 80142ec:	4680      	mov	r8, r0
 80142ee:	460c      	mov	r4, r1
 80142f0:	469a      	mov	sl, r3
 80142f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80142f6:	d807      	bhi.n	8014308 <_printf_i+0x28>
 80142f8:	2f62      	cmp	r7, #98	; 0x62
 80142fa:	d80a      	bhi.n	8014312 <_printf_i+0x32>
 80142fc:	2f00      	cmp	r7, #0
 80142fe:	f000 80d8 	beq.w	80144b2 <_printf_i+0x1d2>
 8014302:	2f58      	cmp	r7, #88	; 0x58
 8014304:	f000 80a3 	beq.w	801444e <_printf_i+0x16e>
 8014308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801430c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014310:	e03a      	b.n	8014388 <_printf_i+0xa8>
 8014312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014316:	2b15      	cmp	r3, #21
 8014318:	d8f6      	bhi.n	8014308 <_printf_i+0x28>
 801431a:	a101      	add	r1, pc, #4	; (adr r1, 8014320 <_printf_i+0x40>)
 801431c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014320:	08014379 	.word	0x08014379
 8014324:	0801438d 	.word	0x0801438d
 8014328:	08014309 	.word	0x08014309
 801432c:	08014309 	.word	0x08014309
 8014330:	08014309 	.word	0x08014309
 8014334:	08014309 	.word	0x08014309
 8014338:	0801438d 	.word	0x0801438d
 801433c:	08014309 	.word	0x08014309
 8014340:	08014309 	.word	0x08014309
 8014344:	08014309 	.word	0x08014309
 8014348:	08014309 	.word	0x08014309
 801434c:	08014499 	.word	0x08014499
 8014350:	080143bd 	.word	0x080143bd
 8014354:	0801447b 	.word	0x0801447b
 8014358:	08014309 	.word	0x08014309
 801435c:	08014309 	.word	0x08014309
 8014360:	080144bb 	.word	0x080144bb
 8014364:	08014309 	.word	0x08014309
 8014368:	080143bd 	.word	0x080143bd
 801436c:	08014309 	.word	0x08014309
 8014370:	08014309 	.word	0x08014309
 8014374:	08014483 	.word	0x08014483
 8014378:	682b      	ldr	r3, [r5, #0]
 801437a:	1d1a      	adds	r2, r3, #4
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	602a      	str	r2, [r5, #0]
 8014380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014388:	2301      	movs	r3, #1
 801438a:	e0a3      	b.n	80144d4 <_printf_i+0x1f4>
 801438c:	6820      	ldr	r0, [r4, #0]
 801438e:	6829      	ldr	r1, [r5, #0]
 8014390:	0606      	lsls	r6, r0, #24
 8014392:	f101 0304 	add.w	r3, r1, #4
 8014396:	d50a      	bpl.n	80143ae <_printf_i+0xce>
 8014398:	680e      	ldr	r6, [r1, #0]
 801439a:	602b      	str	r3, [r5, #0]
 801439c:	2e00      	cmp	r6, #0
 801439e:	da03      	bge.n	80143a8 <_printf_i+0xc8>
 80143a0:	232d      	movs	r3, #45	; 0x2d
 80143a2:	4276      	negs	r6, r6
 80143a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143a8:	485e      	ldr	r0, [pc, #376]	; (8014524 <_printf_i+0x244>)
 80143aa:	230a      	movs	r3, #10
 80143ac:	e019      	b.n	80143e2 <_printf_i+0x102>
 80143ae:	680e      	ldr	r6, [r1, #0]
 80143b0:	602b      	str	r3, [r5, #0]
 80143b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80143b6:	bf18      	it	ne
 80143b8:	b236      	sxthne	r6, r6
 80143ba:	e7ef      	b.n	801439c <_printf_i+0xbc>
 80143bc:	682b      	ldr	r3, [r5, #0]
 80143be:	6820      	ldr	r0, [r4, #0]
 80143c0:	1d19      	adds	r1, r3, #4
 80143c2:	6029      	str	r1, [r5, #0]
 80143c4:	0601      	lsls	r1, r0, #24
 80143c6:	d501      	bpl.n	80143cc <_printf_i+0xec>
 80143c8:	681e      	ldr	r6, [r3, #0]
 80143ca:	e002      	b.n	80143d2 <_printf_i+0xf2>
 80143cc:	0646      	lsls	r6, r0, #25
 80143ce:	d5fb      	bpl.n	80143c8 <_printf_i+0xe8>
 80143d0:	881e      	ldrh	r6, [r3, #0]
 80143d2:	4854      	ldr	r0, [pc, #336]	; (8014524 <_printf_i+0x244>)
 80143d4:	2f6f      	cmp	r7, #111	; 0x6f
 80143d6:	bf0c      	ite	eq
 80143d8:	2308      	moveq	r3, #8
 80143da:	230a      	movne	r3, #10
 80143dc:	2100      	movs	r1, #0
 80143de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80143e2:	6865      	ldr	r5, [r4, #4]
 80143e4:	60a5      	str	r5, [r4, #8]
 80143e6:	2d00      	cmp	r5, #0
 80143e8:	bfa2      	ittt	ge
 80143ea:	6821      	ldrge	r1, [r4, #0]
 80143ec:	f021 0104 	bicge.w	r1, r1, #4
 80143f0:	6021      	strge	r1, [r4, #0]
 80143f2:	b90e      	cbnz	r6, 80143f8 <_printf_i+0x118>
 80143f4:	2d00      	cmp	r5, #0
 80143f6:	d04d      	beq.n	8014494 <_printf_i+0x1b4>
 80143f8:	4615      	mov	r5, r2
 80143fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80143fe:	fb03 6711 	mls	r7, r3, r1, r6
 8014402:	5dc7      	ldrb	r7, [r0, r7]
 8014404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014408:	4637      	mov	r7, r6
 801440a:	42bb      	cmp	r3, r7
 801440c:	460e      	mov	r6, r1
 801440e:	d9f4      	bls.n	80143fa <_printf_i+0x11a>
 8014410:	2b08      	cmp	r3, #8
 8014412:	d10b      	bne.n	801442c <_printf_i+0x14c>
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	07de      	lsls	r6, r3, #31
 8014418:	d508      	bpl.n	801442c <_printf_i+0x14c>
 801441a:	6923      	ldr	r3, [r4, #16]
 801441c:	6861      	ldr	r1, [r4, #4]
 801441e:	4299      	cmp	r1, r3
 8014420:	bfde      	ittt	le
 8014422:	2330      	movle	r3, #48	; 0x30
 8014424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014428:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801442c:	1b52      	subs	r2, r2, r5
 801442e:	6122      	str	r2, [r4, #16]
 8014430:	f8cd a000 	str.w	sl, [sp]
 8014434:	464b      	mov	r3, r9
 8014436:	aa03      	add	r2, sp, #12
 8014438:	4621      	mov	r1, r4
 801443a:	4640      	mov	r0, r8
 801443c:	f7ff fee2 	bl	8014204 <_printf_common>
 8014440:	3001      	adds	r0, #1
 8014442:	d14c      	bne.n	80144de <_printf_i+0x1fe>
 8014444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014448:	b004      	add	sp, #16
 801444a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801444e:	4835      	ldr	r0, [pc, #212]	; (8014524 <_printf_i+0x244>)
 8014450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014454:	6829      	ldr	r1, [r5, #0]
 8014456:	6823      	ldr	r3, [r4, #0]
 8014458:	f851 6b04 	ldr.w	r6, [r1], #4
 801445c:	6029      	str	r1, [r5, #0]
 801445e:	061d      	lsls	r5, r3, #24
 8014460:	d514      	bpl.n	801448c <_printf_i+0x1ac>
 8014462:	07df      	lsls	r7, r3, #31
 8014464:	bf44      	itt	mi
 8014466:	f043 0320 	orrmi.w	r3, r3, #32
 801446a:	6023      	strmi	r3, [r4, #0]
 801446c:	b91e      	cbnz	r6, 8014476 <_printf_i+0x196>
 801446e:	6823      	ldr	r3, [r4, #0]
 8014470:	f023 0320 	bic.w	r3, r3, #32
 8014474:	6023      	str	r3, [r4, #0]
 8014476:	2310      	movs	r3, #16
 8014478:	e7b0      	b.n	80143dc <_printf_i+0xfc>
 801447a:	6823      	ldr	r3, [r4, #0]
 801447c:	f043 0320 	orr.w	r3, r3, #32
 8014480:	6023      	str	r3, [r4, #0]
 8014482:	2378      	movs	r3, #120	; 0x78
 8014484:	4828      	ldr	r0, [pc, #160]	; (8014528 <_printf_i+0x248>)
 8014486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801448a:	e7e3      	b.n	8014454 <_printf_i+0x174>
 801448c:	0659      	lsls	r1, r3, #25
 801448e:	bf48      	it	mi
 8014490:	b2b6      	uxthmi	r6, r6
 8014492:	e7e6      	b.n	8014462 <_printf_i+0x182>
 8014494:	4615      	mov	r5, r2
 8014496:	e7bb      	b.n	8014410 <_printf_i+0x130>
 8014498:	682b      	ldr	r3, [r5, #0]
 801449a:	6826      	ldr	r6, [r4, #0]
 801449c:	6961      	ldr	r1, [r4, #20]
 801449e:	1d18      	adds	r0, r3, #4
 80144a0:	6028      	str	r0, [r5, #0]
 80144a2:	0635      	lsls	r5, r6, #24
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	d501      	bpl.n	80144ac <_printf_i+0x1cc>
 80144a8:	6019      	str	r1, [r3, #0]
 80144aa:	e002      	b.n	80144b2 <_printf_i+0x1d2>
 80144ac:	0670      	lsls	r0, r6, #25
 80144ae:	d5fb      	bpl.n	80144a8 <_printf_i+0x1c8>
 80144b0:	8019      	strh	r1, [r3, #0]
 80144b2:	2300      	movs	r3, #0
 80144b4:	6123      	str	r3, [r4, #16]
 80144b6:	4615      	mov	r5, r2
 80144b8:	e7ba      	b.n	8014430 <_printf_i+0x150>
 80144ba:	682b      	ldr	r3, [r5, #0]
 80144bc:	1d1a      	adds	r2, r3, #4
 80144be:	602a      	str	r2, [r5, #0]
 80144c0:	681d      	ldr	r5, [r3, #0]
 80144c2:	6862      	ldr	r2, [r4, #4]
 80144c4:	2100      	movs	r1, #0
 80144c6:	4628      	mov	r0, r5
 80144c8:	f7eb fea2 	bl	8000210 <memchr>
 80144cc:	b108      	cbz	r0, 80144d2 <_printf_i+0x1f2>
 80144ce:	1b40      	subs	r0, r0, r5
 80144d0:	6060      	str	r0, [r4, #4]
 80144d2:	6863      	ldr	r3, [r4, #4]
 80144d4:	6123      	str	r3, [r4, #16]
 80144d6:	2300      	movs	r3, #0
 80144d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144dc:	e7a8      	b.n	8014430 <_printf_i+0x150>
 80144de:	6923      	ldr	r3, [r4, #16]
 80144e0:	462a      	mov	r2, r5
 80144e2:	4649      	mov	r1, r9
 80144e4:	4640      	mov	r0, r8
 80144e6:	47d0      	blx	sl
 80144e8:	3001      	adds	r0, #1
 80144ea:	d0ab      	beq.n	8014444 <_printf_i+0x164>
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	079b      	lsls	r3, r3, #30
 80144f0:	d413      	bmi.n	801451a <_printf_i+0x23a>
 80144f2:	68e0      	ldr	r0, [r4, #12]
 80144f4:	9b03      	ldr	r3, [sp, #12]
 80144f6:	4298      	cmp	r0, r3
 80144f8:	bfb8      	it	lt
 80144fa:	4618      	movlt	r0, r3
 80144fc:	e7a4      	b.n	8014448 <_printf_i+0x168>
 80144fe:	2301      	movs	r3, #1
 8014500:	4632      	mov	r2, r6
 8014502:	4649      	mov	r1, r9
 8014504:	4640      	mov	r0, r8
 8014506:	47d0      	blx	sl
 8014508:	3001      	adds	r0, #1
 801450a:	d09b      	beq.n	8014444 <_printf_i+0x164>
 801450c:	3501      	adds	r5, #1
 801450e:	68e3      	ldr	r3, [r4, #12]
 8014510:	9903      	ldr	r1, [sp, #12]
 8014512:	1a5b      	subs	r3, r3, r1
 8014514:	42ab      	cmp	r3, r5
 8014516:	dcf2      	bgt.n	80144fe <_printf_i+0x21e>
 8014518:	e7eb      	b.n	80144f2 <_printf_i+0x212>
 801451a:	2500      	movs	r5, #0
 801451c:	f104 0619 	add.w	r6, r4, #25
 8014520:	e7f5      	b.n	801450e <_printf_i+0x22e>
 8014522:	bf00      	nop
 8014524:	08016e56 	.word	0x08016e56
 8014528:	08016e67 	.word	0x08016e67

0801452c <cleanup_glue>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	460c      	mov	r4, r1
 8014530:	6809      	ldr	r1, [r1, #0]
 8014532:	4605      	mov	r5, r0
 8014534:	b109      	cbz	r1, 801453a <cleanup_glue+0xe>
 8014536:	f7ff fff9 	bl	801452c <cleanup_glue>
 801453a:	4621      	mov	r1, r4
 801453c:	4628      	mov	r0, r5
 801453e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014542:	f001 bbf5 	b.w	8015d30 <_free_r>
	...

08014548 <_reclaim_reent>:
 8014548:	4b2c      	ldr	r3, [pc, #176]	; (80145fc <_reclaim_reent+0xb4>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	4283      	cmp	r3, r0
 801454e:	b570      	push	{r4, r5, r6, lr}
 8014550:	4604      	mov	r4, r0
 8014552:	d051      	beq.n	80145f8 <_reclaim_reent+0xb0>
 8014554:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014556:	b143      	cbz	r3, 801456a <_reclaim_reent+0x22>
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d14a      	bne.n	80145f4 <_reclaim_reent+0xac>
 801455e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014560:	6819      	ldr	r1, [r3, #0]
 8014562:	b111      	cbz	r1, 801456a <_reclaim_reent+0x22>
 8014564:	4620      	mov	r0, r4
 8014566:	f001 fbe3 	bl	8015d30 <_free_r>
 801456a:	6961      	ldr	r1, [r4, #20]
 801456c:	b111      	cbz	r1, 8014574 <_reclaim_reent+0x2c>
 801456e:	4620      	mov	r0, r4
 8014570:	f001 fbde 	bl	8015d30 <_free_r>
 8014574:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014576:	b111      	cbz	r1, 801457e <_reclaim_reent+0x36>
 8014578:	4620      	mov	r0, r4
 801457a:	f001 fbd9 	bl	8015d30 <_free_r>
 801457e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014580:	b111      	cbz	r1, 8014588 <_reclaim_reent+0x40>
 8014582:	4620      	mov	r0, r4
 8014584:	f001 fbd4 	bl	8015d30 <_free_r>
 8014588:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801458a:	b111      	cbz	r1, 8014592 <_reclaim_reent+0x4a>
 801458c:	4620      	mov	r0, r4
 801458e:	f001 fbcf 	bl	8015d30 <_free_r>
 8014592:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014594:	b111      	cbz	r1, 801459c <_reclaim_reent+0x54>
 8014596:	4620      	mov	r0, r4
 8014598:	f001 fbca 	bl	8015d30 <_free_r>
 801459c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801459e:	b111      	cbz	r1, 80145a6 <_reclaim_reent+0x5e>
 80145a0:	4620      	mov	r0, r4
 80145a2:	f001 fbc5 	bl	8015d30 <_free_r>
 80145a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80145a8:	b111      	cbz	r1, 80145b0 <_reclaim_reent+0x68>
 80145aa:	4620      	mov	r0, r4
 80145ac:	f001 fbc0 	bl	8015d30 <_free_r>
 80145b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145b2:	b111      	cbz	r1, 80145ba <_reclaim_reent+0x72>
 80145b4:	4620      	mov	r0, r4
 80145b6:	f001 fbbb 	bl	8015d30 <_free_r>
 80145ba:	69a3      	ldr	r3, [r4, #24]
 80145bc:	b1e3      	cbz	r3, 80145f8 <_reclaim_reent+0xb0>
 80145be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80145c0:	4620      	mov	r0, r4
 80145c2:	4798      	blx	r3
 80145c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80145c6:	b1b9      	cbz	r1, 80145f8 <_reclaim_reent+0xb0>
 80145c8:	4620      	mov	r0, r4
 80145ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145ce:	f7ff bfad 	b.w	801452c <cleanup_glue>
 80145d2:	5949      	ldr	r1, [r1, r5]
 80145d4:	b941      	cbnz	r1, 80145e8 <_reclaim_reent+0xa0>
 80145d6:	3504      	adds	r5, #4
 80145d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145da:	2d80      	cmp	r5, #128	; 0x80
 80145dc:	68d9      	ldr	r1, [r3, #12]
 80145de:	d1f8      	bne.n	80145d2 <_reclaim_reent+0x8a>
 80145e0:	4620      	mov	r0, r4
 80145e2:	f001 fba5 	bl	8015d30 <_free_r>
 80145e6:	e7ba      	b.n	801455e <_reclaim_reent+0x16>
 80145e8:	680e      	ldr	r6, [r1, #0]
 80145ea:	4620      	mov	r0, r4
 80145ec:	f001 fba0 	bl	8015d30 <_free_r>
 80145f0:	4631      	mov	r1, r6
 80145f2:	e7ef      	b.n	80145d4 <_reclaim_reent+0x8c>
 80145f4:	2500      	movs	r5, #0
 80145f6:	e7ef      	b.n	80145d8 <_reclaim_reent+0x90>
 80145f8:	bd70      	pop	{r4, r5, r6, pc}
 80145fa:	bf00      	nop
 80145fc:	200003b8 	.word	0x200003b8

08014600 <_sbrk_r>:
 8014600:	b538      	push	{r3, r4, r5, lr}
 8014602:	4d06      	ldr	r5, [pc, #24]	; (801461c <_sbrk_r+0x1c>)
 8014604:	2300      	movs	r3, #0
 8014606:	4604      	mov	r4, r0
 8014608:	4608      	mov	r0, r1
 801460a:	602b      	str	r3, [r5, #0]
 801460c:	f7f0 fce8 	bl	8004fe0 <_sbrk>
 8014610:	1c43      	adds	r3, r0, #1
 8014612:	d102      	bne.n	801461a <_sbrk_r+0x1a>
 8014614:	682b      	ldr	r3, [r5, #0]
 8014616:	b103      	cbz	r3, 801461a <_sbrk_r+0x1a>
 8014618:	6023      	str	r3, [r4, #0]
 801461a:	bd38      	pop	{r3, r4, r5, pc}
 801461c:	200098a0 	.word	0x200098a0

08014620 <siprintf>:
 8014620:	b40e      	push	{r1, r2, r3}
 8014622:	b500      	push	{lr}
 8014624:	b09c      	sub	sp, #112	; 0x70
 8014626:	ab1d      	add	r3, sp, #116	; 0x74
 8014628:	9002      	str	r0, [sp, #8]
 801462a:	9006      	str	r0, [sp, #24]
 801462c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014630:	4809      	ldr	r0, [pc, #36]	; (8014658 <siprintf+0x38>)
 8014632:	9107      	str	r1, [sp, #28]
 8014634:	9104      	str	r1, [sp, #16]
 8014636:	4909      	ldr	r1, [pc, #36]	; (801465c <siprintf+0x3c>)
 8014638:	f853 2b04 	ldr.w	r2, [r3], #4
 801463c:	9105      	str	r1, [sp, #20]
 801463e:	6800      	ldr	r0, [r0, #0]
 8014640:	9301      	str	r3, [sp, #4]
 8014642:	a902      	add	r1, sp, #8
 8014644:	f001 fc1c 	bl	8015e80 <_svfiprintf_r>
 8014648:	9b02      	ldr	r3, [sp, #8]
 801464a:	2200      	movs	r2, #0
 801464c:	701a      	strb	r2, [r3, #0]
 801464e:	b01c      	add	sp, #112	; 0x70
 8014650:	f85d eb04 	ldr.w	lr, [sp], #4
 8014654:	b003      	add	sp, #12
 8014656:	4770      	bx	lr
 8014658:	200003b8 	.word	0x200003b8
 801465c:	ffff0208 	.word	0xffff0208

08014660 <__sread>:
 8014660:	b510      	push	{r4, lr}
 8014662:	460c      	mov	r4, r1
 8014664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014668:	f001 fd0a 	bl	8016080 <_read_r>
 801466c:	2800      	cmp	r0, #0
 801466e:	bfab      	itete	ge
 8014670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014672:	89a3      	ldrhlt	r3, [r4, #12]
 8014674:	181b      	addge	r3, r3, r0
 8014676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801467a:	bfac      	ite	ge
 801467c:	6563      	strge	r3, [r4, #84]	; 0x54
 801467e:	81a3      	strhlt	r3, [r4, #12]
 8014680:	bd10      	pop	{r4, pc}

08014682 <__swrite>:
 8014682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014686:	461f      	mov	r7, r3
 8014688:	898b      	ldrh	r3, [r1, #12]
 801468a:	05db      	lsls	r3, r3, #23
 801468c:	4605      	mov	r5, r0
 801468e:	460c      	mov	r4, r1
 8014690:	4616      	mov	r6, r2
 8014692:	d505      	bpl.n	80146a0 <__swrite+0x1e>
 8014694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014698:	2302      	movs	r3, #2
 801469a:	2200      	movs	r2, #0
 801469c:	f000 ff88 	bl	80155b0 <_lseek_r>
 80146a0:	89a3      	ldrh	r3, [r4, #12]
 80146a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146aa:	81a3      	strh	r3, [r4, #12]
 80146ac:	4632      	mov	r2, r6
 80146ae:	463b      	mov	r3, r7
 80146b0:	4628      	mov	r0, r5
 80146b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146b6:	f000 b817 	b.w	80146e8 <_write_r>

080146ba <__sseek>:
 80146ba:	b510      	push	{r4, lr}
 80146bc:	460c      	mov	r4, r1
 80146be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c2:	f000 ff75 	bl	80155b0 <_lseek_r>
 80146c6:	1c43      	adds	r3, r0, #1
 80146c8:	89a3      	ldrh	r3, [r4, #12]
 80146ca:	bf15      	itete	ne
 80146cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80146ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146d6:	81a3      	strheq	r3, [r4, #12]
 80146d8:	bf18      	it	ne
 80146da:	81a3      	strhne	r3, [r4, #12]
 80146dc:	bd10      	pop	{r4, pc}

080146de <__sclose>:
 80146de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146e2:	f000 b813 	b.w	801470c <_close_r>
	...

080146e8 <_write_r>:
 80146e8:	b538      	push	{r3, r4, r5, lr}
 80146ea:	4d07      	ldr	r5, [pc, #28]	; (8014708 <_write_r+0x20>)
 80146ec:	4604      	mov	r4, r0
 80146ee:	4608      	mov	r0, r1
 80146f0:	4611      	mov	r1, r2
 80146f2:	2200      	movs	r2, #0
 80146f4:	602a      	str	r2, [r5, #0]
 80146f6:	461a      	mov	r2, r3
 80146f8:	f7f0 fc21 	bl	8004f3e <_write>
 80146fc:	1c43      	adds	r3, r0, #1
 80146fe:	d102      	bne.n	8014706 <_write_r+0x1e>
 8014700:	682b      	ldr	r3, [r5, #0]
 8014702:	b103      	cbz	r3, 8014706 <_write_r+0x1e>
 8014704:	6023      	str	r3, [r4, #0]
 8014706:	bd38      	pop	{r3, r4, r5, pc}
 8014708:	200098a0 	.word	0x200098a0

0801470c <_close_r>:
 801470c:	b538      	push	{r3, r4, r5, lr}
 801470e:	4d06      	ldr	r5, [pc, #24]	; (8014728 <_close_r+0x1c>)
 8014710:	2300      	movs	r3, #0
 8014712:	4604      	mov	r4, r0
 8014714:	4608      	mov	r0, r1
 8014716:	602b      	str	r3, [r5, #0]
 8014718:	f7f0 fc2d 	bl	8004f76 <_close>
 801471c:	1c43      	adds	r3, r0, #1
 801471e:	d102      	bne.n	8014726 <_close_r+0x1a>
 8014720:	682b      	ldr	r3, [r5, #0]
 8014722:	b103      	cbz	r3, 8014726 <_close_r+0x1a>
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	bd38      	pop	{r3, r4, r5, pc}
 8014728:	200098a0 	.word	0x200098a0

0801472c <quorem>:
 801472c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014730:	6903      	ldr	r3, [r0, #16]
 8014732:	690c      	ldr	r4, [r1, #16]
 8014734:	42a3      	cmp	r3, r4
 8014736:	4607      	mov	r7, r0
 8014738:	f2c0 8081 	blt.w	801483e <quorem+0x112>
 801473c:	3c01      	subs	r4, #1
 801473e:	f101 0814 	add.w	r8, r1, #20
 8014742:	f100 0514 	add.w	r5, r0, #20
 8014746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014754:	3301      	adds	r3, #1
 8014756:	429a      	cmp	r2, r3
 8014758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801475c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014760:	fbb2 f6f3 	udiv	r6, r2, r3
 8014764:	d331      	bcc.n	80147ca <quorem+0x9e>
 8014766:	f04f 0e00 	mov.w	lr, #0
 801476a:	4640      	mov	r0, r8
 801476c:	46ac      	mov	ip, r5
 801476e:	46f2      	mov	sl, lr
 8014770:	f850 2b04 	ldr.w	r2, [r0], #4
 8014774:	b293      	uxth	r3, r2
 8014776:	fb06 e303 	mla	r3, r6, r3, lr
 801477a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801477e:	b29b      	uxth	r3, r3
 8014780:	ebaa 0303 	sub.w	r3, sl, r3
 8014784:	f8dc a000 	ldr.w	sl, [ip]
 8014788:	0c12      	lsrs	r2, r2, #16
 801478a:	fa13 f38a 	uxtah	r3, r3, sl
 801478e:	fb06 e202 	mla	r2, r6, r2, lr
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	9b00      	ldr	r3, [sp, #0]
 8014796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801479a:	b292      	uxth	r2, r2
 801479c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80147a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80147a8:	4581      	cmp	r9, r0
 80147aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147ae:	f84c 3b04 	str.w	r3, [ip], #4
 80147b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80147b6:	d2db      	bcs.n	8014770 <quorem+0x44>
 80147b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80147bc:	b92b      	cbnz	r3, 80147ca <quorem+0x9e>
 80147be:	9b01      	ldr	r3, [sp, #4]
 80147c0:	3b04      	subs	r3, #4
 80147c2:	429d      	cmp	r5, r3
 80147c4:	461a      	mov	r2, r3
 80147c6:	d32e      	bcc.n	8014826 <quorem+0xfa>
 80147c8:	613c      	str	r4, [r7, #16]
 80147ca:	4638      	mov	r0, r7
 80147cc:	f001 f998 	bl	8015b00 <__mcmp>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	db24      	blt.n	801481e <quorem+0xf2>
 80147d4:	3601      	adds	r6, #1
 80147d6:	4628      	mov	r0, r5
 80147d8:	f04f 0c00 	mov.w	ip, #0
 80147dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80147e0:	f8d0 e000 	ldr.w	lr, [r0]
 80147e4:	b293      	uxth	r3, r2
 80147e6:	ebac 0303 	sub.w	r3, ip, r3
 80147ea:	0c12      	lsrs	r2, r2, #16
 80147ec:	fa13 f38e 	uxtah	r3, r3, lr
 80147f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80147f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147fe:	45c1      	cmp	r9, r8
 8014800:	f840 3b04 	str.w	r3, [r0], #4
 8014804:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014808:	d2e8      	bcs.n	80147dc <quorem+0xb0>
 801480a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801480e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014812:	b922      	cbnz	r2, 801481e <quorem+0xf2>
 8014814:	3b04      	subs	r3, #4
 8014816:	429d      	cmp	r5, r3
 8014818:	461a      	mov	r2, r3
 801481a:	d30a      	bcc.n	8014832 <quorem+0x106>
 801481c:	613c      	str	r4, [r7, #16]
 801481e:	4630      	mov	r0, r6
 8014820:	b003      	add	sp, #12
 8014822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014826:	6812      	ldr	r2, [r2, #0]
 8014828:	3b04      	subs	r3, #4
 801482a:	2a00      	cmp	r2, #0
 801482c:	d1cc      	bne.n	80147c8 <quorem+0x9c>
 801482e:	3c01      	subs	r4, #1
 8014830:	e7c7      	b.n	80147c2 <quorem+0x96>
 8014832:	6812      	ldr	r2, [r2, #0]
 8014834:	3b04      	subs	r3, #4
 8014836:	2a00      	cmp	r2, #0
 8014838:	d1f0      	bne.n	801481c <quorem+0xf0>
 801483a:	3c01      	subs	r4, #1
 801483c:	e7eb      	b.n	8014816 <quorem+0xea>
 801483e:	2000      	movs	r0, #0
 8014840:	e7ee      	b.n	8014820 <quorem+0xf4>
 8014842:	0000      	movs	r0, r0
 8014844:	0000      	movs	r0, r0
	...

08014848 <_dtoa_r>:
 8014848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801484c:	ed2d 8b04 	vpush	{d8-d9}
 8014850:	ec57 6b10 	vmov	r6, r7, d0
 8014854:	b093      	sub	sp, #76	; 0x4c
 8014856:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014858:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801485c:	9106      	str	r1, [sp, #24]
 801485e:	ee10 aa10 	vmov	sl, s0
 8014862:	4604      	mov	r4, r0
 8014864:	9209      	str	r2, [sp, #36]	; 0x24
 8014866:	930c      	str	r3, [sp, #48]	; 0x30
 8014868:	46bb      	mov	fp, r7
 801486a:	b975      	cbnz	r5, 801488a <_dtoa_r+0x42>
 801486c:	2010      	movs	r0, #16
 801486e:	f000 feb1 	bl	80155d4 <malloc>
 8014872:	4602      	mov	r2, r0
 8014874:	6260      	str	r0, [r4, #36]	; 0x24
 8014876:	b920      	cbnz	r0, 8014882 <_dtoa_r+0x3a>
 8014878:	4ba7      	ldr	r3, [pc, #668]	; (8014b18 <_dtoa_r+0x2d0>)
 801487a:	21ea      	movs	r1, #234	; 0xea
 801487c:	48a7      	ldr	r0, [pc, #668]	; (8014b1c <_dtoa_r+0x2d4>)
 801487e:	f001 fc11 	bl	80160a4 <__assert_func>
 8014882:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014886:	6005      	str	r5, [r0, #0]
 8014888:	60c5      	str	r5, [r0, #12]
 801488a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801488c:	6819      	ldr	r1, [r3, #0]
 801488e:	b151      	cbz	r1, 80148a6 <_dtoa_r+0x5e>
 8014890:	685a      	ldr	r2, [r3, #4]
 8014892:	604a      	str	r2, [r1, #4]
 8014894:	2301      	movs	r3, #1
 8014896:	4093      	lsls	r3, r2
 8014898:	608b      	str	r3, [r1, #8]
 801489a:	4620      	mov	r0, r4
 801489c:	f000 feee 	bl	801567c <_Bfree>
 80148a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148a2:	2200      	movs	r2, #0
 80148a4:	601a      	str	r2, [r3, #0]
 80148a6:	1e3b      	subs	r3, r7, #0
 80148a8:	bfaa      	itet	ge
 80148aa:	2300      	movge	r3, #0
 80148ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80148b0:	f8c8 3000 	strge.w	r3, [r8]
 80148b4:	4b9a      	ldr	r3, [pc, #616]	; (8014b20 <_dtoa_r+0x2d8>)
 80148b6:	bfbc      	itt	lt
 80148b8:	2201      	movlt	r2, #1
 80148ba:	f8c8 2000 	strlt.w	r2, [r8]
 80148be:	ea33 030b 	bics.w	r3, r3, fp
 80148c2:	d11b      	bne.n	80148fc <_dtoa_r+0xb4>
 80148c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80148ca:	6013      	str	r3, [r2, #0]
 80148cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148d0:	4333      	orrs	r3, r6
 80148d2:	f000 8592 	beq.w	80153fa <_dtoa_r+0xbb2>
 80148d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148d8:	b963      	cbnz	r3, 80148f4 <_dtoa_r+0xac>
 80148da:	4b92      	ldr	r3, [pc, #584]	; (8014b24 <_dtoa_r+0x2dc>)
 80148dc:	e022      	b.n	8014924 <_dtoa_r+0xdc>
 80148de:	4b92      	ldr	r3, [pc, #584]	; (8014b28 <_dtoa_r+0x2e0>)
 80148e0:	9301      	str	r3, [sp, #4]
 80148e2:	3308      	adds	r3, #8
 80148e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148e6:	6013      	str	r3, [r2, #0]
 80148e8:	9801      	ldr	r0, [sp, #4]
 80148ea:	b013      	add	sp, #76	; 0x4c
 80148ec:	ecbd 8b04 	vpop	{d8-d9}
 80148f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f4:	4b8b      	ldr	r3, [pc, #556]	; (8014b24 <_dtoa_r+0x2dc>)
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	3303      	adds	r3, #3
 80148fa:	e7f3      	b.n	80148e4 <_dtoa_r+0x9c>
 80148fc:	2200      	movs	r2, #0
 80148fe:	2300      	movs	r3, #0
 8014900:	4650      	mov	r0, sl
 8014902:	4659      	mov	r1, fp
 8014904:	f7ec f8f8 	bl	8000af8 <__aeabi_dcmpeq>
 8014908:	ec4b ab19 	vmov	d9, sl, fp
 801490c:	4680      	mov	r8, r0
 801490e:	b158      	cbz	r0, 8014928 <_dtoa_r+0xe0>
 8014910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014912:	2301      	movs	r3, #1
 8014914:	6013      	str	r3, [r2, #0]
 8014916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014918:	2b00      	cmp	r3, #0
 801491a:	f000 856b 	beq.w	80153f4 <_dtoa_r+0xbac>
 801491e:	4883      	ldr	r0, [pc, #524]	; (8014b2c <_dtoa_r+0x2e4>)
 8014920:	6018      	str	r0, [r3, #0]
 8014922:	1e43      	subs	r3, r0, #1
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	e7df      	b.n	80148e8 <_dtoa_r+0xa0>
 8014928:	ec4b ab10 	vmov	d0, sl, fp
 801492c:	aa10      	add	r2, sp, #64	; 0x40
 801492e:	a911      	add	r1, sp, #68	; 0x44
 8014930:	4620      	mov	r0, r4
 8014932:	f001 f98b 	bl	8015c4c <__d2b>
 8014936:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801493a:	ee08 0a10 	vmov	s16, r0
 801493e:	2d00      	cmp	r5, #0
 8014940:	f000 8084 	beq.w	8014a4c <_dtoa_r+0x204>
 8014944:	ee19 3a90 	vmov	r3, s19
 8014948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801494c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014950:	4656      	mov	r6, sl
 8014952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801495a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801495e:	4b74      	ldr	r3, [pc, #464]	; (8014b30 <_dtoa_r+0x2e8>)
 8014960:	2200      	movs	r2, #0
 8014962:	4630      	mov	r0, r6
 8014964:	4639      	mov	r1, r7
 8014966:	f7eb fca7 	bl	80002b8 <__aeabi_dsub>
 801496a:	a365      	add	r3, pc, #404	; (adr r3, 8014b00 <_dtoa_r+0x2b8>)
 801496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014970:	f7eb fe5a 	bl	8000628 <__aeabi_dmul>
 8014974:	a364      	add	r3, pc, #400	; (adr r3, 8014b08 <_dtoa_r+0x2c0>)
 8014976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497a:	f7eb fc9f 	bl	80002bc <__adddf3>
 801497e:	4606      	mov	r6, r0
 8014980:	4628      	mov	r0, r5
 8014982:	460f      	mov	r7, r1
 8014984:	f7eb fde6 	bl	8000554 <__aeabi_i2d>
 8014988:	a361      	add	r3, pc, #388	; (adr r3, 8014b10 <_dtoa_r+0x2c8>)
 801498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498e:	f7eb fe4b 	bl	8000628 <__aeabi_dmul>
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	4630      	mov	r0, r6
 8014998:	4639      	mov	r1, r7
 801499a:	f7eb fc8f 	bl	80002bc <__adddf3>
 801499e:	4606      	mov	r6, r0
 80149a0:	460f      	mov	r7, r1
 80149a2:	f7ec f8f1 	bl	8000b88 <__aeabi_d2iz>
 80149a6:	2200      	movs	r2, #0
 80149a8:	9000      	str	r0, [sp, #0]
 80149aa:	2300      	movs	r3, #0
 80149ac:	4630      	mov	r0, r6
 80149ae:	4639      	mov	r1, r7
 80149b0:	f7ec f8ac 	bl	8000b0c <__aeabi_dcmplt>
 80149b4:	b150      	cbz	r0, 80149cc <_dtoa_r+0x184>
 80149b6:	9800      	ldr	r0, [sp, #0]
 80149b8:	f7eb fdcc 	bl	8000554 <__aeabi_i2d>
 80149bc:	4632      	mov	r2, r6
 80149be:	463b      	mov	r3, r7
 80149c0:	f7ec f89a 	bl	8000af8 <__aeabi_dcmpeq>
 80149c4:	b910      	cbnz	r0, 80149cc <_dtoa_r+0x184>
 80149c6:	9b00      	ldr	r3, [sp, #0]
 80149c8:	3b01      	subs	r3, #1
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	9b00      	ldr	r3, [sp, #0]
 80149ce:	2b16      	cmp	r3, #22
 80149d0:	d85a      	bhi.n	8014a88 <_dtoa_r+0x240>
 80149d2:	9a00      	ldr	r2, [sp, #0]
 80149d4:	4b57      	ldr	r3, [pc, #348]	; (8014b34 <_dtoa_r+0x2ec>)
 80149d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149de:	ec51 0b19 	vmov	r0, r1, d9
 80149e2:	f7ec f893 	bl	8000b0c <__aeabi_dcmplt>
 80149e6:	2800      	cmp	r0, #0
 80149e8:	d050      	beq.n	8014a8c <_dtoa_r+0x244>
 80149ea:	9b00      	ldr	r3, [sp, #0]
 80149ec:	3b01      	subs	r3, #1
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	2300      	movs	r3, #0
 80149f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80149f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149f6:	1b5d      	subs	r5, r3, r5
 80149f8:	1e6b      	subs	r3, r5, #1
 80149fa:	9305      	str	r3, [sp, #20]
 80149fc:	bf45      	ittet	mi
 80149fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8014a02:	9304      	strmi	r3, [sp, #16]
 8014a04:	2300      	movpl	r3, #0
 8014a06:	2300      	movmi	r3, #0
 8014a08:	bf4c      	ite	mi
 8014a0a:	9305      	strmi	r3, [sp, #20]
 8014a0c:	9304      	strpl	r3, [sp, #16]
 8014a0e:	9b00      	ldr	r3, [sp, #0]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	db3d      	blt.n	8014a90 <_dtoa_r+0x248>
 8014a14:	9b05      	ldr	r3, [sp, #20]
 8014a16:	9a00      	ldr	r2, [sp, #0]
 8014a18:	920a      	str	r2, [sp, #40]	; 0x28
 8014a1a:	4413      	add	r3, r2
 8014a1c:	9305      	str	r3, [sp, #20]
 8014a1e:	2300      	movs	r3, #0
 8014a20:	9307      	str	r3, [sp, #28]
 8014a22:	9b06      	ldr	r3, [sp, #24]
 8014a24:	2b09      	cmp	r3, #9
 8014a26:	f200 8089 	bhi.w	8014b3c <_dtoa_r+0x2f4>
 8014a2a:	2b05      	cmp	r3, #5
 8014a2c:	bfc4      	itt	gt
 8014a2e:	3b04      	subgt	r3, #4
 8014a30:	9306      	strgt	r3, [sp, #24]
 8014a32:	9b06      	ldr	r3, [sp, #24]
 8014a34:	f1a3 0302 	sub.w	r3, r3, #2
 8014a38:	bfcc      	ite	gt
 8014a3a:	2500      	movgt	r5, #0
 8014a3c:	2501      	movle	r5, #1
 8014a3e:	2b03      	cmp	r3, #3
 8014a40:	f200 8087 	bhi.w	8014b52 <_dtoa_r+0x30a>
 8014a44:	e8df f003 	tbb	[pc, r3]
 8014a48:	59383a2d 	.word	0x59383a2d
 8014a4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014a50:	441d      	add	r5, r3
 8014a52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014a56:	2b20      	cmp	r3, #32
 8014a58:	bfc1      	itttt	gt
 8014a5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014a5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014a62:	fa0b f303 	lslgt.w	r3, fp, r3
 8014a66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014a6a:	bfda      	itte	le
 8014a6c:	f1c3 0320 	rsble	r3, r3, #32
 8014a70:	fa06 f003 	lslle.w	r0, r6, r3
 8014a74:	4318      	orrgt	r0, r3
 8014a76:	f7eb fd5d 	bl	8000534 <__aeabi_ui2d>
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014a82:	3d01      	subs	r5, #1
 8014a84:	930e      	str	r3, [sp, #56]	; 0x38
 8014a86:	e76a      	b.n	801495e <_dtoa_r+0x116>
 8014a88:	2301      	movs	r3, #1
 8014a8a:	e7b2      	b.n	80149f2 <_dtoa_r+0x1aa>
 8014a8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a8e:	e7b1      	b.n	80149f4 <_dtoa_r+0x1ac>
 8014a90:	9b04      	ldr	r3, [sp, #16]
 8014a92:	9a00      	ldr	r2, [sp, #0]
 8014a94:	1a9b      	subs	r3, r3, r2
 8014a96:	9304      	str	r3, [sp, #16]
 8014a98:	4253      	negs	r3, r2
 8014a9a:	9307      	str	r3, [sp, #28]
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa0:	e7bf      	b.n	8014a22 <_dtoa_r+0x1da>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	9308      	str	r3, [sp, #32]
 8014aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	dc55      	bgt.n	8014b58 <_dtoa_r+0x310>
 8014aac:	2301      	movs	r3, #1
 8014aae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8014ab6:	e00c      	b.n	8014ad2 <_dtoa_r+0x28a>
 8014ab8:	2301      	movs	r3, #1
 8014aba:	e7f3      	b.n	8014aa4 <_dtoa_r+0x25c>
 8014abc:	2300      	movs	r3, #0
 8014abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ac0:	9308      	str	r3, [sp, #32]
 8014ac2:	9b00      	ldr	r3, [sp, #0]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	9302      	str	r3, [sp, #8]
 8014ac8:	3301      	adds	r3, #1
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	9303      	str	r3, [sp, #12]
 8014ace:	bfb8      	it	lt
 8014ad0:	2301      	movlt	r3, #1
 8014ad2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	6042      	str	r2, [r0, #4]
 8014ad8:	2204      	movs	r2, #4
 8014ada:	f102 0614 	add.w	r6, r2, #20
 8014ade:	429e      	cmp	r6, r3
 8014ae0:	6841      	ldr	r1, [r0, #4]
 8014ae2:	d93d      	bls.n	8014b60 <_dtoa_r+0x318>
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f000 fd89 	bl	80155fc <_Balloc>
 8014aea:	9001      	str	r0, [sp, #4]
 8014aec:	2800      	cmp	r0, #0
 8014aee:	d13b      	bne.n	8014b68 <_dtoa_r+0x320>
 8014af0:	4b11      	ldr	r3, [pc, #68]	; (8014b38 <_dtoa_r+0x2f0>)
 8014af2:	4602      	mov	r2, r0
 8014af4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014af8:	e6c0      	b.n	801487c <_dtoa_r+0x34>
 8014afa:	2301      	movs	r3, #1
 8014afc:	e7df      	b.n	8014abe <_dtoa_r+0x276>
 8014afe:	bf00      	nop
 8014b00:	636f4361 	.word	0x636f4361
 8014b04:	3fd287a7 	.word	0x3fd287a7
 8014b08:	8b60c8b3 	.word	0x8b60c8b3
 8014b0c:	3fc68a28 	.word	0x3fc68a28
 8014b10:	509f79fb 	.word	0x509f79fb
 8014b14:	3fd34413 	.word	0x3fd34413
 8014b18:	08016e85 	.word	0x08016e85
 8014b1c:	08016e9c 	.word	0x08016e9c
 8014b20:	7ff00000 	.word	0x7ff00000
 8014b24:	08016e81 	.word	0x08016e81
 8014b28:	08016e78 	.word	0x08016e78
 8014b2c:	08016e55 	.word	0x08016e55
 8014b30:	3ff80000 	.word	0x3ff80000
 8014b34:	08016f90 	.word	0x08016f90
 8014b38:	08016ef7 	.word	0x08016ef7
 8014b3c:	2501      	movs	r5, #1
 8014b3e:	2300      	movs	r3, #0
 8014b40:	9306      	str	r3, [sp, #24]
 8014b42:	9508      	str	r5, [sp, #32]
 8014b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	2312      	movs	r3, #18
 8014b50:	e7b0      	b.n	8014ab4 <_dtoa_r+0x26c>
 8014b52:	2301      	movs	r3, #1
 8014b54:	9308      	str	r3, [sp, #32]
 8014b56:	e7f5      	b.n	8014b44 <_dtoa_r+0x2fc>
 8014b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b5e:	e7b8      	b.n	8014ad2 <_dtoa_r+0x28a>
 8014b60:	3101      	adds	r1, #1
 8014b62:	6041      	str	r1, [r0, #4]
 8014b64:	0052      	lsls	r2, r2, #1
 8014b66:	e7b8      	b.n	8014ada <_dtoa_r+0x292>
 8014b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b6a:	9a01      	ldr	r2, [sp, #4]
 8014b6c:	601a      	str	r2, [r3, #0]
 8014b6e:	9b03      	ldr	r3, [sp, #12]
 8014b70:	2b0e      	cmp	r3, #14
 8014b72:	f200 809d 	bhi.w	8014cb0 <_dtoa_r+0x468>
 8014b76:	2d00      	cmp	r5, #0
 8014b78:	f000 809a 	beq.w	8014cb0 <_dtoa_r+0x468>
 8014b7c:	9b00      	ldr	r3, [sp, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	dd32      	ble.n	8014be8 <_dtoa_r+0x3a0>
 8014b82:	4ab7      	ldr	r2, [pc, #732]	; (8014e60 <_dtoa_r+0x618>)
 8014b84:	f003 030f 	and.w	r3, r3, #15
 8014b88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014b8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b90:	9b00      	ldr	r3, [sp, #0]
 8014b92:	05d8      	lsls	r0, r3, #23
 8014b94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014b98:	d516      	bpl.n	8014bc8 <_dtoa_r+0x380>
 8014b9a:	4bb2      	ldr	r3, [pc, #712]	; (8014e64 <_dtoa_r+0x61c>)
 8014b9c:	ec51 0b19 	vmov	r0, r1, d9
 8014ba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ba4:	f7eb fe6a 	bl	800087c <__aeabi_ddiv>
 8014ba8:	f007 070f 	and.w	r7, r7, #15
 8014bac:	4682      	mov	sl, r0
 8014bae:	468b      	mov	fp, r1
 8014bb0:	2503      	movs	r5, #3
 8014bb2:	4eac      	ldr	r6, [pc, #688]	; (8014e64 <_dtoa_r+0x61c>)
 8014bb4:	b957      	cbnz	r7, 8014bcc <_dtoa_r+0x384>
 8014bb6:	4642      	mov	r2, r8
 8014bb8:	464b      	mov	r3, r9
 8014bba:	4650      	mov	r0, sl
 8014bbc:	4659      	mov	r1, fp
 8014bbe:	f7eb fe5d 	bl	800087c <__aeabi_ddiv>
 8014bc2:	4682      	mov	sl, r0
 8014bc4:	468b      	mov	fp, r1
 8014bc6:	e028      	b.n	8014c1a <_dtoa_r+0x3d2>
 8014bc8:	2502      	movs	r5, #2
 8014bca:	e7f2      	b.n	8014bb2 <_dtoa_r+0x36a>
 8014bcc:	07f9      	lsls	r1, r7, #31
 8014bce:	d508      	bpl.n	8014be2 <_dtoa_r+0x39a>
 8014bd0:	4640      	mov	r0, r8
 8014bd2:	4649      	mov	r1, r9
 8014bd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014bd8:	f7eb fd26 	bl	8000628 <__aeabi_dmul>
 8014bdc:	3501      	adds	r5, #1
 8014bde:	4680      	mov	r8, r0
 8014be0:	4689      	mov	r9, r1
 8014be2:	107f      	asrs	r7, r7, #1
 8014be4:	3608      	adds	r6, #8
 8014be6:	e7e5      	b.n	8014bb4 <_dtoa_r+0x36c>
 8014be8:	f000 809b 	beq.w	8014d22 <_dtoa_r+0x4da>
 8014bec:	9b00      	ldr	r3, [sp, #0]
 8014bee:	4f9d      	ldr	r7, [pc, #628]	; (8014e64 <_dtoa_r+0x61c>)
 8014bf0:	425e      	negs	r6, r3
 8014bf2:	4b9b      	ldr	r3, [pc, #620]	; (8014e60 <_dtoa_r+0x618>)
 8014bf4:	f006 020f 	and.w	r2, r6, #15
 8014bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c00:	ec51 0b19 	vmov	r0, r1, d9
 8014c04:	f7eb fd10 	bl	8000628 <__aeabi_dmul>
 8014c08:	1136      	asrs	r6, r6, #4
 8014c0a:	4682      	mov	sl, r0
 8014c0c:	468b      	mov	fp, r1
 8014c0e:	2300      	movs	r3, #0
 8014c10:	2502      	movs	r5, #2
 8014c12:	2e00      	cmp	r6, #0
 8014c14:	d17a      	bne.n	8014d0c <_dtoa_r+0x4c4>
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d1d3      	bne.n	8014bc2 <_dtoa_r+0x37a>
 8014c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	f000 8082 	beq.w	8014d26 <_dtoa_r+0x4de>
 8014c22:	4b91      	ldr	r3, [pc, #580]	; (8014e68 <_dtoa_r+0x620>)
 8014c24:	2200      	movs	r2, #0
 8014c26:	4650      	mov	r0, sl
 8014c28:	4659      	mov	r1, fp
 8014c2a:	f7eb ff6f 	bl	8000b0c <__aeabi_dcmplt>
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	d079      	beq.n	8014d26 <_dtoa_r+0x4de>
 8014c32:	9b03      	ldr	r3, [sp, #12]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d076      	beq.n	8014d26 <_dtoa_r+0x4de>
 8014c38:	9b02      	ldr	r3, [sp, #8]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	dd36      	ble.n	8014cac <_dtoa_r+0x464>
 8014c3e:	9b00      	ldr	r3, [sp, #0]
 8014c40:	4650      	mov	r0, sl
 8014c42:	4659      	mov	r1, fp
 8014c44:	1e5f      	subs	r7, r3, #1
 8014c46:	2200      	movs	r2, #0
 8014c48:	4b88      	ldr	r3, [pc, #544]	; (8014e6c <_dtoa_r+0x624>)
 8014c4a:	f7eb fced 	bl	8000628 <__aeabi_dmul>
 8014c4e:	9e02      	ldr	r6, [sp, #8]
 8014c50:	4682      	mov	sl, r0
 8014c52:	468b      	mov	fp, r1
 8014c54:	3501      	adds	r5, #1
 8014c56:	4628      	mov	r0, r5
 8014c58:	f7eb fc7c 	bl	8000554 <__aeabi_i2d>
 8014c5c:	4652      	mov	r2, sl
 8014c5e:	465b      	mov	r3, fp
 8014c60:	f7eb fce2 	bl	8000628 <__aeabi_dmul>
 8014c64:	4b82      	ldr	r3, [pc, #520]	; (8014e70 <_dtoa_r+0x628>)
 8014c66:	2200      	movs	r2, #0
 8014c68:	f7eb fb28 	bl	80002bc <__adddf3>
 8014c6c:	46d0      	mov	r8, sl
 8014c6e:	46d9      	mov	r9, fp
 8014c70:	4682      	mov	sl, r0
 8014c72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014c76:	2e00      	cmp	r6, #0
 8014c78:	d158      	bne.n	8014d2c <_dtoa_r+0x4e4>
 8014c7a:	4b7e      	ldr	r3, [pc, #504]	; (8014e74 <_dtoa_r+0x62c>)
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	4640      	mov	r0, r8
 8014c80:	4649      	mov	r1, r9
 8014c82:	f7eb fb19 	bl	80002b8 <__aeabi_dsub>
 8014c86:	4652      	mov	r2, sl
 8014c88:	465b      	mov	r3, fp
 8014c8a:	4680      	mov	r8, r0
 8014c8c:	4689      	mov	r9, r1
 8014c8e:	f7eb ff5b 	bl	8000b48 <__aeabi_dcmpgt>
 8014c92:	2800      	cmp	r0, #0
 8014c94:	f040 8295 	bne.w	80151c2 <_dtoa_r+0x97a>
 8014c98:	4652      	mov	r2, sl
 8014c9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014c9e:	4640      	mov	r0, r8
 8014ca0:	4649      	mov	r1, r9
 8014ca2:	f7eb ff33 	bl	8000b0c <__aeabi_dcmplt>
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	f040 8289 	bne.w	80151be <_dtoa_r+0x976>
 8014cac:	ec5b ab19 	vmov	sl, fp, d9
 8014cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f2c0 8148 	blt.w	8014f48 <_dtoa_r+0x700>
 8014cb8:	9a00      	ldr	r2, [sp, #0]
 8014cba:	2a0e      	cmp	r2, #14
 8014cbc:	f300 8144 	bgt.w	8014f48 <_dtoa_r+0x700>
 8014cc0:	4b67      	ldr	r3, [pc, #412]	; (8014e60 <_dtoa_r+0x618>)
 8014cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	f280 80d5 	bge.w	8014e7c <_dtoa_r+0x634>
 8014cd2:	9b03      	ldr	r3, [sp, #12]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	f300 80d1 	bgt.w	8014e7c <_dtoa_r+0x634>
 8014cda:	f040 826f 	bne.w	80151bc <_dtoa_r+0x974>
 8014cde:	4b65      	ldr	r3, [pc, #404]	; (8014e74 <_dtoa_r+0x62c>)
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	4640      	mov	r0, r8
 8014ce4:	4649      	mov	r1, r9
 8014ce6:	f7eb fc9f 	bl	8000628 <__aeabi_dmul>
 8014cea:	4652      	mov	r2, sl
 8014cec:	465b      	mov	r3, fp
 8014cee:	f7eb ff21 	bl	8000b34 <__aeabi_dcmpge>
 8014cf2:	9e03      	ldr	r6, [sp, #12]
 8014cf4:	4637      	mov	r7, r6
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	f040 8245 	bne.w	8015186 <_dtoa_r+0x93e>
 8014cfc:	9d01      	ldr	r5, [sp, #4]
 8014cfe:	2331      	movs	r3, #49	; 0x31
 8014d00:	f805 3b01 	strb.w	r3, [r5], #1
 8014d04:	9b00      	ldr	r3, [sp, #0]
 8014d06:	3301      	adds	r3, #1
 8014d08:	9300      	str	r3, [sp, #0]
 8014d0a:	e240      	b.n	801518e <_dtoa_r+0x946>
 8014d0c:	07f2      	lsls	r2, r6, #31
 8014d0e:	d505      	bpl.n	8014d1c <_dtoa_r+0x4d4>
 8014d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d14:	f7eb fc88 	bl	8000628 <__aeabi_dmul>
 8014d18:	3501      	adds	r5, #1
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	1076      	asrs	r6, r6, #1
 8014d1e:	3708      	adds	r7, #8
 8014d20:	e777      	b.n	8014c12 <_dtoa_r+0x3ca>
 8014d22:	2502      	movs	r5, #2
 8014d24:	e779      	b.n	8014c1a <_dtoa_r+0x3d2>
 8014d26:	9f00      	ldr	r7, [sp, #0]
 8014d28:	9e03      	ldr	r6, [sp, #12]
 8014d2a:	e794      	b.n	8014c56 <_dtoa_r+0x40e>
 8014d2c:	9901      	ldr	r1, [sp, #4]
 8014d2e:	4b4c      	ldr	r3, [pc, #304]	; (8014e60 <_dtoa_r+0x618>)
 8014d30:	4431      	add	r1, r6
 8014d32:	910d      	str	r1, [sp, #52]	; 0x34
 8014d34:	9908      	ldr	r1, [sp, #32]
 8014d36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014d3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014d3e:	2900      	cmp	r1, #0
 8014d40:	d043      	beq.n	8014dca <_dtoa_r+0x582>
 8014d42:	494d      	ldr	r1, [pc, #308]	; (8014e78 <_dtoa_r+0x630>)
 8014d44:	2000      	movs	r0, #0
 8014d46:	f7eb fd99 	bl	800087c <__aeabi_ddiv>
 8014d4a:	4652      	mov	r2, sl
 8014d4c:	465b      	mov	r3, fp
 8014d4e:	f7eb fab3 	bl	80002b8 <__aeabi_dsub>
 8014d52:	9d01      	ldr	r5, [sp, #4]
 8014d54:	4682      	mov	sl, r0
 8014d56:	468b      	mov	fp, r1
 8014d58:	4649      	mov	r1, r9
 8014d5a:	4640      	mov	r0, r8
 8014d5c:	f7eb ff14 	bl	8000b88 <__aeabi_d2iz>
 8014d60:	4606      	mov	r6, r0
 8014d62:	f7eb fbf7 	bl	8000554 <__aeabi_i2d>
 8014d66:	4602      	mov	r2, r0
 8014d68:	460b      	mov	r3, r1
 8014d6a:	4640      	mov	r0, r8
 8014d6c:	4649      	mov	r1, r9
 8014d6e:	f7eb faa3 	bl	80002b8 <__aeabi_dsub>
 8014d72:	3630      	adds	r6, #48	; 0x30
 8014d74:	f805 6b01 	strb.w	r6, [r5], #1
 8014d78:	4652      	mov	r2, sl
 8014d7a:	465b      	mov	r3, fp
 8014d7c:	4680      	mov	r8, r0
 8014d7e:	4689      	mov	r9, r1
 8014d80:	f7eb fec4 	bl	8000b0c <__aeabi_dcmplt>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	d163      	bne.n	8014e50 <_dtoa_r+0x608>
 8014d88:	4642      	mov	r2, r8
 8014d8a:	464b      	mov	r3, r9
 8014d8c:	4936      	ldr	r1, [pc, #216]	; (8014e68 <_dtoa_r+0x620>)
 8014d8e:	2000      	movs	r0, #0
 8014d90:	f7eb fa92 	bl	80002b8 <__aeabi_dsub>
 8014d94:	4652      	mov	r2, sl
 8014d96:	465b      	mov	r3, fp
 8014d98:	f7eb feb8 	bl	8000b0c <__aeabi_dcmplt>
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	f040 80b5 	bne.w	8014f0c <_dtoa_r+0x6c4>
 8014da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014da4:	429d      	cmp	r5, r3
 8014da6:	d081      	beq.n	8014cac <_dtoa_r+0x464>
 8014da8:	4b30      	ldr	r3, [pc, #192]	; (8014e6c <_dtoa_r+0x624>)
 8014daa:	2200      	movs	r2, #0
 8014dac:	4650      	mov	r0, sl
 8014dae:	4659      	mov	r1, fp
 8014db0:	f7eb fc3a 	bl	8000628 <__aeabi_dmul>
 8014db4:	4b2d      	ldr	r3, [pc, #180]	; (8014e6c <_dtoa_r+0x624>)
 8014db6:	4682      	mov	sl, r0
 8014db8:	468b      	mov	fp, r1
 8014dba:	4640      	mov	r0, r8
 8014dbc:	4649      	mov	r1, r9
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	f7eb fc32 	bl	8000628 <__aeabi_dmul>
 8014dc4:	4680      	mov	r8, r0
 8014dc6:	4689      	mov	r9, r1
 8014dc8:	e7c6      	b.n	8014d58 <_dtoa_r+0x510>
 8014dca:	4650      	mov	r0, sl
 8014dcc:	4659      	mov	r1, fp
 8014dce:	f7eb fc2b 	bl	8000628 <__aeabi_dmul>
 8014dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dd4:	9d01      	ldr	r5, [sp, #4]
 8014dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dd8:	4682      	mov	sl, r0
 8014dda:	468b      	mov	fp, r1
 8014ddc:	4649      	mov	r1, r9
 8014dde:	4640      	mov	r0, r8
 8014de0:	f7eb fed2 	bl	8000b88 <__aeabi_d2iz>
 8014de4:	4606      	mov	r6, r0
 8014de6:	f7eb fbb5 	bl	8000554 <__aeabi_i2d>
 8014dea:	3630      	adds	r6, #48	; 0x30
 8014dec:	4602      	mov	r2, r0
 8014dee:	460b      	mov	r3, r1
 8014df0:	4640      	mov	r0, r8
 8014df2:	4649      	mov	r1, r9
 8014df4:	f7eb fa60 	bl	80002b8 <__aeabi_dsub>
 8014df8:	f805 6b01 	strb.w	r6, [r5], #1
 8014dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dfe:	429d      	cmp	r5, r3
 8014e00:	4680      	mov	r8, r0
 8014e02:	4689      	mov	r9, r1
 8014e04:	f04f 0200 	mov.w	r2, #0
 8014e08:	d124      	bne.n	8014e54 <_dtoa_r+0x60c>
 8014e0a:	4b1b      	ldr	r3, [pc, #108]	; (8014e78 <_dtoa_r+0x630>)
 8014e0c:	4650      	mov	r0, sl
 8014e0e:	4659      	mov	r1, fp
 8014e10:	f7eb fa54 	bl	80002bc <__adddf3>
 8014e14:	4602      	mov	r2, r0
 8014e16:	460b      	mov	r3, r1
 8014e18:	4640      	mov	r0, r8
 8014e1a:	4649      	mov	r1, r9
 8014e1c:	f7eb fe94 	bl	8000b48 <__aeabi_dcmpgt>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	d173      	bne.n	8014f0c <_dtoa_r+0x6c4>
 8014e24:	4652      	mov	r2, sl
 8014e26:	465b      	mov	r3, fp
 8014e28:	4913      	ldr	r1, [pc, #76]	; (8014e78 <_dtoa_r+0x630>)
 8014e2a:	2000      	movs	r0, #0
 8014e2c:	f7eb fa44 	bl	80002b8 <__aeabi_dsub>
 8014e30:	4602      	mov	r2, r0
 8014e32:	460b      	mov	r3, r1
 8014e34:	4640      	mov	r0, r8
 8014e36:	4649      	mov	r1, r9
 8014e38:	f7eb fe68 	bl	8000b0c <__aeabi_dcmplt>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	f43f af35 	beq.w	8014cac <_dtoa_r+0x464>
 8014e42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014e44:	1e6b      	subs	r3, r5, #1
 8014e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e4c:	2b30      	cmp	r3, #48	; 0x30
 8014e4e:	d0f8      	beq.n	8014e42 <_dtoa_r+0x5fa>
 8014e50:	9700      	str	r7, [sp, #0]
 8014e52:	e049      	b.n	8014ee8 <_dtoa_r+0x6a0>
 8014e54:	4b05      	ldr	r3, [pc, #20]	; (8014e6c <_dtoa_r+0x624>)
 8014e56:	f7eb fbe7 	bl	8000628 <__aeabi_dmul>
 8014e5a:	4680      	mov	r8, r0
 8014e5c:	4689      	mov	r9, r1
 8014e5e:	e7bd      	b.n	8014ddc <_dtoa_r+0x594>
 8014e60:	08016f90 	.word	0x08016f90
 8014e64:	08016f68 	.word	0x08016f68
 8014e68:	3ff00000 	.word	0x3ff00000
 8014e6c:	40240000 	.word	0x40240000
 8014e70:	401c0000 	.word	0x401c0000
 8014e74:	40140000 	.word	0x40140000
 8014e78:	3fe00000 	.word	0x3fe00000
 8014e7c:	9d01      	ldr	r5, [sp, #4]
 8014e7e:	4656      	mov	r6, sl
 8014e80:	465f      	mov	r7, fp
 8014e82:	4642      	mov	r2, r8
 8014e84:	464b      	mov	r3, r9
 8014e86:	4630      	mov	r0, r6
 8014e88:	4639      	mov	r1, r7
 8014e8a:	f7eb fcf7 	bl	800087c <__aeabi_ddiv>
 8014e8e:	f7eb fe7b 	bl	8000b88 <__aeabi_d2iz>
 8014e92:	4682      	mov	sl, r0
 8014e94:	f7eb fb5e 	bl	8000554 <__aeabi_i2d>
 8014e98:	4642      	mov	r2, r8
 8014e9a:	464b      	mov	r3, r9
 8014e9c:	f7eb fbc4 	bl	8000628 <__aeabi_dmul>
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	460b      	mov	r3, r1
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	4639      	mov	r1, r7
 8014ea8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014eac:	f7eb fa04 	bl	80002b8 <__aeabi_dsub>
 8014eb0:	f805 6b01 	strb.w	r6, [r5], #1
 8014eb4:	9e01      	ldr	r6, [sp, #4]
 8014eb6:	9f03      	ldr	r7, [sp, #12]
 8014eb8:	1bae      	subs	r6, r5, r6
 8014eba:	42b7      	cmp	r7, r6
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	d135      	bne.n	8014f2e <_dtoa_r+0x6e6>
 8014ec2:	f7eb f9fb 	bl	80002bc <__adddf3>
 8014ec6:	4642      	mov	r2, r8
 8014ec8:	464b      	mov	r3, r9
 8014eca:	4606      	mov	r6, r0
 8014ecc:	460f      	mov	r7, r1
 8014ece:	f7eb fe3b 	bl	8000b48 <__aeabi_dcmpgt>
 8014ed2:	b9d0      	cbnz	r0, 8014f0a <_dtoa_r+0x6c2>
 8014ed4:	4642      	mov	r2, r8
 8014ed6:	464b      	mov	r3, r9
 8014ed8:	4630      	mov	r0, r6
 8014eda:	4639      	mov	r1, r7
 8014edc:	f7eb fe0c 	bl	8000af8 <__aeabi_dcmpeq>
 8014ee0:	b110      	cbz	r0, 8014ee8 <_dtoa_r+0x6a0>
 8014ee2:	f01a 0f01 	tst.w	sl, #1
 8014ee6:	d110      	bne.n	8014f0a <_dtoa_r+0x6c2>
 8014ee8:	4620      	mov	r0, r4
 8014eea:	ee18 1a10 	vmov	r1, s16
 8014eee:	f000 fbc5 	bl	801567c <_Bfree>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	9800      	ldr	r0, [sp, #0]
 8014ef6:	702b      	strb	r3, [r5, #0]
 8014ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014efa:	3001      	adds	r0, #1
 8014efc:	6018      	str	r0, [r3, #0]
 8014efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f43f acf1 	beq.w	80148e8 <_dtoa_r+0xa0>
 8014f06:	601d      	str	r5, [r3, #0]
 8014f08:	e4ee      	b.n	80148e8 <_dtoa_r+0xa0>
 8014f0a:	9f00      	ldr	r7, [sp, #0]
 8014f0c:	462b      	mov	r3, r5
 8014f0e:	461d      	mov	r5, r3
 8014f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f14:	2a39      	cmp	r2, #57	; 0x39
 8014f16:	d106      	bne.n	8014f26 <_dtoa_r+0x6de>
 8014f18:	9a01      	ldr	r2, [sp, #4]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d1f7      	bne.n	8014f0e <_dtoa_r+0x6c6>
 8014f1e:	9901      	ldr	r1, [sp, #4]
 8014f20:	2230      	movs	r2, #48	; 0x30
 8014f22:	3701      	adds	r7, #1
 8014f24:	700a      	strb	r2, [r1, #0]
 8014f26:	781a      	ldrb	r2, [r3, #0]
 8014f28:	3201      	adds	r2, #1
 8014f2a:	701a      	strb	r2, [r3, #0]
 8014f2c:	e790      	b.n	8014e50 <_dtoa_r+0x608>
 8014f2e:	4ba6      	ldr	r3, [pc, #664]	; (80151c8 <_dtoa_r+0x980>)
 8014f30:	2200      	movs	r2, #0
 8014f32:	f7eb fb79 	bl	8000628 <__aeabi_dmul>
 8014f36:	2200      	movs	r2, #0
 8014f38:	2300      	movs	r3, #0
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460f      	mov	r7, r1
 8014f3e:	f7eb fddb 	bl	8000af8 <__aeabi_dcmpeq>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d09d      	beq.n	8014e82 <_dtoa_r+0x63a>
 8014f46:	e7cf      	b.n	8014ee8 <_dtoa_r+0x6a0>
 8014f48:	9a08      	ldr	r2, [sp, #32]
 8014f4a:	2a00      	cmp	r2, #0
 8014f4c:	f000 80d7 	beq.w	80150fe <_dtoa_r+0x8b6>
 8014f50:	9a06      	ldr	r2, [sp, #24]
 8014f52:	2a01      	cmp	r2, #1
 8014f54:	f300 80ba 	bgt.w	80150cc <_dtoa_r+0x884>
 8014f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f5a:	2a00      	cmp	r2, #0
 8014f5c:	f000 80b2 	beq.w	80150c4 <_dtoa_r+0x87c>
 8014f60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014f64:	9e07      	ldr	r6, [sp, #28]
 8014f66:	9d04      	ldr	r5, [sp, #16]
 8014f68:	9a04      	ldr	r2, [sp, #16]
 8014f6a:	441a      	add	r2, r3
 8014f6c:	9204      	str	r2, [sp, #16]
 8014f6e:	9a05      	ldr	r2, [sp, #20]
 8014f70:	2101      	movs	r1, #1
 8014f72:	441a      	add	r2, r3
 8014f74:	4620      	mov	r0, r4
 8014f76:	9205      	str	r2, [sp, #20]
 8014f78:	f000 fc38 	bl	80157ec <__i2b>
 8014f7c:	4607      	mov	r7, r0
 8014f7e:	2d00      	cmp	r5, #0
 8014f80:	dd0c      	ble.n	8014f9c <_dtoa_r+0x754>
 8014f82:	9b05      	ldr	r3, [sp, #20]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	dd09      	ble.n	8014f9c <_dtoa_r+0x754>
 8014f88:	42ab      	cmp	r3, r5
 8014f8a:	9a04      	ldr	r2, [sp, #16]
 8014f8c:	bfa8      	it	ge
 8014f8e:	462b      	movge	r3, r5
 8014f90:	1ad2      	subs	r2, r2, r3
 8014f92:	9204      	str	r2, [sp, #16]
 8014f94:	9a05      	ldr	r2, [sp, #20]
 8014f96:	1aed      	subs	r5, r5, r3
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	9305      	str	r3, [sp, #20]
 8014f9c:	9b07      	ldr	r3, [sp, #28]
 8014f9e:	b31b      	cbz	r3, 8014fe8 <_dtoa_r+0x7a0>
 8014fa0:	9b08      	ldr	r3, [sp, #32]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	f000 80af 	beq.w	8015106 <_dtoa_r+0x8be>
 8014fa8:	2e00      	cmp	r6, #0
 8014faa:	dd13      	ble.n	8014fd4 <_dtoa_r+0x78c>
 8014fac:	4639      	mov	r1, r7
 8014fae:	4632      	mov	r2, r6
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f000 fcdb 	bl	801596c <__pow5mult>
 8014fb6:	ee18 2a10 	vmov	r2, s16
 8014fba:	4601      	mov	r1, r0
 8014fbc:	4607      	mov	r7, r0
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	f000 fc2a 	bl	8015818 <__multiply>
 8014fc4:	ee18 1a10 	vmov	r1, s16
 8014fc8:	4680      	mov	r8, r0
 8014fca:	4620      	mov	r0, r4
 8014fcc:	f000 fb56 	bl	801567c <_Bfree>
 8014fd0:	ee08 8a10 	vmov	s16, r8
 8014fd4:	9b07      	ldr	r3, [sp, #28]
 8014fd6:	1b9a      	subs	r2, r3, r6
 8014fd8:	d006      	beq.n	8014fe8 <_dtoa_r+0x7a0>
 8014fda:	ee18 1a10 	vmov	r1, s16
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f000 fcc4 	bl	801596c <__pow5mult>
 8014fe4:	ee08 0a10 	vmov	s16, r0
 8014fe8:	2101      	movs	r1, #1
 8014fea:	4620      	mov	r0, r4
 8014fec:	f000 fbfe 	bl	80157ec <__i2b>
 8014ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	4606      	mov	r6, r0
 8014ff6:	f340 8088 	ble.w	801510a <_dtoa_r+0x8c2>
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	4601      	mov	r1, r0
 8014ffe:	4620      	mov	r0, r4
 8015000:	f000 fcb4 	bl	801596c <__pow5mult>
 8015004:	9b06      	ldr	r3, [sp, #24]
 8015006:	2b01      	cmp	r3, #1
 8015008:	4606      	mov	r6, r0
 801500a:	f340 8081 	ble.w	8015110 <_dtoa_r+0x8c8>
 801500e:	f04f 0800 	mov.w	r8, #0
 8015012:	6933      	ldr	r3, [r6, #16]
 8015014:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015018:	6918      	ldr	r0, [r3, #16]
 801501a:	f000 fb97 	bl	801574c <__hi0bits>
 801501e:	f1c0 0020 	rsb	r0, r0, #32
 8015022:	9b05      	ldr	r3, [sp, #20]
 8015024:	4418      	add	r0, r3
 8015026:	f010 001f 	ands.w	r0, r0, #31
 801502a:	f000 8092 	beq.w	8015152 <_dtoa_r+0x90a>
 801502e:	f1c0 0320 	rsb	r3, r0, #32
 8015032:	2b04      	cmp	r3, #4
 8015034:	f340 808a 	ble.w	801514c <_dtoa_r+0x904>
 8015038:	f1c0 001c 	rsb	r0, r0, #28
 801503c:	9b04      	ldr	r3, [sp, #16]
 801503e:	4403      	add	r3, r0
 8015040:	9304      	str	r3, [sp, #16]
 8015042:	9b05      	ldr	r3, [sp, #20]
 8015044:	4403      	add	r3, r0
 8015046:	4405      	add	r5, r0
 8015048:	9305      	str	r3, [sp, #20]
 801504a:	9b04      	ldr	r3, [sp, #16]
 801504c:	2b00      	cmp	r3, #0
 801504e:	dd07      	ble.n	8015060 <_dtoa_r+0x818>
 8015050:	ee18 1a10 	vmov	r1, s16
 8015054:	461a      	mov	r2, r3
 8015056:	4620      	mov	r0, r4
 8015058:	f000 fce2 	bl	8015a20 <__lshift>
 801505c:	ee08 0a10 	vmov	s16, r0
 8015060:	9b05      	ldr	r3, [sp, #20]
 8015062:	2b00      	cmp	r3, #0
 8015064:	dd05      	ble.n	8015072 <_dtoa_r+0x82a>
 8015066:	4631      	mov	r1, r6
 8015068:	461a      	mov	r2, r3
 801506a:	4620      	mov	r0, r4
 801506c:	f000 fcd8 	bl	8015a20 <__lshift>
 8015070:	4606      	mov	r6, r0
 8015072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015074:	2b00      	cmp	r3, #0
 8015076:	d06e      	beq.n	8015156 <_dtoa_r+0x90e>
 8015078:	ee18 0a10 	vmov	r0, s16
 801507c:	4631      	mov	r1, r6
 801507e:	f000 fd3f 	bl	8015b00 <__mcmp>
 8015082:	2800      	cmp	r0, #0
 8015084:	da67      	bge.n	8015156 <_dtoa_r+0x90e>
 8015086:	9b00      	ldr	r3, [sp, #0]
 8015088:	3b01      	subs	r3, #1
 801508a:	ee18 1a10 	vmov	r1, s16
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	220a      	movs	r2, #10
 8015092:	2300      	movs	r3, #0
 8015094:	4620      	mov	r0, r4
 8015096:	f000 fb13 	bl	80156c0 <__multadd>
 801509a:	9b08      	ldr	r3, [sp, #32]
 801509c:	ee08 0a10 	vmov	s16, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	f000 81b1 	beq.w	8015408 <_dtoa_r+0xbc0>
 80150a6:	2300      	movs	r3, #0
 80150a8:	4639      	mov	r1, r7
 80150aa:	220a      	movs	r2, #10
 80150ac:	4620      	mov	r0, r4
 80150ae:	f000 fb07 	bl	80156c0 <__multadd>
 80150b2:	9b02      	ldr	r3, [sp, #8]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	4607      	mov	r7, r0
 80150b8:	f300 808e 	bgt.w	80151d8 <_dtoa_r+0x990>
 80150bc:	9b06      	ldr	r3, [sp, #24]
 80150be:	2b02      	cmp	r3, #2
 80150c0:	dc51      	bgt.n	8015166 <_dtoa_r+0x91e>
 80150c2:	e089      	b.n	80151d8 <_dtoa_r+0x990>
 80150c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80150ca:	e74b      	b.n	8014f64 <_dtoa_r+0x71c>
 80150cc:	9b03      	ldr	r3, [sp, #12]
 80150ce:	1e5e      	subs	r6, r3, #1
 80150d0:	9b07      	ldr	r3, [sp, #28]
 80150d2:	42b3      	cmp	r3, r6
 80150d4:	bfbf      	itttt	lt
 80150d6:	9b07      	ldrlt	r3, [sp, #28]
 80150d8:	9607      	strlt	r6, [sp, #28]
 80150da:	1af2      	sublt	r2, r6, r3
 80150dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80150de:	bfb6      	itet	lt
 80150e0:	189b      	addlt	r3, r3, r2
 80150e2:	1b9e      	subge	r6, r3, r6
 80150e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80150e6:	9b03      	ldr	r3, [sp, #12]
 80150e8:	bfb8      	it	lt
 80150ea:	2600      	movlt	r6, #0
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	bfb7      	itett	lt
 80150f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80150f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80150f8:	1a9d      	sublt	r5, r3, r2
 80150fa:	2300      	movlt	r3, #0
 80150fc:	e734      	b.n	8014f68 <_dtoa_r+0x720>
 80150fe:	9e07      	ldr	r6, [sp, #28]
 8015100:	9d04      	ldr	r5, [sp, #16]
 8015102:	9f08      	ldr	r7, [sp, #32]
 8015104:	e73b      	b.n	8014f7e <_dtoa_r+0x736>
 8015106:	9a07      	ldr	r2, [sp, #28]
 8015108:	e767      	b.n	8014fda <_dtoa_r+0x792>
 801510a:	9b06      	ldr	r3, [sp, #24]
 801510c:	2b01      	cmp	r3, #1
 801510e:	dc18      	bgt.n	8015142 <_dtoa_r+0x8fa>
 8015110:	f1ba 0f00 	cmp.w	sl, #0
 8015114:	d115      	bne.n	8015142 <_dtoa_r+0x8fa>
 8015116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801511a:	b993      	cbnz	r3, 8015142 <_dtoa_r+0x8fa>
 801511c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015120:	0d1b      	lsrs	r3, r3, #20
 8015122:	051b      	lsls	r3, r3, #20
 8015124:	b183      	cbz	r3, 8015148 <_dtoa_r+0x900>
 8015126:	9b04      	ldr	r3, [sp, #16]
 8015128:	3301      	adds	r3, #1
 801512a:	9304      	str	r3, [sp, #16]
 801512c:	9b05      	ldr	r3, [sp, #20]
 801512e:	3301      	adds	r3, #1
 8015130:	9305      	str	r3, [sp, #20]
 8015132:	f04f 0801 	mov.w	r8, #1
 8015136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015138:	2b00      	cmp	r3, #0
 801513a:	f47f af6a 	bne.w	8015012 <_dtoa_r+0x7ca>
 801513e:	2001      	movs	r0, #1
 8015140:	e76f      	b.n	8015022 <_dtoa_r+0x7da>
 8015142:	f04f 0800 	mov.w	r8, #0
 8015146:	e7f6      	b.n	8015136 <_dtoa_r+0x8ee>
 8015148:	4698      	mov	r8, r3
 801514a:	e7f4      	b.n	8015136 <_dtoa_r+0x8ee>
 801514c:	f43f af7d 	beq.w	801504a <_dtoa_r+0x802>
 8015150:	4618      	mov	r0, r3
 8015152:	301c      	adds	r0, #28
 8015154:	e772      	b.n	801503c <_dtoa_r+0x7f4>
 8015156:	9b03      	ldr	r3, [sp, #12]
 8015158:	2b00      	cmp	r3, #0
 801515a:	dc37      	bgt.n	80151cc <_dtoa_r+0x984>
 801515c:	9b06      	ldr	r3, [sp, #24]
 801515e:	2b02      	cmp	r3, #2
 8015160:	dd34      	ble.n	80151cc <_dtoa_r+0x984>
 8015162:	9b03      	ldr	r3, [sp, #12]
 8015164:	9302      	str	r3, [sp, #8]
 8015166:	9b02      	ldr	r3, [sp, #8]
 8015168:	b96b      	cbnz	r3, 8015186 <_dtoa_r+0x93e>
 801516a:	4631      	mov	r1, r6
 801516c:	2205      	movs	r2, #5
 801516e:	4620      	mov	r0, r4
 8015170:	f000 faa6 	bl	80156c0 <__multadd>
 8015174:	4601      	mov	r1, r0
 8015176:	4606      	mov	r6, r0
 8015178:	ee18 0a10 	vmov	r0, s16
 801517c:	f000 fcc0 	bl	8015b00 <__mcmp>
 8015180:	2800      	cmp	r0, #0
 8015182:	f73f adbb 	bgt.w	8014cfc <_dtoa_r+0x4b4>
 8015186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015188:	9d01      	ldr	r5, [sp, #4]
 801518a:	43db      	mvns	r3, r3
 801518c:	9300      	str	r3, [sp, #0]
 801518e:	f04f 0800 	mov.w	r8, #0
 8015192:	4631      	mov	r1, r6
 8015194:	4620      	mov	r0, r4
 8015196:	f000 fa71 	bl	801567c <_Bfree>
 801519a:	2f00      	cmp	r7, #0
 801519c:	f43f aea4 	beq.w	8014ee8 <_dtoa_r+0x6a0>
 80151a0:	f1b8 0f00 	cmp.w	r8, #0
 80151a4:	d005      	beq.n	80151b2 <_dtoa_r+0x96a>
 80151a6:	45b8      	cmp	r8, r7
 80151a8:	d003      	beq.n	80151b2 <_dtoa_r+0x96a>
 80151aa:	4641      	mov	r1, r8
 80151ac:	4620      	mov	r0, r4
 80151ae:	f000 fa65 	bl	801567c <_Bfree>
 80151b2:	4639      	mov	r1, r7
 80151b4:	4620      	mov	r0, r4
 80151b6:	f000 fa61 	bl	801567c <_Bfree>
 80151ba:	e695      	b.n	8014ee8 <_dtoa_r+0x6a0>
 80151bc:	2600      	movs	r6, #0
 80151be:	4637      	mov	r7, r6
 80151c0:	e7e1      	b.n	8015186 <_dtoa_r+0x93e>
 80151c2:	9700      	str	r7, [sp, #0]
 80151c4:	4637      	mov	r7, r6
 80151c6:	e599      	b.n	8014cfc <_dtoa_r+0x4b4>
 80151c8:	40240000 	.word	0x40240000
 80151cc:	9b08      	ldr	r3, [sp, #32]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f000 80ca 	beq.w	8015368 <_dtoa_r+0xb20>
 80151d4:	9b03      	ldr	r3, [sp, #12]
 80151d6:	9302      	str	r3, [sp, #8]
 80151d8:	2d00      	cmp	r5, #0
 80151da:	dd05      	ble.n	80151e8 <_dtoa_r+0x9a0>
 80151dc:	4639      	mov	r1, r7
 80151de:	462a      	mov	r2, r5
 80151e0:	4620      	mov	r0, r4
 80151e2:	f000 fc1d 	bl	8015a20 <__lshift>
 80151e6:	4607      	mov	r7, r0
 80151e8:	f1b8 0f00 	cmp.w	r8, #0
 80151ec:	d05b      	beq.n	80152a6 <_dtoa_r+0xa5e>
 80151ee:	6879      	ldr	r1, [r7, #4]
 80151f0:	4620      	mov	r0, r4
 80151f2:	f000 fa03 	bl	80155fc <_Balloc>
 80151f6:	4605      	mov	r5, r0
 80151f8:	b928      	cbnz	r0, 8015206 <_dtoa_r+0x9be>
 80151fa:	4b87      	ldr	r3, [pc, #540]	; (8015418 <_dtoa_r+0xbd0>)
 80151fc:	4602      	mov	r2, r0
 80151fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015202:	f7ff bb3b 	b.w	801487c <_dtoa_r+0x34>
 8015206:	693a      	ldr	r2, [r7, #16]
 8015208:	3202      	adds	r2, #2
 801520a:	0092      	lsls	r2, r2, #2
 801520c:	f107 010c 	add.w	r1, r7, #12
 8015210:	300c      	adds	r0, #12
 8015212:	f7fe fc5c 	bl	8013ace <memcpy>
 8015216:	2201      	movs	r2, #1
 8015218:	4629      	mov	r1, r5
 801521a:	4620      	mov	r0, r4
 801521c:	f000 fc00 	bl	8015a20 <__lshift>
 8015220:	9b01      	ldr	r3, [sp, #4]
 8015222:	f103 0901 	add.w	r9, r3, #1
 8015226:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801522a:	4413      	add	r3, r2
 801522c:	9305      	str	r3, [sp, #20]
 801522e:	f00a 0301 	and.w	r3, sl, #1
 8015232:	46b8      	mov	r8, r7
 8015234:	9304      	str	r3, [sp, #16]
 8015236:	4607      	mov	r7, r0
 8015238:	4631      	mov	r1, r6
 801523a:	ee18 0a10 	vmov	r0, s16
 801523e:	f7ff fa75 	bl	801472c <quorem>
 8015242:	4641      	mov	r1, r8
 8015244:	9002      	str	r0, [sp, #8]
 8015246:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801524a:	ee18 0a10 	vmov	r0, s16
 801524e:	f000 fc57 	bl	8015b00 <__mcmp>
 8015252:	463a      	mov	r2, r7
 8015254:	9003      	str	r0, [sp, #12]
 8015256:	4631      	mov	r1, r6
 8015258:	4620      	mov	r0, r4
 801525a:	f000 fc6d 	bl	8015b38 <__mdiff>
 801525e:	68c2      	ldr	r2, [r0, #12]
 8015260:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8015264:	4605      	mov	r5, r0
 8015266:	bb02      	cbnz	r2, 80152aa <_dtoa_r+0xa62>
 8015268:	4601      	mov	r1, r0
 801526a:	ee18 0a10 	vmov	r0, s16
 801526e:	f000 fc47 	bl	8015b00 <__mcmp>
 8015272:	4602      	mov	r2, r0
 8015274:	4629      	mov	r1, r5
 8015276:	4620      	mov	r0, r4
 8015278:	9207      	str	r2, [sp, #28]
 801527a:	f000 f9ff 	bl	801567c <_Bfree>
 801527e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015282:	ea43 0102 	orr.w	r1, r3, r2
 8015286:	9b04      	ldr	r3, [sp, #16]
 8015288:	430b      	orrs	r3, r1
 801528a:	464d      	mov	r5, r9
 801528c:	d10f      	bne.n	80152ae <_dtoa_r+0xa66>
 801528e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015292:	d02a      	beq.n	80152ea <_dtoa_r+0xaa2>
 8015294:	9b03      	ldr	r3, [sp, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	dd02      	ble.n	80152a0 <_dtoa_r+0xa58>
 801529a:	9b02      	ldr	r3, [sp, #8]
 801529c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80152a0:	f88b a000 	strb.w	sl, [fp]
 80152a4:	e775      	b.n	8015192 <_dtoa_r+0x94a>
 80152a6:	4638      	mov	r0, r7
 80152a8:	e7ba      	b.n	8015220 <_dtoa_r+0x9d8>
 80152aa:	2201      	movs	r2, #1
 80152ac:	e7e2      	b.n	8015274 <_dtoa_r+0xa2c>
 80152ae:	9b03      	ldr	r3, [sp, #12]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	db04      	blt.n	80152be <_dtoa_r+0xa76>
 80152b4:	9906      	ldr	r1, [sp, #24]
 80152b6:	430b      	orrs	r3, r1
 80152b8:	9904      	ldr	r1, [sp, #16]
 80152ba:	430b      	orrs	r3, r1
 80152bc:	d122      	bne.n	8015304 <_dtoa_r+0xabc>
 80152be:	2a00      	cmp	r2, #0
 80152c0:	ddee      	ble.n	80152a0 <_dtoa_r+0xa58>
 80152c2:	ee18 1a10 	vmov	r1, s16
 80152c6:	2201      	movs	r2, #1
 80152c8:	4620      	mov	r0, r4
 80152ca:	f000 fba9 	bl	8015a20 <__lshift>
 80152ce:	4631      	mov	r1, r6
 80152d0:	ee08 0a10 	vmov	s16, r0
 80152d4:	f000 fc14 	bl	8015b00 <__mcmp>
 80152d8:	2800      	cmp	r0, #0
 80152da:	dc03      	bgt.n	80152e4 <_dtoa_r+0xa9c>
 80152dc:	d1e0      	bne.n	80152a0 <_dtoa_r+0xa58>
 80152de:	f01a 0f01 	tst.w	sl, #1
 80152e2:	d0dd      	beq.n	80152a0 <_dtoa_r+0xa58>
 80152e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80152e8:	d1d7      	bne.n	801529a <_dtoa_r+0xa52>
 80152ea:	2339      	movs	r3, #57	; 0x39
 80152ec:	f88b 3000 	strb.w	r3, [fp]
 80152f0:	462b      	mov	r3, r5
 80152f2:	461d      	mov	r5, r3
 80152f4:	3b01      	subs	r3, #1
 80152f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80152fa:	2a39      	cmp	r2, #57	; 0x39
 80152fc:	d071      	beq.n	80153e2 <_dtoa_r+0xb9a>
 80152fe:	3201      	adds	r2, #1
 8015300:	701a      	strb	r2, [r3, #0]
 8015302:	e746      	b.n	8015192 <_dtoa_r+0x94a>
 8015304:	2a00      	cmp	r2, #0
 8015306:	dd07      	ble.n	8015318 <_dtoa_r+0xad0>
 8015308:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801530c:	d0ed      	beq.n	80152ea <_dtoa_r+0xaa2>
 801530e:	f10a 0301 	add.w	r3, sl, #1
 8015312:	f88b 3000 	strb.w	r3, [fp]
 8015316:	e73c      	b.n	8015192 <_dtoa_r+0x94a>
 8015318:	9b05      	ldr	r3, [sp, #20]
 801531a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801531e:	4599      	cmp	r9, r3
 8015320:	d047      	beq.n	80153b2 <_dtoa_r+0xb6a>
 8015322:	ee18 1a10 	vmov	r1, s16
 8015326:	2300      	movs	r3, #0
 8015328:	220a      	movs	r2, #10
 801532a:	4620      	mov	r0, r4
 801532c:	f000 f9c8 	bl	80156c0 <__multadd>
 8015330:	45b8      	cmp	r8, r7
 8015332:	ee08 0a10 	vmov	s16, r0
 8015336:	f04f 0300 	mov.w	r3, #0
 801533a:	f04f 020a 	mov.w	r2, #10
 801533e:	4641      	mov	r1, r8
 8015340:	4620      	mov	r0, r4
 8015342:	d106      	bne.n	8015352 <_dtoa_r+0xb0a>
 8015344:	f000 f9bc 	bl	80156c0 <__multadd>
 8015348:	4680      	mov	r8, r0
 801534a:	4607      	mov	r7, r0
 801534c:	f109 0901 	add.w	r9, r9, #1
 8015350:	e772      	b.n	8015238 <_dtoa_r+0x9f0>
 8015352:	f000 f9b5 	bl	80156c0 <__multadd>
 8015356:	4639      	mov	r1, r7
 8015358:	4680      	mov	r8, r0
 801535a:	2300      	movs	r3, #0
 801535c:	220a      	movs	r2, #10
 801535e:	4620      	mov	r0, r4
 8015360:	f000 f9ae 	bl	80156c0 <__multadd>
 8015364:	4607      	mov	r7, r0
 8015366:	e7f1      	b.n	801534c <_dtoa_r+0xb04>
 8015368:	9b03      	ldr	r3, [sp, #12]
 801536a:	9302      	str	r3, [sp, #8]
 801536c:	9d01      	ldr	r5, [sp, #4]
 801536e:	ee18 0a10 	vmov	r0, s16
 8015372:	4631      	mov	r1, r6
 8015374:	f7ff f9da 	bl	801472c <quorem>
 8015378:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801537c:	9b01      	ldr	r3, [sp, #4]
 801537e:	f805 ab01 	strb.w	sl, [r5], #1
 8015382:	1aea      	subs	r2, r5, r3
 8015384:	9b02      	ldr	r3, [sp, #8]
 8015386:	4293      	cmp	r3, r2
 8015388:	dd09      	ble.n	801539e <_dtoa_r+0xb56>
 801538a:	ee18 1a10 	vmov	r1, s16
 801538e:	2300      	movs	r3, #0
 8015390:	220a      	movs	r2, #10
 8015392:	4620      	mov	r0, r4
 8015394:	f000 f994 	bl	80156c0 <__multadd>
 8015398:	ee08 0a10 	vmov	s16, r0
 801539c:	e7e7      	b.n	801536e <_dtoa_r+0xb26>
 801539e:	9b02      	ldr	r3, [sp, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	bfc8      	it	gt
 80153a4:	461d      	movgt	r5, r3
 80153a6:	9b01      	ldr	r3, [sp, #4]
 80153a8:	bfd8      	it	le
 80153aa:	2501      	movle	r5, #1
 80153ac:	441d      	add	r5, r3
 80153ae:	f04f 0800 	mov.w	r8, #0
 80153b2:	ee18 1a10 	vmov	r1, s16
 80153b6:	2201      	movs	r2, #1
 80153b8:	4620      	mov	r0, r4
 80153ba:	f000 fb31 	bl	8015a20 <__lshift>
 80153be:	4631      	mov	r1, r6
 80153c0:	ee08 0a10 	vmov	s16, r0
 80153c4:	f000 fb9c 	bl	8015b00 <__mcmp>
 80153c8:	2800      	cmp	r0, #0
 80153ca:	dc91      	bgt.n	80152f0 <_dtoa_r+0xaa8>
 80153cc:	d102      	bne.n	80153d4 <_dtoa_r+0xb8c>
 80153ce:	f01a 0f01 	tst.w	sl, #1
 80153d2:	d18d      	bne.n	80152f0 <_dtoa_r+0xaa8>
 80153d4:	462b      	mov	r3, r5
 80153d6:	461d      	mov	r5, r3
 80153d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153dc:	2a30      	cmp	r2, #48	; 0x30
 80153de:	d0fa      	beq.n	80153d6 <_dtoa_r+0xb8e>
 80153e0:	e6d7      	b.n	8015192 <_dtoa_r+0x94a>
 80153e2:	9a01      	ldr	r2, [sp, #4]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d184      	bne.n	80152f2 <_dtoa_r+0xaaa>
 80153e8:	9b00      	ldr	r3, [sp, #0]
 80153ea:	3301      	adds	r3, #1
 80153ec:	9300      	str	r3, [sp, #0]
 80153ee:	2331      	movs	r3, #49	; 0x31
 80153f0:	7013      	strb	r3, [r2, #0]
 80153f2:	e6ce      	b.n	8015192 <_dtoa_r+0x94a>
 80153f4:	4b09      	ldr	r3, [pc, #36]	; (801541c <_dtoa_r+0xbd4>)
 80153f6:	f7ff ba95 	b.w	8014924 <_dtoa_r+0xdc>
 80153fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	f47f aa6e 	bne.w	80148de <_dtoa_r+0x96>
 8015402:	4b07      	ldr	r3, [pc, #28]	; (8015420 <_dtoa_r+0xbd8>)
 8015404:	f7ff ba8e 	b.w	8014924 <_dtoa_r+0xdc>
 8015408:	9b02      	ldr	r3, [sp, #8]
 801540a:	2b00      	cmp	r3, #0
 801540c:	dcae      	bgt.n	801536c <_dtoa_r+0xb24>
 801540e:	9b06      	ldr	r3, [sp, #24]
 8015410:	2b02      	cmp	r3, #2
 8015412:	f73f aea8 	bgt.w	8015166 <_dtoa_r+0x91e>
 8015416:	e7a9      	b.n	801536c <_dtoa_r+0xb24>
 8015418:	08016ef7 	.word	0x08016ef7
 801541c:	08016e54 	.word	0x08016e54
 8015420:	08016e78 	.word	0x08016e78

08015424 <__sflush_r>:
 8015424:	898a      	ldrh	r2, [r1, #12]
 8015426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801542a:	4605      	mov	r5, r0
 801542c:	0710      	lsls	r0, r2, #28
 801542e:	460c      	mov	r4, r1
 8015430:	d458      	bmi.n	80154e4 <__sflush_r+0xc0>
 8015432:	684b      	ldr	r3, [r1, #4]
 8015434:	2b00      	cmp	r3, #0
 8015436:	dc05      	bgt.n	8015444 <__sflush_r+0x20>
 8015438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801543a:	2b00      	cmp	r3, #0
 801543c:	dc02      	bgt.n	8015444 <__sflush_r+0x20>
 801543e:	2000      	movs	r0, #0
 8015440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015446:	2e00      	cmp	r6, #0
 8015448:	d0f9      	beq.n	801543e <__sflush_r+0x1a>
 801544a:	2300      	movs	r3, #0
 801544c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015450:	682f      	ldr	r7, [r5, #0]
 8015452:	602b      	str	r3, [r5, #0]
 8015454:	d032      	beq.n	80154bc <__sflush_r+0x98>
 8015456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015458:	89a3      	ldrh	r3, [r4, #12]
 801545a:	075a      	lsls	r2, r3, #29
 801545c:	d505      	bpl.n	801546a <__sflush_r+0x46>
 801545e:	6863      	ldr	r3, [r4, #4]
 8015460:	1ac0      	subs	r0, r0, r3
 8015462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015464:	b10b      	cbz	r3, 801546a <__sflush_r+0x46>
 8015466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015468:	1ac0      	subs	r0, r0, r3
 801546a:	2300      	movs	r3, #0
 801546c:	4602      	mov	r2, r0
 801546e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015470:	6a21      	ldr	r1, [r4, #32]
 8015472:	4628      	mov	r0, r5
 8015474:	47b0      	blx	r6
 8015476:	1c43      	adds	r3, r0, #1
 8015478:	89a3      	ldrh	r3, [r4, #12]
 801547a:	d106      	bne.n	801548a <__sflush_r+0x66>
 801547c:	6829      	ldr	r1, [r5, #0]
 801547e:	291d      	cmp	r1, #29
 8015480:	d82c      	bhi.n	80154dc <__sflush_r+0xb8>
 8015482:	4a2a      	ldr	r2, [pc, #168]	; (801552c <__sflush_r+0x108>)
 8015484:	40ca      	lsrs	r2, r1
 8015486:	07d6      	lsls	r6, r2, #31
 8015488:	d528      	bpl.n	80154dc <__sflush_r+0xb8>
 801548a:	2200      	movs	r2, #0
 801548c:	6062      	str	r2, [r4, #4]
 801548e:	04d9      	lsls	r1, r3, #19
 8015490:	6922      	ldr	r2, [r4, #16]
 8015492:	6022      	str	r2, [r4, #0]
 8015494:	d504      	bpl.n	80154a0 <__sflush_r+0x7c>
 8015496:	1c42      	adds	r2, r0, #1
 8015498:	d101      	bne.n	801549e <__sflush_r+0x7a>
 801549a:	682b      	ldr	r3, [r5, #0]
 801549c:	b903      	cbnz	r3, 80154a0 <__sflush_r+0x7c>
 801549e:	6560      	str	r0, [r4, #84]	; 0x54
 80154a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154a2:	602f      	str	r7, [r5, #0]
 80154a4:	2900      	cmp	r1, #0
 80154a6:	d0ca      	beq.n	801543e <__sflush_r+0x1a>
 80154a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154ac:	4299      	cmp	r1, r3
 80154ae:	d002      	beq.n	80154b6 <__sflush_r+0x92>
 80154b0:	4628      	mov	r0, r5
 80154b2:	f000 fc3d 	bl	8015d30 <_free_r>
 80154b6:	2000      	movs	r0, #0
 80154b8:	6360      	str	r0, [r4, #52]	; 0x34
 80154ba:	e7c1      	b.n	8015440 <__sflush_r+0x1c>
 80154bc:	6a21      	ldr	r1, [r4, #32]
 80154be:	2301      	movs	r3, #1
 80154c0:	4628      	mov	r0, r5
 80154c2:	47b0      	blx	r6
 80154c4:	1c41      	adds	r1, r0, #1
 80154c6:	d1c7      	bne.n	8015458 <__sflush_r+0x34>
 80154c8:	682b      	ldr	r3, [r5, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d0c4      	beq.n	8015458 <__sflush_r+0x34>
 80154ce:	2b1d      	cmp	r3, #29
 80154d0:	d001      	beq.n	80154d6 <__sflush_r+0xb2>
 80154d2:	2b16      	cmp	r3, #22
 80154d4:	d101      	bne.n	80154da <__sflush_r+0xb6>
 80154d6:	602f      	str	r7, [r5, #0]
 80154d8:	e7b1      	b.n	801543e <__sflush_r+0x1a>
 80154da:	89a3      	ldrh	r3, [r4, #12]
 80154dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154e0:	81a3      	strh	r3, [r4, #12]
 80154e2:	e7ad      	b.n	8015440 <__sflush_r+0x1c>
 80154e4:	690f      	ldr	r7, [r1, #16]
 80154e6:	2f00      	cmp	r7, #0
 80154e8:	d0a9      	beq.n	801543e <__sflush_r+0x1a>
 80154ea:	0793      	lsls	r3, r2, #30
 80154ec:	680e      	ldr	r6, [r1, #0]
 80154ee:	bf08      	it	eq
 80154f0:	694b      	ldreq	r3, [r1, #20]
 80154f2:	600f      	str	r7, [r1, #0]
 80154f4:	bf18      	it	ne
 80154f6:	2300      	movne	r3, #0
 80154f8:	eba6 0807 	sub.w	r8, r6, r7
 80154fc:	608b      	str	r3, [r1, #8]
 80154fe:	f1b8 0f00 	cmp.w	r8, #0
 8015502:	dd9c      	ble.n	801543e <__sflush_r+0x1a>
 8015504:	6a21      	ldr	r1, [r4, #32]
 8015506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015508:	4643      	mov	r3, r8
 801550a:	463a      	mov	r2, r7
 801550c:	4628      	mov	r0, r5
 801550e:	47b0      	blx	r6
 8015510:	2800      	cmp	r0, #0
 8015512:	dc06      	bgt.n	8015522 <__sflush_r+0xfe>
 8015514:	89a3      	ldrh	r3, [r4, #12]
 8015516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801551a:	81a3      	strh	r3, [r4, #12]
 801551c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015520:	e78e      	b.n	8015440 <__sflush_r+0x1c>
 8015522:	4407      	add	r7, r0
 8015524:	eba8 0800 	sub.w	r8, r8, r0
 8015528:	e7e9      	b.n	80154fe <__sflush_r+0xda>
 801552a:	bf00      	nop
 801552c:	20400001 	.word	0x20400001

08015530 <_fflush_r>:
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	690b      	ldr	r3, [r1, #16]
 8015534:	4605      	mov	r5, r0
 8015536:	460c      	mov	r4, r1
 8015538:	b913      	cbnz	r3, 8015540 <_fflush_r+0x10>
 801553a:	2500      	movs	r5, #0
 801553c:	4628      	mov	r0, r5
 801553e:	bd38      	pop	{r3, r4, r5, pc}
 8015540:	b118      	cbz	r0, 801554a <_fflush_r+0x1a>
 8015542:	6983      	ldr	r3, [r0, #24]
 8015544:	b90b      	cbnz	r3, 801554a <_fflush_r+0x1a>
 8015546:	f7fe f9fd 	bl	8013944 <__sinit>
 801554a:	4b14      	ldr	r3, [pc, #80]	; (801559c <_fflush_r+0x6c>)
 801554c:	429c      	cmp	r4, r3
 801554e:	d11b      	bne.n	8015588 <_fflush_r+0x58>
 8015550:	686c      	ldr	r4, [r5, #4]
 8015552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d0ef      	beq.n	801553a <_fflush_r+0xa>
 801555a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801555c:	07d0      	lsls	r0, r2, #31
 801555e:	d404      	bmi.n	801556a <_fflush_r+0x3a>
 8015560:	0599      	lsls	r1, r3, #22
 8015562:	d402      	bmi.n	801556a <_fflush_r+0x3a>
 8015564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015566:	f7fe fab0 	bl	8013aca <__retarget_lock_acquire_recursive>
 801556a:	4628      	mov	r0, r5
 801556c:	4621      	mov	r1, r4
 801556e:	f7ff ff59 	bl	8015424 <__sflush_r>
 8015572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015574:	07da      	lsls	r2, r3, #31
 8015576:	4605      	mov	r5, r0
 8015578:	d4e0      	bmi.n	801553c <_fflush_r+0xc>
 801557a:	89a3      	ldrh	r3, [r4, #12]
 801557c:	059b      	lsls	r3, r3, #22
 801557e:	d4dd      	bmi.n	801553c <_fflush_r+0xc>
 8015580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015582:	f7fe faa3 	bl	8013acc <__retarget_lock_release_recursive>
 8015586:	e7d9      	b.n	801553c <_fflush_r+0xc>
 8015588:	4b05      	ldr	r3, [pc, #20]	; (80155a0 <_fflush_r+0x70>)
 801558a:	429c      	cmp	r4, r3
 801558c:	d101      	bne.n	8015592 <_fflush_r+0x62>
 801558e:	68ac      	ldr	r4, [r5, #8]
 8015590:	e7df      	b.n	8015552 <_fflush_r+0x22>
 8015592:	4b04      	ldr	r3, [pc, #16]	; (80155a4 <_fflush_r+0x74>)
 8015594:	429c      	cmp	r4, r3
 8015596:	bf08      	it	eq
 8015598:	68ec      	ldreq	r4, [r5, #12]
 801559a:	e7da      	b.n	8015552 <_fflush_r+0x22>
 801559c:	08016e00 	.word	0x08016e00
 80155a0:	08016e20 	.word	0x08016e20
 80155a4:	08016de0 	.word	0x08016de0

080155a8 <_localeconv_r>:
 80155a8:	4800      	ldr	r0, [pc, #0]	; (80155ac <_localeconv_r+0x4>)
 80155aa:	4770      	bx	lr
 80155ac:	2000050c 	.word	0x2000050c

080155b0 <_lseek_r>:
 80155b0:	b538      	push	{r3, r4, r5, lr}
 80155b2:	4d07      	ldr	r5, [pc, #28]	; (80155d0 <_lseek_r+0x20>)
 80155b4:	4604      	mov	r4, r0
 80155b6:	4608      	mov	r0, r1
 80155b8:	4611      	mov	r1, r2
 80155ba:	2200      	movs	r2, #0
 80155bc:	602a      	str	r2, [r5, #0]
 80155be:	461a      	mov	r2, r3
 80155c0:	f7ef fd00 	bl	8004fc4 <_lseek>
 80155c4:	1c43      	adds	r3, r0, #1
 80155c6:	d102      	bne.n	80155ce <_lseek_r+0x1e>
 80155c8:	682b      	ldr	r3, [r5, #0]
 80155ca:	b103      	cbz	r3, 80155ce <_lseek_r+0x1e>
 80155cc:	6023      	str	r3, [r4, #0]
 80155ce:	bd38      	pop	{r3, r4, r5, pc}
 80155d0:	200098a0 	.word	0x200098a0

080155d4 <malloc>:
 80155d4:	4b02      	ldr	r3, [pc, #8]	; (80155e0 <malloc+0xc>)
 80155d6:	4601      	mov	r1, r0
 80155d8:	6818      	ldr	r0, [r3, #0]
 80155da:	f7fe bac9 	b.w	8013b70 <_malloc_r>
 80155de:	bf00      	nop
 80155e0:	200003b8 	.word	0x200003b8

080155e4 <__malloc_lock>:
 80155e4:	4801      	ldr	r0, [pc, #4]	; (80155ec <__malloc_lock+0x8>)
 80155e6:	f7fe ba70 	b.w	8013aca <__retarget_lock_acquire_recursive>
 80155ea:	bf00      	nop
 80155ec:	20009894 	.word	0x20009894

080155f0 <__malloc_unlock>:
 80155f0:	4801      	ldr	r0, [pc, #4]	; (80155f8 <__malloc_unlock+0x8>)
 80155f2:	f7fe ba6b 	b.w	8013acc <__retarget_lock_release_recursive>
 80155f6:	bf00      	nop
 80155f8:	20009894 	.word	0x20009894

080155fc <_Balloc>:
 80155fc:	b570      	push	{r4, r5, r6, lr}
 80155fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015600:	4604      	mov	r4, r0
 8015602:	460d      	mov	r5, r1
 8015604:	b976      	cbnz	r6, 8015624 <_Balloc+0x28>
 8015606:	2010      	movs	r0, #16
 8015608:	f7ff ffe4 	bl	80155d4 <malloc>
 801560c:	4602      	mov	r2, r0
 801560e:	6260      	str	r0, [r4, #36]	; 0x24
 8015610:	b920      	cbnz	r0, 801561c <_Balloc+0x20>
 8015612:	4b18      	ldr	r3, [pc, #96]	; (8015674 <_Balloc+0x78>)
 8015614:	4818      	ldr	r0, [pc, #96]	; (8015678 <_Balloc+0x7c>)
 8015616:	2166      	movs	r1, #102	; 0x66
 8015618:	f000 fd44 	bl	80160a4 <__assert_func>
 801561c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015620:	6006      	str	r6, [r0, #0]
 8015622:	60c6      	str	r6, [r0, #12]
 8015624:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015626:	68f3      	ldr	r3, [r6, #12]
 8015628:	b183      	cbz	r3, 801564c <_Balloc+0x50>
 801562a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801562c:	68db      	ldr	r3, [r3, #12]
 801562e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015632:	b9b8      	cbnz	r0, 8015664 <_Balloc+0x68>
 8015634:	2101      	movs	r1, #1
 8015636:	fa01 f605 	lsl.w	r6, r1, r5
 801563a:	1d72      	adds	r2, r6, #5
 801563c:	0092      	lsls	r2, r2, #2
 801563e:	4620      	mov	r0, r4
 8015640:	f000 fb60 	bl	8015d04 <_calloc_r>
 8015644:	b160      	cbz	r0, 8015660 <_Balloc+0x64>
 8015646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801564a:	e00e      	b.n	801566a <_Balloc+0x6e>
 801564c:	2221      	movs	r2, #33	; 0x21
 801564e:	2104      	movs	r1, #4
 8015650:	4620      	mov	r0, r4
 8015652:	f000 fb57 	bl	8015d04 <_calloc_r>
 8015656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015658:	60f0      	str	r0, [r6, #12]
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d1e4      	bne.n	801562a <_Balloc+0x2e>
 8015660:	2000      	movs	r0, #0
 8015662:	bd70      	pop	{r4, r5, r6, pc}
 8015664:	6802      	ldr	r2, [r0, #0]
 8015666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801566a:	2300      	movs	r3, #0
 801566c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015670:	e7f7      	b.n	8015662 <_Balloc+0x66>
 8015672:	bf00      	nop
 8015674:	08016e85 	.word	0x08016e85
 8015678:	08016f08 	.word	0x08016f08

0801567c <_Bfree>:
 801567c:	b570      	push	{r4, r5, r6, lr}
 801567e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015680:	4605      	mov	r5, r0
 8015682:	460c      	mov	r4, r1
 8015684:	b976      	cbnz	r6, 80156a4 <_Bfree+0x28>
 8015686:	2010      	movs	r0, #16
 8015688:	f7ff ffa4 	bl	80155d4 <malloc>
 801568c:	4602      	mov	r2, r0
 801568e:	6268      	str	r0, [r5, #36]	; 0x24
 8015690:	b920      	cbnz	r0, 801569c <_Bfree+0x20>
 8015692:	4b09      	ldr	r3, [pc, #36]	; (80156b8 <_Bfree+0x3c>)
 8015694:	4809      	ldr	r0, [pc, #36]	; (80156bc <_Bfree+0x40>)
 8015696:	218a      	movs	r1, #138	; 0x8a
 8015698:	f000 fd04 	bl	80160a4 <__assert_func>
 801569c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80156a0:	6006      	str	r6, [r0, #0]
 80156a2:	60c6      	str	r6, [r0, #12]
 80156a4:	b13c      	cbz	r4, 80156b6 <_Bfree+0x3a>
 80156a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80156a8:	6862      	ldr	r2, [r4, #4]
 80156aa:	68db      	ldr	r3, [r3, #12]
 80156ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80156b0:	6021      	str	r1, [r4, #0]
 80156b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80156b6:	bd70      	pop	{r4, r5, r6, pc}
 80156b8:	08016e85 	.word	0x08016e85
 80156bc:	08016f08 	.word	0x08016f08

080156c0 <__multadd>:
 80156c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c4:	690d      	ldr	r5, [r1, #16]
 80156c6:	4607      	mov	r7, r0
 80156c8:	460c      	mov	r4, r1
 80156ca:	461e      	mov	r6, r3
 80156cc:	f101 0c14 	add.w	ip, r1, #20
 80156d0:	2000      	movs	r0, #0
 80156d2:	f8dc 3000 	ldr.w	r3, [ip]
 80156d6:	b299      	uxth	r1, r3
 80156d8:	fb02 6101 	mla	r1, r2, r1, r6
 80156dc:	0c1e      	lsrs	r6, r3, #16
 80156de:	0c0b      	lsrs	r3, r1, #16
 80156e0:	fb02 3306 	mla	r3, r2, r6, r3
 80156e4:	b289      	uxth	r1, r1
 80156e6:	3001      	adds	r0, #1
 80156e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80156ec:	4285      	cmp	r5, r0
 80156ee:	f84c 1b04 	str.w	r1, [ip], #4
 80156f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80156f6:	dcec      	bgt.n	80156d2 <__multadd+0x12>
 80156f8:	b30e      	cbz	r6, 801573e <__multadd+0x7e>
 80156fa:	68a3      	ldr	r3, [r4, #8]
 80156fc:	42ab      	cmp	r3, r5
 80156fe:	dc19      	bgt.n	8015734 <__multadd+0x74>
 8015700:	6861      	ldr	r1, [r4, #4]
 8015702:	4638      	mov	r0, r7
 8015704:	3101      	adds	r1, #1
 8015706:	f7ff ff79 	bl	80155fc <_Balloc>
 801570a:	4680      	mov	r8, r0
 801570c:	b928      	cbnz	r0, 801571a <__multadd+0x5a>
 801570e:	4602      	mov	r2, r0
 8015710:	4b0c      	ldr	r3, [pc, #48]	; (8015744 <__multadd+0x84>)
 8015712:	480d      	ldr	r0, [pc, #52]	; (8015748 <__multadd+0x88>)
 8015714:	21b5      	movs	r1, #181	; 0xb5
 8015716:	f000 fcc5 	bl	80160a4 <__assert_func>
 801571a:	6922      	ldr	r2, [r4, #16]
 801571c:	3202      	adds	r2, #2
 801571e:	f104 010c 	add.w	r1, r4, #12
 8015722:	0092      	lsls	r2, r2, #2
 8015724:	300c      	adds	r0, #12
 8015726:	f7fe f9d2 	bl	8013ace <memcpy>
 801572a:	4621      	mov	r1, r4
 801572c:	4638      	mov	r0, r7
 801572e:	f7ff ffa5 	bl	801567c <_Bfree>
 8015732:	4644      	mov	r4, r8
 8015734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015738:	3501      	adds	r5, #1
 801573a:	615e      	str	r6, [r3, #20]
 801573c:	6125      	str	r5, [r4, #16]
 801573e:	4620      	mov	r0, r4
 8015740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015744:	08016ef7 	.word	0x08016ef7
 8015748:	08016f08 	.word	0x08016f08

0801574c <__hi0bits>:
 801574c:	0c03      	lsrs	r3, r0, #16
 801574e:	041b      	lsls	r3, r3, #16
 8015750:	b9d3      	cbnz	r3, 8015788 <__hi0bits+0x3c>
 8015752:	0400      	lsls	r0, r0, #16
 8015754:	2310      	movs	r3, #16
 8015756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801575a:	bf04      	itt	eq
 801575c:	0200      	lsleq	r0, r0, #8
 801575e:	3308      	addeq	r3, #8
 8015760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015764:	bf04      	itt	eq
 8015766:	0100      	lsleq	r0, r0, #4
 8015768:	3304      	addeq	r3, #4
 801576a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801576e:	bf04      	itt	eq
 8015770:	0080      	lsleq	r0, r0, #2
 8015772:	3302      	addeq	r3, #2
 8015774:	2800      	cmp	r0, #0
 8015776:	db05      	blt.n	8015784 <__hi0bits+0x38>
 8015778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801577c:	f103 0301 	add.w	r3, r3, #1
 8015780:	bf08      	it	eq
 8015782:	2320      	moveq	r3, #32
 8015784:	4618      	mov	r0, r3
 8015786:	4770      	bx	lr
 8015788:	2300      	movs	r3, #0
 801578a:	e7e4      	b.n	8015756 <__hi0bits+0xa>

0801578c <__lo0bits>:
 801578c:	6803      	ldr	r3, [r0, #0]
 801578e:	f013 0207 	ands.w	r2, r3, #7
 8015792:	4601      	mov	r1, r0
 8015794:	d00b      	beq.n	80157ae <__lo0bits+0x22>
 8015796:	07da      	lsls	r2, r3, #31
 8015798:	d423      	bmi.n	80157e2 <__lo0bits+0x56>
 801579a:	0798      	lsls	r0, r3, #30
 801579c:	bf49      	itett	mi
 801579e:	085b      	lsrmi	r3, r3, #1
 80157a0:	089b      	lsrpl	r3, r3, #2
 80157a2:	2001      	movmi	r0, #1
 80157a4:	600b      	strmi	r3, [r1, #0]
 80157a6:	bf5c      	itt	pl
 80157a8:	600b      	strpl	r3, [r1, #0]
 80157aa:	2002      	movpl	r0, #2
 80157ac:	4770      	bx	lr
 80157ae:	b298      	uxth	r0, r3
 80157b0:	b9a8      	cbnz	r0, 80157de <__lo0bits+0x52>
 80157b2:	0c1b      	lsrs	r3, r3, #16
 80157b4:	2010      	movs	r0, #16
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	b90a      	cbnz	r2, 80157be <__lo0bits+0x32>
 80157ba:	3008      	adds	r0, #8
 80157bc:	0a1b      	lsrs	r3, r3, #8
 80157be:	071a      	lsls	r2, r3, #28
 80157c0:	bf04      	itt	eq
 80157c2:	091b      	lsreq	r3, r3, #4
 80157c4:	3004      	addeq	r0, #4
 80157c6:	079a      	lsls	r2, r3, #30
 80157c8:	bf04      	itt	eq
 80157ca:	089b      	lsreq	r3, r3, #2
 80157cc:	3002      	addeq	r0, #2
 80157ce:	07da      	lsls	r2, r3, #31
 80157d0:	d403      	bmi.n	80157da <__lo0bits+0x4e>
 80157d2:	085b      	lsrs	r3, r3, #1
 80157d4:	f100 0001 	add.w	r0, r0, #1
 80157d8:	d005      	beq.n	80157e6 <__lo0bits+0x5a>
 80157da:	600b      	str	r3, [r1, #0]
 80157dc:	4770      	bx	lr
 80157de:	4610      	mov	r0, r2
 80157e0:	e7e9      	b.n	80157b6 <__lo0bits+0x2a>
 80157e2:	2000      	movs	r0, #0
 80157e4:	4770      	bx	lr
 80157e6:	2020      	movs	r0, #32
 80157e8:	4770      	bx	lr
	...

080157ec <__i2b>:
 80157ec:	b510      	push	{r4, lr}
 80157ee:	460c      	mov	r4, r1
 80157f0:	2101      	movs	r1, #1
 80157f2:	f7ff ff03 	bl	80155fc <_Balloc>
 80157f6:	4602      	mov	r2, r0
 80157f8:	b928      	cbnz	r0, 8015806 <__i2b+0x1a>
 80157fa:	4b05      	ldr	r3, [pc, #20]	; (8015810 <__i2b+0x24>)
 80157fc:	4805      	ldr	r0, [pc, #20]	; (8015814 <__i2b+0x28>)
 80157fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015802:	f000 fc4f 	bl	80160a4 <__assert_func>
 8015806:	2301      	movs	r3, #1
 8015808:	6144      	str	r4, [r0, #20]
 801580a:	6103      	str	r3, [r0, #16]
 801580c:	bd10      	pop	{r4, pc}
 801580e:	bf00      	nop
 8015810:	08016ef7 	.word	0x08016ef7
 8015814:	08016f08 	.word	0x08016f08

08015818 <__multiply>:
 8015818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801581c:	4691      	mov	r9, r2
 801581e:	690a      	ldr	r2, [r1, #16]
 8015820:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015824:	429a      	cmp	r2, r3
 8015826:	bfb8      	it	lt
 8015828:	460b      	movlt	r3, r1
 801582a:	460c      	mov	r4, r1
 801582c:	bfbc      	itt	lt
 801582e:	464c      	movlt	r4, r9
 8015830:	4699      	movlt	r9, r3
 8015832:	6927      	ldr	r7, [r4, #16]
 8015834:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015838:	68a3      	ldr	r3, [r4, #8]
 801583a:	6861      	ldr	r1, [r4, #4]
 801583c:	eb07 060a 	add.w	r6, r7, sl
 8015840:	42b3      	cmp	r3, r6
 8015842:	b085      	sub	sp, #20
 8015844:	bfb8      	it	lt
 8015846:	3101      	addlt	r1, #1
 8015848:	f7ff fed8 	bl	80155fc <_Balloc>
 801584c:	b930      	cbnz	r0, 801585c <__multiply+0x44>
 801584e:	4602      	mov	r2, r0
 8015850:	4b44      	ldr	r3, [pc, #272]	; (8015964 <__multiply+0x14c>)
 8015852:	4845      	ldr	r0, [pc, #276]	; (8015968 <__multiply+0x150>)
 8015854:	f240 115d 	movw	r1, #349	; 0x15d
 8015858:	f000 fc24 	bl	80160a4 <__assert_func>
 801585c:	f100 0514 	add.w	r5, r0, #20
 8015860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015864:	462b      	mov	r3, r5
 8015866:	2200      	movs	r2, #0
 8015868:	4543      	cmp	r3, r8
 801586a:	d321      	bcc.n	80158b0 <__multiply+0x98>
 801586c:	f104 0314 	add.w	r3, r4, #20
 8015870:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015874:	f109 0314 	add.w	r3, r9, #20
 8015878:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801587c:	9202      	str	r2, [sp, #8]
 801587e:	1b3a      	subs	r2, r7, r4
 8015880:	3a15      	subs	r2, #21
 8015882:	f022 0203 	bic.w	r2, r2, #3
 8015886:	3204      	adds	r2, #4
 8015888:	f104 0115 	add.w	r1, r4, #21
 801588c:	428f      	cmp	r7, r1
 801588e:	bf38      	it	cc
 8015890:	2204      	movcc	r2, #4
 8015892:	9201      	str	r2, [sp, #4]
 8015894:	9a02      	ldr	r2, [sp, #8]
 8015896:	9303      	str	r3, [sp, #12]
 8015898:	429a      	cmp	r2, r3
 801589a:	d80c      	bhi.n	80158b6 <__multiply+0x9e>
 801589c:	2e00      	cmp	r6, #0
 801589e:	dd03      	ble.n	80158a8 <__multiply+0x90>
 80158a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d05a      	beq.n	801595e <__multiply+0x146>
 80158a8:	6106      	str	r6, [r0, #16]
 80158aa:	b005      	add	sp, #20
 80158ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b0:	f843 2b04 	str.w	r2, [r3], #4
 80158b4:	e7d8      	b.n	8015868 <__multiply+0x50>
 80158b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80158ba:	f1ba 0f00 	cmp.w	sl, #0
 80158be:	d024      	beq.n	801590a <__multiply+0xf2>
 80158c0:	f104 0e14 	add.w	lr, r4, #20
 80158c4:	46a9      	mov	r9, r5
 80158c6:	f04f 0c00 	mov.w	ip, #0
 80158ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80158ce:	f8d9 1000 	ldr.w	r1, [r9]
 80158d2:	fa1f fb82 	uxth.w	fp, r2
 80158d6:	b289      	uxth	r1, r1
 80158d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80158dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80158e0:	f8d9 2000 	ldr.w	r2, [r9]
 80158e4:	4461      	add	r1, ip
 80158e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80158ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80158ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80158f2:	b289      	uxth	r1, r1
 80158f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80158f8:	4577      	cmp	r7, lr
 80158fa:	f849 1b04 	str.w	r1, [r9], #4
 80158fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015902:	d8e2      	bhi.n	80158ca <__multiply+0xb2>
 8015904:	9a01      	ldr	r2, [sp, #4]
 8015906:	f845 c002 	str.w	ip, [r5, r2]
 801590a:	9a03      	ldr	r2, [sp, #12]
 801590c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015910:	3304      	adds	r3, #4
 8015912:	f1b9 0f00 	cmp.w	r9, #0
 8015916:	d020      	beq.n	801595a <__multiply+0x142>
 8015918:	6829      	ldr	r1, [r5, #0]
 801591a:	f104 0c14 	add.w	ip, r4, #20
 801591e:	46ae      	mov	lr, r5
 8015920:	f04f 0a00 	mov.w	sl, #0
 8015924:	f8bc b000 	ldrh.w	fp, [ip]
 8015928:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801592c:	fb09 220b 	mla	r2, r9, fp, r2
 8015930:	4492      	add	sl, r2
 8015932:	b289      	uxth	r1, r1
 8015934:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015938:	f84e 1b04 	str.w	r1, [lr], #4
 801593c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015940:	f8be 1000 	ldrh.w	r1, [lr]
 8015944:	0c12      	lsrs	r2, r2, #16
 8015946:	fb09 1102 	mla	r1, r9, r2, r1
 801594a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801594e:	4567      	cmp	r7, ip
 8015950:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015954:	d8e6      	bhi.n	8015924 <__multiply+0x10c>
 8015956:	9a01      	ldr	r2, [sp, #4]
 8015958:	50a9      	str	r1, [r5, r2]
 801595a:	3504      	adds	r5, #4
 801595c:	e79a      	b.n	8015894 <__multiply+0x7c>
 801595e:	3e01      	subs	r6, #1
 8015960:	e79c      	b.n	801589c <__multiply+0x84>
 8015962:	bf00      	nop
 8015964:	08016ef7 	.word	0x08016ef7
 8015968:	08016f08 	.word	0x08016f08

0801596c <__pow5mult>:
 801596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015970:	4615      	mov	r5, r2
 8015972:	f012 0203 	ands.w	r2, r2, #3
 8015976:	4606      	mov	r6, r0
 8015978:	460f      	mov	r7, r1
 801597a:	d007      	beq.n	801598c <__pow5mult+0x20>
 801597c:	4c25      	ldr	r4, [pc, #148]	; (8015a14 <__pow5mult+0xa8>)
 801597e:	3a01      	subs	r2, #1
 8015980:	2300      	movs	r3, #0
 8015982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015986:	f7ff fe9b 	bl	80156c0 <__multadd>
 801598a:	4607      	mov	r7, r0
 801598c:	10ad      	asrs	r5, r5, #2
 801598e:	d03d      	beq.n	8015a0c <__pow5mult+0xa0>
 8015990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015992:	b97c      	cbnz	r4, 80159b4 <__pow5mult+0x48>
 8015994:	2010      	movs	r0, #16
 8015996:	f7ff fe1d 	bl	80155d4 <malloc>
 801599a:	4602      	mov	r2, r0
 801599c:	6270      	str	r0, [r6, #36]	; 0x24
 801599e:	b928      	cbnz	r0, 80159ac <__pow5mult+0x40>
 80159a0:	4b1d      	ldr	r3, [pc, #116]	; (8015a18 <__pow5mult+0xac>)
 80159a2:	481e      	ldr	r0, [pc, #120]	; (8015a1c <__pow5mult+0xb0>)
 80159a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80159a8:	f000 fb7c 	bl	80160a4 <__assert_func>
 80159ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159b0:	6004      	str	r4, [r0, #0]
 80159b2:	60c4      	str	r4, [r0, #12]
 80159b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80159bc:	b94c      	cbnz	r4, 80159d2 <__pow5mult+0x66>
 80159be:	f240 2171 	movw	r1, #625	; 0x271
 80159c2:	4630      	mov	r0, r6
 80159c4:	f7ff ff12 	bl	80157ec <__i2b>
 80159c8:	2300      	movs	r3, #0
 80159ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80159ce:	4604      	mov	r4, r0
 80159d0:	6003      	str	r3, [r0, #0]
 80159d2:	f04f 0900 	mov.w	r9, #0
 80159d6:	07eb      	lsls	r3, r5, #31
 80159d8:	d50a      	bpl.n	80159f0 <__pow5mult+0x84>
 80159da:	4639      	mov	r1, r7
 80159dc:	4622      	mov	r2, r4
 80159de:	4630      	mov	r0, r6
 80159e0:	f7ff ff1a 	bl	8015818 <__multiply>
 80159e4:	4639      	mov	r1, r7
 80159e6:	4680      	mov	r8, r0
 80159e8:	4630      	mov	r0, r6
 80159ea:	f7ff fe47 	bl	801567c <_Bfree>
 80159ee:	4647      	mov	r7, r8
 80159f0:	106d      	asrs	r5, r5, #1
 80159f2:	d00b      	beq.n	8015a0c <__pow5mult+0xa0>
 80159f4:	6820      	ldr	r0, [r4, #0]
 80159f6:	b938      	cbnz	r0, 8015a08 <__pow5mult+0x9c>
 80159f8:	4622      	mov	r2, r4
 80159fa:	4621      	mov	r1, r4
 80159fc:	4630      	mov	r0, r6
 80159fe:	f7ff ff0b 	bl	8015818 <__multiply>
 8015a02:	6020      	str	r0, [r4, #0]
 8015a04:	f8c0 9000 	str.w	r9, [r0]
 8015a08:	4604      	mov	r4, r0
 8015a0a:	e7e4      	b.n	80159d6 <__pow5mult+0x6a>
 8015a0c:	4638      	mov	r0, r7
 8015a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a12:	bf00      	nop
 8015a14:	08017058 	.word	0x08017058
 8015a18:	08016e85 	.word	0x08016e85
 8015a1c:	08016f08 	.word	0x08016f08

08015a20 <__lshift>:
 8015a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a24:	460c      	mov	r4, r1
 8015a26:	6849      	ldr	r1, [r1, #4]
 8015a28:	6923      	ldr	r3, [r4, #16]
 8015a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a2e:	68a3      	ldr	r3, [r4, #8]
 8015a30:	4607      	mov	r7, r0
 8015a32:	4691      	mov	r9, r2
 8015a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a38:	f108 0601 	add.w	r6, r8, #1
 8015a3c:	42b3      	cmp	r3, r6
 8015a3e:	db0b      	blt.n	8015a58 <__lshift+0x38>
 8015a40:	4638      	mov	r0, r7
 8015a42:	f7ff fddb 	bl	80155fc <_Balloc>
 8015a46:	4605      	mov	r5, r0
 8015a48:	b948      	cbnz	r0, 8015a5e <__lshift+0x3e>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	4b2a      	ldr	r3, [pc, #168]	; (8015af8 <__lshift+0xd8>)
 8015a4e:	482b      	ldr	r0, [pc, #172]	; (8015afc <__lshift+0xdc>)
 8015a50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015a54:	f000 fb26 	bl	80160a4 <__assert_func>
 8015a58:	3101      	adds	r1, #1
 8015a5a:	005b      	lsls	r3, r3, #1
 8015a5c:	e7ee      	b.n	8015a3c <__lshift+0x1c>
 8015a5e:	2300      	movs	r3, #0
 8015a60:	f100 0114 	add.w	r1, r0, #20
 8015a64:	f100 0210 	add.w	r2, r0, #16
 8015a68:	4618      	mov	r0, r3
 8015a6a:	4553      	cmp	r3, sl
 8015a6c:	db37      	blt.n	8015ade <__lshift+0xbe>
 8015a6e:	6920      	ldr	r0, [r4, #16]
 8015a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a74:	f104 0314 	add.w	r3, r4, #20
 8015a78:	f019 091f 	ands.w	r9, r9, #31
 8015a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015a84:	d02f      	beq.n	8015ae6 <__lshift+0xc6>
 8015a86:	f1c9 0e20 	rsb	lr, r9, #32
 8015a8a:	468a      	mov	sl, r1
 8015a8c:	f04f 0c00 	mov.w	ip, #0
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	fa02 f209 	lsl.w	r2, r2, r9
 8015a96:	ea42 020c 	orr.w	r2, r2, ip
 8015a9a:	f84a 2b04 	str.w	r2, [sl], #4
 8015a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015aa2:	4298      	cmp	r0, r3
 8015aa4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015aa8:	d8f2      	bhi.n	8015a90 <__lshift+0x70>
 8015aaa:	1b03      	subs	r3, r0, r4
 8015aac:	3b15      	subs	r3, #21
 8015aae:	f023 0303 	bic.w	r3, r3, #3
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	f104 0215 	add.w	r2, r4, #21
 8015ab8:	4290      	cmp	r0, r2
 8015aba:	bf38      	it	cc
 8015abc:	2304      	movcc	r3, #4
 8015abe:	f841 c003 	str.w	ip, [r1, r3]
 8015ac2:	f1bc 0f00 	cmp.w	ip, #0
 8015ac6:	d001      	beq.n	8015acc <__lshift+0xac>
 8015ac8:	f108 0602 	add.w	r6, r8, #2
 8015acc:	3e01      	subs	r6, #1
 8015ace:	4638      	mov	r0, r7
 8015ad0:	612e      	str	r6, [r5, #16]
 8015ad2:	4621      	mov	r1, r4
 8015ad4:	f7ff fdd2 	bl	801567c <_Bfree>
 8015ad8:	4628      	mov	r0, r5
 8015ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	e7c1      	b.n	8015a6a <__lshift+0x4a>
 8015ae6:	3904      	subs	r1, #4
 8015ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015aec:	f841 2f04 	str.w	r2, [r1, #4]!
 8015af0:	4298      	cmp	r0, r3
 8015af2:	d8f9      	bhi.n	8015ae8 <__lshift+0xc8>
 8015af4:	e7ea      	b.n	8015acc <__lshift+0xac>
 8015af6:	bf00      	nop
 8015af8:	08016ef7 	.word	0x08016ef7
 8015afc:	08016f08 	.word	0x08016f08

08015b00 <__mcmp>:
 8015b00:	b530      	push	{r4, r5, lr}
 8015b02:	6902      	ldr	r2, [r0, #16]
 8015b04:	690c      	ldr	r4, [r1, #16]
 8015b06:	1b12      	subs	r2, r2, r4
 8015b08:	d10e      	bne.n	8015b28 <__mcmp+0x28>
 8015b0a:	f100 0314 	add.w	r3, r0, #20
 8015b0e:	3114      	adds	r1, #20
 8015b10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015b14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015b18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015b1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015b20:	42a5      	cmp	r5, r4
 8015b22:	d003      	beq.n	8015b2c <__mcmp+0x2c>
 8015b24:	d305      	bcc.n	8015b32 <__mcmp+0x32>
 8015b26:	2201      	movs	r2, #1
 8015b28:	4610      	mov	r0, r2
 8015b2a:	bd30      	pop	{r4, r5, pc}
 8015b2c:	4283      	cmp	r3, r0
 8015b2e:	d3f3      	bcc.n	8015b18 <__mcmp+0x18>
 8015b30:	e7fa      	b.n	8015b28 <__mcmp+0x28>
 8015b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b36:	e7f7      	b.n	8015b28 <__mcmp+0x28>

08015b38 <__mdiff>:
 8015b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3c:	460c      	mov	r4, r1
 8015b3e:	4606      	mov	r6, r0
 8015b40:	4611      	mov	r1, r2
 8015b42:	4620      	mov	r0, r4
 8015b44:	4690      	mov	r8, r2
 8015b46:	f7ff ffdb 	bl	8015b00 <__mcmp>
 8015b4a:	1e05      	subs	r5, r0, #0
 8015b4c:	d110      	bne.n	8015b70 <__mdiff+0x38>
 8015b4e:	4629      	mov	r1, r5
 8015b50:	4630      	mov	r0, r6
 8015b52:	f7ff fd53 	bl	80155fc <_Balloc>
 8015b56:	b930      	cbnz	r0, 8015b66 <__mdiff+0x2e>
 8015b58:	4b3a      	ldr	r3, [pc, #232]	; (8015c44 <__mdiff+0x10c>)
 8015b5a:	4602      	mov	r2, r0
 8015b5c:	f240 2132 	movw	r1, #562	; 0x232
 8015b60:	4839      	ldr	r0, [pc, #228]	; (8015c48 <__mdiff+0x110>)
 8015b62:	f000 fa9f 	bl	80160a4 <__assert_func>
 8015b66:	2301      	movs	r3, #1
 8015b68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b70:	bfa4      	itt	ge
 8015b72:	4643      	movge	r3, r8
 8015b74:	46a0      	movge	r8, r4
 8015b76:	4630      	mov	r0, r6
 8015b78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b7c:	bfa6      	itte	ge
 8015b7e:	461c      	movge	r4, r3
 8015b80:	2500      	movge	r5, #0
 8015b82:	2501      	movlt	r5, #1
 8015b84:	f7ff fd3a 	bl	80155fc <_Balloc>
 8015b88:	b920      	cbnz	r0, 8015b94 <__mdiff+0x5c>
 8015b8a:	4b2e      	ldr	r3, [pc, #184]	; (8015c44 <__mdiff+0x10c>)
 8015b8c:	4602      	mov	r2, r0
 8015b8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015b92:	e7e5      	b.n	8015b60 <__mdiff+0x28>
 8015b94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015b98:	6926      	ldr	r6, [r4, #16]
 8015b9a:	60c5      	str	r5, [r0, #12]
 8015b9c:	f104 0914 	add.w	r9, r4, #20
 8015ba0:	f108 0514 	add.w	r5, r8, #20
 8015ba4:	f100 0e14 	add.w	lr, r0, #20
 8015ba8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015bac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015bb0:	f108 0210 	add.w	r2, r8, #16
 8015bb4:	46f2      	mov	sl, lr
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8015bbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015bc0:	fa1f f883 	uxth.w	r8, r3
 8015bc4:	fa11 f18b 	uxtah	r1, r1, fp
 8015bc8:	0c1b      	lsrs	r3, r3, #16
 8015bca:	eba1 0808 	sub.w	r8, r1, r8
 8015bce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015bd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015bd6:	fa1f f888 	uxth.w	r8, r8
 8015bda:	1419      	asrs	r1, r3, #16
 8015bdc:	454e      	cmp	r6, r9
 8015bde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015be2:	f84a 3b04 	str.w	r3, [sl], #4
 8015be6:	d8e7      	bhi.n	8015bb8 <__mdiff+0x80>
 8015be8:	1b33      	subs	r3, r6, r4
 8015bea:	3b15      	subs	r3, #21
 8015bec:	f023 0303 	bic.w	r3, r3, #3
 8015bf0:	3304      	adds	r3, #4
 8015bf2:	3415      	adds	r4, #21
 8015bf4:	42a6      	cmp	r6, r4
 8015bf6:	bf38      	it	cc
 8015bf8:	2304      	movcc	r3, #4
 8015bfa:	441d      	add	r5, r3
 8015bfc:	4473      	add	r3, lr
 8015bfe:	469e      	mov	lr, r3
 8015c00:	462e      	mov	r6, r5
 8015c02:	4566      	cmp	r6, ip
 8015c04:	d30e      	bcc.n	8015c24 <__mdiff+0xec>
 8015c06:	f10c 0203 	add.w	r2, ip, #3
 8015c0a:	1b52      	subs	r2, r2, r5
 8015c0c:	f022 0203 	bic.w	r2, r2, #3
 8015c10:	3d03      	subs	r5, #3
 8015c12:	45ac      	cmp	ip, r5
 8015c14:	bf38      	it	cc
 8015c16:	2200      	movcc	r2, #0
 8015c18:	441a      	add	r2, r3
 8015c1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015c1e:	b17b      	cbz	r3, 8015c40 <__mdiff+0x108>
 8015c20:	6107      	str	r7, [r0, #16]
 8015c22:	e7a3      	b.n	8015b6c <__mdiff+0x34>
 8015c24:	f856 8b04 	ldr.w	r8, [r6], #4
 8015c28:	fa11 f288 	uxtah	r2, r1, r8
 8015c2c:	1414      	asrs	r4, r2, #16
 8015c2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015c32:	b292      	uxth	r2, r2
 8015c34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015c38:	f84e 2b04 	str.w	r2, [lr], #4
 8015c3c:	1421      	asrs	r1, r4, #16
 8015c3e:	e7e0      	b.n	8015c02 <__mdiff+0xca>
 8015c40:	3f01      	subs	r7, #1
 8015c42:	e7ea      	b.n	8015c1a <__mdiff+0xe2>
 8015c44:	08016ef7 	.word	0x08016ef7
 8015c48:	08016f08 	.word	0x08016f08

08015c4c <__d2b>:
 8015c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c50:	4689      	mov	r9, r1
 8015c52:	2101      	movs	r1, #1
 8015c54:	ec57 6b10 	vmov	r6, r7, d0
 8015c58:	4690      	mov	r8, r2
 8015c5a:	f7ff fccf 	bl	80155fc <_Balloc>
 8015c5e:	4604      	mov	r4, r0
 8015c60:	b930      	cbnz	r0, 8015c70 <__d2b+0x24>
 8015c62:	4602      	mov	r2, r0
 8015c64:	4b25      	ldr	r3, [pc, #148]	; (8015cfc <__d2b+0xb0>)
 8015c66:	4826      	ldr	r0, [pc, #152]	; (8015d00 <__d2b+0xb4>)
 8015c68:	f240 310a 	movw	r1, #778	; 0x30a
 8015c6c:	f000 fa1a 	bl	80160a4 <__assert_func>
 8015c70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015c74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015c78:	bb35      	cbnz	r5, 8015cc8 <__d2b+0x7c>
 8015c7a:	2e00      	cmp	r6, #0
 8015c7c:	9301      	str	r3, [sp, #4]
 8015c7e:	d028      	beq.n	8015cd2 <__d2b+0x86>
 8015c80:	4668      	mov	r0, sp
 8015c82:	9600      	str	r6, [sp, #0]
 8015c84:	f7ff fd82 	bl	801578c <__lo0bits>
 8015c88:	9900      	ldr	r1, [sp, #0]
 8015c8a:	b300      	cbz	r0, 8015cce <__d2b+0x82>
 8015c8c:	9a01      	ldr	r2, [sp, #4]
 8015c8e:	f1c0 0320 	rsb	r3, r0, #32
 8015c92:	fa02 f303 	lsl.w	r3, r2, r3
 8015c96:	430b      	orrs	r3, r1
 8015c98:	40c2      	lsrs	r2, r0
 8015c9a:	6163      	str	r3, [r4, #20]
 8015c9c:	9201      	str	r2, [sp, #4]
 8015c9e:	9b01      	ldr	r3, [sp, #4]
 8015ca0:	61a3      	str	r3, [r4, #24]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	bf14      	ite	ne
 8015ca6:	2202      	movne	r2, #2
 8015ca8:	2201      	moveq	r2, #1
 8015caa:	6122      	str	r2, [r4, #16]
 8015cac:	b1d5      	cbz	r5, 8015ce4 <__d2b+0x98>
 8015cae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015cb2:	4405      	add	r5, r0
 8015cb4:	f8c9 5000 	str.w	r5, [r9]
 8015cb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015cbc:	f8c8 0000 	str.w	r0, [r8]
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	b003      	add	sp, #12
 8015cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ccc:	e7d5      	b.n	8015c7a <__d2b+0x2e>
 8015cce:	6161      	str	r1, [r4, #20]
 8015cd0:	e7e5      	b.n	8015c9e <__d2b+0x52>
 8015cd2:	a801      	add	r0, sp, #4
 8015cd4:	f7ff fd5a 	bl	801578c <__lo0bits>
 8015cd8:	9b01      	ldr	r3, [sp, #4]
 8015cda:	6163      	str	r3, [r4, #20]
 8015cdc:	2201      	movs	r2, #1
 8015cde:	6122      	str	r2, [r4, #16]
 8015ce0:	3020      	adds	r0, #32
 8015ce2:	e7e3      	b.n	8015cac <__d2b+0x60>
 8015ce4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ce8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015cec:	f8c9 0000 	str.w	r0, [r9]
 8015cf0:	6918      	ldr	r0, [r3, #16]
 8015cf2:	f7ff fd2b 	bl	801574c <__hi0bits>
 8015cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015cfa:	e7df      	b.n	8015cbc <__d2b+0x70>
 8015cfc:	08016ef7 	.word	0x08016ef7
 8015d00:	08016f08 	.word	0x08016f08

08015d04 <_calloc_r>:
 8015d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d06:	fba1 2402 	umull	r2, r4, r1, r2
 8015d0a:	b94c      	cbnz	r4, 8015d20 <_calloc_r+0x1c>
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	9201      	str	r2, [sp, #4]
 8015d10:	f7fd ff2e 	bl	8013b70 <_malloc_r>
 8015d14:	9a01      	ldr	r2, [sp, #4]
 8015d16:	4605      	mov	r5, r0
 8015d18:	b930      	cbnz	r0, 8015d28 <_calloc_r+0x24>
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	b003      	add	sp, #12
 8015d1e:	bd30      	pop	{r4, r5, pc}
 8015d20:	220c      	movs	r2, #12
 8015d22:	6002      	str	r2, [r0, #0]
 8015d24:	2500      	movs	r5, #0
 8015d26:	e7f8      	b.n	8015d1a <_calloc_r+0x16>
 8015d28:	4621      	mov	r1, r4
 8015d2a:	f7fd fef8 	bl	8013b1e <memset>
 8015d2e:	e7f4      	b.n	8015d1a <_calloc_r+0x16>

08015d30 <_free_r>:
 8015d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d32:	2900      	cmp	r1, #0
 8015d34:	d044      	beq.n	8015dc0 <_free_r+0x90>
 8015d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d3a:	9001      	str	r0, [sp, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8015d42:	bfb8      	it	lt
 8015d44:	18e4      	addlt	r4, r4, r3
 8015d46:	f7ff fc4d 	bl	80155e4 <__malloc_lock>
 8015d4a:	4a1e      	ldr	r2, [pc, #120]	; (8015dc4 <_free_r+0x94>)
 8015d4c:	9801      	ldr	r0, [sp, #4]
 8015d4e:	6813      	ldr	r3, [r2, #0]
 8015d50:	b933      	cbnz	r3, 8015d60 <_free_r+0x30>
 8015d52:	6063      	str	r3, [r4, #4]
 8015d54:	6014      	str	r4, [r2, #0]
 8015d56:	b003      	add	sp, #12
 8015d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d5c:	f7ff bc48 	b.w	80155f0 <__malloc_unlock>
 8015d60:	42a3      	cmp	r3, r4
 8015d62:	d908      	bls.n	8015d76 <_free_r+0x46>
 8015d64:	6825      	ldr	r5, [r4, #0]
 8015d66:	1961      	adds	r1, r4, r5
 8015d68:	428b      	cmp	r3, r1
 8015d6a:	bf01      	itttt	eq
 8015d6c:	6819      	ldreq	r1, [r3, #0]
 8015d6e:	685b      	ldreq	r3, [r3, #4]
 8015d70:	1949      	addeq	r1, r1, r5
 8015d72:	6021      	streq	r1, [r4, #0]
 8015d74:	e7ed      	b.n	8015d52 <_free_r+0x22>
 8015d76:	461a      	mov	r2, r3
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	b10b      	cbz	r3, 8015d80 <_free_r+0x50>
 8015d7c:	42a3      	cmp	r3, r4
 8015d7e:	d9fa      	bls.n	8015d76 <_free_r+0x46>
 8015d80:	6811      	ldr	r1, [r2, #0]
 8015d82:	1855      	adds	r5, r2, r1
 8015d84:	42a5      	cmp	r5, r4
 8015d86:	d10b      	bne.n	8015da0 <_free_r+0x70>
 8015d88:	6824      	ldr	r4, [r4, #0]
 8015d8a:	4421      	add	r1, r4
 8015d8c:	1854      	adds	r4, r2, r1
 8015d8e:	42a3      	cmp	r3, r4
 8015d90:	6011      	str	r1, [r2, #0]
 8015d92:	d1e0      	bne.n	8015d56 <_free_r+0x26>
 8015d94:	681c      	ldr	r4, [r3, #0]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	6053      	str	r3, [r2, #4]
 8015d9a:	4421      	add	r1, r4
 8015d9c:	6011      	str	r1, [r2, #0]
 8015d9e:	e7da      	b.n	8015d56 <_free_r+0x26>
 8015da0:	d902      	bls.n	8015da8 <_free_r+0x78>
 8015da2:	230c      	movs	r3, #12
 8015da4:	6003      	str	r3, [r0, #0]
 8015da6:	e7d6      	b.n	8015d56 <_free_r+0x26>
 8015da8:	6825      	ldr	r5, [r4, #0]
 8015daa:	1961      	adds	r1, r4, r5
 8015dac:	428b      	cmp	r3, r1
 8015dae:	bf04      	itt	eq
 8015db0:	6819      	ldreq	r1, [r3, #0]
 8015db2:	685b      	ldreq	r3, [r3, #4]
 8015db4:	6063      	str	r3, [r4, #4]
 8015db6:	bf04      	itt	eq
 8015db8:	1949      	addeq	r1, r1, r5
 8015dba:	6021      	streq	r1, [r4, #0]
 8015dbc:	6054      	str	r4, [r2, #4]
 8015dbe:	e7ca      	b.n	8015d56 <_free_r+0x26>
 8015dc0:	b003      	add	sp, #12
 8015dc2:	bd30      	pop	{r4, r5, pc}
 8015dc4:	20009898 	.word	0x20009898

08015dc8 <__ssputs_r>:
 8015dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dcc:	688e      	ldr	r6, [r1, #8]
 8015dce:	429e      	cmp	r6, r3
 8015dd0:	4682      	mov	sl, r0
 8015dd2:	460c      	mov	r4, r1
 8015dd4:	4690      	mov	r8, r2
 8015dd6:	461f      	mov	r7, r3
 8015dd8:	d838      	bhi.n	8015e4c <__ssputs_r+0x84>
 8015dda:	898a      	ldrh	r2, [r1, #12]
 8015ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015de0:	d032      	beq.n	8015e48 <__ssputs_r+0x80>
 8015de2:	6825      	ldr	r5, [r4, #0]
 8015de4:	6909      	ldr	r1, [r1, #16]
 8015de6:	eba5 0901 	sub.w	r9, r5, r1
 8015dea:	6965      	ldr	r5, [r4, #20]
 8015dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015df4:	3301      	adds	r3, #1
 8015df6:	444b      	add	r3, r9
 8015df8:	106d      	asrs	r5, r5, #1
 8015dfa:	429d      	cmp	r5, r3
 8015dfc:	bf38      	it	cc
 8015dfe:	461d      	movcc	r5, r3
 8015e00:	0553      	lsls	r3, r2, #21
 8015e02:	d531      	bpl.n	8015e68 <__ssputs_r+0xa0>
 8015e04:	4629      	mov	r1, r5
 8015e06:	f7fd feb3 	bl	8013b70 <_malloc_r>
 8015e0a:	4606      	mov	r6, r0
 8015e0c:	b950      	cbnz	r0, 8015e24 <__ssputs_r+0x5c>
 8015e0e:	230c      	movs	r3, #12
 8015e10:	f8ca 3000 	str.w	r3, [sl]
 8015e14:	89a3      	ldrh	r3, [r4, #12]
 8015e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e1a:	81a3      	strh	r3, [r4, #12]
 8015e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e24:	6921      	ldr	r1, [r4, #16]
 8015e26:	464a      	mov	r2, r9
 8015e28:	f7fd fe51 	bl	8013ace <memcpy>
 8015e2c:	89a3      	ldrh	r3, [r4, #12]
 8015e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e36:	81a3      	strh	r3, [r4, #12]
 8015e38:	6126      	str	r6, [r4, #16]
 8015e3a:	6165      	str	r5, [r4, #20]
 8015e3c:	444e      	add	r6, r9
 8015e3e:	eba5 0509 	sub.w	r5, r5, r9
 8015e42:	6026      	str	r6, [r4, #0]
 8015e44:	60a5      	str	r5, [r4, #8]
 8015e46:	463e      	mov	r6, r7
 8015e48:	42be      	cmp	r6, r7
 8015e4a:	d900      	bls.n	8015e4e <__ssputs_r+0x86>
 8015e4c:	463e      	mov	r6, r7
 8015e4e:	6820      	ldr	r0, [r4, #0]
 8015e50:	4632      	mov	r2, r6
 8015e52:	4641      	mov	r1, r8
 8015e54:	f7fd fe49 	bl	8013aea <memmove>
 8015e58:	68a3      	ldr	r3, [r4, #8]
 8015e5a:	1b9b      	subs	r3, r3, r6
 8015e5c:	60a3      	str	r3, [r4, #8]
 8015e5e:	6823      	ldr	r3, [r4, #0]
 8015e60:	4433      	add	r3, r6
 8015e62:	6023      	str	r3, [r4, #0]
 8015e64:	2000      	movs	r0, #0
 8015e66:	e7db      	b.n	8015e20 <__ssputs_r+0x58>
 8015e68:	462a      	mov	r2, r5
 8015e6a:	f000 f95d 	bl	8016128 <_realloc_r>
 8015e6e:	4606      	mov	r6, r0
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d1e1      	bne.n	8015e38 <__ssputs_r+0x70>
 8015e74:	6921      	ldr	r1, [r4, #16]
 8015e76:	4650      	mov	r0, sl
 8015e78:	f7ff ff5a 	bl	8015d30 <_free_r>
 8015e7c:	e7c7      	b.n	8015e0e <__ssputs_r+0x46>
	...

08015e80 <_svfiprintf_r>:
 8015e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e84:	4698      	mov	r8, r3
 8015e86:	898b      	ldrh	r3, [r1, #12]
 8015e88:	061b      	lsls	r3, r3, #24
 8015e8a:	b09d      	sub	sp, #116	; 0x74
 8015e8c:	4607      	mov	r7, r0
 8015e8e:	460d      	mov	r5, r1
 8015e90:	4614      	mov	r4, r2
 8015e92:	d50e      	bpl.n	8015eb2 <_svfiprintf_r+0x32>
 8015e94:	690b      	ldr	r3, [r1, #16]
 8015e96:	b963      	cbnz	r3, 8015eb2 <_svfiprintf_r+0x32>
 8015e98:	2140      	movs	r1, #64	; 0x40
 8015e9a:	f7fd fe69 	bl	8013b70 <_malloc_r>
 8015e9e:	6028      	str	r0, [r5, #0]
 8015ea0:	6128      	str	r0, [r5, #16]
 8015ea2:	b920      	cbnz	r0, 8015eae <_svfiprintf_r+0x2e>
 8015ea4:	230c      	movs	r3, #12
 8015ea6:	603b      	str	r3, [r7, #0]
 8015ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eac:	e0d1      	b.n	8016052 <_svfiprintf_r+0x1d2>
 8015eae:	2340      	movs	r3, #64	; 0x40
 8015eb0:	616b      	str	r3, [r5, #20]
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb6:	2320      	movs	r3, #32
 8015eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ec0:	2330      	movs	r3, #48	; 0x30
 8015ec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801606c <_svfiprintf_r+0x1ec>
 8015ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015eca:	f04f 0901 	mov.w	r9, #1
 8015ece:	4623      	mov	r3, r4
 8015ed0:	469a      	mov	sl, r3
 8015ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ed6:	b10a      	cbz	r2, 8015edc <_svfiprintf_r+0x5c>
 8015ed8:	2a25      	cmp	r2, #37	; 0x25
 8015eda:	d1f9      	bne.n	8015ed0 <_svfiprintf_r+0x50>
 8015edc:	ebba 0b04 	subs.w	fp, sl, r4
 8015ee0:	d00b      	beq.n	8015efa <_svfiprintf_r+0x7a>
 8015ee2:	465b      	mov	r3, fp
 8015ee4:	4622      	mov	r2, r4
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	4638      	mov	r0, r7
 8015eea:	f7ff ff6d 	bl	8015dc8 <__ssputs_r>
 8015eee:	3001      	adds	r0, #1
 8015ef0:	f000 80aa 	beq.w	8016048 <_svfiprintf_r+0x1c8>
 8015ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ef6:	445a      	add	r2, fp
 8015ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8015efa:	f89a 3000 	ldrb.w	r3, [sl]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	f000 80a2 	beq.w	8016048 <_svfiprintf_r+0x1c8>
 8015f04:	2300      	movs	r3, #0
 8015f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f0e:	f10a 0a01 	add.w	sl, sl, #1
 8015f12:	9304      	str	r3, [sp, #16]
 8015f14:	9307      	str	r3, [sp, #28]
 8015f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8015f1c:	4654      	mov	r4, sl
 8015f1e:	2205      	movs	r2, #5
 8015f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f24:	4851      	ldr	r0, [pc, #324]	; (801606c <_svfiprintf_r+0x1ec>)
 8015f26:	f7ea f973 	bl	8000210 <memchr>
 8015f2a:	9a04      	ldr	r2, [sp, #16]
 8015f2c:	b9d8      	cbnz	r0, 8015f66 <_svfiprintf_r+0xe6>
 8015f2e:	06d0      	lsls	r0, r2, #27
 8015f30:	bf44      	itt	mi
 8015f32:	2320      	movmi	r3, #32
 8015f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f38:	0711      	lsls	r1, r2, #28
 8015f3a:	bf44      	itt	mi
 8015f3c:	232b      	movmi	r3, #43	; 0x2b
 8015f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f42:	f89a 3000 	ldrb.w	r3, [sl]
 8015f46:	2b2a      	cmp	r3, #42	; 0x2a
 8015f48:	d015      	beq.n	8015f76 <_svfiprintf_r+0xf6>
 8015f4a:	9a07      	ldr	r2, [sp, #28]
 8015f4c:	4654      	mov	r4, sl
 8015f4e:	2000      	movs	r0, #0
 8015f50:	f04f 0c0a 	mov.w	ip, #10
 8015f54:	4621      	mov	r1, r4
 8015f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f5a:	3b30      	subs	r3, #48	; 0x30
 8015f5c:	2b09      	cmp	r3, #9
 8015f5e:	d94e      	bls.n	8015ffe <_svfiprintf_r+0x17e>
 8015f60:	b1b0      	cbz	r0, 8015f90 <_svfiprintf_r+0x110>
 8015f62:	9207      	str	r2, [sp, #28]
 8015f64:	e014      	b.n	8015f90 <_svfiprintf_r+0x110>
 8015f66:	eba0 0308 	sub.w	r3, r0, r8
 8015f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8015f6e:	4313      	orrs	r3, r2
 8015f70:	9304      	str	r3, [sp, #16]
 8015f72:	46a2      	mov	sl, r4
 8015f74:	e7d2      	b.n	8015f1c <_svfiprintf_r+0x9c>
 8015f76:	9b03      	ldr	r3, [sp, #12]
 8015f78:	1d19      	adds	r1, r3, #4
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	9103      	str	r1, [sp, #12]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	bfbb      	ittet	lt
 8015f82:	425b      	neglt	r3, r3
 8015f84:	f042 0202 	orrlt.w	r2, r2, #2
 8015f88:	9307      	strge	r3, [sp, #28]
 8015f8a:	9307      	strlt	r3, [sp, #28]
 8015f8c:	bfb8      	it	lt
 8015f8e:	9204      	strlt	r2, [sp, #16]
 8015f90:	7823      	ldrb	r3, [r4, #0]
 8015f92:	2b2e      	cmp	r3, #46	; 0x2e
 8015f94:	d10c      	bne.n	8015fb0 <_svfiprintf_r+0x130>
 8015f96:	7863      	ldrb	r3, [r4, #1]
 8015f98:	2b2a      	cmp	r3, #42	; 0x2a
 8015f9a:	d135      	bne.n	8016008 <_svfiprintf_r+0x188>
 8015f9c:	9b03      	ldr	r3, [sp, #12]
 8015f9e:	1d1a      	adds	r2, r3, #4
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	9203      	str	r2, [sp, #12]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	bfb8      	it	lt
 8015fa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015fac:	3402      	adds	r4, #2
 8015fae:	9305      	str	r3, [sp, #20]
 8015fb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801607c <_svfiprintf_r+0x1fc>
 8015fb4:	7821      	ldrb	r1, [r4, #0]
 8015fb6:	2203      	movs	r2, #3
 8015fb8:	4650      	mov	r0, sl
 8015fba:	f7ea f929 	bl	8000210 <memchr>
 8015fbe:	b140      	cbz	r0, 8015fd2 <_svfiprintf_r+0x152>
 8015fc0:	2340      	movs	r3, #64	; 0x40
 8015fc2:	eba0 000a 	sub.w	r0, r0, sl
 8015fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8015fca:	9b04      	ldr	r3, [sp, #16]
 8015fcc:	4303      	orrs	r3, r0
 8015fce:	3401      	adds	r4, #1
 8015fd0:	9304      	str	r3, [sp, #16]
 8015fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fd6:	4826      	ldr	r0, [pc, #152]	; (8016070 <_svfiprintf_r+0x1f0>)
 8015fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fdc:	2206      	movs	r2, #6
 8015fde:	f7ea f917 	bl	8000210 <memchr>
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	d038      	beq.n	8016058 <_svfiprintf_r+0x1d8>
 8015fe6:	4b23      	ldr	r3, [pc, #140]	; (8016074 <_svfiprintf_r+0x1f4>)
 8015fe8:	bb1b      	cbnz	r3, 8016032 <_svfiprintf_r+0x1b2>
 8015fea:	9b03      	ldr	r3, [sp, #12]
 8015fec:	3307      	adds	r3, #7
 8015fee:	f023 0307 	bic.w	r3, r3, #7
 8015ff2:	3308      	adds	r3, #8
 8015ff4:	9303      	str	r3, [sp, #12]
 8015ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff8:	4433      	add	r3, r6
 8015ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8015ffc:	e767      	b.n	8015ece <_svfiprintf_r+0x4e>
 8015ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016002:	460c      	mov	r4, r1
 8016004:	2001      	movs	r0, #1
 8016006:	e7a5      	b.n	8015f54 <_svfiprintf_r+0xd4>
 8016008:	2300      	movs	r3, #0
 801600a:	3401      	adds	r4, #1
 801600c:	9305      	str	r3, [sp, #20]
 801600e:	4619      	mov	r1, r3
 8016010:	f04f 0c0a 	mov.w	ip, #10
 8016014:	4620      	mov	r0, r4
 8016016:	f810 2b01 	ldrb.w	r2, [r0], #1
 801601a:	3a30      	subs	r2, #48	; 0x30
 801601c:	2a09      	cmp	r2, #9
 801601e:	d903      	bls.n	8016028 <_svfiprintf_r+0x1a8>
 8016020:	2b00      	cmp	r3, #0
 8016022:	d0c5      	beq.n	8015fb0 <_svfiprintf_r+0x130>
 8016024:	9105      	str	r1, [sp, #20]
 8016026:	e7c3      	b.n	8015fb0 <_svfiprintf_r+0x130>
 8016028:	fb0c 2101 	mla	r1, ip, r1, r2
 801602c:	4604      	mov	r4, r0
 801602e:	2301      	movs	r3, #1
 8016030:	e7f0      	b.n	8016014 <_svfiprintf_r+0x194>
 8016032:	ab03      	add	r3, sp, #12
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	462a      	mov	r2, r5
 8016038:	4b0f      	ldr	r3, [pc, #60]	; (8016078 <_svfiprintf_r+0x1f8>)
 801603a:	a904      	add	r1, sp, #16
 801603c:	4638      	mov	r0, r7
 801603e:	f7fd feab 	bl	8013d98 <_printf_float>
 8016042:	1c42      	adds	r2, r0, #1
 8016044:	4606      	mov	r6, r0
 8016046:	d1d6      	bne.n	8015ff6 <_svfiprintf_r+0x176>
 8016048:	89ab      	ldrh	r3, [r5, #12]
 801604a:	065b      	lsls	r3, r3, #25
 801604c:	f53f af2c 	bmi.w	8015ea8 <_svfiprintf_r+0x28>
 8016050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016052:	b01d      	add	sp, #116	; 0x74
 8016054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016058:	ab03      	add	r3, sp, #12
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	462a      	mov	r2, r5
 801605e:	4b06      	ldr	r3, [pc, #24]	; (8016078 <_svfiprintf_r+0x1f8>)
 8016060:	a904      	add	r1, sp, #16
 8016062:	4638      	mov	r0, r7
 8016064:	f7fe f93c 	bl	80142e0 <_printf_i>
 8016068:	e7eb      	b.n	8016042 <_svfiprintf_r+0x1c2>
 801606a:	bf00      	nop
 801606c:	08017064 	.word	0x08017064
 8016070:	0801706e 	.word	0x0801706e
 8016074:	08013d99 	.word	0x08013d99
 8016078:	08015dc9 	.word	0x08015dc9
 801607c:	0801706a 	.word	0x0801706a

08016080 <_read_r>:
 8016080:	b538      	push	{r3, r4, r5, lr}
 8016082:	4d07      	ldr	r5, [pc, #28]	; (80160a0 <_read_r+0x20>)
 8016084:	4604      	mov	r4, r0
 8016086:	4608      	mov	r0, r1
 8016088:	4611      	mov	r1, r2
 801608a:	2200      	movs	r2, #0
 801608c:	602a      	str	r2, [r5, #0]
 801608e:	461a      	mov	r2, r3
 8016090:	f7ee ff38 	bl	8004f04 <_read>
 8016094:	1c43      	adds	r3, r0, #1
 8016096:	d102      	bne.n	801609e <_read_r+0x1e>
 8016098:	682b      	ldr	r3, [r5, #0]
 801609a:	b103      	cbz	r3, 801609e <_read_r+0x1e>
 801609c:	6023      	str	r3, [r4, #0]
 801609e:	bd38      	pop	{r3, r4, r5, pc}
 80160a0:	200098a0 	.word	0x200098a0

080160a4 <__assert_func>:
 80160a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80160a6:	4614      	mov	r4, r2
 80160a8:	461a      	mov	r2, r3
 80160aa:	4b09      	ldr	r3, [pc, #36]	; (80160d0 <__assert_func+0x2c>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	4605      	mov	r5, r0
 80160b0:	68d8      	ldr	r0, [r3, #12]
 80160b2:	b14c      	cbz	r4, 80160c8 <__assert_func+0x24>
 80160b4:	4b07      	ldr	r3, [pc, #28]	; (80160d4 <__assert_func+0x30>)
 80160b6:	9100      	str	r1, [sp, #0]
 80160b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80160bc:	4906      	ldr	r1, [pc, #24]	; (80160d8 <__assert_func+0x34>)
 80160be:	462b      	mov	r3, r5
 80160c0:	f000 f80e 	bl	80160e0 <fiprintf>
 80160c4:	f000 fa86 	bl	80165d4 <abort>
 80160c8:	4b04      	ldr	r3, [pc, #16]	; (80160dc <__assert_func+0x38>)
 80160ca:	461c      	mov	r4, r3
 80160cc:	e7f3      	b.n	80160b6 <__assert_func+0x12>
 80160ce:	bf00      	nop
 80160d0:	200003b8 	.word	0x200003b8
 80160d4:	08017075 	.word	0x08017075
 80160d8:	08017082 	.word	0x08017082
 80160dc:	080170b0 	.word	0x080170b0

080160e0 <fiprintf>:
 80160e0:	b40e      	push	{r1, r2, r3}
 80160e2:	b503      	push	{r0, r1, lr}
 80160e4:	4601      	mov	r1, r0
 80160e6:	ab03      	add	r3, sp, #12
 80160e8:	4805      	ldr	r0, [pc, #20]	; (8016100 <fiprintf+0x20>)
 80160ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80160ee:	6800      	ldr	r0, [r0, #0]
 80160f0:	9301      	str	r3, [sp, #4]
 80160f2:	f000 f871 	bl	80161d8 <_vfiprintf_r>
 80160f6:	b002      	add	sp, #8
 80160f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80160fc:	b003      	add	sp, #12
 80160fe:	4770      	bx	lr
 8016100:	200003b8 	.word	0x200003b8

08016104 <__ascii_mbtowc>:
 8016104:	b082      	sub	sp, #8
 8016106:	b901      	cbnz	r1, 801610a <__ascii_mbtowc+0x6>
 8016108:	a901      	add	r1, sp, #4
 801610a:	b142      	cbz	r2, 801611e <__ascii_mbtowc+0x1a>
 801610c:	b14b      	cbz	r3, 8016122 <__ascii_mbtowc+0x1e>
 801610e:	7813      	ldrb	r3, [r2, #0]
 8016110:	600b      	str	r3, [r1, #0]
 8016112:	7812      	ldrb	r2, [r2, #0]
 8016114:	1e10      	subs	r0, r2, #0
 8016116:	bf18      	it	ne
 8016118:	2001      	movne	r0, #1
 801611a:	b002      	add	sp, #8
 801611c:	4770      	bx	lr
 801611e:	4610      	mov	r0, r2
 8016120:	e7fb      	b.n	801611a <__ascii_mbtowc+0x16>
 8016122:	f06f 0001 	mvn.w	r0, #1
 8016126:	e7f8      	b.n	801611a <__ascii_mbtowc+0x16>

08016128 <_realloc_r>:
 8016128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801612c:	4680      	mov	r8, r0
 801612e:	4614      	mov	r4, r2
 8016130:	460e      	mov	r6, r1
 8016132:	b921      	cbnz	r1, 801613e <_realloc_r+0x16>
 8016134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016138:	4611      	mov	r1, r2
 801613a:	f7fd bd19 	b.w	8013b70 <_malloc_r>
 801613e:	b92a      	cbnz	r2, 801614c <_realloc_r+0x24>
 8016140:	f7ff fdf6 	bl	8015d30 <_free_r>
 8016144:	4625      	mov	r5, r4
 8016146:	4628      	mov	r0, r5
 8016148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801614c:	f000 faae 	bl	80166ac <_malloc_usable_size_r>
 8016150:	4284      	cmp	r4, r0
 8016152:	4607      	mov	r7, r0
 8016154:	d802      	bhi.n	801615c <_realloc_r+0x34>
 8016156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801615a:	d812      	bhi.n	8016182 <_realloc_r+0x5a>
 801615c:	4621      	mov	r1, r4
 801615e:	4640      	mov	r0, r8
 8016160:	f7fd fd06 	bl	8013b70 <_malloc_r>
 8016164:	4605      	mov	r5, r0
 8016166:	2800      	cmp	r0, #0
 8016168:	d0ed      	beq.n	8016146 <_realloc_r+0x1e>
 801616a:	42bc      	cmp	r4, r7
 801616c:	4622      	mov	r2, r4
 801616e:	4631      	mov	r1, r6
 8016170:	bf28      	it	cs
 8016172:	463a      	movcs	r2, r7
 8016174:	f7fd fcab 	bl	8013ace <memcpy>
 8016178:	4631      	mov	r1, r6
 801617a:	4640      	mov	r0, r8
 801617c:	f7ff fdd8 	bl	8015d30 <_free_r>
 8016180:	e7e1      	b.n	8016146 <_realloc_r+0x1e>
 8016182:	4635      	mov	r5, r6
 8016184:	e7df      	b.n	8016146 <_realloc_r+0x1e>

08016186 <__sfputc_r>:
 8016186:	6893      	ldr	r3, [r2, #8]
 8016188:	3b01      	subs	r3, #1
 801618a:	2b00      	cmp	r3, #0
 801618c:	b410      	push	{r4}
 801618e:	6093      	str	r3, [r2, #8]
 8016190:	da08      	bge.n	80161a4 <__sfputc_r+0x1e>
 8016192:	6994      	ldr	r4, [r2, #24]
 8016194:	42a3      	cmp	r3, r4
 8016196:	db01      	blt.n	801619c <__sfputc_r+0x16>
 8016198:	290a      	cmp	r1, #10
 801619a:	d103      	bne.n	80161a4 <__sfputc_r+0x1e>
 801619c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161a0:	f000 b94a 	b.w	8016438 <__swbuf_r>
 80161a4:	6813      	ldr	r3, [r2, #0]
 80161a6:	1c58      	adds	r0, r3, #1
 80161a8:	6010      	str	r0, [r2, #0]
 80161aa:	7019      	strb	r1, [r3, #0]
 80161ac:	4608      	mov	r0, r1
 80161ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <__sfputs_r>:
 80161b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161b6:	4606      	mov	r6, r0
 80161b8:	460f      	mov	r7, r1
 80161ba:	4614      	mov	r4, r2
 80161bc:	18d5      	adds	r5, r2, r3
 80161be:	42ac      	cmp	r4, r5
 80161c0:	d101      	bne.n	80161c6 <__sfputs_r+0x12>
 80161c2:	2000      	movs	r0, #0
 80161c4:	e007      	b.n	80161d6 <__sfputs_r+0x22>
 80161c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161ca:	463a      	mov	r2, r7
 80161cc:	4630      	mov	r0, r6
 80161ce:	f7ff ffda 	bl	8016186 <__sfputc_r>
 80161d2:	1c43      	adds	r3, r0, #1
 80161d4:	d1f3      	bne.n	80161be <__sfputs_r+0xa>
 80161d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080161d8 <_vfiprintf_r>:
 80161d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161dc:	460d      	mov	r5, r1
 80161de:	b09d      	sub	sp, #116	; 0x74
 80161e0:	4614      	mov	r4, r2
 80161e2:	4698      	mov	r8, r3
 80161e4:	4606      	mov	r6, r0
 80161e6:	b118      	cbz	r0, 80161f0 <_vfiprintf_r+0x18>
 80161e8:	6983      	ldr	r3, [r0, #24]
 80161ea:	b90b      	cbnz	r3, 80161f0 <_vfiprintf_r+0x18>
 80161ec:	f7fd fbaa 	bl	8013944 <__sinit>
 80161f0:	4b89      	ldr	r3, [pc, #548]	; (8016418 <_vfiprintf_r+0x240>)
 80161f2:	429d      	cmp	r5, r3
 80161f4:	d11b      	bne.n	801622e <_vfiprintf_r+0x56>
 80161f6:	6875      	ldr	r5, [r6, #4]
 80161f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161fa:	07d9      	lsls	r1, r3, #31
 80161fc:	d405      	bmi.n	801620a <_vfiprintf_r+0x32>
 80161fe:	89ab      	ldrh	r3, [r5, #12]
 8016200:	059a      	lsls	r2, r3, #22
 8016202:	d402      	bmi.n	801620a <_vfiprintf_r+0x32>
 8016204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016206:	f7fd fc60 	bl	8013aca <__retarget_lock_acquire_recursive>
 801620a:	89ab      	ldrh	r3, [r5, #12]
 801620c:	071b      	lsls	r3, r3, #28
 801620e:	d501      	bpl.n	8016214 <_vfiprintf_r+0x3c>
 8016210:	692b      	ldr	r3, [r5, #16]
 8016212:	b9eb      	cbnz	r3, 8016250 <_vfiprintf_r+0x78>
 8016214:	4629      	mov	r1, r5
 8016216:	4630      	mov	r0, r6
 8016218:	f000 f96e 	bl	80164f8 <__swsetup_r>
 801621c:	b1c0      	cbz	r0, 8016250 <_vfiprintf_r+0x78>
 801621e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016220:	07dc      	lsls	r4, r3, #31
 8016222:	d50e      	bpl.n	8016242 <_vfiprintf_r+0x6a>
 8016224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016228:	b01d      	add	sp, #116	; 0x74
 801622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801622e:	4b7b      	ldr	r3, [pc, #492]	; (801641c <_vfiprintf_r+0x244>)
 8016230:	429d      	cmp	r5, r3
 8016232:	d101      	bne.n	8016238 <_vfiprintf_r+0x60>
 8016234:	68b5      	ldr	r5, [r6, #8]
 8016236:	e7df      	b.n	80161f8 <_vfiprintf_r+0x20>
 8016238:	4b79      	ldr	r3, [pc, #484]	; (8016420 <_vfiprintf_r+0x248>)
 801623a:	429d      	cmp	r5, r3
 801623c:	bf08      	it	eq
 801623e:	68f5      	ldreq	r5, [r6, #12]
 8016240:	e7da      	b.n	80161f8 <_vfiprintf_r+0x20>
 8016242:	89ab      	ldrh	r3, [r5, #12]
 8016244:	0598      	lsls	r0, r3, #22
 8016246:	d4ed      	bmi.n	8016224 <_vfiprintf_r+0x4c>
 8016248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801624a:	f7fd fc3f 	bl	8013acc <__retarget_lock_release_recursive>
 801624e:	e7e9      	b.n	8016224 <_vfiprintf_r+0x4c>
 8016250:	2300      	movs	r3, #0
 8016252:	9309      	str	r3, [sp, #36]	; 0x24
 8016254:	2320      	movs	r3, #32
 8016256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801625a:	f8cd 800c 	str.w	r8, [sp, #12]
 801625e:	2330      	movs	r3, #48	; 0x30
 8016260:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016424 <_vfiprintf_r+0x24c>
 8016264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016268:	f04f 0901 	mov.w	r9, #1
 801626c:	4623      	mov	r3, r4
 801626e:	469a      	mov	sl, r3
 8016270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016274:	b10a      	cbz	r2, 801627a <_vfiprintf_r+0xa2>
 8016276:	2a25      	cmp	r2, #37	; 0x25
 8016278:	d1f9      	bne.n	801626e <_vfiprintf_r+0x96>
 801627a:	ebba 0b04 	subs.w	fp, sl, r4
 801627e:	d00b      	beq.n	8016298 <_vfiprintf_r+0xc0>
 8016280:	465b      	mov	r3, fp
 8016282:	4622      	mov	r2, r4
 8016284:	4629      	mov	r1, r5
 8016286:	4630      	mov	r0, r6
 8016288:	f7ff ff94 	bl	80161b4 <__sfputs_r>
 801628c:	3001      	adds	r0, #1
 801628e:	f000 80aa 	beq.w	80163e6 <_vfiprintf_r+0x20e>
 8016292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016294:	445a      	add	r2, fp
 8016296:	9209      	str	r2, [sp, #36]	; 0x24
 8016298:	f89a 3000 	ldrb.w	r3, [sl]
 801629c:	2b00      	cmp	r3, #0
 801629e:	f000 80a2 	beq.w	80163e6 <_vfiprintf_r+0x20e>
 80162a2:	2300      	movs	r3, #0
 80162a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80162a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162ac:	f10a 0a01 	add.w	sl, sl, #1
 80162b0:	9304      	str	r3, [sp, #16]
 80162b2:	9307      	str	r3, [sp, #28]
 80162b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162b8:	931a      	str	r3, [sp, #104]	; 0x68
 80162ba:	4654      	mov	r4, sl
 80162bc:	2205      	movs	r2, #5
 80162be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162c2:	4858      	ldr	r0, [pc, #352]	; (8016424 <_vfiprintf_r+0x24c>)
 80162c4:	f7e9 ffa4 	bl	8000210 <memchr>
 80162c8:	9a04      	ldr	r2, [sp, #16]
 80162ca:	b9d8      	cbnz	r0, 8016304 <_vfiprintf_r+0x12c>
 80162cc:	06d1      	lsls	r1, r2, #27
 80162ce:	bf44      	itt	mi
 80162d0:	2320      	movmi	r3, #32
 80162d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162d6:	0713      	lsls	r3, r2, #28
 80162d8:	bf44      	itt	mi
 80162da:	232b      	movmi	r3, #43	; 0x2b
 80162dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162e0:	f89a 3000 	ldrb.w	r3, [sl]
 80162e4:	2b2a      	cmp	r3, #42	; 0x2a
 80162e6:	d015      	beq.n	8016314 <_vfiprintf_r+0x13c>
 80162e8:	9a07      	ldr	r2, [sp, #28]
 80162ea:	4654      	mov	r4, sl
 80162ec:	2000      	movs	r0, #0
 80162ee:	f04f 0c0a 	mov.w	ip, #10
 80162f2:	4621      	mov	r1, r4
 80162f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162f8:	3b30      	subs	r3, #48	; 0x30
 80162fa:	2b09      	cmp	r3, #9
 80162fc:	d94e      	bls.n	801639c <_vfiprintf_r+0x1c4>
 80162fe:	b1b0      	cbz	r0, 801632e <_vfiprintf_r+0x156>
 8016300:	9207      	str	r2, [sp, #28]
 8016302:	e014      	b.n	801632e <_vfiprintf_r+0x156>
 8016304:	eba0 0308 	sub.w	r3, r0, r8
 8016308:	fa09 f303 	lsl.w	r3, r9, r3
 801630c:	4313      	orrs	r3, r2
 801630e:	9304      	str	r3, [sp, #16]
 8016310:	46a2      	mov	sl, r4
 8016312:	e7d2      	b.n	80162ba <_vfiprintf_r+0xe2>
 8016314:	9b03      	ldr	r3, [sp, #12]
 8016316:	1d19      	adds	r1, r3, #4
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	9103      	str	r1, [sp, #12]
 801631c:	2b00      	cmp	r3, #0
 801631e:	bfbb      	ittet	lt
 8016320:	425b      	neglt	r3, r3
 8016322:	f042 0202 	orrlt.w	r2, r2, #2
 8016326:	9307      	strge	r3, [sp, #28]
 8016328:	9307      	strlt	r3, [sp, #28]
 801632a:	bfb8      	it	lt
 801632c:	9204      	strlt	r2, [sp, #16]
 801632e:	7823      	ldrb	r3, [r4, #0]
 8016330:	2b2e      	cmp	r3, #46	; 0x2e
 8016332:	d10c      	bne.n	801634e <_vfiprintf_r+0x176>
 8016334:	7863      	ldrb	r3, [r4, #1]
 8016336:	2b2a      	cmp	r3, #42	; 0x2a
 8016338:	d135      	bne.n	80163a6 <_vfiprintf_r+0x1ce>
 801633a:	9b03      	ldr	r3, [sp, #12]
 801633c:	1d1a      	adds	r2, r3, #4
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	9203      	str	r2, [sp, #12]
 8016342:	2b00      	cmp	r3, #0
 8016344:	bfb8      	it	lt
 8016346:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801634a:	3402      	adds	r4, #2
 801634c:	9305      	str	r3, [sp, #20]
 801634e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016434 <_vfiprintf_r+0x25c>
 8016352:	7821      	ldrb	r1, [r4, #0]
 8016354:	2203      	movs	r2, #3
 8016356:	4650      	mov	r0, sl
 8016358:	f7e9 ff5a 	bl	8000210 <memchr>
 801635c:	b140      	cbz	r0, 8016370 <_vfiprintf_r+0x198>
 801635e:	2340      	movs	r3, #64	; 0x40
 8016360:	eba0 000a 	sub.w	r0, r0, sl
 8016364:	fa03 f000 	lsl.w	r0, r3, r0
 8016368:	9b04      	ldr	r3, [sp, #16]
 801636a:	4303      	orrs	r3, r0
 801636c:	3401      	adds	r4, #1
 801636e:	9304      	str	r3, [sp, #16]
 8016370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016374:	482c      	ldr	r0, [pc, #176]	; (8016428 <_vfiprintf_r+0x250>)
 8016376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801637a:	2206      	movs	r2, #6
 801637c:	f7e9 ff48 	bl	8000210 <memchr>
 8016380:	2800      	cmp	r0, #0
 8016382:	d03f      	beq.n	8016404 <_vfiprintf_r+0x22c>
 8016384:	4b29      	ldr	r3, [pc, #164]	; (801642c <_vfiprintf_r+0x254>)
 8016386:	bb1b      	cbnz	r3, 80163d0 <_vfiprintf_r+0x1f8>
 8016388:	9b03      	ldr	r3, [sp, #12]
 801638a:	3307      	adds	r3, #7
 801638c:	f023 0307 	bic.w	r3, r3, #7
 8016390:	3308      	adds	r3, #8
 8016392:	9303      	str	r3, [sp, #12]
 8016394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016396:	443b      	add	r3, r7
 8016398:	9309      	str	r3, [sp, #36]	; 0x24
 801639a:	e767      	b.n	801626c <_vfiprintf_r+0x94>
 801639c:	fb0c 3202 	mla	r2, ip, r2, r3
 80163a0:	460c      	mov	r4, r1
 80163a2:	2001      	movs	r0, #1
 80163a4:	e7a5      	b.n	80162f2 <_vfiprintf_r+0x11a>
 80163a6:	2300      	movs	r3, #0
 80163a8:	3401      	adds	r4, #1
 80163aa:	9305      	str	r3, [sp, #20]
 80163ac:	4619      	mov	r1, r3
 80163ae:	f04f 0c0a 	mov.w	ip, #10
 80163b2:	4620      	mov	r0, r4
 80163b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163b8:	3a30      	subs	r2, #48	; 0x30
 80163ba:	2a09      	cmp	r2, #9
 80163bc:	d903      	bls.n	80163c6 <_vfiprintf_r+0x1ee>
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d0c5      	beq.n	801634e <_vfiprintf_r+0x176>
 80163c2:	9105      	str	r1, [sp, #20]
 80163c4:	e7c3      	b.n	801634e <_vfiprintf_r+0x176>
 80163c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80163ca:	4604      	mov	r4, r0
 80163cc:	2301      	movs	r3, #1
 80163ce:	e7f0      	b.n	80163b2 <_vfiprintf_r+0x1da>
 80163d0:	ab03      	add	r3, sp, #12
 80163d2:	9300      	str	r3, [sp, #0]
 80163d4:	462a      	mov	r2, r5
 80163d6:	4b16      	ldr	r3, [pc, #88]	; (8016430 <_vfiprintf_r+0x258>)
 80163d8:	a904      	add	r1, sp, #16
 80163da:	4630      	mov	r0, r6
 80163dc:	f7fd fcdc 	bl	8013d98 <_printf_float>
 80163e0:	4607      	mov	r7, r0
 80163e2:	1c78      	adds	r0, r7, #1
 80163e4:	d1d6      	bne.n	8016394 <_vfiprintf_r+0x1bc>
 80163e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163e8:	07d9      	lsls	r1, r3, #31
 80163ea:	d405      	bmi.n	80163f8 <_vfiprintf_r+0x220>
 80163ec:	89ab      	ldrh	r3, [r5, #12]
 80163ee:	059a      	lsls	r2, r3, #22
 80163f0:	d402      	bmi.n	80163f8 <_vfiprintf_r+0x220>
 80163f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163f4:	f7fd fb6a 	bl	8013acc <__retarget_lock_release_recursive>
 80163f8:	89ab      	ldrh	r3, [r5, #12]
 80163fa:	065b      	lsls	r3, r3, #25
 80163fc:	f53f af12 	bmi.w	8016224 <_vfiprintf_r+0x4c>
 8016400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016402:	e711      	b.n	8016228 <_vfiprintf_r+0x50>
 8016404:	ab03      	add	r3, sp, #12
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	462a      	mov	r2, r5
 801640a:	4b09      	ldr	r3, [pc, #36]	; (8016430 <_vfiprintf_r+0x258>)
 801640c:	a904      	add	r1, sp, #16
 801640e:	4630      	mov	r0, r6
 8016410:	f7fd ff66 	bl	80142e0 <_printf_i>
 8016414:	e7e4      	b.n	80163e0 <_vfiprintf_r+0x208>
 8016416:	bf00      	nop
 8016418:	08016e00 	.word	0x08016e00
 801641c:	08016e20 	.word	0x08016e20
 8016420:	08016de0 	.word	0x08016de0
 8016424:	08017064 	.word	0x08017064
 8016428:	0801706e 	.word	0x0801706e
 801642c:	08013d99 	.word	0x08013d99
 8016430:	080161b5 	.word	0x080161b5
 8016434:	0801706a 	.word	0x0801706a

08016438 <__swbuf_r>:
 8016438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801643a:	460e      	mov	r6, r1
 801643c:	4614      	mov	r4, r2
 801643e:	4605      	mov	r5, r0
 8016440:	b118      	cbz	r0, 801644a <__swbuf_r+0x12>
 8016442:	6983      	ldr	r3, [r0, #24]
 8016444:	b90b      	cbnz	r3, 801644a <__swbuf_r+0x12>
 8016446:	f7fd fa7d 	bl	8013944 <__sinit>
 801644a:	4b21      	ldr	r3, [pc, #132]	; (80164d0 <__swbuf_r+0x98>)
 801644c:	429c      	cmp	r4, r3
 801644e:	d12b      	bne.n	80164a8 <__swbuf_r+0x70>
 8016450:	686c      	ldr	r4, [r5, #4]
 8016452:	69a3      	ldr	r3, [r4, #24]
 8016454:	60a3      	str	r3, [r4, #8]
 8016456:	89a3      	ldrh	r3, [r4, #12]
 8016458:	071a      	lsls	r2, r3, #28
 801645a:	d52f      	bpl.n	80164bc <__swbuf_r+0x84>
 801645c:	6923      	ldr	r3, [r4, #16]
 801645e:	b36b      	cbz	r3, 80164bc <__swbuf_r+0x84>
 8016460:	6923      	ldr	r3, [r4, #16]
 8016462:	6820      	ldr	r0, [r4, #0]
 8016464:	1ac0      	subs	r0, r0, r3
 8016466:	6963      	ldr	r3, [r4, #20]
 8016468:	b2f6      	uxtb	r6, r6
 801646a:	4283      	cmp	r3, r0
 801646c:	4637      	mov	r7, r6
 801646e:	dc04      	bgt.n	801647a <__swbuf_r+0x42>
 8016470:	4621      	mov	r1, r4
 8016472:	4628      	mov	r0, r5
 8016474:	f7ff f85c 	bl	8015530 <_fflush_r>
 8016478:	bb30      	cbnz	r0, 80164c8 <__swbuf_r+0x90>
 801647a:	68a3      	ldr	r3, [r4, #8]
 801647c:	3b01      	subs	r3, #1
 801647e:	60a3      	str	r3, [r4, #8]
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	1c5a      	adds	r2, r3, #1
 8016484:	6022      	str	r2, [r4, #0]
 8016486:	701e      	strb	r6, [r3, #0]
 8016488:	6963      	ldr	r3, [r4, #20]
 801648a:	3001      	adds	r0, #1
 801648c:	4283      	cmp	r3, r0
 801648e:	d004      	beq.n	801649a <__swbuf_r+0x62>
 8016490:	89a3      	ldrh	r3, [r4, #12]
 8016492:	07db      	lsls	r3, r3, #31
 8016494:	d506      	bpl.n	80164a4 <__swbuf_r+0x6c>
 8016496:	2e0a      	cmp	r6, #10
 8016498:	d104      	bne.n	80164a4 <__swbuf_r+0x6c>
 801649a:	4621      	mov	r1, r4
 801649c:	4628      	mov	r0, r5
 801649e:	f7ff f847 	bl	8015530 <_fflush_r>
 80164a2:	b988      	cbnz	r0, 80164c8 <__swbuf_r+0x90>
 80164a4:	4638      	mov	r0, r7
 80164a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164a8:	4b0a      	ldr	r3, [pc, #40]	; (80164d4 <__swbuf_r+0x9c>)
 80164aa:	429c      	cmp	r4, r3
 80164ac:	d101      	bne.n	80164b2 <__swbuf_r+0x7a>
 80164ae:	68ac      	ldr	r4, [r5, #8]
 80164b0:	e7cf      	b.n	8016452 <__swbuf_r+0x1a>
 80164b2:	4b09      	ldr	r3, [pc, #36]	; (80164d8 <__swbuf_r+0xa0>)
 80164b4:	429c      	cmp	r4, r3
 80164b6:	bf08      	it	eq
 80164b8:	68ec      	ldreq	r4, [r5, #12]
 80164ba:	e7ca      	b.n	8016452 <__swbuf_r+0x1a>
 80164bc:	4621      	mov	r1, r4
 80164be:	4628      	mov	r0, r5
 80164c0:	f000 f81a 	bl	80164f8 <__swsetup_r>
 80164c4:	2800      	cmp	r0, #0
 80164c6:	d0cb      	beq.n	8016460 <__swbuf_r+0x28>
 80164c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80164cc:	e7ea      	b.n	80164a4 <__swbuf_r+0x6c>
 80164ce:	bf00      	nop
 80164d0:	08016e00 	.word	0x08016e00
 80164d4:	08016e20 	.word	0x08016e20
 80164d8:	08016de0 	.word	0x08016de0

080164dc <__ascii_wctomb>:
 80164dc:	b149      	cbz	r1, 80164f2 <__ascii_wctomb+0x16>
 80164de:	2aff      	cmp	r2, #255	; 0xff
 80164e0:	bf85      	ittet	hi
 80164e2:	238a      	movhi	r3, #138	; 0x8a
 80164e4:	6003      	strhi	r3, [r0, #0]
 80164e6:	700a      	strbls	r2, [r1, #0]
 80164e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80164ec:	bf98      	it	ls
 80164ee:	2001      	movls	r0, #1
 80164f0:	4770      	bx	lr
 80164f2:	4608      	mov	r0, r1
 80164f4:	4770      	bx	lr
	...

080164f8 <__swsetup_r>:
 80164f8:	4b32      	ldr	r3, [pc, #200]	; (80165c4 <__swsetup_r+0xcc>)
 80164fa:	b570      	push	{r4, r5, r6, lr}
 80164fc:	681d      	ldr	r5, [r3, #0]
 80164fe:	4606      	mov	r6, r0
 8016500:	460c      	mov	r4, r1
 8016502:	b125      	cbz	r5, 801650e <__swsetup_r+0x16>
 8016504:	69ab      	ldr	r3, [r5, #24]
 8016506:	b913      	cbnz	r3, 801650e <__swsetup_r+0x16>
 8016508:	4628      	mov	r0, r5
 801650a:	f7fd fa1b 	bl	8013944 <__sinit>
 801650e:	4b2e      	ldr	r3, [pc, #184]	; (80165c8 <__swsetup_r+0xd0>)
 8016510:	429c      	cmp	r4, r3
 8016512:	d10f      	bne.n	8016534 <__swsetup_r+0x3c>
 8016514:	686c      	ldr	r4, [r5, #4]
 8016516:	89a3      	ldrh	r3, [r4, #12]
 8016518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801651c:	0719      	lsls	r1, r3, #28
 801651e:	d42c      	bmi.n	801657a <__swsetup_r+0x82>
 8016520:	06dd      	lsls	r5, r3, #27
 8016522:	d411      	bmi.n	8016548 <__swsetup_r+0x50>
 8016524:	2309      	movs	r3, #9
 8016526:	6033      	str	r3, [r6, #0]
 8016528:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801652c:	81a3      	strh	r3, [r4, #12]
 801652e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016532:	e03e      	b.n	80165b2 <__swsetup_r+0xba>
 8016534:	4b25      	ldr	r3, [pc, #148]	; (80165cc <__swsetup_r+0xd4>)
 8016536:	429c      	cmp	r4, r3
 8016538:	d101      	bne.n	801653e <__swsetup_r+0x46>
 801653a:	68ac      	ldr	r4, [r5, #8]
 801653c:	e7eb      	b.n	8016516 <__swsetup_r+0x1e>
 801653e:	4b24      	ldr	r3, [pc, #144]	; (80165d0 <__swsetup_r+0xd8>)
 8016540:	429c      	cmp	r4, r3
 8016542:	bf08      	it	eq
 8016544:	68ec      	ldreq	r4, [r5, #12]
 8016546:	e7e6      	b.n	8016516 <__swsetup_r+0x1e>
 8016548:	0758      	lsls	r0, r3, #29
 801654a:	d512      	bpl.n	8016572 <__swsetup_r+0x7a>
 801654c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801654e:	b141      	cbz	r1, 8016562 <__swsetup_r+0x6a>
 8016550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016554:	4299      	cmp	r1, r3
 8016556:	d002      	beq.n	801655e <__swsetup_r+0x66>
 8016558:	4630      	mov	r0, r6
 801655a:	f7ff fbe9 	bl	8015d30 <_free_r>
 801655e:	2300      	movs	r3, #0
 8016560:	6363      	str	r3, [r4, #52]	; 0x34
 8016562:	89a3      	ldrh	r3, [r4, #12]
 8016564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	2300      	movs	r3, #0
 801656c:	6063      	str	r3, [r4, #4]
 801656e:	6923      	ldr	r3, [r4, #16]
 8016570:	6023      	str	r3, [r4, #0]
 8016572:	89a3      	ldrh	r3, [r4, #12]
 8016574:	f043 0308 	orr.w	r3, r3, #8
 8016578:	81a3      	strh	r3, [r4, #12]
 801657a:	6923      	ldr	r3, [r4, #16]
 801657c:	b94b      	cbnz	r3, 8016592 <__swsetup_r+0x9a>
 801657e:	89a3      	ldrh	r3, [r4, #12]
 8016580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016588:	d003      	beq.n	8016592 <__swsetup_r+0x9a>
 801658a:	4621      	mov	r1, r4
 801658c:	4630      	mov	r0, r6
 801658e:	f000 f84d 	bl	801662c <__smakebuf_r>
 8016592:	89a0      	ldrh	r0, [r4, #12]
 8016594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016598:	f010 0301 	ands.w	r3, r0, #1
 801659c:	d00a      	beq.n	80165b4 <__swsetup_r+0xbc>
 801659e:	2300      	movs	r3, #0
 80165a0:	60a3      	str	r3, [r4, #8]
 80165a2:	6963      	ldr	r3, [r4, #20]
 80165a4:	425b      	negs	r3, r3
 80165a6:	61a3      	str	r3, [r4, #24]
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	b943      	cbnz	r3, 80165be <__swsetup_r+0xc6>
 80165ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80165b0:	d1ba      	bne.n	8016528 <__swsetup_r+0x30>
 80165b2:	bd70      	pop	{r4, r5, r6, pc}
 80165b4:	0781      	lsls	r1, r0, #30
 80165b6:	bf58      	it	pl
 80165b8:	6963      	ldrpl	r3, [r4, #20]
 80165ba:	60a3      	str	r3, [r4, #8]
 80165bc:	e7f4      	b.n	80165a8 <__swsetup_r+0xb0>
 80165be:	2000      	movs	r0, #0
 80165c0:	e7f7      	b.n	80165b2 <__swsetup_r+0xba>
 80165c2:	bf00      	nop
 80165c4:	200003b8 	.word	0x200003b8
 80165c8:	08016e00 	.word	0x08016e00
 80165cc:	08016e20 	.word	0x08016e20
 80165d0:	08016de0 	.word	0x08016de0

080165d4 <abort>:
 80165d4:	b508      	push	{r3, lr}
 80165d6:	2006      	movs	r0, #6
 80165d8:	f000 f898 	bl	801670c <raise>
 80165dc:	2001      	movs	r0, #1
 80165de:	f7ee fc87 	bl	8004ef0 <_exit>

080165e2 <__swhatbuf_r>:
 80165e2:	b570      	push	{r4, r5, r6, lr}
 80165e4:	460e      	mov	r6, r1
 80165e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165ea:	2900      	cmp	r1, #0
 80165ec:	b096      	sub	sp, #88	; 0x58
 80165ee:	4614      	mov	r4, r2
 80165f0:	461d      	mov	r5, r3
 80165f2:	da08      	bge.n	8016606 <__swhatbuf_r+0x24>
 80165f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80165f8:	2200      	movs	r2, #0
 80165fa:	602a      	str	r2, [r5, #0]
 80165fc:	061a      	lsls	r2, r3, #24
 80165fe:	d410      	bmi.n	8016622 <__swhatbuf_r+0x40>
 8016600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016604:	e00e      	b.n	8016624 <__swhatbuf_r+0x42>
 8016606:	466a      	mov	r2, sp
 8016608:	f000 f89c 	bl	8016744 <_fstat_r>
 801660c:	2800      	cmp	r0, #0
 801660e:	dbf1      	blt.n	80165f4 <__swhatbuf_r+0x12>
 8016610:	9a01      	ldr	r2, [sp, #4]
 8016612:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016616:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801661a:	425a      	negs	r2, r3
 801661c:	415a      	adcs	r2, r3
 801661e:	602a      	str	r2, [r5, #0]
 8016620:	e7ee      	b.n	8016600 <__swhatbuf_r+0x1e>
 8016622:	2340      	movs	r3, #64	; 0x40
 8016624:	2000      	movs	r0, #0
 8016626:	6023      	str	r3, [r4, #0]
 8016628:	b016      	add	sp, #88	; 0x58
 801662a:	bd70      	pop	{r4, r5, r6, pc}

0801662c <__smakebuf_r>:
 801662c:	898b      	ldrh	r3, [r1, #12]
 801662e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016630:	079d      	lsls	r5, r3, #30
 8016632:	4606      	mov	r6, r0
 8016634:	460c      	mov	r4, r1
 8016636:	d507      	bpl.n	8016648 <__smakebuf_r+0x1c>
 8016638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801663c:	6023      	str	r3, [r4, #0]
 801663e:	6123      	str	r3, [r4, #16]
 8016640:	2301      	movs	r3, #1
 8016642:	6163      	str	r3, [r4, #20]
 8016644:	b002      	add	sp, #8
 8016646:	bd70      	pop	{r4, r5, r6, pc}
 8016648:	ab01      	add	r3, sp, #4
 801664a:	466a      	mov	r2, sp
 801664c:	f7ff ffc9 	bl	80165e2 <__swhatbuf_r>
 8016650:	9900      	ldr	r1, [sp, #0]
 8016652:	4605      	mov	r5, r0
 8016654:	4630      	mov	r0, r6
 8016656:	f7fd fa8b 	bl	8013b70 <_malloc_r>
 801665a:	b948      	cbnz	r0, 8016670 <__smakebuf_r+0x44>
 801665c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016660:	059a      	lsls	r2, r3, #22
 8016662:	d4ef      	bmi.n	8016644 <__smakebuf_r+0x18>
 8016664:	f023 0303 	bic.w	r3, r3, #3
 8016668:	f043 0302 	orr.w	r3, r3, #2
 801666c:	81a3      	strh	r3, [r4, #12]
 801666e:	e7e3      	b.n	8016638 <__smakebuf_r+0xc>
 8016670:	4b0d      	ldr	r3, [pc, #52]	; (80166a8 <__smakebuf_r+0x7c>)
 8016672:	62b3      	str	r3, [r6, #40]	; 0x28
 8016674:	89a3      	ldrh	r3, [r4, #12]
 8016676:	6020      	str	r0, [r4, #0]
 8016678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801667c:	81a3      	strh	r3, [r4, #12]
 801667e:	9b00      	ldr	r3, [sp, #0]
 8016680:	6163      	str	r3, [r4, #20]
 8016682:	9b01      	ldr	r3, [sp, #4]
 8016684:	6120      	str	r0, [r4, #16]
 8016686:	b15b      	cbz	r3, 80166a0 <__smakebuf_r+0x74>
 8016688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801668c:	4630      	mov	r0, r6
 801668e:	f000 f86b 	bl	8016768 <_isatty_r>
 8016692:	b128      	cbz	r0, 80166a0 <__smakebuf_r+0x74>
 8016694:	89a3      	ldrh	r3, [r4, #12]
 8016696:	f023 0303 	bic.w	r3, r3, #3
 801669a:	f043 0301 	orr.w	r3, r3, #1
 801669e:	81a3      	strh	r3, [r4, #12]
 80166a0:	89a0      	ldrh	r0, [r4, #12]
 80166a2:	4305      	orrs	r5, r0
 80166a4:	81a5      	strh	r5, [r4, #12]
 80166a6:	e7cd      	b.n	8016644 <__smakebuf_r+0x18>
 80166a8:	080138dd 	.word	0x080138dd

080166ac <_malloc_usable_size_r>:
 80166ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166b0:	1f18      	subs	r0, r3, #4
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	bfbc      	itt	lt
 80166b6:	580b      	ldrlt	r3, [r1, r0]
 80166b8:	18c0      	addlt	r0, r0, r3
 80166ba:	4770      	bx	lr

080166bc <_raise_r>:
 80166bc:	291f      	cmp	r1, #31
 80166be:	b538      	push	{r3, r4, r5, lr}
 80166c0:	4604      	mov	r4, r0
 80166c2:	460d      	mov	r5, r1
 80166c4:	d904      	bls.n	80166d0 <_raise_r+0x14>
 80166c6:	2316      	movs	r3, #22
 80166c8:	6003      	str	r3, [r0, #0]
 80166ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166ce:	bd38      	pop	{r3, r4, r5, pc}
 80166d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80166d2:	b112      	cbz	r2, 80166da <_raise_r+0x1e>
 80166d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166d8:	b94b      	cbnz	r3, 80166ee <_raise_r+0x32>
 80166da:	4620      	mov	r0, r4
 80166dc:	f000 f830 	bl	8016740 <_getpid_r>
 80166e0:	462a      	mov	r2, r5
 80166e2:	4601      	mov	r1, r0
 80166e4:	4620      	mov	r0, r4
 80166e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166ea:	f000 b817 	b.w	801671c <_kill_r>
 80166ee:	2b01      	cmp	r3, #1
 80166f0:	d00a      	beq.n	8016708 <_raise_r+0x4c>
 80166f2:	1c59      	adds	r1, r3, #1
 80166f4:	d103      	bne.n	80166fe <_raise_r+0x42>
 80166f6:	2316      	movs	r3, #22
 80166f8:	6003      	str	r3, [r0, #0]
 80166fa:	2001      	movs	r0, #1
 80166fc:	e7e7      	b.n	80166ce <_raise_r+0x12>
 80166fe:	2400      	movs	r4, #0
 8016700:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016704:	4628      	mov	r0, r5
 8016706:	4798      	blx	r3
 8016708:	2000      	movs	r0, #0
 801670a:	e7e0      	b.n	80166ce <_raise_r+0x12>

0801670c <raise>:
 801670c:	4b02      	ldr	r3, [pc, #8]	; (8016718 <raise+0xc>)
 801670e:	4601      	mov	r1, r0
 8016710:	6818      	ldr	r0, [r3, #0]
 8016712:	f7ff bfd3 	b.w	80166bc <_raise_r>
 8016716:	bf00      	nop
 8016718:	200003b8 	.word	0x200003b8

0801671c <_kill_r>:
 801671c:	b538      	push	{r3, r4, r5, lr}
 801671e:	4d07      	ldr	r5, [pc, #28]	; (801673c <_kill_r+0x20>)
 8016720:	2300      	movs	r3, #0
 8016722:	4604      	mov	r4, r0
 8016724:	4608      	mov	r0, r1
 8016726:	4611      	mov	r1, r2
 8016728:	602b      	str	r3, [r5, #0]
 801672a:	f7ee fbd1 	bl	8004ed0 <_kill>
 801672e:	1c43      	adds	r3, r0, #1
 8016730:	d102      	bne.n	8016738 <_kill_r+0x1c>
 8016732:	682b      	ldr	r3, [r5, #0]
 8016734:	b103      	cbz	r3, 8016738 <_kill_r+0x1c>
 8016736:	6023      	str	r3, [r4, #0]
 8016738:	bd38      	pop	{r3, r4, r5, pc}
 801673a:	bf00      	nop
 801673c:	200098a0 	.word	0x200098a0

08016740 <_getpid_r>:
 8016740:	f7ee bbbe 	b.w	8004ec0 <_getpid>

08016744 <_fstat_r>:
 8016744:	b538      	push	{r3, r4, r5, lr}
 8016746:	4d07      	ldr	r5, [pc, #28]	; (8016764 <_fstat_r+0x20>)
 8016748:	2300      	movs	r3, #0
 801674a:	4604      	mov	r4, r0
 801674c:	4608      	mov	r0, r1
 801674e:	4611      	mov	r1, r2
 8016750:	602b      	str	r3, [r5, #0]
 8016752:	f7ee fc1c 	bl	8004f8e <_fstat>
 8016756:	1c43      	adds	r3, r0, #1
 8016758:	d102      	bne.n	8016760 <_fstat_r+0x1c>
 801675a:	682b      	ldr	r3, [r5, #0]
 801675c:	b103      	cbz	r3, 8016760 <_fstat_r+0x1c>
 801675e:	6023      	str	r3, [r4, #0]
 8016760:	bd38      	pop	{r3, r4, r5, pc}
 8016762:	bf00      	nop
 8016764:	200098a0 	.word	0x200098a0

08016768 <_isatty_r>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	4d06      	ldr	r5, [pc, #24]	; (8016784 <_isatty_r+0x1c>)
 801676c:	2300      	movs	r3, #0
 801676e:	4604      	mov	r4, r0
 8016770:	4608      	mov	r0, r1
 8016772:	602b      	str	r3, [r5, #0]
 8016774:	f7ee fc1b 	bl	8004fae <_isatty>
 8016778:	1c43      	adds	r3, r0, #1
 801677a:	d102      	bne.n	8016782 <_isatty_r+0x1a>
 801677c:	682b      	ldr	r3, [r5, #0]
 801677e:	b103      	cbz	r3, 8016782 <_isatty_r+0x1a>
 8016780:	6023      	str	r3, [r4, #0]
 8016782:	bd38      	pop	{r3, r4, r5, pc}
 8016784:	200098a0 	.word	0x200098a0

08016788 <_init>:
 8016788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801678a:	bf00      	nop
 801678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801678e:	bc08      	pop	{r3}
 8016790:	469e      	mov	lr, r3
 8016792:	4770      	bx	lr

08016794 <_fini>:
 8016794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016796:	bf00      	nop
 8016798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801679a:	bc08      	pop	{r3}
 801679c:	469e      	mov	lr, r3
 801679e:	4770      	bx	lr
