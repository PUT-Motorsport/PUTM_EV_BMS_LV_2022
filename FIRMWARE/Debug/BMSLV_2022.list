
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016540  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  08016700  08016700  00026700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170b4  080170b4  00030580  2**0
                  CONTENTS
  4 .ARM          00000000  080170b4  080170b4  00030580  2**0
                  CONTENTS
  5 .preinit_array 00000000  080170b4  080170b4  00030580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080170b4  080170b4  000270b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080170c4  080170c4  000270c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  080170c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093f4  20000580  08017648  00030580  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009974  08017648  00039974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00048d3d  00000000  00000000  000305f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000088a1  00000000  00000000  00079330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b48  00000000  00000000  00081bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020fd  00000000  00000000  00084720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003b719  00000000  00000000  0008681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a80f  00000000  00000000  000c1f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014f6a8  00000000  00000000  000fc745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c90c  00000000  00000000  0024bdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  002586fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000580 	.word	0x20000580
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080166e8 	.word	0x080166e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000584 	.word	0x20000584
 80001fc:	080166e8 	.word	0x080166e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <_Z20discharge_cells_taili>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int i){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(5 == i || 6 == i)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d002      	beq.n	8000bec <_Z20discharge_cells_taili+0x14>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b06      	cmp	r3, #6
 8000bea:	d102      	bne.n	8000bf2 <_Z20discharge_cells_taili+0x1a>
		return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	e000      	b.n	8000bf4 <_Z20discharge_cells_taili+0x1c>
	else
		return i;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d826      	bhi.n	8000c60 <_Z18set_discharge_cellRhRi+0x60>
	{
		data.charging.cell_discharge[i] = true;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffcc 	bl	8000bd8 <_Z20discharge_cells_taili>
 8000c40:	4602      	mov	r2, r0
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000c4e:	f004 fa95 	bl	800517c <HAL_GetTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000c58:	3310      	adds	r3, #16
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c5c:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20001478 	.word	0x20001478

08000c6c <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d827      	bhi.n	8000cd6 <_Z22set_discharge_cell_maxRhRiRb+0x6a>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000c88:	7c9b      	ldrb	r3, [r3, #18]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000ca4:	7c9b      	ldrb	r3, [r3, #18]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff91 	bl	8000bd8 <_Z20discharge_cells_taili>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000cc4:	f004 fa5a 	bl	800517c <HAL_GetTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cce:	3310      	adds	r3, #16
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cd2:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001478 	.word	0x20001478

08000ce4 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75bb      	strb	r3, [r7, #22]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	757b      	strb	r3, [r7, #21]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73bb      	strb	r3, [r7, #14]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	e03b      	b.n	8000d80 <_Z15balance_controlv+0x9c>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000d08:	4b9e      	ldr	r3, [pc, #632]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d0a:	8b9b      	ldrh	r3, [r3, #28]
 8000d0c:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d807      	bhi.n	8000d24 <_Z15balance_controlv+0x40>
 8000d14:	4b9b      	ldr	r3, [pc, #620]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d16:	8b9b      	ldrh	r3, [r3, #28]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b9a      	ldr	r3, [pc, #616]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d1c:	8b5b      	ldrh	r3, [r3, #26]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b32      	cmp	r3, #50	; 0x32
 8000d22:	dd01      	ble.n	8000d28 <_Z15balance_controlv+0x44>
		{
			max_voltage_discharge_activation= true;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000d28:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d2a:	8b9b      	ldrh	r3, [r3, #28]
 8000d2c:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d901      	bls.n	8000d38 <_Z15balance_controlv+0x54>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000d34:	2301      	movs	r3, #1
 8000d36:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000d38:	4a92      	ldr	r2, [pc, #584]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d40:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d902      	bls.n	8000d4e <_Z15balance_controlv+0x6a>
		{
			charged_cells++;
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000d4e:	4a8d      	ldr	r2, [pc, #564]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d56:	f24a 32c0 	movw	r2, #41920	; 0xa3c0
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d902      	bls.n	8000d64 <_Z15balance_controlv+0x80>
		{
			nearly_charged_cells++;
 8000d5e:	7dbb      	ldrb	r3, [r7, #22]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000d64:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6c:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d902      	bls.n	8000d7a <_Z15balance_controlv+0x96>
		{
			cell_overcharged++;
 8000d74:	7d7b      	ldrb	r3, [r7, #21]
 8000d76:	3301      	adds	r3, #1
 8000d78:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2b05      	cmp	r3, #5
 8000d84:	d9c0      	bls.n	8000d08 <_Z15balance_controlv+0x24>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d926      	bls.n	8000dda <_Z15balance_controlv+0xf6>
 8000d8c:	4b7d      	ldr	r3, [pc, #500]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d8e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000d92:	eef0 7ae7 	vabs.f32	s15, s15
 8000d96:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8000f88 <_Z15balance_controlv+0x2a4>
 8000d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d51a      	bpl.n	8000dda <_Z15balance_controlv+0xf6>
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d117      	bne.n	8000dda <_Z15balance_controlv+0xf6>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2104      	movs	r1, #4
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f007 fac5 	bl	8008340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	4873      	ldr	r0, [pc, #460]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000dbe:	f007 fabf 	bl	8008340 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000dc2:	4873      	ldr	r0, [pc, #460]	; (8000f90 <_Z15balance_controlv+0x2ac>)
 8000dc4:	f003 fa5c 	bl	8004280 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000dc8:	4b6e      	ldr	r3, [pc, #440]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000dd8:	e043      	b.n	8000e62 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1 && data.charging.discharge_activation == 0)
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d919      	bls.n	8000e14 <_Z15balance_controlv+0x130>
 8000de0:	4b68      	ldr	r3, [pc, #416]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000de2:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d114      	bne.n	8000e14 <_Z15balance_controlv+0x130>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2104      	movs	r1, #4
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f007 faa5 	bl	8008340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	4863      	ldr	r0, [pc, #396]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000dfe:	f007 fa9f 	bl	8008340 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000e12:	e026      	b.n	8000e62 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch on
	else if(!data.charging.charger_plugged && nearly_charged_cells < 6 && cell_overcharged == 0 && data.charging.discharge_activation == 0)// && acuState == 0
 8000e14:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e16:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d01e      	beq.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d81b      	bhi.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e2a:	7d7b      	ldrb	r3, [r7, #21]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d118      	bne.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e32:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d113      	bne.n	8000e62 <_Z15balance_controlv+0x17e>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f007 fa7d 	bl	8008340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	484f      	ldr	r0, [pc, #316]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000e4e:	f007 fa77 	bl	8008340 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 1;
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state && fabsf(data.current.value) > CHARGING_CUTOFF_CURRENT ) //charging on
 8000e62:	4b48      	ldr	r3, [pc, #288]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e64:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d151      	bne.n	8000f10 <_Z15balance_controlv+0x22c>
 8000e6c:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e6e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000e72:	eef0 7ae7 	vabs.f32	s15, s15
 8000e76:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000f88 <_Z15balance_controlv+0x2a4>
 8000e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd45      	ble.n	8000f10 <_Z15balance_controlv+0x22c>
	{
		if(false == data.charging.discharge_activation)
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e86:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d174      	bne.n	8000f78 <_Z15balance_controlv+0x294>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	e039      	b.n	8000f08 <_Z15balance_controlv+0x224>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d109      	bne.n	8000eae <_Z15balance_controlv+0x1ca>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000e9a:	f107 020e 	add.w	r2, r7, #14
 8000e9e:	f107 0108 	add.w	r1, r7, #8
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fee0 	bl	8000c6c <_Z22set_discharge_cell_maxRhRiRb>
 8000eac:	e029      	b.n	8000f02 <_Z15balance_controlv+0x21e>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb6:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d908      	bls.n	8000ed0 <_Z15balance_controlv+0x1ec>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	f107 030f 	add.w	r3, r7, #15
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe99 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000ece:	e018      	b.n	8000f02 <_Z15balance_controlv+0x21e>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000edc:	8b5b      	ldrh	r3, [r3, #26]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b32      	cmp	r3, #50	; 0x32
 8000ee2:	dd08      	ble.n	8000ef6 <_Z15balance_controlv+0x212>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	f107 030f 	add.w	r3, r7, #15
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe86 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000ef4:	e005      	b.n	8000f02 <_Z15balance_controlv+0x21e>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000efa:	4413      	add	r3, r2
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	ddc2      	ble.n	8000e94 <_Z15balance_controlv+0x1b0>
			}
		}
	}
 8000f0e:	e033      	b.n	8000f78 <_Z15balance_controlv+0x294>
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(not  data.charging.discharge_activation)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000f12:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d02c      	beq.n	8000f7a <_Z15balance_controlv+0x296>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e024      	b.n	8000f70 <_Z15balance_controlv+0x28c>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <_Z15balance_controlv+0x25a>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000f2c:	f107 020d 	add.w	r2, r7, #13
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f107 030f 	add.w	r3, r7, #15
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe98 	bl	8000c6c <_Z22set_discharge_cell_maxRhRiRb>
 8000f3c:	e015      	b.n	8000f6a <_Z15balance_controlv+0x286>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f46:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d907      	bls.n	8000f5e <_Z15balance_controlv+0x27a>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	f107 030f 	add.w	r3, r7, #15
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe52 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000f5c:	e005      	b.n	8000f6a <_Z15balance_controlv+0x286>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	ddd7      	ble.n	8000f26 <_Z15balance_controlv+0x242>
			}
		}
	}
}
 8000f76:	e000      	b.n	8000f7a <_Z15balance_controlv+0x296>
	}
 8000f78:	bf00      	nop
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20001478 	.word	0x20001478
 8000f88:	3e99999a 	.word	0x3e99999a
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	2000164c 	.word	0x2000164c

08000f94 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000f9c:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d117      	bne.n	8000fd4 <_Z31balance_activation_deactivationv+0x40>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	e00e      	b.n	8000fc8 <_Z31balance_activation_deactivationv+0x34>
		{
			if(true == data.charging.cell_discharge[i])
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d103      	bne.n	8000fc2 <_Z31balance_activation_deactivationv+0x2e>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 8000fba:	4920      	ldr	r1, [pc, #128]	; (800103c <_Z31balance_activation_deactivationv+0xa8>)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 fdf9 	bl	8002bb4 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	dded      	ble.n	8000faa <_Z31balance_activation_deactivationv+0x16>
			}
		}
		balance_deactivation_flag = true;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <_Z31balance_activation_deactivationv+0xac>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
	}
	if(data.charging.discharge_tick_end <= HAL_GetTick() && balance_deactivation_flag)
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000fd6:	f8d3 429c 	ldr.w	r4, [r3, #668]	; 0x29c
 8000fda:	f004 f8cf 	bl	800517c <HAL_GetTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	d805      	bhi.n	8000ff0 <_Z31balance_activation_deactivationv+0x5c>
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <_Z31balance_activation_deactivationv+0xac>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <_Z31balance_activation_deactivationv+0x5c>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <_Z31balance_activation_deactivationv+0x5e>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01b      	beq.n	800102e <_Z31balance_activation_deactivationv+0x9a>
	{
		balance_deactivation_flag = false;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <_Z31balance_activation_deactivationv+0xac>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
		data.charging.discharge_activation = 0;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	e009      	b.n	800101e <_Z31balance_activation_deactivationv+0x8a>
		{
			data.charging.cell_discharge[i] = false;
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b05      	cmp	r3, #5
 8001022:	ddf2      	ble.n	800100a <_Z31balance_activation_deactivationv+0x76>
		}
		LTC_turn_off_discharge();
 8001024:	f001 feb6 	bl	8002d94 <_Z22LTC_turn_off_dischargev>
		tick_counter = 0; // time to wait for proper voltage values
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <_Z31balance_activation_deactivationv+0xb0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	}
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	20001478 	.word	0x20001478
 800103c:	20001708 	.word	0x20001708
 8001040:	2000059c 	.word	0x2000059c
 8001044:	200005a0 	.word	0x200005a0

08001048 <_Z22start_balance_functionPv>:



void start_balance_function(void *argument){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001050:	2104      	movs	r1, #4
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <_Z22start_balance_functionPv+0x74>)
 8001054:	f007 f95c 	bl	8008310 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <_Z22start_balance_functionPv+0x78>)
 8001066:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for(;;){
		osDelay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f00f f81c 	bl	80100a8 <osDelay>
		//balance test on cell 0
		//data.charging.cell_discharge[0]=true;
		//LTC_turn_on_discharge(0, data.charging.cell_discharge);
		tick_counter++;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <_Z22start_balance_functionPv+0x7c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <_Z22start_balance_functionPv+0x7c>)
 8001078:	6013      	str	r3, [r2, #0]
		if(tick_counter > BALANCE_TICKS_AFTER_BALANCE){
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <_Z22start_balance_functionPv+0x7c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b1e      	cmp	r3, #30
 8001080:	d9f3      	bls.n	800106a <_Z22start_balance_functionPv+0x22>
			if(!data.charging.charger_plugged) //charger is plugged
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <_Z22start_balance_functionPv+0x78>)
 8001084:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <_Z22start_balance_functionPv+0x60>
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <_Z22start_balance_functionPv+0x80>)
 800109a:	f007 f951 	bl	8008340 <HAL_GPIO_WritePin>

				balance_control();
 800109e:	f7ff fe21 	bl	8000ce4 <_Z15balance_controlv>
				balance_activation_deactivation();
 80010a2:	f7ff ff77 	bl	8000f94 <_Z31balance_activation_deactivationv>
 80010a6:	e7e0      	b.n	800106a <_Z22start_balance_functionPv+0x22>

			}
			else	//charger is unplugged
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <_Z22start_balance_functionPv+0x80>)
 80010b0:	f007 f946 	bl	8008340 <HAL_GPIO_WritePin>
				balance_activation_deactivation();
 80010b4:	f7ff ff6e 	bl	8000f94 <_Z31balance_activation_deactivationv>
		osDelay(100);
 80010b8:	e7d7      	b.n	800106a <_Z22start_balance_functionPv+0x22>
 80010ba:	bf00      	nop
 80010bc:	48000400 	.word	0x48000400
 80010c0:	20001478 	.word	0x20001478
 80010c4:	200005a0 	.word	0x200005a0
 80010c8:	48000800 	.word	0x48000800

080010cc <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	601a      	str	r2, [r3, #0]
    {
    }
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
    {
    }
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	461a      	mov	r2, r3
 8001138:	2300      	movs	r3, #0
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	6053      	str	r3, [r2, #4]
 800113e:	6093      	str	r3, [r2, #8]
 8001140:	60d3      	str	r3, [r2, #12]
 8001142:	6113      	str	r3, [r2, #16]
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	331c      	adds	r3, #28
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	331c      	adds	r3, #28
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f006 f88b 	bl	8007276 <HAL_CAN_GetRxMessage>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
    this->status =
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	791a      	ldrb	r2, [r3, #4]
 8001180:	795b      	ldrb	r3, [r3, #5]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	4313      	orrs	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 fcee 	bl	8001b8c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 80011b0:	6178      	str	r0, [r7, #20]
 80011b2:	6938      	ldr	r0, [r7, #16]
 80011b4:	f000 fcf6 	bl	8001ba4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	e01e      	b.n	80011fa <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffd5 	bl	8001174 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x5c>
        device->set_data(m);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4798      	blx	r3
        return true;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e007      	b.n	8001204 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3304      	adds	r3, #4
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d1dc      	bne.n	80011bc <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x24>
      }
    }
    return false;
 8001202:	2300      	movs	r3, #0
  }
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff83 	bl	8001128 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8001222:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4619      	mov	r1, r3
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001232:	f7ff ffb1 	bl	8001198 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8001236:	bf00      	nop
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000000 	.word	0x20000000

08001244 <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 800124e:	230a      	movs	r3, #10
 8001250:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800126a:	2301      	movs	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 800126e:	230a      	movs	r3, #10
 8001270:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <_Z8can_initv+0x50>)
 8001278:	f005 fe1f 	bl	8006eba <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800127c:	2102      	movs	r1, #2
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <_Z8can_initv+0x50>)
 8001280:	f006 f90b 	bl	800749a <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <_Z8can_initv+0x50>)
 8001286:	f005 fee2 	bl	800704e <HAL_CAN_Start>

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20001aac 	.word	0x20001aac

08001298 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	; 0x40
 800129c:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 8> errors_vector;
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fc99 	bl	8001bd8 <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>

	for(auto& error : error_conditions){
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <_Z11error_checkv+0xcc>)
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <_Z11error_checkv+0xcc>)
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <_Z11error_checkv+0xd0>)
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
 80012b2:	e040      	b.n	8001336 <_Z11error_checkv+0x9e>
 80012b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
		if(error.min <= error.value && error.value <= error.max){
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80012be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d825      	bhi.n	800131a <_Z11error_checkv+0x82>
 80012ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d81a      	bhi.n	800131a <_Z11error_checkv+0x82>
			errors_vector.emplace_back(error.error);
 80012e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fc99 	bl	8001c22 <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	7d1a      	ldrb	r2, [r3, #20]
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <_Z11error_checkv+0xd4>)
 80012f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
			if(false == error.flag)
 80012fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fc:	7f1b      	ldrb	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <_Z11error_checkv+0x98>
			{
				error.timer = HAL_GetTick() + error.error_time;
 8001302:	f003 ff3b 	bl	800517c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	441a      	add	r2, r3
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	619a      	str	r2, [r3, #24]
				error.flag = true;
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	2201      	movs	r2, #1
 8001316:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 8001318:	e00a      	b.n	8001330 <_Z11error_checkv+0x98>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 800131a:	f003 ff2f 	bl	800517c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	441a      	add	r2, r3
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	619a      	str	r2, [r3, #24]
			error.flag = false;
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	2200      	movs	r2, #0
 800132e:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001332:	3320      	adds	r3, #32
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133a:	429a      	cmp	r2, r3
 800133c:	d1ba      	bne.n	80012b4 <_Z11error_checkv+0x1c>
		}
	}

	if(errors_vector.empty())
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fc89 	bl	8001c58 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <_Z11error_checkv+0xd4>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}
}
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fc52 	bl	8001c00 <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>
 800135c:	3740      	adds	r7, #64	; 0x40
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200005c4 	.word	0x200005c4
 8001368:	200006c4 	.word	0x200006c4
 800136c:	20001478 	.word	0x20001478

08001370 <_Z13error_executev>:

void error_execute(){
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 8001376:	f003 ff01 	bl	800517c <HAL_GetTick>
 800137a:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <_Z13error_executev+0x9c>)
 800137e:	699c      	ldr	r4, [r3, #24]
 8001380:	f003 fefc 	bl	800517c <HAL_GetTick>
 8001384:	4603      	mov	r3, r0
 8001386:	429c      	cmp	r4, r3
 8001388:	bf94      	ite	ls
 800138a:	2301      	movls	r3, #1
 800138c:	2300      	movhi	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00a      	beq.n	80013aa <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f006 ffd0 	bl	8008340 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013a0:	2101      	movs	r1, #1
 80013a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a6:	f008 f9a3 	bl	80096f0 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 8; i++){
 80013aa:	2303      	movs	r3, #3
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e018      	b.n	80013e2 <_Z13error_executev+0x72>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 80013b0:	4a16      	ldr	r2, [pc, #88]	; (800140c <_Z13error_executev+0x9c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	015b      	lsls	r3, r3, #5
 80013b6:	4413      	add	r3, r2
 80013b8:	3318      	adds	r3, #24
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	f003 fede 	bl	800517c <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	429c      	cmp	r4, r3
 80013c4:	bf94      	ite	ls
 80013c6:	2301      	movls	r3, #1
 80013c8:	2300      	movhi	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <_Z13error_executev+0x6c>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f006 ffb2 	bl	8008340 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 8; i++){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	d9e3      	bls.n	80013b0 <_Z13error_executev+0x40>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 80013e8:	2104      	movs	r1, #4
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f006 ff8f 	bl	8008310 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <_Z13error_executev+0xa0>)
 8001400:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	200005c4 	.word	0x200005c4
 8001410:	20001478 	.word	0x20001478

08001414 <_Z11serialPrintv>:

void serialPrint()
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b08d      	sub	sp, #52	; 0x34
 8001418:	af02      	add	r7, sp, #8
	// FIXME count chars
	// or use {fmt}
	static char tab[3500];
	uint16_t n=0;
 800141a:	2300      	movs	r3, #0
 800141c:	84fb      	strh	r3, [r7, #38]	; 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	48ab      	ldr	r0, [pc, #684]	; (80016d4 <_Z11serialPrintv+0x2c0>)
 8001426:	f00a f87b 	bl	800b520 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	48a8      	ldr	r0, [pc, #672]	; (80016d4 <_Z11serialPrintv+0x2c0>)
 8001434:	f00a f95e 	bl	800b6f4 <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10'000.0;
 8001438:	4ba7      	ldr	r3, [pc, #668]	; (80016d8 <_Z11serialPrintv+0x2c4>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001444:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80016dc <_Z11serialPrintv+0x2c8>
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8001450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001452:	4aa3      	ldr	r2, [pc, #652]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001454:	1898      	adds	r0, r3, r2
 8001456:	783b      	ldrb	r3, [r7, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	4619      	mov	r1, r3
 800145e:	78bb      	ldrb	r3, [r7, #2]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	460b      	mov	r3, r1
 8001464:	499f      	ldr	r1, [pc, #636]	; (80016e4 <_Z11serialPrintv+0x2d0>)
 8001466:	f012 ff8b 	bl	8014380 <siprintf>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001470:	4413      	add	r3, r2
 8001472:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 8001474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001476:	4a9a      	ldr	r2, [pc, #616]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001478:	4413      	add	r3, r2
 800147a:	4a97      	ldr	r2, [pc, #604]	; (80016d8 <_Z11serialPrintv+0x2c4>)
 800147c:	f892 22a0 	ldrb.w	r2, [r2, #672]	; 0x2a0
 8001480:	4999      	ldr	r1, [pc, #612]	; (80016e8 <_Z11serialPrintv+0x2d4>)
 8001482:	4618      	mov	r0, r3
 8001484:	f012 ff7c 	bl	8014380 <siprintf>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148e:	4413      	add	r3, r2
 8001490:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001494:	4a92      	ldr	r2, [pc, #584]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001496:	4413      	add	r3, r2
 8001498:	4994      	ldr	r1, [pc, #592]	; (80016ec <_Z11serialPrintv+0x2d8>)
 800149a:	4618      	mov	r0, r3
 800149c:	f012 ff70 	bl	8014380 <siprintf>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a6:	4413      	add	r3, r2
 80014a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ac:	4a8c      	ldr	r2, [pc, #560]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80014ae:	4413      	add	r3, r2
 80014b0:	498f      	ldr	r1, [pc, #572]	; (80016f0 <_Z11serialPrintv+0x2dc>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f012 ff64 	bl	8014380 <siprintf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014be:	4413      	add	r3, r2
 80014c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c4:	4a86      	ldr	r2, [pc, #536]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80014c6:	4413      	add	r3, r2
 80014c8:	4988      	ldr	r1, [pc, #544]	; (80016ec <_Z11serialPrintv+0x2d8>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f012 ff58 	bl	8014380 <siprintf>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d6:	4413      	add	r3, r2
 80014d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "0- all good");
 80014da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014dc:	4a80      	ldr	r2, [pc, #512]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80014de:	4413      	add	r3, r2
 80014e0:	4984      	ldr	r1, [pc, #528]	; (80016f4 <_Z11serialPrintv+0x2e0>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f012 ff4c 	bl	8014380 <siprintf>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ee:	4413      	add	r3, r2
 80014f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f4:	4a7a      	ldr	r2, [pc, #488]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80014f6:	4413      	add	r3, r2
 80014f8:	497c      	ldr	r1, [pc, #496]	; (80016ec <_Z11serialPrintv+0x2d8>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f012 ff40 	bl	8014380 <siprintf>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001506:	4413      	add	r3, r2
 8001508:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "1- charging");
 800150a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800150c:	4a74      	ldr	r2, [pc, #464]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800150e:	4413      	add	r3, r2
 8001510:	4979      	ldr	r1, [pc, #484]	; (80016f8 <_Z11serialPrintv+0x2e4>)
 8001512:	4618      	mov	r0, r3
 8001514:	f012 ff34 	bl	8014380 <siprintf>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151e:	4413      	add	r3, r2
 8001520:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001524:	4a6e      	ldr	r2, [pc, #440]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001526:	4413      	add	r3, r2
 8001528:	4970      	ldr	r1, [pc, #448]	; (80016ec <_Z11serialPrintv+0x2d8>)
 800152a:	4618      	mov	r0, r3
 800152c:	f012 ff28 	bl	8014380 <siprintf>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001536:	4413      	add	r3, r2
 8001538:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 800153a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800153c:	4a68      	ldr	r2, [pc, #416]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800153e:	4413      	add	r3, r2
 8001540:	496e      	ldr	r1, [pc, #440]	; (80016fc <_Z11serialPrintv+0x2e8>)
 8001542:	4618      	mov	r0, r3
 8001544:	f012 ff1c 	bl	8014380 <siprintf>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800154e:	4413      	add	r3, r2
 8001550:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001554:	4a62      	ldr	r2, [pc, #392]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001556:	4413      	add	r3, r2
 8001558:	4964      	ldr	r1, [pc, #400]	; (80016ec <_Z11serialPrintv+0x2d8>)
 800155a:	4618      	mov	r0, r3
 800155c:	f012 ff10 	bl	8014380 <siprintf>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001566:	4413      	add	r3, r2
 8001568:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 800156a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156c:	4a5c      	ldr	r2, [pc, #368]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800156e:	4413      	add	r3, r2
 8001570:	4963      	ldr	r1, [pc, #396]	; (8001700 <_Z11serialPrintv+0x2ec>)
 8001572:	4618      	mov	r0, r3
 8001574:	f012 ff04 	bl	8014380 <siprintf>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800157e:	4413      	add	r3, r2
 8001580:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001582:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001584:	4a56      	ldr	r2, [pc, #344]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001586:	4413      	add	r3, r2
 8001588:	4958      	ldr	r1, [pc, #352]	; (80016ec <_Z11serialPrintv+0x2d8>)
 800158a:	4618      	mov	r0, r3
 800158c:	f012 fef8 	bl	8014380 <siprintf>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001596:	4413      	add	r3, r2
 8001598:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 800159a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159c:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800159e:	4413      	add	r3, r2
 80015a0:	4958      	ldr	r1, [pc, #352]	; (8001704 <_Z11serialPrintv+0x2f0>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f012 feec 	bl	8014380 <siprintf>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ae:	4413      	add	r3, r2
 80015b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80015b6:	4413      	add	r3, r2
 80015b8:	494c      	ldr	r1, [pc, #304]	; (80016ec <_Z11serialPrintv+0x2d8>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f012 fee0 	bl	8014380 <siprintf>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c6:	4413      	add	r3, r2
 80015c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 80015ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80015ce:	4413      	add	r3, r2
 80015d0:	494d      	ldr	r1, [pc, #308]	; (8001708 <_Z11serialPrintv+0x2f4>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f012 fed4 	bl	8014380 <siprintf>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015de:	4413      	add	r3, r2
 80015e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e4:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80015e6:	4413      	add	r3, r2
 80015e8:	4940      	ldr	r1, [pc, #256]	; (80016ec <_Z11serialPrintv+0x2d8>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f012 fec8 	bl	8014380 <siprintf>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f6:	4413      	add	r3, r2
 80015f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 80015fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fc:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80015fe:	4413      	add	r3, r2
 8001600:	4942      	ldr	r1, [pc, #264]	; (800170c <_Z11serialPrintv+0x2f8>)
 8001602:	4618      	mov	r0, r3
 8001604:	f012 febc 	bl	8014380 <siprintf>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800160e:	4413      	add	r3, r2
 8001610:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001614:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001616:	4413      	add	r3, r2
 8001618:	4934      	ldr	r1, [pc, #208]	; (80016ec <_Z11serialPrintv+0x2d8>)
 800161a:	4618      	mov	r0, r3
 800161c:	f012 feb0 	bl	8014380 <siprintf>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001626:	4413      	add	r3, r2
 8001628:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "7- too high current");
 800162a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800162c:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800162e:	4413      	add	r3, r2
 8001630:	4937      	ldr	r1, [pc, #220]	; (8001710 <_Z11serialPrintv+0x2fc>)
 8001632:	4618      	mov	r0, r3
 8001634:	f012 fea4 	bl	8014380 <siprintf>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800163e:	4413      	add	r3, r2
 8001640:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001646:	4413      	add	r3, r2
 8001648:	4928      	ldr	r1, [pc, #160]	; (80016ec <_Z11serialPrintv+0x2d8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f012 fe98 	bl	8014380 <siprintf>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001656:	4413      	add	r3, r2
 8001658:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 800165a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800165e:	4413      	add	r3, r2
 8001660:	492c      	ldr	r1, [pc, #176]	; (8001714 <_Z11serialPrintv+0x300>)
 8001662:	4618      	mov	r0, r3
 8001664:	f012 fe8c 	bl	8014380 <siprintf>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800166e:	4413      	add	r3, r2
 8001670:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n\n");
 8001672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 8001676:	4413      	add	r3, r2
 8001678:	4927      	ldr	r1, [pc, #156]	; (8001718 <_Z11serialPrintv+0x304>)
 800167a:	4618      	mov	r0, r3
 800167c:	f012 fe80 	bl	8014380 <siprintf>
 8001680:	4603      	mov	r3, r0
 8001682:	b29a      	uxth	r2, r3
 8001684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001686:	4413      	add	r3, r2
 8001688:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 800168a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 800168e:	189c      	adds	r4, r3, r2
 8001690:	69f8      	ldr	r0, [r7, #28]
 8001692:	f7fe ff71 	bl	8000578 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4920      	ldr	r1, [pc, #128]	; (800171c <_Z11serialPrintv+0x308>)
 800169c:	4620      	mov	r0, r4
 800169e:	f012 fe6f 	bl	8014380 <siprintf>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a8:	4413      	add	r3, r2
 80016aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80016ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80016b0:	4413      	add	r3, r2
 80016b2:	490e      	ldr	r1, [pc, #56]	; (80016ec <_Z11serialPrintv+0x2d8>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f012 fe63 	bl	8014380 <siprintf>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c0:	4413      	add	r3, r2
 80016c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 80016c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c6:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <_Z11serialPrintv+0x2cc>)
 80016c8:	189c      	adds	r4, r3, r2
 80016ca:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <_Z11serialPrintv+0x2c4>)
 80016cc:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80016d0:	e028      	b.n	8001724 <_Z11serialPrintv+0x310>
 80016d2:	bf00      	nop
 80016d4:	20001ad4 	.word	0x20001ad4
 80016d8:	20001478 	.word	0x20001478
 80016dc:	461c4000 	.word	0x461c4000
 80016e0:	200006c4 	.word	0x200006c4
 80016e4:	08016700 	.word	0x08016700
 80016e8:	08016714 	.word	0x08016714
 80016ec:	08016730 	.word	0x08016730
 80016f0:	08016734 	.word	0x08016734
 80016f4:	08016750 	.word	0x08016750
 80016f8:	0801675c 	.word	0x0801675c
 80016fc:	08016768 	.word	0x08016768
 8001700:	080167a0 	.word	0x080167a0
 8001704:	080167c8 	.word	0x080167c8
 8001708:	080167dc 	.word	0x080167dc
 800170c:	080167f0 	.word	0x080167f0
 8001710:	08016808 	.word	0x08016808
 8001714:	0801681c 	.word	0x0801681c
 8001718:	0801682c 	.word	0x0801682c
 800171c:	08016830 	.word	0x08016830
 8001720:	42c80000 	.word	0x42c80000
 8001724:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001720 <_Z11serialPrintv+0x30c>
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	ee17 0a90 	vmov	r0, s15
 8001730:	f7fe ff22 	bl	8000578 <__aeabi_f2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	496b      	ldr	r1, [pc, #428]	; (80018e8 <_Z11serialPrintv+0x4d4>)
 800173a:	4620      	mov	r0, r4
 800173c:	f012 fe20 	bl	8014380 <siprintf>
 8001740:	4603      	mov	r3, r0
 8001742:	b29a      	uxth	r2, r3
 8001744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001746:	4413      	add	r3, r2
 8001748:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800174a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <_Z11serialPrintv+0x4d8>)
 800174e:	4413      	add	r3, r2
 8001750:	4967      	ldr	r1, [pc, #412]	; (80018f0 <_Z11serialPrintv+0x4dc>)
 8001752:	4618      	mov	r0, r3
 8001754:	f012 fe14 	bl	8014380 <siprintf>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800175e:	4413      	add	r3, r2
 8001760:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	e067      	b.n	8001838 <_Z11serialPrintv+0x424>
	{
		float cell_value = (float)data.voltages.cells[i] / 10'000.0;
 8001768:	4a62      	ldr	r2, [pc, #392]	; (80018f4 <_Z11serialPrintv+0x4e0>)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001778:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80018f8 <_Z11serialPrintv+0x4e4>
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i);
 8001784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001786:	4a59      	ldr	r2, [pc, #356]	; (80018ec <_Z11serialPrintv+0x4d8>)
 8001788:	4413      	add	r3, r2
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	495b      	ldr	r1, [pc, #364]	; (80018fc <_Z11serialPrintv+0x4e8>)
 800178e:	4618      	mov	r0, r3
 8001790:	f012 fdf6 	bl	8014380 <siprintf>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800179a:	4413      	add	r3, r2
 800179c:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 800179e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <_Z11serialPrintv+0x4d8>)
 80017a2:	189c      	adds	r4, r3, r2
 80017a4:	69b8      	ldr	r0, [r7, #24]
 80017a6:	f7fe fee7 	bl	8000578 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4851      	ldr	r0, [pc, #324]	; (80018f4 <_Z11serialPrintv+0x4e0>)
 80017b0:	6a39      	ldr	r1, [r7, #32]
 80017b2:	4401      	add	r1, r0
 80017b4:	f501 7124 	add.w	r1, r1, #656	; 0x290
 80017b8:	7809      	ldrb	r1, [r1, #0]
 80017ba:	2900      	cmp	r1, #0
 80017bc:	d101      	bne.n	80017c2 <_Z11serialPrintv+0x3ae>
 80017be:	2120      	movs	r1, #32
 80017c0:	e000      	b.n	80017c4 <_Z11serialPrintv+0x3b0>
 80017c2:	212a      	movs	r1, #42	; 0x2a
 80017c4:	9100      	str	r1, [sp, #0]
 80017c6:	494e      	ldr	r1, [pc, #312]	; (8001900 <_Z11serialPrintv+0x4ec>)
 80017c8:	4620      	mov	r0, r4
 80017ca:	f012 fdd9 	bl	8014380 <siprintf>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d4:	4413      	add	r3, r2
 80017d6:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i != 5)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d01d      	beq.n	800181a <_Z11serialPrintv+0x406>
		{
		n += sprintf(&tab[n], " -T.%d-\t", i);
 80017de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e0:	4a42      	ldr	r2, [pc, #264]	; (80018ec <_Z11serialPrintv+0x4d8>)
 80017e2:	4413      	add	r3, r2
 80017e4:	6a3a      	ldr	r2, [r7, #32]
 80017e6:	4947      	ldr	r1, [pc, #284]	; (8001904 <_Z11serialPrintv+0x4f0>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f012 fdc9 	bl	8014380 <siprintf>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017f4:	4413      	add	r3, r2
 80017f6:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
 80017f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017fa:	4a3c      	ldr	r2, [pc, #240]	; (80018ec <_Z11serialPrintv+0x4d8>)
 80017fc:	1898      	adds	r0, r3, r2
 80017fe:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <_Z11serialPrintv+0x4e0>)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	4413      	add	r3, r2
 8001804:	3320      	adds	r3, #32
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	493f      	ldr	r1, [pc, #252]	; (8001908 <_Z11serialPrintv+0x4f4>)
 800180c:	f012 fdb8 	bl	8014380 <siprintf>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001816:	4413      	add	r3, r2
 8001818:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		n += sprintf(&tab[n], "\r\n");
 800181a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800181c:	4a33      	ldr	r2, [pc, #204]	; (80018ec <_Z11serialPrintv+0x4d8>)
 800181e:	4413      	add	r3, r2
 8001820:	4933      	ldr	r1, [pc, #204]	; (80018f0 <_Z11serialPrintv+0x4dc>)
 8001822:	4618      	mov	r0, r3
 8001824:	f012 fdac 	bl	8014380 <siprintf>
 8001828:	4603      	mov	r3, r0
 800182a:	b29a      	uxth	r2, r3
 800182c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800182e:	4413      	add	r3, r2
 8001830:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	3301      	adds	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	2b05      	cmp	r3, #5
 800183c:	dd94      	ble.n	8001768 <_Z11serialPrintv+0x354>
	}

	n += sprintf(&tab[n], "\r\n");
 800183e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001840:	4a2a      	ldr	r2, [pc, #168]	; (80018ec <_Z11serialPrintv+0x4d8>)
 8001842:	4413      	add	r3, r2
 8001844:	492a      	ldr	r1, [pc, #168]	; (80018f0 <_Z11serialPrintv+0x4dc>)
 8001846:	4618      	mov	r0, r3
 8001848:	f012 fd9a 	bl	8014380 <siprintf>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001852:	4413      	add	r3, r2
 8001854:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 8001856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <_Z11serialPrintv+0x4d8>)
 800185a:	189c      	adds	r4, r3, r2
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <_Z11serialPrintv+0x4e0>)
 800185e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe88 	bl	8000578 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4927      	ldr	r1, [pc, #156]	; (800190c <_Z11serialPrintv+0x4f8>)
 800186e:	4620      	mov	r0, r4
 8001870:	f012 fd86 	bl	8014380 <siprintf>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800187a:	4413      	add	r3, r2
 800187c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800187e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <_Z11serialPrintv+0x4d8>)
 8001882:	4413      	add	r3, r2
 8001884:	491a      	ldr	r1, [pc, #104]	; (80018f0 <_Z11serialPrintv+0x4dc>)
 8001886:	4618      	mov	r0, r3
 8001888:	f012 fd7a 	bl	8014380 <siprintf>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001892:	4413      	add	r3, r2
 8001894:	84fb      	strh	r3, [r7, #38]	; 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 8001896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_Z11serialPrintv+0x4d8>)
 800189a:	189c      	adds	r4, r3, r2
 800189c:	2104      	movs	r1, #4
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f006 fd35 	bl	8008310 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4919      	ldr	r1, [pc, #100]	; (8001910 <_Z11serialPrintv+0x4fc>)
 80018ac:	4620      	mov	r0, r4
 80018ae:	f012 fd67 	bl	8014380 <siprintf>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018b8:	4413      	add	r3, r2
 80018ba:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <_Z11serialPrintv+0x4d8>)
 80018c0:	4413      	add	r3, r2
 80018c2:	490b      	ldr	r1, [pc, #44]	; (80018f0 <_Z11serialPrintv+0x4dc>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f012 fd5b 	bl	8014380 <siprintf>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d0:	4413      	add	r3, r2
 80018d2:	84fb      	strh	r3, [r7, #38]	; 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 80018d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d6:	4619      	mov	r1, r3
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <_Z11serialPrintv+0x4d8>)
 80018da:	f011 f94b 	bl	8012b74 <CDC_Transmit_FS>
}
 80018de:	bf00      	nop
 80018e0:	372c      	adds	r7, #44	; 0x2c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	08016850 	.word	0x08016850
 80018ec:	200006c4 	.word	0x200006c4
 80018f0:	08016730 	.word	0x08016730
 80018f4:	20001478 	.word	0x20001478
 80018f8:	461c4000 	.word	0x461c4000
 80018fc:	0801686c 	.word	0x0801686c
 8001900:	08016874 	.word	0x08016874
 8001904:	08016880 	.word	0x08016880
 8001908:	0801688c 	.word	0x0801688c
 800190c:	08016890 	.word	0x08016890
 8001910:	080168a8 	.word	0x080168a8

08001914 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001914:	b5b0      	push	{r4, r5, r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4614      	mov	r4, r2
 8001926:	461d      	mov	r5, r3
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001930:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3318      	adds	r3, #24
 8001938:	2206      	movs	r2, #6
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	4618      	mov	r0, r3
 800193e:	f012 fe72 	bl	8014626 <memcpy>
  }
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}

0800194c <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001968:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3318      	adds	r3, #24
 8001970:	2208      	movs	r2, #8
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	4618      	mov	r0, r3
 8001976:	f012 fe56 	bl	8014626 <memcpy>
  }
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}

08001984 <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 8001984:	b580      	push	{r7, lr}
 8001986:	b096      	sub	sp, #88	; 0x58
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

	can_init();
 800198c:	f7ff fc5a 	bl	8001244 <_Z8can_initv>
	for(;;){
		osDelay(20);
 8001990:	2014      	movs	r0, #20
 8001992:	f00e fb89 	bl	80100a8 <osDelay>

		error_conditions[0].value = data.current.value;
 8001996:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001998:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800199c:	4a74      	ldr	r2, [pc, #464]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 800199e:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 80019a0:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 80019a2:	8b9b      	ldrh	r3, [r3, #28]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b71      	ldr	r3, [pc, #452]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 80019a8:	8b5b      	ldrh	r3, [r3, #26]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	4b6e      	ldr	r3, [pc, #440]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 80019b6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 80019ba:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 80019bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 80019ca:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 80019d0:	8b5b      	ldrh	r3, [r3, #26]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 80019dc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 80019e2:	8b9b      	ldrh	r3, [r3, #28]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 80019ee:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 80019f2:	4b5e      	ldr	r3, [pc, #376]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 80019f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 8001a02:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		error_conditions[6].value = data.temperatures.lowest_temperature;
 8001a06:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a14:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 8001a16:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		error_conditions[7].value = data.current.value;
 8001a1a:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a1c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001a20:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <_Z23start_comm_err_functionPv+0x1ec>)
 8001a22:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

		PUTM_CAN::BMS_LV_main can_message_main{
			.voltage_sum{data.voltages.total_can},
 8001a26:	4b51      	ldr	r3, [pc, #324]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a28:	8b1b      	ldrh	r3, [r3, #24]
			.soc{data.soc.value_can},
			.temp_avg{data.temperatures.average},
			.current{(uint8_t)data.current.value},
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
		};
 8001a2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			.soc{data.soc.value_can},
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a30:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
		};
 8001a34:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			.temp_avg{data.temperatures.average},
 8001a38:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a3a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001a3e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			.current{(uint8_t)data.current.value},
 8001a42:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a44:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a4c:	edc7 7a00 	vstr	s15, [r7]
 8001a50:	783b      	ldrb	r3, [r7, #0]
 8001a52:	b2db      	uxtb	r3, r3
		};
 8001a54:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
 8001a58:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
		};
 8001a5e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		PUTM_CAN::BMS_LV_temperature can_message_temp{
 8001a62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 8001a72:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 8001a7c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 8001a86:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a8c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 8001a90:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 8001a9a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		if(serial_tick < HAL_GetTick())
 8001a9e:	f003 fb6d 	bl	800517c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <_Z23start_comm_err_functionPv+0x1f0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	bf8c      	ite	hi
 8001aac:	2301      	movhi	r3, #1
 8001aae:	2300      	movls	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <_Z23start_comm_err_functionPv+0x144>
		{
			serialPrint();
 8001ab6:	f7ff fcad 	bl	8001414 <_Z11serialPrintv>
			serial_tick = HAL_GetTick() + 500; //0.5s
 8001aba:	f003 fb5f 	bl	800517c <HAL_GetTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <_Z23start_comm_err_functionPv+0x1f0>)
 8001ac6:	6013      	str	r3, [r2, #0]
		}

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_main>(can_message_main, PUTM_CAN::can_tx_header_BMS_LV_MAIN);
 8001ac8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <_Z23start_comm_err_functionPv+0x1f4>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff1e 	bl	8001914 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_temperature>(can_message_temp, PUTM_CAN::can_tx_header_BMS_LV_TEMPERATURE);
 8001ad8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <_Z23start_comm_err_functionPv+0x1f8>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff32 	bl	800194c <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		if(can_main_tick < HAL_GetTick())
 8001ae8:	f003 fb48 	bl	800517c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <_Z23start_comm_err_functionPv+0x1fc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	bf8c      	ite	hi
 8001af6:	2301      	movhi	r3, #1
 8001af8:	2300      	movls	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <_Z23start_comm_err_functionPv+0x19a>
		{
			auto status_main = can_message_main_frame.send(hcan1);
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	491f      	ldr	r1, [pc, #124]	; (8001b84 <_Z23start_comm_err_functionPv+0x200>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f8ba 	bl	8001c80 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			can_main_tick = HAL_GetTick() + 40; //0.04s
 8001b12:	f003 fb33 	bl	800517c <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	3328      	adds	r3, #40	; 0x28
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <_Z23start_comm_err_functionPv+0x1fc>)
 8001b1c:	6013      	str	r3, [r2, #0]
		}

		if(can_temp_tick < HAL_GetTick())
 8001b1e:	f003 fb2d 	bl	800517c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <_Z23start_comm_err_functionPv+0x204>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	bf8c      	ite	hi
 8001b2c:	2301      	movhi	r3, #1
 8001b2e:	2300      	movls	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <_Z23start_comm_err_functionPv+0x1d0>
		{
			auto status_temp = can_message_temp_frame.send(hcan1);
 8001b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3a:	4912      	ldr	r1, [pc, #72]	; (8001b84 <_Z23start_comm_err_functionPv+0x200>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f8b3 	bl	8001ca8 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			can_temp_tick = HAL_GetTick() + 200; //0.2s
 8001b48:	f003 fb18 	bl	800517c <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	33c8      	adds	r3, #200	; 0xc8
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <_Z23start_comm_err_functionPv+0x204>)
 8001b52:	6013      	str	r3, [r2, #0]
		}
		if(data.charging.charger_plugged) //charger is unplugged
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <_Z23start_comm_err_functionPv+0x1e8>)
 8001b56:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f43f af18 	beq.w	8001990 <_Z23start_comm_err_functionPv+0xc>
		{
			error_check();
 8001b60:	f7ff fb9a 	bl	8001298 <_Z11error_checkv>

			error_execute();
 8001b64:	f7ff fc04 	bl	8001370 <_Z13error_executev>
		}
	}
 8001b68:	e712      	b.n	8001990 <_Z23start_comm_err_functionPv+0xc>
 8001b6a:	bf00      	nop
 8001b6c:	20001478 	.word	0x20001478
 8001b70:	200005c4 	.word	0x200005c4
 8001b74:	200005b8 	.word	0x200005b8
 8001b78:	08016964 	.word	0x08016964
 8001b7c:	0801697c 	.word	0x0801697c
 8001b80:	200005bc 	.word	0x200005bc
 8001b84:	20001aac 	.word	0x20001aac
 8001b88:	200005c0 	.word	0x200005c0

08001b8c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f89b 	bl	8001cd0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f88f 	bl	8001cd0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	3384      	adds	r3, #132	; 0x84
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff faa2 	bl	8001112 <_ZN3etl11vector_baseD1Ev>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	330c      	adds	r3, #12
 8001be6:	2208      	movs	r2, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	f000 f87e 	bl	8001cea <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 f890 	bl	8001d16 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f897 	bl	8001d3e <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ffd3 	bl	8001bbe <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f000 f891 	bl	8001d54 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c32:	4603      	mov	r3, r0
 8001c34:	681c      	ldr	r4, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	2004      	movs	r0, #4
 8001c3e:	f7ff fa4d 	bl	80010dc <_ZnwjPv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	601c      	str	r4, [r3, #0]
      ++p_end;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	1d1a      	adds	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
    }
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}

08001c58 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
    }
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f103 0218 	add.w	r2, r3, #24
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f005 fa1e 	bl	80070d6 <HAL_CAN_AddTxMessage>
 8001c9a:	4603      	mov	r3, r0
  }
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20001470 	.word	0x20001470

08001ca8 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f103 0218 	add.w	r2, r3, #24
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f005 fa0a 	bl	80070d6 <HAL_CAN_AddTxMessage>
 8001cc2:	4603      	mov	r3, r0
  }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20001474 	.word	0x20001474

08001cd0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f845 	bl	8001d6a <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f9fa 	bl	80010f4 <_ZN3etl11vector_baseC1Ej>
      , p_buffer(p_buffer_)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	605a      	str	r2, [r3, #4]
      , p_end(p_buffer_)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	609a      	str	r2, [r3, #8]
    }
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f000 f829 	bl	8001d80 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	609a      	str	r2, [r3, #8]
    }
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
      initialise();
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffe5 	bl	8001d16 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001d5c:	687b      	ldr	r3, [r7, #4]
  }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f804 	bl	8001d9a <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f804 	bl	8001db4 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001dbe:	f7ff f985 	bl	80010cc <_ZSt21is_constant_evaluatedv>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f808 	bl	8001de0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001dd0:	e003      	b.n	8001dda <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f81c 	bl	8001e12 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001dea:	e009      	b.n	8001e00 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f81b 	bl	8001e28 <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f822 	bl	8001e3e <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1f1      	bne.n	8001dec <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xc>
	}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f804 	bl	8001e54 <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    }
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 80c6 	bne.w	8002006 <_Z41__static_initialization_and_destruction_0ii+0x19e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f040 80c0 	bne.w	8002006 <_Z41__static_initialization_and_destruction_0ii+0x19e>
};
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4a62      	ldr	r2, [pc, #392]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	4a62      	ldr	r2, [pc, #392]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001e92:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001e94:	4a62      	ldr	r2, [pc, #392]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001e96:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	4a61      	ldr	r2, [pc, #388]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	751a      	strb	r2, [r3, #20]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
 8001eac:	3320      	adds	r3, #32
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	4a5d      	ldr	r2, [pc, #372]	; (800202c <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001eb8:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001eba:	4a59      	ldr	r2, [pc, #356]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ebc:	8b92      	ldrh	r2, [r2, #28]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4a57      	ldr	r2, [pc, #348]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ec2:	8b52      	ldrh	r2, [r2, #26]
 8001ec4:	1a8a      	subs	r2, r1, r2
 8001ec6:	ee07 2a90 	vmov	s15, r2
 8001eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001ece:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ed2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	751a      	strb	r2, [r3, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4a51      	ldr	r2, [pc, #324]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	4a51      	ldr	r2, [pc, #324]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001ef0:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001ef2:	4a4b      	ldr	r2, [pc, #300]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ef4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001ef8:	ee07 2a90 	vmov	s15, r2
 8001efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f00:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f08:	611a      	str	r2, [r3, #16]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	751a      	strb	r2, [r3, #20]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
 8001f12:	2200      	movs	r2, #0
 8001f14:	771a      	strb	r2, [r3, #28]
 8001f16:	3320      	adds	r3, #32
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	4a45      	ldr	r2, [pc, #276]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001f24:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001f26:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f28:	8b52      	ldrh	r2, [r2, #26]
 8001f2a:	ee07 2a90 	vmov	s15, r2
 8001f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f32:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	751a      	strb	r2, [r3, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
 8001f48:	3320      	adds	r3, #32
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001f54:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001f56:	4a32      	ldr	r2, [pc, #200]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f58:	8b92      	ldrh	r2, [r2, #28]
 8001f5a:	ee07 2a90 	vmov	s15, r2
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f62:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f6a:	611a      	str	r2, [r3, #16]
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	751a      	strb	r2, [r3, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
 8001f78:	3320      	adds	r3, #32
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	4a30      	ldr	r2, [pc, #192]	; (8002044 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001f84:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001f86:	4a26      	ldr	r2, [pc, #152]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f88:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001f8c:	ee07 2a90 	vmov	s15, r2
 8001f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f94:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	751a      	strb	r2, [r3, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]
 8001faa:	3320      	adds	r3, #32
 8001fac:	2205      	movs	r2, #5
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fb8:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_LOST,-1,1,data.temperatures.lowest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fbc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
};
 8001fc0:	ee07 2a90 	vmov	s15, r2
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	751a      	strb	r2, [r3, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	771a      	strb	r2, [r3, #28]
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8001fea:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fee:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	751a      	strb	r2, [r3, #20]
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
 8002002:	2200      	movs	r2, #0
 8002004:	771a      	strb	r2, [r3, #28]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200005c4 	.word	0x200005c4
 8002018:	be99999a 	.word	0xbe99999a
 800201c:	3e99999a 	.word	0x3e99999a
 8002020:	20001478 	.word	0x20001478
 8002024:	00124f80 	.word	0x00124f80
 8002028:	44fa0000 	.word	0x44fa0000
 800202c:	47435000 	.word	0x47435000
 8002030:	42400000 	.word	0x42400000
 8002034:	425c0000 	.word	0x425c0000
 8002038:	46ea6000 	.word	0x46ea6000
 800203c:	4724d800 	.word	0x4724d800
 8002040:	48f42400 	.word	0x48f42400
 8002044:	42f00000 	.word	0x42f00000
 8002048:	bf800000 	.word	0xbf800000
 800204c:	41a00000 	.word	0x41a00000
 8002050:	42c80000 	.word	0x42c80000

08002054 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	7993      	ldrb	r3, [r2, #6]
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1dd8      	adds	r0, r3, #7
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	331c      	adds	r3, #28
 8002070:	2203      	movs	r2, #3
 8002072:	4619      	mov	r1, r3
 8002074:	f012 fad7 	bl	8014626 <memcpy>
  }
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
    new_data = true;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	7993      	ldrb	r3, [r2, #6]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3307      	adds	r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	321c      	adds	r2, #28
 800209c:	8812      	ldrh	r2, [r2, #0]
 800209e:	b292      	uxth	r2, r2
 80020a0:	801a      	strh	r2, [r3, #0]
  }
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	7993      	ldrb	r3, [r2, #6]
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3307      	adds	r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	321c      	adds	r2, #28
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	601a      	str	r2, [r3, #0]
  }
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	7993      	ldrb	r3, [r2, #6]
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1dd8      	adds	r0, r3, #7
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	331c      	adds	r3, #28
 80020f6:	2206      	movs	r2, #6
 80020f8:	4619      	mov	r1, r3
 80020fa:	f012 fa94 	bl	8014626 <memcpy>
  }
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	7993      	ldrb	r3, [r2, #6]
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1dd8      	adds	r0, r3, #7
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	331c      	adds	r3, #28
 8002122:	2206      	movs	r2, #6
 8002124:	4619      	mov	r1, r3
 8002126:	f012 fa7e 	bl	8014626 <memcpy>
  }
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	7993      	ldrb	r3, [r2, #6]
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1dd8      	adds	r0, r3, #7
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	331c      	adds	r3, #28
 800214e:	2206      	movs	r2, #6
 8002150:	4619      	mov	r1, r3
 8002152:	f012 fa68 	bl	8014626 <memcpy>
  }
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	7993      	ldrb	r3, [r2, #6]
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1dd8      	adds	r0, r3, #7
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	331c      	adds	r3, #28
 800217a:	2208      	movs	r2, #8
 800217c:	4619      	mov	r1, r3
 800217e:	f012 fa52 	bl	8014626 <memcpy>
  }
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	7993      	ldrb	r3, [r2, #6]
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3307      	adds	r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	321c      	adds	r2, #28
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	601a      	str	r2, [r3, #0]
  }
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	7993      	ldrb	r3, [r2, #6]
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	1dd8      	adds	r0, r3, #7
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	331c      	adds	r3, #28
 80021d2:	2208      	movs	r2, #8
 80021d4:	4619      	mov	r1, r3
 80021d6:	f012 fa26 	bl	8014626 <memcpy>
  }
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	7993      	ldrb	r3, [r2, #6]
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	1dd8      	adds	r0, r3, #7
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	331c      	adds	r3, #28
 80021fe:	2203      	movs	r2, #3
 8002200:	4619      	mov	r1, r3
 8002202:	f012 fa10 	bl	8014626 <memcpy>
  }
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	7993      	ldrb	r3, [r2, #6]
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1dd8      	adds	r0, r3, #7
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	331c      	adds	r3, #28
 800222a:	2203      	movs	r2, #3
 800222c:	4619      	mov	r1, r3
 800222e:	f012 f9fa 	bl	8014626 <memcpy>
  }
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	7993      	ldrb	r3, [r2, #6]
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3307      	adds	r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	321c      	adds	r2, #28
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	601a      	str	r2, [r3, #0]
  }
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	7993      	ldrb	r3, [r2, #6]
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1dd8      	adds	r0, r3, #7
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	331c      	adds	r3, #28
 8002282:	2208      	movs	r2, #8
 8002284:	4619      	mov	r1, r3
 8002286:	f012 f9ce 	bl	8014626 <memcpy>
  }
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	7993      	ldrb	r3, [r2, #6]
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1dd8      	adds	r0, r3, #7
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	331c      	adds	r3, #28
 80022ae:	2208      	movs	r2, #8
 80022b0:	4619      	mov	r1, r3
 80022b2:	f012 f9b8 	bl	8014626 <memcpy>
  }
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	7993      	ldrb	r3, [r2, #6]
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	1dd8      	adds	r0, r3, #7
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	331c      	adds	r3, #28
 80022da:	2208      	movs	r2, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	f012 f9a2 	bl	8014626 <memcpy>
  }
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	7993      	ldrb	r3, [r2, #6]
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1dd8      	adds	r0, r3, #7
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	331c      	adds	r3, #28
 8002306:	2208      	movs	r2, #8
 8002308:	4619      	mov	r1, r3
 800230a:	f012 f98c 	bl	8014626 <memcpy>
  }
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	7993      	ldrb	r3, [r2, #6]
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	1dd8      	adds	r0, r3, #7
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	331c      	adds	r3, #28
 8002332:	2203      	movs	r2, #3
 8002334:	4619      	mov	r1, r3
 8002336:	f012 f976 	bl	8014626 <memcpy>
  }
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	7993      	ldrb	r3, [r2, #6]
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1dd8      	adds	r0, r3, #7
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	331c      	adds	r3, #28
 800235e:	2205      	movs	r2, #5
 8002360:	4619      	mov	r1, r3
 8002362:	f012 f960 	bl	8014626 <memcpy>
  }
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	7993      	ldrb	r3, [r2, #6]
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3307      	adds	r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	321c      	adds	r2, #28
 800238a:	8812      	ldrh	r2, [r2, #0]
 800238c:	b292      	uxth	r2, r2
 800238e:	801a      	strh	r2, [r3, #0]
  }
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	7993      	ldrb	r3, [r2, #6]
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3307      	adds	r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	321c      	adds	r2, #28
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	701a      	strb	r2, [r3, #0]
  }
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7993      	ldrb	r3, [r2, #6]
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3307      	adds	r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	321c      	adds	r2, #28
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	601a      	str	r2, [r3, #0]
  }
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	7993      	ldrb	r3, [r2, #6]
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3307      	adds	r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	321c      	adds	r2, #28
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	701a      	strb	r2, [r3, #0]
  }
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    new_data = true;
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	7993      	ldrb	r3, [r2, #6]
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3307      	adds	r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	321c      	adds	r2, #28
 800243c:	8812      	ldrh	r2, [r2, #0]
 800243e:	b292      	uxth	r2, r2
 8002440:	801a      	strh	r2, [r3, #0]
  }
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	7993      	ldrb	r3, [r2, #6]
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1dd8      	adds	r0, r3, #7
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	331c      	adds	r3, #28
 800246a:	2208      	movs	r2, #8
 800246c:	4619      	mov	r1, r3
 800246e:	f012 f8da 	bl	8014626 <memcpy>
  }
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	7993      	ldrb	r3, [r2, #6]
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3307      	adds	r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	321c      	adds	r2, #28
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	701a      	strb	r2, [r3, #0]
  }
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	7993      	ldrb	r3, [r2, #6]
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1dd8      	adds	r0, r3, #7
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	331c      	adds	r3, #28
 80024c2:	2208      	movs	r2, #8
 80024c4:	4619      	mov	r1, r3
 80024c6:	f012 f8ae 	bl	8014626 <memcpy>
  }
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	7993      	ldrb	r3, [r2, #6]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1dd8      	adds	r0, r3, #7
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	331c      	adds	r3, #28
 80024ee:	2206      	movs	r2, #6
 80024f0:	4619      	mov	r1, r3
 80024f2:	f012 f898 	bl	8014626 <memcpy>
  }
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	7993      	ldrb	r3, [r2, #6]
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1dd8      	adds	r0, r3, #7
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	331c      	adds	r3, #28
 800251a:	2208      	movs	r2, #8
 800251c:	4619      	mov	r1, r3
 800251e:	f012 f882 	bl	8014626 <memcpy>
  }
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	7993      	ldrb	r3, [r2, #6]
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3307      	adds	r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	321c      	adds	r2, #28
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	701a      	strb	r2, [r3, #0]
  }
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	7993      	ldrb	r3, [r2, #6]
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	1dd8      	adds	r0, r3, #7
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	331c      	adds	r3, #28
 8002572:	2206      	movs	r2, #6
 8002574:	4619      	mov	r1, r3
 8002576:	f012 f856 	bl	8014626 <memcpy>
  }
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	7993      	ldrb	r3, [r2, #6]
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1dd8      	adds	r0, r3, #7
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	331c      	adds	r3, #28
 800259e:	2206      	movs	r2, #6
 80025a0:	4619      	mov	r1, r3
 80025a2:	f012 f840 	bl	8014626 <memcpy>
  }
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	7993      	ldrb	r3, [r2, #6]
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1dd8      	adds	r0, r3, #7
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	331c      	adds	r3, #28
 80025ca:	2208      	movs	r2, #8
 80025cc:	4619      	mov	r1, r3
 80025ce:	f012 f82a 	bl	8014626 <memcpy>
  }
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	7993      	ldrb	r3, [r2, #6]
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1dd8      	adds	r0, r3, #7
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	331c      	adds	r3, #28
 80025f6:	2205      	movs	r2, #5
 80025f8:	4619      	mov	r1, r3
 80025fa:	f012 f814 	bl	8014626 <memcpy>
  }
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
 800260a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800260e:	2001      	movs	r0, #1
 8002610:	f7ff fc2a 	bl	8001e68 <_Z41__static_initialization_and_destruction_0ii>
 8002614:	bd80      	pop	{r7, pc}

08002616 <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ffe7 	bl	8002616 <_ZN22Battery_characteristicC1Ev>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ffeb 	bl	8002638 <_ZN7SoC_EKFC1Ev>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN4DataC1Ev>:
	bool charging_state;
	bool discharge_activation;
	uint32_t discharge_tick_end;
};

struct Data{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ffe9 	bl	8002652 <_ZN15State_of_ChargeC1Ev>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d102      	bne.n	80026ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026a6:	4803      	ldr	r0, [pc, #12]	; (80026b4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80026a8:	f7ff ffe0 	bl	800266c <_ZN4DataC1Ev>
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20001478 	.word	0x20001478

080026b8 <_GLOBAL__sub_I_data>:
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff ffe3 	bl	800268c <_Z41__static_initialization_and_destruction_0ii>
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	e025      	b.n	8002720 <_Z16init_PEC15_Tablev+0x58>
	{
		remainder = i << 7;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	01db      	lsls	r3, r3, #7
 80026da:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80026dc:	2308      	movs	r3, #8
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	e013      	b.n	800270a <_Z16init_PEC15_Tablev+0x42>
		{
			if (remainder & 0x4000)
 80026e2:	89fb      	ldrh	r3, [r7, #14]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <_Z16init_PEC15_Tablev+0x36>
			{
				remainder = ((remainder << 1));
 80026ec:	89fb      	ldrh	r3, [r7, #14]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <_Z16init_PEC15_Tablev+0x6c>)
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	4053      	eors	r3, r2
 80026fa:	81fb      	strh	r3, [r7, #14]
 80026fc:	e002      	b.n	8002704 <_Z16init_PEC15_Tablev+0x3c>
			}
			else
			{
				remainder = ((remainder << 1));
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dce8      	bgt.n	80026e2 <_Z16init_PEC15_Tablev+0x1a>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 8002710:	4909      	ldr	r1, [pc, #36]	; (8002738 <_Z16init_PEC15_Tablev+0x70>)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	89fa      	ldrh	r2, [r7, #14]
 8002716:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2bff      	cmp	r3, #255	; 0xff
 8002724:	ddd6      	ble.n	80026d4 <_Z16init_PEC15_Tablev+0xc>
	}
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20000210 	.word	0x20000210
 8002738:	2000171c 	.word	0x2000171c

0800273c <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 8002746:	2310      	movs	r3, #16
 8002748:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e019      	b.n	8002784 <_Z5pec15Pci+0x48>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	09db      	lsrs	r3, r3, #7
 8002754:	b29a      	uxth	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	440b      	add	r3, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4053      	eors	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 8002768:	8afb      	ldrh	r3, [r7, #22]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	b21a      	sxth	r2, r3
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	490b      	ldr	r1, [pc, #44]	; (80027a0 <_Z5pec15Pci+0x64>)
 8002772:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4053      	eors	r3, r2
 800277a:	b21b      	sxth	r3, r3
 800277c:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	3301      	adds	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	dbe1      	blt.n	8002750 <_Z5pec15Pci+0x14>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800278c:	8afb      	ldrh	r3, [r7, #22]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	b29b      	uxth	r3, r3
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000171c 	.word	0x2000171c

080027a4 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 80027aa:	23ff      	movs	r3, #255	; 0xff
 80027ac:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f005 fdc2 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 80027bc:	1d39      	adds	r1, r7, #4
 80027be:	2301      	movs	r3, #1
 80027c0:	2202      	movs	r2, #2
 80027c2:	4807      	ldr	r0, [pc, #28]	; (80027e0 <_Z11LTC_wake_upv+0x3c>)
 80027c4:	f009 f95b 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80027c8:	2201      	movs	r2, #1
 80027ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d2:	f005 fdb5 	bl	8008340 <HAL_GPIO_WritePin>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20001b08 	.word	0x20001b08

080027e4 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 80027ea:	f248 0301 	movw	r3, #32769	; 0x8001
 80027ee:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 80027f0:	89fb      	ldrh	r3, [r7, #14]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80027fa:	89fb      	ldrh	r3, [r7, #14]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002800:	463b      	mov	r3, r7
 8002802:	2102      	movs	r1, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff99 	bl	800273c <_Z5pec15Pci>
 800280a:	4603      	mov	r3, r0
 800280c:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 800280e:	89bb      	ldrh	r3, [r7, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	b29b      	uxth	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002818:	89bb      	ldrh	r3, [r7, #12]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <_Z18LTC_start_cell_adcv+0x11c>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <_Z18LTC_start_cell_adcv+0x11c>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <_Z18LTC_start_cell_adcv+0x11c>)
 800282c:	789b      	ldrb	r3, [r3, #2]
 800282e:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002830:	4b33      	ldr	r3, [pc, #204]	; (8002900 <_Z18LTC_start_cell_adcv+0x11c>)
 8002832:	78db      	ldrb	r3, [r3, #3]
 8002834:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <_Z18LTC_start_cell_adcv+0x11c>)
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <_Z18LTC_start_cell_adcv+0x11c>)
 800283e:	795b      	ldrb	r3, [r3, #5]
 8002840:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002842:	463b      	mov	r3, r7
 8002844:	3304      	adds	r3, #4
 8002846:	2106      	movs	r1, #6
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff77 	bl	800273c <_Z5pec15Pci>
 800284e:	4603      	mov	r3, r0
 8002850:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 8002852:	89bb      	ldrh	r3, [r7, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	b29b      	uxth	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 800285c:	89bb      	ldrh	r3, [r7, #12]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002862:	f7ff ff9f 	bl	80027a4 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002866:	2200      	movs	r2, #0
 8002868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002870:	f005 fd66 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 8002874:	4639      	mov	r1, r7
 8002876:	2314      	movs	r3, #20
 8002878:	220c      	movs	r2, #12
 800287a:	4822      	ldr	r0, [pc, #136]	; (8002904 <_Z18LTC_start_cell_adcv+0x120>)
 800287c:	f009 f8ff 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002880:	2201      	movs	r2, #1
 8002882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288a:	f005 fd59 	bl	8008340 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 800288e:	463b      	mov	r3, r7
 8002890:	220c      	movs	r2, #12
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f011 fdf0 	bl	801447a <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 800289a:	f44f 731c 	mov.w	r3, #624	; 0x270
 800289e:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 80028a0:	89fb      	ldrh	r3, [r7, #14]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80028b0:	463b      	mov	r3, r7
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff41 	bl	800273c <_Z5pec15Pci>
 80028ba:	4603      	mov	r3, r0
 80028bc:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 80028be:	89bb      	ldrh	r3, [r7, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 80028c8:	89bb      	ldrh	r3, [r7, #12]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d8:	f005 fd32 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 80028dc:	4639      	mov	r1, r7
 80028de:	2314      	movs	r3, #20
 80028e0:	2204      	movs	r2, #4
 80028e2:	4808      	ldr	r0, [pc, #32]	; (8002904 <_Z18LTC_start_cell_adcv+0x120>)
 80028e4:	f009 f8cb 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f005 fd25 	bl	8008340 <HAL_GPIO_WritePin>
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000214 	.word	0x20000214
 8002904:	20001b08 	.word	0x20001b08

08002908 <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0b8      	sub	sp, #224	; 0xe0
 800290c:	af02      	add	r7, sp, #8
 800290e:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 8002910:	f248 0304 	movw	r3, #32772	; 0x8004
 8002914:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 8002918:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800291c:	220c      	movs	r2, #12
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f011 fdaa 	bl	801447a <memset>
	tab[0] = (cmd>>8);
 8002926:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002934:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 800293e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002942:	2102      	movs	r1, #2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fef9 	bl	800273c <_Z5pec15Pci>
 800294a:	4603      	mov	r3, r0
 800294c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 8002950:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 800295e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 8002968:	f7ff ff1c 	bl	80027a4 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002976:	f005 fce3 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 800297a:	f107 020c 	add.w	r2, r7, #12
 800297e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002982:	2314      	movs	r3, #20
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	230c      	movs	r3, #12
 8002988:	4849      	ldr	r0, [pc, #292]	; (8002ab0 <_Z18LTC_get_values_adcPt+0x1a8>)
 800298a:	f009 f9e6 	bl	800bd5a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002998:	f005 fcd2 	bl	8008340 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 800299c:	7c3b      	ldrb	r3, [r7, #16]
 800299e:	b21a      	sxth	r2, r3
 80029a0:	7c7b      	ldrb	r3, [r7, #17]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 80029b0:	7cbb      	ldrb	r3, [r7, #18]
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21a      	sxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3302      	adds	r3, #2
 80029c2:	b292      	uxth	r2, r2
 80029c4:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 80029c6:	7d3b      	ldrb	r3, [r7, #20]
 80029c8:	b21a      	sxth	r2, r3
 80029ca:	7d7b      	ldrb	r3, [r7, #21]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	4313      	orrs	r3, r2
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	b292      	uxth	r2, r2
 80029da:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 80029dc:	f248 0306 	movw	r3, #32774	; 0x8006
 80029e0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 80029e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029e8:	220c      	movs	r2, #12
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f011 fd44 	bl	801447a <memset>
	tab[0] = (cmd>>8);
 80029f2:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002a00:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 8002a0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe93 	bl	800273c <_Z5pec15Pci>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 8002a1c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002a2a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3e:	f005 fc7f 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002a42:	f107 020c 	add.w	r2, r7, #12
 8002a46:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002a4a:	2314      	movs	r3, #20
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	230c      	movs	r3, #12
 8002a50:	4817      	ldr	r0, [pc, #92]	; (8002ab0 <_Z18LTC_get_values_adcPt+0x1a8>)
 8002a52:	f009 f982 	bl	800bd5a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a60:	f005 fc6e 	bl	8008340 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002a64:	7c3b      	ldrb	r3, [r7, #16]
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	7c7b      	ldrb	r3, [r7, #17]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b21a      	sxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3306      	adds	r3, #6
 8002a76:	b292      	uxth	r2, r2
 8002a78:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002a7a:	7cbb      	ldrb	r3, [r7, #18]
 8002a7c:	b21a      	sxth	r2, r3
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	b292      	uxth	r2, r2
 8002a8e:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002a90:	7d3b      	ldrb	r3, [r7, #20]
 8002a92:	b21a      	sxth	r2, r3
 8002a94:	7d7b      	ldrb	r3, [r7, #21]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	330a      	adds	r3, #10
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]


}
 8002aa6:	bf00      	nop
 8002aa8:	37d8      	adds	r7, #216	; 0xd8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20001b08 	.word	0x20001b08

08002ab4 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 8002aba:	f248 0328 	movw	r3, #32808	; 0x8028
 8002abe:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f011 fcd7 	bl	801447a <memset>
	tab[0] = (cmd>>8);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002adc:	463b      	mov	r3, r7
 8002ade:	2102      	movs	r1, #2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fe2b 	bl	800273c <_Z5pec15Pci>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002aea:	88bb      	ldrh	r3, [r7, #4]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002af4:	88bb      	ldrh	r3, [r7, #4]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002afa:	f7ff fe53 	bl	80027a4 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002afe:	2200      	movs	r2, #0
 8002b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b08:	f005 fc1a 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b0c:	4639      	mov	r1, r7
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	2204      	movs	r2, #4
 8002b12:	4807      	ldr	r0, [pc, #28]	; (8002b30 <_Z8mute_disv+0x7c>)
 8002b14:	f008 ffb3 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f005 fc0d 	bl	8008340 <HAL_GPIO_WritePin>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20001b08 	.word	0x20001b08

08002b34 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 8002b3a:	f248 0329 	movw	r3, #32809	; 0x8029
 8002b3e:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002b40:	463b      	mov	r3, r7
 8002b42:	2204      	movs	r2, #4
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f011 fc97 	bl	801447a <memset>
	tab[0] = (cmd>>8);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b5c:	463b      	mov	r3, r7
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fdeb 	bl	800273c <_Z5pec15Pci>
 8002b66:	4603      	mov	r3, r0
 8002b68:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002b74:	88bb      	ldrh	r3, [r7, #4]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002b7a:	f7ff fe13 	bl	80027a4 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b88:	f005 fbda 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b8c:	4639      	mov	r1, r7
 8002b8e:	2364      	movs	r3, #100	; 0x64
 8002b90:	2204      	movs	r2, #4
 8002b92:	4807      	ldr	r0, [pc, #28]	; (8002bb0 <_Z10unmute_disv+0x7c>)
 8002b94:	f008 ff73 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba2:	f005 fbcd 	bl	8008340 <HAL_GPIO_WritePin>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20001b08 	.word	0x20001b08

08002bb4 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002bbe:	f7ff ffb9 	bl	8002b34 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002bc2:	f248 0314 	movw	r3, #32788	; 0x8014
 8002bc6:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	220c      	movs	r2, #12
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f011 fc52 	bl	801447a <memset>
	tab[0] = (cmd>>8);
 8002bd6:	8afb      	ldrh	r3, [r7, #22]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002be0:	8afb      	ldrh	r3, [r7, #22]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	2102      	movs	r1, #2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fda5 	bl	800273c <_Z5pec15Pci>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002bf6:	8abb      	ldrh	r3, [r7, #20]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002c00:	8abb      	ldrh	r3, [r7, #20]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b25a      	sxtb	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3302      	adds	r3, #2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b25a      	sxtb	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b25a      	sxtb	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3305      	adds	r3, #5
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	3304      	adds	r3, #4
 8002c64:	2106      	movs	r1, #6
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd68 	bl	800273c <_Z5pec15Pci>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002c70:	8abb      	ldrh	r3, [r7, #20]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002c7a:	8abb      	ldrh	r3, [r7, #20]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002c80:	f7ff fd90 	bl	80027a4 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8e:	f005 fb57 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002c92:	f107 0108 	add.w	r1, r7, #8
 8002c96:	2364      	movs	r3, #100	; 0x64
 8002c98:	220c      	movs	r2, #12
 8002c9a:	483c      	ldr	r0, [pc, #240]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002c9c:	f008 feef 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002caa:	f005 fb49 	bl	8008340 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002cae:	f248 0301 	movw	r3, #32769	; 0x8001
 8002cb2:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	220c      	movs	r2, #12
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f011 fbdc 	bl	801447a <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002cc2:	8afb      	ldrh	r3, [r7, #22]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fd2f 	bl	800273c <_Z5pec15Pci>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002ce2:	8abb      	ldrh	r3, [r7, #20]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002cec:	8abb      	ldrh	r3, [r7, #20]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d00:	789b      	ldrb	r3, [r3, #2]
 8002d02:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d06:	78db      	ldrb	r3, [r3, #3]
 8002d08:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	dc0c      	bgt.n	8002d2a <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d12:	791b      	ldrb	r3, [r3, #4]
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	2101      	movs	r1, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d28:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d2c:	791b      	ldrb	r3, [r3, #4]
 8002d2e:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d32:	795b      	ldrb	r3, [r3, #5]
 8002d34:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	2106      	movs	r1, #6
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fcfc 	bl	800273c <_Z5pec15Pci>
 8002d44:	4603      	mov	r3, r0
 8002d46:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002d48:	8abb      	ldrh	r3, [r7, #20]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002d52:	8abb      	ldrh	r3, [r7, #20]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d62:	f005 faed 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002d66:	f107 0108 	add.w	r1, r7, #8
 8002d6a:	2364      	movs	r3, #100	; 0x64
 8002d6c:	220c      	movs	r2, #12
 8002d6e:	4807      	ldr	r0, [pc, #28]	; (8002d8c <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002d70:	f008 fe85 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d74:	2201      	movs	r2, #1
 8002d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7e:	f005 fadf 	bl	8008340 <HAL_GPIO_WritePin>


}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20001b08 	.word	0x20001b08
 8002d90:	20000214 	.word	0x20000214

08002d94 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b09a      	sub	sp, #104	; 0x68
 8002d98:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002d9a:	f248 0314 	movw	r3, #32788	; 0x8014
 8002d9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002da2:	463b      	mov	r3, r7
 8002da4:	220c      	movs	r2, #12
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f011 fb66 	bl	801447a <memset>
	tab[0] = (cmd>>8);
 8002dae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002dba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fcb8 	bl	800273c <_Z5pec15Pci>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002dd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002dde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	3304      	adds	r3, #4
 8002e02:	2106      	movs	r1, #6
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fc99 	bl	800273c <_Z5pec15Pci>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002e10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002e1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002e24:	f7ff fcbe 	bl	80027a4 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e32:	f005 fa85 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002e36:	4639      	mov	r1, r7
 8002e38:	2364      	movs	r3, #100	; 0x64
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	4838      	ldr	r0, [pc, #224]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002e3e:	f008 fe1e 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002e42:	2201      	movs	r2, #1
 8002e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4c:	f005 fa78 	bl	8008340 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002e50:	f248 0301 	movw	r3, #32769	; 0x8001
 8002e54:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002e58:	463b      	mov	r3, r7
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f011 fb0b 	bl	801447a <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002e64:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002e70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002e78:	463b      	mov	r3, r7
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fc5d 	bl	800273c <_Z5pec15Pci>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002e88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002e94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eb0:	789b      	ldrb	r3, [r3, #2]
 8002eb2:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eb6:	78db      	ldrb	r3, [r3, #3]
 8002eb8:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ec2:	795b      	ldrb	r3, [r3, #5]
 8002ec4:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2106      	movs	r1, #6
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fc35 	bl	800273c <_Z5pec15Pci>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002ed8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002ee4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002eec:	2200      	movs	r2, #0
 8002eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef6:	f005 fa23 	bl	8008340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002efa:	4639      	mov	r1, r7
 8002efc:	2364      	movs	r3, #100	; 0x64
 8002efe:	220c      	movs	r2, #12
 8002f00:	4807      	ldr	r0, [pc, #28]	; (8002f20 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002f02:	f008 fdbc 	bl	800ba7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002f06:	2201      	movs	r2, #1
 8002f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f10:	f005 fa16 	bl	8008340 <HAL_GPIO_WritePin>

	mute_dis();
 8002f14:	f7ff fdce 	bl	8002ab4 <_Z8mute_disv>
}
 8002f18:	bf00      	nop
 8002f1a:	3768      	adds	r7, #104	; 0x68
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20001b08 	.word	0x20001b08
 8002f24:	20000214 	.word	0x20000214

08002f28 <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002f38:	2301      	movs	r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	e040      	b.n	8002fc0 <_Z24temperature_calculationst+0x98>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002f3e:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <_Z24temperature_calculationst+0xb4>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d335      	bcc.n	8002fba <_Z24temperature_calculationst+0x92>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 8002f4e:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <_Z24temperature_calculationst+0xb4>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	; (8002fdc <_Z24temperature_calculationst+0xb4>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f7e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002f82:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <_Z24temperature_calculationst+0xb4>)
 8002f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <_Z24temperature_calculationst+0xb4>)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8002fb8:	e005      	b.n	8002fc6 <_Z24temperature_calculationst+0x9e>
	for(unsigned int i = 1; i < 28; i++)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b1b      	cmp	r3, #27
 8002fc4:	d9bb      	bls.n	8002f3e <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	ee07 3a90 	vmov	s15, r3
}
 8002fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	08016b20 	.word	0x08016b20

08002fe0 <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <_Z16get_temperaturesv+0x8c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	e028      	b.n	8003046 <_Z16get_temperaturesv+0x66>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[7-i]);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <_Z16get_temperaturesv+0x8c>)
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff8f 	bl	8002f28 <_Z24temperature_calculationst>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003012:	ee17 3a90 	vmov	r3, s15
 8003016:	b29b      	uxth	r3, r3
 8003018:	b2d9      	uxtb	r1, r3
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <_Z16get_temperaturesv+0x8c>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3320      	adds	r3, #32
 8003022:	460a      	mov	r2, r1
 8003024:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <_Z16get_temperaturesv+0x8c>)
 8003028:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800302c:	490f      	ldr	r1, [pc, #60]	; (800306c <_Z16get_temperaturesv+0x8c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	440b      	add	r3, r1
 8003032:	3320      	adds	r3, #32
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <_Z16get_temperaturesv+0x8c>)
 800303c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3301      	adds	r3, #1
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d9d3      	bls.n	8002ff4 <_Z16get_temperaturesv+0x14>
	}
	data.temperatures.average = data.temperatures.average / 6;
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <_Z16get_temperaturesv+0x8c>)
 800304e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <_Z16get_temperaturesv+0x90>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <_Z16get_temperaturesv+0x8c>)
 800305e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20001478 	.word	0x20001478
 8003070:	aaaaaaab 	.word	0xaaaaaaab

08003074 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 8003080:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 8003088:	839a      	strh	r2, [r3, #28]
	data.voltages.highest_cell_voltage_index = 0;
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 800308c:	2200      	movs	r2, #0
 800308e:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 8003090:	2301      	movs	r3, #1
 8003092:	71fb      	strb	r3, [r7, #7]
 8003094:	e021      	b.n	80030da <_Z15min_max_voltagev+0x66>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 8003098:	8b5a      	ldrh	r2, [r3, #26]
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4914      	ldr	r1, [pc, #80]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 800309e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d905      	bls.n	80030b2 <_Z15min_max_voltagev+0x3e>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030b0:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030b4:	8b9a      	ldrh	r2, [r3, #28]
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	490d      	ldr	r1, [pc, #52]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030cc:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <_Z15min_max_voltagev+0x7c>)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	7493      	strb	r3, [r2, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	3301      	adds	r3, #1
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d9da      	bls.n	8003096 <_Z15min_max_voltagev+0x22>
		}
	}
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20001478 	.word	0x20001478

080030f4 <_Z19min_max_temperaturev>:

void min_max_temperature(){
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <_Z19min_max_temperaturev+0x88>)
 80030fc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <_Z19min_max_temperaturev+0x88>)
 8003102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <_Z19min_max_temperaturev+0x88>)
 8003108:	f893 2020 	ldrb.w	r2, [r3, #32]
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <_Z19min_max_temperaturev+0x88>)
 800310e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003112:	2301      	movs	r3, #1
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e026      	b.n	8003166 <_Z19min_max_temperaturev+0x72>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <_Z19min_max_temperaturev+0x88>)
 800311a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800311e:	4917      	ldr	r1, [pc, #92]	; (800317c <_Z19min_max_temperaturev+0x88>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	440b      	add	r3, r1
 8003124:	3320      	adds	r3, #32
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d907      	bls.n	800313c <_Z19min_max_temperaturev+0x48>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 800312c:	4a13      	ldr	r2, [pc, #76]	; (800317c <_Z19min_max_temperaturev+0x88>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3320      	adds	r3, #32
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <_Z19min_max_temperaturev+0x88>)
 8003138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <_Z19min_max_temperaturev+0x88>)
 800313e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003142:	490e      	ldr	r1, [pc, #56]	; (800317c <_Z19min_max_temperaturev+0x88>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	440b      	add	r3, r1
 8003148:	3320      	adds	r3, #32
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d207      	bcs.n	8003160 <_Z19min_max_temperaturev+0x6c>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <_Z19min_max_temperaturev+0x88>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3320      	adds	r3, #32
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <_Z19min_max_temperaturev+0x88>)
 800315c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3301      	adds	r3, #1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d9d5      	bls.n	8003118 <_Z19min_max_temperaturev+0x24>
		}
	}
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20001478 	.word	0x20001478

08003180 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 8003188:	2200      	movs	r2, #0
 800318a:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	e01b      	b.n	80031ca <_Z16voltage_can_calcv+0x4a>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4916      	ldr	r1, [pc, #88]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800319e:	4413      	add	r3, r2
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 80031a2:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <_Z16voltage_can_calcv+0x74>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	099b      	lsrs	r3, r3, #6
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b2d9      	uxtb	r1, r3
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	330c      	adds	r3, #12
 80031c0:	460a      	mov	r2, r1
 80031c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	dde0      	ble.n	8003192 <_Z16voltage_can_calcv+0x12>
	}

	data.voltages.total_can = data.voltages.total / 100;
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <_Z16voltage_can_calcv+0x78>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <_Z16voltage_can_calcv+0x70>)
 80031e0:	831a      	strh	r2, [r3, #24]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20001478 	.word	0x20001478
 80031f4:	10624dd3 	.word	0x10624dd3
 80031f8:	51eb851f 	.word	0x51eb851f

080031fc <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 8003204:	f7ff fa60 	bl	80026c8 <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 8003208:	2001      	movs	r0, #1
 800320a:	f00c ff4d 	bl	80100a8 <osDelay>
		LTC_start_cell_adc();
 800320e:	f7ff fae9 	bl	80027e4 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 8003212:	201e      	movs	r0, #30
 8003214:	f00c ff48 	bl	80100a8 <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 8003218:	4805      	ldr	r0, [pc, #20]	; (8003230 <_Z18start_ltc_functionPv+0x34>)
 800321a:	f7ff fb75 	bl	8002908 <_Z18LTC_get_values_adcPt>

		min_max_voltage();
 800321e:	f7ff ff29 	bl	8003074 <_Z15min_max_voltagev>

		voltage_can_calc();
 8003222:	f7ff ffad 	bl	8003180 <_Z16voltage_can_calcv>

		get_temperatures();
 8003226:	f7ff fedb 	bl	8002fe0 <_Z16get_temperaturesv>

		min_max_temperature();
 800322a:	f7ff ff63 	bl	80030f4 <_Z19min_max_temperaturev>
		osDelay(1);
 800322e:	e7eb      	b.n	8003208 <_Z18start_ltc_functionPv+0xc>
 8003230:	20001478 	.word	0x20001478

08003234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003238:	f001 ff73 	bl	8005122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800323c:	f000 f892 	bl	8003364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003240:	f000 fcac 	bl	8003b9c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003244:	f000 fc6c 	bl	8003b20 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8003248:	f000 f8f0 	bl	800342c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800324c:	f000 fa0c 	bl	8003668 <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 8003250:	f000 fa78 	bl	8003744 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8003254:	f000 fab2 	bl	80037bc <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8003258:	f000 fb20 	bl	800389c <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 800325c:	f000 fb60 	bl	8003920 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8003260:	f000 fbbc 	bl	80039dc <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8003264:	f000 fbfa 	bl	8003a5c <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003268:	f00c fe42 	bl	800fef0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800326c:	4a27      	ldr	r2, [pc, #156]	; (800330c <main+0xd8>)
 800326e:	2100      	movs	r1, #0
 8003270:	4827      	ldr	r0, [pc, #156]	; (8003310 <main+0xdc>)
 8003272:	f00c fe87 	bl	800ff84 <osThreadNew>
 8003276:	4603      	mov	r3, r0
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <main+0xe0>)
 800327a:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <main+0xe4>)
 800327e:	2100      	movs	r1, #0
 8003280:	4826      	ldr	r0, [pc, #152]	; (800331c <main+0xe8>)
 8003282:	f00c fe7f 	bl	800ff84 <osThreadNew>
 8003286:	4603      	mov	r3, r0
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <main+0xec>)
 800328a:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 800328c:	4a25      	ldr	r2, [pc, #148]	; (8003324 <main+0xf0>)
 800328e:	2100      	movs	r1, #0
 8003290:	4825      	ldr	r0, [pc, #148]	; (8003328 <main+0xf4>)
 8003292:	f00c fe77 	bl	800ff84 <osThreadNew>
 8003296:	4603      	mov	r3, r0
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <main+0xf8>)
 800329a:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <main+0xfc>)
 800329e:	2100      	movs	r1, #0
 80032a0:	4824      	ldr	r0, [pc, #144]	; (8003334 <main+0x100>)
 80032a2:	f00c fe6f 	bl	800ff84 <osThreadNew>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a23      	ldr	r2, [pc, #140]	; (8003338 <main+0x104>)
 80032aa:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <main+0x108>)
 80032ae:	2100      	movs	r1, #0
 80032b0:	4823      	ldr	r0, [pc, #140]	; (8003340 <main+0x10c>)
 80032b2:	f00c fe67 	bl	800ff84 <osThreadNew>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a22      	ldr	r2, [pc, #136]	; (8003344 <main+0x110>)
 80032ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  HAL_Delay(2000);
 80032bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032c0:	f001 ff68 	bl	8005194 <HAL_Delay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 80032c4:	2201      	movs	r2, #1
 80032c6:	2104      	movs	r1, #4
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032cc:	f005 f838 	bl	8008340 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80032d0:	481d      	ldr	r0, [pc, #116]	; (8003348 <main+0x114>)
 80032d2:	f009 f979 	bl	800c5c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80032d6:	481d      	ldr	r0, [pc, #116]	; (800334c <main+0x118>)
 80032d8:	f009 f90e 	bl	800c4f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80032dc:	481c      	ldr	r0, [pc, #112]	; (8003350 <main+0x11c>)
 80032de:	f009 f90b 	bl	800c4f8 <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80032e2:	217f      	movs	r1, #127	; 0x7f
 80032e4:	481b      	ldr	r0, [pc, #108]	; (8003354 <main+0x120>)
 80032e6:	f003 fbb7 	bl	8006a58 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80032ea:	217f      	movs	r1, #127	; 0x7f
 80032ec:	481a      	ldr	r0, [pc, #104]	; (8003358 <main+0x124>)
 80032ee:	f003 fbb3 	bl	8006a58 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 80032f2:	2208      	movs	r2, #8
 80032f4:	4919      	ldr	r1, [pc, #100]	; (800335c <main+0x128>)
 80032f6:	4817      	ldr	r0, [pc, #92]	; (8003354 <main+0x120>)
 80032f8:	f002 faf2 	bl	80058e0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 80032fc:	2264      	movs	r2, #100	; 0x64
 80032fe:	4918      	ldr	r1, [pc, #96]	; (8003360 <main+0x12c>)
 8003300:	4815      	ldr	r0, [pc, #84]	; (8003358 <main+0x124>)
 8003302:	f002 faed 	bl	80058e0 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003306:	f00c fe17 	bl	800ff38 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 800330a:	e7fe      	b.n	800330a <main+0xd6>
 800330c:	08016bf0 	.word	0x08016bf0
 8003310:	08003cc1 	.word	0x08003cc1
 8003314:	20001c50 	.word	0x20001c50
 8003318:	08016c14 	.word	0x08016c14
 800331c:	080031fd 	.word	0x080031fd
 8003320:	20001c54 	.word	0x20001c54
 8003324:	08016c38 	.word	0x08016c38
 8003328:	080046d5 	.word	0x080046d5
 800332c:	20002500 	.word	0x20002500
 8003330:	08016c5c 	.word	0x08016c5c
 8003334:	08001049 	.word	0x08001049
 8003338:	20002dac 	.word	0x20002dac
 800333c:	08016c80 	.word	0x08016c80
 8003340:	08001985 	.word	0x08001985
 8003344:	20003658 	.word	0x20003658
 8003348:	20001b6c 	.word	0x20001b6c
 800334c:	20001bb8 	.word	0x20001bb8
 8003350:	20001c04 	.word	0x20001c04
 8003354:	2000191c 	.word	0x2000191c
 8003358:	20001984 	.word	0x20001984
 800335c:	200014a0 	.word	0x200014a0
 8003360:	200014b0 	.word	0x200014b0

08003364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b098      	sub	sp, #96	; 0x60
 8003368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800336a:	f107 0318 	add.w	r3, r7, #24
 800336e:	2248      	movs	r2, #72	; 0x48
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f011 f881 	bl	801447a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800338a:	f006 f9e9 	bl	8009760 <HAL_PWREx_ControlVoltageScaling>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <SystemClock_Config+0x3e>
  {
    Error_Handler();
 800339e:	f000 fcab 	bl	8003cf8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80033a2:	2329      	movs	r3, #41	; 0x29
 80033a4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033ac:	2301      	movs	r3, #1
 80033ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80033b0:	2301      	movs	r3, #1
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b4:	2302      	movs	r3, #2
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033b8:	2303      	movs	r3, #3
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80033bc:	2302      	movs	r3, #2
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80033c0:	2310      	movs	r3, #16
 80033c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033c4:	2302      	movs	r3, #2
 80033c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033c8:	2302      	movs	r3, #2
 80033ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033cc:	2302      	movs	r3, #2
 80033ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f006 facd 	bl	8009974 <HAL_RCC_OscConfig>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80033ea:	f000 fc85 	bl	8003cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ee:	230f      	movs	r3, #15
 80033f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f2:	2303      	movs	r3, #3
 80033f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	2103      	movs	r1, #3
 8003408:	4618      	mov	r0, r3
 800340a:	f006 ff2f 	bl	800a26c <HAL_RCC_ClockConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800341e:	f000 fc6b 	bl	8003cf8 <Error_Handler>
  }
}
 8003422:	bf00      	nop
 8003424:	3760      	adds	r7, #96	; 0x60
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003432:	f107 031c 	add.w	r3, r7, #28
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
 800344c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800344e:	4b7c      	ldr	r3, [pc, #496]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003450:	4a7c      	ldr	r2, [pc, #496]	; (8003644 <_ZL12MX_ADC1_Initv+0x218>)
 8003452:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003454:	4b7a      	ldr	r3, [pc, #488]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003456:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800345a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800345c:	4b78      	ldr	r3, [pc, #480]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003462:	4b77      	ldr	r3, [pc, #476]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800346a:	2201      	movs	r2, #1
 800346c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800346e:	4b74      	ldr	r3, [pc, #464]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003470:	2204      	movs	r2, #4
 8003472:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003474:	4b72      	ldr	r3, [pc, #456]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003476:	2200      	movs	r2, #0
 8003478:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800347a:	4b71      	ldr	r3, [pc, #452]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800347c:	2201      	movs	r2, #1
 800347e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003482:	2208      	movs	r2, #8
 8003484:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003486:	4b6e      	ldr	r3, [pc, #440]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003490:	2200      	movs	r2, #0
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003496:	2200      	movs	r2, #0
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800349a:	4b69      	ldr	r3, [pc, #420]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80034a8:	4b65      	ldr	r3, [pc, #404]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034b0:	4863      	ldr	r0, [pc, #396]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80034b2:	f002 f8c3 	bl	800563c <HAL_ADC_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 80034c6:	f000 fc17 	bl	8003cf8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034ce:	f107 031c 	add.w	r3, r7, #28
 80034d2:	4619      	mov	r1, r3
 80034d4:	485a      	ldr	r0, [pc, #360]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80034d6:	f003 fb51 	bl	8006b7c <HAL_ADCEx_MultiModeConfigChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80034ea:	f000 fc05 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80034ee:	4b56      	ldr	r3, [pc, #344]	; (8003648 <_ZL12MX_ADC1_Initv+0x21c>)
 80034f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034f2:	2306      	movs	r3, #6
 80034f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80034f6:	2306      	movs	r3, #6
 80034f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034fa:	237f      	movs	r3, #127	; 0x7f
 80034fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034fe:	2304      	movs	r3, #4
 8003500:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	4619      	mov	r1, r3
 800350a:	484d      	ldr	r0, [pc, #308]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800350c:	f002 fcde 	bl	8005ecc <HAL_ADC_ConfigChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf14      	ite	ne
 8003516:	2301      	movne	r3, #1
 8003518:	2300      	moveq	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8003520:	f000 fbea 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <_ZL12MX_ADC1_Initv+0x220>)
 8003526:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003528:	230c      	movs	r3, #12
 800352a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4843      	ldr	r0, [pc, #268]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003532:	f002 fccb 	bl	8005ecc <HAL_ADC_ConfigChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 8003546:	f000 fbd7 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <_ZL12MX_ADC1_Initv+0x224>)
 800354c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800354e:	2312      	movs	r3, #18
 8003550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	483a      	ldr	r0, [pc, #232]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 8003558:	f002 fcb8 	bl	8005ecc <HAL_ADC_ConfigChannel>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 800356c:	f000 fbc4 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <_ZL12MX_ADC1_Initv+0x228>)
 8003572:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003574:	2318      	movs	r3, #24
 8003576:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4830      	ldr	r0, [pc, #192]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800357e:	f002 fca5 	bl	8005ecc <HAL_ADC_ConfigChannel>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 8003592:	f000 fbb1 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <_ZL12MX_ADC1_Initv+0x22c>)
 8003598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800359a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4826      	ldr	r0, [pc, #152]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80035a6:	f002 fc91 	bl	8005ecc <HAL_ADC_ConfigChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 80035ba:	f000 fb9d 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <_ZL12MX_ADC1_Initv+0x230>)
 80035c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80035c2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80035c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	481c      	ldr	r0, [pc, #112]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80035ce:	f002 fc7d 	bl	8005ecc <HAL_ADC_ConfigChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 80035e2:	f000 fb89 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <_ZL12MX_ADC1_Initv+0x234>)
 80035e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80035ea:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80035ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4812      	ldr	r0, [pc, #72]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 80035f6:	f002 fc69 	bl	8005ecc <HAL_ADC_ConfigChannel>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 800360a:	f000 fb75 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <_ZL12MX_ADC1_Initv+0x238>)
 8003610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003612:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4808      	ldr	r0, [pc, #32]	; (8003640 <_ZL12MX_ADC1_Initv+0x214>)
 800361e:	f002 fc55 	bl	8005ecc <HAL_ADC_ConfigChannel>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 8003632:	f000 fb61 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	3728      	adds	r7, #40	; 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2000191c 	.word	0x2000191c
 8003644:	50040000 	.word	0x50040000
 8003648:	21800100 	.word	0x21800100
 800364c:	25b00200 	.word	0x25b00200
 8003650:	2a000400 	.word	0x2a000400
 8003654:	2e300800 	.word	0x2e300800
 8003658:	32601000 	.word	0x32601000
 800365c:	36902000 	.word	0x36902000
 8003660:	3ac04000 	.word	0x3ac04000
 8003664:	3ef08000 	.word	0x3ef08000

08003668 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800366e:	463b      	mov	r3, r7
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
 800367c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800367e:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 8003680:	4a2e      	ldr	r2, [pc, #184]	; (800373c <_ZL12MX_ADC2_Initv+0xd4>)
 8003682:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 8003686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800368a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036a0:	2204      	movs	r2, #4
 80036a2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036e0:	4815      	ldr	r0, [pc, #84]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 80036e2:	f001 ffab 	bl	800563c <HAL_ADC_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 80036f6:	f000 faff 	bl	8003cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <_ZL12MX_ADC2_Initv+0xd8>)
 80036fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036fe:	2306      	movs	r3, #6
 8003700:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003702:	2306      	movs	r3, #6
 8003704:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003706:	237f      	movs	r3, #127	; 0x7f
 8003708:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003712:	463b      	mov	r3, r7
 8003714:	4619      	mov	r1, r3
 8003716:	4808      	ldr	r0, [pc, #32]	; (8003738 <_ZL12MX_ADC2_Initv+0xd0>)
 8003718:	f002 fbd8 	bl	8005ecc <HAL_ADC_ConfigChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 800372c:	f000 fae4 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20001984 	.word	0x20001984
 800373c:	50040100 	.word	0x50040100
 8003740:	43210000 	.word	0x43210000

08003744 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 800374a:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <_ZL12MX_CAN1_Initv+0x74>)
 800374c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003750:	2202      	movs	r2, #2
 8003752:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003754:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003762:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003766:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 800376a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800376e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003772:	2200      	movs	r2, #0
 8003774:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003778:	2200      	movs	r2, #0
 800377a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 800377e:	2200      	movs	r2, #0
 8003780:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003784:	2200      	movs	r2, #0
 8003786:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 800378a:	2200      	movs	r2, #0
 800378c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003790:	2200      	movs	r2, #0
 8003792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003794:	4807      	ldr	r0, [pc, #28]	; (80037b4 <_ZL12MX_CAN1_Initv+0x70>)
 8003796:	f003 fa95 	bl	8006cc4 <HAL_CAN_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 80037aa:	f000 faa5 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20001aac 	.word	0x20001aac
 80037b8:	40006400 	.word	0x40006400

080037bc <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037d4:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037d6:	4a30      	ldr	r2, [pc, #192]	; (8003898 <_ZL11MX_RTC_Initv+0xdc>)
 80037d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80037e0:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037e2:	227f      	movs	r2, #127	; 0x7f
 80037e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80037e6:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037e8:	22ff      	movs	r2, #255	; 0xff
 80037ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 8003800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003804:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 8003808:	2200      	movs	r2, #0
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800380c:	4821      	ldr	r0, [pc, #132]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 800380e:	f007 fd57 	bl	800b2c0 <HAL_RTC_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8003822:	f000 fa69 	bl	8003cf8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003826:	2300      	movs	r3, #0
 8003828:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800382a:	2300      	movs	r3, #0
 800382c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800382e:	2300      	movs	r3, #0
 8003830:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	2201      	movs	r2, #1
 800383e:	4619      	mov	r1, r3
 8003840:	4814      	ldr	r0, [pc, #80]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 8003842:	f007 fdcd 	bl	800b3e0 <HAL_RTC_SetTime>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8003856:	f000 fa4f 	bl	8003cf8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800385a:	2301      	movs	r3, #1
 800385c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800385e:	2301      	movs	r3, #1
 8003860:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003862:	2301      	movs	r3, #1
 8003864:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003866:	2300      	movs	r3, #0
 8003868:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800386a:	463b      	mov	r3, r7
 800386c:	2201      	movs	r2, #1
 800386e:	4619      	mov	r1, r3
 8003870:	4808      	ldr	r0, [pc, #32]	; (8003894 <_ZL11MX_RTC_Initv+0xd8>)
 8003872:	f007 feb7 	bl	800b5e4 <HAL_RTC_SetDate>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 8003886:	f000 fa37 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20001ad4 	.word	0x20001ad4
 8003898:	40002800 	.word	0x40002800

0800389c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <_ZL12MX_SPI1_Initv+0x80>)
 80038a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038be:	2202      	movs	r2, #2
 80038c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038d2:	2228      	movs	r2, #40	; 0x28
 80038d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ea:	2207      	movs	r2, #7
 80038ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038fa:	4807      	ldr	r0, [pc, #28]	; (8003918 <_ZL12MX_SPI1_Initv+0x7c>)
 80038fc:	f008 f81c 	bl	800b938 <HAL_SPI_Init>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8003910:	f000 f9f2 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20001b08 	.word	0x20001b08
 800391c:	40013000 	.word	0x40013000

08003920 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003926:	f107 0310 	add.w	r3, r7, #16
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <_ZL12MX_TIM3_Initv+0xb8>)
 8003942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003946:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800394a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003954:	2231      	movs	r2, #49	; 0x31
 8003956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003964:	481b      	ldr	r0, [pc, #108]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8003966:	f008 fd6f 	bl	800c448 <HAL_TIM_Base_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800397a:	f000 f9bd 	bl	8003cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800397e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	4619      	mov	r1, r3
 800398a:	4812      	ldr	r0, [pc, #72]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 800398c:	f008 ffab 	bl	800c8e6 <HAL_TIM_ConfigClockSource>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 80039a0:	f000 f9aa 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4808      	ldr	r0, [pc, #32]	; (80039d4 <_ZL12MX_TIM3_Initv+0xb4>)
 80039b2:	f009 f9bd 	bl	800cd30 <HAL_TIMEx_MasterConfigSynchronization>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80039c6:	f000 f997 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20001b6c 	.word	0x20001b6c
 80039d8:	40000400 	.word	0x40000400

080039dc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <_ZL12MX_TIM6_Initv+0x7c>)
 80039f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 80039f4:	f640 125f 	movw	r2, #2399	; 0x95f
 80039f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 8003a02:	2209      	movs	r2, #9
 8003a04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a0c:	4811      	ldr	r0, [pc, #68]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 8003a0e:	f008 fd1b 	bl	800c448 <HAL_TIM_Base_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003a22:	f000 f969 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a26:	2320      	movs	r3, #32
 8003a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4808      	ldr	r0, [pc, #32]	; (8003a54 <_ZL12MX_TIM6_Initv+0x78>)
 8003a34:	f009 f97c 	bl	800cd30 <HAL_TIMEx_MasterConfigSynchronization>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003a48:	f000 f956 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20001bb8 	.word	0x20001bb8
 8003a58:	40001000 	.word	0x40001000

08003a5c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a62:	f107 0310 	add.w	r3, r7, #16
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a7a:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <_ZL12MX_TIM8_Initv+0xc0>)
 8003a7e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a82:	225f      	movs	r2, #95	; 0x5f
 8003a84:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a8e:	2231      	movs	r2, #49	; 0x31
 8003a90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003aa4:	481c      	ldr	r0, [pc, #112]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003aa6:	f008 fccf 	bl	800c448 <HAL_TIM_Base_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003aba:	f000 f91d 	bl	8003cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4813      	ldr	r0, [pc, #76]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003acc:	f008 ff0b 	bl	800c8e6 <HAL_TIM_ConfigClockSource>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003ae0:	f000 f90a 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003ae8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003aec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <_ZL12MX_TIM8_Initv+0xbc>)
 8003af8:	f009 f91a 	bl	800cd30 <HAL_TIMEx_MasterConfigSynchronization>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8003b0c:	f000 f8f4 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003b10:	bf00      	nop
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20001c04 	.word	0x20001c04
 8003b1c:	40013400 	.word	0x40013400

08003b20 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	6493      	str	r3, [r2, #72]	; 0x48
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6493      	str	r3, [r2, #72]	; 0x48
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5a:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	6493      	str	r3, [r2, #72]	; 0x48
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <_ZL11MX_DMA_Initv+0x78>)
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2105      	movs	r1, #5
 8003b72:	200b      	movs	r0, #11
 8003b74:	f003 ff9e 	bl	8007ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b78:	200b      	movs	r0, #11
 8003b7a:	f003 ffb7 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2105      	movs	r1, #5
 8003b82:	2038      	movs	r0, #56	; 0x38
 8003b84:	f003 ff96 	bl	8007ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003b88:	2038      	movs	r0, #56	; 0x38
 8003b8a:	f003 ffaf 	bl	8007aec <HAL_NVIC_EnableIRQ>

}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000

08003b9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bb2:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	4a3f      	ldr	r2, [pc, #252]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bca:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	4a39      	ldr	r2, [pc, #228]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	4a33      	ldr	r2, [pc, #204]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfa:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c06:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x118>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	f248 0104 	movw	r1, #32772	; 0x8004
 8003c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1c:	f004 fb90 	bl	8008340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUSE_VOLTAGE_GPIO_Port, FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c26:	4824      	ldr	r0, [pc, #144]	; (8003cb8 <_ZL12MX_GPIO_Initv+0x11c>)
 8003c28:	f004 fb8a 	bl	8008340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003c32:	4822      	ldr	r0, [pc, #136]	; (8003cbc <_ZL12MX_GPIO_Initv+0x120>)
 8003c34:	f004 fb84 	bl	8008340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003c38:	f248 0304 	movw	r3, #32772	; 0x8004
 8003c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0314 	add.w	r3, r7, #20
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c54:	f004 f9ca 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERLOCK_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin;
 8003c58:	2304      	movs	r3, #4
 8003c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c60:	2301      	movs	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4813      	ldr	r0, [pc, #76]	; (8003cb8 <_ZL12MX_GPIO_Initv+0x11c>)
 8003c6c:	f004 f9be 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = FUSE_VOLTAGE_Pin;
 8003c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FUSE_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	4619      	mov	r1, r3
 8003c88:	480b      	ldr	r0, [pc, #44]	; (8003cb8 <_ZL12MX_GPIO_Initv+0x11c>)
 8003c8a:	f004 f9af 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003c8e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <_ZL12MX_GPIO_Initv+0x120>)
 8003ca8:	f004 f9a0 	bl	8007fec <HAL_GPIO_Init>

}
 8003cac:	bf00      	nop
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	48000400 	.word	0x48000400
 8003cbc:	48000800 	.word	0x48000800

08003cc0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003cc8:	f00e fe90 	bl	80129ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f00c f9eb 	bl	80100a8 <osDelay>
 8003cd2:	e7fb      	b.n	8003ccc <_Z16StartDefaultTaskPv+0xc>

08003cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003ce6:	f001 fa35 	bl	8005154 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40014400 	.word	0x40014400

08003cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfc:	b672      	cpsid	i
}
 8003cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <Error_Handler+0x8>

08003d02 <RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8a1b      	ldrh	r3, [r3, #16]
 8003d12:	3301      	adds	r3, #1
 8003d14:	425a      	negs	r2, r3
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	f002 020f 	and.w	r2, r2, #15
 8003d1e:	bf58      	it	pl
 8003d20:	4253      	negpl	r3, r2
 8003d22:	73fb      	strb	r3, [r7, #15]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8a5b      	ldrh	r3, [r3, #18]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d101      	bne.n	8003d34 <RB_Write+0x32>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e00a      	b.n	8003d4a <RB_Write+0x48>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = Value;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8a1b      	ldrh	r3, [r3, #16]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	545a      	strb	r2, [r3, r1]

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	821a      	strh	r2, [r3, #16]

	// Everything is ok - return OK status
	return RB_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003d7a:	eeb1 7a67 	vneg.f32	s14, s15
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d88:	eeb0 0a66 	vmov.f32	s0, s13
 8003d8c:	f00f fc9c 	bl	80136c8 <expf>
 8003d90:	eef0 7a40 	vmov.f32	s15, s0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003da0:	eeb1 7a67 	vneg.f32	s14, s15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003daa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dae:	eeb0 0a66 	vmov.f32	s0, s13
 8003db2:	f00f fc89 	bl	80136c8 <expf>
 8003db6:	eef0 7a40 	vmov.f32	s15, s0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003dc6:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003dde:	eef1 6a67 	vneg.f32	s13, s15
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	edd3 7a07 	vldr	s15, [r3, #28]
 8003de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dec:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003e98 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003df4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003e98 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003df8:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003e62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 8003e6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 8003e8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	42700000 	.word	0x42700000
 8003e9c:	3ba3d70a 	.word	0x3ba3d70a
 8003ea0:	3dcccccd 	.word	0x3dcccccd
 8003ea4:	3951b717 	.word	0x3951b717
 8003ea8:	48f42400 	.word	0x48f42400

08003eac <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6178      	str	r0, [r7, #20]
 8003eb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8003eb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ebc:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ec0:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	edd3 6a00 	vldr	s13, [r3]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	edd3 6a00 	vldr	s13, [r3]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	edd3 6a00 	vldr	s13, [r3]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f103 0020 	add.w	r0, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	33a8      	adds	r3, #168	; 0xa8
 8004002:	461a      	mov	r2, r3
 8004004:	2109      	movs	r1, #9
 8004006:	f000 f9a5 	bl	8004354 <_Z6hornerPKfjS0_>
 800400a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004024:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004028:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004042:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	edd3 6a00 	vldr	s13, [r3]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004052:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8004076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800407a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	ed93 7a00 	vldr	s14, [r3]
 8004084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	33a8      	adds	r3, #168	; 0xa8
 800409a:	461a      	mov	r2, r3
 800409c:	2108      	movs	r1, #8
 800409e:	f000 f959 	bl	8004354 <_Z6hornerPKfjS0_>
 80040a2:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80040ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80040b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80040b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80040c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80040d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80040d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80040dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e8:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80040f2:	edd7 6a06 	vldr	s13, [r7, #24]
 80040f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 8004108:	ed97 7a06 	vldr	s14, [r7, #24]
 800410c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	33a8      	adds	r3, #168	; 0xa8
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	613a      	str	r2, [r7, #16]
 8004136:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800413a:	617a      	str	r2, [r7, #20]
 800413c:	f107 0214 	add.w	r2, r7, #20
 8004140:	f107 0110 	add.w	r1, r7, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f933 	bl	80043b0 <_ZSt5clampIfERKT_S2_S2_S2_>
 800414a:	4603      	mov	r3, r0
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004154:	bf00      	nop
 8004156:	3730      	adds	r7, #48	; 0x30
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 8004166:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80041f4 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f897 	bl	800429e <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fdf1 	bl	8003d58 <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 8004176:	eddf 1a20 	vldr	s3, [pc, #128]	; 80041f8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800417a:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80041f8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800417e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80041fc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 8004182:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fe90 	bl	8003eac <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e00c      	b.n	80041ac <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x50>
        update(0, Voltage);
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	f107 0308 	add.w	r3, r7, #8
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fea5 	bl	8003ef0 <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004200 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa4>
 80041ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c2:	d4e6      	bmi.n	8004192 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x36>
    }

    set_filter_covariance();
 80041c4:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80041f8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80041c8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80041f8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80041cc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80041fc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 80041d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004204 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa8>
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe69 	bl	8003eac <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 80041da:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004208 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xac>
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f85d 	bl	800429e <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fdb7 	bl	8003d58 <_ZN7SoC_EKF17set_update_matrixEv>
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	42c80000 	.word	0x42c80000
 80041f8:	3dcccccd 	.word	0x3dcccccd
 80041fc:	3951b717 	.word	0x3951b717
 8004200:	461c4000 	.word	0x461c4000
 8004204:	48f42400 	.word	0x48f42400
 8004208:	3d4ccccd 	.word	0x3d4ccccd

0800420c <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f8f0 	bl	80043fe <_ZSt12__miter_baseIPKfET_S2_>
 800421e:	4604      	mov	r4, r0
 8004220:	68b8      	ldr	r0, [r7, #8]
 8004222:	f000 f8ec 	bl	80043fe <_ZSt12__miter_baseIPKfET_S2_>
 8004226:	4603      	mov	r3, r0
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4619      	mov	r1, r3
 800422c:	4620      	mov	r0, r4
 800422e:	f000 f8f1 	bl	8004414 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004232:	4603      	mov	r3, r0
    }
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f103 0118 	add.w	r1, r3, #24
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3308      	adds	r3, #8
 8004250:	461a      	mov	r2, r3
 8004252:	6838      	ldr	r0, [r7, #0]
 8004254:	f7ff ffda 	bl	800420c <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800428e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	671a      	str	r2, [r3, #112]	; 0x70
};
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	605a      	str	r2, [r3, #4]
};
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	18d1      	adds	r1, r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3320      	adds	r3, #32
 80042fc:	461a      	mov	r2, r3
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	f7ff ff84 	bl	800420c <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e01a      	b.n	8004340 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x5c>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	edd3 7a00 	vldr	s15, [r3]
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3310      	adds	r3, #16
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	3304      	adds	r3, #4
 8004336:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3301      	adds	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3df      	bcc.n	800430a <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x26>
    }
};
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
    float s = 0;
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e013      	b.n	8004394 <_Z6hornerPKfjS0_+0x40>
        s = s*(*x) + arry[i];
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	ed93 7a00 	vldr	s14, [r3]
 8004372:	edd7 7a05 	vldr	s15, [r7, #20]
 8004376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438a:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	d3e7      	bcc.n	800436c <_Z6hornerPKfjS0_+0x18>
    }
    return s;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	ee07 3a90 	vmov	s15, r3
}
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	ed93 7a00 	vldr	s14, [r3]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	d501      	bpl.n	80043d6 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	e00d      	b.n	80043f2 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	ed93 7a00 	vldr	s14, [r3]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ea:	d501      	bpl.n	80043f0 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	e000      	b.n	80043f2 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80043f0:	68fb      	ldr	r3, [r7, #12]
    }
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004414:	b5b0      	push	{r4, r5, r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f81a 	bl	800445a <_ZSt12__niter_baseIPKfET_S2_>
 8004426:	4604      	mov	r4, r0
 8004428:	68b8      	ldr	r0, [r7, #8]
 800442a:	f000 f816 	bl	800445a <_ZSt12__niter_baseIPKfET_S2_>
 800442e:	4605      	mov	r5, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f81c 	bl	8004470 <_ZSt12__niter_baseIPfET_S1_>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	4629      	mov	r1, r5
 800443e:	4620      	mov	r0, r4
 8004440:	f000 f821 	bl	8004486 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004444:	4602      	mov	r2, r0
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f82b 	bl	80044a6 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004450:	4603      	mov	r3, r0
    }
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bdb0      	pop	{r4, r5, r7, pc}

0800445a <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f811 	bl	80044be <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800449c:	4603      	mov	r3, r0
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
    { return __res; }
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80044ca:	f7fc fdff 	bl	80010cc <_ZSt21is_constant_evaluatedv>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f80d 	bl	80044f8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 80044de:	4603      	mov	r3, r0
 80044e0:	e006      	b.n	80044f0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f829 	bl	800453e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80044ec:	4603      	mov	r3, r0
 80044ee:	bf00      	nop
    }
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	109b      	asrs	r3, r3, #2
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e00c      	b.n	800452a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]
	      ++__first;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3b01      	subs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	dcef      	bgt.n	8004510 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 8004530:	687b      	ldr	r3, [r7, #4]
	}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	109b      	asrs	r3, r3, #2
 8004552:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d006      	beq.n	8004568 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	461a      	mov	r2, r3
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f00f ff6f 	bl	8014446 <memmove>
	  return __result + _Num;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
	}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eeb0 0a67 	vmov.f32	s0, s15
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 80045ae:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	e03e      	b.n	8004634 <_Z17calculate_currentv+0x9c>
	{
		int16_t raw_value = data.current.adc[i];
 80045b6:	4a43      	ldr	r2, [pc, #268]	; (80046c4 <_Z17calculate_currentv+0x12c>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	330e      	adds	r3, #14
 80045bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c0:	807b      	strh	r3, [r7, #2]
		raw_sum += raw_value;
 80045c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80045d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d6:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 80045da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80045ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	d507      	bpl.n	8004604 <_Z17calculate_currentv+0x6c>
 80045f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004600:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 8004604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004610:	ed97 7a03 	vldr	s14, [r7, #12]
 8004614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	dd07      	ble.n	800462e <_Z17calculate_currentv+0x96>
 800461e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462a:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3301      	adds	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b63      	cmp	r3, #99	; 0x63
 8004638:	ddbd      	ble.n	80045b6 <_Z17calculate_currentv+0x1e>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 800463a:	ed97 7a05 	vldr	s14, [r7, #20]
 800463e:	eddf 6a22 	vldr	s13, [pc, #136]	; 80046c8 <_Z17calculate_currentv+0x130>
 8004642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004646:	edc7 7a01 	vstr	s15, [r7, #4]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 800464a:	edd7 7a01 	vldr	s15, [r7, #4]
 800464e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80046cc <_Z17calculate_currentv+0x134>
 8004652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004656:	edc7 7a01 	vstr	s15, [r7, #4]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 800465a:	edd7 7a04 	vldr	s15, [r7, #16]
 800465e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80046cc <_Z17calculate_currentv+0x134>
 8004662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004666:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 800466a:	edd7 7a03 	vldr	s15, [r7, #12]
 800466e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80046cc <_Z17calculate_currentv+0x134>
 8004672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004676:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <_Z17calculate_currentv+0x138>)
 800467c:	ed93 7a00 	vldr	s14, [r3]
 8004680:	edd7 7a01 	vldr	s15, [r7, #4]
 8004684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <_Z17calculate_currentv+0x12c>)
 800468a:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
	data.current.value_max = (float)raw_max * output_current_factor;
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <_Z17calculate_currentv+0x138>)
 8004690:	ed93 7a00 	vldr	s14, [r3]
 8004694:	edd7 7a04 	vldr	s15, [r7, #16]
 8004698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <_Z17calculate_currentv+0x12c>)
 800469e:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	data.current.value_min = (float)raw_min * output_current_factor;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <_Z17calculate_currentv+0x138>)
 80046a4:	ed93 7a00 	vldr	s14, [r3]
 80046a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <_Z17calculate_currentv+0x12c>)
 80046b2:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20001478 	.word	0x20001478
 80046c8:	42c80000 	.word	0x42c80000
 80046cc:	4501b000 	.word	0x4501b000
 80046d0:	20003f04 	.word	0x20003f04

080046d4 <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 80046dc:	4933      	ldr	r1, [pc, #204]	; (80047ac <_Z18start_soc_functionPv+0xd8>)
 80046de:	4834      	ldr	r0, [pc, #208]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 80046e0:	f7ff fdac 	bl	800423c <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 80046e4:	2209      	movs	r2, #9
 80046e6:	4933      	ldr	r1, [pc, #204]	; (80047b4 <_Z18start_soc_functionPv+0xe0>)
 80046e8:	4831      	ldr	r0, [pc, #196]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 80046ea:	f7ff fdfb 	bl	80042e4 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 2);
 80046ee:	2301      	movs	r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	2302      	movs	r3, #2
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	f107 0214 	add.w	r2, r7, #20
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	4619      	mov	r1, r3
 8004700:	482b      	ldr	r0, [pc, #172]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 8004702:	f7ff fddb 	bl	80042bc <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.03f);
 8004706:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80047b8 <_Z18start_soc_functionPv+0xe4>
 800470a:	4829      	ldr	r0, [pc, #164]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 800470c:	f7ff fdc7 	bl	800429e <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 8004710:	4827      	ldr	r0, [pc, #156]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 8004712:	f7ff fb21 	bl	8003d58 <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 8004716:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800471a:	4825      	ldr	r0, [pc, #148]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 800471c:	f7ff fda0 	bl	8004260 <_ZN7SoC_EKF15set_initial_SoCEf>

	osDelay(100);
 8004720:	2064      	movs	r0, #100	; 0x64
 8004722:	f00b fcc1 	bl	80100a8 <osDelay>

	float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <_Z18start_soc_functionPv+0xe8>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004732:	eddf 6a23 	vldr	s13, [pc, #140]	; 80047c0 <_Z18start_soc_functionPv+0xec>
 8004736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800473a:	edc7 7a03 	vstr	s15, [r7, #12]
	data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	4619      	mov	r1, r3
 8004744:	481a      	ldr	r0, [pc, #104]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 8004746:	f7ff fd09 	bl	800415c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>

	for(;;){
		osDelay(30);
 800474a:	201e      	movs	r0, #30
 800474c:	f00b fcac 	bl	80100a8 <osDelay>

		calculate_current();
 8004750:	f7ff ff22 	bl	8004598 <_Z17calculate_currentv>

		float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <_Z18start_soc_functionPv+0xe8>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004760:	eddf 6a17 	vldr	s13, [pc, #92]	; 80047c0 <_Z18start_soc_functionPv+0xec>
 8004764:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004768:	edc7 7a02 	vstr	s15, [r7, #8]
		data.soc.main.update(data.current.value, temp_voltage);
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	461a      	mov	r2, r3
 8004772:	4914      	ldr	r1, [pc, #80]	; (80047c4 <_Z18start_soc_functionPv+0xf0>)
 8004774:	480e      	ldr	r0, [pc, #56]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 8004776:	f7ff fbbb 	bl	8003ef0 <_ZN7SoC_EKF6updateERKfS1_>
		data.soc.value = data.soc.main.get_SoC();
 800477a:	480d      	ldr	r0, [pc, #52]	; (80047b0 <_Z18start_soc_functionPv+0xdc>)
 800477c:	f7ff fefc 	bl	8004578 <_ZN7SoC_EKF7get_SoCEv>
 8004780:	eef0 7a40 	vmov.f32	s15, s0
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <_Z18start_soc_functionPv+0xe8>)
 8004786:	edc3 7aa2 	vstr	s15, [r3, #648]	; 0x288
		data.soc.value_can = (uint8_t)(data.soc.value * 100);
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <_Z18start_soc_functionPv+0xe8>)
 800478c:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8004790:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80047c8 <_Z18start_soc_functionPv+0xf4>
 8004794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800479c:	edc7 7a00 	vstr	s15, [r7]
 80047a0:	783b      	ldrb	r3, [r7, #0]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <_Z18start_soc_functionPv+0xe8>)
 80047a6:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c

	}
 80047aa:	e7ce      	b.n	800474a <_Z18start_soc_functionPv+0x76>
 80047ac:	08016ca4 	.word	0x08016ca4
 80047b0:	2000164c 	.word	0x2000164c
 80047b4:	08016cbc 	.word	0x08016cbc
 80047b8:	3cf5c28f 	.word	0x3cf5c28f
 80047bc:	20001478 	.word	0x20001478
 80047c0:	461c4000 	.word	0x461c4000
 80047c4:	20001640 	.word	0x20001640
 80047c8:	42c80000 	.word	0x42c80000

080047cc <_Z41__static_initialization_and_destruction_0ii>:
}
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d117      	bne.n	800480c <_Z41__static_initialization_and_destruction_0ii+0x40>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d112      	bne.n	800480c <_Z41__static_initialization_and_destruction_0ii+0x40>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800481c <_Z41__static_initialization_and_destruction_0ii+0x50>
 80047f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80047f6:	edd3 6a00 	vldr	s13, [r3]
 80047fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80047fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004808:	edc3 7a00 	vstr	s15, [r3]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	2000021c 	.word	0x2000021c
 800481c:	45800000 	.word	0x45800000
 8004820:	20000220 	.word	0x20000220
 8004824:	20003f04 	.word	0x20003f04

08004828 <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
 800482c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004830:	2001      	movs	r0, #1
 8004832:	f7ff ffcb 	bl	80047cc <_Z41__static_initialization_and_destruction_0ii>
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_MspInit+0x4c>)
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <HAL_MspInit+0x4c>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6613      	str	r3, [r2, #96]	; 0x60
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_MspInit+0x4c>)
 800484c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_MspInit+0x4c>)
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_MspInit+0x4c>)
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	6593      	str	r3, [r2, #88]	; 0x58
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_MspInit+0x4c>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800486e:	2200      	movs	r2, #0
 8004870:	210f      	movs	r1, #15
 8004872:	f06f 0001 	mvn.w	r0, #1
 8004876:	f003 f91d 	bl	8007ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000

08004888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b0b4      	sub	sp, #208	; 0xd0
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a4:	2298      	movs	r2, #152	; 0x98
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f00f fde6 	bl	801447a <memset>
  if(hadc->Instance==ADC1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a97      	ldr	r2, [pc, #604]	; (8004b10 <HAL_ADC_MspInit+0x288>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	f040 80ad 	bne.w	8004a14 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80048ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80048c0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80048c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048cc:	4618      	mov	r0, r3
 80048ce:	f005 ffa3 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 80048d8:	f7ff fa0e 	bl	8003cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80048dc:	4b8d      	ldr	r3, [pc, #564]	; (8004b14 <HAL_ADC_MspInit+0x28c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a8c      	ldr	r2, [pc, #560]	; (8004b14 <HAL_ADC_MspInit+0x28c>)
 80048e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80048e6:	4b8b      	ldr	r3, [pc, #556]	; (8004b14 <HAL_ADC_MspInit+0x28c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10b      	bne.n	8004906 <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 80048ee:	4b8a      	ldr	r3, [pc, #552]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	4a89      	ldr	r2, [pc, #548]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 80048f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048fa:	4b87      	ldr	r3, [pc, #540]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	4b84      	ldr	r3, [pc, #528]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004912:	4b81      	ldr	r3, [pc, #516]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800491e:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	4a7d      	ldr	r2, [pc, #500]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800492a:	4b7b      	ldr	r3, [pc, #492]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004936:	4b78      	ldr	r3, [pc, #480]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	4a77      	ldr	r2, [pc, #476]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004942:	4b75      	ldr	r3, [pc, #468]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 800494e:	23f8      	movs	r3, #248	; 0xf8
 8004950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004954:	230b      	movs	r3, #11
 8004956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004960:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004964:	4619      	mov	r1, r3
 8004966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800496a:	f003 fb3f 	bl	8007fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 800496e:	2330      	movs	r3, #48	; 0x30
 8004970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004974:	230b      	movs	r3, #11
 8004976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497a:	2300      	movs	r3, #0
 800497c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004980:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004984:	4619      	mov	r1, r3
 8004986:	4865      	ldr	r0, [pc, #404]	; (8004b1c <HAL_ADC_MspInit+0x294>)
 8004988:	f003 fb30 	bl	8007fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 800498c:	2301      	movs	r3, #1
 800498e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004992:	230b      	movs	r3, #11
 8004994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 800499e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049a2:	4619      	mov	r1, r3
 80049a4:	485e      	ldr	r0, [pc, #376]	; (8004b20 <HAL_ADC_MspInit+0x298>)
 80049a6:	f003 fb21 	bl	8007fec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80049aa:	4b5e      	ldr	r3, [pc, #376]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049ac:	4a5e      	ldr	r2, [pc, #376]	; (8004b28 <HAL_ADC_MspInit+0x2a0>)
 80049ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80049b0:	4b5c      	ldr	r3, [pc, #368]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049b2:	2205      	movs	r2, #5
 80049b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049b6:	4b5b      	ldr	r3, [pc, #364]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049bc:	4b59      	ldr	r3, [pc, #356]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049c2:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049c8:	4b56      	ldr	r3, [pc, #344]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049d0:	4b54      	ldr	r3, [pc, #336]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049d8:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049da:	2220      	movs	r2, #32
 80049dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80049de:	4b51      	ldr	r3, [pc, #324]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049e6:	484f      	ldr	r0, [pc, #316]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049e8:	f003 f88e 	bl	8007b08 <HAL_DMA_Init>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 80049f2:	f7ff f981 	bl	8003cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049fa:	651a      	str	r2, [r3, #80]	; 0x50
 80049fc:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_ADC_MspInit+0x29c>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2105      	movs	r1, #5
 8004a06:	2012      	movs	r0, #18
 8004a08:	f003 f854 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004a0c:	2012      	movs	r0, #18
 8004a0e:	f003 f86d 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a12:	e079      	b.n	8004b08 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a44      	ldr	r2, [pc, #272]	; (8004b2c <HAL_ADC_MspInit+0x2a4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d174      	bne.n	8004b08 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004a1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004a24:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a30:	4618      	mov	r0, r3
 8004a32:	f005 fef1 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8004a3c:	f7ff f95c 	bl	8003cf8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004a40:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_ADC_MspInit+0x28c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a33      	ldr	r2, [pc, #204]	; (8004b14 <HAL_ADC_MspInit+0x28c>)
 8004a48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004a4a:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <HAL_ADC_MspInit+0x28c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10b      	bne.n	8004a6a <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004a58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5e:	4b2e      	ldr	r3, [pc, #184]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <HAL_ADC_MspInit+0x290>)
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004a82:	2302      	movs	r3, #2
 8004a84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004a88:	230b      	movs	r3, #11
 8004a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004a94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4821      	ldr	r0, [pc, #132]	; (8004b20 <HAL_ADC_MspInit+0x298>)
 8004a9c:	f003 faa6 	bl	8007fec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_ADC_MspInit+0x2ac>)
 8004aa4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004aa6:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004aa8:	2206      	movs	r2, #6
 8004aaa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004acc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ada:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004adc:	4814      	ldr	r0, [pc, #80]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004ade:	f003 f813 	bl	8007b08 <HAL_DMA_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004ae8:	f7ff f906 	bl	8003cf8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004af0:	651a      	str	r2, [r3, #80]	; 0x50
 8004af2:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <HAL_ADC_MspInit+0x2a8>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004af8:	2200      	movs	r2, #0
 8004afa:	2105      	movs	r1, #5
 8004afc:	2012      	movs	r0, #18
 8004afe:	f002 ffd9 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004b02:	2012      	movs	r0, #18
 8004b04:	f002 fff2 	bl	8007aec <HAL_NVIC_EnableIRQ>
}
 8004b08:	bf00      	nop
 8004b0a:	37d0      	adds	r7, #208	; 0xd0
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	50040000 	.word	0x50040000
 8004b14:	20003f08 	.word	0x20003f08
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	48000800 	.word	0x48000800
 8004b20:	48000400 	.word	0x48000400
 8004b24:	200019ec 	.word	0x200019ec
 8004b28:	40020008 	.word	0x40020008
 8004b2c:	50040100 	.word	0x50040100
 8004b30:	20001a4c 	.word	0x20001a4c
 8004b34:	40020408 	.word	0x40020408

08004b38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	; (8004bc4 <HAL_CAN_MspInit+0x8c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d130      	bne.n	8004bbc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_CAN_MspInit+0x90>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <HAL_CAN_MspInit+0x90>)
 8004b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b64:	6593      	str	r3, [r2, #88]	; 0x58
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_CAN_MspInit+0x90>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_CAN_MspInit+0x90>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <HAL_CAN_MspInit+0x90>)
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_CAN_MspInit+0x90>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b90:	2302      	movs	r3, #2
 8004b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004b9c:	2309      	movs	r3, #9
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4809      	ldr	r0, [pc, #36]	; (8004bcc <HAL_CAN_MspInit+0x94>)
 8004ba8:	f003 fa20 	bl	8007fec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004bac:	2200      	movs	r2, #0
 8004bae:	2105      	movs	r1, #5
 8004bb0:	2013      	movs	r0, #19
 8004bb2:	f002 ff7f 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004bb6:	2013      	movs	r0, #19
 8004bb8:	f002 ff98 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004bbc:	bf00      	nop
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40006400 	.word	0x40006400
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	48000400 	.word	0x48000400

08004bd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0aa      	sub	sp, #168	; 0xa8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bd8:	f107 0310 	add.w	r3, r7, #16
 8004bdc:	2298      	movs	r2, #152	; 0x98
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f00f fc4a 	bl	801447a <memset>
  if(hrtc->Instance==RTC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_RTC_MspInit+0x74>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d124      	bne.n	8004c3a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bfe:	f107 0310 	add.w	r3, r7, #16
 8004c02:	4618      	mov	r0, r3
 8004c04:	f005 fe08 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004c0e:	f7ff f873 	bl	8003cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <HAL_RTC_MspInit+0x78>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <HAL_RTC_MspInit+0x78>)
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RTC_MspInit+0x78>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <HAL_RTC_MspInit+0x78>)
 8004c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RTC_MspInit+0x78>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004c3a:	bf00      	nop
 8004c3c:	37a8      	adds	r7, #168	; 0xa8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40002800 	.word	0x40002800
 8004c48:	40021000 	.word	0x40021000

08004c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_SPI_MspInit+0x9c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d137      	bne.n	8004cde <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <HAL_SPI_MspInit+0xa0>)
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <HAL_SPI_MspInit+0xa0>)
 8004c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c78:	6613      	str	r3, [r2, #96]	; 0x60
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <HAL_SPI_MspInit+0xa0>)
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c86:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_SPI_MspInit+0xa0>)
 8004c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_SPI_MspInit+0xa0>)
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c92:	4b16      	ldr	r3, [pc, #88]	; (8004cec <HAL_SPI_MspInit+0xa0>)
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004c9e:	2328      	movs	r3, #40	; 0x28
 8004ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004caa:	2303      	movs	r3, #3
 8004cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cae:	2305      	movs	r3, #5
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480d      	ldr	r0, [pc, #52]	; (8004cf0 <HAL_SPI_MspInit+0xa4>)
 8004cba:	f003 f997 	bl	8007fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cce:	2305      	movs	r3, #5
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <HAL_SPI_MspInit+0xa4>)
 8004cda:	f003 f987 	bl	8007fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004cde:	bf00      	nop
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40013000 	.word	0x40013000
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	48000400 	.word	0x48000400

08004cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a23      	ldr	r2, [pc, #140]	; (8004d90 <HAL_TIM_Base_MspInit+0x9c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d114      	bne.n	8004d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	6593      	str	r3, [r2, #88]	; 0x58
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2105      	movs	r1, #5
 8004d22:	201d      	movs	r0, #29
 8004d24:	f002 fec6 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d28:	201d      	movs	r0, #29
 8004d2a:	f002 fedf 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004d2e:	e02a      	b.n	8004d86 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_TIM_Base_MspInit+0xa4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d114      	bne.n	8004d64 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d40:	f043 0310 	orr.w	r3, r3, #16
 8004d44:	6593      	str	r3, [r2, #88]	; 0x58
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004d52:	2200      	movs	r2, #0
 8004d54:	2105      	movs	r1, #5
 8004d56:	2036      	movs	r0, #54	; 0x36
 8004d58:	f002 feac 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d5c:	2036      	movs	r0, #54	; 0x36
 8004d5e:	f002 fec5 	bl	8007aec <HAL_NVIC_EnableIRQ>
}
 8004d62:	e010      	b.n	8004d86 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <HAL_TIM_Base_MspInit+0xa8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10b      	bne.n	8004d86 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d78:	6613      	str	r3, [r2, #96]	; 0x60
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_TIM_Base_MspInit+0xa0>)
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40001000 	.word	0x40001000
 8004d9c:	40013400 	.word	0x40013400

08004da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004db0:	2200      	movs	r2, #0
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	2019      	movs	r0, #25
 8004db6:	f002 fe7d 	bl	8007ab4 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004dba:	2019      	movs	r0, #25
 8004dbc:	f002 fe96 	bl	8007aec <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <HAL_InitTick+0x9c>)
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <HAL_InitTick+0x9c>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	6613      	str	r3, [r2, #96]	; 0x60
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_InitTick+0x9c>)
 8004dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004dd8:	f107 0210 	add.w	r2, r7, #16
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 fc28 	bl	800a638 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004de8:	f005 fc10 	bl	800a60c <HAL_RCC_GetPCLK2Freq>
 8004dec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <HAL_InitTick+0xa0>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	0c9b      	lsrs	r3, r3, #18
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <HAL_InitTick+0xa4>)
 8004dfe:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <HAL_InitTick+0xa8>)
 8004e00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_InitTick+0xa4>)
 8004e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e08:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <HAL_InitTick+0xa4>)
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <HAL_InitTick+0xa4>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_InitTick+0xa4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8004e1c:	4809      	ldr	r0, [pc, #36]	; (8004e44 <HAL_InitTick+0xa4>)
 8004e1e:	f007 fb13 	bl	800c448 <HAL_TIM_Base_Init>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004e28:	4806      	ldr	r0, [pc, #24]	; (8004e44 <HAL_InitTick+0xa4>)
 8004e2a:	f007 fbcd 	bl	800c5c8 <HAL_TIM_Base_Start_IT>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	e000      	b.n	8004e34 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3730      	adds	r7, #48	; 0x30
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	431bde83 	.word	0x431bde83
 8004e44:	20003f0c 	.word	0x20003f0c
 8004e48:	40014400 	.word	0x40014400

08004e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e50:	e7fe      	b.n	8004e50 <NMI_Handler+0x4>

08004e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e56:	e7fe      	b.n	8004e56 <HardFault_Handler+0x4>

08004e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e5c:	e7fe      	b.n	8004e5c <MemManage_Handler+0x4>

08004e5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e62:	e7fe      	b.n	8004e62 <BusFault_Handler+0x4>

08004e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e68:	e7fe      	b.n	8004e68 <UsageFault_Handler+0x4>

08004e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e7c:	4802      	ldr	r0, [pc, #8]	; (8004e88 <DMA1_Channel1_IRQHandler+0x10>)
 8004e7e:	f002 ff66 	bl	8007d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200019ec 	.word	0x200019ec

08004e8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e90:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <ADC1_2_IRQHandler+0x14>)
 8004e92:	f000 fdd9 	bl	8005a48 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004e96:	4803      	ldr	r0, [pc, #12]	; (8004ea4 <ADC1_2_IRQHandler+0x18>)
 8004e98:	f000 fdd6 	bl	8005a48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	2000191c 	.word	0x2000191c
 8004ea4:	20001984 	.word	0x20001984

08004ea8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004eac:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <CAN1_TX_IRQHandler+0x10>)
 8004eae:	f002 fb1a 	bl	80074e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20001aac 	.word	0x20001aac

08004ebc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004ec0:	4802      	ldr	r0, [pc, #8]	; (8004ecc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004ec2:	f007 fbf1 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20003f0c 	.word	0x20003f0c

08004ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ed4:	4802      	ldr	r0, [pc, #8]	; (8004ee0 <TIM3_IRQHandler+0x10>)
 8004ed6:	f007 fbe7 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20001b6c 	.word	0x20001b6c

08004ee4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ee8:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <TIM6_DAC_IRQHandler+0x10>)
 8004eea:	f007 fbdd 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20001bb8 	.word	0x20001bb8

08004ef8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <DMA2_Channel1_IRQHandler+0x10>)
 8004efe:	f002 ff26 	bl	8007d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20001a4c 	.word	0x20001a4c

08004f0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f10:	4802      	ldr	r0, [pc, #8]	; (8004f1c <OTG_FS_IRQHandler+0x10>)
 8004f12:	f003 fb80 	bl	8008616 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200090fc 	.word	0x200090fc

08004f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
	return 1;
 8004f24:	2301      	movs	r3, #1
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <_kill>:

int _kill(int pid, int sig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f3a:	f00f fb47 	bl	80145cc <__errno>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2216      	movs	r2, #22
 8004f42:	601a      	str	r2, [r3, #0]
	return -1;
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_exit>:

void _exit (int status)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f58:	f04f 31ff 	mov.w	r1, #4294967295
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ffe7 	bl	8004f30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f62:	e7fe      	b.n	8004f62 <_exit+0x12>

08004f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e00a      	b.n	8004f8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f76:	f3af 8000 	nop.w
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	60ba      	str	r2, [r7, #8]
 8004f82:	b2ca      	uxtb	r2, r1
 8004f84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	dbf0      	blt.n	8004f76 <_read+0x12>
	}

return len;
 8004f94:	687b      	ldr	r3, [r7, #4]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e009      	b.n	8004fc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60ba      	str	r2, [r7, #8]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	dbf1      	blt.n	8004fb0 <_write+0x12>
	}
	return len;
 8004fcc:	687b      	ldr	r3, [r7, #4]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <_close>:

int _close(int file)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
	return -1;
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ffe:	605a      	str	r2, [r3, #4]
	return 0;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <_isatty>:

int _isatty(int file)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
	return 1;
 8005016:	2301      	movs	r3, #1
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
	return 0;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005048:	4a14      	ldr	r2, [pc, #80]	; (800509c <_sbrk+0x5c>)
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <_sbrk+0x60>)
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <_sbrk+0x64>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800505c:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <_sbrk+0x64>)
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <_sbrk+0x68>)
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <_sbrk+0x64>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	429a      	cmp	r2, r3
 800506e:	d207      	bcs.n	8005080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005070:	f00f faac 	bl	80145cc <__errno>
 8005074:	4603      	mov	r3, r0
 8005076:	220c      	movs	r2, #12
 8005078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
 800507e:	e009      	b.n	8005094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005080:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <_sbrk+0x64>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <_sbrk+0x64>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	4a05      	ldr	r2, [pc, #20]	; (80050a4 <_sbrk+0x64>)
 8005090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20050000 	.word	0x20050000
 80050a0:	00000400 	.word	0x00000400
 80050a4:	20003f58 	.word	0x20003f58
 80050a8:	20009978 	.word	0x20009978

080050ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <SystemInit+0x20>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	4a05      	ldr	r2, [pc, #20]	; (80050cc <SystemInit+0x20>)
 80050b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80050d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80050d4:	f7ff ffea 	bl	80050ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050d8:	480c      	ldr	r0, [pc, #48]	; (800510c <LoopForever+0x6>)
  ldr r1, =_edata
 80050da:	490d      	ldr	r1, [pc, #52]	; (8005110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <LoopForever+0xe>)
  movs r3, #0
 80050de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e0:	e002      	b.n	80050e8 <LoopCopyDataInit>

080050e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e6:	3304      	adds	r3, #4

080050e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050ec:	d3f9      	bcc.n	80050e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050f0:	4c0a      	ldr	r4, [pc, #40]	; (800511c <LoopForever+0x16>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f4:	e001      	b.n	80050fa <LoopFillZerobss>

080050f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f8:	3204      	adds	r2, #4

080050fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050fc:	d3fb      	bcc.n	80050f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050fe:	f00f fa6b 	bl	80145d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005102:	f7fe f897 	bl	8003234 <main>

08005106 <LoopForever>:

LoopForever:
    b LoopForever
 8005106:	e7fe      	b.n	8005106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005108:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800510c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005110:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8005114:	080170c8 	.word	0x080170c8
  ldr r2, =_sbss
 8005118:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 800511c:	20009974 	.word	0x20009974

08005120 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005120:	e7fe      	b.n	8005120 <CAN1_RX0_IRQHandler>

08005122 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800512c:	2003      	movs	r0, #3
 800512e:	f002 fcb6 	bl	8007a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005132:	200f      	movs	r0, #15
 8005134:	f7ff fe34 	bl	8004da0 <HAL_InitTick>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	71fb      	strb	r3, [r7, #7]
 8005142:	e001      	b.n	8005148 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005144:	f7ff fb78 	bl	8004838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005148:	79fb      	ldrb	r3, [r7, #7]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_IncTick+0x20>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_IncTick+0x24>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4413      	add	r3, r2
 8005164:	4a04      	ldr	r2, [pc, #16]	; (8005178 <HAL_IncTick+0x24>)
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	2000022c 	.word	0x2000022c
 8005178:	20003f5c 	.word	0x20003f5c

0800517c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return uwTick;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <HAL_GetTick+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20003f5c 	.word	0x20003f5c

08005194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7ff ffee 	bl	800517c <HAL_GetTick>
 80051a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d005      	beq.n	80051ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <HAL_Delay+0x44>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051ba:	bf00      	nop
 80051bc:	f7ff ffde 	bl	800517c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d8f7      	bhi.n	80051bc <HAL_Delay+0x28>
  {
  }
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000022c 	.word	0x2000022c

080051dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3360      	adds	r3, #96	; 0x60
 8005256:	461a      	mov	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b08      	ldr	r3, [pc, #32]	; (8005288 <LL_ADC_SetOffset+0x44>)
 8005266:	4013      	ands	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	03fff000 	.word	0x03fff000

0800528c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3360      	adds	r3, #96	; 0x60
 800529a:	461a      	mov	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3360      	adds	r3, #96	; 0x60
 80052c8:	461a      	mov	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	431a      	orrs	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	615a      	str	r2, [r3, #20]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3330      	adds	r3, #48	; 0x30
 800534a:	461a      	mov	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	4413      	add	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	211f      	movs	r1, #31
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	401a      	ands	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	0e9b      	lsrs	r3, r3, #26
 8005372:	f003 011f 	and.w	r1, r3, #31
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	fa01 f303 	lsl.w	r3, r1, r3
 8005380:	431a      	orrs	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3314      	adds	r3, #20
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0e5b      	lsrs	r3, r3, #25
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	4413      	add	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	0d1b      	lsrs	r3, r3, #20
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2107      	movs	r1, #7
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	401a      	ands	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	0d1b      	lsrs	r3, r3, #20
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	431a      	orrs	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
	...

08005410 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f003 0318 	and.w	r3, r3, #24
 8005432:	4908      	ldr	r1, [pc, #32]	; (8005454 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005434:	40d9      	lsrs	r1, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	400b      	ands	r3, r1
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	431a      	orrs	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	0007ffff 	.word	0x0007ffff

08005458 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 031f 	and.w	r3, r3, #31
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6093      	str	r3, [r2, #8]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c8:	d101      	bne.n	80054ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80054ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005518:	d101      	bne.n	800551e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800553c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005540:	f043 0201 	orr.w	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005568:	f043 0202 	orr.w	r2, r3, #2
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <LL_ADC_IsEnabled+0x18>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <LL_ADC_IsEnabled+0x1a>
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d101      	bne.n	80055ba <LL_ADC_IsDisableOngoing+0x18>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <LL_ADC_IsDisableOngoing+0x1a>
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055dc:	f043 0204 	orr.w	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d101      	bne.n	8005608 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d101      	bne.n	800562e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e134      	b.n	80058c0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff f90f 	bl	8004888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ff19 	bl	80054b4 <LL_ADC_IsDeepPowerDownEnabled>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff feff 	bl	8005490 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff ff34 	bl	8005504 <LL_ADC_IsInternalRegulatorEnabled>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d115      	bne.n	80056ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff ff18 	bl	80054dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056ac:	4b86      	ldr	r3, [pc, #536]	; (80058c8 <HAL_ADC_Init+0x28c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	4a86      	ldr	r2, [pc, #536]	; (80058cc <HAL_ADC_Init+0x290>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	3301      	adds	r3, #1
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056c0:	e002      	b.n	80056c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f9      	bne.n	80056c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ff16 	bl	8005504 <LL_ADC_IsInternalRegulatorEnabled>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	f043 0210 	orr.w	r2, r3, #16
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff76 	bl	80055f0 <LL_ADC_REG_IsConversionOngoing>
 8005704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 80cd 	bne.w	80058ae <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 80c9 	bne.w	80058ae <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005724:	f043 0202 	orr.w	r2, r3, #2
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff23 	bl	800557c <LL_ADC_IsEnabled>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d110      	bne.n	800575e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800573c:	4864      	ldr	r0, [pc, #400]	; (80058d0 <HAL_ADC_Init+0x294>)
 800573e:	f7ff ff1d 	bl	800557c <LL_ADC_IsEnabled>
 8005742:	4604      	mov	r4, r0
 8005744:	4863      	ldr	r0, [pc, #396]	; (80058d4 <HAL_ADC_Init+0x298>)
 8005746:	f7ff ff19 	bl	800557c <LL_ADC_IsEnabled>
 800574a:	4603      	mov	r3, r0
 800574c:	4323      	orrs	r3, r4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d105      	bne.n	800575e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	4619      	mov	r1, r3
 8005758:	485f      	ldr	r0, [pc, #380]	; (80058d8 <HAL_ADC_Init+0x29c>)
 800575a:	f7ff fd3f 	bl	80051dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7e5b      	ldrb	r3, [r3, #25]
 8005762:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005768:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800576e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005774:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d106      	bne.n	800579a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	3b01      	subs	r3, #1
 8005792:	045b      	lsls	r3, r3, #17
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4313      	orrs	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_ADC_Init+0x2a0>)
 80057be:	4013      	ands	r3, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	69b9      	ldr	r1, [r7, #24]
 80057c6:	430b      	orrs	r3, r1
 80057c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff0e 	bl	80055f0 <LL_ADC_REG_IsConversionOngoing>
 80057d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff ff1b 	bl	8005616 <LL_ADC_INJ_IsConversionOngoing>
 80057e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d140      	bne.n	800586a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d13d      	bne.n	800586a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7e1b      	ldrb	r3, [r3, #24]
 80057f6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057f8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005800:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005810:	f023 0306 	bic.w	r3, r3, #6
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	430b      	orrs	r3, r1
 800581c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005824:	2b01      	cmp	r3, #1
 8005826:	d118      	bne.n	800585a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005832:	f023 0304 	bic.w	r3, r3, #4
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800583e:	4311      	orrs	r1, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005844:	4311      	orrs	r1, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800584a:	430a      	orrs	r2, r1
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	611a      	str	r2, [r3, #16]
 8005858:	e007      	b.n	800586a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10c      	bne.n	800588c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f023 010f 	bic.w	r1, r3, #15
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
 800588a:	e007      	b.n	800589c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 020f 	bic.w	r2, r2, #15
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	659a      	str	r2, [r3, #88]	; 0x58
 80058ac:	e007      	b.n	80058be <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	f043 0210 	orr.w	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80058be:	7ffb      	ldrb	r3, [r7, #31]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3724      	adds	r7, #36	; 0x24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd90      	pop	{r4, r7, pc}
 80058c8:	20000224 	.word	0x20000224
 80058cc:	053e2d63 	.word	0x053e2d63
 80058d0:	50040000 	.word	0x50040000
 80058d4:	50040100 	.word	0x50040100
 80058d8:	50040300 	.word	0x50040300
 80058dc:	fff0c007 	.word	0xfff0c007

080058e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ec:	4850      	ldr	r0, [pc, #320]	; (8005a30 <HAL_ADC_Start_DMA+0x150>)
 80058ee:	f7ff fdb3 	bl	8005458 <LL_ADC_GetMultimode>
 80058f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fe79 	bl	80055f0 <LL_ADC_REG_IsConversionOngoing>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	f040 808e 	bne.w	8005a22 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_ADC_Start_DMA+0x34>
 8005910:	2302      	movs	r3, #2
 8005912:	e089      	b.n	8005a28 <HAL_ADC_Start_DMA+0x148>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d002      	beq.n	800592e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b09      	cmp	r3, #9
 800592c:	d172      	bne.n	8005a14 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fec6 	bl	80066c0 <ADC_Enable>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d165      	bne.n	8005a0a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a37      	ldr	r2, [pc, #220]	; (8005a34 <HAL_ADC_Start_DMA+0x154>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d002      	beq.n	8005962 <HAL_ADC_Start_DMA+0x82>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_ADC_Start_DMA+0x84>
 8005962:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <HAL_ADC_Start_DMA+0x158>)
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	4293      	cmp	r3, r2
 800596a:	d002      	beq.n	8005972 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	f023 0206 	bic.w	r2, r3, #6
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	65da      	str	r2, [r3, #92]	; 0x5c
 8005996:	e002      	b.n	800599e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a2:	4a26      	ldr	r2, [pc, #152]	; (8005a3c <HAL_ADC_Start_DMA+0x15c>)
 80059a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059aa:	4a25      	ldr	r2, [pc, #148]	; (8005a40 <HAL_ADC_Start_DMA+0x160>)
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b2:	4a24      	ldr	r2, [pc, #144]	; (8005a44 <HAL_ADC_Start_DMA+0x164>)
 80059b4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	221c      	movs	r2, #28
 80059bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0210 	orr.w	r2, r2, #16
 80059d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3340      	adds	r3, #64	; 0x40
 80059f0:	4619      	mov	r1, r3
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f002 f92f 	bl	8007c58 <HAL_DMA_Start_IT>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fde0 	bl	80055c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005a08:	e00d      	b.n	8005a26 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8005a12:	e008      	b.n	8005a26 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005a20:	e001      	b.n	8005a26 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
 8005a24:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	50040300 	.word	0x50040300
 8005a34:	50040100 	.word	0x50040100
 8005a38:	50040000 	.word	0x50040000
 8005a3c:	0800688b 	.word	0x0800688b
 8005a40:	08006963 	.word	0x08006963
 8005a44:	0800697f 	.word	0x0800697f

08005a48 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a64:	4882      	ldr	r0, [pc, #520]	; (8005c70 <HAL_ADC_IRQHandler+0x228>)
 8005a66:	f7ff fcf7 	bl	8005458 <LL_ADC_GetMultimode>
 8005a6a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d017      	beq.n	8005aa6 <HAL_ADC_IRQHandler+0x5e>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d012      	beq.n	8005aa6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 f865 	bl	8006b68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <HAL_ADC_IRQHandler+0x72>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8083 	beq.w	8005bcc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d07d      	beq.n	8005bcc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fc11 	bl	8005314 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d062      	beq.n	8005bbe <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5d      	ldr	r2, [pc, #372]	; (8005c74 <HAL_ADC_IRQHandler+0x22c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d002      	beq.n	8005b08 <HAL_ADC_IRQHandler+0xc0>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	e000      	b.n	8005b0a <HAL_ADC_IRQHandler+0xc2>
 8005b08:	4b5b      	ldr	r3, [pc, #364]	; (8005c78 <HAL_ADC_IRQHandler+0x230>)
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d008      	beq.n	8005b24 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d002      	beq.n	8005b24 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b09      	cmp	r3, #9
 8005b22:	d104      	bne.n	8005b2e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	e00c      	b.n	8005b48 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a50      	ldr	r2, [pc, #320]	; (8005c74 <HAL_ADC_IRQHandler+0x22c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d002      	beq.n	8005b3e <HAL_ADC_IRQHandler+0xf6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	e000      	b.n	8005b40 <HAL_ADC_IRQHandler+0xf8>
 8005b3e:	4b4e      	ldr	r3, [pc, #312]	; (8005c78 <HAL_ADC_IRQHandler+0x230>)
 8005b40:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d135      	bne.n	8005bbe <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d12e      	bne.n	8005bbe <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fd43 	bl	80055f0 <LL_ADC_REG_IsConversionOngoing>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11a      	bne.n	8005ba6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 020c 	bic.w	r2, r2, #12
 8005b7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d112      	bne.n	8005bbe <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ba4:	e00b      	b.n	8005bbe <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	f043 0210 	orr.w	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb6:	f043 0201 	orr.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f95c 	bl	8005e7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	220c      	movs	r2, #12
 8005bca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_ADC_IRQHandler+0x198>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 809f 	beq.w	8005d2a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 8099 	beq.w	8005d2a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fbbc 	bl	8005392 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005c1a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fb77 	bl	8005314 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c26:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a11      	ldr	r2, [pc, #68]	; (8005c74 <HAL_ADC_IRQHandler+0x22c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d002      	beq.n	8005c38 <HAL_ADC_IRQHandler+0x1f0>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	e000      	b.n	8005c3a <HAL_ADC_IRQHandler+0x1f2>
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <HAL_ADC_IRQHandler+0x230>)
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d008      	beq.n	8005c54 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b06      	cmp	r3, #6
 8005c4c:	d002      	beq.n	8005c54 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d104      	bne.n	8005c5e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	e013      	b.n	8005c86 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <HAL_ADC_IRQHandler+0x22c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_ADC_IRQHandler+0x234>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	e007      	b.n	8005c7e <HAL_ADC_IRQHandler+0x236>
 8005c6e:	bf00      	nop
 8005c70:	50040300 	.word	0x50040300
 8005c74:	50040100 	.word	0x50040100
 8005c78:	50040000 	.word	0x50040000
 8005c7c:	4b7d      	ldr	r3, [pc, #500]	; (8005e74 <HAL_ADC_IRQHandler+0x42c>)
 8005c7e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d047      	beq.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_ADC_IRQHandler+0x25e>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d03f      	beq.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d13a      	bne.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	d133      	bne.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d12e      	bne.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fca7 	bl	8005616 <LL_ADC_INJ_IsConversionOngoing>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d11a      	bne.n	8005d04 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cdc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d112      	bne.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	659a      	str	r2, [r3, #88]	; 0x58
 8005d02:	e00b      	b.n	8005d1c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	f043 0201 	orr.w	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fefb 	bl	8006b18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2260      	movs	r2, #96	; 0x60
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d011      	beq.n	8005d58 <HAL_ADC_IRQHandler+0x310>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00c      	beq.n	8005d58 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8aa 	bl	8005ea4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2280      	movs	r2, #128	; 0x80
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d012      	beq.n	8005d88 <HAL_ADC_IRQHandler+0x340>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fee1 	bl	8006b40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d012      	beq.n	8005db8 <HAL_ADC_IRQHandler+0x370>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00d      	beq.n	8005db8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fed3 	bl	8006b54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d036      	beq.n	8005e30 <HAL_ADC_IRQHandler+0x3e8>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d031      	beq.n	8005e30 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd8:	e014      	b.n	8005e04 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005de0:	4825      	ldr	r0, [pc, #148]	; (8005e78 <HAL_ADC_IRQHandler+0x430>)
 8005de2:	f7ff fb47 	bl	8005474 <LL_ADC_GetMultiDMATransfer>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005dec:	2301      	movs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
 8005df0:	e008      	b.n	8005e04 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005e00:	2301      	movs	r3, #1
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10e      	bne.n	8005e28 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1a:	f043 0202 	orr.w	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f848 	bl	8005eb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d018      	beq.n	8005e6c <HAL_ADC_IRQHandler+0x424>
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d013      	beq.n	8005e6c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	f043 0208 	orr.w	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e64:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fe60 	bl	8006b2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005e6c:	bf00      	nop
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	50040000 	.word	0x50040000
 8005e78:	50040300 	.word	0x50040300

08005e7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0b6      	sub	sp, #216	; 0xd8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x22>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e3d3      	b.n	8006696 <HAL_ADC_ConfigChannel+0x7ca>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fb78 	bl	80055f0 <LL_ADC_REG_IsConversionOngoing>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 83b8 	bne.w	8006678 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d824      	bhi.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	3b02      	subs	r3, #2
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d81b      	bhi.n	8005f52 <HAL_ADC_ConfigChannel+0x86>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <HAL_ADC_ConfigChannel+0x54>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f39 	.word	0x08005f39
 8005f28:	08005f41 	.word	0x08005f41
 8005f2c:	08005f49 	.word	0x08005f49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	220c      	movs	r2, #12
 8005f34:	605a      	str	r2, [r3, #4]
          break;
 8005f36:	e010      	b.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2212      	movs	r2, #18
 8005f3c:	605a      	str	r2, [r3, #4]
          break;
 8005f3e:	e00c      	b.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2218      	movs	r2, #24
 8005f44:	605a      	str	r2, [r3, #4]
          break;
 8005f46:	e008      	b.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f4e:	605a      	str	r2, [r3, #4]
          break;
 8005f50:	e003      	b.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2206      	movs	r2, #6
 8005f56:	605a      	str	r2, [r3, #4]
          break;
 8005f58:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7ff f9e7 	bl	800533a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fb3d 	bl	80055f0 <LL_ADC_REG_IsConversionOngoing>
 8005f76:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fb49 	bl	8005616 <LL_ADC_INJ_IsConversionOngoing>
 8005f84:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 81c1 	bne.w	8006314 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 81bc 	bne.w	8006314 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	f7ff fa01 	bl	80053b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff f995 	bl	80052ee <LL_ADC_SetSamplingTimeCommonConfig>
 8005fc4:	e00e      	b.n	8005fe4 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6819      	ldr	r1, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7ff f9f0 	bl	80053b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff f985 	bl	80052ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	08db      	lsrs	r3, r3, #3
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b04      	cmp	r3, #4
 8006004:	d00a      	beq.n	800601c <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6919      	ldr	r1, [r3, #16]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006016:	f7ff f915 	bl	8005244 <LL_ADC_SetOffset>
 800601a:	e17b      	b.n	8006314 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff f932 	bl	800528c <LL_ADC_GetOffsetChannel>
 8006028:	4603      	mov	r3, r0
 800602a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x17c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff f927 	bl	800528c <LL_ADC_GetOffsetChannel>
 800603e:	4603      	mov	r3, r0
 8006040:	0e9b      	lsrs	r3, r3, #26
 8006042:	f003 021f 	and.w	r2, r3, #31
 8006046:	e01e      	b.n	8006086 <HAL_ADC_ConfigChannel+0x1ba>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f91c 	bl	800528c <LL_ADC_GetOffsetChannel>
 8006054:	4603      	mov	r3, r0
 8006056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800605e:	fa93 f3a3 	rbit	r3, r3
 8006062:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800606a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800606e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8006076:	2320      	movs	r3, #32
 8006078:	e004      	b.n	8006084 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 800607a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800607e:	fab3 f383 	clz	r3, r3
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_ADC_ConfigChannel+0x1d2>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	0e9b      	lsrs	r3, r3, #26
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	e018      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x204>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060aa:	fa93 f3a3 	rbit	r3, r3
 80060ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80060b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80060ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80060c2:	2320      	movs	r3, #32
 80060c4:	e004      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80060c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d106      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff f8eb 	bl	80052b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2101      	movs	r1, #1
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff f8cf 	bl	800528c <LL_ADC_GetOffsetChannel>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_ADC_ConfigChannel+0x242>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff f8c4 	bl	800528c <LL_ADC_GetOffsetChannel>
 8006104:	4603      	mov	r3, r0
 8006106:	0e9b      	lsrs	r3, r3, #26
 8006108:	f003 021f 	and.w	r2, r3, #31
 800610c:	e01e      	b.n	800614c <HAL_ADC_ConfigChannel+0x280>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff f8b9 	bl	800528c <LL_ADC_GetOffsetChannel>
 800611a:	4603      	mov	r3, r0
 800611c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006120:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006124:	fa93 f3a3 	rbit	r3, r3
 8006128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800612c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 800613c:	2320      	movs	r3, #32
 800613e:	e004      	b.n	800614a <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8006140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006144:	fab3 f383 	clz	r3, r3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x298>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	0e9b      	lsrs	r3, r3, #26
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	e018      	b.n	8006196 <HAL_ADC_ConfigChannel+0x2ca>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006170:	fa93 f3a3 	rbit	r3, r3
 8006174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800617c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8006188:	2320      	movs	r3, #32
 800618a:	e004      	b.n	8006196 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 800618c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006190:	fab3 f383 	clz	r3, r3
 8006194:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006196:	429a      	cmp	r2, r3
 8006198:	d106      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f888 	bl	80052b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2102      	movs	r1, #2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff f86c 	bl	800528c <LL_ADC_GetOffsetChannel>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x308>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff f861 	bl	800528c <LL_ADC_GetOffsetChannel>
 80061ca:	4603      	mov	r3, r0
 80061cc:	0e9b      	lsrs	r3, r3, #26
 80061ce:	f003 021f 	and.w	r2, r3, #31
 80061d2:	e01e      	b.n	8006212 <HAL_ADC_ConfigChannel+0x346>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2102      	movs	r1, #2
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff f856 	bl	800528c <LL_ADC_GetOffsetChannel>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80061f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80061fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8006202:	2320      	movs	r3, #32
 8006204:	e004      	b.n	8006210 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8006206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800620a:	fab3 f383 	clz	r3, r3
 800620e:	b2db      	uxtb	r3, r3
 8006210:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <HAL_ADC_ConfigChannel+0x35e>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	0e9b      	lsrs	r3, r3, #26
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	e016      	b.n	8006258 <HAL_ADC_ConfigChannel+0x38c>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006236:	fa93 f3a3 	rbit	r3, r3
 800623a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800623c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800623e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 800624a:	2320      	movs	r3, #32
 800624c:	e004      	b.n	8006258 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800624e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006252:	fab3 f383 	clz	r3, r3
 8006256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006258:	429a      	cmp	r2, r3
 800625a:	d106      	bne.n	800626a <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	2102      	movs	r1, #2
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff f827 	bl	80052b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2103      	movs	r1, #3
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff f80b 	bl	800528c <LL_ADC_GetOffsetChannel>
 8006276:	4603      	mov	r3, r0
 8006278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <HAL_ADC_ConfigChannel+0x3ca>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2103      	movs	r1, #3
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff f800 	bl	800528c <LL_ADC_GetOffsetChannel>
 800628c:	4603      	mov	r3, r0
 800628e:	0e9b      	lsrs	r3, r3, #26
 8006290:	f003 021f 	and.w	r2, r3, #31
 8006294:	e017      	b.n	80062c6 <HAL_ADC_ConfigChannel+0x3fa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2103      	movs	r1, #3
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fff5 	bl	800528c <LL_ADC_GetOffsetChannel>
 80062a2:	4603      	mov	r3, r0
 80062a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a8:	fa93 f3a3 	rbit	r3, r3
 80062ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80062ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80062b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 80062b8:	2320      	movs	r3, #32
 80062ba:	e003      	b.n	80062c4 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80062bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062be:	fab3 f383 	clz	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <HAL_ADC_ConfigChannel+0x412>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	0e9b      	lsrs	r3, r3, #26
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	e011      	b.n	8006302 <HAL_ADC_ConfigChannel+0x436>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062e6:	fa93 f3a3 	rbit	r3, r3
 80062ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80062ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 80062f6:	2320      	movs	r3, #32
 80062f8:	e003      	b.n	8006302 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80062fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fc:	fab3 f383 	clz	r3, r3
 8006300:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006302:	429a      	cmp	r2, r3
 8006304:	d106      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	2103      	movs	r1, #3
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe ffd2 	bl	80052b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff f92f 	bl	800557c <LL_ADC_IsEnabled>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 813f 	bne.w	80065a4 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	461a      	mov	r2, r3
 8006334:	f7ff f86c 	bl	8005410 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a8e      	ldr	r2, [pc, #568]	; (8006578 <HAL_ADC_ConfigChannel+0x6ac>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f040 8130 	bne.w	80065a4 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <HAL_ADC_ConfigChannel+0x4a0>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	0e9b      	lsrs	r3, r3, #26
 800635a:	3301      	adds	r3, #1
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2b09      	cmp	r3, #9
 8006362:	bf94      	ite	ls
 8006364:	2301      	movls	r3, #1
 8006366:	2300      	movhi	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e019      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x4d4>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006374:	fa93 f3a3 	rbit	r3, r3
 8006378:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800637a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800637c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800637e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8006384:	2320      	movs	r3, #32
 8006386:	e003      	b.n	8006390 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8006388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	3301      	adds	r3, #1
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2b09      	cmp	r3, #9
 8006398:	bf94      	ite	ls
 800639a:	2301      	movls	r3, #1
 800639c:	2300      	movhi	r3, #0
 800639e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d079      	beq.n	8006498 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <HAL_ADC_ConfigChannel+0x4f4>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	0e9b      	lsrs	r3, r3, #26
 80063b6:	3301      	adds	r3, #1
 80063b8:	069b      	lsls	r3, r3, #26
 80063ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063be:	e015      	b.n	80063ec <HAL_ADC_ConfigChannel+0x520>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c8:	fa93 f3a3 	rbit	r3, r3
 80063cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80063ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80063d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 80063d8:	2320      	movs	r3, #32
 80063da:	e003      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 80063dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063de:	fab3 f383 	clz	r3, r3
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	3301      	adds	r3, #1
 80063e6:	069b      	lsls	r3, r3, #26
 80063e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <HAL_ADC_ConfigChannel+0x540>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	0e9b      	lsrs	r3, r3, #26
 80063fe:	3301      	adds	r3, #1
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2101      	movs	r1, #1
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	e017      	b.n	800643c <HAL_ADC_ConfigChannel+0x570>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006414:	fa93 f3a3 	rbit	r3, r3
 8006418:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800641a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800641e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8006424:	2320      	movs	r3, #32
 8006426:	e003      	b.n	8006430 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8006428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642a:	fab3 f383 	clz	r3, r3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	3301      	adds	r3, #1
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	2101      	movs	r1, #1
 8006438:	fa01 f303 	lsl.w	r3, r1, r3
 800643c:	ea42 0103 	orr.w	r1, r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x596>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	0e9b      	lsrs	r3, r3, #26
 8006452:	3301      	adds	r3, #1
 8006454:	f003 021f 	and.w	r2, r3, #31
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	051b      	lsls	r3, r3, #20
 8006460:	e018      	b.n	8006494 <HAL_ADC_ConfigChannel+0x5c8>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	fa93 f3a3 	rbit	r3, r3
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800647a:	2320      	movs	r3, #32
 800647c:	e003      	b.n	8006486 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	fab3 f383 	clz	r3, r3
 8006484:	b2db      	uxtb	r3, r3
 8006486:	3301      	adds	r3, #1
 8006488:	f003 021f 	and.w	r2, r3, #31
 800648c:	4613      	mov	r3, r2
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	4413      	add	r3, r2
 8006492:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006494:	430b      	orrs	r3, r1
 8006496:	e080      	b.n	800659a <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d107      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x5e8>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	0e9b      	lsrs	r3, r3, #26
 80064aa:	3301      	adds	r3, #1
 80064ac:	069b      	lsls	r3, r3, #26
 80064ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064b2:	e015      	b.n	80064e0 <HAL_ADC_ConfigChannel+0x614>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	fa93 f3a3 	rbit	r3, r3
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 80064cc:	2320      	movs	r3, #32
 80064ce:	e003      	b.n	80064d8 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	fab3 f383 	clz	r3, r3
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	3301      	adds	r3, #1
 80064da:	069b      	lsls	r3, r3, #26
 80064dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x634>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	0e9b      	lsrs	r3, r3, #26
 80064f2:	3301      	adds	r3, #1
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2101      	movs	r1, #1
 80064fa:	fa01 f303 	lsl.w	r3, r1, r3
 80064fe:	e017      	b.n	8006530 <HAL_ADC_ConfigChannel+0x664>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	fa93 f3a3 	rbit	r3, r3
 800650c:	61fb      	str	r3, [r7, #28]
  return result;
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8006518:	2320      	movs	r3, #32
 800651a:	e003      	b.n	8006524 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	fab3 f383 	clz	r3, r3
 8006522:	b2db      	uxtb	r3, r3
 8006524:	3301      	adds	r3, #1
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2101      	movs	r1, #1
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	ea42 0103 	orr.w	r1, r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10d      	bne.n	800655c <HAL_ADC_ConfigChannel+0x690>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	0e9b      	lsrs	r3, r3, #26
 8006546:	3301      	adds	r3, #1
 8006548:	f003 021f 	and.w	r2, r3, #31
 800654c:	4613      	mov	r3, r2
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4413      	add	r3, r2
 8006552:	3b1e      	subs	r3, #30
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800655a:	e01d      	b.n	8006598 <HAL_ADC_ConfigChannel+0x6cc>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	fa93 f3a3 	rbit	r3, r3
 8006568:	613b      	str	r3, [r7, #16]
  return result;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8006574:	2320      	movs	r3, #32
 8006576:	e005      	b.n	8006584 <HAL_ADC_ConfigChannel+0x6b8>
 8006578:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	fab3 f383 	clz	r3, r3
 8006582:	b2db      	uxtb	r3, r3
 8006584:	3301      	adds	r3, #1
 8006586:	f003 021f 	and.w	r2, r3, #31
 800658a:	4613      	mov	r3, r2
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	3b1e      	subs	r3, #30
 8006592:	051b      	lsls	r3, r3, #20
 8006594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006598:	430b      	orrs	r3, r1
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	6892      	ldr	r2, [r2, #8]
 800659e:	4619      	mov	r1, r3
 80065a0:	f7fe ff0a 	bl	80053b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b3d      	ldr	r3, [pc, #244]	; (80066a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d06c      	beq.n	800668a <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065b0:	483c      	ldr	r0, [pc, #240]	; (80066a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80065b2:	f7fe fe39 	bl	8005228 <LL_ADC_GetCommonPathInternalCh>
 80065b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a3a      	ldr	r2, [pc, #232]	; (80066a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d127      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d121      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a35      	ldr	r2, [pc, #212]	; (80066ac <HAL_ADC_ConfigChannel+0x7e0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d157      	bne.n	800668a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065e2:	4619      	mov	r1, r3
 80065e4:	482f      	ldr	r0, [pc, #188]	; (80066a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80065e6:	f7fe fe0c 	bl	8005202 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <HAL_ADC_ConfigChannel+0x7e4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	099b      	lsrs	r3, r3, #6
 80065f0:	4a30      	ldr	r2, [pc, #192]	; (80066b4 <HAL_ADC_ConfigChannel+0x7e8>)
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	099b      	lsrs	r3, r3, #6
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	4613      	mov	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006604:	e002      	b.n	800660c <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3b01      	subs	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f9      	bne.n	8006606 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006612:	e03a      	b.n	800668a <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a27      	ldr	r2, [pc, #156]	; (80066b8 <HAL_ADC_ConfigChannel+0x7ec>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d113      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x77a>
 800661e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10d      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1f      	ldr	r2, [pc, #124]	; (80066ac <HAL_ADC_ConfigChannel+0x7e0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d12a      	bne.n	800668a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800663c:	4619      	mov	r1, r3
 800663e:	4819      	ldr	r0, [pc, #100]	; (80066a4 <HAL_ADC_ConfigChannel+0x7d8>)
 8006640:	f7fe fddf 	bl	8005202 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006644:	e021      	b.n	800668a <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <HAL_ADC_ConfigChannel+0x7f0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d11c      	bne.n	800668a <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d116      	bne.n	800668a <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a12      	ldr	r2, [pc, #72]	; (80066ac <HAL_ADC_ConfigChannel+0x7e0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d111      	bne.n	800668a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800666a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800666e:	4619      	mov	r1, r3
 8006670:	480c      	ldr	r0, [pc, #48]	; (80066a4 <HAL_ADC_ConfigChannel+0x7d8>)
 8006672:	f7fe fdc6 	bl	8005202 <LL_ADC_SetCommonPathInternalCh>
 8006676:	e008      	b.n	800668a <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006692:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006696:	4618      	mov	r0, r3
 8006698:	37d8      	adds	r7, #216	; 0xd8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	80080000 	.word	0x80080000
 80066a4:	50040300 	.word	0x50040300
 80066a8:	c7520000 	.word	0xc7520000
 80066ac:	50040000 	.word	0x50040000
 80066b0:	20000224 	.word	0x20000224
 80066b4:	053e2d63 	.word	0x053e2d63
 80066b8:	cb840000 	.word	0xcb840000
 80066bc:	80000001 	.word	0x80000001

080066c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe ff53 	bl	800557c <LL_ADC_IsEnabled>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d169      	bne.n	80067b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <ADC_Enable+0xfc>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	f043 0210 	orr.w	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fa:	f043 0201 	orr.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e055      	b.n	80067b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe ff0e 	bl	800552c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006710:	482b      	ldr	r0, [pc, #172]	; (80067c0 <ADC_Enable+0x100>)
 8006712:	f7fe fd89 	bl	8005228 <LL_ADC_GetCommonPathInternalCh>
 8006716:	4603      	mov	r3, r0
 8006718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006720:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <ADC_Enable+0x104>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	099b      	lsrs	r3, r3, #6
 8006726:	4a28      	ldr	r2, [pc, #160]	; (80067c8 <ADC_Enable+0x108>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	099b      	lsrs	r3, r3, #6
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	4613      	mov	r3, r2
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800673a:	e002      	b.n	8006742 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	3b01      	subs	r3, #1
 8006740:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f9      	bne.n	800673c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006748:	f7fe fd18 	bl	800517c <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800674e:	e028      	b.n	80067a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe ff11 	bl	800557c <LL_ADC_IsEnabled>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fee1 	bl	800552c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800676a:	f7fe fd07 	bl	800517c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d914      	bls.n	80067a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b01      	cmp	r3, #1
 8006784:	d00d      	beq.n	80067a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	f043 0210 	orr.w	r2, r3, #16
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006796:	f043 0201 	orr.w	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e007      	b.n	80067b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d1cf      	bne.n	8006750 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	8000003f 	.word	0x8000003f
 80067c0:	50040300 	.word	0x50040300
 80067c4:	20000224 	.word	0x20000224
 80067c8:	053e2d63 	.word	0x053e2d63

080067cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe fee2 	bl	80055a2 <LL_ADC_IsDisableOngoing>
 80067de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe fec9 	bl	800557c <LL_ADC_IsEnabled>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d047      	beq.n	8006880 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d144      	bne.n	8006880 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 030d 	and.w	r3, r3, #13
 8006800:	2b01      	cmp	r3, #1
 8006802:	d10c      	bne.n	800681e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fea3 	bl	8005554 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2203      	movs	r2, #3
 8006814:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006816:	f7fe fcb1 	bl	800517c <HAL_GetTick>
 800681a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800681c:	e029      	b.n	8006872 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	f043 0210 	orr.w	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e023      	b.n	8006882 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800683a:	f7fe fc9f 	bl	800517c <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d914      	bls.n	8006872 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685a:	f043 0210 	orr.w	r2, r3, #16
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e007      	b.n	8006882 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1dc      	bne.n	800683a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d14b      	bne.n	800693c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d021      	beq.n	8006902 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fd26 	bl	8005314 <LL_ADC_REG_IsTriggerSourceSWStart>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d032      	beq.n	8006934 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d12b      	bne.n	8006934 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11f      	bne.n	8006934 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	f043 0201 	orr.w	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006900:	e018      	b.n	8006934 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d111      	bne.n	8006934 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692c:	f043 0201 	orr.w	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff faa1 	bl	8005e7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800693a:	e00e      	b.n	800695a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fab5 	bl	8005eb8 <HAL_ADC_ErrorCallback>
}
 800694e:	e004      	b.n	800695a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fa8d 	bl	8005e90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f043 0204 	orr.w	r2, r3, #4
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff fa87 	bl	8005eb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <LL_ADC_IsEnabled>:
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <LL_ADC_IsEnabled+0x18>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <LL_ADC_IsEnabled+0x1a>
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <LL_ADC_StartCalibration>:
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	609a      	str	r2, [r3, #8]
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <LL_ADC_IsCalibrationOnGoing>:
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1e:	d101      	bne.n	8006a24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d101      	bne.n	8006a4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_ADCEx_Calibration_Start+0x1c>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e04d      	b.n	8006b10 <HAL_ADCEx_Calibration_Start+0xb8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fea5 	bl	80067cc <ADC_Disable>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d136      	bne.n	8006afa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a94:	f023 0302 	bic.w	r3, r3, #2
 8006a98:	f043 0202 	orr.w	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ff96 	bl	80069d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006aac:	e014      	b.n	8006ad8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006aba:	d30d      	bcc.n	8006ad8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac0:	f023 0312 	bic.w	r3, r3, #18
 8006ac4:	f043 0210 	orr.w	r2, r3, #16
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e01b      	b.n	8006b10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff94 	bl	8006a0a <LL_ADC_IsCalibrationOnGoing>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e2      	bne.n	8006aae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	f043 0201 	orr.w	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	659a      	str	r2, [r3, #88]	; 0x58
 8006af8:	e005      	b.n	8006b06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afe:	f043 0210 	orr.w	r2, r3, #16
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b0a1      	sub	sp, #132	; 0x84
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e089      	b.n	8006cae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a42      	ldr	r2, [pc, #264]	; (8006cb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d102      	bne.n	8006bba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006bb4:	4b41      	ldr	r3, [pc, #260]	; (8006cbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e001      	b.n	8006bbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e068      	b.n	8006cae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff ff27 	bl	8006a32 <LL_ADC_REG_IsConversionOngoing>
 8006be4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff ff21 	bl	8006a32 <LL_ADC_REG_IsConversionOngoing>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d14a      	bne.n	8006c8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d147      	bne.n	8006c8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006bfc:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006bfe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d027      	beq.n	8006c58 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c1a:	035b      	lsls	r3, r3, #13
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c24:	4824      	ldr	r0, [pc, #144]	; (8006cb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c26:	f7ff fec4 	bl	80069b2 <LL_ADC_IsEnabled>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4823      	ldr	r0, [pc, #140]	; (8006cbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006c2e:	f7ff fec0 	bl	80069b2 <LL_ADC_IsEnabled>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4323      	orrs	r3, r4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d132      	bne.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c42:	f023 030f 	bic.w	r3, r3, #15
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	6811      	ldr	r1, [r2, #0]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	6892      	ldr	r2, [r2, #8]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	431a      	orrs	r2, r3
 8006c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c54:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c56:	e023      	b.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c64:	4814      	ldr	r0, [pc, #80]	; (8006cb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c66:	f7ff fea4 	bl	80069b2 <LL_ADC_IsEnabled>
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4813      	ldr	r0, [pc, #76]	; (8006cbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006c6e:	f7ff fea0 	bl	80069b2 <LL_ADC_IsEnabled>
 8006c72:	4603      	mov	r3, r0
 8006c74:	4323      	orrs	r3, r4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d112      	bne.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c82:	f023 030f 	bic.w	r3, r3, #15
 8006c86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c8a:	e009      	b.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006c9e:	e000      	b.n	8006ca2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ca0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006caa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3784      	adds	r7, #132	; 0x84
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd90      	pop	{r4, r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	50040000 	.word	0x50040000
 8006cbc:	50040100 	.word	0x50040100
 8006cc0:	50040300 	.word	0x50040300

08006cc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e0ed      	b.n	8006eb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fd ff28 	bl	8004b38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cf8:	f7fe fa40 	bl	800517c <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cfe:	e012      	b.n	8006d26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d00:	f7fe fa3c 	bl	800517c <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b0a      	cmp	r3, #10
 8006d0c:	d90b      	bls.n	8006d26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2205      	movs	r2, #5
 8006d1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e0c5      	b.n	8006eb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0e5      	beq.n	8006d00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0202 	bic.w	r2, r2, #2
 8006d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d44:	f7fe fa1a 	bl	800517c <HAL_GetTick>
 8006d48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d4a:	e012      	b.n	8006d72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d4c:	f7fe fa16 	bl	800517c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b0a      	cmp	r3, #10
 8006d58:	d90b      	bls.n	8006d72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2205      	movs	r2, #5
 8006d6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e09f      	b.n	8006eb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e5      	bne.n	8006d4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7e1b      	ldrb	r3, [r3, #24]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d108      	bne.n	8006d9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e007      	b.n	8006daa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7e5b      	ldrb	r3, [r3, #25]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d108      	bne.n	8006dc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e007      	b.n	8006dd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7e9b      	ldrb	r3, [r3, #26]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d108      	bne.n	8006dee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0220 	orr.w	r2, r2, #32
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e007      	b.n	8006dfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0220 	bic.w	r2, r2, #32
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7edb      	ldrb	r3, [r3, #27]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d108      	bne.n	8006e18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0210 	bic.w	r2, r2, #16
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0210 	orr.w	r2, r2, #16
 8006e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7f1b      	ldrb	r3, [r3, #28]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d108      	bne.n	8006e42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0208 	orr.w	r2, r2, #8
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e007      	b.n	8006e52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0208 	bic.w	r2, r2, #8
 8006e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7f5b      	ldrb	r3, [r3, #29]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d108      	bne.n	8006e6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0204 	orr.w	r2, r2, #4
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e007      	b.n	8006e7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0204 	bic.w	r2, r2, #4
 8006e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	ea42 0103 	orr.w	r1, r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b087      	sub	sp, #28
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ed0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006ed2:	7cfb      	ldrb	r3, [r7, #19]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d003      	beq.n	8006ee0 <HAL_CAN_ConfigFilter+0x26>
 8006ed8:	7cfb      	ldrb	r3, [r7, #19]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	f040 80aa 	bne.w	8007034 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ee6:	f043 0201 	orr.w	r2, r3, #1
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2201      	movs	r2, #1
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d123      	bne.n	8006f62 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	43db      	mvns	r3, r3
 8006f24:	401a      	ands	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	3248      	adds	r2, #72	; 0x48
 8006f42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	3348      	adds	r3, #72	; 0x48
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d122      	bne.n	8006fb0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	3248      	adds	r2, #72	; 0x48
 8006f90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006fa4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fa6:	6979      	ldr	r1, [r7, #20]
 8006fa8:	3348      	adds	r3, #72	; 0x48
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	440b      	add	r3, r1
 8006fae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	401a      	ands	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006fca:	e007      	b.n	8006fdc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006ff6:	e007      	b.n	8007008 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	431a      	orrs	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d107      	bne.n	8007020 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	431a      	orrs	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007026:	f023 0201 	bic.w	r2, r3, #1
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	e006      	b.n	8007042 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	d12e      	bne.n	80070c0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800707a:	f7fe f87f 	bl	800517c <HAL_GetTick>
 800707e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007080:	e012      	b.n	80070a8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007082:	f7fe f87b 	bl	800517c <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b0a      	cmp	r3, #10
 800708e:	d90b      	bls.n	80070a8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2205      	movs	r2, #5
 80070a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e012      	b.n	80070ce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e006      	b.n	80070ce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b089      	sub	sp, #36	; 0x24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80070f4:	7ffb      	ldrb	r3, [r7, #31]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d003      	beq.n	8007102 <HAL_CAN_AddTxMessage+0x2c>
 80070fa:	7ffb      	ldrb	r3, [r7, #31]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	f040 80ad 	bne.w	800725c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8095 	beq.w	800724c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	0e1b      	lsrs	r3, r3, #24
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800712c:	2201      	movs	r2, #1
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	409a      	lsls	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10d      	bne.n	800715a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007148:	68f9      	ldr	r1, [r7, #12]
 800714a:	6809      	ldr	r1, [r1, #0]
 800714c:	431a      	orrs	r2, r3
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3318      	adds	r3, #24
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	440b      	add	r3, r1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e00f      	b.n	800717a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007164:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800716e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3318      	adds	r3, #24
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	440b      	add	r3, r1
 8007178:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6819      	ldr	r1, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	3318      	adds	r3, #24
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	440b      	add	r3, r1
 800718a:	3304      	adds	r3, #4
 800718c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7d1b      	ldrb	r3, [r3, #20]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d111      	bne.n	80071ba <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	3318      	adds	r3, #24
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	4413      	add	r3, r2
 80071a2:	3304      	adds	r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	6811      	ldr	r1, [r2, #0]
 80071aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3318      	adds	r3, #24
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	440b      	add	r3, r1
 80071b6:	3304      	adds	r3, #4
 80071b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3307      	adds	r3, #7
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	061a      	lsls	r2, r3, #24
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3306      	adds	r3, #6
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3305      	adds	r3, #5
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	4313      	orrs	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	3204      	adds	r2, #4
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	4610      	mov	r0, r2
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	6811      	ldr	r1, [r2, #0]
 80071e2:	ea43 0200 	orr.w	r2, r3, r0
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	440b      	add	r3, r1
 80071ec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80071f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3303      	adds	r3, #3
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	061a      	lsls	r2, r3, #24
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3302      	adds	r3, #2
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3301      	adds	r3, #1
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	4313      	orrs	r3, r2
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	4610      	mov	r0, r2
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	6811      	ldr	r1, [r2, #0]
 8007218:	ea43 0200 	orr.w	r2, r3, r0
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	440b      	add	r3, r1
 8007222:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007226:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	3318      	adds	r3, #24
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	4413      	add	r3, r2
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	6811      	ldr	r1, [r2, #0]
 800723a:	f043 0201 	orr.w	r2, r3, #1
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	3318      	adds	r3, #24
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	440b      	add	r3, r1
 8007246:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	e00e      	b.n	800726a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e006      	b.n	800726a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3724      	adds	r7, #36	; 0x24
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007276:	b480      	push	{r7}
 8007278:	b087      	sub	sp, #28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800728a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d003      	beq.n	800729a <HAL_CAN_GetRxMessage+0x24>
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f040 80f3 	bne.w	8007480 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10e      	bne.n	80072be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d116      	bne.n	80072dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0e7      	b.n	800748e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d107      	bne.n	80072dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0d8      	b.n	800748e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	331b      	adds	r3, #27
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0204 	and.w	r2, r3, #4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	331b      	adds	r3, #27
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	4413      	add	r3, r2
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	0d5b      	lsrs	r3, r3, #21
 800730a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e00b      	b.n	800732c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	331b      	adds	r3, #27
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	4413      	add	r3, r2
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	331b      	adds	r3, #27
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	4413      	add	r3, r2
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0202 	and.w	r2, r3, #2
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	331b      	adds	r3, #27
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	4413      	add	r3, r2
 800734e:	3304      	adds	r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 020f 	and.w	r2, r3, #15
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	331b      	adds	r3, #27
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4413      	add	r3, r2
 8007366:	3304      	adds	r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	b2da      	uxtb	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	331b      	adds	r3, #27
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	4413      	add	r3, r2
 800737e:	3304      	adds	r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	4413      	add	r3, r2
 8007394:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	0a1a      	lsrs	r2, r3, #8
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	0c1a      	lsrs	r2, r3, #16
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	3302      	adds	r3, #2
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	4413      	add	r3, r2
 80073de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0e1a      	lsrs	r2, r3, #24
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	3303      	adds	r3, #3
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	3304      	adds	r3, #4
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	0a1a      	lsrs	r2, r3, #8
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	3305      	adds	r3, #5
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	4413      	add	r3, r2
 800742a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	0c1a      	lsrs	r2, r3, #16
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	3306      	adds	r3, #6
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4413      	add	r3, r2
 8007444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	0e1a      	lsrs	r2, r3, #24
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	3307      	adds	r3, #7
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d108      	bne.n	800746c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0220 	orr.w	r2, r2, #32
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	e007      	b.n	800747c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0220 	orr.w	r2, r2, #32
 800747a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e006      	b.n	800748e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d002      	beq.n	80074b8 <HAL_CAN_ActivateNotification+0x1e>
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d109      	bne.n	80074cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6959      	ldr	r1, [r3, #20]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e006      	b.n	80074da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b08a      	sub	sp, #40	; 0x28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d07c      	beq.n	8007626 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d023      	beq.n	800757e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2201      	movs	r2, #1
 800753c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f983 	bl	8007854 <HAL_CAN_TxMailbox0CompleteCallback>
 800754e:	e016      	b.n	800757e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
 8007562:	e00c      	b.n	800757e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
 8007576:	e002      	b.n	800757e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f989 	bl	8007890 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d024      	beq.n	80075d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007590:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f963 	bl	8007868 <HAL_CAN_TxMailbox1CompleteCallback>
 80075a2:	e016      	b.n	80075d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
 80075b6:	e00c      	b.n	80075d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
 80075ca:	e002      	b.n	80075d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f969 	bl	80078a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d024      	beq.n	8007626 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f943 	bl	800787c <HAL_CAN_TxMailbox2CompleteCallback>
 80075f6:	e016      	b.n	8007626 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
 800760a:	e00c      	b.n	8007626 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
 800761e:	e002      	b.n	8007626 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f949 	bl	80078b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00c      	beq.n	800764a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007640:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2210      	movs	r2, #16
 8007648:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2208      	movs	r2, #8
 8007664:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f930 	bl	80078cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0303 	and.w	r3, r3, #3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7f9 fdc1 	bl	800120c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00c      	beq.n	80076ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2210      	movs	r2, #16
 80076ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2208      	movs	r2, #8
 80076c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f912 	bl	80078f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f8f9 	bl	80078e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f003 0310 	and.w	r3, r3, #16
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2210      	movs	r2, #16
 8007708:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f8fc 	bl	8007908 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00b      	beq.n	8007732 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2208      	movs	r2, #8
 800772a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8f5 	bl	800791c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d07b      	beq.n	8007834 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d072      	beq.n	800782c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	f043 0304 	orr.w	r3, r3, #4
 8007798:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d043      	beq.n	800782c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d03e      	beq.n	800782c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077b4:	2b60      	cmp	r3, #96	; 0x60
 80077b6:	d02b      	beq.n	8007810 <HAL_CAN_IRQHandler+0x32a>
 80077b8:	2b60      	cmp	r3, #96	; 0x60
 80077ba:	d82e      	bhi.n	800781a <HAL_CAN_IRQHandler+0x334>
 80077bc:	2b50      	cmp	r3, #80	; 0x50
 80077be:	d022      	beq.n	8007806 <HAL_CAN_IRQHandler+0x320>
 80077c0:	2b50      	cmp	r3, #80	; 0x50
 80077c2:	d82a      	bhi.n	800781a <HAL_CAN_IRQHandler+0x334>
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d019      	beq.n	80077fc <HAL_CAN_IRQHandler+0x316>
 80077c8:	2b40      	cmp	r3, #64	; 0x40
 80077ca:	d826      	bhi.n	800781a <HAL_CAN_IRQHandler+0x334>
 80077cc:	2b30      	cmp	r3, #48	; 0x30
 80077ce:	d010      	beq.n	80077f2 <HAL_CAN_IRQHandler+0x30c>
 80077d0:	2b30      	cmp	r3, #48	; 0x30
 80077d2:	d822      	bhi.n	800781a <HAL_CAN_IRQHandler+0x334>
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d002      	beq.n	80077de <HAL_CAN_IRQHandler+0x2f8>
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d005      	beq.n	80077e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80077dc:	e01d      	b.n	800781a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	f043 0308 	orr.w	r3, r3, #8
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077e6:	e019      	b.n	800781c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	f043 0310 	orr.w	r3, r3, #16
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077f0:	e014      	b.n	800781c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	f043 0320 	orr.w	r3, r3, #32
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077fa:	e00f      	b.n	800781c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007804:	e00a      	b.n	800781c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800780e:	e005      	b.n	800781c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007818:	e000      	b.n	800781c <HAL_CAN_IRQHandler+0x336>
            break;
 800781a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800782a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2204      	movs	r2, #4
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d008      	beq.n	800784c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f872 	bl	8007930 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800784c:	bf00      	nop
 800784e:	3728      	adds	r7, #40	; 0x28
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <__NVIC_SetPriorityGrouping+0x44>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007960:	4013      	ands	r3, r2
 8007962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800796c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007976:	4a04      	ldr	r2, [pc, #16]	; (8007988 <__NVIC_SetPriorityGrouping+0x44>)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	60d3      	str	r3, [r2, #12]
}
 800797c:	bf00      	nop
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	e000ed00 	.word	0xe000ed00

0800798c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <__NVIC_GetPriorityGrouping+0x18>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	f003 0307 	and.w	r3, r3, #7
}
 800799a:	4618      	mov	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	db0b      	blt.n	80079d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	f003 021f 	and.w	r2, r3, #31
 80079c0:	4907      	ldr	r1, [pc, #28]	; (80079e0 <__NVIC_EnableIRQ+0x38>)
 80079c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	2001      	movs	r0, #1
 80079ca:	fa00 f202 	lsl.w	r2, r0, r2
 80079ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e100 	.word	0xe000e100

080079e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	db0a      	blt.n	8007a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	490c      	ldr	r1, [pc, #48]	; (8007a30 <__NVIC_SetPriority+0x4c>)
 80079fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a02:	0112      	lsls	r2, r2, #4
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	440b      	add	r3, r1
 8007a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a0c:	e00a      	b.n	8007a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4908      	ldr	r1, [pc, #32]	; (8007a34 <__NVIC_SetPriority+0x50>)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	3b04      	subs	r3, #4
 8007a1c:	0112      	lsls	r2, r2, #4
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	440b      	add	r3, r1
 8007a22:	761a      	strb	r2, [r3, #24]
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000e100 	.word	0xe000e100
 8007a34:	e000ed00 	.word	0xe000ed00

08007a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b089      	sub	sp, #36	; 0x24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f1c3 0307 	rsb	r3, r3, #7
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	bf28      	it	cs
 8007a56:	2304      	movcs	r3, #4
 8007a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d902      	bls.n	8007a68 <NVIC_EncodePriority+0x30>
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3b03      	subs	r3, #3
 8007a66:	e000      	b.n	8007a6a <NVIC_EncodePriority+0x32>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43da      	mvns	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a80:	f04f 31ff 	mov.w	r1, #4294967295
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8a:	43d9      	mvns	r1, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a90:	4313      	orrs	r3, r2
         );
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3724      	adds	r7, #36	; 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff ff4c 	bl	8007944 <__NVIC_SetPriorityGrouping>
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ac6:	f7ff ff61 	bl	800798c <__NVIC_GetPriorityGrouping>
 8007aca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	6978      	ldr	r0, [r7, #20]
 8007ad2:	f7ff ffb1 	bl	8007a38 <NVIC_EncodePriority>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff ff80 	bl	80079e4 <__NVIC_SetPriority>
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ff54 	bl	80079a8 <__NVIC_EnableIRQ>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e08d      	b.n	8007c36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4b47      	ldr	r3, [pc, #284]	; (8007c40 <HAL_DMA_Init+0x138>)
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d80f      	bhi.n	8007b46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4b45      	ldr	r3, [pc, #276]	; (8007c44 <HAL_DMA_Init+0x13c>)
 8007b2e:	4413      	add	r3, r2
 8007b30:	4a45      	ldr	r2, [pc, #276]	; (8007c48 <HAL_DMA_Init+0x140>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	091b      	lsrs	r3, r3, #4
 8007b38:	009a      	lsls	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a42      	ldr	r2, [pc, #264]	; (8007c4c <HAL_DMA_Init+0x144>)
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40
 8007b44:	e00e      	b.n	8007b64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <HAL_DMA_Init+0x148>)
 8007b4e:	4413      	add	r3, r2
 8007b50:	4a3d      	ldr	r2, [pc, #244]	; (8007c48 <HAL_DMA_Init+0x140>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	091b      	lsrs	r3, r3, #4
 8007b58:	009a      	lsls	r2, r3, #2
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a3c      	ldr	r2, [pc, #240]	; (8007c54 <HAL_DMA_Init+0x14c>)
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9b6 	bl	8007f28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc4:	d102      	bne.n	8007bcc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007be0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d010      	beq.n	8007c0c <HAL_DMA_Init+0x104>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d80c      	bhi.n	8007c0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9d6 	bl	8007fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	e008      	b.n	8007c1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40020407 	.word	0x40020407
 8007c44:	bffdfff8 	.word	0xbffdfff8
 8007c48:	cccccccd 	.word	0xcccccccd
 8007c4c:	40020000 	.word	0x40020000
 8007c50:	bffdfbf8 	.word	0xbffdfbf8
 8007c54:	40020400 	.word	0x40020400

08007c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_DMA_Start_IT+0x20>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e066      	b.n	8007d46 <HAL_DMA_Start_IT+0xee>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d155      	bne.n	8007d38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f8fb 	bl	8007eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 020e 	orr.w	r2, r2, #14
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e00f      	b.n	8007cf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0204 	bic.w	r2, r2, #4
 8007cde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 020a 	orr.w	r2, r2, #10
 8007cee:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d0c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d24:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e005      	b.n	8007d44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	f003 031c 	and.w	r3, r3, #28
 8007d6e:	2204      	movs	r2, #4
 8007d70:	409a      	lsls	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4013      	ands	r3, r2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d026      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x7a>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d021      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d107      	bne.n	8007da2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0204 	bic.w	r2, r2, #4
 8007da0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f003 021c 	and.w	r2, r3, #28
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	2104      	movs	r1, #4
 8007db0:	fa01 f202 	lsl.w	r2, r1, r2
 8007db4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d071      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007dc6:	e06c      	b.n	8007ea2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dcc:	f003 031c 	and.w	r3, r3, #28
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d02e      	beq.n	8007e3a <HAL_DMA_IRQHandler+0xec>
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d029      	beq.n	8007e3a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10b      	bne.n	8007e0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 020a 	bic.w	r2, r2, #10
 8007e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e10:	f003 021c 	and.w	r2, r3, #28
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	2102      	movs	r1, #2
 8007e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d038      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007e38:	e033      	b.n	8007ea2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	f003 031c 	and.w	r3, r3, #28
 8007e42:	2208      	movs	r2, #8
 8007e44:	409a      	lsls	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d02a      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x156>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d025      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 020e 	bic.w	r2, r2, #14
 8007e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6c:	f003 021c 	and.w	r2, r3, #28
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2101      	movs	r1, #1
 8007e76:	fa01 f202 	lsl.w	r2, r1, r2
 8007e7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
}
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ec2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ed4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	f003 021c 	and.w	r2, r3, #28
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b10      	cmp	r3, #16
 8007ef8:	d108      	bne.n	8007f0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f0a:	e007      	b.n	8007f1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]
}
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b17      	ldr	r3, [pc, #92]	; (8007f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d80a      	bhi.n	8007f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f40:	089b      	lsrs	r3, r3, #2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6493      	str	r3, [r2, #72]	; 0x48
 8007f50:	e007      	b.n	8007f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	089b      	lsrs	r3, r3, #2
 8007f58:	009a      	lsls	r2, r3, #2
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	3b08      	subs	r3, #8
 8007f6a:	4a0c      	ldr	r2, [pc, #48]	; (8007f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a0a      	ldr	r2, [pc, #40]	; (8007fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007f78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	2201      	movs	r2, #1
 8007f82:	409a      	lsls	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f88:	bf00      	nop
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40020407 	.word	0x40020407
 8007f98:	4002081c 	.word	0x4002081c
 8007f9c:	cccccccd 	.word	0xcccccccd
 8007fa0:	40020880 	.word	0x40020880

08007fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007fc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	1000823f 	.word	0x1000823f
 8007fe8:	40020940 	.word	0x40020940

08007fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ffa:	e166      	b.n	80082ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	2101      	movs	r1, #1
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	4013      	ands	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8158 	beq.w	80082c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d005      	beq.n	800802c <HAL_GPIO_Init+0x40>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d130      	bne.n	800808e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	2203      	movs	r2, #3
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	43db      	mvns	r3, r3
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4013      	ands	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008062:	2201      	movs	r2, #1
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	43db      	mvns	r3, r3
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4013      	ands	r3, r2
 8008070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	f003 0201 	and.w	r2, r3, #1
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	fa02 f303 	lsl.w	r3, r2, r3
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d017      	beq.n	80080ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	2203      	movs	r2, #3
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	43db      	mvns	r3, r3
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	4013      	ands	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d123      	bne.n	800811e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	08da      	lsrs	r2, r3, #3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3208      	adds	r2, #8
 80080de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	220f      	movs	r2, #15
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43db      	mvns	r3, r3
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4013      	ands	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	fa02 f303 	lsl.w	r3, r2, r3
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	08da      	lsrs	r2, r3, #3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3208      	adds	r2, #8
 8008118:	6939      	ldr	r1, [r7, #16]
 800811a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	2203      	movs	r2, #3
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	43db      	mvns	r3, r3
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4013      	ands	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f003 0203 	and.w	r2, r3, #3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80b2 	beq.w	80082c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008160:	4b61      	ldr	r3, [pc, #388]	; (80082e8 <HAL_GPIO_Init+0x2fc>)
 8008162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008164:	4a60      	ldr	r2, [pc, #384]	; (80082e8 <HAL_GPIO_Init+0x2fc>)
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	6613      	str	r3, [r2, #96]	; 0x60
 800816c:	4b5e      	ldr	r3, [pc, #376]	; (80082e8 <HAL_GPIO_Init+0x2fc>)
 800816e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008178:	4a5c      	ldr	r2, [pc, #368]	; (80082ec <HAL_GPIO_Init+0x300>)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	089b      	lsrs	r3, r3, #2
 800817e:	3302      	adds	r3, #2
 8008180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	220f      	movs	r2, #15
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	43db      	mvns	r3, r3
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4013      	ands	r3, r2
 800819a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80081a2:	d02b      	beq.n	80081fc <HAL_GPIO_Init+0x210>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a52      	ldr	r2, [pc, #328]	; (80082f0 <HAL_GPIO_Init+0x304>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d025      	beq.n	80081f8 <HAL_GPIO_Init+0x20c>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a51      	ldr	r2, [pc, #324]	; (80082f4 <HAL_GPIO_Init+0x308>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d01f      	beq.n	80081f4 <HAL_GPIO_Init+0x208>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a50      	ldr	r2, [pc, #320]	; (80082f8 <HAL_GPIO_Init+0x30c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d019      	beq.n	80081f0 <HAL_GPIO_Init+0x204>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a4f      	ldr	r2, [pc, #316]	; (80082fc <HAL_GPIO_Init+0x310>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d013      	beq.n	80081ec <HAL_GPIO_Init+0x200>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a4e      	ldr	r2, [pc, #312]	; (8008300 <HAL_GPIO_Init+0x314>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00d      	beq.n	80081e8 <HAL_GPIO_Init+0x1fc>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a4d      	ldr	r2, [pc, #308]	; (8008304 <HAL_GPIO_Init+0x318>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <HAL_GPIO_Init+0x1f8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a4c      	ldr	r2, [pc, #304]	; (8008308 <HAL_GPIO_Init+0x31c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d101      	bne.n	80081e0 <HAL_GPIO_Init+0x1f4>
 80081dc:	2307      	movs	r3, #7
 80081de:	e00e      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081e0:	2308      	movs	r3, #8
 80081e2:	e00c      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081e4:	2306      	movs	r3, #6
 80081e6:	e00a      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081e8:	2305      	movs	r3, #5
 80081ea:	e008      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081ec:	2304      	movs	r3, #4
 80081ee:	e006      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081f0:	2303      	movs	r3, #3
 80081f2:	e004      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e002      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <HAL_GPIO_Init+0x212>
 80081fc:	2300      	movs	r3, #0
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	f002 0203 	and.w	r2, r2, #3
 8008204:	0092      	lsls	r2, r2, #2
 8008206:	4093      	lsls	r3, r2
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800820e:	4937      	ldr	r1, [pc, #220]	; (80082ec <HAL_GPIO_Init+0x300>)
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	3302      	adds	r3, #2
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800821c:	4b3b      	ldr	r3, [pc, #236]	; (800830c <HAL_GPIO_Init+0x320>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	43db      	mvns	r3, r3
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4013      	ands	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008240:	4a32      	ldr	r2, [pc, #200]	; (800830c <HAL_GPIO_Init+0x320>)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008246:	4b31      	ldr	r3, [pc, #196]	; (800830c <HAL_GPIO_Init+0x320>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	43db      	mvns	r3, r3
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4013      	ands	r3, r2
 8008254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800826a:	4a28      	ldr	r2, [pc, #160]	; (800830c <HAL_GPIO_Init+0x320>)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008270:	4b26      	ldr	r3, [pc, #152]	; (800830c <HAL_GPIO_Init+0x320>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	43db      	mvns	r3, r3
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4013      	ands	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008294:	4a1d      	ldr	r2, [pc, #116]	; (800830c <HAL_GPIO_Init+0x320>)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800829a:	4b1c      	ldr	r3, [pc, #112]	; (800830c <HAL_GPIO_Init+0x320>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	43db      	mvns	r3, r3
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4013      	ands	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082be:	4a13      	ldr	r2, [pc, #76]	; (800830c <HAL_GPIO_Init+0x320>)
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	3301      	adds	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f ae91 	bne.w	8007ffc <HAL_GPIO_Init+0x10>
  }
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40021000 	.word	0x40021000
 80082ec:	40010000 	.word	0x40010000
 80082f0:	48000400 	.word	0x48000400
 80082f4:	48000800 	.word	0x48000800
 80082f8:	48000c00 	.word	0x48000c00
 80082fc:	48001000 	.word	0x48001000
 8008300:	48001400 	.word	0x48001400
 8008304:	48001800 	.word	0x48001800
 8008308:	48001c00 	.word	0x48001c00
 800830c:	40010400 	.word	0x40010400

08008310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	887b      	ldrh	r3, [r7, #2]
 8008322:	4013      	ands	r3, r2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	e001      	b.n	8008332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
 800834c:	4613      	mov	r3, r2
 800834e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008350:	787b      	ldrb	r3, [r7, #1]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008356:	887a      	ldrh	r2, [r7, #2]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800835c:	e002      	b.n	8008364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800835e:	887a      	ldrh	r2, [r7, #2]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008372:	b08f      	sub	sp, #60	; 0x3c
 8008374:	af0a      	add	r7, sp, #40	; 0x28
 8008376:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e116      	b.n	80085b0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f00a fd61 	bl	8012e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2203      	movs	r2, #3
 80083a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f004 fe34 	bl	800d02e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	687e      	ldr	r6, [r7, #4]
 80083ce:	466d      	mov	r5, sp
 80083d0:	f106 0410 	add.w	r4, r6, #16
 80083d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80083e4:	1d33      	adds	r3, r6, #4
 80083e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083e8:	6838      	ldr	r0, [r7, #0]
 80083ea:	f004 fd47 	bl	800ce7c <USB_CoreInit>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0d7      	b.n	80085b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f004 fe22 	bl	800d050 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]
 8008410:	e04a      	b.n	80084a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008412:	7bfa      	ldrb	r2, [r7, #15]
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	440b      	add	r3, r1
 8008420:	333d      	adds	r3, #61	; 0x3d
 8008422:	2201      	movs	r2, #1
 8008424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008426:	7bfa      	ldrb	r2, [r7, #15]
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	333c      	adds	r3, #60	; 0x3c
 8008436:	7bfa      	ldrb	r2, [r7, #15]
 8008438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800843a:	7bfa      	ldrb	r2, [r7, #15]
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	b298      	uxth	r0, r3
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3344      	adds	r3, #68	; 0x44
 800844e:	4602      	mov	r2, r0
 8008450:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008452:	7bfa      	ldrb	r2, [r7, #15]
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	3340      	adds	r3, #64	; 0x40
 8008462:	2200      	movs	r2, #0
 8008464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	3348      	adds	r3, #72	; 0x48
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800847a:	7bfa      	ldrb	r2, [r7, #15]
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	4613      	mov	r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	440b      	add	r3, r1
 8008488:	334c      	adds	r3, #76	; 0x4c
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800848e:	7bfa      	ldrb	r2, [r7, #15]
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	4613      	mov	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	3354      	adds	r3, #84	; 0x54
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	3301      	adds	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d3af      	bcc.n	8008412 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
 80084b6:	e044      	b.n	8008542 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80084b8:	7bfa      	ldrb	r2, [r7, #15]
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4613      	mov	r3, r2
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	440b      	add	r3, r1
 80084c6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80084ce:	7bfa      	ldrb	r2, [r7, #15]
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084e4:	7bfa      	ldrb	r2, [r7, #15]
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084fa:	7bfa      	ldrb	r2, [r7, #15]
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008510:	7bfa      	ldrb	r2, [r7, #15]
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008526:	7bfa      	ldrb	r2, [r7, #15]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	3301      	adds	r3, #1
 8008540:	73fb      	strb	r3, [r7, #15]
 8008542:	7bfa      	ldrb	r2, [r7, #15]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d3b5      	bcc.n	80084b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	603b      	str	r3, [r7, #0]
 8008552:	687e      	ldr	r6, [r7, #4]
 8008554:	466d      	mov	r5, sp
 8008556:	f106 0410 	add.w	r4, r6, #16
 800855a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800855c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800855e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008562:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008566:	e885 0003 	stmia.w	r5, {r0, r1}
 800856a:	1d33      	adds	r3, r6, #4
 800856c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800856e:	6838      	ldr	r0, [r7, #0]
 8008570:	f004 fdba 	bl	800d0e8 <USB_DevInit>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e014      	b.n	80085b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	2b01      	cmp	r3, #1
 800859c:	d102      	bne.n	80085a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 f882 	bl	80096a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f005 fe42 	bl	800e232 <USB_DevDisconnect>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_PCD_Start+0x1c>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e01c      	b.n	800860e <HAL_PCD_Start+0x56>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d105      	bne.n	80085f0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f004 fd09 	bl	800d00c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f005 fdf6 	bl	800e1f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008616:	b590      	push	{r4, r7, lr}
 8008618:	b08d      	sub	sp, #52	; 0x34
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f005 feb4 	bl	800e39a <USB_GetMode>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	f040 847e 	bne.w	8008f36 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f005 fe18 	bl	800e274 <USB_ReadInterrupts>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 8474 	beq.w	8008f34 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	0a1b      	lsrs	r3, r3, #8
 8008656:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f005 fe05 	bl	800e274 <USB_ReadInterrupts>
 800866a:	4603      	mov	r3, r0
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b02      	cmp	r3, #2
 8008672:	d107      	bne.n	8008684 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f002 0202 	and.w	r2, r2, #2
 8008682:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f005 fdf3 	bl	800e274 <USB_ReadInterrupts>
 800868e:	4603      	mov	r3, r0
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b10      	cmp	r3, #16
 8008696:	d161      	bne.n	800875c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699a      	ldr	r2, [r3, #24]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0210 	bic.w	r2, r2, #16
 80086a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	4613      	mov	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	4413      	add	r3, r2
 80086c4:	3304      	adds	r3, #4
 80086c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	0c5b      	lsrs	r3, r3, #17
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d124      	bne.n	800871e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d035      	beq.n	800874c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	091b      	lsrs	r3, r3, #4
 80086e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80086ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	6a38      	ldr	r0, [r7, #32]
 80086f4:	f005 fc2a 	bl	800df4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	091b      	lsrs	r3, r3, #4
 8008700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008704:	441a      	add	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	091b      	lsrs	r3, r3, #4
 8008712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008716:	441a      	add	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	621a      	str	r2, [r3, #32]
 800871c:	e016      	b.n	800874c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	0c5b      	lsrs	r3, r3, #17
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	2b06      	cmp	r3, #6
 8008728:	d110      	bne.n	800874c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008730:	2208      	movs	r2, #8
 8008732:	4619      	mov	r1, r3
 8008734:	6a38      	ldr	r0, [r7, #32]
 8008736:	f005 fc09 	bl	800df4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a1a      	ldr	r2, [r3, #32]
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	091b      	lsrs	r3, r3, #4
 8008742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008746:	441a      	add	r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0210 	orr.w	r2, r2, #16
 800875a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f005 fd87 	bl	800e274 <USB_ReadInterrupts>
 8008766:	4603      	mov	r3, r0
 8008768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800876c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008770:	f040 80a7 	bne.w	80088c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f005 fd8c 	bl	800e29a <USB_ReadDevAllOutEpInterrupt>
 8008782:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008784:	e099      	b.n	80088ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 808e 	beq.w	80088ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	4611      	mov	r1, r2
 800879c:	4618      	mov	r0, r3
 800879e:	f005 fdb0 	bl	800e302 <USB_ReadDevOutEPInterrupt>
 80087a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	461a      	mov	r2, r3
 80087bc:	2301      	movs	r3, #1
 80087be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80087c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fe96 	bl	80094f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00c      	beq.n	80087ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	461a      	mov	r2, r3
 80087e0:	2308      	movs	r3, #8
 80087e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80087e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fed2 	bl	8009590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d008      	beq.n	8008808 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008802:	461a      	mov	r2, r3
 8008804:	2310      	movs	r3, #16
 8008806:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d030      	beq.n	8008874 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881a:	2b80      	cmp	r3, #128	; 0x80
 800881c:	d109      	bne.n	8008832 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800882c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008830:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	4613      	mov	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	3304      	adds	r3, #4
 8008846:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	78db      	ldrb	r3, [r3, #3]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d108      	bne.n	8008862 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2200      	movs	r2, #0
 8008854:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f00a fc45 	bl	80130ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	461a      	mov	r2, r3
 8008870:	2302      	movs	r3, #2
 8008872:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	461a      	mov	r2, r3
 800888c:	2320      	movs	r3, #32
 800888e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a6:	461a      	mov	r2, r3
 80088a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	3301      	adds	r3, #1
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f47f af62 	bne.w	8008786 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f005 fcd4 	bl	800e274 <USB_ReadInterrupts>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088d6:	f040 80a4 	bne.w	8008a22 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f005 fcf5 	bl	800e2ce <USB_ReadDevAllInEpInterrupt>
 80088e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80088ea:	e096      	b.n	8008a1a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 808b 	beq.w	8008a0e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f005 fd1b 	bl	800e33e <USB_ReadDevInEPInterrupt>
 8008908:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d020      	beq.n	8008956 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	2201      	movs	r2, #1
 800891c:	fa02 f303 	lsl.w	r3, r2, r3
 8008920:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	43db      	mvns	r3, r3
 800892e:	69f9      	ldr	r1, [r7, #28]
 8008930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008934:	4013      	ands	r3, r2
 8008936:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008944:	461a      	mov	r2, r3
 8008946:	2301      	movs	r3, #1
 8008948:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	b2db      	uxtb	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f00a fb36 	bl	8012fc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896c:	461a      	mov	r2, r3
 800896e:	2308      	movs	r3, #8
 8008970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b00      	cmp	r3, #0
 800897a:	d008      	beq.n	800898e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008988:	461a      	mov	r2, r3
 800898a:	2310      	movs	r3, #16
 800898c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d008      	beq.n	80089aa <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a4:	461a      	mov	r2, r3
 80089a6:	2340      	movs	r3, #64	; 0x40
 80089a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d023      	beq.n	80089fc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80089b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089b6:	6a38      	ldr	r0, [r7, #32]
 80089b8:	f004 fce2 	bl	800d380 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80089bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089be:	4613      	mov	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	3338      	adds	r3, #56	; 0x38
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	3304      	adds	r3, #4
 80089ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	78db      	ldrb	r3, [r3, #3]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d108      	bne.n	80089ea <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2200      	movs	r2, #0
 80089dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f00a fb93 	bl	8013110 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	461a      	mov	r2, r3
 80089f8:	2302      	movs	r3, #2
 80089fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fcea 	bl	80093e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	3301      	adds	r3, #1
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f47f af65 	bne.w	80088ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f005 fc24 	bl	800e274 <USB_ReadInterrupts>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a36:	d122      	bne.n	8008a7e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a46:	f023 0301 	bic.w	r3, r3, #1
 8008a4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d108      	bne.n	8008a68 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f00a fdc5 	bl	80135f0 <HAL_PCDEx_LPM_Callback>
 8008a66:	e002      	b.n	8008a6e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f00a fb17 	bl	801309c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f005 fbf6 	bl	800e274 <USB_ReadInterrupts>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a92:	d112      	bne.n	8008aba <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d102      	bne.n	8008aaa <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f00a fad3 	bl	8013050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f005 fbd8 	bl	800e274 <USB_ReadInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ace:	d121      	bne.n	8008b14 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008ade:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d111      	bne.n	8008b0e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af8:	089b      	lsrs	r3, r3, #2
 8008afa:	f003 020f 	and.w	r2, r3, #15
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b04:	2101      	movs	r1, #1
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f00a fd72 	bl	80135f0 <HAL_PCDEx_LPM_Callback>
 8008b0c:	e002      	b.n	8008b14 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f00a fa9e 	bl	8013050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f005 fbab 	bl	800e274 <USB_ReadInterrupts>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b28:	f040 80b5 	bne.w	8008c96 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b3a:	f023 0301 	bic.w	r3, r3, #1
 8008b3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2110      	movs	r1, #16
 8008b46:	4618      	mov	r0, r3
 8008b48:	f004 fc1a 	bl	800d380 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b50:	e046      	b.n	8008be0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b92:	461a      	mov	r2, r3
 8008b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008baa:	0151      	lsls	r1, r2, #5
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	440a      	add	r2, r1
 8008bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	3301      	adds	r3, #1
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3b3      	bcc.n	8008b52 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bf8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008bfc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d016      	beq.n	8008c34 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c16:	f043 030b 	orr.w	r3, r3, #11
 8008c1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c2c:	f043 030b 	orr.w	r3, r3, #11
 8008c30:	6453      	str	r3, [r2, #68]	; 0x44
 8008c32:	e015      	b.n	8008c60 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	69fa      	ldr	r2, [r7, #28]
 8008c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c46:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008c4a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5a:	f043 030b 	orr.w	r3, r3, #11
 8008c5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f005 fbbb 	bl	800e3fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695a      	ldr	r2, [r3, #20]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f005 faea 	bl	800e274 <USB_ReadInterrupts>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008caa:	d124      	bne.n	8008cf6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f005 fb80 	bl	800e3b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f004 fbdd 	bl	800d47a <USB_GetDevSpeed>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681c      	ldr	r4, [r3, #0]
 8008ccc:	f001 fc92 	bl	800a5f4 <HAL_RCC_GetHCLKFreq>
 8008cd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f004 f8fa 	bl	800ced4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f00a f996 	bl	8013012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	695a      	ldr	r2, [r3, #20]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f005 faba 	bl	800e274 <USB_ReadInterrupts>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	d10a      	bne.n	8008d20 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f00a f973 	bl	8012ff6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f002 0208 	and.w	r2, r2, #8
 8008d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f005 faa5 	bl	800e274 <USB_ReadInterrupts>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d122      	bne.n	8008d7a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d40:	2301      	movs	r3, #1
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
 8008d44:	e014      	b.n	8008d70 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d105      	bne.n	8008d6a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fb0b 	bl	8009380 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d3e5      	bcc.n	8008d46 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f005 fa78 	bl	800e274 <USB_ReadInterrupts>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d8e:	d13b      	bne.n	8008e08 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d90:	2301      	movs	r3, #1
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
 8008d94:	e02b      	b.n	8008dee <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	4613      	mov	r3, r2
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	3340      	adds	r3, #64	; 0x40
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d115      	bne.n	8008de8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008dbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	da12      	bge.n	8008de8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	333f      	adds	r3, #63	; 0x3f
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 facc 	bl	8009380 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	3301      	adds	r3, #1
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d3ce      	bcc.n	8008d96 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695a      	ldr	r2, [r3, #20]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f005 fa31 	bl	800e274 <USB_ReadInterrupts>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e1c:	d155      	bne.n	8008eca <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e1e:	2301      	movs	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
 8008e22:	e045      	b.n	8008eb0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	4613      	mov	r3, r2
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d12e      	bne.n	8008eaa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	da2b      	bge.n	8008eaa <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d121      	bne.n	8008eaa <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e78:	2201      	movs	r2, #1
 8008e7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ea6:	6053      	str	r3, [r2, #4]
            break;
 8008ea8:	e007      	b.n	8008eba <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	3301      	adds	r3, #1
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d3b4      	bcc.n	8008e24 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695a      	ldr	r2, [r3, #20]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f005 f9d0 	bl	800e274 <USB_ReadInterrupts>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ede:	d10a      	bne.n	8008ef6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f00a f927 	bl	8013134 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	695a      	ldr	r2, [r3, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f005 f9ba 	bl	800e274 <USB_ReadInterrupts>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d115      	bne.n	8008f36 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f00a f917 	bl	8013150 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6859      	ldr	r1, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	e000      	b.n	8008f36 <HAL_PCD_IRQHandler+0x920>
      return;
 8008f34:	bf00      	nop
    }
  }
}
 8008f36:	3734      	adds	r7, #52	; 0x34
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd90      	pop	{r4, r7, pc}

08008f3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_PCD_SetAddress+0x1a>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e013      	b.n	8008f7e <HAL_PCD_SetAddress+0x42>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f005 f918 	bl	800e1a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	4608      	mov	r0, r1
 8008f90:	4611      	mov	r1, r2
 8008f92:	461a      	mov	r2, r3
 8008f94:	4603      	mov	r3, r0
 8008f96:	70fb      	strb	r3, [r7, #3]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	803b      	strh	r3, [r7, #0]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	da0f      	bge.n	8008fcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	f003 020f 	and.w	r2, r3, #15
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	3338      	adds	r3, #56	; 0x38
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	705a      	strb	r2, [r3, #1]
 8008fca:	e00f      	b.n	8008fec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	f003 020f 	and.w	r2, r3, #15
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ff8:	883a      	ldrh	r2, [r7, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	78ba      	ldrb	r2, [r7, #2]
 8009002:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009016:	78bb      	ldrb	r3, [r7, #2]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d102      	bne.n	8009022 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_PCD_EP_Open+0xaa>
 800902c:	2302      	movs	r3, #2
 800902e:	e00e      	b.n	800904e <HAL_PCD_EP_Open+0xc8>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68f9      	ldr	r1, [r7, #12]
 800903e:	4618      	mov	r0, r3
 8009040:	f004 fa3a 	bl	800d4b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800904c:	7afb      	ldrb	r3, [r7, #11]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	460b      	mov	r3, r1
 8009060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009066:	2b00      	cmp	r3, #0
 8009068:	da0f      	bge.n	800908a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	4613      	mov	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	3338      	adds	r3, #56	; 0x38
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	3304      	adds	r3, #4
 8009080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	705a      	strb	r2, [r3, #1]
 8009088:	e00f      	b.n	80090aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	f003 020f 	and.w	r2, r3, #15
 8009090:	4613      	mov	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	4413      	add	r3, r2
 80090a0:	3304      	adds	r3, #4
 80090a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090aa:	78fb      	ldrb	r3, [r7, #3]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_PCD_EP_Close+0x6e>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e00e      	b.n	80090e2 <HAL_PCD_EP_Close+0x8c>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68f9      	ldr	r1, [r7, #12]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f004 fa78 	bl	800d5c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	460b      	mov	r3, r1
 80090f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	f003 020f 	and.w	r2, r3, #15
 8009100:	4613      	mov	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2200      	movs	r2, #0
 8009124:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800912c:	7afb      	ldrb	r3, [r7, #11]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	b2da      	uxtb	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6979      	ldr	r1, [r7, #20]
 8009148:	4618      	mov	r0, r3
 800914a:	f004 fcf9 	bl	800db40 <USB_EP0StartXfer>
 800914e:	e005      	b.n	800915c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6979      	ldr	r1, [r7, #20]
 8009156:	4618      	mov	r0, r3
 8009158:	f004 fb12 	bl	800d780 <USB_EPStartXfer>
  }

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	f003 020f 	and.w	r2, r3, #15
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	00db      	lsls	r3, r3, #3
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009188:	681b      	ldr	r3, [r3, #0]
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b086      	sub	sp, #24
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
 80091a2:	460b      	mov	r3, r1
 80091a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	f003 020f 	and.w	r2, r3, #15
 80091ac:	4613      	mov	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	3338      	adds	r3, #56	; 0x38
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	3304      	adds	r3, #4
 80091bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2201      	movs	r2, #1
 80091d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f004 fca4 	bl	800db40 <USB_EP0StartXfer>
 80091f8:	e005      	b.n	8009206 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	4618      	mov	r0, r3
 8009202:	f004 fabd 	bl	800d780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	429a      	cmp	r2, r3
 8009228:	d901      	bls.n	800922e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e04e      	b.n	80092cc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800922e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da0f      	bge.n	8009256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	4613      	mov	r3, r2
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	3338      	adds	r3, #56	; 0x38
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	705a      	strb	r2, [r3, #1]
 8009254:	e00d      	b.n	8009272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	b2da      	uxtb	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800928a:	2b01      	cmp	r3, #1
 800928c:	d101      	bne.n	8009292 <HAL_PCD_EP_SetStall+0x82>
 800928e:	2302      	movs	r3, #2
 8009290:	e01c      	b.n	80092cc <HAL_PCD_EP_SetStall+0xbc>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f004 feab 	bl	800dffc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d108      	bne.n	80092c2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f005 f89d 	bl	800e3fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 020f 	and.w	r2, r3, #15
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d901      	bls.n	80092f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e042      	b.n	8009378 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da0f      	bge.n	800931a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 020f 	and.w	r2, r3, #15
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	3338      	adds	r3, #56	; 0x38
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	3304      	adds	r3, #4
 8009310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	705a      	strb	r2, [r3, #1]
 8009318:	e00f      	b.n	800933a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	f003 020f 	and.w	r2, r3, #15
 8009320:	4613      	mov	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	4413      	add	r3, r2
 8009330:	3304      	adds	r3, #4
 8009332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	f003 030f 	and.w	r3, r3, #15
 8009346:	b2da      	uxtb	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009352:	2b01      	cmp	r3, #1
 8009354:	d101      	bne.n	800935a <HAL_PCD_EP_ClrStall+0x86>
 8009356:	2302      	movs	r3, #2
 8009358:	e00e      	b.n	8009378 <HAL_PCD_EP_ClrStall+0xa4>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	4618      	mov	r0, r3
 800936a:	f004 feb5 	bl	800e0d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800938c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009390:	2b00      	cmp	r3, #0
 8009392:	da0c      	bge.n	80093ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	f003 020f 	and.w	r2, r3, #15
 800939a:	4613      	mov	r3, r2
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	3338      	adds	r3, #56	; 0x38
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	3304      	adds	r3, #4
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	e00c      	b.n	80093c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	f003 020f 	and.w	r2, r3, #15
 80093b4:	4613      	mov	r3, r2
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	3304      	adds	r3, #4
 80093c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68f9      	ldr	r1, [r7, #12]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f004 fcd8 	bl	800dd84 <USB_EPStopXfer>
 80093d4:	4603      	mov	r3, r0
 80093d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80093d8:	7afb      	ldrb	r3, [r7, #11]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	3338      	adds	r3, #56	; 0x38
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a1a      	ldr	r2, [r3, #32]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	429a      	cmp	r2, r3
 8009414:	d901      	bls.n	800941a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e067      	b.n	80094ea <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	429a      	cmp	r2, r3
 800942e:	d902      	bls.n	8009436 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	3303      	adds	r3, #3
 800943a:	089b      	lsrs	r3, r3, #2
 800943c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800943e:	e026      	b.n	800948e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	699a      	ldr	r2, [r3, #24]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	429a      	cmp	r2, r3
 8009454:	d902      	bls.n	800945c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	3303      	adds	r3, #3
 8009460:	089b      	lsrs	r3, r3, #2
 8009462:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6919      	ldr	r1, [r3, #16]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	b2da      	uxtb	r2, r3
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	b29b      	uxth	r3, r3
 8009470:	6978      	ldr	r0, [r7, #20]
 8009472:	f004 fd31 	bl	800ded8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	441a      	add	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1a      	ldr	r2, [r3, #32]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	441a      	add	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d809      	bhi.n	80094b8 <PCD_WriteEmptyTxFifo+0xd6>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a1a      	ldr	r2, [r3, #32]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d203      	bcs.n	80094b8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1c3      	bne.n	8009440 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	699a      	ldr	r2, [r3, #24]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d811      	bhi.n	80094e8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	2201      	movs	r2, #1
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	43db      	mvns	r3, r3
 80094de:	6939      	ldr	r1, [r7, #16]
 80094e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094e4:	4013      	ands	r3, r2
 80094e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3720      	adds	r7, #32
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	333c      	adds	r3, #60	; 0x3c
 800950c:	3304      	adds	r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <PCD_EP_OutXfrComplete_int+0x98>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d124      	bne.n	8009574 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009540:	461a      	mov	r2, r3
 8009542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009546:	6093      	str	r3, [r2, #8]
 8009548:	e01a      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d008      	beq.n	8009566 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009560:	461a      	mov	r2, r3
 8009562:	2320      	movs	r3, #32
 8009564:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	b2db      	uxtb	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f009 fd0d 	bl	8012f8c <HAL_PCD_DataOutStageCallback>
 8009572:	e005      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f009 fd06 	bl	8012f8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	4f54310a 	.word	0x4f54310a

08009590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	333c      	adds	r3, #60	; 0x3c
 80095a8:	3304      	adds	r3, #4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4a0c      	ldr	r2, [pc, #48]	; (80095f4 <PCD_EP_OutSetupPacket_int+0x64>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d90e      	bls.n	80095e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095dc:	461a      	mov	r2, r3
 80095de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f009 fcbf 	bl	8012f68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	4f54300a 	.word	0x4f54300a

080095f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
 8009604:	4613      	mov	r3, r2
 8009606:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d107      	bne.n	8009626 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009616:	883b      	ldrh	r3, [r7, #0]
 8009618:	0419      	lsls	r1, r3, #16
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	430a      	orrs	r2, r1
 8009622:	629a      	str	r2, [r3, #40]	; 0x28
 8009624:	e028      	b.n	8009678 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	0c1b      	lsrs	r3, r3, #16
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	4413      	add	r3, r2
 8009632:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
 8009638:	e00d      	b.n	8009656 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	3340      	adds	r3, #64	; 0x40
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	0c1b      	lsrs	r3, r3, #16
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4413      	add	r3, r2
 800964e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	3301      	adds	r3, #1
 8009654:	73fb      	strb	r3, [r7, #15]
 8009656:	7bfa      	ldrb	r2, [r7, #15]
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	3b01      	subs	r3, #1
 800965c:	429a      	cmp	r2, r3
 800965e:	d3ec      	bcc.n	800963a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009660:	883b      	ldrh	r3, [r7, #0]
 8009662:	0418      	lsls	r0, r3, #16
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6819      	ldr	r1, [r3, #0]
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	3b01      	subs	r3, #1
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	4302      	orrs	r2, r0
 8009670:	3340      	adds	r3, #64	; 0x40
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	887a      	ldrh	r2, [r7, #2]
 8009698:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096da:	f043 0303 	orr.w	r3, r3, #3
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009702:	d104      	bne.n	800970e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f908 	bl	800991c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 800970c:	e003      	b.n	8009716 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 f8d9 	bl	80098c8 <HAL_PWREx_EnterSTOP0Mode>
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009724:	4b0d      	ldr	r3, [pc, #52]	; (800975c <HAL_PWREx_GetVoltageRange+0x3c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800972c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009730:	d102      	bne.n	8009738 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009736:	e00b      	b.n	8009750 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009738:	4b08      	ldr	r3, [pc, #32]	; (800975c <HAL_PWREx_GetVoltageRange+0x3c>)
 800973a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800973e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009746:	d102      	bne.n	800974e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800974c:	e000      	b.n	8009750 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800974e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009750:	4618      	mov	r0, r3
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40007000 	.word	0x40007000

08009760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d141      	bne.n	80097f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800976e:	4b4b      	ldr	r3, [pc, #300]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977a:	d131      	bne.n	80097e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800977c:	4b47      	ldr	r3, [pc, #284]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800977e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009782:	4a46      	ldr	r2, [pc, #280]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800978c:	4b43      	ldr	r3, [pc, #268]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009794:	4a41      	ldr	r2, [pc, #260]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800979a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800979c:	4b40      	ldr	r3, [pc, #256]	; (80098a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2232      	movs	r2, #50	; 0x32
 80097a2:	fb02 f303 	mul.w	r3, r2, r3
 80097a6:	4a3f      	ldr	r2, [pc, #252]	; (80098a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097a8:	fba2 2303 	umull	r2, r3, r2, r3
 80097ac:	0c9b      	lsrs	r3, r3, #18
 80097ae:	3301      	adds	r3, #1
 80097b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097b2:	e002      	b.n	80097ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097ba:	4b38      	ldr	r3, [pc, #224]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c6:	d102      	bne.n	80097ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f2      	bne.n	80097b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097ce:	4b33      	ldr	r3, [pc, #204]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097da:	d158      	bne.n	800988e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e057      	b.n	8009890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097e0:	4b2e      	ldr	r3, [pc, #184]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e6:	4a2d      	ldr	r2, [pc, #180]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80097f0:	e04d      	b.n	800988e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f8:	d141      	bne.n	800987e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097fa:	4b28      	ldr	r3, [pc, #160]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009806:	d131      	bne.n	800986c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009808:	4b24      	ldr	r3, [pc, #144]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800980e:	4a23      	ldr	r2, [pc, #140]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009818:	4b20      	ldr	r3, [pc, #128]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009820:	4a1e      	ldr	r2, [pc, #120]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009828:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2232      	movs	r2, #50	; 0x32
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	4a1c      	ldr	r2, [pc, #112]	; (80098a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009834:	fba2 2303 	umull	r2, r3, r2, r3
 8009838:	0c9b      	lsrs	r3, r3, #18
 800983a:	3301      	adds	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800983e:	e002      	b.n	8009846 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3b01      	subs	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800984e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009852:	d102      	bne.n	800985a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1f2      	bne.n	8009840 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800985a:	4b10      	ldr	r3, [pc, #64]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009866:	d112      	bne.n	800988e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e011      	b.n	8009890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800986e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009872:	4a0a      	ldr	r2, [pc, #40]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800987c:	e007      	b.n	800988e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800987e:	4b07      	ldr	r3, [pc, #28]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009886:	4a05      	ldr	r2, [pc, #20]	; (800989c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800988c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	40007000 	.word	0x40007000
 80098a0:	20000224 	.word	0x20000224
 80098a4:	431bde83 	.word	0x431bde83

080098a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a04      	ldr	r2, [pc, #16]	; (80098c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098b6:	6053      	str	r3, [r2, #4]
}
 80098b8:	bf00      	nop
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40007000 	.word	0x40007000

080098c8 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a0f      	ldr	r2, [pc, #60]	; (8009914 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80098d8:	f023 0307 	bic.w	r3, r3, #7
 80098dc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	4a0d      	ldr	r2, [pc, #52]	; (8009918 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098e4:	f043 0304 	orr.w	r3, r3, #4
 80098e8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d101      	bne.n	80098f4 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80098f0:	bf30      	wfi
 80098f2:	e002      	b.n	80098fa <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80098f4:	bf40      	sev
    __WFE();
 80098f6:	bf20      	wfe
    __WFE();
 80098f8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80098fa:	4b07      	ldr	r3, [pc, #28]	; (8009918 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	4a06      	ldr	r2, [pc, #24]	; (8009918 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009900:	f023 0304 	bic.w	r3, r3, #4
 8009904:	6113      	str	r3, [r2, #16]
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	40007000 	.word	0x40007000
 8009918:	e000ed00 	.word	0xe000ed00

0800991c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8009926:	4b11      	ldr	r3, [pc, #68]	; (800996c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f023 0307 	bic.w	r3, r3, #7
 800992e:	4a0f      	ldr	r2, [pc, #60]	; (800996c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	4a0d      	ldr	r2, [pc, #52]	; (8009970 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800993c:	f043 0304 	orr.w	r3, r3, #4
 8009940:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009948:	bf30      	wfi
 800994a:	e002      	b.n	8009952 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800994c:	bf40      	sev
    __WFE();
 800994e:	bf20      	wfe
    __WFE();
 8009950:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009952:	4b07      	ldr	r3, [pc, #28]	; (8009970 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	4a06      	ldr	r2, [pc, #24]	; (8009970 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009958:	f023 0304 	bic.w	r3, r3, #4
 800995c:	6113      	str	r3, [r2, #16]
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40007000 	.word	0x40007000
 8009970:	e000ed00 	.word	0xe000ed00

08009974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f000 bc68 	b.w	800a258 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009988:	4b97      	ldr	r3, [pc, #604]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f003 030c 	and.w	r3, r3, #12
 8009990:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009992:	4b95      	ldr	r3, [pc, #596]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80e6 	beq.w	8009b76 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <HAL_RCC_OscConfig+0x4c>
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	2b0c      	cmp	r3, #12
 80099b4:	f040 808d 	bne.w	8009ad2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	f040 8089 	bne.w	8009ad2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80099c0:	4b89      	ldr	r3, [pc, #548]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <HAL_RCC_OscConfig+0x66>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f000 bc3f 	b.w	800a258 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099de:	4b82      	ldr	r3, [pc, #520]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0308 	and.w	r3, r3, #8
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <HAL_RCC_OscConfig+0x80>
 80099ea:	4b7f      	ldr	r3, [pc, #508]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099f2:	e005      	b.n	8009a00 <HAL_RCC_OscConfig+0x8c>
 80099f4:	4b7c      	ldr	r3, [pc, #496]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 80099f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099fa:	091b      	lsrs	r3, r3, #4
 80099fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d224      	bcs.n	8009a4e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe47 	bl	800a69c <RCC_SetFlashLatencyFromMSIRange>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f000 bc1f 	b.w	800a258 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a1a:	4b73      	ldr	r3, [pc, #460]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a72      	ldr	r2, [pc, #456]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a20:	f043 0308 	orr.w	r3, r3, #8
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	4b70      	ldr	r3, [pc, #448]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	496d      	ldr	r1, [pc, #436]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a38:	4b6b      	ldr	r3, [pc, #428]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	4968      	ldr	r1, [pc, #416]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	604b      	str	r3, [r1, #4]
 8009a4c:	e025      	b.n	8009a9a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a4e:	4b66      	ldr	r3, [pc, #408]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a65      	ldr	r2, [pc, #404]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a54:	f043 0308 	orr.w	r3, r3, #8
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	4b63      	ldr	r3, [pc, #396]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	4960      	ldr	r1, [pc, #384]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a6c:	4b5e      	ldr	r3, [pc, #376]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	495b      	ldr	r1, [pc, #364]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fe06 	bl	800a69c <RCC_SetFlashLatencyFromMSIRange>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e3de      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a9a:	f000 fd21 	bl	800a4e0 <HAL_RCC_GetSysClockFreq>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b51      	ldr	r3, [pc, #324]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	091b      	lsrs	r3, r3, #4
 8009aa6:	f003 030f 	and.w	r3, r3, #15
 8009aaa:	4950      	ldr	r1, [pc, #320]	; (8009bec <HAL_RCC_OscConfig+0x278>)
 8009aac:	5ccb      	ldrb	r3, [r1, r3]
 8009aae:	f003 031f 	and.w	r3, r3, #31
 8009ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab6:	4a4e      	ldr	r2, [pc, #312]	; (8009bf0 <HAL_RCC_OscConfig+0x27c>)
 8009ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009aba:	4b4e      	ldr	r3, [pc, #312]	; (8009bf4 <HAL_RCC_OscConfig+0x280>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fb f96e 	bl	8004da0 <HAL_InitTick>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d052      	beq.n	8009b74 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	e3c2      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d032      	beq.n	8009b40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009ada:	4b43      	ldr	r3, [pc, #268]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a42      	ldr	r2, [pc, #264]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009ae0:	f043 0301 	orr.w	r3, r3, #1
 8009ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009ae6:	f7fb fb49 	bl	800517c <HAL_GetTick>
 8009aea:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009aec:	e008      	b.n	8009b00 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009aee:	f7fb fb45 	bl	800517c <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d901      	bls.n	8009b00 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e3ab      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b00:	4b39      	ldr	r3, [pc, #228]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0f0      	beq.n	8009aee <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b0c:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a35      	ldr	r2, [pc, #212]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b12:	f043 0308 	orr.w	r3, r3, #8
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	4b33      	ldr	r3, [pc, #204]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	4930      	ldr	r1, [pc, #192]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b2a:	4b2f      	ldr	r3, [pc, #188]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	492b      	ldr	r1, [pc, #172]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	604b      	str	r3, [r1, #4]
 8009b3e:	e01a      	b.n	8009b76 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009b40:	4b29      	ldr	r3, [pc, #164]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a28      	ldr	r2, [pc, #160]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b46:	f023 0301 	bic.w	r3, r3, #1
 8009b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b4c:	f7fb fb16 	bl	800517c <HAL_GetTick>
 8009b50:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b54:	f7fb fb12 	bl	800517c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e378      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b66:	4b20      	ldr	r3, [pc, #128]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1f0      	bne.n	8009b54 <HAL_RCC_OscConfig+0x1e0>
 8009b72:	e000      	b.n	8009b76 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d073      	beq.n	8009c6a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d005      	beq.n	8009b94 <HAL_RCC_OscConfig+0x220>
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	2b0c      	cmp	r3, #12
 8009b8c:	d10e      	bne.n	8009bac <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d10b      	bne.n	8009bac <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b94:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d063      	beq.n	8009c68 <HAL_RCC_OscConfig+0x2f4>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d15f      	bne.n	8009c68 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e355      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x250>
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	e025      	b.n	8009c10 <HAL_RCC_OscConfig+0x29c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bcc:	d114      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x284>
 8009bce:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a05      	ldr	r2, [pc, #20]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a02      	ldr	r2, [pc, #8]	; (8009be8 <HAL_RCC_OscConfig+0x274>)
 8009be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e013      	b.n	8009c10 <HAL_RCC_OscConfig+0x29c>
 8009be8:	40021000 	.word	0x40021000
 8009bec:	08016ce0 	.word	0x08016ce0
 8009bf0:	20000224 	.word	0x20000224
 8009bf4:	20000228 	.word	0x20000228
 8009bf8:	4b8f      	ldr	r3, [pc, #572]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a8e      	ldr	r2, [pc, #568]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	4b8c      	ldr	r3, [pc, #560]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a8b      	ldr	r2, [pc, #556]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d013      	beq.n	8009c40 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c18:	f7fb fab0 	bl	800517c <HAL_GetTick>
 8009c1c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c20:	f7fb faac 	bl	800517c <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b64      	cmp	r3, #100	; 0x64
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e312      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c32:	4b81      	ldr	r3, [pc, #516]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f0      	beq.n	8009c20 <HAL_RCC_OscConfig+0x2ac>
 8009c3e:	e014      	b.n	8009c6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c40:	f7fb fa9c 	bl	800517c <HAL_GetTick>
 8009c44:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c46:	e008      	b.n	8009c5a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c48:	f7fb fa98 	bl	800517c <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2b64      	cmp	r3, #100	; 0x64
 8009c54:	d901      	bls.n	8009c5a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e2fe      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c5a:	4b77      	ldr	r3, [pc, #476]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1f0      	bne.n	8009c48 <HAL_RCC_OscConfig+0x2d4>
 8009c66:	e000      	b.n	8009c6a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d060      	beq.n	8009d38 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d005      	beq.n	8009c88 <HAL_RCC_OscConfig+0x314>
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2b0c      	cmp	r3, #12
 8009c80:	d119      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d116      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c88:	4b6b      	ldr	r3, [pc, #428]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x32c>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e2db      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ca0:	4b65      	ldr	r3, [pc, #404]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	061b      	lsls	r3, r3, #24
 8009cae:	4962      	ldr	r1, [pc, #392]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cb4:	e040      	b.n	8009d38 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d023      	beq.n	8009d06 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cbe:	4b5e      	ldr	r3, [pc, #376]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a5d      	ldr	r2, [pc, #372]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cca:	f7fb fa57 	bl	800517c <HAL_GetTick>
 8009cce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cd0:	e008      	b.n	8009ce4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cd2:	f7fb fa53 	bl	800517c <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d901      	bls.n	8009ce4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e2b9      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ce4:	4b54      	ldr	r3, [pc, #336]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0f0      	beq.n	8009cd2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cf0:	4b51      	ldr	r3, [pc, #324]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	061b      	lsls	r3, r3, #24
 8009cfe:	494e      	ldr	r1, [pc, #312]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	604b      	str	r3, [r1, #4]
 8009d04:	e018      	b.n	8009d38 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d06:	4b4c      	ldr	r3, [pc, #304]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a4b      	ldr	r2, [pc, #300]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d12:	f7fb fa33 	bl	800517c <HAL_GetTick>
 8009d16:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d18:	e008      	b.n	8009d2c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d1a:	f7fb fa2f 	bl	800517c <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e295      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d2c:	4b42      	ldr	r3, [pc, #264]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f0      	bne.n	8009d1a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0308 	and.w	r3, r3, #8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8082 	beq.w	8009e4a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d05f      	beq.n	8009e0e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009d4e:	4b3a      	ldr	r3, [pc, #232]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d54:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f003 0310 	and.w	r3, r3, #16
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d037      	beq.n	8009dd4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d006      	beq.n	8009d7c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e26d      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d01b      	beq.n	8009dbe <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009d86:	4b2c      	ldr	r3, [pc, #176]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8c:	4a2a      	ldr	r2, [pc, #168]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d96:	f7fb f9f1 	bl	800517c <HAL_GetTick>
 8009d9a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d9c:	e008      	b.n	8009db0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d9e:	f7fb f9ed 	bl	800517c <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b11      	cmp	r3, #17
 8009daa:	d901      	bls.n	8009db0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e253      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009db0:	4b21      	ldr	r3, [pc, #132]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1ef      	bne.n	8009d9e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009dbe:	4b1e      	ldr	r3, [pc, #120]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dc4:	f023 0210 	bic.w	r2, r3, #16
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	491a      	ldr	r1, [pc, #104]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dd4:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dda:	4a17      	ldr	r2, [pc, #92]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009ddc:	f043 0301 	orr.w	r3, r3, #1
 8009de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de4:	f7fb f9ca 	bl	800517c <HAL_GetTick>
 8009de8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009dea:	e008      	b.n	8009dfe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dec:	f7fb f9c6 	bl	800517c <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	2b11      	cmp	r3, #17
 8009df8:	d901      	bls.n	8009dfe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e22c      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009dfe:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0ef      	beq.n	8009dec <HAL_RCC_OscConfig+0x478>
 8009e0c:	e01d      	b.n	8009e4a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e0e:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e14:	4a08      	ldr	r2, [pc, #32]	; (8009e38 <HAL_RCC_OscConfig+0x4c4>)
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e1e:	f7fb f9ad 	bl	800517c <HAL_GetTick>
 8009e22:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e24:	e00a      	b.n	8009e3c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e26:	f7fb f9a9 	bl	800517c <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	2b11      	cmp	r3, #17
 8009e32:	d903      	bls.n	8009e3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e20f      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
 8009e38:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e3c:	4b83      	ldr	r3, [pc, #524]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1ed      	bne.n	8009e26 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 80bd 	beq.w	8009fd2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e5e:	4b7b      	ldr	r3, [pc, #492]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10e      	bne.n	8009e88 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e6a:	4b78      	ldr	r3, [pc, #480]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6e:	4a77      	ldr	r2, [pc, #476]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e74:	6593      	str	r3, [r2, #88]	; 0x58
 8009e76:	4b75      	ldr	r3, [pc, #468]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009e82:	2301      	movs	r3, #1
 8009e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e88:	4b71      	ldr	r3, [pc, #452]	; (800a050 <HAL_RCC_OscConfig+0x6dc>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d118      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e94:	4b6e      	ldr	r3, [pc, #440]	; (800a050 <HAL_RCC_OscConfig+0x6dc>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a6d      	ldr	r2, [pc, #436]	; (800a050 <HAL_RCC_OscConfig+0x6dc>)
 8009e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ea0:	f7fb f96c 	bl	800517c <HAL_GetTick>
 8009ea4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ea6:	e008      	b.n	8009eba <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ea8:	f7fb f968 	bl	800517c <HAL_GetTick>
 8009eac:	4602      	mov	r2, r0
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d901      	bls.n	8009eba <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e1ce      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eba:	4b65      	ldr	r3, [pc, #404]	; (800a050 <HAL_RCC_OscConfig+0x6dc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0f0      	beq.n	8009ea8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02c      	beq.n	8009f2c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8009ed2:	4b5e      	ldr	r3, [pc, #376]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee4:	4959      	ldr	r1, [pc, #356]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d010      	beq.n	8009f1a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009ef8:	4b54      	ldr	r3, [pc, #336]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efe:	4a53      	ldr	r2, [pc, #332]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f00:	f043 0304 	orr.w	r3, r3, #4
 8009f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009f08:	4b50      	ldr	r3, [pc, #320]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0e:	4a4f      	ldr	r2, [pc, #316]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f10:	f043 0301 	orr.w	r3, r3, #1
 8009f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f18:	e018      	b.n	8009f4c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009f1a:	4b4c      	ldr	r3, [pc, #304]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f20:	4a4a      	ldr	r2, [pc, #296]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f2a:	e00f      	b.n	8009f4c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009f2c:	4b47      	ldr	r3, [pc, #284]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f32:	4a46      	ldr	r2, [pc, #280]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f34:	f023 0301 	bic.w	r3, r3, #1
 8009f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009f3c:	4b43      	ldr	r3, [pc, #268]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	4a42      	ldr	r2, [pc, #264]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f44:	f023 0304 	bic.w	r3, r3, #4
 8009f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d016      	beq.n	8009f82 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f54:	f7fb f912 	bl	800517c <HAL_GetTick>
 8009f58:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f5a:	e00a      	b.n	8009f72 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f5c:	f7fb f90e 	bl	800517c <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e172      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f72:	4b36      	ldr	r3, [pc, #216]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0ed      	beq.n	8009f5c <HAL_RCC_OscConfig+0x5e8>
 8009f80:	e01d      	b.n	8009fbe <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f82:	f7fb f8fb 	bl	800517c <HAL_GetTick>
 8009f86:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f88:	e00a      	b.n	8009fa0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f8a:	f7fb f8f7 	bl	800517c <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d901      	bls.n	8009fa0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e15b      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009fa0:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1ed      	bne.n	8009f8a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8009fae:	4b27      	ldr	r3, [pc, #156]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb4:	4a25      	ldr	r2, [pc, #148]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d105      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fc6:	4b21      	ldr	r3, [pc, #132]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fca:	4a20      	ldr	r2, [pc, #128]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0320 	and.w	r3, r3, #32
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d041      	beq.n	800a062 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d01c      	beq.n	800a020 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009fe6:	4b19      	ldr	r3, [pc, #100]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fec:	4a17      	ldr	r2, [pc, #92]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ff6:	f7fb f8c1 	bl	800517c <HAL_GetTick>
 8009ffa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ffc:	e008      	b.n	800a010 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ffe:	f7fb f8bd 	bl	800517c <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e123      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a010:	4b0e      	ldr	r3, [pc, #56]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 800a012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0ef      	beq.n	8009ffe <HAL_RCC_OscConfig+0x68a>
 800a01e:	e020      	b.n	800a062 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 800a022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a026:	4a09      	ldr	r2, [pc, #36]	; (800a04c <HAL_RCC_OscConfig+0x6d8>)
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a030:	f7fb f8a4 	bl	800517c <HAL_GetTick>
 800a034:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a036:	e00d      	b.n	800a054 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a038:	f7fb f8a0 	bl	800517c <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d906      	bls.n	800a054 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e106      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
 800a04a:	bf00      	nop
 800a04c:	40021000 	.word	0x40021000
 800a050:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a054:	4b82      	ldr	r3, [pc, #520]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1ea      	bne.n	800a038 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 80f5 	beq.w	800a256 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	2b02      	cmp	r3, #2
 800a072:	f040 80cb 	bne.w	800a20c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a076:	4b7a      	ldr	r3, [pc, #488]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f003 0203 	and.w	r2, r3, #3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	429a      	cmp	r2, r3
 800a088:	d12c      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a094:	3b01      	subs	r3, #1
 800a096:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a098:	429a      	cmp	r2, r3
 800a09a:	d123      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d11b      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d113      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d109      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0da:	085b      	lsrs	r3, r3, #1
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d06d      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	2b0c      	cmp	r3, #12
 800a0e8:	d068      	beq.n	800a1bc <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a0ea:	4b5d      	ldr	r3, [pc, #372]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d105      	bne.n	800a102 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a0f6:	4b5a      	ldr	r3, [pc, #360]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e0a8      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a106:	4b56      	ldr	r3, [pc, #344]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a55      	ldr	r2, [pc, #340]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a10c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a110:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a112:	f7fb f833 	bl	800517c <HAL_GetTick>
 800a116:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a118:	e008      	b.n	800a12c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a11a:	f7fb f82f 	bl	800517c <HAL_GetTick>
 800a11e:	4602      	mov	r2, r0
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d901      	bls.n	800a12c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e095      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a12c:	4b4c      	ldr	r3, [pc, #304]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1f0      	bne.n	800a11a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a138:	4b49      	ldr	r3, [pc, #292]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	4b49      	ldr	r3, [pc, #292]	; (800a264 <HAL_RCC_OscConfig+0x8f0>)
 800a13e:	4013      	ands	r3, r2
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a148:	3a01      	subs	r2, #1
 800a14a:	0112      	lsls	r2, r2, #4
 800a14c:	4311      	orrs	r1, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a152:	0212      	lsls	r2, r2, #8
 800a154:	4311      	orrs	r1, r2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a15a:	0852      	lsrs	r2, r2, #1
 800a15c:	3a01      	subs	r2, #1
 800a15e:	0552      	lsls	r2, r2, #21
 800a160:	4311      	orrs	r1, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a166:	0852      	lsrs	r2, r2, #1
 800a168:	3a01      	subs	r2, #1
 800a16a:	0652      	lsls	r2, r2, #25
 800a16c:	4311      	orrs	r1, r2
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a172:	06d2      	lsls	r2, r2, #27
 800a174:	430a      	orrs	r2, r1
 800a176:	493a      	ldr	r1, [pc, #232]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a17c:	4b38      	ldr	r3, [pc, #224]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a37      	ldr	r2, [pc, #220]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a188:	4b35      	ldr	r3, [pc, #212]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	4a34      	ldr	r2, [pc, #208]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a18e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a194:	f7fa fff2 	bl	800517c <HAL_GetTick>
 800a198:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a19a:	e008      	b.n	800a1ae <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a19c:	f7fa ffee 	bl	800517c <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e054      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ae:	4b2c      	ldr	r3, [pc, #176]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0f0      	beq.n	800a19c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1ba:	e04c      	b.n	800a256 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e04b      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1c0:	4b27      	ldr	r3, [pc, #156]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d144      	bne.n	800a256 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a1cc:	4b24      	ldr	r3, [pc, #144]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a23      	ldr	r2, [pc, #140]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a1d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a1d8:	4b21      	ldr	r3, [pc, #132]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	4a20      	ldr	r2, [pc, #128]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a1de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1e4:	f7fa ffca 	bl	800517c <HAL_GetTick>
 800a1e8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ea:	e008      	b.n	800a1fe <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ec:	f7fa ffc6 	bl	800517c <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e02c      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1fe:	4b18      	ldr	r3, [pc, #96]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0f0      	beq.n	800a1ec <HAL_RCC_OscConfig+0x878>
 800a20a:	e024      	b.n	800a256 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	2b0c      	cmp	r3, #12
 800a210:	d01f      	beq.n	800a252 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a212:	4b13      	ldr	r3, [pc, #76]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a12      	ldr	r2, [pc, #72]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a21c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21e:	f7fa ffad 	bl	800517c <HAL_GetTick>
 800a222:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a224:	e008      	b.n	800a238 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a226:	f7fa ffa9 	bl	800517c <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b02      	cmp	r3, #2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e00f      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a238:	4b09      	ldr	r3, [pc, #36]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1f0      	bne.n	800a226 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a244:	4b06      	ldr	r3, [pc, #24]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a246:	68da      	ldr	r2, [r3, #12]
 800a248:	4905      	ldr	r1, [pc, #20]	; (800a260 <HAL_RCC_OscConfig+0x8ec>)
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <HAL_RCC_OscConfig+0x8f4>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	60cb      	str	r3, [r1, #12]
 800a250:	e001      	b.n	800a256 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e000      	b.n	800a258 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3728      	adds	r7, #40	; 0x28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	40021000 	.word	0x40021000
 800a264:	019d800c 	.word	0x019d800c
 800a268:	feeefffc 	.word	0xfeeefffc

0800a26c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e11d      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a284:	4b90      	ldr	r3, [pc, #576]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 030f 	and.w	r3, r3, #15
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d910      	bls.n	800a2b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a292:	4b8d      	ldr	r3, [pc, #564]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f023 020f 	bic.w	r2, r3, #15
 800a29a:	498b      	ldr	r1, [pc, #556]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2a2:	4b89      	ldr	r3, [pc, #548]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d001      	beq.n	800a2b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e105      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0302 	and.w	r3, r3, #2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d010      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	4b81      	ldr	r3, [pc, #516]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d908      	bls.n	800a2e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2d0:	4b7e      	ldr	r3, [pc, #504]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	497b      	ldr	r1, [pc, #492]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d079      	beq.n	800a3e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d11e      	bne.n	800a334 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2f6:	4b75      	ldr	r3, [pc, #468]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e0dc      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a306:	f000 fa23 	bl	800a750 <RCC_GetSysClockFreqFromPLLSource>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4a70      	ldr	r2, [pc, #448]	; (800a4d0 <HAL_RCC_ClockConfig+0x264>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d946      	bls.n	800a3a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a312:	4b6e      	ldr	r3, [pc, #440]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d140      	bne.n	800a3a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a31e:	4b6b      	ldr	r3, [pc, #428]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a326:	4a69      	ldr	r2, [pc, #420]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a32e:	2380      	movs	r3, #128	; 0x80
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e035      	b.n	800a3a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d107      	bne.n	800a34c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a33c:	4b63      	ldr	r3, [pc, #396]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d115      	bne.n	800a374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e0b9      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d107      	bne.n	800a364 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a354:	4b5d      	ldr	r3, [pc, #372]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d109      	bne.n	800a374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e0ad      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a364:	4b59      	ldr	r3, [pc, #356]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e0a5      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a374:	f000 f8b4 	bl	800a4e0 <HAL_RCC_GetSysClockFreq>
 800a378:	4603      	mov	r3, r0
 800a37a:	4a55      	ldr	r2, [pc, #340]	; (800a4d0 <HAL_RCC_ClockConfig+0x264>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d90f      	bls.n	800a3a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a380:	4b52      	ldr	r3, [pc, #328]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d109      	bne.n	800a3a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a38c:	4b4f      	ldr	r3, [pc, #316]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a394:	4a4d      	ldr	r2, [pc, #308]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a39c:	2380      	movs	r3, #128	; 0x80
 800a39e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3a0:	4b4a      	ldr	r3, [pc, #296]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f023 0203 	bic.w	r2, r3, #3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	4947      	ldr	r1, [pc, #284]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3b2:	f7fa fee3 	bl	800517c <HAL_GetTick>
 800a3b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b8:	e00a      	b.n	800a3d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3ba:	f7fa fedf 	bl	800517c <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d901      	bls.n	800a3d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e077      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3d0:	4b3e      	ldr	r3, [pc, #248]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f003 020c 	and.w	r2, r3, #12
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d1eb      	bne.n	800a3ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b80      	cmp	r3, #128	; 0x80
 800a3e6:	d105      	bne.n	800a3f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a3e8:	4b38      	ldr	r3, [pc, #224]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	4a37      	ldr	r2, [pc, #220]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a3ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	4b31      	ldr	r3, [pc, #196]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d208      	bcs.n	800a422 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a410:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	492b      	ldr	r1, [pc, #172]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a422:	4b29      	ldr	r3, [pc, #164]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d210      	bcs.n	800a452 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a430:	4b25      	ldr	r3, [pc, #148]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f023 020f 	bic.w	r2, r3, #15
 800a438:	4923      	ldr	r1, [pc, #140]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a440:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <HAL_RCC_ClockConfig+0x25c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 030f 	and.w	r3, r3, #15
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d001      	beq.n	800a452 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e036      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d008      	beq.n	800a470 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a45e:	4b1b      	ldr	r3, [pc, #108]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	4918      	ldr	r1, [pc, #96]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0308 	and.w	r3, r3, #8
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a47c:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	4910      	ldr	r1, [pc, #64]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a490:	f000 f826 	bl	800a4e0 <HAL_RCC_GetSysClockFreq>
 800a494:	4602      	mov	r2, r0
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <HAL_RCC_ClockConfig+0x260>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	091b      	lsrs	r3, r3, #4
 800a49c:	f003 030f 	and.w	r3, r3, #15
 800a4a0:	490c      	ldr	r1, [pc, #48]	; (800a4d4 <HAL_RCC_ClockConfig+0x268>)
 800a4a2:	5ccb      	ldrb	r3, [r1, r3]
 800a4a4:	f003 031f 	and.w	r3, r3, #31
 800a4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ac:	4a0a      	ldr	r2, [pc, #40]	; (800a4d8 <HAL_RCC_ClockConfig+0x26c>)
 800a4ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <HAL_RCC_ClockConfig+0x270>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fa fc73 	bl	8004da0 <HAL_InitTick>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73fb      	strb	r3, [r7, #15]

  return status;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	40022000 	.word	0x40022000
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	04c4b400 	.word	0x04c4b400
 800a4d4:	08016ce0 	.word	0x08016ce0
 800a4d8:	20000224 	.word	0x20000224
 800a4dc:	20000228 	.word	0x20000228

0800a4e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b089      	sub	sp, #36	; 0x24
 800a4e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4ee:	4b3e      	ldr	r3, [pc, #248]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 030c 	and.w	r3, r3, #12
 800a4f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4f8:	4b3b      	ldr	r3, [pc, #236]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f003 0303 	and.w	r3, r3, #3
 800a500:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <HAL_RCC_GetSysClockFreq+0x34>
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	2b0c      	cmp	r3, #12
 800a50c:	d121      	bne.n	800a552 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d11e      	bne.n	800a552 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a514:	4b34      	ldr	r3, [pc, #208]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d107      	bne.n	800a530 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a520:	4b31      	ldr	r3, [pc, #196]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a526:	0a1b      	lsrs	r3, r3, #8
 800a528:	f003 030f 	and.w	r3, r3, #15
 800a52c:	61fb      	str	r3, [r7, #28]
 800a52e:	e005      	b.n	800a53c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a530:	4b2d      	ldr	r3, [pc, #180]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	091b      	lsrs	r3, r3, #4
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a53c:	4a2b      	ldr	r2, [pc, #172]	; (800a5ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a544:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10d      	bne.n	800a568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a550:	e00a      	b.n	800a568 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	2b04      	cmp	r3, #4
 800a556:	d102      	bne.n	800a55e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800a55a:	61bb      	str	r3, [r7, #24]
 800a55c:	e004      	b.n	800a568 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b08      	cmp	r3, #8
 800a562:	d101      	bne.n	800a568 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a564:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800a566:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2b0c      	cmp	r3, #12
 800a56c:	d134      	bne.n	800a5d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a56e:	4b1e      	ldr	r3, [pc, #120]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d003      	beq.n	800a586 <HAL_RCC_GetSysClockFreq+0xa6>
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2b03      	cmp	r3, #3
 800a582:	d003      	beq.n	800a58c <HAL_RCC_GetSysClockFreq+0xac>
 800a584:	e005      	b.n	800a592 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800a588:	617b      	str	r3, [r7, #20]
      break;
 800a58a:	e005      	b.n	800a598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a58c:	4b18      	ldr	r3, [pc, #96]	; (800a5f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800a58e:	617b      	str	r3, [r7, #20]
      break;
 800a590:	e002      	b.n	800a598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	617b      	str	r3, [r7, #20]
      break;
 800a596:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	091b      	lsrs	r3, r3, #4
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a5a6:	4b10      	ldr	r3, [pc, #64]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	0a1b      	lsrs	r3, r3, #8
 800a5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	fb03 f202 	mul.w	r2, r3, r2
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	0e5b      	lsrs	r3, r3, #25
 800a5c4:	f003 0303 	and.w	r3, r3, #3
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a5d8:	69bb      	ldr	r3, [r7, #24]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3724      	adds	r7, #36	; 0x24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	40021000 	.word	0x40021000
 800a5ec:	08016cf8 	.word	0x08016cf8
 800a5f0:	00f42400 	.word	0x00f42400

0800a5f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5f8:	4b03      	ldr	r3, [pc, #12]	; (800a608 <HAL_RCC_GetHCLKFreq+0x14>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	20000224 	.word	0x20000224

0800a60c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a610:	f7ff fff0 	bl	800a5f4 <HAL_RCC_GetHCLKFreq>
 800a614:	4602      	mov	r2, r0
 800a616:	4b06      	ldr	r3, [pc, #24]	; (800a630 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	0adb      	lsrs	r3, r3, #11
 800a61c:	f003 0307 	and.w	r3, r3, #7
 800a620:	4904      	ldr	r1, [pc, #16]	; (800a634 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a622:	5ccb      	ldrb	r3, [r1, r3]
 800a624:	f003 031f 	and.w	r3, r3, #31
 800a628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40021000 	.word	0x40021000
 800a634:	08016cf0 	.word	0x08016cf0

0800a638 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	220f      	movs	r2, #15
 800a646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a648:	4b12      	ldr	r3, [pc, #72]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f003 0203 	and.w	r2, r3, #3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a660:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a66c:	4b09      	ldr	r3, [pc, #36]	; (800a694 <HAL_RCC_GetClockConfig+0x5c>)
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	08db      	lsrs	r3, r3, #3
 800a672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a67a:	4b07      	ldr	r3, [pc, #28]	; (800a698 <HAL_RCC_GetClockConfig+0x60>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 020f 	and.w	r2, r3, #15
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	601a      	str	r2, [r3, #0]
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	40021000 	.word	0x40021000
 800a698:	40022000 	.word	0x40022000

0800a69c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a6a8:	4b27      	ldr	r3, [pc, #156]	; (800a748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a6b4:	f7ff f834 	bl	8009720 <HAL_PWREx_GetVoltageRange>
 800a6b8:	6178      	str	r0, [r7, #20]
 800a6ba:	e014      	b.n	800a6e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6bc:	4b22      	ldr	r3, [pc, #136]	; (800a748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c0:	4a21      	ldr	r2, [pc, #132]	; (800a748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a6c8:	4b1f      	ldr	r3, [pc, #124]	; (800a748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a6d4:	f7ff f824 	bl	8009720 <HAL_PWREx_GetVoltageRange>
 800a6d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a6da:	4b1b      	ldr	r3, [pc, #108]	; (800a748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6de:	4a1a      	ldr	r2, [pc, #104]	; (800a748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ec:	d10b      	bne.n	800a706 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b80      	cmp	r3, #128	; 0x80
 800a6f2:	d913      	bls.n	800a71c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2ba0      	cmp	r3, #160	; 0xa0
 800a6f8:	d902      	bls.n	800a700 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	613b      	str	r3, [r7, #16]
 800a6fe:	e00d      	b.n	800a71c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a700:	2301      	movs	r3, #1
 800a702:	613b      	str	r3, [r7, #16]
 800a704:	e00a      	b.n	800a71c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b7f      	cmp	r3, #127	; 0x7f
 800a70a:	d902      	bls.n	800a712 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a70c:	2302      	movs	r3, #2
 800a70e:	613b      	str	r3, [r7, #16]
 800a710:	e004      	b.n	800a71c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b70      	cmp	r3, #112	; 0x70
 800a716:	d101      	bne.n	800a71c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a718:	2301      	movs	r3, #1
 800a71a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a71c:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f023 020f 	bic.w	r2, r3, #15
 800a724:	4909      	ldr	r1, [pc, #36]	; (800a74c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	4313      	orrs	r3, r2
 800a72a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 030f 	and.w	r3, r3, #15
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	429a      	cmp	r2, r3
 800a738:	d001      	beq.n	800a73e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	40021000 	.word	0x40021000
 800a74c:	40022000 	.word	0x40022000

0800a750 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a756:	4b2d      	ldr	r3, [pc, #180]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b03      	cmp	r3, #3
 800a764:	d00b      	beq.n	800a77e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d825      	bhi.n	800a7b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d008      	beq.n	800a784 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2b02      	cmp	r3, #2
 800a776:	d11f      	bne.n	800a7b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a778:	4b25      	ldr	r3, [pc, #148]	; (800a810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a77a:	613b      	str	r3, [r7, #16]
    break;
 800a77c:	e01f      	b.n	800a7be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a77e:	4b24      	ldr	r3, [pc, #144]	; (800a810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a780:	613b      	str	r3, [r7, #16]
    break;
 800a782:	e01c      	b.n	800a7be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a784:	4b21      	ldr	r3, [pc, #132]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0308 	and.w	r3, r3, #8
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d107      	bne.n	800a7a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a790:	4b1e      	ldr	r3, [pc, #120]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a796:	0a1b      	lsrs	r3, r3, #8
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e005      	b.n	800a7ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a7a0:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	091b      	lsrs	r3, r3, #4
 800a7a6:	f003 030f 	and.w	r3, r3, #15
 800a7aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a7ac:	4a19      	ldr	r2, [pc, #100]	; (800a814 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b4:	613b      	str	r3, [r7, #16]
    break;
 800a7b6:	e002      	b.n	800a7be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	613b      	str	r3, [r7, #16]
    break;
 800a7bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	091b      	lsrs	r3, r3, #4
 800a7c4:	f003 030f 	and.w	r3, r3, #15
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a7cc:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	0a1b      	lsrs	r3, r3, #8
 800a7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	fb03 f202 	mul.w	r2, r3, r2
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a7e4:	4b09      	ldr	r3, [pc, #36]	; (800a80c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	0e5b      	lsrs	r3, r3, #25
 800a7ea:	f003 0303 	and.w	r3, r3, #3
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a7fe:	683b      	ldr	r3, [r7, #0]
}
 800a800:	4618      	mov	r0, r3
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	40021000 	.word	0x40021000
 800a810:	00f42400 	.word	0x00f42400
 800a814:	08016cf8 	.word	0x08016cf8

0800a818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a820:	2300      	movs	r3, #0
 800a822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a824:	2300      	movs	r3, #0
 800a826:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a830:	2b00      	cmp	r3, #0
 800a832:	d040      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a838:	2b80      	cmp	r3, #128	; 0x80
 800a83a:	d02a      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a83c:	2b80      	cmp	r3, #128	; 0x80
 800a83e:	d825      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a840:	2b60      	cmp	r3, #96	; 0x60
 800a842:	d026      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a844:	2b60      	cmp	r3, #96	; 0x60
 800a846:	d821      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a848:	2b40      	cmp	r3, #64	; 0x40
 800a84a:	d006      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a84c:	2b40      	cmp	r3, #64	; 0x40
 800a84e:	d81d      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a850:	2b00      	cmp	r3, #0
 800a852:	d009      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a854:	2b20      	cmp	r3, #32
 800a856:	d010      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a858:	e018      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a85a:	4b89      	ldr	r3, [pc, #548]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	4a88      	ldr	r2, [pc, #544]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a864:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a866:	e015      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3304      	adds	r3, #4
 800a86c:	2100      	movs	r1, #0
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fb3e 	bl	800aef0 <RCCEx_PLLSAI1_Config>
 800a874:	4603      	mov	r3, r0
 800a876:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a878:	e00c      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3320      	adds	r3, #32
 800a87e:	2100      	movs	r1, #0
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fc29 	bl	800b0d8 <RCCEx_PLLSAI2_Config>
 800a886:	4603      	mov	r3, r0
 800a888:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a88a:	e003      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	74fb      	strb	r3, [r7, #19]
      break;
 800a890:	e000      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a892:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a894:	7cfb      	ldrb	r3, [r7, #19]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a89a:	4b79      	ldr	r3, [pc, #484]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a89c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8a0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8a8:	4975      	ldr	r1, [pc, #468]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a8b0:	e001      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b2:	7cfb      	ldrb	r3, [r7, #19]
 800a8b4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d047      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ca:	d030      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d0:	d82a      	bhi.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a8d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8d6:	d02a      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8dc:	d824      	bhi.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a8de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e2:	d008      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e8:	d81e      	bhi.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f2:	d010      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a8f4:	e018      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a8f6:	4b62      	ldr	r3, [pc, #392]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	4a61      	ldr	r2, [pc, #388]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a900:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a902:	e015      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3304      	adds	r3, #4
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 faf0 	bl	800aef0 <RCCEx_PLLSAI1_Config>
 800a910:	4603      	mov	r3, r0
 800a912:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a914:	e00c      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3320      	adds	r3, #32
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fbdb 	bl	800b0d8 <RCCEx_PLLSAI2_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a926:	e003      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	74fb      	strb	r3, [r7, #19]
      break;
 800a92c:	e000      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a92e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a930:	7cfb      	ldrb	r3, [r7, #19]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10b      	bne.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a936:	4b52      	ldr	r3, [pc, #328]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a93c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a944:	494e      	ldr	r1, [pc, #312]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a946:	4313      	orrs	r3, r2
 800a948:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a94c:	e001      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94e:	7cfb      	ldrb	r3, [r7, #19]
 800a950:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 809f 	beq.w	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a960:	2300      	movs	r3, #0
 800a962:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a964:	4b46      	ldr	r3, [pc, #280]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a974:	2300      	movs	r3, #0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00d      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a97a:	4b41      	ldr	r3, [pc, #260]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97e:	4a40      	ldr	r2, [pc, #256]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a984:	6593      	str	r3, [r2, #88]	; 0x58
 800a986:	4b3e      	ldr	r3, [pc, #248]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a98e:	60bb      	str	r3, [r7, #8]
 800a990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a992:	2301      	movs	r3, #1
 800a994:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a996:	4b3b      	ldr	r3, [pc, #236]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a3a      	ldr	r2, [pc, #232]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a99c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9a2:	f7fa fbeb 	bl	800517c <HAL_GetTick>
 800a9a6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a9a8:	e009      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9aa:	f7fa fbe7 	bl	800517c <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d902      	bls.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	74fb      	strb	r3, [r7, #19]
        break;
 800a9bc:	e005      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a9be:	4b31      	ldr	r3, [pc, #196]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0ef      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a9ca:	7cfb      	ldrb	r3, [r7, #19]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d15b      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a9d0:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9da:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01f      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d019      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9ee:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9fa:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa00:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa0a:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa10:	4a1b      	ldr	r2, [pc, #108]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa1a:	4a19      	ldr	r2, [pc, #100]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d016      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa2c:	f7fa fba6 	bl	800517c <HAL_GetTick>
 800aa30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa32:	e00b      	b.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa34:	f7fa fba2 	bl	800517c <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d902      	bls.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	74fb      	strb	r3, [r7, #19]
            break;
 800aa4a:	e006      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa4c:	4b0c      	ldr	r3, [pc, #48]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0ec      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800aa5a:	7cfb      	ldrb	r3, [r7, #19]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10c      	bne.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa70:	4903      	ldr	r1, [pc, #12]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa78:	e008      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa7a:	7cfb      	ldrb	r3, [r7, #19]
 800aa7c:	74bb      	strb	r3, [r7, #18]
 800aa7e:	e005      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800aa80:	40021000 	.word	0x40021000
 800aa84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa88:	7cfb      	ldrb	r3, [r7, #19]
 800aa8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa8c:	7c7b      	ldrb	r3, [r7, #17]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d105      	bne.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa92:	4ba0      	ldr	r3, [pc, #640]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa96:	4a9f      	ldr	r2, [pc, #636]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aaaa:	4b9a      	ldr	r3, [pc, #616]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab0:	f023 0203 	bic.w	r2, r3, #3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab8:	4996      	ldr	r1, [pc, #600]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00a      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aacc:	4b91      	ldr	r3, [pc, #580]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad2:	f023 020c 	bic.w	r2, r3, #12
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	498e      	ldr	r1, [pc, #568]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0304 	and.w	r3, r3, #4
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aaee:	4b89      	ldr	r3, [pc, #548]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafc:	4985      	ldr	r1, [pc, #532]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00a      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab10:	4b80      	ldr	r3, [pc, #512]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab1e:	497d      	ldr	r1, [pc, #500]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0310 	and.w	r3, r3, #16
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab32:	4b78      	ldr	r3, [pc, #480]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab40:	4974      	ldr	r1, [pc, #464]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab54:	4b6f      	ldr	r3, [pc, #444]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab62:	496c      	ldr	r1, [pc, #432]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab76:	4b67      	ldr	r3, [pc, #412]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab84:	4963      	ldr	r1, [pc, #396]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00a      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab98:	4b5e      	ldr	r3, [pc, #376]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aba6:	495b      	ldr	r1, [pc, #364]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aba8:	4313      	orrs	r3, r2
 800abaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800abba:	4b56      	ldr	r3, [pc, #344]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc8:	4952      	ldr	r1, [pc, #328]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abca:	4313      	orrs	r3, r2
 800abcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00a      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800abdc:	4b4d      	ldr	r3, [pc, #308]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abea:	494a      	ldr	r1, [pc, #296]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abec:	4313      	orrs	r3, r2
 800abee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abfe:	4b45      	ldr	r3, [pc, #276]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac0c:	4941      	ldr	r1, [pc, #260]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac20:	4b3c      	ldr	r3, [pc, #240]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac26:	f023 0203 	bic.w	r2, r3, #3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac2e:	4939      	ldr	r1, [pc, #228]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d028      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac42:	4b34      	ldr	r3, [pc, #208]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac50:	4930      	ldr	r1, [pc, #192]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac60:	d106      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac62:	4b2c      	ldr	r3, [pc, #176]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	4a2b      	ldr	r2, [pc, #172]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac6c:	60d3      	str	r3, [r2, #12]
 800ac6e:	e011      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac78:	d10c      	bne.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	2101      	movs	r1, #1
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 f935 	bl	800aef0 <RCCEx_PLLSAI1_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ac8a:	7cfb      	ldrb	r3, [r7, #19]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800ac90:	7cfb      	ldrb	r3, [r7, #19]
 800ac92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d04d      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aca8:	d108      	bne.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800acaa:	4b1a      	ldr	r3, [pc, #104]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800acb0:	4a18      	ldr	r2, [pc, #96]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800acba:	e012      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800acbc:	4b15      	ldr	r3, [pc, #84]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800acc2:	4a14      	ldr	r2, [pc, #80]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800accc:	4b11      	ldr	r3, [pc, #68]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acda:	490e      	ldr	r1, [pc, #56]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ace6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acea:	d106      	bne.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acec:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	4a08      	ldr	r2, [pc, #32]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acf6:	60d3      	str	r3, [r2, #12]
 800acf8:	e020      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad02:	d109      	bne.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad04:	4b03      	ldr	r3, [pc, #12]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	4a02      	ldr	r2, [pc, #8]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad0e:	60d3      	str	r3, [r2, #12]
 800ad10:	e014      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ad12:	bf00      	nop
 800ad14:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad20:	d10c      	bne.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	2101      	movs	r1, #1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 f8e1 	bl	800aef0 <RCCEx_PLLSAI1_Config>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad32:	7cfb      	ldrb	r3, [r7, #19]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800ad38:	7cfb      	ldrb	r3, [r7, #19]
 800ad3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d028      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad48:	4b68      	ldr	r3, [pc, #416]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad56:	4965      	ldr	r1, [pc, #404]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad66:	d106      	bne.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad68:	4b60      	ldr	r3, [pc, #384]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	4a5f      	ldr	r2, [pc, #380]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad72:	60d3      	str	r3, [r2, #12]
 800ad74:	e011      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad7e:	d10c      	bne.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3304      	adds	r3, #4
 800ad84:	2101      	movs	r1, #1
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f8b2 	bl	800aef0 <RCCEx_PLLSAI1_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad90:	7cfb      	ldrb	r3, [r7, #19]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800ad96:	7cfb      	ldrb	r3, [r7, #19]
 800ad98:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d01e      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ada6:	4b51      	ldr	r3, [pc, #324]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ada8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adb6:	494d      	ldr	r1, [pc, #308]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc8:	d10c      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3304      	adds	r3, #4
 800adce:	2102      	movs	r1, #2
 800add0:	4618      	mov	r0, r3
 800add2:	f000 f88d 	bl	800aef0 <RCCEx_PLLSAI1_Config>
 800add6:	4603      	mov	r3, r0
 800add8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800adda:	7cfb      	ldrb	r3, [r7, #19]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800ade0:	7cfb      	ldrb	r3, [r7, #19]
 800ade2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800adf0:	4b3e      	ldr	r3, [pc, #248]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adf6:	f023 0204 	bic.w	r2, r3, #4
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae00:	493a      	ldr	r1, [pc, #232]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ae14:	4b35      	ldr	r3, [pc, #212]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae1a:	f023 0218 	bic.w	r2, r3, #24
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae24:	4931      	ldr	r1, [pc, #196]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d035      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ae38:	4b2c      	ldr	r3, [pc, #176]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a2b      	ldr	r2, [pc, #172]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae44:	f7fa f99a 	bl	800517c <HAL_GetTick>
 800ae48:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ae4a:	e009      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ae4c:	f7fa f996 	bl	800517c <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d902      	bls.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	74fb      	strb	r3, [r7, #19]
        break;
 800ae5e:	e005      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ae60:	4b22      	ldr	r3, [pc, #136]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1ef      	bne.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800ae6c:	7cfb      	ldrb	r3, [r7, #19]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d113      	bne.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800ae72:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae82:	491a      	ldr	r1, [pc, #104]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3320      	adds	r3, #32
 800ae8e:	2102      	movs	r1, #2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f921 	bl	800b0d8 <RCCEx_PLLSAI2_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800ae9a:	7cfb      	ldrb	r3, [r7, #19]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800aea0:	7cfb      	ldrb	r3, [r7, #19]
 800aea2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d017      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aeb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec0:	490a      	ldr	r1, [pc, #40]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aed2:	d105      	bne.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	4a04      	ldr	r2, [pc, #16]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800aee0:	7cbb      	ldrb	r3, [r7, #18]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	40021000 	.word	0x40021000

0800aef0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aefe:	4b72      	ldr	r3, [pc, #456]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f003 0303 	and.w	r3, r3, #3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800af0a:	4b6f      	ldr	r3, [pc, #444]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f003 0203 	and.w	r2, r3, #3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d103      	bne.n	800af22 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
       ||
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d142      	bne.n	800afa8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	73fb      	strb	r3, [r7, #15]
 800af26:	e03f      	b.n	800afa8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d018      	beq.n	800af62 <RCCEx_PLLSAI1_Config+0x72>
 800af30:	2b03      	cmp	r3, #3
 800af32:	d825      	bhi.n	800af80 <RCCEx_PLLSAI1_Config+0x90>
 800af34:	2b01      	cmp	r3, #1
 800af36:	d002      	beq.n	800af3e <RCCEx_PLLSAI1_Config+0x4e>
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d009      	beq.n	800af50 <RCCEx_PLLSAI1_Config+0x60>
 800af3c:	e020      	b.n	800af80 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800af3e:	4b62      	ldr	r3, [pc, #392]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d11d      	bne.n	800af86 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af4e:	e01a      	b.n	800af86 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800af50:	4b5d      	ldr	r3, [pc, #372]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d116      	bne.n	800af8a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af60:	e013      	b.n	800af8a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af62:	4b59      	ldr	r3, [pc, #356]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10f      	bne.n	800af8e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800af6e:	4b56      	ldr	r3, [pc, #344]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d109      	bne.n	800af8e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af7e:	e006      	b.n	800af8e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
      break;
 800af84:	e004      	b.n	800af90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af86:	bf00      	nop
 800af88:	e002      	b.n	800af90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af8a:	bf00      	nop
 800af8c:	e000      	b.n	800af90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800af8e:	bf00      	nop
    }

    if(status == HAL_OK)
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d108      	bne.n	800afa8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800af96:	4b4c      	ldr	r3, [pc, #304]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f023 0203 	bic.w	r2, r3, #3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4949      	ldr	r1, [pc, #292]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f040 8086 	bne.w	800b0bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800afb0:	4b45      	ldr	r3, [pc, #276]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a44      	ldr	r2, [pc, #272]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800afb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afbc:	f7fa f8de 	bl	800517c <HAL_GetTick>
 800afc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800afc2:	e009      	b.n	800afd8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800afc4:	f7fa f8da 	bl	800517c <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d902      	bls.n	800afd8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	73fb      	strb	r3, [r7, #15]
        break;
 800afd6:	e005      	b.n	800afe4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800afd8:	4b3b      	ldr	r3, [pc, #236]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1ef      	bne.n	800afc4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d168      	bne.n	800b0bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d113      	bne.n	800b018 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aff0:	4b35      	ldr	r3, [pc, #212]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aff2:	691a      	ldr	r2, [r3, #16]
 800aff4:	4b35      	ldr	r3, [pc, #212]	; (800b0cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800aff6:	4013      	ands	r3, r2
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	6892      	ldr	r2, [r2, #8]
 800affc:	0211      	lsls	r1, r2, #8
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	68d2      	ldr	r2, [r2, #12]
 800b002:	06d2      	lsls	r2, r2, #27
 800b004:	4311      	orrs	r1, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6852      	ldr	r2, [r2, #4]
 800b00a:	3a01      	subs	r2, #1
 800b00c:	0112      	lsls	r2, r2, #4
 800b00e:	430a      	orrs	r2, r1
 800b010:	492d      	ldr	r1, [pc, #180]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b012:	4313      	orrs	r3, r2
 800b014:	610b      	str	r3, [r1, #16]
 800b016:	e02d      	b.n	800b074 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d115      	bne.n	800b04a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b01e:	4b2a      	ldr	r3, [pc, #168]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	4b2b      	ldr	r3, [pc, #172]	; (800b0d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b024:	4013      	ands	r3, r2
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	6892      	ldr	r2, [r2, #8]
 800b02a:	0211      	lsls	r1, r2, #8
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6912      	ldr	r2, [r2, #16]
 800b030:	0852      	lsrs	r2, r2, #1
 800b032:	3a01      	subs	r2, #1
 800b034:	0552      	lsls	r2, r2, #21
 800b036:	4311      	orrs	r1, r2
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	6852      	ldr	r2, [r2, #4]
 800b03c:	3a01      	subs	r2, #1
 800b03e:	0112      	lsls	r2, r2, #4
 800b040:	430a      	orrs	r2, r1
 800b042:	4921      	ldr	r1, [pc, #132]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b044:	4313      	orrs	r3, r2
 800b046:	610b      	str	r3, [r1, #16]
 800b048:	e014      	b.n	800b074 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b04a:	4b1f      	ldr	r3, [pc, #124]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	4b21      	ldr	r3, [pc, #132]	; (800b0d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b050:	4013      	ands	r3, r2
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	6892      	ldr	r2, [r2, #8]
 800b056:	0211      	lsls	r1, r2, #8
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6952      	ldr	r2, [r2, #20]
 800b05c:	0852      	lsrs	r2, r2, #1
 800b05e:	3a01      	subs	r2, #1
 800b060:	0652      	lsls	r2, r2, #25
 800b062:	4311      	orrs	r1, r2
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	6852      	ldr	r2, [r2, #4]
 800b068:	3a01      	subs	r2, #1
 800b06a:	0112      	lsls	r2, r2, #4
 800b06c:	430a      	orrs	r2, r1
 800b06e:	4916      	ldr	r1, [pc, #88]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b070:	4313      	orrs	r3, r2
 800b072:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b074:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a13      	ldr	r2, [pc, #76]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b07a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b07e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b080:	f7fa f87c 	bl	800517c <HAL_GetTick>
 800b084:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b086:	e009      	b.n	800b09c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b088:	f7fa f878 	bl	800517c <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d902      	bls.n	800b09c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	73fb      	strb	r3, [r7, #15]
          break;
 800b09a:	e005      	b.n	800b0a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b09c:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0ef      	beq.n	800b088 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b0ae:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	4904      	ldr	r1, [pc, #16]	; (800b0c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	40021000 	.word	0x40021000
 800b0cc:	07ff800f 	.word	0x07ff800f
 800b0d0:	ff9f800f 	.word	0xff9f800f
 800b0d4:	f9ff800f 	.word	0xf9ff800f

0800b0d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b0e6:	4b72      	ldr	r3, [pc, #456]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00e      	beq.n	800b110 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b0f2:	4b6f      	ldr	r3, [pc, #444]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	f003 0203 	and.w	r2, r3, #3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d103      	bne.n	800b10a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
       ||
 800b106:	2b00      	cmp	r3, #0
 800b108:	d142      	bne.n	800b190 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	73fb      	strb	r3, [r7, #15]
 800b10e:	e03f      	b.n	800b190 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b03      	cmp	r3, #3
 800b116:	d018      	beq.n	800b14a <RCCEx_PLLSAI2_Config+0x72>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d825      	bhi.n	800b168 <RCCEx_PLLSAI2_Config+0x90>
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d002      	beq.n	800b126 <RCCEx_PLLSAI2_Config+0x4e>
 800b120:	2b02      	cmp	r3, #2
 800b122:	d009      	beq.n	800b138 <RCCEx_PLLSAI2_Config+0x60>
 800b124:	e020      	b.n	800b168 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b126:	4b62      	ldr	r3, [pc, #392]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d11d      	bne.n	800b16e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b136:	e01a      	b.n	800b16e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b138:	4b5d      	ldr	r3, [pc, #372]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b140:	2b00      	cmp	r3, #0
 800b142:	d116      	bne.n	800b172 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b148:	e013      	b.n	800b172 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b14a:	4b59      	ldr	r3, [pc, #356]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10f      	bne.n	800b176 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b156:	4b56      	ldr	r3, [pc, #344]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d109      	bne.n	800b176 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b166:	e006      	b.n	800b176 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	73fb      	strb	r3, [r7, #15]
      break;
 800b16c:	e004      	b.n	800b178 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b16e:	bf00      	nop
 800b170:	e002      	b.n	800b178 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b172:	bf00      	nop
 800b174:	e000      	b.n	800b178 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b176:	bf00      	nop
    }

    if(status == HAL_OK)
 800b178:	7bfb      	ldrb	r3, [r7, #15]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d108      	bne.n	800b190 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b17e:	4b4c      	ldr	r3, [pc, #304]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f023 0203 	bic.w	r2, r3, #3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4949      	ldr	r1, [pc, #292]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b18c:	4313      	orrs	r3, r2
 800b18e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f040 8086 	bne.w	800b2a4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b198:	4b45      	ldr	r3, [pc, #276]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a44      	ldr	r2, [pc, #272]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b19e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a4:	f7f9 ffea 	bl	800517c <HAL_GetTick>
 800b1a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b1aa:	e009      	b.n	800b1c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b1ac:	f7f9 ffe6 	bl	800517c <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d902      	bls.n	800b1c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	73fb      	strb	r3, [r7, #15]
        break;
 800b1be:	e005      	b.n	800b1cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b1c0:	4b3b      	ldr	r3, [pc, #236]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1ef      	bne.n	800b1ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d168      	bne.n	800b2a4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d113      	bne.n	800b200 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b1d8:	4b35      	ldr	r3, [pc, #212]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1da:	695a      	ldr	r2, [r3, #20]
 800b1dc:	4b35      	ldr	r3, [pc, #212]	; (800b2b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b1de:	4013      	ands	r3, r2
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	6892      	ldr	r2, [r2, #8]
 800b1e4:	0211      	lsls	r1, r2, #8
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	68d2      	ldr	r2, [r2, #12]
 800b1ea:	06d2      	lsls	r2, r2, #27
 800b1ec:	4311      	orrs	r1, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6852      	ldr	r2, [r2, #4]
 800b1f2:	3a01      	subs	r2, #1
 800b1f4:	0112      	lsls	r2, r2, #4
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	492d      	ldr	r1, [pc, #180]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	614b      	str	r3, [r1, #20]
 800b1fe:	e02d      	b.n	800b25c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d115      	bne.n	800b232 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b206:	4b2a      	ldr	r3, [pc, #168]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b208:	695a      	ldr	r2, [r3, #20]
 800b20a:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b20c:	4013      	ands	r3, r2
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	6892      	ldr	r2, [r2, #8]
 800b212:	0211      	lsls	r1, r2, #8
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	6912      	ldr	r2, [r2, #16]
 800b218:	0852      	lsrs	r2, r2, #1
 800b21a:	3a01      	subs	r2, #1
 800b21c:	0552      	lsls	r2, r2, #21
 800b21e:	4311      	orrs	r1, r2
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6852      	ldr	r2, [r2, #4]
 800b224:	3a01      	subs	r2, #1
 800b226:	0112      	lsls	r2, r2, #4
 800b228:	430a      	orrs	r2, r1
 800b22a:	4921      	ldr	r1, [pc, #132]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b22c:	4313      	orrs	r3, r2
 800b22e:	614b      	str	r3, [r1, #20]
 800b230:	e014      	b.n	800b25c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b234:	695a      	ldr	r2, [r3, #20]
 800b236:	4b21      	ldr	r3, [pc, #132]	; (800b2bc <RCCEx_PLLSAI2_Config+0x1e4>)
 800b238:	4013      	ands	r3, r2
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6892      	ldr	r2, [r2, #8]
 800b23e:	0211      	lsls	r1, r2, #8
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6952      	ldr	r2, [r2, #20]
 800b244:	0852      	lsrs	r2, r2, #1
 800b246:	3a01      	subs	r2, #1
 800b248:	0652      	lsls	r2, r2, #25
 800b24a:	4311      	orrs	r1, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6852      	ldr	r2, [r2, #4]
 800b250:	3a01      	subs	r2, #1
 800b252:	0112      	lsls	r2, r2, #4
 800b254:	430a      	orrs	r2, r1
 800b256:	4916      	ldr	r1, [pc, #88]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b25c:	4b14      	ldr	r3, [pc, #80]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a13      	ldr	r2, [pc, #76]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b266:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b268:	f7f9 ff88 	bl	800517c <HAL_GetTick>
 800b26c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b26e:	e009      	b.n	800b284 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b270:	f7f9 ff84 	bl	800517c <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d902      	bls.n	800b284 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	73fb      	strb	r3, [r7, #15]
          break;
 800b282:	e005      	b.n	800b290 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b284:	4b0a      	ldr	r3, [pc, #40]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0ef      	beq.n	800b270 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d106      	bne.n	800b2a4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b296:	4b06      	ldr	r3, [pc, #24]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b298:	695a      	ldr	r2, [r3, #20]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	4904      	ldr	r1, [pc, #16]	; (800b2b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	40021000 	.word	0x40021000
 800b2b4:	07ff800f 	.word	0x07ff800f
 800b2b8:	ff9f800f 	.word	0xff9f800f
 800b2bc:	f9ff800f 	.word	0xf9ff800f

0800b2c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d07f      	beq.n	800b3d2 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7f9 fc72 	bl	8004bd0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b2f2:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	22ca      	movs	r2, #202	; 0xca
 800b302:	625a      	str	r2, [r3, #36]	; 0x24
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2253      	movs	r2, #83	; 0x53
 800b30a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa65 	bl	800b7dc <RTC_EnterInitMode>
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d15a      	bne.n	800b3d2 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	6812      	ldr	r2, [r2, #0]
 800b326:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b32a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b32e:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6999      	ldr	r1, [r3, #24]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	431a      	orrs	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	431a      	orrs	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	6912      	ldr	r2, [r2, #16]
 800b356:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6919      	ldr	r1, [r3, #16]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	041a      	lsls	r2, r3, #16
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	430a      	orrs	r2, r1
 800b36a:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b36c:	4b1b      	ldr	r3, [pc, #108]	; (800b3dc <HAL_RTC_Init+0x11c>)
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	430b      	orrs	r3, r1
 800b37e:	4917      	ldr	r1, [pc, #92]	; (800b3dc <HAL_RTC_Init+0x11c>)
 800b380:	4313      	orrs	r3, r2
 800b382:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fa5f 	bl	800b848 <RTC_ExitInitMode>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d11e      	bne.n	800b3d2 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	699a      	ldr	r2, [r3, #24]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b3a2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6999      	ldr	r1, [r3, #24]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	22ff      	movs	r2, #255	; 0xff
 800b3c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40002800 	.word	0x40002800

0800b3e0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3e0:	b590      	push	{r4, r7, lr}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d101      	bne.n	800b3fa <HAL_RTC_SetTime+0x1a>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e08b      	b.n	800b512 <HAL_RTC_SetTime+0x132>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2202      	movs	r2, #2
 800b406:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	22ca      	movs	r2, #202	; 0xca
 800b410:	625a      	str	r2, [r3, #36]	; 0x24
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2253      	movs	r2, #83	; 0x53
 800b418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 f9de 	bl	800b7dc <RTC_EnterInitMode>
 800b420:	4603      	mov	r3, r0
 800b422:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b424:	7cfb      	ldrb	r3, [r7, #19]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d15e      	bne.n	800b4e8 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b42a:	4b3c      	ldr	r3, [pc, #240]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b436:	d057      	beq.n	800b4e8 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d125      	bne.n	800b48a <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b43e:	4b37      	ldr	r3, [pc, #220]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2200      	movs	r2, #0
 800b44e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	4618      	mov	r0, r3
 800b456:	f000 fa35 	bl	800b8c4 <RTC_ByteToBcd2>
 800b45a:	4603      	mov	r3, r0
 800b45c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	785b      	ldrb	r3, [r3, #1]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fa2e 	bl	800b8c4 <RTC_ByteToBcd2>
 800b468:	4603      	mov	r3, r0
 800b46a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b46c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	789b      	ldrb	r3, [r3, #2]
 800b472:	4618      	mov	r0, r3
 800b474:	f000 fa26 	bl	800b8c4 <RTC_ByteToBcd2>
 800b478:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b47a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	78db      	ldrb	r3, [r3, #3]
 800b482:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b484:	4313      	orrs	r3, r2
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	e017      	b.n	800b4ba <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b48a:	4b24      	ldr	r3, [pc, #144]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	785b      	ldrb	r3, [r3, #1]
 800b4a6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4a8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4ae:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	78db      	ldrb	r3, [r3, #3]
 800b4b4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b4ba:	4a18      	ldr	r2, [pc, #96]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b4c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b4c6:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b4c8:	4b14      	ldr	r3, [pc, #80]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	4a13      	ldr	r2, [pc, #76]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b4ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4d2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b4d4:	4b11      	ldr	r3, [pc, #68]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b4d6:	699a      	ldr	r2, [r3, #24]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	68d9      	ldr	r1, [r3, #12]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	490e      	ldr	r1, [pc, #56]	; (800b51c <HAL_RTC_SetTime+0x13c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f9ad 	bl	800b848 <RTC_ExitInitMode>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	22ff      	movs	r2, #255	; 0xff
 800b4f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b4fa:	7cfb      	ldrb	r3, [r7, #19]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d103      	bne.n	800b508 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b510:	7cfb      	ldrb	r3, [r7, #19]
}
 800b512:	4618      	mov	r0, r3
 800b514:	371c      	adds	r7, #28
 800b516:	46bd      	mov	sp, r7
 800b518:	bd90      	pop	{r4, r7, pc}
 800b51a:	bf00      	nop
 800b51c:	40002800 	.word	0x40002800

0800b520 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b52c:	4b2c      	ldr	r3, [pc, #176]	; (800b5e0 <HAL_RTC_GetTime+0xc0>)
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b534:	4b2a      	ldr	r3, [pc, #168]	; (800b5e0 <HAL_RTC_GetTime+0xc0>)
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b53c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b540:	d049      	beq.n	800b5d6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b542:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <HAL_RTC_GetTime+0xc0>)
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b54e:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <HAL_RTC_GetTime+0xc0>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b556:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b55a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	0c1b      	lsrs	r3, r3, #16
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b566:	b2da      	uxtb	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	0a1b      	lsrs	r3, r3, #8
 800b570:	b2db      	uxtb	r3, r3
 800b572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b576:	b2da      	uxtb	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b584:	b2da      	uxtb	r2, r3
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	0d9b      	lsrs	r3, r3, #22
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	b2da      	uxtb	r2, r3
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d11a      	bne.n	800b5d6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f9ad 	bl	800b904 <RTC_Bcd2ToByte>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 f9a4 	bl	800b904 <RTC_Bcd2ToByte>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	461a      	mov	r2, r3
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	789b      	ldrb	r3, [r3, #2]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f99b 	bl	800b904 <RTC_Bcd2ToByte>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	40002800 	.word	0x40002800

0800b5e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b5e4:	b590      	push	{r4, r7, lr}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <HAL_RTC_SetDate+0x1a>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e074      	b.n	800b6e8 <HAL_RTC_SetDate+0x104>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2202      	movs	r2, #2
 800b60a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10e      	bne.n	800b632 <HAL_RTC_SetDate+0x4e>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	785b      	ldrb	r3, [r3, #1]
 800b618:	f003 0310 	and.w	r3, r3, #16
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d008      	beq.n	800b632 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	785b      	ldrb	r3, [r3, #1]
 800b624:	f023 0310 	bic.w	r3, r3, #16
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	330a      	adds	r3, #10
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d11c      	bne.n	800b672 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	78db      	ldrb	r3, [r3, #3]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f941 	bl	800b8c4 <RTC_ByteToBcd2>
 800b642:	4603      	mov	r3, r0
 800b644:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 f93a 	bl	800b8c4 <RTC_ByteToBcd2>
 800b650:	4603      	mov	r3, r0
 800b652:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b654:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	789b      	ldrb	r3, [r3, #2]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f932 	bl	800b8c4 <RTC_ByteToBcd2>
 800b660:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b662:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b66c:	4313      	orrs	r3, r2
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	e00e      	b.n	800b690 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	78db      	ldrb	r3, [r3, #3]
 800b676:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	785b      	ldrb	r3, [r3, #1]
 800b67c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b67e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b684:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b68c:	4313      	orrs	r3, r2
 800b68e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	22ca      	movs	r2, #202	; 0xca
 800b696:	625a      	str	r2, [r3, #36]	; 0x24
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2253      	movs	r2, #83	; 0x53
 800b69e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 f89b 	bl	800b7dc <RTC_EnterInitMode>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6aa:	7cfb      	ldrb	r3, [r7, #19]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10b      	bne.n	800b6c8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b6b0:	4a0f      	ldr	r2, [pc, #60]	; (800b6f0 <HAL_RTC_SetDate+0x10c>)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f8c2 	bl	800b848 <RTC_ExitInitMode>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	22ff      	movs	r2, #255	; 0xff
 800b6ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b6d0:	7cfb      	ldrb	r3, [r7, #19]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b6e6:	7cfb      	ldrb	r3, [r7, #19]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	371c      	adds	r7, #28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}
 800b6f0:	40002800 	.word	0x40002800

0800b6f4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b700:	4b22      	ldr	r3, [pc, #136]	; (800b78c <HAL_RTC_GetDate+0x98>)
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b708:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b70c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	0c1b      	lsrs	r3, r3, #16
 800b712:	b2da      	uxtb	r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	0a1b      	lsrs	r3, r3, #8
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	f003 031f 	and.w	r3, r3, #31
 800b722:	b2da      	uxtb	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	0b5b      	lsrs	r3, r3, #13
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	f003 0307 	and.w	r3, r3, #7
 800b740:	b2da      	uxtb	r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d11a      	bne.n	800b782 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	78db      	ldrb	r3, [r3, #3]
 800b750:	4618      	mov	r0, r3
 800b752:	f000 f8d7 	bl	800b904 <RTC_Bcd2ToByte>
 800b756:	4603      	mov	r3, r0
 800b758:	461a      	mov	r2, r3
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	785b      	ldrb	r3, [r3, #1]
 800b762:	4618      	mov	r0, r3
 800b764:	f000 f8ce 	bl	800b904 <RTC_Bcd2ToByte>
 800b768:	4603      	mov	r3, r0
 800b76a:	461a      	mov	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	789b      	ldrb	r3, [r3, #2]
 800b774:	4618      	mov	r0, r3
 800b776:	f000 f8c5 	bl	800b904 <RTC_Bcd2ToByte>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	40002800 	.word	0x40002800

0800b790 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b7a6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800b7a8:	f7f9 fce8 	bl	800517c <HAL_GetTick>
 800b7ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b7ae:	e009      	b.n	800b7c4 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b7b0:	f7f9 fce4 	bl	800517c <HAL_GetTick>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7be:	d901      	bls.n	800b7c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e007      	b.n	800b7d4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d0ee      	beq.n	800b7b0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d123      	bne.n	800b83e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b804:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b806:	f7f9 fcb9 	bl	800517c <HAL_GetTick>
 800b80a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b80c:	e00d      	b.n	800b82a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b80e:	f7f9 fcb5 	bl	800517c <HAL_GetTick>
 800b812:	4602      	mov	r2, r0
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b81c:	d905      	bls.n	800b82a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2203      	movs	r2, #3
 800b826:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <RTC_EnterInitMode+0x62>
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d1e7      	bne.n	800b80e <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b854:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	4a19      	ldr	r2, [pc, #100]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b85a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b85e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b860:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	f003 0320 	and.w	r3, r3, #32
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10c      	bne.n	800b886 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff ff8f 	bl	800b790 <HAL_RTC_WaitForSynchro>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d01e      	beq.n	800b8b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2203      	movs	r2, #3
 800b87c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	73fb      	strb	r3, [r7, #15]
 800b884:	e017      	b.n	800b8b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b886:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b888:	699b      	ldr	r3, [r3, #24]
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b88c:	f023 0320 	bic.w	r3, r3, #32
 800b890:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff ff7c 	bl	800b790 <HAL_RTC_WaitForSynchro>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d005      	beq.n	800b8aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2203      	movs	r2, #3
 800b8a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	4a04      	ldr	r2, [pc, #16]	; (800b8c0 <RTC_ExitInitMode+0x78>)
 800b8b0:	f043 0320 	orr.w	r3, r3, #32
 800b8b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	40002800 	.word	0x40002800

0800b8c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b8d6:	e005      	b.n	800b8e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b8de:	7afb      	ldrb	r3, [r7, #11]
 800b8e0:	3b0a      	subs	r3, #10
 800b8e2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	2b09      	cmp	r3, #9
 800b8e8:	d8f6      	bhi.n	800b8d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	7afb      	ldrb	r3, [r7, #11]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	b2db      	uxtb	r3, r3
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	091b      	lsrs	r3, r3, #4
 800b912:	b2db      	uxtb	r3, r3
 800b914:	461a      	mov	r2, r3
 800b916:	0092      	lsls	r2, r2, #2
 800b918:	4413      	add	r3, r2
 800b91a:	005b      	lsls	r3, r3, #1
 800b91c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	f003 030f 	and.w	r3, r3, #15
 800b924:	b2da      	uxtb	r2, r3
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	4413      	add	r3, r2
 800b92a:	b2db      	uxtb	r3, r3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e095      	b.n	800ba76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d108      	bne.n	800b964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b95a:	d009      	beq.n	800b970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	61da      	str	r2, [r3, #28]
 800b962:	e005      	b.n	800b970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d106      	bne.n	800b990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7f9 f95e 	bl	8004c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2202      	movs	r2, #2
 800b994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9b0:	d902      	bls.n	800b9b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
 800b9b6:	e002      	b.n	800b9be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b9b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b9c6:	d007      	beq.n	800b9d8 <HAL_SPI_Init+0xa0>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9d0:	d002      	beq.n	800b9d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	431a      	orrs	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba06:	431a      	orrs	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	69db      	ldr	r3, [r3, #28]
 800ba0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba1a:	ea42 0103 	orr.w	r1, r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	0c1b      	lsrs	r3, r3, #16
 800ba34:	f003 0204 	and.w	r2, r3, #4
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	f003 0310 	and.w	r3, r3, #16
 800ba40:	431a      	orrs	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ba54:	ea42 0103 	orr.w	r1, r2, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b088      	sub	sp, #32
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	603b      	str	r3, [r7, #0]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d101      	bne.n	800baa0 <HAL_SPI_Transmit+0x22>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	e158      	b.n	800bd52 <HAL_SPI_Transmit+0x2d4>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800baa8:	f7f9 fb68 	bl	800517c <HAL_GetTick>
 800baac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800baae:	88fb      	ldrh	r3, [r7, #6]
 800bab0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b01      	cmp	r3, #1
 800babc:	d002      	beq.n	800bac4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800babe:	2302      	movs	r3, #2
 800bac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bac2:	e13d      	b.n	800bd40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <HAL_SPI_Transmit+0x52>
 800baca:	88fb      	ldrh	r3, [r7, #6]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bad4:	e134      	b.n	800bd40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2203      	movs	r2, #3
 800bada:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	88fa      	ldrh	r2, [r7, #6]
 800baee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	88fa      	ldrh	r2, [r7, #6]
 800baf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb20:	d10f      	bne.n	800bb42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4c:	2b40      	cmp	r3, #64	; 0x40
 800bb4e:	d007      	beq.n	800bb60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb68:	d94b      	bls.n	800bc02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <HAL_SPI_Transmit+0xfa>
 800bb72:	8afb      	ldrh	r3, [r7, #22]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d13e      	bne.n	800bbf6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7c:	881a      	ldrh	r2, [r3, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb88:	1c9a      	adds	r2, r3, #2
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	3b01      	subs	r3, #1
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bb9c:	e02b      	b.n	800bbf6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f003 0302 	and.w	r3, r3, #2
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d112      	bne.n	800bbd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb0:	881a      	ldrh	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	1c9a      	adds	r2, r3, #2
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbd0:	e011      	b.n	800bbf6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbd2:	f7f9 fad3 	bl	800517c <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d803      	bhi.n	800bbea <HAL_SPI_Transmit+0x16c>
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe8:	d102      	bne.n	800bbf0 <HAL_SPI_Transmit+0x172>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bbf4:	e0a4      	b.n	800bd40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1ce      	bne.n	800bb9e <HAL_SPI_Transmit+0x120>
 800bc00:	e07c      	b.n	800bcfc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <HAL_SPI_Transmit+0x192>
 800bc0a:	8afb      	ldrh	r3, [r7, #22]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d170      	bne.n	800bcf2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d912      	bls.n	800bc40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1e:	881a      	ldrh	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2a:	1c9a      	adds	r2, r3, #2
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	3b02      	subs	r3, #2
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc3e:	e058      	b.n	800bcf2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	330c      	adds	r3, #12
 800bc4a:	7812      	ldrb	r2, [r2, #0]
 800bc4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	1c5a      	adds	r2, r3, #1
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bc66:	e044      	b.n	800bcf2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d12b      	bne.n	800bcce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d912      	bls.n	800bca6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc84:	881a      	ldrh	r2, [r3, #0]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc90:	1c9a      	adds	r2, r3, #2
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b02      	subs	r3, #2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bca4:	e025      	b.n	800bcf2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	330c      	adds	r3, #12
 800bcb0:	7812      	ldrb	r2, [r2, #0]
 800bcb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bccc:	e011      	b.n	800bcf2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcce:	f7f9 fa55 	bl	800517c <HAL_GetTick>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d803      	bhi.n	800bce6 <HAL_SPI_Transmit+0x268>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d102      	bne.n	800bcec <HAL_SPI_Transmit+0x26e>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bcf0:	e026      	b.n	800bd40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1b5      	bne.n	800bc68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bcfc:	69ba      	ldr	r2, [r7, #24]
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 fb5b 	bl	800c3bc <SPI_EndRxTxTransaction>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10a      	bne.n	800bd30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	613b      	str	r3, [r7, #16]
 800bd2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	77fb      	strb	r3, [r7, #31]
 800bd3c:	e000      	b.n	800bd40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bd3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bd50:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3720      	adds	r7, #32
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b08a      	sub	sp, #40	; 0x28
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <HAL_SPI_TransmitReceive+0x26>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e1fb      	b.n	800c178 <HAL_SPI_TransmitReceive+0x41e>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd88:	f7f9 f9f8 	bl	800517c <HAL_GetTick>
 800bd8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bd9c:	887b      	ldrh	r3, [r7, #2]
 800bd9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bda0:	887b      	ldrh	r3, [r7, #2]
 800bda2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bda4:	7efb      	ldrb	r3, [r7, #27]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d00e      	beq.n	800bdc8 <HAL_SPI_TransmitReceive+0x6e>
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdb0:	d106      	bne.n	800bdc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d102      	bne.n	800bdc0 <HAL_SPI_TransmitReceive+0x66>
 800bdba:	7efb      	ldrb	r3, [r7, #27]
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	d003      	beq.n	800bdc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bdc6:	e1cd      	b.n	800c164 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d005      	beq.n	800bdda <HAL_SPI_TransmitReceive+0x80>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <HAL_SPI_TransmitReceive+0x80>
 800bdd4:	887b      	ldrh	r3, [r7, #2]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d103      	bne.n	800bde2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bde0:	e1c0      	b.n	800c164 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	d003      	beq.n	800bdf6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2205      	movs	r2, #5
 800bdf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	887a      	ldrh	r2, [r7, #2]
 800be06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	887a      	ldrh	r2, [r7, #2]
 800be0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	887a      	ldrh	r2, [r7, #2]
 800be1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	887a      	ldrh	r2, [r7, #2]
 800be22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be38:	d802      	bhi.n	800be40 <HAL_SPI_TransmitReceive+0xe6>
 800be3a:	8a3b      	ldrh	r3, [r7, #16]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d908      	bls.n	800be52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be4e:	605a      	str	r2, [r3, #4]
 800be50:	e007      	b.n	800be62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	685a      	ldr	r2, [r3, #4]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6c:	2b40      	cmp	r3, #64	; 0x40
 800be6e:	d007      	beq.n	800be80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be88:	d97c      	bls.n	800bf84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <HAL_SPI_TransmitReceive+0x13e>
 800be92:	8a7b      	ldrh	r3, [r7, #18]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d169      	bne.n	800bf6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9c:	881a      	ldrh	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	1c9a      	adds	r2, r3, #2
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	3b01      	subs	r3, #1
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bebc:	e056      	b.n	800bf6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f003 0302 	and.w	r3, r3, #2
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d11b      	bne.n	800bf04 <HAL_SPI_TransmitReceive+0x1aa>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d016      	beq.n	800bf04 <HAL_SPI_TransmitReceive+0x1aa>
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d113      	bne.n	800bf04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee0:	881a      	ldrh	r2, [r3, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	1c9a      	adds	r2, r3, #2
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	3b01      	subs	r3, #1
 800befa:	b29a      	uxth	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf00:	2300      	movs	r3, #0
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d11c      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x1f2>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d016      	beq.n	800bf4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf28:	b292      	uxth	r2, r2
 800bf2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf30:	1c9a      	adds	r2, r3, #2
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf4c:	f7f9 f916 	bl	800517c <HAL_GetTick>
 800bf50:	4602      	mov	r2, r0
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d807      	bhi.n	800bf6c <HAL_SPI_TransmitReceive+0x212>
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d003      	beq.n	800bf6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bf6a:	e0fb      	b.n	800c164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1a3      	bne.n	800bebe <HAL_SPI_TransmitReceive+0x164>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d19d      	bne.n	800bebe <HAL_SPI_TransmitReceive+0x164>
 800bf82:	e0df      	b.n	800c144 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <HAL_SPI_TransmitReceive+0x23a>
 800bf8c:	8a7b      	ldrh	r3, [r7, #18]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	f040 80cb 	bne.w	800c12a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d912      	bls.n	800bfc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa2:	881a      	ldrh	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfae:	1c9a      	adds	r2, r3, #2
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	3b02      	subs	r3, #2
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfc2:	e0b2      	b.n	800c12a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	330c      	adds	r3, #12
 800bfce:	7812      	ldrb	r2, [r2, #0]
 800bfd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfea:	e09e      	b.n	800c12a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	f003 0302 	and.w	r3, r3, #2
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d134      	bne.n	800c064 <HAL_SPI_TransmitReceive+0x30a>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bffe:	b29b      	uxth	r3, r3
 800c000:	2b00      	cmp	r3, #0
 800c002:	d02f      	beq.n	800c064 <HAL_SPI_TransmitReceive+0x30a>
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	2b01      	cmp	r3, #1
 800c008:	d12c      	bne.n	800c064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c00e:	b29b      	uxth	r3, r3
 800c010:	2b01      	cmp	r3, #1
 800c012:	d912      	bls.n	800c03a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c018:	881a      	ldrh	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	1c9a      	adds	r2, r3, #2
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c02e:	b29b      	uxth	r3, r3
 800c030:	3b02      	subs	r3, #2
 800c032:	b29a      	uxth	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c038:	e012      	b.n	800c060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	330c      	adds	r3, #12
 800c044:	7812      	ldrb	r2, [r2, #0]
 800c046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c056:	b29b      	uxth	r3, r3
 800c058:	3b01      	subs	r3, #1
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d148      	bne.n	800c104 <HAL_SPI_TransmitReceive+0x3aa>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d042      	beq.n	800c104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c084:	b29b      	uxth	r3, r3
 800c086:	2b01      	cmp	r3, #1
 800c088:	d923      	bls.n	800c0d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68da      	ldr	r2, [r3, #12]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c094:	b292      	uxth	r2, r2
 800c096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	1c9a      	adds	r2, r3, #2
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b02      	subs	r3, #2
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d81f      	bhi.n	800c100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c0ce:	605a      	str	r2, [r3, #4]
 800c0d0:	e016      	b.n	800c100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f103 020c 	add.w	r2, r3, #12
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0de:	7812      	ldrb	r2, [r2, #0]
 800c0e0:	b2d2      	uxtb	r2, r2
 800c0e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c100:	2301      	movs	r3, #1
 800c102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c104:	f7f9 f83a 	bl	800517c <HAL_GetTick>
 800c108:	4602      	mov	r2, r0
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c110:	429a      	cmp	r2, r3
 800c112:	d803      	bhi.n	800c11c <HAL_SPI_TransmitReceive+0x3c2>
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11a:	d102      	bne.n	800c122 <HAL_SPI_TransmitReceive+0x3c8>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d103      	bne.n	800c12a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c128:	e01c      	b.n	800c164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c12e:	b29b      	uxth	r3, r3
 800c130:	2b00      	cmp	r3, #0
 800c132:	f47f af5b 	bne.w	800bfec <HAL_SPI_TransmitReceive+0x292>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f47f af54 	bne.w	800bfec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 f937 	bl	800c3bc <SPI_EndRxTxTransaction>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d006      	beq.n	800c162 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2220      	movs	r2, #32
 800c15e:	661a      	str	r2, [r3, #96]	; 0x60
 800c160:	e000      	b.n	800c164 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3728      	adds	r7, #40	; 0x28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	4613      	mov	r3, r2
 800c18e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c190:	f7f8 fff4 	bl	800517c <HAL_GetTick>
 800c194:	4602      	mov	r2, r0
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	1a9b      	subs	r3, r3, r2
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	4413      	add	r3, r2
 800c19e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c1a0:	f7f8 ffec 	bl	800517c <HAL_GetTick>
 800c1a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c1a6:	4b39      	ldr	r3, [pc, #228]	; (800c28c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	015b      	lsls	r3, r3, #5
 800c1ac:	0d1b      	lsrs	r3, r3, #20
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	fb02 f303 	mul.w	r3, r2, r3
 800c1b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1b6:	e054      	b.n	800c262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d050      	beq.n	800c262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c1c0:	f7f8 ffdc 	bl	800517c <HAL_GetTick>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d902      	bls.n	800c1d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d13d      	bne.n	800c252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ee:	d111      	bne.n	800c214 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1f8:	d004      	beq.n	800c204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c202:	d107      	bne.n	800c214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c21c:	d10f      	bne.n	800c23e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c23c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e017      	b.n	800c282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	3b01      	subs	r3, #1
 800c260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	4013      	ands	r3, r2
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	429a      	cmp	r2, r3
 800c270:	bf0c      	ite	eq
 800c272:	2301      	moveq	r3, #1
 800c274:	2300      	movne	r3, #0
 800c276:	b2db      	uxtb	r3, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d19b      	bne.n	800c1b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20000224 	.word	0x20000224

0800c290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08a      	sub	sp, #40	; 0x28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c2a2:	f7f8 ff6b 	bl	800517c <HAL_GetTick>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	683a      	ldr	r2, [r7, #0]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c2b2:	f7f8 ff63 	bl	800517c <HAL_GetTick>
 800c2b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	330c      	adds	r3, #12
 800c2be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c2c0:	4b3d      	ldr	r3, [pc, #244]	; (800c3b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00da      	lsls	r2, r3, #3
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	0d1b      	lsrs	r3, r3, #20
 800c2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c2d8:	e060      	b.n	800c39c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c2e0:	d107      	bne.n	800c2f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d104      	bne.n	800c2f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f8:	d050      	beq.n	800c39c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2fa:	f7f8 ff3f 	bl	800517c <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c306:	429a      	cmp	r2, r3
 800c308:	d902      	bls.n	800c310 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d13d      	bne.n	800c38c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c31e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c328:	d111      	bne.n	800c34e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c332:	d004      	beq.n	800c33e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c33c:	d107      	bne.n	800c34e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c34c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c356:	d10f      	bne.n	800c378 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	e010      	b.n	800c3ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c392:	2300      	movs	r3, #0
 800c394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	3b01      	subs	r3, #1
 800c39a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689a      	ldr	r2, [r3, #8]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d196      	bne.n	800c2da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3728      	adds	r7, #40	; 0x28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20000224 	.word	0x20000224

0800c3bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f7ff ff5b 	bl	800c290 <SPI_WaitFifoStateUntilTimeout>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3e4:	f043 0220 	orr.w	r2, r3, #32
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e027      	b.n	800c440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2180      	movs	r1, #128	; 0x80
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff fec0 	bl	800c180 <SPI_WaitFlagStateUntilTimeout>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d007      	beq.n	800c416 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c40a:	f043 0220 	orr.w	r2, r3, #32
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c412:	2303      	movs	r3, #3
 800c414:	e014      	b.n	800c440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff ff34 	bl	800c290 <SPI_WaitFifoStateUntilTimeout>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d007      	beq.n	800c43e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c432:	f043 0220 	orr.w	r2, r3, #32
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c43a:	2303      	movs	r3, #3
 800c43c:	e000      	b.n	800c440 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e049      	b.n	800c4ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7f8 fc40 	bl	8004cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	3304      	adds	r3, #4
 800c484:	4619      	mov	r1, r3
 800c486:	4610      	mov	r0, r2
 800c488:	f000 fb1e 	bl	800cac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c506:	b2db      	uxtb	r3, r3
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d001      	beq.n	800c510 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	e047      	b.n	800c5a0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2202      	movs	r2, #2
 800c514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a23      	ldr	r2, [pc, #140]	; (800c5ac <HAL_TIM_Base_Start+0xb4>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d01d      	beq.n	800c55e <HAL_TIM_Base_Start+0x66>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c52a:	d018      	beq.n	800c55e <HAL_TIM_Base_Start+0x66>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a1f      	ldr	r2, [pc, #124]	; (800c5b0 <HAL_TIM_Base_Start+0xb8>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d013      	beq.n	800c55e <HAL_TIM_Base_Start+0x66>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a1e      	ldr	r2, [pc, #120]	; (800c5b4 <HAL_TIM_Base_Start+0xbc>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d00e      	beq.n	800c55e <HAL_TIM_Base_Start+0x66>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a1c      	ldr	r2, [pc, #112]	; (800c5b8 <HAL_TIM_Base_Start+0xc0>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d009      	beq.n	800c55e <HAL_TIM_Base_Start+0x66>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a1b      	ldr	r2, [pc, #108]	; (800c5bc <HAL_TIM_Base_Start+0xc4>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d004      	beq.n	800c55e <HAL_TIM_Base_Start+0x66>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a19      	ldr	r2, [pc, #100]	; (800c5c0 <HAL_TIM_Base_Start+0xc8>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d115      	bne.n	800c58a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	4b17      	ldr	r3, [pc, #92]	; (800c5c4 <HAL_TIM_Base_Start+0xcc>)
 800c566:	4013      	ands	r3, r2
 800c568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b06      	cmp	r3, #6
 800c56e:	d015      	beq.n	800c59c <HAL_TIM_Base_Start+0xa4>
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c576:	d011      	beq.n	800c59c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f042 0201 	orr.w	r2, r2, #1
 800c586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c588:	e008      	b.n	800c59c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f042 0201 	orr.w	r2, r2, #1
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	e000      	b.n	800c59e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c59c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	40012c00 	.word	0x40012c00
 800c5b0:	40000400 	.word	0x40000400
 800c5b4:	40000800 	.word	0x40000800
 800c5b8:	40000c00 	.word	0x40000c00
 800c5bc:	40013400 	.word	0x40013400
 800c5c0:	40014000 	.word	0x40014000
 800c5c4:	00010007 	.word	0x00010007

0800c5c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d001      	beq.n	800c5e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e04f      	b.n	800c680 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f042 0201 	orr.w	r2, r2, #1
 800c5f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a23      	ldr	r2, [pc, #140]	; (800c68c <HAL_TIM_Base_Start_IT+0xc4>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d01d      	beq.n	800c63e <HAL_TIM_Base_Start_IT+0x76>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60a:	d018      	beq.n	800c63e <HAL_TIM_Base_Start_IT+0x76>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <HAL_TIM_Base_Start_IT+0xc8>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d013      	beq.n	800c63e <HAL_TIM_Base_Start_IT+0x76>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <HAL_TIM_Base_Start_IT+0xcc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d00e      	beq.n	800c63e <HAL_TIM_Base_Start_IT+0x76>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <HAL_TIM_Base_Start_IT+0xd0>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d009      	beq.n	800c63e <HAL_TIM_Base_Start_IT+0x76>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a1b      	ldr	r2, [pc, #108]	; (800c69c <HAL_TIM_Base_Start_IT+0xd4>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d004      	beq.n	800c63e <HAL_TIM_Base_Start_IT+0x76>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a19      	ldr	r2, [pc, #100]	; (800c6a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d115      	bne.n	800c66a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689a      	ldr	r2, [r3, #8]
 800c644:	4b17      	ldr	r3, [pc, #92]	; (800c6a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c646:	4013      	ands	r3, r2
 800c648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b06      	cmp	r3, #6
 800c64e:	d015      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0xb4>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c656:	d011      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f042 0201 	orr.w	r2, r2, #1
 800c666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c668:	e008      	b.n	800c67c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f042 0201 	orr.w	r2, r2, #1
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	e000      	b.n	800c67e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c67c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	40012c00 	.word	0x40012c00
 800c690:	40000400 	.word	0x40000400
 800c694:	40000800 	.word	0x40000800
 800c698:	40000c00 	.word	0x40000c00
 800c69c:	40013400 	.word	0x40013400
 800c6a0:	40014000 	.word	0x40014000
 800c6a4:	00010007 	.word	0x00010007

0800c6a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d122      	bne.n	800c704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d11b      	bne.n	800c704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f06f 0202 	mvn.w	r2, #2
 800c6d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	f003 0303 	and.w	r3, r3, #3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f9ce 	bl	800ca8c <HAL_TIM_IC_CaptureCallback>
 800c6f0:	e005      	b.n	800c6fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f9c0 	bl	800ca78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f9d1 	bl	800caa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f003 0304 	and.w	r3, r3, #4
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d122      	bne.n	800c758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d11b      	bne.n	800c758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f06f 0204 	mvn.w	r2, #4
 800c728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2202      	movs	r2, #2
 800c72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f9a4 	bl	800ca8c <HAL_TIM_IC_CaptureCallback>
 800c744:	e005      	b.n	800c752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f996 	bl	800ca78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f9a7 	bl	800caa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b08      	cmp	r3, #8
 800c764:	d122      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0308 	and.w	r3, r3, #8
 800c770:	2b08      	cmp	r3, #8
 800c772:	d11b      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f06f 0208 	mvn.w	r2, #8
 800c77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2204      	movs	r2, #4
 800c782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f97a 	bl	800ca8c <HAL_TIM_IC_CaptureCallback>
 800c798:	e005      	b.n	800c7a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f96c 	bl	800ca78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f97d 	bl	800caa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d122      	bne.n	800c800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f003 0310 	and.w	r3, r3, #16
 800c7c4:	2b10      	cmp	r3, #16
 800c7c6:	d11b      	bne.n	800c800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f06f 0210 	mvn.w	r2, #16
 800c7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2208      	movs	r2, #8
 800c7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f950 	bl	800ca8c <HAL_TIM_IC_CaptureCallback>
 800c7ec:	e005      	b.n	800c7fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f942 	bl	800ca78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f953 	bl	800caa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d10e      	bne.n	800c82c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d107      	bne.n	800c82c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f06f 0201 	mvn.w	r2, #1
 800c824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7f7 fa54 	bl	8003cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c836:	2b80      	cmp	r3, #128	; 0x80
 800c838:	d10e      	bne.n	800c858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c844:	2b80      	cmp	r3, #128	; 0x80
 800c846:	d107      	bne.n	800c858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fafe 	bl	800ce54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c866:	d10e      	bne.n	800c886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c872:	2b80      	cmp	r3, #128	; 0x80
 800c874:	d107      	bne.n	800c886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 faf1 	bl	800ce68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c890:	2b40      	cmp	r3, #64	; 0x40
 800c892:	d10e      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89e:	2b40      	cmp	r3, #64	; 0x40
 800c8a0:	d107      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f901 	bl	800cab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b20      	cmp	r3, #32
 800c8be:	d10e      	bne.n	800c8de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b20      	cmp	r3, #32
 800c8cc:	d107      	bne.n	800c8de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f06f 0220 	mvn.w	r2, #32
 800c8d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fab1 	bl	800ce40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b084      	sub	sp, #16
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d101      	bne.n	800c902 <HAL_TIM_ConfigClockSource+0x1c>
 800c8fe:	2302      	movs	r3, #2
 800c900:	e0b6      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x18a>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2202      	movs	r2, #2
 800c90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c920:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c92c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c93e:	d03e      	beq.n	800c9be <HAL_TIM_ConfigClockSource+0xd8>
 800c940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c944:	f200 8087 	bhi.w	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c94c:	f000 8086 	beq.w	800ca5c <HAL_TIM_ConfigClockSource+0x176>
 800c950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c954:	d87f      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c956:	2b70      	cmp	r3, #112	; 0x70
 800c958:	d01a      	beq.n	800c990 <HAL_TIM_ConfigClockSource+0xaa>
 800c95a:	2b70      	cmp	r3, #112	; 0x70
 800c95c:	d87b      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c95e:	2b60      	cmp	r3, #96	; 0x60
 800c960:	d050      	beq.n	800ca04 <HAL_TIM_ConfigClockSource+0x11e>
 800c962:	2b60      	cmp	r3, #96	; 0x60
 800c964:	d877      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c966:	2b50      	cmp	r3, #80	; 0x50
 800c968:	d03c      	beq.n	800c9e4 <HAL_TIM_ConfigClockSource+0xfe>
 800c96a:	2b50      	cmp	r3, #80	; 0x50
 800c96c:	d873      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	d058      	beq.n	800ca24 <HAL_TIM_ConfigClockSource+0x13e>
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d86f      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c976:	2b30      	cmp	r3, #48	; 0x30
 800c978:	d064      	beq.n	800ca44 <HAL_TIM_ConfigClockSource+0x15e>
 800c97a:	2b30      	cmp	r3, #48	; 0x30
 800c97c:	d86b      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c97e:	2b20      	cmp	r3, #32
 800c980:	d060      	beq.n	800ca44 <HAL_TIM_ConfigClockSource+0x15e>
 800c982:	2b20      	cmp	r3, #32
 800c984:	d867      	bhi.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
 800c986:	2b00      	cmp	r3, #0
 800c988:	d05c      	beq.n	800ca44 <HAL_TIM_ConfigClockSource+0x15e>
 800c98a:	2b10      	cmp	r3, #16
 800c98c:	d05a      	beq.n	800ca44 <HAL_TIM_ConfigClockSource+0x15e>
 800c98e:	e062      	b.n	800ca56 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9a0:	f000 f9a6 	bl	800ccf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	609a      	str	r2, [r3, #8]
      break;
 800c9bc:	e04f      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9ce:	f000 f98f 	bl	800ccf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689a      	ldr	r2, [r3, #8]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9e0:	609a      	str	r2, [r3, #8]
      break;
 800c9e2:	e03c      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	f000 f903 	bl	800cbfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2150      	movs	r1, #80	; 0x50
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 f95c 	bl	800ccba <TIM_ITRx_SetConfig>
      break;
 800ca02:	e02c      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca10:	461a      	mov	r2, r3
 800ca12:	f000 f922 	bl	800cc5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2160      	movs	r1, #96	; 0x60
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 f94c 	bl	800ccba <TIM_ITRx_SetConfig>
      break;
 800ca22:	e01c      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca30:	461a      	mov	r2, r3
 800ca32:	f000 f8e3 	bl	800cbfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2140      	movs	r1, #64	; 0x40
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 f93c 	bl	800ccba <TIM_ITRx_SetConfig>
      break;
 800ca42:	e00c      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4610      	mov	r0, r2
 800ca50:	f000 f933 	bl	800ccba <TIM_ITRx_SetConfig>
      break;
 800ca54:	e003      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	73fb      	strb	r3, [r7, #15]
      break;
 800ca5a:	e000      	b.n	800ca5e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a40      	ldr	r2, [pc, #256]	; (800cbdc <TIM_Base_SetConfig+0x114>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d013      	beq.n	800cb08 <TIM_Base_SetConfig+0x40>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cae6:	d00f      	beq.n	800cb08 <TIM_Base_SetConfig+0x40>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a3d      	ldr	r2, [pc, #244]	; (800cbe0 <TIM_Base_SetConfig+0x118>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d00b      	beq.n	800cb08 <TIM_Base_SetConfig+0x40>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a3c      	ldr	r2, [pc, #240]	; (800cbe4 <TIM_Base_SetConfig+0x11c>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d007      	beq.n	800cb08 <TIM_Base_SetConfig+0x40>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a3b      	ldr	r2, [pc, #236]	; (800cbe8 <TIM_Base_SetConfig+0x120>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d003      	beq.n	800cb08 <TIM_Base_SetConfig+0x40>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a3a      	ldr	r2, [pc, #232]	; (800cbec <TIM_Base_SetConfig+0x124>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d108      	bne.n	800cb1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a2f      	ldr	r2, [pc, #188]	; (800cbdc <TIM_Base_SetConfig+0x114>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d01f      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb28:	d01b      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a2c      	ldr	r2, [pc, #176]	; (800cbe0 <TIM_Base_SetConfig+0x118>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d017      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a2b      	ldr	r2, [pc, #172]	; (800cbe4 <TIM_Base_SetConfig+0x11c>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d013      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a2a      	ldr	r2, [pc, #168]	; (800cbe8 <TIM_Base_SetConfig+0x120>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d00f      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a29      	ldr	r2, [pc, #164]	; (800cbec <TIM_Base_SetConfig+0x124>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d00b      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a28      	ldr	r2, [pc, #160]	; (800cbf0 <TIM_Base_SetConfig+0x128>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d007      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a27      	ldr	r2, [pc, #156]	; (800cbf4 <TIM_Base_SetConfig+0x12c>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d003      	beq.n	800cb62 <TIM_Base_SetConfig+0x9a>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a26      	ldr	r2, [pc, #152]	; (800cbf8 <TIM_Base_SetConfig+0x130>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d108      	bne.n	800cb74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a10      	ldr	r2, [pc, #64]	; (800cbdc <TIM_Base_SetConfig+0x114>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d00f      	beq.n	800cbc0 <TIM_Base_SetConfig+0xf8>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a12      	ldr	r2, [pc, #72]	; (800cbec <TIM_Base_SetConfig+0x124>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d00b      	beq.n	800cbc0 <TIM_Base_SetConfig+0xf8>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a11      	ldr	r2, [pc, #68]	; (800cbf0 <TIM_Base_SetConfig+0x128>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d007      	beq.n	800cbc0 <TIM_Base_SetConfig+0xf8>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a10      	ldr	r2, [pc, #64]	; (800cbf4 <TIM_Base_SetConfig+0x12c>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d003      	beq.n	800cbc0 <TIM_Base_SetConfig+0xf8>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a0f      	ldr	r2, [pc, #60]	; (800cbf8 <TIM_Base_SetConfig+0x130>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d103      	bne.n	800cbc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	691a      	ldr	r2, [r3, #16]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	615a      	str	r2, [r3, #20]
}
 800cbce:	bf00      	nop
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	40012c00 	.word	0x40012c00
 800cbe0:	40000400 	.word	0x40000400
 800cbe4:	40000800 	.word	0x40000800
 800cbe8:	40000c00 	.word	0x40000c00
 800cbec:	40013400 	.word	0x40013400
 800cbf0:	40014000 	.word	0x40014000
 800cbf4:	40014400 	.word	0x40014400
 800cbf8:	40014800 	.word	0x40014800

0800cbfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	f023 0201 	bic.w	r2, r3, #1
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	011b      	lsls	r3, r3, #4
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	f023 030a 	bic.w	r3, r3, #10
 800cc38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	621a      	str	r2, [r3, #32]
}
 800cc4e:	bf00      	nop
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b087      	sub	sp, #28
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	f023 0210 	bic.w	r2, r3, #16
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	031b      	lsls	r3, r3, #12
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	011b      	lsls	r3, r3, #4
 800cc9c:	693a      	ldr	r2, [r7, #16]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	621a      	str	r2, [r3, #32]
}
 800ccae:	bf00      	nop
 800ccb0:	371c      	adds	r7, #28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b085      	sub	sp, #20
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	f043 0307 	orr.w	r3, r3, #7
 800ccdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	609a      	str	r2, [r3, #8]
}
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	021a      	lsls	r2, r3, #8
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	431a      	orrs	r2, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	609a      	str	r2, [r3, #8]
}
 800cd24:	bf00      	nop
 800cd26:	371c      	adds	r7, #28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d101      	bne.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd44:	2302      	movs	r3, #2
 800cd46:	e068      	b.n	800ce1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a2e      	ldr	r2, [pc, #184]	; (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d004      	beq.n	800cd7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a2d      	ldr	r2, [pc, #180]	; (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d108      	bne.n	800cd8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a1e      	ldr	r2, [pc, #120]	; (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d01d      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdba:	d018      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a1b      	ldr	r2, [pc, #108]	; (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d013      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a1a      	ldr	r2, [pc, #104]	; (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d00e      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a18      	ldr	r2, [pc, #96]	; (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d009      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a13      	ldr	r2, [pc, #76]	; (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d004      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a14      	ldr	r2, [pc, #80]	; (800ce3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d10c      	bne.n	800ce08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	40012c00 	.word	0x40012c00
 800ce2c:	40013400 	.word	0x40013400
 800ce30:	40000400 	.word	0x40000400
 800ce34:	40000800 	.word	0x40000800
 800ce38:	40000c00 	.word	0x40000c00
 800ce3c:	40014000 	.word	0x40014000

0800ce40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce5c:	bf00      	nop
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	f107 001c 	add.w	r0, r7, #28
 800ce8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 faf6 	bl	800e48c <USB_CoreReset>
 800cea0:	4603      	mov	r3, r0
 800cea2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800cea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d106      	bne.n	800ceb8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	639a      	str	r2, [r3, #56]	; 0x38
 800ceb6:	e005      	b.n	800cec4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ced0:	b004      	add	sp, #16
 800ced2:	4770      	bx	lr

0800ced4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d165      	bne.n	800cfb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	4a3e      	ldr	r2, [pc, #248]	; (800cfe4 <USB_SetTurnaroundTime+0x110>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d906      	bls.n	800cefe <USB_SetTurnaroundTime+0x2a>
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	4a3d      	ldr	r2, [pc, #244]	; (800cfe8 <USB_SetTurnaroundTime+0x114>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d202      	bcs.n	800cefe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cef8:	230f      	movs	r3, #15
 800cefa:	617b      	str	r3, [r7, #20]
 800cefc:	e05c      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	4a39      	ldr	r2, [pc, #228]	; (800cfe8 <USB_SetTurnaroundTime+0x114>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d306      	bcc.n	800cf14 <USB_SetTurnaroundTime+0x40>
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	4a38      	ldr	r2, [pc, #224]	; (800cfec <USB_SetTurnaroundTime+0x118>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d202      	bcs.n	800cf14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cf0e:	230e      	movs	r3, #14
 800cf10:	617b      	str	r3, [r7, #20]
 800cf12:	e051      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	4a35      	ldr	r2, [pc, #212]	; (800cfec <USB_SetTurnaroundTime+0x118>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d306      	bcc.n	800cf2a <USB_SetTurnaroundTime+0x56>
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4a34      	ldr	r2, [pc, #208]	; (800cff0 <USB_SetTurnaroundTime+0x11c>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d202      	bcs.n	800cf2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cf24:	230d      	movs	r3, #13
 800cf26:	617b      	str	r3, [r7, #20]
 800cf28:	e046      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	4a30      	ldr	r2, [pc, #192]	; (800cff0 <USB_SetTurnaroundTime+0x11c>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d306      	bcc.n	800cf40 <USB_SetTurnaroundTime+0x6c>
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	4a2f      	ldr	r2, [pc, #188]	; (800cff4 <USB_SetTurnaroundTime+0x120>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d802      	bhi.n	800cf40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cf3a:	230c      	movs	r3, #12
 800cf3c:	617b      	str	r3, [r7, #20]
 800cf3e:	e03b      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	4a2c      	ldr	r2, [pc, #176]	; (800cff4 <USB_SetTurnaroundTime+0x120>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d906      	bls.n	800cf56 <USB_SetTurnaroundTime+0x82>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	4a2b      	ldr	r2, [pc, #172]	; (800cff8 <USB_SetTurnaroundTime+0x124>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d802      	bhi.n	800cf56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf50:	230b      	movs	r3, #11
 800cf52:	617b      	str	r3, [r7, #20]
 800cf54:	e030      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	4a27      	ldr	r2, [pc, #156]	; (800cff8 <USB_SetTurnaroundTime+0x124>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d906      	bls.n	800cf6c <USB_SetTurnaroundTime+0x98>
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	4a26      	ldr	r2, [pc, #152]	; (800cffc <USB_SetTurnaroundTime+0x128>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d802      	bhi.n	800cf6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf66:	230a      	movs	r3, #10
 800cf68:	617b      	str	r3, [r7, #20]
 800cf6a:	e025      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	4a23      	ldr	r2, [pc, #140]	; (800cffc <USB_SetTurnaroundTime+0x128>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d906      	bls.n	800cf82 <USB_SetTurnaroundTime+0xae>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	4a22      	ldr	r2, [pc, #136]	; (800d000 <USB_SetTurnaroundTime+0x12c>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d202      	bcs.n	800cf82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf7c:	2309      	movs	r3, #9
 800cf7e:	617b      	str	r3, [r7, #20]
 800cf80:	e01a      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	4a1e      	ldr	r2, [pc, #120]	; (800d000 <USB_SetTurnaroundTime+0x12c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d306      	bcc.n	800cf98 <USB_SetTurnaroundTime+0xc4>
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	4a1d      	ldr	r2, [pc, #116]	; (800d004 <USB_SetTurnaroundTime+0x130>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d802      	bhi.n	800cf98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf92:	2308      	movs	r3, #8
 800cf94:	617b      	str	r3, [r7, #20]
 800cf96:	e00f      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	4a1a      	ldr	r2, [pc, #104]	; (800d004 <USB_SetTurnaroundTime+0x130>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d906      	bls.n	800cfae <USB_SetTurnaroundTime+0xda>
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	4a19      	ldr	r2, [pc, #100]	; (800d008 <USB_SetTurnaroundTime+0x134>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d202      	bcs.n	800cfae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cfa8:	2307      	movs	r3, #7
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	e004      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cfae:	2306      	movs	r3, #6
 800cfb0:	617b      	str	r3, [r7, #20]
 800cfb2:	e001      	b.n	800cfb8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cfb4:	2309      	movs	r3, #9
 800cfb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	68da      	ldr	r2, [r3, #12]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	029b      	lsls	r3, r3, #10
 800cfcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cfd6:	2300      	movs	r3, #0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	371c      	adds	r7, #28
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	00d8acbf 	.word	0x00d8acbf
 800cfe8:	00e4e1c0 	.word	0x00e4e1c0
 800cfec:	00f42400 	.word	0x00f42400
 800cff0:	01067380 	.word	0x01067380
 800cff4:	011a499f 	.word	0x011a499f
 800cff8:	01312cff 	.word	0x01312cff
 800cffc:	014ca43f 	.word	0x014ca43f
 800d000:	016e3600 	.word	0x016e3600
 800d004:	01a6ab1f 	.word	0x01a6ab1f
 800d008:	01e84800 	.word	0x01e84800

0800d00c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	f043 0201 	orr.w	r2, r3, #1
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f023 0201 	bic.w	r2, r3, #1
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	460b      	mov	r3, r1
 800d05a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d06c:	78fb      	ldrb	r3, [r7, #3]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d115      	bne.n	800d09e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d07e:	2001      	movs	r0, #1
 800d080:	f7f8 f888 	bl	8005194 <HAL_Delay>
      ms++;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3301      	adds	r3, #1
 800d088:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f001 f985 	bl	800e39a <USB_GetMode>
 800d090:	4603      	mov	r3, r0
 800d092:	2b01      	cmp	r3, #1
 800d094:	d01e      	beq.n	800d0d4 <USB_SetCurrentMode+0x84>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b31      	cmp	r3, #49	; 0x31
 800d09a:	d9f0      	bls.n	800d07e <USB_SetCurrentMode+0x2e>
 800d09c:	e01a      	b.n	800d0d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d115      	bne.n	800d0d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0b0:	2001      	movs	r0, #1
 800d0b2:	f7f8 f86f 	bl	8005194 <HAL_Delay>
      ms++;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 f96c 	bl	800e39a <USB_GetMode>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d005      	beq.n	800d0d4 <USB_SetCurrentMode+0x84>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b31      	cmp	r3, #49	; 0x31
 800d0cc:	d9f0      	bls.n	800d0b0 <USB_SetCurrentMode+0x60>
 800d0ce:	e001      	b.n	800d0d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e005      	b.n	800d0e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b32      	cmp	r3, #50	; 0x32
 800d0d8:	d101      	bne.n	800d0de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e000      	b.n	800d0e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b086      	sub	sp, #24
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d102:	2300      	movs	r3, #0
 800d104:	613b      	str	r3, [r7, #16]
 800d106:	e009      	b.n	800d11c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	3340      	adds	r3, #64	; 0x40
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4413      	add	r3, r2
 800d112:	2200      	movs	r2, #0
 800d114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	3301      	adds	r3, #1
 800d11a:	613b      	str	r3, [r7, #16]
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	2b0e      	cmp	r3, #14
 800d120:	d9f2      	bls.n	800d108 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d124:	2b00      	cmp	r3, #0
 800d126:	d11c      	bne.n	800d162 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d136:	f043 0302 	orr.w	r3, r3, #2
 800d13a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d140:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	e005      	b.n	800d16e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d174:	461a      	mov	r2, r3
 800d176:	2300      	movs	r3, #0
 800d178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d180:	4619      	mov	r1, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d188:	461a      	mov	r2, r3
 800d18a:	680b      	ldr	r3, [r1, #0]
 800d18c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d18e:	2103      	movs	r1, #3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f959 	bl	800d448 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d196:	2110      	movs	r1, #16
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f8f1 	bl	800d380 <USB_FlushTxFifo>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 f91d 	bl	800d3e8 <USB_FlushRxFifo>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	2300      	movs	r3, #0
 800d1da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	613b      	str	r3, [r7, #16]
 800d1e0:	e043      	b.n	800d26a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	015a      	lsls	r2, r3, #5
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1f8:	d118      	bne.n	800d22c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10a      	bne.n	800d216 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20c:	461a      	mov	r2, r3
 800d20e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	e013      	b.n	800d23e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d222:	461a      	mov	r2, r3
 800d224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d228:	6013      	str	r3, [r2, #0]
 800d22a:	e008      	b.n	800d23e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	015a      	lsls	r2, r3, #5
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4413      	add	r3, r2
 800d234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d238:	461a      	mov	r2, r3
 800d23a:	2300      	movs	r3, #0
 800d23c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	015a      	lsls	r2, r3, #5
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	4413      	add	r3, r2
 800d246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d24a:	461a      	mov	r2, r3
 800d24c:	2300      	movs	r3, #0
 800d24e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	4413      	add	r3, r2
 800d258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d25c:	461a      	mov	r2, r3
 800d25e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	3301      	adds	r3, #1
 800d268:	613b      	str	r3, [r7, #16]
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d3b7      	bcc.n	800d1e2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d272:	2300      	movs	r3, #0
 800d274:	613b      	str	r3, [r7, #16]
 800d276:	e043      	b.n	800d300 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	015a      	lsls	r2, r3, #5
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d28a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d28e:	d118      	bne.n	800d2c2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10a      	bne.n	800d2ac <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	015a      	lsls	r2, r3, #5
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	4413      	add	r3, r2
 800d29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	e013      	b.n	800d2d4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	e008      	b.n	800d2d4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	015a      	lsls	r2, r3, #5
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	613b      	str	r3, [r7, #16]
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	429a      	cmp	r2, r3
 800d306:	d3b7      	bcc.n	800d278 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d31a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	f043 0210 	orr.w	r2, r3, #16
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	699a      	ldr	r2, [r3, #24]
 800d33a:	4b10      	ldr	r3, [pc, #64]	; (800d37c <USB_DevInit+0x294>)
 800d33c:	4313      	orrs	r3, r2
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d344:	2b00      	cmp	r3, #0
 800d346:	d005      	beq.n	800d354 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	f043 0208 	orr.w	r2, r3, #8
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d356:	2b01      	cmp	r3, #1
 800d358:	d107      	bne.n	800d36a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d362:	f043 0304 	orr.w	r3, r3, #4
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3718      	adds	r7, #24
 800d370:	46bd      	mov	sp, r7
 800d372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d376:	b004      	add	sp, #16
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	803c3800 	.word	0x803c3800

0800d380 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3301      	adds	r3, #1
 800d392:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	4a13      	ldr	r2, [pc, #76]	; (800d3e4 <USB_FlushTxFifo+0x64>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d901      	bls.n	800d3a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e01b      	b.n	800d3d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	daf2      	bge.n	800d38e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	019b      	lsls	r3, r3, #6
 800d3b0:	f043 0220 	orr.w	r2, r3, #32
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4a08      	ldr	r2, [pc, #32]	; (800d3e4 <USB_FlushTxFifo+0x64>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d901      	bls.n	800d3ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e006      	b.n	800d3d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b20      	cmp	r3, #32
 800d3d4:	d0f0      	beq.n	800d3b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	00030d40 	.word	0x00030d40

0800d3e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	4a11      	ldr	r2, [pc, #68]	; (800d444 <USB_FlushRxFifo+0x5c>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d901      	bls.n	800d406 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d402:	2303      	movs	r3, #3
 800d404:	e018      	b.n	800d438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	daf2      	bge.n	800d3f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2210      	movs	r2, #16
 800d416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	3301      	adds	r3, #1
 800d41c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4a08      	ldr	r2, [pc, #32]	; (800d444 <USB_FlushRxFifo+0x5c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d901      	bls.n	800d42a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e006      	b.n	800d438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	f003 0310 	and.w	r3, r3, #16
 800d432:	2b10      	cmp	r3, #16
 800d434:	d0f0      	beq.n	800d418 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	00030d40 	.word	0x00030d40

0800d448 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	68f9      	ldr	r1, [r7, #12]
 800d464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d468:	4313      	orrs	r3, r2
 800d46a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d47a:	b480      	push	{r7}
 800d47c:	b087      	sub	sp, #28
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f003 0306 	and.w	r3, r3, #6
 800d492:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b02      	cmp	r3, #2
 800d498:	d002      	beq.n	800d4a0 <USB_GetDevSpeed+0x26>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b06      	cmp	r3, #6
 800d49e:	d102      	bne.n	800d4a6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	75fb      	strb	r3, [r7, #23]
 800d4a4:	e001      	b.n	800d4aa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d4a6:	230f      	movs	r3, #15
 800d4a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	371c      	adds	r7, #28
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	785b      	ldrb	r3, [r3, #1]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d13a      	bne.n	800d54a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4da:	69da      	ldr	r2, [r3, #28]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	f003 030f 	and.w	r3, r3, #15
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	68f9      	ldr	r1, [r7, #12]
 800d4ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	015a      	lsls	r2, r3, #5
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d155      	bne.n	800d5b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	015a      	lsls	r2, r3, #5
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	4413      	add	r3, r2
 800d514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	791b      	ldrb	r3, [r3, #4]
 800d526:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d528:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	059b      	lsls	r3, r3, #22
 800d52e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d530:	4313      	orrs	r3, r2
 800d532:	68ba      	ldr	r2, [r7, #8]
 800d534:	0151      	lsls	r1, r2, #5
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	440a      	add	r2, r1
 800d53a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d53e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	e036      	b.n	800d5b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d550:	69da      	ldr	r2, [r3, #28]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	f003 030f 	and.w	r3, r3, #15
 800d55a:	2101      	movs	r1, #1
 800d55c:	fa01 f303 	lsl.w	r3, r1, r3
 800d560:	041b      	lsls	r3, r3, #16
 800d562:	68f9      	ldr	r1, [r7, #12]
 800d564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d568:	4313      	orrs	r3, r2
 800d56a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d11a      	bne.n	800d5b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	015a      	lsls	r2, r3, #5
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	4413      	add	r3, r2
 800d58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	791b      	ldrb	r3, [r3, #4]
 800d59c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d59e:	430b      	orrs	r3, r1
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	0151      	lsls	r1, r2, #5
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	440a      	add	r2, r1
 800d5aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3714      	adds	r7, #20
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
	...

0800d5c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	785b      	ldrb	r3, [r3, #1]
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d161      	bne.n	800d6a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5fa:	d11f      	bne.n	800d63c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	0151      	lsls	r1, r2, #5
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	440a      	add	r2, r1
 800d612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d61a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	0151      	lsls	r1, r2, #5
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	440a      	add	r2, r1
 800d632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d63a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f003 030f 	and.w	r3, r3, #15
 800d64c:	2101      	movs	r1, #1
 800d64e:	fa01 f303 	lsl.w	r3, r1, r3
 800d652:	b29b      	uxth	r3, r3
 800d654:	43db      	mvns	r3, r3
 800d656:	68f9      	ldr	r1, [r7, #12]
 800d658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d65c:	4013      	ands	r3, r2
 800d65e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d666:	69da      	ldr	r2, [r3, #28]
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	f003 030f 	and.w	r3, r3, #15
 800d670:	2101      	movs	r1, #1
 800d672:	fa01 f303 	lsl.w	r3, r1, r3
 800d676:	b29b      	uxth	r3, r3
 800d678:	43db      	mvns	r3, r3
 800d67a:	68f9      	ldr	r1, [r7, #12]
 800d67c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d680:	4013      	ands	r3, r2
 800d682:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	015a      	lsls	r2, r3, #5
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	4413      	add	r3, r2
 800d68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	0159      	lsls	r1, r3, #5
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	440b      	add	r3, r1
 800d69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4b35      	ldr	r3, [pc, #212]	; (800d778 <USB_DeactivateEndpoint+0x1b0>)
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	600b      	str	r3, [r1, #0]
 800d6a6:	e060      	b.n	800d76a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	015a      	lsls	r2, r3, #5
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6be:	d11f      	bne.n	800d700 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	015a      	lsls	r2, r3, #5
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	0151      	lsls	r1, r2, #5
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	440a      	add	r2, r1
 800d6d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d6de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	015a      	lsls	r2, r3, #5
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	0151      	lsls	r1, r2, #5
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	440a      	add	r2, r1
 800d6f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	f003 030f 	and.w	r3, r3, #15
 800d710:	2101      	movs	r1, #1
 800d712:	fa01 f303 	lsl.w	r3, r1, r3
 800d716:	041b      	lsls	r3, r3, #16
 800d718:	43db      	mvns	r3, r3
 800d71a:	68f9      	ldr	r1, [r7, #12]
 800d71c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d720:	4013      	ands	r3, r2
 800d722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d72a:	69da      	ldr	r2, [r3, #28]
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	f003 030f 	and.w	r3, r3, #15
 800d734:	2101      	movs	r1, #1
 800d736:	fa01 f303 	lsl.w	r3, r1, r3
 800d73a:	041b      	lsls	r3, r3, #16
 800d73c:	43db      	mvns	r3, r3
 800d73e:	68f9      	ldr	r1, [r7, #12]
 800d740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d744:	4013      	ands	r3, r2
 800d746:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	015a      	lsls	r2, r3, #5
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	0159      	lsls	r1, r3, #5
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	440b      	add	r3, r1
 800d75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d762:	4619      	mov	r1, r3
 800d764:	4b05      	ldr	r3, [pc, #20]	; (800d77c <USB_DeactivateEndpoint+0x1b4>)
 800d766:	4013      	ands	r3, r2
 800d768:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3714      	adds	r7, #20
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr
 800d778:	ec337800 	.word	0xec337800
 800d77c:	eff37800 	.word	0xeff37800

0800d780 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	785b      	ldrb	r3, [r3, #1]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	f040 810a 	bne.w	800d9b2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d132      	bne.n	800d80c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	0151      	lsls	r1, r2, #5
 800d7b8:	697a      	ldr	r2, [r7, #20]
 800d7ba:	440a      	add	r2, r1
 800d7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	015a      	lsls	r2, r3, #5
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	0151      	lsls	r1, r2, #5
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	440a      	add	r2, r1
 800d7e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	0151      	lsls	r1, r2, #5
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	440a      	add	r2, r1
 800d800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d804:	0cdb      	lsrs	r3, r3, #19
 800d806:	04db      	lsls	r3, r3, #19
 800d808:	6113      	str	r3, [r2, #16]
 800d80a:	e074      	b.n	800d8f6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	0151      	lsls	r1, r2, #5
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	440a      	add	r2, r1
 800d822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d826:	0cdb      	lsrs	r3, r3, #19
 800d828:	04db      	lsls	r3, r3, #19
 800d82a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	015a      	lsls	r2, r3, #5
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	4413      	add	r3, r2
 800d834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	0151      	lsls	r1, r2, #5
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	440a      	add	r2, r1
 800d842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d846:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d84a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d84e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	015a      	lsls	r2, r3, #5
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	4413      	add	r3, r2
 800d858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	6999      	ldr	r1, [r3, #24]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	440b      	add	r3, r1
 800d868:	1e59      	subs	r1, r3, #1
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d872:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d874:	4b9e      	ldr	r3, [pc, #632]	; (800daf0 <USB_EPStartXfer+0x370>)
 800d876:	400b      	ands	r3, r1
 800d878:	6939      	ldr	r1, [r7, #16]
 800d87a:	0148      	lsls	r0, r1, #5
 800d87c:	6979      	ldr	r1, [r7, #20]
 800d87e:	4401      	add	r1, r0
 800d880:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d884:	4313      	orrs	r3, r2
 800d886:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	015a      	lsls	r2, r3, #5
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	4413      	add	r3, r2
 800d890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d894:	691a      	ldr	r2, [r3, #16]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d89e:	6939      	ldr	r1, [r7, #16]
 800d8a0:	0148      	lsls	r0, r1, #5
 800d8a2:	6979      	ldr	r1, [r7, #20]
 800d8a4:	4401      	add	r1, r0
 800d8a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	791b      	ldrb	r3, [r3, #4]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d11f      	bne.n	800d8f6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	015a      	lsls	r2, r3, #5
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	0151      	lsls	r1, r2, #5
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	440a      	add	r2, r1
 800d8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d8d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	0151      	lsls	r1, r2, #5
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	440a      	add	r2, r1
 800d8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8f4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	0151      	lsls	r1, r2, #5
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	440a      	add	r2, r1
 800d90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d914:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	791b      	ldrb	r3, [r3, #4]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d015      	beq.n	800d94a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	f000 8106 	beq.w	800db34 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	f003 030f 	and.w	r3, r3, #15
 800d938:	2101      	movs	r1, #1
 800d93a:	fa01 f303 	lsl.w	r3, r1, r3
 800d93e:	6979      	ldr	r1, [r7, #20]
 800d940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d944:	4313      	orrs	r3, r2
 800d946:	634b      	str	r3, [r1, #52]	; 0x34
 800d948:	e0f4      	b.n	800db34 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d956:	2b00      	cmp	r3, #0
 800d958:	d110      	bne.n	800d97c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	015a      	lsls	r2, r3, #5
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	4413      	add	r3, r2
 800d962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	0151      	lsls	r1, r2, #5
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	440a      	add	r2, r1
 800d970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	e00f      	b.n	800d99c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	015a      	lsls	r2, r3, #5
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	4413      	add	r3, r2
 800d984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	0151      	lsls	r1, r2, #5
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	440a      	add	r2, r1
 800d992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d99a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	6919      	ldr	r1, [r3, #16]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	781a      	ldrb	r2, [r3, #0]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa94 	bl	800ded8 <USB_WritePacket>
 800d9b0:	e0c0      	b.n	800db34 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	0151      	lsls	r1, r2, #5
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	440a      	add	r2, r1
 800d9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9cc:	0cdb      	lsrs	r3, r3, #19
 800d9ce:	04db      	lsls	r3, r3, #19
 800d9d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	015a      	lsls	r2, r3, #5
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	693a      	ldr	r2, [r7, #16]
 800d9e2:	0151      	lsls	r1, r2, #5
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	440a      	add	r2, r1
 800d9e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d9f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d123      	bne.n	800da46 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0a:	691a      	ldr	r2, [r3, #16]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da14:	6939      	ldr	r1, [r7, #16]
 800da16:	0148      	lsls	r0, r1, #5
 800da18:	6979      	ldr	r1, [r7, #20]
 800da1a:	4401      	add	r1, r0
 800da1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da20:	4313      	orrs	r3, r2
 800da22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	015a      	lsls	r2, r3, #5
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	4413      	add	r3, r2
 800da2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	0151      	lsls	r1, r2, #5
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	440a      	add	r2, r1
 800da3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da42:	6113      	str	r3, [r2, #16]
 800da44:	e037      	b.n	800dab6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	699a      	ldr	r2, [r3, #24]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	fbb2 f3f3 	udiv	r3, r2, r3
 800da5a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	89fa      	ldrh	r2, [r7, #14]
 800da62:	fb03 f202 	mul.w	r2, r3, r2
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	4413      	add	r3, r2
 800da72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	89fb      	ldrh	r3, [r7, #14]
 800da7a:	04d9      	lsls	r1, r3, #19
 800da7c:	4b1c      	ldr	r3, [pc, #112]	; (800daf0 <USB_EPStartXfer+0x370>)
 800da7e:	400b      	ands	r3, r1
 800da80:	6939      	ldr	r1, [r7, #16]
 800da82:	0148      	lsls	r0, r1, #5
 800da84:	6979      	ldr	r1, [r7, #20]
 800da86:	4401      	add	r1, r0
 800da88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da8c:	4313      	orrs	r3, r2
 800da8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	015a      	lsls	r2, r3, #5
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	4413      	add	r3, r2
 800da98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da9c:	691a      	ldr	r2, [r3, #16]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800daa6:	6939      	ldr	r1, [r7, #16]
 800daa8:	0148      	lsls	r0, r1, #5
 800daaa:	6979      	ldr	r1, [r7, #20]
 800daac:	4401      	add	r1, r0
 800daae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dab2:	4313      	orrs	r3, r2
 800dab4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	791b      	ldrb	r3, [r3, #4]
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d12a      	bne.n	800db14 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d112      	bne.n	800daf4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	015a      	lsls	r2, r3, #5
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	4413      	add	r3, r2
 800dad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	0151      	lsls	r1, r2, #5
 800dae0:	697a      	ldr	r2, [r7, #20]
 800dae2:	440a      	add	r2, r1
 800dae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800daec:	6013      	str	r3, [r2, #0]
 800daee:	e011      	b.n	800db14 <USB_EPStartXfer+0x394>
 800daf0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	0151      	lsls	r1, r2, #5
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	440a      	add	r2, r1
 800db0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	015a      	lsls	r2, r3, #5
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	693a      	ldr	r2, [r7, #16]
 800db24:	0151      	lsls	r1, r2, #5
 800db26:	697a      	ldr	r2, [r7, #20]
 800db28:	440a      	add	r2, r1
 800db2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop

0800db40 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	785b      	ldrb	r3, [r3, #1]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	f040 80ab 	bne.w	800dcb4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d132      	bne.n	800dbcc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	015a      	lsls	r2, r3, #5
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	4413      	add	r3, r2
 800db6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	0151      	lsls	r1, r2, #5
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	440a      	add	r2, r1
 800db7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	015a      	lsls	r2, r3, #5
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4413      	add	r3, r2
 800db92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	0151      	lsls	r1, r2, #5
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	440a      	add	r2, r1
 800dba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	015a      	lsls	r2, r3, #5
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	0151      	lsls	r1, r2, #5
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	440a      	add	r2, r1
 800dbc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbc4:	0cdb      	lsrs	r3, r3, #19
 800dbc6:	04db      	lsls	r3, r3, #19
 800dbc8:	6113      	str	r3, [r2, #16]
 800dbca:	e04e      	b.n	800dc6a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	015a      	lsls	r2, r3, #5
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	0151      	lsls	r1, r2, #5
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	440a      	add	r2, r1
 800dbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbe6:	0cdb      	lsrs	r3, r3, #19
 800dbe8:	04db      	lsls	r3, r3, #19
 800dbea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	0151      	lsls	r1, r2, #5
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	440a      	add	r2, r1
 800dc02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	699a      	ldr	r2, [r3, #24]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d903      	bls.n	800dc24 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	68da      	ldr	r2, [r3, #12]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	0151      	lsls	r1, r2, #5
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	440a      	add	r2, r1
 800dc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	015a      	lsls	r2, r3, #5
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc50:	691a      	ldr	r2, [r3, #16]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	0148      	lsls	r0, r1, #5
 800dc5e:	68f9      	ldr	r1, [r7, #12]
 800dc60:	4401      	add	r1, r0
 800dc62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc66:	4313      	orrs	r3, r2
 800dc68:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	0151      	lsls	r1, r2, #5
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	440a      	add	r2, r1
 800dc80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc88:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	699b      	ldr	r3, [r3, #24]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d071      	beq.n	800dd76 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	f003 030f 	and.w	r3, r3, #15
 800dca2:	2101      	movs	r1, #1
 800dca4:	fa01 f303 	lsl.w	r3, r1, r3
 800dca8:	68f9      	ldr	r1, [r7, #12]
 800dcaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	634b      	str	r3, [r1, #52]	; 0x34
 800dcb2:	e060      	b.n	800dd76 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	0151      	lsls	r1, r2, #5
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	440a      	add	r2, r1
 800dcca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcce:	0cdb      	lsrs	r3, r3, #19
 800dcd0:	04db      	lsls	r3, r3, #19
 800dcd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	0151      	lsls	r1, r2, #5
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	440a      	add	r2, r1
 800dcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcf6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	68da      	ldr	r2, [r3, #12]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	68da      	ldr	r2, [r3, #12]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	015a      	lsls	r2, r3, #5
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	4413      	add	r3, r2
 800dd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	0151      	lsls	r1, r2, #5
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	440a      	add	r2, r1
 800dd26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	69db      	ldr	r3, [r3, #28]
 800dd42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd46:	68b9      	ldr	r1, [r7, #8]
 800dd48:	0148      	lsls	r0, r1, #5
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	4401      	add	r1, r0
 800dd4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd52:	4313      	orrs	r3, r2
 800dd54:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	015a      	lsls	r2, r3, #5
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	0151      	lsls	r1, r2, #5
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	440a      	add	r2, r1
 800dd6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	785b      	ldrb	r3, [r3, #1]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d14a      	bne.n	800de38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddba:	f040 8086 	bne.w	800deca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	7812      	ldrb	r2, [r2, #0]
 800ddd2:	0151      	lsls	r1, r2, #5
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	440a      	add	r2, r1
 800ddd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dde0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	7812      	ldrb	r2, [r2, #0]
 800ddf6:	0151      	lsls	r1, r2, #5
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3301      	adds	r3, #1
 800de0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800de12:	4293      	cmp	r3, r2
 800de14:	d902      	bls.n	800de1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	75fb      	strb	r3, [r7, #23]
          break;
 800de1a:	e056      	b.n	800deca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	4413      	add	r3, r2
 800de26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de34:	d0e7      	beq.n	800de06 <USB_EPStopXfer+0x82>
 800de36:	e048      	b.n	800deca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	015a      	lsls	r2, r3, #5
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	4413      	add	r3, r2
 800de42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de50:	d13b      	bne.n	800deca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	015a      	lsls	r2, r3, #5
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	7812      	ldrb	r2, [r2, #0]
 800de66:	0151      	lsls	r1, r2, #5
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	440a      	add	r2, r1
 800de6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	7812      	ldrb	r2, [r2, #0]
 800de8a:	0151      	lsls	r1, r2, #5
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	440a      	add	r2, r1
 800de90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3301      	adds	r3, #1
 800de9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f242 7210 	movw	r2, #10000	; 0x2710
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d902      	bls.n	800deb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	75fb      	strb	r3, [r7, #23]
          break;
 800deae:	e00c      	b.n	800deca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	015a      	lsls	r2, r3, #5
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	4413      	add	r3, r2
 800deba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dec8:	d0e7      	beq.n	800de9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800deca:	7dfb      	ldrb	r3, [r7, #23]
}
 800decc:	4618      	mov	r0, r3
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ded8:	b480      	push	{r7}
 800deda:	b089      	sub	sp, #36	; 0x24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	4611      	mov	r1, r2
 800dee4:	461a      	mov	r2, r3
 800dee6:	460b      	mov	r3, r1
 800dee8:	71fb      	strb	r3, [r7, #7]
 800deea:	4613      	mov	r3, r2
 800deec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800def6:	88bb      	ldrh	r3, [r7, #4]
 800def8:	3303      	adds	r3, #3
 800defa:	089b      	lsrs	r3, r3, #2
 800defc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800defe:	2300      	movs	r3, #0
 800df00:	61bb      	str	r3, [r7, #24]
 800df02:	e018      	b.n	800df36 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	031a      	lsls	r2, r3, #12
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df10:	461a      	mov	r2, r3
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6013      	str	r3, [r2, #0]
    pSrc++;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	3301      	adds	r3, #1
 800df1c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	3301      	adds	r3, #1
 800df22:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	3301      	adds	r3, #1
 800df28:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	3301      	adds	r3, #1
 800df2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	3301      	adds	r3, #1
 800df34:	61bb      	str	r3, [r7, #24]
 800df36:	69ba      	ldr	r2, [r7, #24]
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d3e2      	bcc.n	800df04 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3724      	adds	r7, #36	; 0x24
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b08b      	sub	sp, #44	; 0x2c
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df62:	88fb      	ldrh	r3, [r7, #6]
 800df64:	089b      	lsrs	r3, r3, #2
 800df66:	b29b      	uxth	r3, r3
 800df68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df6a:	88fb      	ldrh	r3, [r7, #6]
 800df6c:	f003 0303 	and.w	r3, r3, #3
 800df70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df72:	2300      	movs	r3, #0
 800df74:	623b      	str	r3, [r7, #32]
 800df76:	e014      	b.n	800dfa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	601a      	str	r2, [r3, #0]
    pDest++;
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	3301      	adds	r3, #1
 800df88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	3301      	adds	r3, #1
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	3301      	adds	r3, #1
 800df94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df98:	3301      	adds	r3, #1
 800df9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	623b      	str	r3, [r7, #32]
 800dfa2:	6a3a      	ldr	r2, [r7, #32]
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d3e6      	bcc.n	800df78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dfaa:	8bfb      	ldrh	r3, [r7, #30]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01e      	beq.n	800dfee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dfb4:	69bb      	ldr	r3, [r7, #24]
 800dfb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f107 0310 	add.w	r3, r7, #16
 800dfc0:	6812      	ldr	r2, [r2, #0]
 800dfc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd0:	b2da      	uxtb	r2, r3
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	701a      	strb	r2, [r3, #0]
      i++;
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	623b      	str	r3, [r7, #32]
      pDest++;
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	3301      	adds	r3, #1
 800dfe0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dfe2:	8bfb      	ldrh	r3, [r7, #30]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dfe8:	8bfb      	ldrh	r3, [r7, #30]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1ea      	bne.n	800dfc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	372c      	adds	r7, #44	; 0x2c
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	785b      	ldrb	r3, [r3, #1]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d12c      	bne.n	800e072 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	015a      	lsls	r2, r3, #5
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	4413      	add	r3, r2
 800e020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	db12      	blt.n	800e050 <USB_EPSetStall+0x54>
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d00f      	beq.n	800e050 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	015a      	lsls	r2, r3, #5
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	0151      	lsls	r1, r2, #5
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	440a      	add	r2, r1
 800e046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e04a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e04e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	015a      	lsls	r2, r3, #5
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	4413      	add	r3, r2
 800e058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	0151      	lsls	r1, r2, #5
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	440a      	add	r2, r1
 800e066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e06a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	e02b      	b.n	800e0ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	db12      	blt.n	800e0aa <USB_EPSetStall+0xae>
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00f      	beq.n	800e0aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	015a      	lsls	r2, r3, #5
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	4413      	add	r3, r2
 800e092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	0151      	lsls	r1, r2, #5
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	440a      	add	r2, r1
 800e0a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e0a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	0151      	lsls	r1, r2, #5
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	440a      	add	r2, r1
 800e0c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3714      	adds	r7, #20
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	785b      	ldrb	r3, [r3, #1]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d128      	bne.n	800e146 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	0151      	lsls	r1, r2, #5
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	440a      	add	r2, r1
 800e10a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e10e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e112:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	791b      	ldrb	r3, [r3, #4]
 800e118:	2b03      	cmp	r3, #3
 800e11a:	d003      	beq.n	800e124 <USB_EPClearStall+0x4c>
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	791b      	ldrb	r3, [r3, #4]
 800e120:	2b02      	cmp	r3, #2
 800e122:	d138      	bne.n	800e196 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	0151      	lsls	r1, r2, #5
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	440a      	add	r2, r1
 800e13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e13e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e142:	6013      	str	r3, [r2, #0]
 800e144:	e027      	b.n	800e196 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	015a      	lsls	r2, r3, #5
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	4413      	add	r3, r2
 800e14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	0151      	lsls	r1, r2, #5
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	440a      	add	r2, r1
 800e15c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e164:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	791b      	ldrb	r3, [r3, #4]
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	d003      	beq.n	800e176 <USB_EPClearStall+0x9e>
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	791b      	ldrb	r3, [r3, #4]
 800e172:	2b02      	cmp	r3, #2
 800e174:	d10f      	bne.n	800e196 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	0151      	lsls	r1, r2, #5
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	440a      	add	r2, r1
 800e18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e194:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e1c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	011b      	lsls	r3, r3, #4
 800e1d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e1d8:	68f9      	ldr	r1, [r7, #12]
 800e1da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3714      	adds	r7, #20
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e20a:	f023 0303 	bic.w	r3, r3, #3
 800e20e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e21e:	f023 0302 	bic.w	r3, r3, #2
 800e222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3714      	adds	r7, #20
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e232:	b480      	push	{r7}
 800e234:	b085      	sub	sp, #20
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e24c:	f023 0303 	bic.w	r3, r3, #3
 800e250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e260:	f043 0302 	orr.w	r3, r3, #2
 800e264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	4013      	ands	r3, r2
 800e28a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e28c:	68fb      	ldr	r3, [r7, #12]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b085      	sub	sp, #20
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	0c1b      	lsrs	r3, r3, #16
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b085      	sub	sp, #20
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ea:	69db      	ldr	r3, [r3, #28]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	b29b      	uxth	r3, r3
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e302:	b480      	push	{r7}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	460b      	mov	r3, r1
 800e30c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e312:	78fb      	ldrb	r3, [r7, #3]
 800e314:	015a      	lsls	r2, r3, #5
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	4413      	add	r3, r2
 800e31a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e328:	695b      	ldr	r3, [r3, #20]
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	4013      	ands	r3, r2
 800e32e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e330:	68bb      	ldr	r3, [r7, #8]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e33e:	b480      	push	{r7}
 800e340:	b087      	sub	sp, #28
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e360:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e362:	78fb      	ldrb	r3, [r7, #3]
 800e364:	f003 030f 	and.w	r3, r3, #15
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	fa22 f303 	lsr.w	r3, r2, r3
 800e36e:	01db      	lsls	r3, r3, #7
 800e370:	b2db      	uxtb	r3, r3
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	4313      	orrs	r3, r2
 800e376:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e378:	78fb      	ldrb	r3, [r7, #3]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	4013      	ands	r3, r2
 800e38a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e38c:	68bb      	ldr	r3, [r7, #8]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr

0800e39a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b083      	sub	sp, #12
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	695b      	ldr	r3, [r3, #20]
 800e3a6:	f003 0301 	and.w	r3, r3, #1
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e3b6:	b480      	push	{r7}
 800e3b8:	b085      	sub	sp, #20
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e3d4:	f023 0307 	bic.w	r3, r3, #7
 800e3d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	333c      	adds	r3, #60	; 0x3c
 800e40e:	3304      	adds	r3, #4
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	4a1c      	ldr	r2, [pc, #112]	; (800e488 <USB_EP0_OutStart+0x8c>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d90a      	bls.n	800e432 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e42c:	d101      	bne.n	800e432 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	e024      	b.n	800e47c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e438:	461a      	mov	r2, r3
 800e43a:	2300      	movs	r3, #0
 800e43c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e44c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e460:	f043 0318 	orr.w	r3, r3, #24
 800e464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e474:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e478:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	4f54300a 	.word	0x4f54300a

0800e48c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e494:	2300      	movs	r3, #0
 800e496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3301      	adds	r3, #1
 800e49c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	4a13      	ldr	r2, [pc, #76]	; (800e4f0 <USB_CoreReset+0x64>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d901      	bls.n	800e4aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	e01b      	b.n	800e4e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	daf2      	bge.n	800e498 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	f043 0201 	orr.w	r2, r3, #1
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	4a09      	ldr	r2, [pc, #36]	; (800e4f0 <USB_CoreReset+0x64>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d901      	bls.n	800e4d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	e006      	b.n	800e4e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	f003 0301 	and.w	r3, r3, #1
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d0f0      	beq.n	800e4c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	00030d40 	.word	0x00030d40

0800e4f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e500:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e504:	f005 f8c2 	bl	801368c <USBD_static_malloc>
 800e508:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d105      	bne.n	800e51c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e518:	2302      	movs	r3, #2
 800e51a:	e066      	b.n	800e5ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	7c1b      	ldrb	r3, [r3, #16]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d119      	bne.n	800e560 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e52c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e530:	2202      	movs	r2, #2
 800e532:	2181      	movs	r1, #129	; 0x81
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f004 fe95 	bl	8013264 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e540:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e544:	2202      	movs	r2, #2
 800e546:	2101      	movs	r1, #1
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f004 fe8b 	bl	8013264 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2210      	movs	r2, #16
 800e55a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e55e:	e016      	b.n	800e58e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	2202      	movs	r2, #2
 800e564:	2181      	movs	r1, #129	; 0x81
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f004 fe7c 	bl	8013264 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e572:	2340      	movs	r3, #64	; 0x40
 800e574:	2202      	movs	r2, #2
 800e576:	2101      	movs	r1, #1
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f004 fe73 	bl	8013264 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2201      	movs	r2, #1
 800e582:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2210      	movs	r2, #16
 800e58a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e58e:	2308      	movs	r3, #8
 800e590:	2203      	movs	r2, #3
 800e592:	2182      	movs	r1, #130	; 0x82
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f004 fe65 	bl	8013264 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	7c1b      	ldrb	r3, [r3, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d109      	bne.n	800e5d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f004 ffc1 	bl	8013558 <USBD_LL_PrepareReceive>
 800e5d6:	e007      	b.n	800e5e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5de:	2340      	movs	r3, #64	; 0x40
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f004 ffb8 	bl	8013558 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e5fe:	2181      	movs	r1, #129	; 0x81
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f004 fe6d 	bl	80132e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e60c:	2101      	movs	r1, #1
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f004 fe66 	bl	80132e0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e61c:	2182      	movs	r1, #130	; 0x82
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f004 fe5e 	bl	80132e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00e      	beq.n	800e65c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e64e:	4618      	mov	r0, r3
 800e650:	f005 f82a 	bl	80136a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
	...

0800e668 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e678:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e67a:	2300      	movs	r3, #0
 800e67c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e67e:	2300      	movs	r3, #0
 800e680:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e682:	2300      	movs	r3, #0
 800e684:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e0af      	b.n	800e7f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d03f      	beq.n	800e71c <USBD_CDC_Setup+0xb4>
 800e69c:	2b20      	cmp	r3, #32
 800e69e:	f040 809f 	bne.w	800e7e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	88db      	ldrh	r3, [r3, #6]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d02e      	beq.n	800e708 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	b25b      	sxtb	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	da16      	bge.n	800e6e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e6c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	88d2      	ldrh	r2, [r2, #6]
 800e6c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	88db      	ldrh	r3, [r3, #6]
 800e6cc:	2b07      	cmp	r3, #7
 800e6ce:	bf28      	it	cs
 800e6d0:	2307      	movcs	r3, #7
 800e6d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	89fa      	ldrh	r2, [r7, #14]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f001 fb43 	bl	800fd66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e6e0:	e085      	b.n	800e7ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	785a      	ldrb	r2, [r3, #1]
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	88db      	ldrh	r3, [r3, #6]
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e6f8:	6939      	ldr	r1, [r7, #16]
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	88db      	ldrh	r3, [r3, #6]
 800e6fe:	461a      	mov	r2, r3
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f001 fb5c 	bl	800fdbe <USBD_CtlPrepareRx>
      break;
 800e706:	e072      	b.n	800e7ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	7850      	ldrb	r0, [r2, #1]
 800e714:	2200      	movs	r2, #0
 800e716:	6839      	ldr	r1, [r7, #0]
 800e718:	4798      	blx	r3
      break;
 800e71a:	e068      	b.n	800e7ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	785b      	ldrb	r3, [r3, #1]
 800e720:	2b0b      	cmp	r3, #11
 800e722:	d852      	bhi.n	800e7ca <USBD_CDC_Setup+0x162>
 800e724:	a201      	add	r2, pc, #4	; (adr r2, 800e72c <USBD_CDC_Setup+0xc4>)
 800e726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72a:	bf00      	nop
 800e72c:	0800e75d 	.word	0x0800e75d
 800e730:	0800e7d9 	.word	0x0800e7d9
 800e734:	0800e7cb 	.word	0x0800e7cb
 800e738:	0800e7cb 	.word	0x0800e7cb
 800e73c:	0800e7cb 	.word	0x0800e7cb
 800e740:	0800e7cb 	.word	0x0800e7cb
 800e744:	0800e7cb 	.word	0x0800e7cb
 800e748:	0800e7cb 	.word	0x0800e7cb
 800e74c:	0800e7cb 	.word	0x0800e7cb
 800e750:	0800e7cb 	.word	0x0800e7cb
 800e754:	0800e787 	.word	0x0800e787
 800e758:	0800e7b1 	.word	0x0800e7b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b03      	cmp	r3, #3
 800e766:	d107      	bne.n	800e778 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e768:	f107 030a 	add.w	r3, r7, #10
 800e76c:	2202      	movs	r2, #2
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f001 faf8 	bl	800fd66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e776:	e032      	b.n	800e7de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f001 fa82 	bl	800fc84 <USBD_CtlError>
            ret = USBD_FAIL;
 800e780:	2303      	movs	r3, #3
 800e782:	75fb      	strb	r3, [r7, #23]
          break;
 800e784:	e02b      	b.n	800e7de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b03      	cmp	r3, #3
 800e790:	d107      	bne.n	800e7a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e792:	f107 030d 	add.w	r3, r7, #13
 800e796:	2201      	movs	r2, #1
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f001 fae3 	bl	800fd66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7a0:	e01d      	b.n	800e7de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f001 fa6d 	bl	800fc84 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e7ae:	e016      	b.n	800e7de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b03      	cmp	r3, #3
 800e7ba:	d00f      	beq.n	800e7dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f001 fa60 	bl	800fc84 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7c4:	2303      	movs	r3, #3
 800e7c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e7c8:	e008      	b.n	800e7dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f001 fa59 	bl	800fc84 <USBD_CtlError>
          ret = USBD_FAIL;
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e7d6:	e002      	b.n	800e7de <USBD_CDC_Setup+0x176>
          break;
 800e7d8:	bf00      	nop
 800e7da:	e008      	b.n	800e7ee <USBD_CDC_Setup+0x186>
          break;
 800e7dc:	bf00      	nop
      }
      break;
 800e7de:	e006      	b.n	800e7ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 fa4e 	bl	800fc84 <USBD_CtlError>
      ret = USBD_FAIL;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e7ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800e7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	460b      	mov	r3, r1
 800e802:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e80a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e812:	2b00      	cmp	r3, #0
 800e814:	d101      	bne.n	800e81a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e816:	2303      	movs	r3, #3
 800e818:	e04f      	b.n	800e8ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e820:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	6879      	ldr	r1, [r7, #4]
 800e826:	4613      	mov	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	440b      	add	r3, r1
 800e830:	3318      	adds	r3, #24
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d029      	beq.n	800e88c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e838:	78fa      	ldrb	r2, [r7, #3]
 800e83a:	6879      	ldr	r1, [r7, #4]
 800e83c:	4613      	mov	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	3318      	adds	r3, #24
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	78f9      	ldrb	r1, [r7, #3]
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	460b      	mov	r3, r1
 800e850:	00db      	lsls	r3, r3, #3
 800e852:	440b      	add	r3, r1
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4403      	add	r3, r0
 800e858:	3348      	adds	r3, #72	; 0x48
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e860:	fb01 f303 	mul.w	r3, r1, r3
 800e864:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e866:	2b00      	cmp	r3, #0
 800e868:	d110      	bne.n	800e88c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e86a:	78fa      	ldrb	r2, [r7, #3]
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	4613      	mov	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4413      	add	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	440b      	add	r3, r1
 800e878:	3318      	adds	r3, #24
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e87e:	78f9      	ldrb	r1, [r7, #3]
 800e880:	2300      	movs	r3, #0
 800e882:	2200      	movs	r2, #0
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f004 fe2f 	bl	80134e8 <USBD_LL_Transmit>
 800e88a:	e015      	b.n	800e8b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	2200      	movs	r2, #0
 800e890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00b      	beq.n	800e8b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e8b4:	78fa      	ldrb	r2, [r7, #3]
 800e8b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b084      	sub	sp, #16
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d101      	bne.n	800e8e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	e015      	b.n	800e910 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e8e4:	78fb      	ldrb	r3, [r7, #3]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f004 fe6d 	bl	80135c8 <USBD_LL_GetRxDataSize>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e90a:	4611      	mov	r1, r2
 800e90c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e926:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e92e:	2303      	movs	r3, #3
 800e930:	e01b      	b.n	800e96a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d015      	beq.n	800e968 <USBD_CDC_EP0_RxReady+0x50>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e942:	2bff      	cmp	r3, #255	; 0xff
 800e944:	d010      	beq.n	800e968 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e954:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e95c:	b292      	uxth	r2, r2
 800e95e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	22ff      	movs	r2, #255	; 0xff
 800e964:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
	...

0800e974 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2243      	movs	r2, #67	; 0x43
 800e980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e982:	4b03      	ldr	r3, [pc, #12]	; (800e990 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e984:	4618      	mov	r0, r3
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	200002b8 	.word	0x200002b8

0800e994 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2243      	movs	r2, #67	; 0x43
 800e9a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e9a2:	4b03      	ldr	r3, [pc, #12]	; (800e9b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	20000274 	.word	0x20000274

0800e9b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2243      	movs	r2, #67	; 0x43
 800e9c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e9c2:	4b03      	ldr	r3, [pc, #12]	; (800e9d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	200002fc 	.word	0x200002fc

0800e9d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	220a      	movs	r2, #10
 800e9e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e9e2:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	370c      	adds	r7, #12
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	20000230 	.word	0x20000230

0800e9f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ea04:	2303      	movs	r3, #3
 800ea06:	e004      	b.n	800ea12 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b087      	sub	sp, #28
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	60f8      	str	r0, [r7, #12]
 800ea26:	60b9      	str	r1, [r7, #8]
 800ea28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea30:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e008      	b.n	800ea4e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	371c      	adds	r7, #28
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea5a:	b480      	push	{r7}
 800ea5c:	b085      	sub	sp, #20
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
 800ea62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ea72:	2303      	movs	r3, #3
 800ea74:	e004      	b.n	800ea80 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d101      	bne.n	800eaae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	e01a      	b.n	800eae4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d114      	bne.n	800eae2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ead6:	2181      	movs	r1, #129	; 0x81
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f004 fd05 	bl	80134e8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eafa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d101      	bne.n	800eb0a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eb06:	2303      	movs	r3, #3
 800eb08:	e016      	b.n	800eb38 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	7c1b      	ldrb	r3, [r3, #16]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d109      	bne.n	800eb26 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f004 fd1a 	bl	8013558 <USBD_LL_PrepareReceive>
 800eb24:	e007      	b.n	800eb36 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb2c:	2340      	movs	r3, #64	; 0x40
 800eb2e:	2101      	movs	r1, #1
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f004 fd11 	bl	8013558 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb54:	2303      	movs	r3, #3
 800eb56:	e01f      	b.n	800eb98 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d003      	beq.n	800eb7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	79fa      	ldrb	r2, [r7, #7]
 800eb8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f004 faed 	bl	801316c <USBD_LL_Init>
 800eb92:	4603      	mov	r3, r0
 800eb94:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d101      	bne.n	800ebb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e016      	b.n	800ebe6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00b      	beq.n	800ebe4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd4:	f107 020e 	add.w	r2, r7, #14
 800ebd8:	4610      	mov	r0, r2
 800ebda:	4798      	blx	r3
 800ebdc:	4602      	mov	r2, r0
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f004 fb02 	bl	8013200 <USBD_LL_Start>
 800ebfc:	4603      	mov	r3, r0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b083      	sub	sp, #12
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d009      	beq.n	800ec4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	78fa      	ldrb	r2, [r7, #3]
 800ec40:	4611      	mov	r1, r2
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	4798      	blx	r3
 800ec46:	4603      	mov	r3, r0
 800ec48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d007      	beq.n	800ec7a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	78fa      	ldrb	r2, [r7, #3]
 800ec74:	4611      	mov	r1, r2
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
  }

  return USBD_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 ffba 	bl	800fc10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ecaa:	461a      	mov	r2, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecb8:	f003 031f 	and.w	r3, r3, #31
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d01a      	beq.n	800ecf6 <USBD_LL_SetupStage+0x72>
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d822      	bhi.n	800ed0a <USBD_LL_SetupStage+0x86>
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <USBD_LL_SetupStage+0x4a>
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d00a      	beq.n	800ece2 <USBD_LL_SetupStage+0x5e>
 800eccc:	e01d      	b.n	800ed0a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 fa62 	bl	800f1a0 <USBD_StdDevReq>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
      break;
 800ece0:	e020      	b.n	800ed24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 fac6 	bl	800f27c <USBD_StdItfReq>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecf4:	e016      	b.n	800ed24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 fb05 	bl	800f30e <USBD_StdEPReq>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73fb      	strb	r3, [r7, #15]
      break;
 800ed08:	e00c      	b.n	800ed24 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	4619      	mov	r1, r3
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f004 fb17 	bl	801334c <USBD_LL_StallEP>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	73fb      	strb	r3, [r7, #15]
      break;
 800ed22:	bf00      	nop
  }

  return ret;
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b086      	sub	sp, #24
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	460b      	mov	r3, r1
 800ed38:	607a      	str	r2, [r7, #4]
 800ed3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed3c:	7afb      	ldrb	r3, [r7, #11]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d138      	bne.n	800edb4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ed48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d14a      	bne.n	800edea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	689a      	ldr	r2, [r3, #8]
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d913      	bls.n	800ed88 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	689a      	ldr	r2, [r3, #8]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	1ad2      	subs	r2, r2, r3
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	68da      	ldr	r2, [r3, #12]
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	4293      	cmp	r3, r2
 800ed78:	bf28      	it	cs
 800ed7a:	4613      	movcs	r3, r2
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	6879      	ldr	r1, [r7, #4]
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f001 f839 	bl	800fdf8 <USBD_CtlContinueRx>
 800ed86:	e030      	b.n	800edea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b03      	cmp	r3, #3
 800ed92:	d10b      	bne.n	800edac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d005      	beq.n	800edac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f001 f834 	bl	800fe1a <USBD_CtlSendStatus>
 800edb2:	e01a      	b.n	800edea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b03      	cmp	r3, #3
 800edbe:	d114      	bne.n	800edea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edc6:	699b      	ldr	r3, [r3, #24]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00e      	beq.n	800edea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edd2:	699b      	ldr	r3, [r3, #24]
 800edd4:	7afa      	ldrb	r2, [r7, #11]
 800edd6:	4611      	mov	r1, r2
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	4798      	blx	r3
 800eddc:	4603      	mov	r3, r0
 800edde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ede6:	7dfb      	ldrb	r3, [r7, #23]
 800ede8:	e000      	b.n	800edec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3718      	adds	r7, #24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	460b      	mov	r3, r1
 800edfe:	607a      	str	r2, [r7, #4]
 800ee00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee02:	7afb      	ldrb	r3, [r7, #11]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d16b      	bne.n	800eee0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	3314      	adds	r3, #20
 800ee0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d156      	bne.n	800eec6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	689a      	ldr	r2, [r3, #8]
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d914      	bls.n	800ee4e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	689a      	ldr	r2, [r3, #8]
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	1ad2      	subs	r2, r2, r3
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	461a      	mov	r2, r3
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f000 ffae 	bl	800fd9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee40:	2300      	movs	r3, #0
 800ee42:	2200      	movs	r2, #0
 800ee44:	2100      	movs	r1, #0
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f004 fb86 	bl	8013558 <USBD_LL_PrepareReceive>
 800ee4c:	e03b      	b.n	800eec6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	68da      	ldr	r2, [r3, #12]
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d11c      	bne.n	800ee94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d316      	bcc.n	800ee94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d20f      	bcs.n	800ee94 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee74:	2200      	movs	r2, #0
 800ee76:	2100      	movs	r1, #0
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 ff8f 	bl	800fd9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee86:	2300      	movs	r3, #0
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f004 fb63 	bl	8013558 <USBD_LL_PrepareReceive>
 800ee92:	e018      	b.n	800eec6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d10b      	bne.n	800eeb8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d005      	beq.n	800eeb8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eeb8:	2180      	movs	r1, #128	; 0x80
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f004 fa46 	bl	801334c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f000 ffbd 	bl	800fe40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d122      	bne.n	800ef16 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7ff fe98 	bl	800ec06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eede:	e01a      	b.n	800ef16 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	2b03      	cmp	r3, #3
 800eeea:	d114      	bne.n	800ef16 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00e      	beq.n	800ef16 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eefe:	695b      	ldr	r3, [r3, #20]
 800ef00:	7afa      	ldrb	r2, [r7, #11]
 800ef02:	4611      	mov	r1, r2
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	4798      	blx	r3
 800ef08:	4603      	mov	r3, r0
 800ef0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ef12:	7dfb      	ldrb	r3, [r7, #23]
 800ef14:	e000      	b.n	800ef18 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3718      	adds	r7, #24
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ef50:	2303      	movs	r3, #3
 800ef52:	e02f      	b.n	800efb4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00f      	beq.n	800ef7e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d009      	beq.n	800ef7e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	6852      	ldr	r2, [r2, #4]
 800ef76:	b2d2      	uxtb	r2, r2
 800ef78:	4611      	mov	r1, r2
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef7e:	2340      	movs	r3, #64	; 0x40
 800ef80:	2200      	movs	r2, #0
 800ef82:	2100      	movs	r1, #0
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f004 f96d 	bl	8013264 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2240      	movs	r2, #64	; 0x40
 800ef96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef9a:	2340      	movs	r3, #64	; 0x40
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2180      	movs	r1, #128	; 0x80
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f004 f95f 	bl	8013264 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2201      	movs	r2, #1
 800efaa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2240      	movs	r2, #64	; 0x40
 800efb0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	78fa      	ldrb	r2, [r7, #3]
 800efcc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efea:	b2da      	uxtb	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2204      	movs	r2, #4
 800eff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f016:	b2db      	uxtb	r3, r3
 800f018:	2b04      	cmp	r3, #4
 800f01a:	d106      	bne.n	800f02a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f022:	b2da      	uxtb	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f046:	2b00      	cmp	r3, #0
 800f048:	d101      	bne.n	800f04e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f04a:	2303      	movs	r3, #3
 800f04c:	e012      	b.n	800f074 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f054:	b2db      	uxtb	r3, r3
 800f056:	2b03      	cmp	r3, #3
 800f058:	d10b      	bne.n	800f072 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f060:	69db      	ldr	r3, [r3, #28]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d005      	beq.n	800f072 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	460b      	mov	r3, r1
 800f086:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d101      	bne.n	800f096 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f092:	2303      	movs	r3, #3
 800f094:	e014      	b.n	800f0c0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d10d      	bne.n	800f0be <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d007      	beq.n	800f0be <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0b4:	6a1b      	ldr	r3, [r3, #32]
 800f0b6:	78fa      	ldrb	r2, [r7, #3]
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e014      	b.n	800f10c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d10d      	bne.n	800f10a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d007      	beq.n	800f10a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f102:	78fa      	ldrb	r2, [r7, #3]
 800f104:	4611      	mov	r1, r2
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b082      	sub	sp, #8
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f140:	2b00      	cmp	r3, #0
 800f142:	d009      	beq.n	800f158 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	6852      	ldr	r2, [r2, #4]
 800f150:	b2d2      	uxtb	r2, r2
 800f152:	4611      	mov	r1, r2
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	4798      	blx	r3
  }

  return USBD_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f162:	b480      	push	{r7}
 800f164:	b087      	sub	sp, #28
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	3301      	adds	r3, #1
 800f178:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f180:	8a3b      	ldrh	r3, [r7, #16]
 800f182:	021b      	lsls	r3, r3, #8
 800f184:	b21a      	sxth	r2, r3
 800f186:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f18a:	4313      	orrs	r3, r2
 800f18c:	b21b      	sxth	r3, r3
 800f18e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f190:	89fb      	ldrh	r3, [r7, #14]
}
 800f192:	4618      	mov	r0, r3
 800f194:	371c      	adds	r7, #28
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
	...

0800f1a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1b6:	2b40      	cmp	r3, #64	; 0x40
 800f1b8:	d005      	beq.n	800f1c6 <USBD_StdDevReq+0x26>
 800f1ba:	2b40      	cmp	r3, #64	; 0x40
 800f1bc:	d853      	bhi.n	800f266 <USBD_StdDevReq+0xc6>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00b      	beq.n	800f1da <USBD_StdDevReq+0x3a>
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d14f      	bne.n	800f266 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	4798      	blx	r3
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1d8:	e04a      	b.n	800f270 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	785b      	ldrb	r3, [r3, #1]
 800f1de:	2b09      	cmp	r3, #9
 800f1e0:	d83b      	bhi.n	800f25a <USBD_StdDevReq+0xba>
 800f1e2:	a201      	add	r2, pc, #4	; (adr r2, 800f1e8 <USBD_StdDevReq+0x48>)
 800f1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e8:	0800f23d 	.word	0x0800f23d
 800f1ec:	0800f251 	.word	0x0800f251
 800f1f0:	0800f25b 	.word	0x0800f25b
 800f1f4:	0800f247 	.word	0x0800f247
 800f1f8:	0800f25b 	.word	0x0800f25b
 800f1fc:	0800f21b 	.word	0x0800f21b
 800f200:	0800f211 	.word	0x0800f211
 800f204:	0800f25b 	.word	0x0800f25b
 800f208:	0800f233 	.word	0x0800f233
 800f20c:	0800f225 	.word	0x0800f225
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f9de 	bl	800f5d4 <USBD_GetDescriptor>
          break;
 800f218:	e024      	b.n	800f264 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fb6d 	bl	800f8fc <USBD_SetAddress>
          break;
 800f222:	e01f      	b.n	800f264 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fbac 	bl	800f984 <USBD_SetConfig>
 800f22c:	4603      	mov	r3, r0
 800f22e:	73fb      	strb	r3, [r7, #15]
          break;
 800f230:	e018      	b.n	800f264 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 fc4b 	bl	800fad0 <USBD_GetConfig>
          break;
 800f23a:	e013      	b.n	800f264 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f23c:	6839      	ldr	r1, [r7, #0]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fc7c 	bl	800fb3c <USBD_GetStatus>
          break;
 800f244:	e00e      	b.n	800f264 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fcab 	bl	800fba4 <USBD_SetFeature>
          break;
 800f24e:	e009      	b.n	800f264 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fcba 	bl	800fbcc <USBD_ClrFeature>
          break;
 800f258:	e004      	b.n	800f264 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f25a:	6839      	ldr	r1, [r7, #0]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 fd11 	bl	800fc84 <USBD_CtlError>
          break;
 800f262:	bf00      	nop
      }
      break;
 800f264:	e004      	b.n	800f270 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fd0b 	bl	800fc84 <USBD_CtlError>
      break;
 800f26e:	bf00      	nop
  }

  return ret;
 800f270:	7bfb      	ldrb	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop

0800f27c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f292:	2b40      	cmp	r3, #64	; 0x40
 800f294:	d005      	beq.n	800f2a2 <USBD_StdItfReq+0x26>
 800f296:	2b40      	cmp	r3, #64	; 0x40
 800f298:	d82f      	bhi.n	800f2fa <USBD_StdItfReq+0x7e>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <USBD_StdItfReq+0x26>
 800f29e:	2b20      	cmp	r3, #32
 800f2a0:	d12b      	bne.n	800f2fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2a8:	b2db      	uxtb	r3, r3
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	2b02      	cmp	r3, #2
 800f2ae:	d81d      	bhi.n	800f2ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	889b      	ldrh	r3, [r3, #4]
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d813      	bhi.n	800f2e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	4798      	blx	r3
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	88db      	ldrh	r3, [r3, #6]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d110      	bne.n	800f2f6 <USBD_StdItfReq+0x7a>
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d10d      	bne.n	800f2f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fd9d 	bl	800fe1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f2e0:	e009      	b.n	800f2f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 fccd 	bl	800fc84 <USBD_CtlError>
          break;
 800f2ea:	e004      	b.n	800f2f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fcc8 	bl	800fc84 <USBD_CtlError>
          break;
 800f2f4:	e000      	b.n	800f2f8 <USBD_StdItfReq+0x7c>
          break;
 800f2f6:	bf00      	nop
      }
      break;
 800f2f8:	e004      	b.n	800f304 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fcc1 	bl	800fc84 <USBD_CtlError>
      break;
 800f302:	bf00      	nop
  }

  return ret;
 800f304:	7bfb      	ldrb	r3, [r7, #15]
}
 800f306:	4618      	mov	r0, r3
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b084      	sub	sp, #16
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
 800f316:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f318:	2300      	movs	r3, #0
 800f31a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	889b      	ldrh	r3, [r3, #4]
 800f320:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f32a:	2b40      	cmp	r3, #64	; 0x40
 800f32c:	d007      	beq.n	800f33e <USBD_StdEPReq+0x30>
 800f32e:	2b40      	cmp	r3, #64	; 0x40
 800f330:	f200 8145 	bhi.w	800f5be <USBD_StdEPReq+0x2b0>
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00c      	beq.n	800f352 <USBD_StdEPReq+0x44>
 800f338:	2b20      	cmp	r3, #32
 800f33a:	f040 8140 	bne.w	800f5be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	4798      	blx	r3
 800f34c:	4603      	mov	r3, r0
 800f34e:	73fb      	strb	r3, [r7, #15]
      break;
 800f350:	e13a      	b.n	800f5c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	785b      	ldrb	r3, [r3, #1]
 800f356:	2b03      	cmp	r3, #3
 800f358:	d007      	beq.n	800f36a <USBD_StdEPReq+0x5c>
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	f300 8129 	bgt.w	800f5b2 <USBD_StdEPReq+0x2a4>
 800f360:	2b00      	cmp	r3, #0
 800f362:	d07f      	beq.n	800f464 <USBD_StdEPReq+0x156>
 800f364:	2b01      	cmp	r3, #1
 800f366:	d03c      	beq.n	800f3e2 <USBD_StdEPReq+0xd4>
 800f368:	e123      	b.n	800f5b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b02      	cmp	r3, #2
 800f374:	d002      	beq.n	800f37c <USBD_StdEPReq+0x6e>
 800f376:	2b03      	cmp	r3, #3
 800f378:	d016      	beq.n	800f3a8 <USBD_StdEPReq+0x9a>
 800f37a:	e02c      	b.n	800f3d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00d      	beq.n	800f39e <USBD_StdEPReq+0x90>
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	2b80      	cmp	r3, #128	; 0x80
 800f386:	d00a      	beq.n	800f39e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f003 ffdd 	bl	801334c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f392:	2180      	movs	r1, #128	; 0x80
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f003 ffd9 	bl	801334c <USBD_LL_StallEP>
 800f39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f39c:	e020      	b.n	800f3e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f39e:	6839      	ldr	r1, [r7, #0]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fc6f 	bl	800fc84 <USBD_CtlError>
              break;
 800f3a6:	e01b      	b.n	800f3e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	885b      	ldrh	r3, [r3, #2]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d10e      	bne.n	800f3ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00b      	beq.n	800f3ce <USBD_StdEPReq+0xc0>
 800f3b6:	7bbb      	ldrb	r3, [r7, #14]
 800f3b8:	2b80      	cmp	r3, #128	; 0x80
 800f3ba:	d008      	beq.n	800f3ce <USBD_StdEPReq+0xc0>
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	88db      	ldrh	r3, [r3, #6]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d104      	bne.n	800f3ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3c4:	7bbb      	ldrb	r3, [r7, #14]
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f003 ffbf 	bl	801334c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fd23 	bl	800fe1a <USBD_CtlSendStatus>

              break;
 800f3d4:	e004      	b.n	800f3e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f3d6:	6839      	ldr	r1, [r7, #0]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fc53 	bl	800fc84 <USBD_CtlError>
              break;
 800f3de:	bf00      	nop
          }
          break;
 800f3e0:	e0ec      	b.n	800f5bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	d002      	beq.n	800f3f4 <USBD_StdEPReq+0xe6>
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d016      	beq.n	800f420 <USBD_StdEPReq+0x112>
 800f3f2:	e030      	b.n	800f456 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3f4:	7bbb      	ldrb	r3, [r7, #14]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00d      	beq.n	800f416 <USBD_StdEPReq+0x108>
 800f3fa:	7bbb      	ldrb	r3, [r7, #14]
 800f3fc:	2b80      	cmp	r3, #128	; 0x80
 800f3fe:	d00a      	beq.n	800f416 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f400:	7bbb      	ldrb	r3, [r7, #14]
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f003 ffa1 	bl	801334c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f40a:	2180      	movs	r1, #128	; 0x80
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f003 ff9d 	bl	801334c <USBD_LL_StallEP>
 800f412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f414:	e025      	b.n	800f462 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 fc33 	bl	800fc84 <USBD_CtlError>
              break;
 800f41e:	e020      	b.n	800f462 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	885b      	ldrh	r3, [r3, #2]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d11b      	bne.n	800f460 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f428:	7bbb      	ldrb	r3, [r7, #14]
 800f42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d004      	beq.n	800f43c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f432:	7bbb      	ldrb	r3, [r7, #14]
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f003 ffbe 	bl	80133b8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fcec 	bl	800fe1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	4798      	blx	r3
 800f450:	4603      	mov	r3, r0
 800f452:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f454:	e004      	b.n	800f460 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f456:	6839      	ldr	r1, [r7, #0]
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fc13 	bl	800fc84 <USBD_CtlError>
              break;
 800f45e:	e000      	b.n	800f462 <USBD_StdEPReq+0x154>
              break;
 800f460:	bf00      	nop
          }
          break;
 800f462:	e0ab      	b.n	800f5bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d002      	beq.n	800f476 <USBD_StdEPReq+0x168>
 800f470:	2b03      	cmp	r3, #3
 800f472:	d032      	beq.n	800f4da <USBD_StdEPReq+0x1cc>
 800f474:	e097      	b.n	800f5a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f476:	7bbb      	ldrb	r3, [r7, #14]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d007      	beq.n	800f48c <USBD_StdEPReq+0x17e>
 800f47c:	7bbb      	ldrb	r3, [r7, #14]
 800f47e:	2b80      	cmp	r3, #128	; 0x80
 800f480:	d004      	beq.n	800f48c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fbfd 	bl	800fc84 <USBD_CtlError>
                break;
 800f48a:	e091      	b.n	800f5b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f490:	2b00      	cmp	r3, #0
 800f492:	da0b      	bge.n	800f4ac <USBD_StdEPReq+0x19e>
 800f494:	7bbb      	ldrb	r3, [r7, #14]
 800f496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f49a:	4613      	mov	r3, r2
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	4413      	add	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	3310      	adds	r3, #16
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	e00b      	b.n	800f4c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4ac:	7bbb      	ldrb	r3, [r7, #14]
 800f4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	4413      	add	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2202      	movs	r2, #2
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fc47 	bl	800fd66 <USBD_CtlSendData>
              break;
 800f4d8:	e06a      	b.n	800f5b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	da11      	bge.n	800f506 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
 800f4e4:	f003 020f 	and.w	r2, r3, #15
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	440b      	add	r3, r1
 800f4f4:	3324      	adds	r3, #36	; 0x24
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d117      	bne.n	800f52c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fbc0 	bl	800fc84 <USBD_CtlError>
                  break;
 800f504:	e054      	b.n	800f5b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f506:	7bbb      	ldrb	r3, [r7, #14]
 800f508:	f003 020f 	and.w	r2, r3, #15
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	4613      	mov	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	440b      	add	r3, r1
 800f518:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d104      	bne.n	800f52c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 fbad 	bl	800fc84 <USBD_CtlError>
                  break;
 800f52a:	e041      	b.n	800f5b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f530:	2b00      	cmp	r3, #0
 800f532:	da0b      	bge.n	800f54c <USBD_StdEPReq+0x23e>
 800f534:	7bbb      	ldrb	r3, [r7, #14]
 800f536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	3310      	adds	r3, #16
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	4413      	add	r3, r2
 800f548:	3304      	adds	r3, #4
 800f54a:	e00b      	b.n	800f564 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f54c:	7bbb      	ldrb	r3, [r7, #14]
 800f54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f552:	4613      	mov	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4413      	add	r3, r2
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	4413      	add	r3, r2
 800f562:	3304      	adds	r3, #4
 800f564:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f566:	7bbb      	ldrb	r3, [r7, #14]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <USBD_StdEPReq+0x264>
 800f56c:	7bbb      	ldrb	r3, [r7, #14]
 800f56e:	2b80      	cmp	r3, #128	; 0x80
 800f570:	d103      	bne.n	800f57a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2200      	movs	r2, #0
 800f576:	601a      	str	r2, [r3, #0]
 800f578:	e00e      	b.n	800f598 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
 800f57c:	4619      	mov	r1, r3
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f003 ff50 	bl	8013424 <USBD_LL_IsStallEP>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d003      	beq.n	800f592 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	2201      	movs	r2, #1
 800f58e:	601a      	str	r2, [r3, #0]
 800f590:	e002      	b.n	800f598 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2200      	movs	r2, #0
 800f596:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2202      	movs	r2, #2
 800f59c:	4619      	mov	r1, r3
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 fbe1 	bl	800fd66 <USBD_CtlSendData>
              break;
 800f5a4:	e004      	b.n	800f5b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 fb6b 	bl	800fc84 <USBD_CtlError>
              break;
 800f5ae:	bf00      	nop
          }
          break;
 800f5b0:	e004      	b.n	800f5bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fb65 	bl	800fc84 <USBD_CtlError>
          break;
 800f5ba:	bf00      	nop
      }
      break;
 800f5bc:	e004      	b.n	800f5c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f5be:	6839      	ldr	r1, [r7, #0]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fb5f 	bl	800fc84 <USBD_CtlError>
      break;
 800f5c6:	bf00      	nop
  }

  return ret;
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	885b      	ldrh	r3, [r3, #2]
 800f5ee:	0a1b      	lsrs	r3, r3, #8
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	2b0e      	cmp	r3, #14
 800f5f6:	f200 8152 	bhi.w	800f89e <USBD_GetDescriptor+0x2ca>
 800f5fa:	a201      	add	r2, pc, #4	; (adr r2, 800f600 <USBD_GetDescriptor+0x2c>)
 800f5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f600:	0800f671 	.word	0x0800f671
 800f604:	0800f689 	.word	0x0800f689
 800f608:	0800f6c9 	.word	0x0800f6c9
 800f60c:	0800f89f 	.word	0x0800f89f
 800f610:	0800f89f 	.word	0x0800f89f
 800f614:	0800f83f 	.word	0x0800f83f
 800f618:	0800f86b 	.word	0x0800f86b
 800f61c:	0800f89f 	.word	0x0800f89f
 800f620:	0800f89f 	.word	0x0800f89f
 800f624:	0800f89f 	.word	0x0800f89f
 800f628:	0800f89f 	.word	0x0800f89f
 800f62c:	0800f89f 	.word	0x0800f89f
 800f630:	0800f89f 	.word	0x0800f89f
 800f634:	0800f89f 	.word	0x0800f89f
 800f638:	0800f63d 	.word	0x0800f63d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00b      	beq.n	800f660 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	7c12      	ldrb	r2, [r2, #16]
 800f654:	f107 0108 	add.w	r1, r7, #8
 800f658:	4610      	mov	r0, r2
 800f65a:	4798      	blx	r3
 800f65c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f65e:	e126      	b.n	800f8ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 fb0e 	bl	800fc84 <USBD_CtlError>
        err++;
 800f668:	7afb      	ldrb	r3, [r7, #11]
 800f66a:	3301      	adds	r3, #1
 800f66c:	72fb      	strb	r3, [r7, #11]
      break;
 800f66e:	e11e      	b.n	800f8ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	7c12      	ldrb	r2, [r2, #16]
 800f67c:	f107 0108 	add.w	r1, r7, #8
 800f680:	4610      	mov	r0, r2
 800f682:	4798      	blx	r3
 800f684:	60f8      	str	r0, [r7, #12]
      break;
 800f686:	e112      	b.n	800f8ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	7c1b      	ldrb	r3, [r3, #16]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10d      	bne.n	800f6ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f698:	f107 0208 	add.w	r2, r7, #8
 800f69c:	4610      	mov	r0, r2
 800f69e:	4798      	blx	r3
 800f6a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	2202      	movs	r2, #2
 800f6a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f6aa:	e100      	b.n	800f8ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b4:	f107 0208 	add.w	r2, r7, #8
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	4798      	blx	r3
 800f6bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	2202      	movs	r2, #2
 800f6c4:	701a      	strb	r2, [r3, #0]
      break;
 800f6c6:	e0f2      	b.n	800f8ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	885b      	ldrh	r3, [r3, #2]
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	2b05      	cmp	r3, #5
 800f6d0:	f200 80ac 	bhi.w	800f82c <USBD_GetDescriptor+0x258>
 800f6d4:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <USBD_GetDescriptor+0x108>)
 800f6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6da:	bf00      	nop
 800f6dc:	0800f6f5 	.word	0x0800f6f5
 800f6e0:	0800f729 	.word	0x0800f729
 800f6e4:	0800f75d 	.word	0x0800f75d
 800f6e8:	0800f791 	.word	0x0800f791
 800f6ec:	0800f7c5 	.word	0x0800f7c5
 800f6f0:	0800f7f9 	.word	0x0800f7f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00b      	beq.n	800f718 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	7c12      	ldrb	r2, [r2, #16]
 800f70c:	f107 0108 	add.w	r1, r7, #8
 800f710:	4610      	mov	r0, r2
 800f712:	4798      	blx	r3
 800f714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f716:	e091      	b.n	800f83c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fab2 	bl	800fc84 <USBD_CtlError>
            err++;
 800f720:	7afb      	ldrb	r3, [r7, #11]
 800f722:	3301      	adds	r3, #1
 800f724:	72fb      	strb	r3, [r7, #11]
          break;
 800f726:	e089      	b.n	800f83c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	7c12      	ldrb	r2, [r2, #16]
 800f740:	f107 0108 	add.w	r1, r7, #8
 800f744:	4610      	mov	r0, r2
 800f746:	4798      	blx	r3
 800f748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74a:	e077      	b.n	800f83c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fa98 	bl	800fc84 <USBD_CtlError>
            err++;
 800f754:	7afb      	ldrb	r3, [r7, #11]
 800f756:	3301      	adds	r3, #1
 800f758:	72fb      	strb	r3, [r7, #11]
          break;
 800f75a:	e06f      	b.n	800f83c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	7c12      	ldrb	r2, [r2, #16]
 800f774:	f107 0108 	add.w	r1, r7, #8
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f77e:	e05d      	b.n	800f83c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fa7e 	bl	800fc84 <USBD_CtlError>
            err++;
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	3301      	adds	r3, #1
 800f78c:	72fb      	strb	r3, [r7, #11]
          break;
 800f78e:	e055      	b.n	800f83c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	691b      	ldr	r3, [r3, #16]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	691b      	ldr	r3, [r3, #16]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	7c12      	ldrb	r2, [r2, #16]
 800f7a8:	f107 0108 	add.w	r1, r7, #8
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	4798      	blx	r3
 800f7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7b2:	e043      	b.n	800f83c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa64 	bl	800fc84 <USBD_CtlError>
            err++;
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7c2:	e03b      	b.n	800f83c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	695b      	ldr	r3, [r3, #20]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	7c12      	ldrb	r2, [r2, #16]
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7e6:	e029      	b.n	800f83c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa4a 	bl	800fc84 <USBD_CtlError>
            err++;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7f6:	e021      	b.n	800f83c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f80a:	699b      	ldr	r3, [r3, #24]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7c12      	ldrb	r2, [r2, #16]
 800f810:	f107 0108 	add.w	r1, r7, #8
 800f814:	4610      	mov	r0, r2
 800f816:	4798      	blx	r3
 800f818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f81a:	e00f      	b.n	800f83c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fa30 	bl	800fc84 <USBD_CtlError>
            err++;
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	3301      	adds	r3, #1
 800f828:	72fb      	strb	r3, [r7, #11]
          break;
 800f82a:	e007      	b.n	800f83c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fa28 	bl	800fc84 <USBD_CtlError>
          err++;
 800f834:	7afb      	ldrb	r3, [r7, #11]
 800f836:	3301      	adds	r3, #1
 800f838:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f83a:	bf00      	nop
      }
      break;
 800f83c:	e037      	b.n	800f8ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	7c1b      	ldrb	r3, [r3, #16]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d109      	bne.n	800f85a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f84e:	f107 0208 	add.w	r2, r7, #8
 800f852:	4610      	mov	r0, r2
 800f854:	4798      	blx	r3
 800f856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f858:	e029      	b.n	800f8ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f85a:	6839      	ldr	r1, [r7, #0]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 fa11 	bl	800fc84 <USBD_CtlError>
        err++;
 800f862:	7afb      	ldrb	r3, [r7, #11]
 800f864:	3301      	adds	r3, #1
 800f866:	72fb      	strb	r3, [r7, #11]
      break;
 800f868:	e021      	b.n	800f8ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	7c1b      	ldrb	r3, [r3, #16]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10d      	bne.n	800f88e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f87a:	f107 0208 	add.w	r2, r7, #8
 800f87e:	4610      	mov	r0, r2
 800f880:	4798      	blx	r3
 800f882:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	3301      	adds	r3, #1
 800f888:	2207      	movs	r2, #7
 800f88a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f88c:	e00f      	b.n	800f8ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f9f7 	bl	800fc84 <USBD_CtlError>
        err++;
 800f896:	7afb      	ldrb	r3, [r7, #11]
 800f898:	3301      	adds	r3, #1
 800f89a:	72fb      	strb	r3, [r7, #11]
      break;
 800f89c:	e007      	b.n	800f8ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f89e:	6839      	ldr	r1, [r7, #0]
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f000 f9ef 	bl	800fc84 <USBD_CtlError>
      err++;
 800f8a6:	7afb      	ldrb	r3, [r7, #11]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800f8ac:	bf00      	nop
  }

  if (err != 0U)
 800f8ae:	7afb      	ldrb	r3, [r7, #11]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d11e      	bne.n	800f8f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	88db      	ldrh	r3, [r3, #6]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d016      	beq.n	800f8ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f8bc:	893b      	ldrh	r3, [r7, #8]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00e      	beq.n	800f8e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	88da      	ldrh	r2, [r3, #6]
 800f8c6:	893b      	ldrh	r3, [r7, #8]
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	bf28      	it	cs
 800f8cc:	4613      	movcs	r3, r2
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f8d2:	893b      	ldrh	r3, [r7, #8]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	68f9      	ldr	r1, [r7, #12]
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 fa44 	bl	800fd66 <USBD_CtlSendData>
 800f8de:	e009      	b.n	800f8f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f8e0:	6839      	ldr	r1, [r7, #0]
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 f9ce 	bl	800fc84 <USBD_CtlError>
 800f8e8:	e004      	b.n	800f8f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fa95 	bl	800fe1a <USBD_CtlSendStatus>
 800f8f0:	e000      	b.n	800f8f4 <USBD_GetDescriptor+0x320>
    return;
 800f8f2:	bf00      	nop
  }
}
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop

0800f8fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	889b      	ldrh	r3, [r3, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d131      	bne.n	800f972 <USBD_SetAddress+0x76>
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	88db      	ldrh	r3, [r3, #6]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d12d      	bne.n	800f972 <USBD_SetAddress+0x76>
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	885b      	ldrh	r3, [r3, #2]
 800f91a:	2b7f      	cmp	r3, #127	; 0x7f
 800f91c:	d829      	bhi.n	800f972 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	885b      	ldrh	r3, [r3, #2]
 800f922:	b2db      	uxtb	r3, r3
 800f924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f928:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b03      	cmp	r3, #3
 800f934:	d104      	bne.n	800f940 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f9a3 	bl	800fc84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f93e:	e01d      	b.n	800f97c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	7bfa      	ldrb	r2, [r7, #15]
 800f944:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f948:	7bfb      	ldrb	r3, [r7, #15]
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f003 fd95 	bl	801347c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 fa61 	bl	800fe1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f958:	7bfb      	ldrb	r3, [r7, #15]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d004      	beq.n	800f968 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2202      	movs	r2, #2
 800f962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f966:	e009      	b.n	800f97c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f970:	e004      	b.n	800f97c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 f985 	bl	800fc84 <USBD_CtlError>
  }
}
 800f97a:	bf00      	nop
 800f97c:	bf00      	nop
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f98e:	2300      	movs	r3, #0
 800f990:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	885b      	ldrh	r3, [r3, #2]
 800f996:	b2da      	uxtb	r2, r3
 800f998:	4b4c      	ldr	r3, [pc, #304]	; (800facc <USBD_SetConfig+0x148>)
 800f99a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f99c:	4b4b      	ldr	r3, [pc, #300]	; (800facc <USBD_SetConfig+0x148>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d905      	bls.n	800f9b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f9a4:	6839      	ldr	r1, [r7, #0]
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f96c 	bl	800fc84 <USBD_CtlError>
    return USBD_FAIL;
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	e088      	b.n	800fac2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d002      	beq.n	800f9c2 <USBD_SetConfig+0x3e>
 800f9bc:	2b03      	cmp	r3, #3
 800f9be:	d025      	beq.n	800fa0c <USBD_SetConfig+0x88>
 800f9c0:	e071      	b.n	800faa6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f9c2:	4b42      	ldr	r3, [pc, #264]	; (800facc <USBD_SetConfig+0x148>)
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d01c      	beq.n	800fa04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f9ca:	4b40      	ldr	r3, [pc, #256]	; (800facc <USBD_SetConfig+0x148>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9d4:	4b3d      	ldr	r3, [pc, #244]	; (800facc <USBD_SetConfig+0x148>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7ff f91e 	bl	800ec1c <USBD_SetClassConfig>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d004      	beq.n	800f9f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f9ea:	6839      	ldr	r1, [r7, #0]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f949 	bl	800fc84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9f2:	e065      	b.n	800fac0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 fa10 	bl	800fe1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2203      	movs	r2, #3
 800f9fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa02:	e05d      	b.n	800fac0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 fa08 	bl	800fe1a <USBD_CtlSendStatus>
      break;
 800fa0a:	e059      	b.n	800fac0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fa0c:	4b2f      	ldr	r3, [pc, #188]	; (800facc <USBD_SetConfig+0x148>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d112      	bne.n	800fa3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2202      	movs	r2, #2
 800fa18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fa1c:	4b2b      	ldr	r3, [pc, #172]	; (800facc <USBD_SetConfig+0x148>)
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	461a      	mov	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa26:	4b29      	ldr	r3, [pc, #164]	; (800facc <USBD_SetConfig+0x148>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7ff f911 	bl	800ec54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f9f1 	bl	800fe1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa38:	e042      	b.n	800fac0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fa3a:	4b24      	ldr	r3, [pc, #144]	; (800facc <USBD_SetConfig+0x148>)
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d02a      	beq.n	800fa9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff f8ff 	bl	800ec54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa56:	4b1d      	ldr	r3, [pc, #116]	; (800facc <USBD_SetConfig+0x148>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa60:	4b1a      	ldr	r3, [pc, #104]	; (800facc <USBD_SetConfig+0x148>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	4619      	mov	r1, r3
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7ff f8d8 	bl	800ec1c <USBD_SetClassConfig>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00f      	beq.n	800fa96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 f903 	bl	800fc84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	4619      	mov	r1, r3
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7ff f8e4 	bl	800ec54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2202      	movs	r2, #2
 800fa90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa94:	e014      	b.n	800fac0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f9bf 	bl	800fe1a <USBD_CtlSendStatus>
      break;
 800fa9c:	e010      	b.n	800fac0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 f9bb 	bl	800fe1a <USBD_CtlSendStatus>
      break;
 800faa4:	e00c      	b.n	800fac0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f8eb 	bl	800fc84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800faae:	4b07      	ldr	r3, [pc, #28]	; (800facc <USBD_SetConfig+0x148>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	4619      	mov	r1, r3
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff f8cd 	bl	800ec54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800faba:	2303      	movs	r3, #3
 800fabc:	73fb      	strb	r3, [r7, #15]
      break;
 800fabe:	bf00      	nop
  }

  return ret;
 800fac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20003f60 	.word	0x20003f60

0800fad0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	88db      	ldrh	r3, [r3, #6]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d004      	beq.n	800faec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fae2:	6839      	ldr	r1, [r7, #0]
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 f8cd 	bl	800fc84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800faea:	e023      	b.n	800fb34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	dc02      	bgt.n	800fafe <USBD_GetConfig+0x2e>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	dc03      	bgt.n	800fb04 <USBD_GetConfig+0x34>
 800fafc:	e015      	b.n	800fb2a <USBD_GetConfig+0x5a>
 800fafe:	2b03      	cmp	r3, #3
 800fb00:	d00b      	beq.n	800fb1a <USBD_GetConfig+0x4a>
 800fb02:	e012      	b.n	800fb2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3308      	adds	r3, #8
 800fb0e:	2201      	movs	r2, #1
 800fb10:	4619      	mov	r1, r3
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f927 	bl	800fd66 <USBD_CtlSendData>
        break;
 800fb18:	e00c      	b.n	800fb34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	3304      	adds	r3, #4
 800fb1e:	2201      	movs	r2, #1
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 f91f 	bl	800fd66 <USBD_CtlSendData>
        break;
 800fb28:	e004      	b.n	800fb34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 f8a9 	bl	800fc84 <USBD_CtlError>
        break;
 800fb32:	bf00      	nop
}
 800fb34:	bf00      	nop
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	2b02      	cmp	r3, #2
 800fb52:	d81e      	bhi.n	800fb92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	88db      	ldrh	r3, [r3, #6]
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	d004      	beq.n	800fb66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f890 	bl	800fc84 <USBD_CtlError>
        break;
 800fb64:	e01a      	b.n	800fb9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d005      	beq.n	800fb82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	f043 0202 	orr.w	r2, r3, #2
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	330c      	adds	r3, #12
 800fb86:	2202      	movs	r2, #2
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f8eb 	bl	800fd66 <USBD_CtlSendData>
      break;
 800fb90:	e004      	b.n	800fb9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 f875 	bl	800fc84 <USBD_CtlError>
      break;
 800fb9a:	bf00      	nop
  }
}
 800fb9c:	bf00      	nop
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	885b      	ldrh	r3, [r3, #2]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d106      	bne.n	800fbc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2201      	movs	r2, #1
 800fbba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f92b 	bl	800fe1a <USBD_CtlSendStatus>
  }
}
 800fbc4:	bf00      	nop
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	2b02      	cmp	r3, #2
 800fbe2:	d80b      	bhi.n	800fbfc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	885b      	ldrh	r3, [r3, #2]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d10c      	bne.n	800fc06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f910 	bl	800fe1a <USBD_CtlSendStatus>
      }
      break;
 800fbfa:	e004      	b.n	800fc06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbfc:	6839      	ldr	r1, [r7, #0]
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f840 	bl	800fc84 <USBD_CtlError>
      break;
 800fc04:	e000      	b.n	800fc08 <USBD_ClrFeature+0x3c>
      break;
 800fc06:	bf00      	nop
  }
}
 800fc08:	bf00      	nop
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	781a      	ldrb	r2, [r3, #0]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	3301      	adds	r3, #1
 800fc38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f7ff fa91 	bl	800f162 <SWAPBYTE>
 800fc40:	4603      	mov	r3, r0
 800fc42:	461a      	mov	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3301      	adds	r3, #1
 800fc52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff fa84 	bl	800f162 <SWAPBYTE>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3301      	adds	r3, #1
 800fc66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fa77 	bl	800f162 <SWAPBYTE>
 800fc74:	4603      	mov	r3, r0
 800fc76:	461a      	mov	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	80da      	strh	r2, [r3, #6]
}
 800fc7c:	bf00      	nop
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc8e:	2180      	movs	r1, #128	; 0x80
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f003 fb5b 	bl	801334c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc96:	2100      	movs	r1, #0
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f003 fb57 	bl	801334c <USBD_LL_StallEP>
}
 800fc9e:	bf00      	nop
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b086      	sub	sp, #24
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	60f8      	str	r0, [r7, #12]
 800fcae:	60b9      	str	r1, [r7, #8]
 800fcb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d036      	beq.n	800fd2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fcc0:	6938      	ldr	r0, [r7, #16]
 800fcc2:	f000 f836 	bl	800fd32 <USBD_GetLen>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	3301      	adds	r3, #1
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fcd4:	7dfb      	ldrb	r3, [r7, #23]
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	4413      	add	r3, r2
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	7812      	ldrb	r2, [r2, #0]
 800fcde:	701a      	strb	r2, [r3, #0]
  idx++;
 800fce0:	7dfb      	ldrb	r3, [r7, #23]
 800fce2:	3301      	adds	r3, #1
 800fce4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	4413      	add	r3, r2
 800fcec:	2203      	movs	r2, #3
 800fcee:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcf0:	7dfb      	ldrb	r3, [r7, #23]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcf6:	e013      	b.n	800fd20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	7812      	ldrb	r2, [r2, #0]
 800fd02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	3301      	adds	r3, #1
 800fd08:	613b      	str	r3, [r7, #16]
    idx++;
 800fd0a:	7dfb      	ldrb	r3, [r7, #23]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	4413      	add	r3, r2
 800fd16:	2200      	movs	r2, #0
 800fd18:	701a      	strb	r2, [r3, #0]
    idx++;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e7      	bne.n	800fcf8 <USBD_GetString+0x52>
 800fd28:	e000      	b.n	800fd2c <USBD_GetString+0x86>
    return;
 800fd2a:	bf00      	nop
  }
}
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b085      	sub	sp, #20
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd42:	e005      	b.n	800fd50 <USBD_GetLen+0x1e>
  {
    len++;
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
 800fd46:	3301      	adds	r3, #1
 800fd48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1f5      	bne.n	800fd44 <USBD_GetLen+0x12>
  }

  return len;
 800fd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3714      	adds	r7, #20
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr

0800fd66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b084      	sub	sp, #16
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	60f8      	str	r0, [r7, #12]
 800fd6e:	60b9      	str	r1, [r7, #8]
 800fd70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2202      	movs	r2, #2
 800fd76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f003 fbab 	bl	80134e8 <USBD_LL_Transmit>

  return USBD_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	2100      	movs	r1, #0
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f003 fb9a 	bl	80134e8 <USBD_LL_Transmit>

  return USBD_OK;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	60f8      	str	r0, [r7, #12]
 800fdc6:	60b9      	str	r1, [r7, #8]
 800fdc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2203      	movs	r2, #3
 800fdce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	68ba      	ldr	r2, [r7, #8]
 800fde6:	2100      	movs	r1, #0
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f003 fbb5 	bl	8013558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdee:	2300      	movs	r3, #0
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	2100      	movs	r1, #0
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f003 fba4 	bl	8013558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2204      	movs	r2, #4
 800fe26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	2100      	movs	r1, #0
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f003 fb59 	bl	80134e8 <USBD_LL_Transmit>

  return USBD_OK;
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2205      	movs	r2, #5
 800fe4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe50:	2300      	movs	r3, #0
 800fe52:	2200      	movs	r2, #0
 800fe54:	2100      	movs	r1, #0
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f003 fb7e 	bl	8013558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <__NVIC_SetPriority>:
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	6039      	str	r1, [r7, #0]
 800fe72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	db0a      	blt.n	800fe92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	490c      	ldr	r1, [pc, #48]	; (800feb4 <__NVIC_SetPriority+0x4c>)
 800fe82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe86:	0112      	lsls	r2, r2, #4
 800fe88:	b2d2      	uxtb	r2, r2
 800fe8a:	440b      	add	r3, r1
 800fe8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fe90:	e00a      	b.n	800fea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	b2da      	uxtb	r2, r3
 800fe96:	4908      	ldr	r1, [pc, #32]	; (800feb8 <__NVIC_SetPriority+0x50>)
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	f003 030f 	and.w	r3, r3, #15
 800fe9e:	3b04      	subs	r3, #4
 800fea0:	0112      	lsls	r2, r2, #4
 800fea2:	b2d2      	uxtb	r2, r2
 800fea4:	440b      	add	r3, r1
 800fea6:	761a      	strb	r2, [r3, #24]
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr
 800feb4:	e000e100 	.word	0xe000e100
 800feb8:	e000ed00 	.word	0xe000ed00

0800febc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800febc:	b580      	push	{r7, lr}
 800febe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fec0:	4b05      	ldr	r3, [pc, #20]	; (800fed8 <SysTick_Handler+0x1c>)
 800fec2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fec4:	f001 fd28 	bl	8011918 <xTaskGetSchedulerState>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d001      	beq.n	800fed2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fece:	f002 fb13 	bl	80124f8 <xPortSysTickHandler>
  }
}
 800fed2:	bf00      	nop
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	e000e010 	.word	0xe000e010

0800fedc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fedc:	b580      	push	{r7, lr}
 800fede:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fee0:	2100      	movs	r1, #0
 800fee2:	f06f 0004 	mvn.w	r0, #4
 800fee6:	f7ff ffbf 	bl	800fe68 <__NVIC_SetPriority>
#endif
}
 800feea:	bf00      	nop
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fef6:	f3ef 8305 	mrs	r3, IPSR
 800fefa:	603b      	str	r3, [r7, #0]
  return(result);
 800fefc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d003      	beq.n	800ff0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ff02:	f06f 0305 	mvn.w	r3, #5
 800ff06:	607b      	str	r3, [r7, #4]
 800ff08:	e00c      	b.n	800ff24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ff0a:	4b0a      	ldr	r3, [pc, #40]	; (800ff34 <osKernelInitialize+0x44>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d105      	bne.n	800ff1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ff12:	4b08      	ldr	r3, [pc, #32]	; (800ff34 <osKernelInitialize+0x44>)
 800ff14:	2201      	movs	r2, #1
 800ff16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	607b      	str	r3, [r7, #4]
 800ff1c:	e002      	b.n	800ff24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ff1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff24:	687b      	ldr	r3, [r7, #4]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	370c      	adds	r7, #12
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	20003f64 	.word	0x20003f64

0800ff38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff3e:	f3ef 8305 	mrs	r3, IPSR
 800ff42:	603b      	str	r3, [r7, #0]
  return(result);
 800ff44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ff4a:	f06f 0305 	mvn.w	r3, #5
 800ff4e:	607b      	str	r3, [r7, #4]
 800ff50:	e010      	b.n	800ff74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff52:	4b0b      	ldr	r3, [pc, #44]	; (800ff80 <osKernelStart+0x48>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d109      	bne.n	800ff6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff5a:	f7ff ffbf 	bl	800fedc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff5e:	4b08      	ldr	r3, [pc, #32]	; (800ff80 <osKernelStart+0x48>)
 800ff60:	2202      	movs	r2, #2
 800ff62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff64:	f001 f87c 	bl	8011060 <vTaskStartScheduler>
      stat = osOK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	607b      	str	r3, [r7, #4]
 800ff6c:	e002      	b.n	800ff74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ff6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff74:	687b      	ldr	r3, [r7, #4]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	20003f64 	.word	0x20003f64

0800ff84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b08e      	sub	sp, #56	; 0x38
 800ff88:	af04      	add	r7, sp, #16
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	60b9      	str	r1, [r7, #8]
 800ff8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ff90:	2300      	movs	r3, #0
 800ff92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff94:	f3ef 8305 	mrs	r3, IPSR
 800ff98:	617b      	str	r3, [r7, #20]
  return(result);
 800ff9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d17e      	bne.n	801009e <osThreadNew+0x11a>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d07b      	beq.n	801009e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ffa6:	2380      	movs	r3, #128	; 0x80
 800ffa8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ffaa:	2318      	movs	r3, #24
 800ffac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ffb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ffb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d045      	beq.n	801004a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d002      	beq.n	800ffcc <osThreadNew+0x48>
        name = attr->name;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	699b      	ldr	r3, [r3, #24]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d002      	beq.n	800ffda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	699b      	ldr	r3, [r3, #24]
 800ffd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d008      	beq.n	800fff2 <osThreadNew+0x6e>
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	2b38      	cmp	r3, #56	; 0x38
 800ffe4:	d805      	bhi.n	800fff2 <osThreadNew+0x6e>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <osThreadNew+0x72>
        return (NULL);
 800fff2:	2300      	movs	r3, #0
 800fff4:	e054      	b.n	80100a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d003      	beq.n	8010006 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	695b      	ldr	r3, [r3, #20]
 8010002:	089b      	lsrs	r3, r3, #2
 8010004:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00e      	beq.n	801002c <osThreadNew+0xa8>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	2ba7      	cmp	r3, #167	; 0xa7
 8010014:	d90a      	bls.n	801002c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801001a:	2b00      	cmp	r3, #0
 801001c:	d006      	beq.n	801002c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d002      	beq.n	801002c <osThreadNew+0xa8>
        mem = 1;
 8010026:	2301      	movs	r3, #1
 8010028:	61bb      	str	r3, [r7, #24]
 801002a:	e010      	b.n	801004e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10c      	bne.n	801004e <osThreadNew+0xca>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d108      	bne.n	801004e <osThreadNew+0xca>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	691b      	ldr	r3, [r3, #16]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d104      	bne.n	801004e <osThreadNew+0xca>
          mem = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	61bb      	str	r3, [r7, #24]
 8010048:	e001      	b.n	801004e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801004a:	2300      	movs	r3, #0
 801004c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d110      	bne.n	8010076 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801005c:	9202      	str	r2, [sp, #8]
 801005e:	9301      	str	r3, [sp, #4]
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	9300      	str	r3, [sp, #0]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	6a3a      	ldr	r2, [r7, #32]
 8010068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801006a:	68f8      	ldr	r0, [r7, #12]
 801006c:	f000 fe0c 	bl	8010c88 <xTaskCreateStatic>
 8010070:	4603      	mov	r3, r0
 8010072:	613b      	str	r3, [r7, #16]
 8010074:	e013      	b.n	801009e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d110      	bne.n	801009e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801007c:	6a3b      	ldr	r3, [r7, #32]
 801007e:	b29a      	uxth	r2, r3
 8010080:	f107 0310 	add.w	r3, r7, #16
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f000 fe57 	bl	8010d42 <xTaskCreate>
 8010094:	4603      	mov	r3, r0
 8010096:	2b01      	cmp	r3, #1
 8010098:	d001      	beq.n	801009e <osThreadNew+0x11a>
            hTask = NULL;
 801009a:	2300      	movs	r3, #0
 801009c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801009e:	693b      	ldr	r3, [r7, #16]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3728      	adds	r7, #40	; 0x28
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100b0:	f3ef 8305 	mrs	r3, IPSR
 80100b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80100b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d003      	beq.n	80100c4 <osDelay+0x1c>
    stat = osErrorISR;
 80100bc:	f06f 0305 	mvn.w	r3, #5
 80100c0:	60fb      	str	r3, [r7, #12]
 80100c2:	e007      	b.n	80100d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d002      	beq.n	80100d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 ff92 	bl	8010ff8 <vTaskDelay>
    }
  }

  return (stat);
 80100d4:	68fb      	ldr	r3, [r7, #12]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
	...

080100e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80100e0:	b480      	push	{r7}
 80100e2:	b085      	sub	sp, #20
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4a07      	ldr	r2, [pc, #28]	; (801010c <vApplicationGetIdleTaskMemory+0x2c>)
 80100f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	4a06      	ldr	r2, [pc, #24]	; (8010110 <vApplicationGetIdleTaskMemory+0x30>)
 80100f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2280      	movs	r2, #128	; 0x80
 80100fc:	601a      	str	r2, [r3, #0]
}
 80100fe:	bf00      	nop
 8010100:	3714      	adds	r7, #20
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	20003f68 	.word	0x20003f68
 8010110:	20004010 	.word	0x20004010

08010114 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	4a07      	ldr	r2, [pc, #28]	; (8010140 <vApplicationGetTimerTaskMemory+0x2c>)
 8010124:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	4a06      	ldr	r2, [pc, #24]	; (8010144 <vApplicationGetTimerTaskMemory+0x30>)
 801012a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010132:	601a      	str	r2, [r3, #0]
}
 8010134:	bf00      	nop
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	20004210 	.word	0x20004210
 8010144:	200042b8 	.word	0x200042b8

08010148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f103 0208 	add.w	r2, r3, #8
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f04f 32ff 	mov.w	r2, #4294967295
 8010160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f103 0208 	add.w	r2, r3, #8
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f103 0208 	add.w	r2, r3, #8
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010196:	bf00      	nop
 8010198:	370c      	adds	r7, #12
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101a2:	b480      	push	{r7}
 80101a4:	b085      	sub	sp, #20
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	689a      	ldr	r2, [r3, #8]
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	1c5a      	adds	r2, r3, #1
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	601a      	str	r2, [r3, #0]
}
 80101de:	bf00      	nop
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101ea:	b480      	push	{r7}
 80101ec:	b085      	sub	sp, #20
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010200:	d103      	bne.n	801020a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	60fb      	str	r3, [r7, #12]
 8010208:	e00c      	b.n	8010224 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	3308      	adds	r3, #8
 801020e:	60fb      	str	r3, [r7, #12]
 8010210:	e002      	b.n	8010218 <vListInsert+0x2e>
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	60fb      	str	r3, [r7, #12]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	429a      	cmp	r2, r3
 8010222:	d2f6      	bcs.n	8010212 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	685a      	ldr	r2, [r3, #4]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	683a      	ldr	r2, [r7, #0]
 8010232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	1c5a      	adds	r2, r3, #1
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	601a      	str	r2, [r3, #0]
}
 8010250:	bf00      	nop
 8010252:	3714      	adds	r7, #20
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr

0801025c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801025c:	b480      	push	{r7}
 801025e:	b085      	sub	sp, #20
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	6892      	ldr	r2, [r2, #8]
 8010272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	6852      	ldr	r2, [r2, #4]
 801027c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	429a      	cmp	r2, r3
 8010286:	d103      	bne.n	8010290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	689a      	ldr	r2, [r3, #8]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	1e5a      	subs	r2, r3, #1
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3714      	adds	r7, #20
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10a      	bne.n	80102da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80102d6:	bf00      	nop
 80102d8:	e7fe      	b.n	80102d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80102da:	f002 f87b 	bl	80123d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102e6:	68f9      	ldr	r1, [r7, #12]
 80102e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102ea:	fb01 f303 	mul.w	r3, r1, r3
 80102ee:	441a      	add	r2, r3
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801030a:	3b01      	subs	r3, #1
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010310:	fb01 f303 	mul.w	r3, r1, r3
 8010314:	441a      	add	r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	22ff      	movs	r2, #255	; 0xff
 801031e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	22ff      	movs	r2, #255	; 0xff
 8010326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d114      	bne.n	801035a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d01a      	beq.n	801036e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	3310      	adds	r3, #16
 801033c:	4618      	mov	r0, r3
 801033e:	f001 f929 	bl	8011594 <xTaskRemoveFromEventList>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d012      	beq.n	801036e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010348:	4b0c      	ldr	r3, [pc, #48]	; (801037c <xQueueGenericReset+0xcc>)
 801034a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	e009      	b.n	801036e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	3310      	adds	r3, #16
 801035e:	4618      	mov	r0, r3
 8010360:	f7ff fef2 	bl	8010148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	3324      	adds	r3, #36	; 0x24
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff feed 	bl	8010148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801036e:	f002 f861 	bl	8012434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010372:	2301      	movs	r3, #1
}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	e000ed04 	.word	0xe000ed04

08010380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08e      	sub	sp, #56	; 0x38
 8010384:	af02      	add	r7, sp, #8
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
 801038c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10a      	bne.n	80103aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010398:	f383 8811 	msr	BASEPRI, r3
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f3bf 8f4f 	dsb	sy
 80103a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80103a6:	bf00      	nop
 80103a8:	e7fe      	b.n	80103a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d10a      	bne.n	80103c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80103b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b4:	f383 8811 	msr	BASEPRI, r3
 80103b8:	f3bf 8f6f 	isb	sy
 80103bc:	f3bf 8f4f 	dsb	sy
 80103c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80103c2:	bf00      	nop
 80103c4:	e7fe      	b.n	80103c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d002      	beq.n	80103d2 <xQueueGenericCreateStatic+0x52>
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <xQueueGenericCreateStatic+0x56>
 80103d2:	2301      	movs	r3, #1
 80103d4:	e000      	b.n	80103d8 <xQueueGenericCreateStatic+0x58>
 80103d6:	2300      	movs	r3, #0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10a      	bne.n	80103f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	623b      	str	r3, [r7, #32]
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d102      	bne.n	80103fe <xQueueGenericCreateStatic+0x7e>
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d101      	bne.n	8010402 <xQueueGenericCreateStatic+0x82>
 80103fe:	2301      	movs	r3, #1
 8010400:	e000      	b.n	8010404 <xQueueGenericCreateStatic+0x84>
 8010402:	2300      	movs	r3, #0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10a      	bne.n	801041e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	61fb      	str	r3, [r7, #28]
}
 801041a:	bf00      	nop
 801041c:	e7fe      	b.n	801041c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801041e:	2350      	movs	r3, #80	; 0x50
 8010420:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2b50      	cmp	r3, #80	; 0x50
 8010426:	d00a      	beq.n	801043e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	61bb      	str	r3, [r7, #24]
}
 801043a:	bf00      	nop
 801043c:	e7fe      	b.n	801043c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801043e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00d      	beq.n	8010466 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044c:	2201      	movs	r2, #1
 801044e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010452:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	4613      	mov	r3, r2
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	68b9      	ldr	r1, [r7, #8]
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f000 f805 	bl	8010470 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010468:	4618      	mov	r0, r3
 801046a:	3730      	adds	r7, #48	; 0x30
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
 801047c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d103      	bne.n	801048c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	69ba      	ldr	r2, [r7, #24]
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	e002      	b.n	8010492 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801049e:	2101      	movs	r1, #1
 80104a0:	69b8      	ldr	r0, [r7, #24]
 80104a2:	f7ff ff05 	bl	80102b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	78fa      	ldrb	r2, [r7, #3]
 80104aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80104ae:	bf00      	nop
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
	...

080104b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b08e      	sub	sp, #56	; 0x38
 80104bc:	af00      	add	r7, sp, #0
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	607a      	str	r2, [r7, #4]
 80104c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80104c6:	2300      	movs	r3, #0
 80104c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d10a      	bne.n	80104ea <xQueueGenericSend+0x32>
	__asm volatile
 80104d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d8:	f383 8811 	msr	BASEPRI, r3
 80104dc:	f3bf 8f6f 	isb	sy
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80104e6:	bf00      	nop
 80104e8:	e7fe      	b.n	80104e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d103      	bne.n	80104f8 <xQueueGenericSend+0x40>
 80104f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d101      	bne.n	80104fc <xQueueGenericSend+0x44>
 80104f8:	2301      	movs	r3, #1
 80104fa:	e000      	b.n	80104fe <xQueueGenericSend+0x46>
 80104fc:	2300      	movs	r3, #0
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d10a      	bne.n	8010518 <xQueueGenericSend+0x60>
	__asm volatile
 8010502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010506:	f383 8811 	msr	BASEPRI, r3
 801050a:	f3bf 8f6f 	isb	sy
 801050e:	f3bf 8f4f 	dsb	sy
 8010512:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010514:	bf00      	nop
 8010516:	e7fe      	b.n	8010516 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2b02      	cmp	r3, #2
 801051c:	d103      	bne.n	8010526 <xQueueGenericSend+0x6e>
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010522:	2b01      	cmp	r3, #1
 8010524:	d101      	bne.n	801052a <xQueueGenericSend+0x72>
 8010526:	2301      	movs	r3, #1
 8010528:	e000      	b.n	801052c <xQueueGenericSend+0x74>
 801052a:	2300      	movs	r3, #0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d10a      	bne.n	8010546 <xQueueGenericSend+0x8e>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010534:	f383 8811 	msr	BASEPRI, r3
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	623b      	str	r3, [r7, #32]
}
 8010542:	bf00      	nop
 8010544:	e7fe      	b.n	8010544 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010546:	f001 f9e7 	bl	8011918 <xTaskGetSchedulerState>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <xQueueGenericSend+0x9e>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d101      	bne.n	801055a <xQueueGenericSend+0xa2>
 8010556:	2301      	movs	r3, #1
 8010558:	e000      	b.n	801055c <xQueueGenericSend+0xa4>
 801055a:	2300      	movs	r3, #0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10a      	bne.n	8010576 <xQueueGenericSend+0xbe>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	61fb      	str	r3, [r7, #28]
}
 8010572:	bf00      	nop
 8010574:	e7fe      	b.n	8010574 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010576:	f001 ff2d 	bl	80123d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801057a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801057e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010582:	429a      	cmp	r2, r3
 8010584:	d302      	bcc.n	801058c <xQueueGenericSend+0xd4>
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d129      	bne.n	80105e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	68b9      	ldr	r1, [r7, #8]
 8010590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010592:	f000 fa0b 	bl	80109ac <prvCopyDataToQueue>
 8010596:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801059c:	2b00      	cmp	r3, #0
 801059e:	d010      	beq.n	80105c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	3324      	adds	r3, #36	; 0x24
 80105a4:	4618      	mov	r0, r3
 80105a6:	f000 fff5 	bl	8011594 <xTaskRemoveFromEventList>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d013      	beq.n	80105d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80105b0:	4b3f      	ldr	r3, [pc, #252]	; (80106b0 <xQueueGenericSend+0x1f8>)
 80105b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b6:	601a      	str	r2, [r3, #0]
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	f3bf 8f6f 	isb	sy
 80105c0:	e00a      	b.n	80105d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80105c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d007      	beq.n	80105d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80105c8:	4b39      	ldr	r3, [pc, #228]	; (80106b0 <xQueueGenericSend+0x1f8>)
 80105ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ce:	601a      	str	r2, [r3, #0]
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80105d8:	f001 ff2c 	bl	8012434 <vPortExitCritical>
				return pdPASS;
 80105dc:	2301      	movs	r3, #1
 80105de:	e063      	b.n	80106a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d103      	bne.n	80105ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80105e6:	f001 ff25 	bl	8012434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80105ea:	2300      	movs	r3, #0
 80105ec:	e05c      	b.n	80106a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d106      	bne.n	8010602 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105f4:	f107 0314 	add.w	r3, r7, #20
 80105f8:	4618      	mov	r0, r3
 80105fa:	f001 f82f 	bl	801165c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105fe:	2301      	movs	r3, #1
 8010600:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010602:	f001 ff17 	bl	8012434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010606:	f000 fd9b 	bl	8011140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801060a:	f001 fee3 	bl	80123d4 <vPortEnterCritical>
 801060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010614:	b25b      	sxtb	r3, r3
 8010616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801061a:	d103      	bne.n	8010624 <xQueueGenericSend+0x16c>
 801061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061e:	2200      	movs	r2, #0
 8010620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801062a:	b25b      	sxtb	r3, r3
 801062c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010630:	d103      	bne.n	801063a <xQueueGenericSend+0x182>
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	2200      	movs	r2, #0
 8010636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801063a:	f001 fefb 	bl	8012434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801063e:	1d3a      	adds	r2, r7, #4
 8010640:	f107 0314 	add.w	r3, r7, #20
 8010644:	4611      	mov	r1, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f001 f81e 	bl	8011688 <xTaskCheckForTimeOut>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d124      	bne.n	801069c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010654:	f000 faa2 	bl	8010b9c <prvIsQueueFull>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d018      	beq.n	8010690 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	3310      	adds	r3, #16
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	4611      	mov	r1, r2
 8010666:	4618      	mov	r0, r3
 8010668:	f000 ff44 	bl	80114f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801066c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801066e:	f000 fa2d 	bl	8010acc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010672:	f000 fd73 	bl	801115c <xTaskResumeAll>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	f47f af7c 	bne.w	8010576 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801067e:	4b0c      	ldr	r3, [pc, #48]	; (80106b0 <xQueueGenericSend+0x1f8>)
 8010680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010684:	601a      	str	r2, [r3, #0]
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	f3bf 8f6f 	isb	sy
 801068e:	e772      	b.n	8010576 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010692:	f000 fa1b 	bl	8010acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010696:	f000 fd61 	bl	801115c <xTaskResumeAll>
 801069a:	e76c      	b.n	8010576 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801069c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801069e:	f000 fa15 	bl	8010acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106a2:	f000 fd5b 	bl	801115c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80106a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3738      	adds	r7, #56	; 0x38
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	e000ed04 	.word	0xe000ed04

080106b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b090      	sub	sp, #64	; 0x40
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80106c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d10a      	bne.n	80106e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80106cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d0:	f383 8811 	msr	BASEPRI, r3
 80106d4:	f3bf 8f6f 	isb	sy
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80106de:	bf00      	nop
 80106e0:	e7fe      	b.n	80106e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d103      	bne.n	80106f0 <xQueueGenericSendFromISR+0x3c>
 80106e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d101      	bne.n	80106f4 <xQueueGenericSendFromISR+0x40>
 80106f0:	2301      	movs	r3, #1
 80106f2:	e000      	b.n	80106f6 <xQueueGenericSendFromISR+0x42>
 80106f4:	2300      	movs	r3, #0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10a      	bne.n	8010710 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801070c:	bf00      	nop
 801070e:	e7fe      	b.n	801070e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2b02      	cmp	r3, #2
 8010714:	d103      	bne.n	801071e <xQueueGenericSendFromISR+0x6a>
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071a:	2b01      	cmp	r3, #1
 801071c:	d101      	bne.n	8010722 <xQueueGenericSendFromISR+0x6e>
 801071e:	2301      	movs	r3, #1
 8010720:	e000      	b.n	8010724 <xQueueGenericSendFromISR+0x70>
 8010722:	2300      	movs	r3, #0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10a      	bne.n	801073e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	623b      	str	r3, [r7, #32]
}
 801073a:	bf00      	nop
 801073c:	e7fe      	b.n	801073c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801073e:	f001 ff2b 	bl	8012598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010742:	f3ef 8211 	mrs	r2, BASEPRI
 8010746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074a:	f383 8811 	msr	BASEPRI, r3
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	61fa      	str	r2, [r7, #28]
 8010758:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801075a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801075c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801075e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010766:	429a      	cmp	r2, r3
 8010768:	d302      	bcc.n	8010770 <xQueueGenericSendFromISR+0xbc>
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d12f      	bne.n	80107d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801077a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801077e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	68b9      	ldr	r1, [r7, #8]
 8010784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010786:	f000 f911 	bl	80109ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801078a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801078e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010792:	d112      	bne.n	80107ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	2b00      	cmp	r3, #0
 801079a:	d016      	beq.n	80107ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801079c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079e:	3324      	adds	r3, #36	; 0x24
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 fef7 	bl	8011594 <xTaskRemoveFromEventList>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00e      	beq.n	80107ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00b      	beq.n	80107ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2201      	movs	r2, #1
 80107b6:	601a      	str	r2, [r3, #0]
 80107b8:	e007      	b.n	80107ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80107ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107be:	3301      	adds	r3, #1
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	b25a      	sxtb	r2, r3
 80107c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80107ca:	2301      	movs	r3, #1
 80107cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80107ce:	e001      	b.n	80107d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80107d0:	2300      	movs	r3, #0
 80107d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80107de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3740      	adds	r7, #64	; 0x40
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
	...

080107ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08c      	sub	sp, #48	; 0x30
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010802:	2b00      	cmp	r3, #0
 8010804:	d10a      	bne.n	801081c <xQueueReceive+0x30>
	__asm volatile
 8010806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080a:	f383 8811 	msr	BASEPRI, r3
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	623b      	str	r3, [r7, #32]
}
 8010818:	bf00      	nop
 801081a:	e7fe      	b.n	801081a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d103      	bne.n	801082a <xQueueReceive+0x3e>
 8010822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010826:	2b00      	cmp	r3, #0
 8010828:	d101      	bne.n	801082e <xQueueReceive+0x42>
 801082a:	2301      	movs	r3, #1
 801082c:	e000      	b.n	8010830 <xQueueReceive+0x44>
 801082e:	2300      	movs	r3, #0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d10a      	bne.n	801084a <xQueueReceive+0x5e>
	__asm volatile
 8010834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	61fb      	str	r3, [r7, #28]
}
 8010846:	bf00      	nop
 8010848:	e7fe      	b.n	8010848 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801084a:	f001 f865 	bl	8011918 <xTaskGetSchedulerState>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d102      	bne.n	801085a <xQueueReceive+0x6e>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d101      	bne.n	801085e <xQueueReceive+0x72>
 801085a:	2301      	movs	r3, #1
 801085c:	e000      	b.n	8010860 <xQueueReceive+0x74>
 801085e:	2300      	movs	r3, #0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10a      	bne.n	801087a <xQueueReceive+0x8e>
	__asm volatile
 8010864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010868:	f383 8811 	msr	BASEPRI, r3
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	61bb      	str	r3, [r7, #24]
}
 8010876:	bf00      	nop
 8010878:	e7fe      	b.n	8010878 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801087a:	f001 fdab 	bl	80123d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010882:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	2b00      	cmp	r3, #0
 8010888:	d01f      	beq.n	80108ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801088a:	68b9      	ldr	r1, [r7, #8]
 801088c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801088e:	f000 f8f7 	bl	8010a80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	1e5a      	subs	r2, r3, #1
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00f      	beq.n	80108c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a4:	3310      	adds	r3, #16
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 fe74 	bl	8011594 <xTaskRemoveFromEventList>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d007      	beq.n	80108c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80108b2:	4b3d      	ldr	r3, [pc, #244]	; (80109a8 <xQueueReceive+0x1bc>)
 80108b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108b8:	601a      	str	r2, [r3, #0]
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108c2:	f001 fdb7 	bl	8012434 <vPortExitCritical>
				return pdPASS;
 80108c6:	2301      	movs	r3, #1
 80108c8:	e069      	b.n	801099e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d103      	bne.n	80108d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108d0:	f001 fdb0 	bl	8012434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80108d4:	2300      	movs	r3, #0
 80108d6:	e062      	b.n	801099e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d106      	bne.n	80108ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108de:	f107 0310 	add.w	r3, r7, #16
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 feba 	bl	801165c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108e8:	2301      	movs	r3, #1
 80108ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108ec:	f001 fda2 	bl	8012434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108f0:	f000 fc26 	bl	8011140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108f4:	f001 fd6e 	bl	80123d4 <vPortEnterCritical>
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108fe:	b25b      	sxtb	r3, r3
 8010900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010904:	d103      	bne.n	801090e <xQueueReceive+0x122>
 8010906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010908:	2200      	movs	r2, #0
 801090a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010914:	b25b      	sxtb	r3, r3
 8010916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801091a:	d103      	bne.n	8010924 <xQueueReceive+0x138>
 801091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010924:	f001 fd86 	bl	8012434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010928:	1d3a      	adds	r2, r7, #4
 801092a:	f107 0310 	add.w	r3, r7, #16
 801092e:	4611      	mov	r1, r2
 8010930:	4618      	mov	r0, r3
 8010932:	f000 fea9 	bl	8011688 <xTaskCheckForTimeOut>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d123      	bne.n	8010984 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801093c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801093e:	f000 f917 	bl	8010b70 <prvIsQueueEmpty>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d017      	beq.n	8010978 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094a:	3324      	adds	r3, #36	; 0x24
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f000 fdcf 	bl	80114f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010958:	f000 f8b8 	bl	8010acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801095c:	f000 fbfe 	bl	801115c <xTaskResumeAll>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d189      	bne.n	801087a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010966:	4b10      	ldr	r3, [pc, #64]	; (80109a8 <xQueueReceive+0x1bc>)
 8010968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	e780      	b.n	801087a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801097a:	f000 f8a7 	bl	8010acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801097e:	f000 fbed 	bl	801115c <xTaskResumeAll>
 8010982:	e77a      	b.n	801087a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010986:	f000 f8a1 	bl	8010acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801098a:	f000 fbe7 	bl	801115c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801098e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010990:	f000 f8ee 	bl	8010b70 <prvIsQueueEmpty>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	f43f af6f 	beq.w	801087a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801099c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3730      	adds	r7, #48	; 0x30
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	e000ed04 	.word	0xe000ed04

080109ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b086      	sub	sp, #24
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80109b8:	2300      	movs	r3, #0
 80109ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10d      	bne.n	80109e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d14d      	bne.n	8010a6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f000 ffbc 	bl	8011954 <xTaskPriorityDisinherit>
 80109dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	609a      	str	r2, [r3, #8]
 80109e4:	e043      	b.n	8010a6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d119      	bne.n	8010a20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6858      	ldr	r0, [r3, #4]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f4:	461a      	mov	r2, r3
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	f003 fe15 	bl	8014626 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	685a      	ldr	r2, [r3, #4]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a04:	441a      	add	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	685a      	ldr	r2, [r3, #4]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d32b      	bcc.n	8010a6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	605a      	str	r2, [r3, #4]
 8010a1e:	e026      	b.n	8010a6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	68d8      	ldr	r0, [r3, #12]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	461a      	mov	r2, r3
 8010a2a:	68b9      	ldr	r1, [r7, #8]
 8010a2c:	f003 fdfb 	bl	8014626 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	68da      	ldr	r2, [r3, #12]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a38:	425b      	negs	r3, r3
 8010a3a:	441a      	add	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	68da      	ldr	r2, [r3, #12]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d207      	bcs.n	8010a5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	689a      	ldr	r2, [r3, #8]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a54:	425b      	negs	r3, r3
 8010a56:	441a      	add	r2, r3
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d105      	bne.n	8010a6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d002      	beq.n	8010a6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010a76:	697b      	ldr	r3, [r7, #20]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d018      	beq.n	8010ac4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	68da      	ldr	r2, [r3, #12]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9a:	441a      	add	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	68da      	ldr	r2, [r3, #12]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	689b      	ldr	r3, [r3, #8]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d303      	bcc.n	8010ab4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	68d9      	ldr	r1, [r3, #12]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010abc:	461a      	mov	r2, r3
 8010abe:	6838      	ldr	r0, [r7, #0]
 8010ac0:	f003 fdb1 	bl	8014626 <memcpy>
	}
}
 8010ac4:	bf00      	nop
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010ad4:	f001 fc7e 	bl	80123d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ade:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ae0:	e011      	b.n	8010b06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d012      	beq.n	8010b10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	3324      	adds	r3, #36	; 0x24
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fd50 	bl	8011594 <xTaskRemoveFromEventList>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010afa:	f000 fe27 	bl	801174c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010afe:	7bfb      	ldrb	r3, [r7, #15]
 8010b00:	3b01      	subs	r3, #1
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	dce9      	bgt.n	8010ae2 <prvUnlockQueue+0x16>
 8010b0e:	e000      	b.n	8010b12 <prvUnlockQueue+0x46>
					break;
 8010b10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	22ff      	movs	r2, #255	; 0xff
 8010b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010b1a:	f001 fc8b 	bl	8012434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b1e:	f001 fc59 	bl	80123d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b2a:	e011      	b.n	8010b50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d012      	beq.n	8010b5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3310      	adds	r3, #16
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f000 fd2b 	bl	8011594 <xTaskRemoveFromEventList>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d001      	beq.n	8010b48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010b44:	f000 fe02 	bl	801174c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010b48:	7bbb      	ldrb	r3, [r7, #14]
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dce9      	bgt.n	8010b2c <prvUnlockQueue+0x60>
 8010b58:	e000      	b.n	8010b5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010b5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	22ff      	movs	r2, #255	; 0xff
 8010b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010b64:	f001 fc66 	bl	8012434 <vPortExitCritical>
}
 8010b68:	bf00      	nop
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b78:	f001 fc2c 	bl	80123d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d102      	bne.n	8010b8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b84:	2301      	movs	r3, #1
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	e001      	b.n	8010b8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b8e:	f001 fc51 	bl	8012434 <vPortExitCritical>

	return xReturn;
 8010b92:	68fb      	ldr	r3, [r7, #12]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ba4:	f001 fc16 	bl	80123d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d102      	bne.n	8010bba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	60fb      	str	r3, [r7, #12]
 8010bb8:	e001      	b.n	8010bbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010bbe:	f001 fc39 	bl	8012434 <vPortExitCritical>

	return xReturn;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	60fb      	str	r3, [r7, #12]
 8010bda:	e014      	b.n	8010c06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010bdc:	4a0f      	ldr	r2, [pc, #60]	; (8010c1c <vQueueAddToRegistry+0x50>)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d10b      	bne.n	8010c00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010be8:	490c      	ldr	r1, [pc, #48]	; (8010c1c <vQueueAddToRegistry+0x50>)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	683a      	ldr	r2, [r7, #0]
 8010bee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010bf2:	4a0a      	ldr	r2, [pc, #40]	; (8010c1c <vQueueAddToRegistry+0x50>)
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	4413      	add	r3, r2
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010bfe:	e006      	b.n	8010c0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3301      	adds	r3, #1
 8010c04:	60fb      	str	r3, [r7, #12]
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2b07      	cmp	r3, #7
 8010c0a:	d9e7      	bls.n	8010bdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c0c:	bf00      	nop
 8010c0e:	bf00      	nop
 8010c10:	3714      	adds	r7, #20
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	200046b8 	.word	0x200046b8

08010c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b086      	sub	sp, #24
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c30:	f001 fbd0 	bl	80123d4 <vPortEnterCritical>
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c3a:	b25b      	sxtb	r3, r3
 8010c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c40:	d103      	bne.n	8010c4a <vQueueWaitForMessageRestricted+0x2a>
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c50:	b25b      	sxtb	r3, r3
 8010c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c56:	d103      	bne.n	8010c60 <vQueueWaitForMessageRestricted+0x40>
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c60:	f001 fbe8 	bl	8012434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d106      	bne.n	8010c7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	3324      	adds	r3, #36	; 0x24
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	68b9      	ldr	r1, [r7, #8]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f000 fc61 	bl	801153c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c7a:	6978      	ldr	r0, [r7, #20]
 8010c7c:	f7ff ff26 	bl	8010acc <prvUnlockQueue>
	}
 8010c80:	bf00      	nop
 8010c82:	3718      	adds	r7, #24
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b08e      	sub	sp, #56	; 0x38
 8010c8c:	af04      	add	r7, sp, #16
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d10a      	bne.n	8010cb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca0:	f383 8811 	msr	BASEPRI, r3
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	f3bf 8f4f 	dsb	sy
 8010cac:	623b      	str	r3, [r7, #32]
}
 8010cae:	bf00      	nop
 8010cb0:	e7fe      	b.n	8010cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10a      	bne.n	8010cce <xTaskCreateStatic+0x46>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	61fb      	str	r3, [r7, #28]
}
 8010cca:	bf00      	nop
 8010ccc:	e7fe      	b.n	8010ccc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010cce:	23a8      	movs	r3, #168	; 0xa8
 8010cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2ba8      	cmp	r3, #168	; 0xa8
 8010cd6:	d00a      	beq.n	8010cee <xTaskCreateStatic+0x66>
	__asm volatile
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	61bb      	str	r3, [r7, #24]
}
 8010cea:	bf00      	nop
 8010cec:	e7fe      	b.n	8010cec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010cee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d01e      	beq.n	8010d34 <xTaskCreateStatic+0xac>
 8010cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01b      	beq.n	8010d34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	2202      	movs	r2, #2
 8010d0a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d0e:	2300      	movs	r3, #0
 8010d10:	9303      	str	r3, [sp, #12]
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	9302      	str	r3, [sp, #8]
 8010d16:	f107 0314 	add.w	r3, r7, #20
 8010d1a:	9301      	str	r3, [sp, #4]
 8010d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	68b9      	ldr	r1, [r7, #8]
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f000 f850 	bl	8010dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d2e:	f000 f8f3 	bl	8010f18 <prvAddNewTaskToReadyList>
 8010d32:	e001      	b.n	8010d38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010d34:	2300      	movs	r3, #0
 8010d36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d38:	697b      	ldr	r3, [r7, #20]
	}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3728      	adds	r7, #40	; 0x28
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b08c      	sub	sp, #48	; 0x30
 8010d46:	af04      	add	r7, sp, #16
 8010d48:	60f8      	str	r0, [r7, #12]
 8010d4a:	60b9      	str	r1, [r7, #8]
 8010d4c:	603b      	str	r3, [r7, #0]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d52:	88fb      	ldrh	r3, [r7, #6]
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	4618      	mov	r0, r3
 8010d58:	f001 fc5e 	bl	8012618 <pvPortMalloc>
 8010d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00e      	beq.n	8010d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d64:	20a8      	movs	r0, #168	; 0xa8
 8010d66:	f001 fc57 	bl	8012618 <pvPortMalloc>
 8010d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	697a      	ldr	r2, [r7, #20]
 8010d76:	631a      	str	r2, [r3, #48]	; 0x30
 8010d78:	e005      	b.n	8010d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d7a:	6978      	ldr	r0, [r7, #20]
 8010d7c:	f001 fd18 	bl	80127b0 <vPortFree>
 8010d80:	e001      	b.n	8010d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d82:	2300      	movs	r3, #0
 8010d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d017      	beq.n	8010dbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d94:	88fa      	ldrh	r2, [r7, #6]
 8010d96:	2300      	movs	r3, #0
 8010d98:	9303      	str	r3, [sp, #12]
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	9302      	str	r3, [sp, #8]
 8010d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da0:	9301      	str	r3, [sp, #4]
 8010da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da4:	9300      	str	r3, [sp, #0]
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	68b9      	ldr	r1, [r7, #8]
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f000 f80e 	bl	8010dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010db0:	69f8      	ldr	r0, [r7, #28]
 8010db2:	f000 f8b1 	bl	8010f18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010db6:	2301      	movs	r3, #1
 8010db8:	61bb      	str	r3, [r7, #24]
 8010dba:	e002      	b.n	8010dc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3720      	adds	r7, #32
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b088      	sub	sp, #32
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
 8010dd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ddc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	461a      	mov	r2, r3
 8010de4:	21a5      	movs	r1, #165	; 0xa5
 8010de6:	f003 fb48 	bl	801447a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010df4:	3b01      	subs	r3, #1
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	4413      	add	r3, r2
 8010dfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	f023 0307 	bic.w	r3, r3, #7
 8010e02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	f003 0307 	and.w	r3, r3, #7
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00a      	beq.n	8010e24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e12:	f383 8811 	msr	BASEPRI, r3
 8010e16:	f3bf 8f6f 	isb	sy
 8010e1a:	f3bf 8f4f 	dsb	sy
 8010e1e:	617b      	str	r3, [r7, #20]
}
 8010e20:	bf00      	nop
 8010e22:	e7fe      	b.n	8010e22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d01f      	beq.n	8010e6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	61fb      	str	r3, [r7, #28]
 8010e2e:	e012      	b.n	8010e56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	4413      	add	r3, r2
 8010e36:	7819      	ldrb	r1, [r3, #0]
 8010e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	3334      	adds	r3, #52	; 0x34
 8010e40:	460a      	mov	r2, r1
 8010e42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e44:	68ba      	ldr	r2, [r7, #8]
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	4413      	add	r3, r2
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d006      	beq.n	8010e5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	3301      	adds	r3, #1
 8010e54:	61fb      	str	r3, [r7, #28]
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	2b0f      	cmp	r3, #15
 8010e5a:	d9e9      	bls.n	8010e30 <prvInitialiseNewTask+0x64>
 8010e5c:	e000      	b.n	8010e60 <prvInitialiseNewTask+0x94>
			{
				break;
 8010e5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e68:	e003      	b.n	8010e72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e74:	2b37      	cmp	r3, #55	; 0x37
 8010e76:	d901      	bls.n	8010e7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e78:	2337      	movs	r3, #55	; 0x37
 8010e7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	3304      	adds	r3, #4
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7ff f978 	bl	8010188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9a:	3318      	adds	r3, #24
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff f973 	bl	8010188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ea6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eca:	3354      	adds	r3, #84	; 0x54
 8010ecc:	224c      	movs	r2, #76	; 0x4c
 8010ece:	2100      	movs	r1, #0
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f003 fad2 	bl	801447a <memset>
 8010ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed8:	4a0c      	ldr	r2, [pc, #48]	; (8010f0c <prvInitialiseNewTask+0x140>)
 8010eda:	659a      	str	r2, [r3, #88]	; 0x58
 8010edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ede:	4a0c      	ldr	r2, [pc, #48]	; (8010f10 <prvInitialiseNewTask+0x144>)
 8010ee0:	65da      	str	r2, [r3, #92]	; 0x5c
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	4a0b      	ldr	r2, [pc, #44]	; (8010f14 <prvInitialiseNewTask+0x148>)
 8010ee6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ee8:	683a      	ldr	r2, [r7, #0]
 8010eea:	68f9      	ldr	r1, [r7, #12]
 8010eec:	69b8      	ldr	r0, [r7, #24]
 8010eee:	f001 f941 	bl	8012174 <pxPortInitialiseStack>
 8010ef2:	4602      	mov	r2, r0
 8010ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f04:	bf00      	nop
 8010f06:	3720      	adds	r7, #32
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20009828 	.word	0x20009828
 8010f10:	20009890 	.word	0x20009890
 8010f14:	200098f8 	.word	0x200098f8

08010f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f20:	f001 fa58 	bl	80123d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f24:	4b2d      	ldr	r3, [pc, #180]	; (8010fdc <prvAddNewTaskToReadyList+0xc4>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	4a2c      	ldr	r2, [pc, #176]	; (8010fdc <prvAddNewTaskToReadyList+0xc4>)
 8010f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f2e:	4b2c      	ldr	r3, [pc, #176]	; (8010fe0 <prvAddNewTaskToReadyList+0xc8>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d109      	bne.n	8010f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f36:	4a2a      	ldr	r2, [pc, #168]	; (8010fe0 <prvAddNewTaskToReadyList+0xc8>)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f3c:	4b27      	ldr	r3, [pc, #156]	; (8010fdc <prvAddNewTaskToReadyList+0xc4>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d110      	bne.n	8010f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f44:	f000 fc26 	bl	8011794 <prvInitialiseTaskLists>
 8010f48:	e00d      	b.n	8010f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f4a:	4b26      	ldr	r3, [pc, #152]	; (8010fe4 <prvAddNewTaskToReadyList+0xcc>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d109      	bne.n	8010f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f52:	4b23      	ldr	r3, [pc, #140]	; (8010fe0 <prvAddNewTaskToReadyList+0xc8>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d802      	bhi.n	8010f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f60:	4a1f      	ldr	r2, [pc, #124]	; (8010fe0 <prvAddNewTaskToReadyList+0xc8>)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f66:	4b20      	ldr	r3, [pc, #128]	; (8010fe8 <prvAddNewTaskToReadyList+0xd0>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	4a1e      	ldr	r2, [pc, #120]	; (8010fe8 <prvAddNewTaskToReadyList+0xd0>)
 8010f6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f70:	4b1d      	ldr	r3, [pc, #116]	; (8010fe8 <prvAddNewTaskToReadyList+0xd0>)
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7c:	4b1b      	ldr	r3, [pc, #108]	; (8010fec <prvAddNewTaskToReadyList+0xd4>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d903      	bls.n	8010f8c <prvAddNewTaskToReadyList+0x74>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f88:	4a18      	ldr	r2, [pc, #96]	; (8010fec <prvAddNewTaskToReadyList+0xd4>)
 8010f8a:	6013      	str	r3, [r2, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f90:	4613      	mov	r3, r2
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	4413      	add	r3, r2
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	4a15      	ldr	r2, [pc, #84]	; (8010ff0 <prvAddNewTaskToReadyList+0xd8>)
 8010f9a:	441a      	add	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	4610      	mov	r0, r2
 8010fa4:	f7ff f8fd 	bl	80101a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010fa8:	f001 fa44 	bl	8012434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010fac:	4b0d      	ldr	r3, [pc, #52]	; (8010fe4 <prvAddNewTaskToReadyList+0xcc>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d00e      	beq.n	8010fd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010fb4:	4b0a      	ldr	r3, [pc, #40]	; (8010fe0 <prvAddNewTaskToReadyList+0xc8>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d207      	bcs.n	8010fd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010fc2:	4b0c      	ldr	r3, [pc, #48]	; (8010ff4 <prvAddNewTaskToReadyList+0xdc>)
 8010fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fd2:	bf00      	nop
 8010fd4:	3708      	adds	r7, #8
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	bf00      	nop
 8010fdc:	20004bcc 	.word	0x20004bcc
 8010fe0:	200046f8 	.word	0x200046f8
 8010fe4:	20004bd8 	.word	0x20004bd8
 8010fe8:	20004be8 	.word	0x20004be8
 8010fec:	20004bd4 	.word	0x20004bd4
 8010ff0:	200046fc 	.word	0x200046fc
 8010ff4:	e000ed04 	.word	0xe000ed04

08010ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011000:	2300      	movs	r3, #0
 8011002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d017      	beq.n	801103a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801100a:	4b13      	ldr	r3, [pc, #76]	; (8011058 <vTaskDelay+0x60>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00a      	beq.n	8011028 <vTaskDelay+0x30>
	__asm volatile
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	60bb      	str	r3, [r7, #8]
}
 8011024:	bf00      	nop
 8011026:	e7fe      	b.n	8011026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011028:	f000 f88a 	bl	8011140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801102c:	2100      	movs	r1, #0
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 fcfe 	bl	8011a30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011034:	f000 f892 	bl	801115c <xTaskResumeAll>
 8011038:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d107      	bne.n	8011050 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011040:	4b06      	ldr	r3, [pc, #24]	; (801105c <vTaskDelay+0x64>)
 8011042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011046:	601a      	str	r2, [r3, #0]
 8011048:	f3bf 8f4f 	dsb	sy
 801104c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011050:	bf00      	nop
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	20004bf4 	.word	0x20004bf4
 801105c:	e000ed04 	.word	0xe000ed04

08011060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b08a      	sub	sp, #40	; 0x28
 8011064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011066:	2300      	movs	r3, #0
 8011068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801106a:	2300      	movs	r3, #0
 801106c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801106e:	463a      	mov	r2, r7
 8011070:	1d39      	adds	r1, r7, #4
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff f832 	bl	80100e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	68ba      	ldr	r2, [r7, #8]
 8011082:	9202      	str	r2, [sp, #8]
 8011084:	9301      	str	r3, [sp, #4]
 8011086:	2300      	movs	r3, #0
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	2300      	movs	r3, #0
 801108c:	460a      	mov	r2, r1
 801108e:	4924      	ldr	r1, [pc, #144]	; (8011120 <vTaskStartScheduler+0xc0>)
 8011090:	4824      	ldr	r0, [pc, #144]	; (8011124 <vTaskStartScheduler+0xc4>)
 8011092:	f7ff fdf9 	bl	8010c88 <xTaskCreateStatic>
 8011096:	4603      	mov	r3, r0
 8011098:	4a23      	ldr	r2, [pc, #140]	; (8011128 <vTaskStartScheduler+0xc8>)
 801109a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801109c:	4b22      	ldr	r3, [pc, #136]	; (8011128 <vTaskStartScheduler+0xc8>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d002      	beq.n	80110aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80110a4:	2301      	movs	r3, #1
 80110a6:	617b      	str	r3, [r7, #20]
 80110a8:	e001      	b.n	80110ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d102      	bne.n	80110ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80110b4:	f000 fd10 	bl	8011ad8 <xTimerCreateTimerTask>
 80110b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d11b      	bne.n	80110f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80110c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	613b      	str	r3, [r7, #16]
}
 80110d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110d4:	4b15      	ldr	r3, [pc, #84]	; (801112c <vTaskStartScheduler+0xcc>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	3354      	adds	r3, #84	; 0x54
 80110da:	4a15      	ldr	r2, [pc, #84]	; (8011130 <vTaskStartScheduler+0xd0>)
 80110dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80110de:	4b15      	ldr	r3, [pc, #84]	; (8011134 <vTaskStartScheduler+0xd4>)
 80110e0:	f04f 32ff 	mov.w	r2, #4294967295
 80110e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80110e6:	4b14      	ldr	r3, [pc, #80]	; (8011138 <vTaskStartScheduler+0xd8>)
 80110e8:	2201      	movs	r2, #1
 80110ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110ec:	4b13      	ldr	r3, [pc, #76]	; (801113c <vTaskStartScheduler+0xdc>)
 80110ee:	2200      	movs	r2, #0
 80110f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110f2:	f001 f8cd 	bl	8012290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110f6:	e00e      	b.n	8011116 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fe:	d10a      	bne.n	8011116 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011104:	f383 8811 	msr	BASEPRI, r3
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	f3bf 8f4f 	dsb	sy
 8011110:	60fb      	str	r3, [r7, #12]
}
 8011112:	bf00      	nop
 8011114:	e7fe      	b.n	8011114 <vTaskStartScheduler+0xb4>
}
 8011116:	bf00      	nop
 8011118:	3718      	adds	r7, #24
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	08016904 	.word	0x08016904
 8011124:	08011765 	.word	0x08011765
 8011128:	20004bf0 	.word	0x20004bf0
 801112c:	200046f8 	.word	0x200046f8
 8011130:	20000410 	.word	0x20000410
 8011134:	20004bec 	.word	0x20004bec
 8011138:	20004bd8 	.word	0x20004bd8
 801113c:	20004bd0 	.word	0x20004bd0

08011140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011140:	b480      	push	{r7}
 8011142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011144:	4b04      	ldr	r3, [pc, #16]	; (8011158 <vTaskSuspendAll+0x18>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	3301      	adds	r3, #1
 801114a:	4a03      	ldr	r2, [pc, #12]	; (8011158 <vTaskSuspendAll+0x18>)
 801114c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801114e:	bf00      	nop
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr
 8011158:	20004bf4 	.word	0x20004bf4

0801115c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011162:	2300      	movs	r3, #0
 8011164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011166:	2300      	movs	r3, #0
 8011168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801116a:	4b42      	ldr	r3, [pc, #264]	; (8011274 <xTaskResumeAll+0x118>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d10a      	bne.n	8011188 <xTaskResumeAll+0x2c>
	__asm volatile
 8011172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011176:	f383 8811 	msr	BASEPRI, r3
 801117a:	f3bf 8f6f 	isb	sy
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	603b      	str	r3, [r7, #0]
}
 8011184:	bf00      	nop
 8011186:	e7fe      	b.n	8011186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011188:	f001 f924 	bl	80123d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801118c:	4b39      	ldr	r3, [pc, #228]	; (8011274 <xTaskResumeAll+0x118>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	3b01      	subs	r3, #1
 8011192:	4a38      	ldr	r2, [pc, #224]	; (8011274 <xTaskResumeAll+0x118>)
 8011194:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011196:	4b37      	ldr	r3, [pc, #220]	; (8011274 <xTaskResumeAll+0x118>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d162      	bne.n	8011264 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801119e:	4b36      	ldr	r3, [pc, #216]	; (8011278 <xTaskResumeAll+0x11c>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d05e      	beq.n	8011264 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111a6:	e02f      	b.n	8011208 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111a8:	4b34      	ldr	r3, [pc, #208]	; (801127c <xTaskResumeAll+0x120>)
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	3318      	adds	r3, #24
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7ff f851 	bl	801025c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	3304      	adds	r3, #4
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff f84c 	bl	801025c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111c8:	4b2d      	ldr	r3, [pc, #180]	; (8011280 <xTaskResumeAll+0x124>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d903      	bls.n	80111d8 <xTaskResumeAll+0x7c>
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d4:	4a2a      	ldr	r2, [pc, #168]	; (8011280 <xTaskResumeAll+0x124>)
 80111d6:	6013      	str	r3, [r2, #0]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111dc:	4613      	mov	r3, r2
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	4413      	add	r3, r2
 80111e2:	009b      	lsls	r3, r3, #2
 80111e4:	4a27      	ldr	r2, [pc, #156]	; (8011284 <xTaskResumeAll+0x128>)
 80111e6:	441a      	add	r2, r3
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	3304      	adds	r3, #4
 80111ec:	4619      	mov	r1, r3
 80111ee:	4610      	mov	r0, r2
 80111f0:	f7fe ffd7 	bl	80101a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f8:	4b23      	ldr	r3, [pc, #140]	; (8011288 <xTaskResumeAll+0x12c>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fe:	429a      	cmp	r2, r3
 8011200:	d302      	bcc.n	8011208 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011202:	4b22      	ldr	r3, [pc, #136]	; (801128c <xTaskResumeAll+0x130>)
 8011204:	2201      	movs	r2, #1
 8011206:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011208:	4b1c      	ldr	r3, [pc, #112]	; (801127c <xTaskResumeAll+0x120>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d1cb      	bne.n	80111a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011216:	f000 fb5f 	bl	80118d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801121a:	4b1d      	ldr	r3, [pc, #116]	; (8011290 <xTaskResumeAll+0x134>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d010      	beq.n	8011248 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011226:	f000 f847 	bl	80112b8 <xTaskIncrementTick>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d002      	beq.n	8011236 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011230:	4b16      	ldr	r3, [pc, #88]	; (801128c <xTaskResumeAll+0x130>)
 8011232:	2201      	movs	r2, #1
 8011234:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	3b01      	subs	r3, #1
 801123a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d1f1      	bne.n	8011226 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011242:	4b13      	ldr	r3, [pc, #76]	; (8011290 <xTaskResumeAll+0x134>)
 8011244:	2200      	movs	r2, #0
 8011246:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011248:	4b10      	ldr	r3, [pc, #64]	; (801128c <xTaskResumeAll+0x130>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d009      	beq.n	8011264 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011250:	2301      	movs	r3, #1
 8011252:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011254:	4b0f      	ldr	r3, [pc, #60]	; (8011294 <xTaskResumeAll+0x138>)
 8011256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801125a:	601a      	str	r2, [r3, #0]
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011264:	f001 f8e6 	bl	8012434 <vPortExitCritical>

	return xAlreadyYielded;
 8011268:	68bb      	ldr	r3, [r7, #8]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	20004bf4 	.word	0x20004bf4
 8011278:	20004bcc 	.word	0x20004bcc
 801127c:	20004b8c 	.word	0x20004b8c
 8011280:	20004bd4 	.word	0x20004bd4
 8011284:	200046fc 	.word	0x200046fc
 8011288:	200046f8 	.word	0x200046f8
 801128c:	20004be0 	.word	0x20004be0
 8011290:	20004bdc 	.word	0x20004bdc
 8011294:	e000ed04 	.word	0xe000ed04

08011298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801129e:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <xTaskGetTickCount+0x1c>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80112a4:	687b      	ldr	r3, [r7, #4]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	20004bd0 	.word	0x20004bd0

080112b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80112be:	2300      	movs	r3, #0
 80112c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112c2:	4b4f      	ldr	r3, [pc, #316]	; (8011400 <xTaskIncrementTick+0x148>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f040 808f 	bne.w	80113ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80112cc:	4b4d      	ldr	r3, [pc, #308]	; (8011404 <xTaskIncrementTick+0x14c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	3301      	adds	r3, #1
 80112d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112d4:	4a4b      	ldr	r2, [pc, #300]	; (8011404 <xTaskIncrementTick+0x14c>)
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d120      	bne.n	8011322 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80112e0:	4b49      	ldr	r3, [pc, #292]	; (8011408 <xTaskIncrementTick+0x150>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00a      	beq.n	8011300 <xTaskIncrementTick+0x48>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	603b      	str	r3, [r7, #0]
}
 80112fc:	bf00      	nop
 80112fe:	e7fe      	b.n	80112fe <xTaskIncrementTick+0x46>
 8011300:	4b41      	ldr	r3, [pc, #260]	; (8011408 <xTaskIncrementTick+0x150>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	60fb      	str	r3, [r7, #12]
 8011306:	4b41      	ldr	r3, [pc, #260]	; (801140c <xTaskIncrementTick+0x154>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a3f      	ldr	r2, [pc, #252]	; (8011408 <xTaskIncrementTick+0x150>)
 801130c:	6013      	str	r3, [r2, #0]
 801130e:	4a3f      	ldr	r2, [pc, #252]	; (801140c <xTaskIncrementTick+0x154>)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6013      	str	r3, [r2, #0]
 8011314:	4b3e      	ldr	r3, [pc, #248]	; (8011410 <xTaskIncrementTick+0x158>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	3301      	adds	r3, #1
 801131a:	4a3d      	ldr	r2, [pc, #244]	; (8011410 <xTaskIncrementTick+0x158>)
 801131c:	6013      	str	r3, [r2, #0]
 801131e:	f000 fadb 	bl	80118d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011322:	4b3c      	ldr	r3, [pc, #240]	; (8011414 <xTaskIncrementTick+0x15c>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	693a      	ldr	r2, [r7, #16]
 8011328:	429a      	cmp	r2, r3
 801132a:	d349      	bcc.n	80113c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801132c:	4b36      	ldr	r3, [pc, #216]	; (8011408 <xTaskIncrementTick+0x150>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d104      	bne.n	8011340 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011336:	4b37      	ldr	r3, [pc, #220]	; (8011414 <xTaskIncrementTick+0x15c>)
 8011338:	f04f 32ff 	mov.w	r2, #4294967295
 801133c:	601a      	str	r2, [r3, #0]
					break;
 801133e:	e03f      	b.n	80113c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011340:	4b31      	ldr	r3, [pc, #196]	; (8011408 <xTaskIncrementTick+0x150>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011350:	693a      	ldr	r2, [r7, #16]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	429a      	cmp	r2, r3
 8011356:	d203      	bcs.n	8011360 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011358:	4a2e      	ldr	r2, [pc, #184]	; (8011414 <xTaskIncrementTick+0x15c>)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801135e:	e02f      	b.n	80113c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	3304      	adds	r3, #4
 8011364:	4618      	mov	r0, r3
 8011366:	f7fe ff79 	bl	801025c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801136e:	2b00      	cmp	r3, #0
 8011370:	d004      	beq.n	801137c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	3318      	adds	r3, #24
 8011376:	4618      	mov	r0, r3
 8011378:	f7fe ff70 	bl	801025c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011380:	4b25      	ldr	r3, [pc, #148]	; (8011418 <xTaskIncrementTick+0x160>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	429a      	cmp	r2, r3
 8011386:	d903      	bls.n	8011390 <xTaskIncrementTick+0xd8>
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138c:	4a22      	ldr	r2, [pc, #136]	; (8011418 <xTaskIncrementTick+0x160>)
 801138e:	6013      	str	r3, [r2, #0]
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011394:	4613      	mov	r3, r2
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4413      	add	r3, r2
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	4a1f      	ldr	r2, [pc, #124]	; (801141c <xTaskIncrementTick+0x164>)
 801139e:	441a      	add	r2, r3
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	3304      	adds	r3, #4
 80113a4:	4619      	mov	r1, r3
 80113a6:	4610      	mov	r0, r2
 80113a8:	f7fe fefb 	bl	80101a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b0:	4b1b      	ldr	r3, [pc, #108]	; (8011420 <xTaskIncrementTick+0x168>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d3b8      	bcc.n	801132c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80113ba:	2301      	movs	r3, #1
 80113bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113be:	e7b5      	b.n	801132c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80113c0:	4b17      	ldr	r3, [pc, #92]	; (8011420 <xTaskIncrementTick+0x168>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c6:	4915      	ldr	r1, [pc, #84]	; (801141c <xTaskIncrementTick+0x164>)
 80113c8:	4613      	mov	r3, r2
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	4413      	add	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	440b      	add	r3, r1
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d901      	bls.n	80113dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80113d8:	2301      	movs	r3, #1
 80113da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80113dc:	4b11      	ldr	r3, [pc, #68]	; (8011424 <xTaskIncrementTick+0x16c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d007      	beq.n	80113f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80113e4:	2301      	movs	r3, #1
 80113e6:	617b      	str	r3, [r7, #20]
 80113e8:	e004      	b.n	80113f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113ea:	4b0f      	ldr	r3, [pc, #60]	; (8011428 <xTaskIncrementTick+0x170>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	3301      	adds	r3, #1
 80113f0:	4a0d      	ldr	r2, [pc, #52]	; (8011428 <xTaskIncrementTick+0x170>)
 80113f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113f4:	697b      	ldr	r3, [r7, #20]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3718      	adds	r7, #24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	20004bf4 	.word	0x20004bf4
 8011404:	20004bd0 	.word	0x20004bd0
 8011408:	20004b84 	.word	0x20004b84
 801140c:	20004b88 	.word	0x20004b88
 8011410:	20004be4 	.word	0x20004be4
 8011414:	20004bec 	.word	0x20004bec
 8011418:	20004bd4 	.word	0x20004bd4
 801141c:	200046fc 	.word	0x200046fc
 8011420:	200046f8 	.word	0x200046f8
 8011424:	20004be0 	.word	0x20004be0
 8011428:	20004bdc 	.word	0x20004bdc

0801142c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801142c:	b480      	push	{r7}
 801142e:	b085      	sub	sp, #20
 8011430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011432:	4b2a      	ldr	r3, [pc, #168]	; (80114dc <vTaskSwitchContext+0xb0>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d003      	beq.n	8011442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801143a:	4b29      	ldr	r3, [pc, #164]	; (80114e0 <vTaskSwitchContext+0xb4>)
 801143c:	2201      	movs	r2, #1
 801143e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011440:	e046      	b.n	80114d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011442:	4b27      	ldr	r3, [pc, #156]	; (80114e0 <vTaskSwitchContext+0xb4>)
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011448:	4b26      	ldr	r3, [pc, #152]	; (80114e4 <vTaskSwitchContext+0xb8>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	60fb      	str	r3, [r7, #12]
 801144e:	e010      	b.n	8011472 <vTaskSwitchContext+0x46>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10a      	bne.n	801146c <vTaskSwitchContext+0x40>
	__asm volatile
 8011456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145a:	f383 8811 	msr	BASEPRI, r3
 801145e:	f3bf 8f6f 	isb	sy
 8011462:	f3bf 8f4f 	dsb	sy
 8011466:	607b      	str	r3, [r7, #4]
}
 8011468:	bf00      	nop
 801146a:	e7fe      	b.n	801146a <vTaskSwitchContext+0x3e>
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	3b01      	subs	r3, #1
 8011470:	60fb      	str	r3, [r7, #12]
 8011472:	491d      	ldr	r1, [pc, #116]	; (80114e8 <vTaskSwitchContext+0xbc>)
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	4613      	mov	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4413      	add	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	440b      	add	r3, r1
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d0e4      	beq.n	8011450 <vTaskSwitchContext+0x24>
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	4613      	mov	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4a15      	ldr	r2, [pc, #84]	; (80114e8 <vTaskSwitchContext+0xbc>)
 8011492:	4413      	add	r3, r2
 8011494:	60bb      	str	r3, [r7, #8]
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	605a      	str	r2, [r3, #4]
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	685a      	ldr	r2, [r3, #4]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	3308      	adds	r3, #8
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d104      	bne.n	80114b6 <vTaskSwitchContext+0x8a>
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	605a      	str	r2, [r3, #4]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	4a0b      	ldr	r2, [pc, #44]	; (80114ec <vTaskSwitchContext+0xc0>)
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	4a08      	ldr	r2, [pc, #32]	; (80114e4 <vTaskSwitchContext+0xb8>)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114c6:	4b09      	ldr	r3, [pc, #36]	; (80114ec <vTaskSwitchContext+0xc0>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	3354      	adds	r3, #84	; 0x54
 80114cc:	4a08      	ldr	r2, [pc, #32]	; (80114f0 <vTaskSwitchContext+0xc4>)
 80114ce:	6013      	str	r3, [r2, #0]
}
 80114d0:	bf00      	nop
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr
 80114dc:	20004bf4 	.word	0x20004bf4
 80114e0:	20004be0 	.word	0x20004be0
 80114e4:	20004bd4 	.word	0x20004bd4
 80114e8:	200046fc 	.word	0x200046fc
 80114ec:	200046f8 	.word	0x200046f8
 80114f0:	20000410 	.word	0x20000410

080114f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10a      	bne.n	801151a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	60fb      	str	r3, [r7, #12]
}
 8011516:	bf00      	nop
 8011518:	e7fe      	b.n	8011518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801151a:	4b07      	ldr	r3, [pc, #28]	; (8011538 <vTaskPlaceOnEventList+0x44>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	3318      	adds	r3, #24
 8011520:	4619      	mov	r1, r3
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7fe fe61 	bl	80101ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011528:	2101      	movs	r1, #1
 801152a:	6838      	ldr	r0, [r7, #0]
 801152c:	f000 fa80 	bl	8011a30 <prvAddCurrentTaskToDelayedList>
}
 8011530:	bf00      	nop
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	200046f8 	.word	0x200046f8

0801153c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10a      	bne.n	8011564 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	617b      	str	r3, [r7, #20]
}
 8011560:	bf00      	nop
 8011562:	e7fe      	b.n	8011562 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011564:	4b0a      	ldr	r3, [pc, #40]	; (8011590 <vTaskPlaceOnEventListRestricted+0x54>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	3318      	adds	r3, #24
 801156a:	4619      	mov	r1, r3
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f7fe fe18 	bl	80101a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d002      	beq.n	801157e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011578:	f04f 33ff 	mov.w	r3, #4294967295
 801157c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801157e:	6879      	ldr	r1, [r7, #4]
 8011580:	68b8      	ldr	r0, [r7, #8]
 8011582:	f000 fa55 	bl	8011a30 <prvAddCurrentTaskToDelayedList>
	}
 8011586:	bf00      	nop
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	200046f8 	.word	0x200046f8

08011594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b086      	sub	sp, #24
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10a      	bne.n	80115c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80115aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ae:	f383 8811 	msr	BASEPRI, r3
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	f3bf 8f4f 	dsb	sy
 80115ba:	60fb      	str	r3, [r7, #12]
}
 80115bc:	bf00      	nop
 80115be:	e7fe      	b.n	80115be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	3318      	adds	r3, #24
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fe fe49 	bl	801025c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115ca:	4b1e      	ldr	r3, [pc, #120]	; (8011644 <xTaskRemoveFromEventList+0xb0>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d11d      	bne.n	801160e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	3304      	adds	r3, #4
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fe fe40 	bl	801025c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e0:	4b19      	ldr	r3, [pc, #100]	; (8011648 <xTaskRemoveFromEventList+0xb4>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d903      	bls.n	80115f0 <xTaskRemoveFromEventList+0x5c>
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ec:	4a16      	ldr	r2, [pc, #88]	; (8011648 <xTaskRemoveFromEventList+0xb4>)
 80115ee:	6013      	str	r3, [r2, #0]
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f4:	4613      	mov	r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	4413      	add	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4a13      	ldr	r2, [pc, #76]	; (801164c <xTaskRemoveFromEventList+0xb8>)
 80115fe:	441a      	add	r2, r3
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	3304      	adds	r3, #4
 8011604:	4619      	mov	r1, r3
 8011606:	4610      	mov	r0, r2
 8011608:	f7fe fdcb 	bl	80101a2 <vListInsertEnd>
 801160c:	e005      	b.n	801161a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	3318      	adds	r3, #24
 8011612:	4619      	mov	r1, r3
 8011614:	480e      	ldr	r0, [pc, #56]	; (8011650 <xTaskRemoveFromEventList+0xbc>)
 8011616:	f7fe fdc4 	bl	80101a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801161e:	4b0d      	ldr	r3, [pc, #52]	; (8011654 <xTaskRemoveFromEventList+0xc0>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011624:	429a      	cmp	r2, r3
 8011626:	d905      	bls.n	8011634 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011628:	2301      	movs	r3, #1
 801162a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801162c:	4b0a      	ldr	r3, [pc, #40]	; (8011658 <xTaskRemoveFromEventList+0xc4>)
 801162e:	2201      	movs	r2, #1
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	e001      	b.n	8011638 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011634:	2300      	movs	r3, #0
 8011636:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011638:	697b      	ldr	r3, [r7, #20]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3718      	adds	r7, #24
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	20004bf4 	.word	0x20004bf4
 8011648:	20004bd4 	.word	0x20004bd4
 801164c:	200046fc 	.word	0x200046fc
 8011650:	20004b8c 	.word	0x20004b8c
 8011654:	200046f8 	.word	0x200046f8
 8011658:	20004be0 	.word	0x20004be0

0801165c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011664:	4b06      	ldr	r3, [pc, #24]	; (8011680 <vTaskInternalSetTimeOutState+0x24>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801166c:	4b05      	ldr	r3, [pc, #20]	; (8011684 <vTaskInternalSetTimeOutState+0x28>)
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	605a      	str	r2, [r3, #4]
}
 8011674:	bf00      	nop
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr
 8011680:	20004be4 	.word	0x20004be4
 8011684:	20004bd0 	.word	0x20004bd0

08011688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b088      	sub	sp, #32
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10a      	bne.n	80116ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	613b      	str	r3, [r7, #16]
}
 80116aa:	bf00      	nop
 80116ac:	e7fe      	b.n	80116ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10a      	bne.n	80116ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80116b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b8:	f383 8811 	msr	BASEPRI, r3
 80116bc:	f3bf 8f6f 	isb	sy
 80116c0:	f3bf 8f4f 	dsb	sy
 80116c4:	60fb      	str	r3, [r7, #12]
}
 80116c6:	bf00      	nop
 80116c8:	e7fe      	b.n	80116c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80116ca:	f000 fe83 	bl	80123d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116ce:	4b1d      	ldr	r3, [pc, #116]	; (8011744 <xTaskCheckForTimeOut+0xbc>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e6:	d102      	bne.n	80116ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116e8:	2300      	movs	r3, #0
 80116ea:	61fb      	str	r3, [r7, #28]
 80116ec:	e023      	b.n	8011736 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	4b15      	ldr	r3, [pc, #84]	; (8011748 <xTaskCheckForTimeOut+0xc0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d007      	beq.n	801170a <xTaskCheckForTimeOut+0x82>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	69ba      	ldr	r2, [r7, #24]
 8011700:	429a      	cmp	r2, r3
 8011702:	d302      	bcc.n	801170a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011704:	2301      	movs	r3, #1
 8011706:	61fb      	str	r3, [r7, #28]
 8011708:	e015      	b.n	8011736 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	697a      	ldr	r2, [r7, #20]
 8011710:	429a      	cmp	r2, r3
 8011712:	d20b      	bcs.n	801172c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	1ad2      	subs	r2, r2, r3
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7ff ff9b 	bl	801165c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011726:	2300      	movs	r3, #0
 8011728:	61fb      	str	r3, [r7, #28]
 801172a:	e004      	b.n	8011736 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	2200      	movs	r2, #0
 8011730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011732:	2301      	movs	r3, #1
 8011734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011736:	f000 fe7d 	bl	8012434 <vPortExitCritical>

	return xReturn;
 801173a:	69fb      	ldr	r3, [r7, #28]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3720      	adds	r7, #32
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	20004bd0 	.word	0x20004bd0
 8011748:	20004be4 	.word	0x20004be4

0801174c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801174c:	b480      	push	{r7}
 801174e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011750:	4b03      	ldr	r3, [pc, #12]	; (8011760 <vTaskMissedYield+0x14>)
 8011752:	2201      	movs	r2, #1
 8011754:	601a      	str	r2, [r3, #0]
}
 8011756:	bf00      	nop
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr
 8011760:	20004be0 	.word	0x20004be0

08011764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801176c:	f000 f852 	bl	8011814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011770:	4b06      	ldr	r3, [pc, #24]	; (801178c <prvIdleTask+0x28>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b01      	cmp	r3, #1
 8011776:	d9f9      	bls.n	801176c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <prvIdleTask+0x2c>)
 801177a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801177e:	601a      	str	r2, [r3, #0]
 8011780:	f3bf 8f4f 	dsb	sy
 8011784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011788:	e7f0      	b.n	801176c <prvIdleTask+0x8>
 801178a:	bf00      	nop
 801178c:	200046fc 	.word	0x200046fc
 8011790:	e000ed04 	.word	0xe000ed04

08011794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
 801179e:	e00c      	b.n	80117ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	4613      	mov	r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4413      	add	r3, r2
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	4a12      	ldr	r2, [pc, #72]	; (80117f4 <prvInitialiseTaskLists+0x60>)
 80117ac:	4413      	add	r3, r2
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe fcca 	bl	8010148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	3301      	adds	r3, #1
 80117b8:	607b      	str	r3, [r7, #4]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b37      	cmp	r3, #55	; 0x37
 80117be:	d9ef      	bls.n	80117a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117c0:	480d      	ldr	r0, [pc, #52]	; (80117f8 <prvInitialiseTaskLists+0x64>)
 80117c2:	f7fe fcc1 	bl	8010148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117c6:	480d      	ldr	r0, [pc, #52]	; (80117fc <prvInitialiseTaskLists+0x68>)
 80117c8:	f7fe fcbe 	bl	8010148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117cc:	480c      	ldr	r0, [pc, #48]	; (8011800 <prvInitialiseTaskLists+0x6c>)
 80117ce:	f7fe fcbb 	bl	8010148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117d2:	480c      	ldr	r0, [pc, #48]	; (8011804 <prvInitialiseTaskLists+0x70>)
 80117d4:	f7fe fcb8 	bl	8010148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117d8:	480b      	ldr	r0, [pc, #44]	; (8011808 <prvInitialiseTaskLists+0x74>)
 80117da:	f7fe fcb5 	bl	8010148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117de:	4b0b      	ldr	r3, [pc, #44]	; (801180c <prvInitialiseTaskLists+0x78>)
 80117e0:	4a05      	ldr	r2, [pc, #20]	; (80117f8 <prvInitialiseTaskLists+0x64>)
 80117e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117e4:	4b0a      	ldr	r3, [pc, #40]	; (8011810 <prvInitialiseTaskLists+0x7c>)
 80117e6:	4a05      	ldr	r2, [pc, #20]	; (80117fc <prvInitialiseTaskLists+0x68>)
 80117e8:	601a      	str	r2, [r3, #0]
}
 80117ea:	bf00      	nop
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	200046fc 	.word	0x200046fc
 80117f8:	20004b5c 	.word	0x20004b5c
 80117fc:	20004b70 	.word	0x20004b70
 8011800:	20004b8c 	.word	0x20004b8c
 8011804:	20004ba0 	.word	0x20004ba0
 8011808:	20004bb8 	.word	0x20004bb8
 801180c:	20004b84 	.word	0x20004b84
 8011810:	20004b88 	.word	0x20004b88

08011814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801181a:	e019      	b.n	8011850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801181c:	f000 fdda 	bl	80123d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011820:	4b10      	ldr	r3, [pc, #64]	; (8011864 <prvCheckTasksWaitingTermination+0x50>)
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	68db      	ldr	r3, [r3, #12]
 8011826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3304      	adds	r3, #4
 801182c:	4618      	mov	r0, r3
 801182e:	f7fe fd15 	bl	801025c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011832:	4b0d      	ldr	r3, [pc, #52]	; (8011868 <prvCheckTasksWaitingTermination+0x54>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	3b01      	subs	r3, #1
 8011838:	4a0b      	ldr	r2, [pc, #44]	; (8011868 <prvCheckTasksWaitingTermination+0x54>)
 801183a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801183c:	4b0b      	ldr	r3, [pc, #44]	; (801186c <prvCheckTasksWaitingTermination+0x58>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	3b01      	subs	r3, #1
 8011842:	4a0a      	ldr	r2, [pc, #40]	; (801186c <prvCheckTasksWaitingTermination+0x58>)
 8011844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011846:	f000 fdf5 	bl	8012434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f810 	bl	8011870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011850:	4b06      	ldr	r3, [pc, #24]	; (801186c <prvCheckTasksWaitingTermination+0x58>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1e1      	bne.n	801181c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011858:	bf00      	nop
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	20004ba0 	.word	0x20004ba0
 8011868:	20004bcc 	.word	0x20004bcc
 801186c:	20004bb4 	.word	0x20004bb4

08011870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	3354      	adds	r3, #84	; 0x54
 801187c:	4618      	mov	r0, r3
 801187e:	f002 fe19 	bl	80144b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011888:	2b00      	cmp	r3, #0
 801188a:	d108      	bne.n	801189e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011890:	4618      	mov	r0, r3
 8011892:	f000 ff8d 	bl	80127b0 <vPortFree>
				vPortFree( pxTCB );
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 ff8a 	bl	80127b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801189c:	e018      	b.n	80118d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d103      	bne.n	80118b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 ff81 	bl	80127b0 <vPortFree>
	}
 80118ae:	e00f      	b.n	80118d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80118b6:	2b02      	cmp	r3, #2
 80118b8:	d00a      	beq.n	80118d0 <prvDeleteTCB+0x60>
	__asm volatile
 80118ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118be:	f383 8811 	msr	BASEPRI, r3
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	f3bf 8f4f 	dsb	sy
 80118ca:	60fb      	str	r3, [r7, #12]
}
 80118cc:	bf00      	nop
 80118ce:	e7fe      	b.n	80118ce <prvDeleteTCB+0x5e>
	}
 80118d0:	bf00      	nop
 80118d2:	3710      	adds	r7, #16
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118de:	4b0c      	ldr	r3, [pc, #48]	; (8011910 <prvResetNextTaskUnblockTime+0x38>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d104      	bne.n	80118f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118e8:	4b0a      	ldr	r3, [pc, #40]	; (8011914 <prvResetNextTaskUnblockTime+0x3c>)
 80118ea:	f04f 32ff 	mov.w	r2, #4294967295
 80118ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118f0:	e008      	b.n	8011904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118f2:	4b07      	ldr	r3, [pc, #28]	; (8011910 <prvResetNextTaskUnblockTime+0x38>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	4a04      	ldr	r2, [pc, #16]	; (8011914 <prvResetNextTaskUnblockTime+0x3c>)
 8011902:	6013      	str	r3, [r2, #0]
}
 8011904:	bf00      	nop
 8011906:	370c      	adds	r7, #12
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr
 8011910:	20004b84 	.word	0x20004b84
 8011914:	20004bec 	.word	0x20004bec

08011918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801191e:	4b0b      	ldr	r3, [pc, #44]	; (801194c <xTaskGetSchedulerState+0x34>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d102      	bne.n	801192c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011926:	2301      	movs	r3, #1
 8011928:	607b      	str	r3, [r7, #4]
 801192a:	e008      	b.n	801193e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801192c:	4b08      	ldr	r3, [pc, #32]	; (8011950 <xTaskGetSchedulerState+0x38>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d102      	bne.n	801193a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011934:	2302      	movs	r3, #2
 8011936:	607b      	str	r3, [r7, #4]
 8011938:	e001      	b.n	801193e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801193a:	2300      	movs	r3, #0
 801193c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801193e:	687b      	ldr	r3, [r7, #4]
	}
 8011940:	4618      	mov	r0, r3
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	20004bd8 	.word	0x20004bd8
 8011950:	20004bf4 	.word	0x20004bf4

08011954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011960:	2300      	movs	r3, #0
 8011962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d056      	beq.n	8011a18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801196a:	4b2e      	ldr	r3, [pc, #184]	; (8011a24 <xTaskPriorityDisinherit+0xd0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	693a      	ldr	r2, [r7, #16]
 8011970:	429a      	cmp	r2, r3
 8011972:	d00a      	beq.n	801198a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011978:	f383 8811 	msr	BASEPRI, r3
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	f3bf 8f4f 	dsb	sy
 8011984:	60fb      	str	r3, [r7, #12]
}
 8011986:	bf00      	nop
 8011988:	e7fe      	b.n	8011988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801198e:	2b00      	cmp	r3, #0
 8011990:	d10a      	bne.n	80119a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011996:	f383 8811 	msr	BASEPRI, r3
 801199a:	f3bf 8f6f 	isb	sy
 801199e:	f3bf 8f4f 	dsb	sy
 80119a2:	60bb      	str	r3, [r7, #8]
}
 80119a4:	bf00      	nop
 80119a6:	e7fe      	b.n	80119a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119ac:	1e5a      	subs	r2, r3, #1
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d02c      	beq.n	8011a18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d128      	bne.n	8011a18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	3304      	adds	r3, #4
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fe fc46 	bl	801025c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e8:	4b0f      	ldr	r3, [pc, #60]	; (8011a28 <xTaskPriorityDisinherit+0xd4>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d903      	bls.n	80119f8 <xTaskPriorityDisinherit+0xa4>
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f4:	4a0c      	ldr	r2, [pc, #48]	; (8011a28 <xTaskPriorityDisinherit+0xd4>)
 80119f6:	6013      	str	r3, [r2, #0]
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119fc:	4613      	mov	r3, r2
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	4413      	add	r3, r2
 8011a02:	009b      	lsls	r3, r3, #2
 8011a04:	4a09      	ldr	r2, [pc, #36]	; (8011a2c <xTaskPriorityDisinherit+0xd8>)
 8011a06:	441a      	add	r2, r3
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4610      	mov	r0, r2
 8011a10:	f7fe fbc7 	bl	80101a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a14:	2301      	movs	r3, #1
 8011a16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a18:	697b      	ldr	r3, [r7, #20]
	}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	200046f8 	.word	0x200046f8
 8011a28:	20004bd4 	.word	0x20004bd4
 8011a2c:	200046fc 	.word	0x200046fc

08011a30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011a3a:	4b21      	ldr	r3, [pc, #132]	; (8011ac0 <prvAddCurrentTaskToDelayedList+0x90>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a40:	4b20      	ldr	r3, [pc, #128]	; (8011ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3304      	adds	r3, #4
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fe fc08 	bl	801025c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a52:	d10a      	bne.n	8011a6a <prvAddCurrentTaskToDelayedList+0x3a>
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d007      	beq.n	8011a6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a5a:	4b1a      	ldr	r3, [pc, #104]	; (8011ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	4619      	mov	r1, r3
 8011a62:	4819      	ldr	r0, [pc, #100]	; (8011ac8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011a64:	f7fe fb9d 	bl	80101a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a68:	e026      	b.n	8011ab8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4413      	add	r3, r2
 8011a70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a72:	4b14      	ldr	r3, [pc, #80]	; (8011ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d209      	bcs.n	8011a96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a82:	4b12      	ldr	r3, [pc, #72]	; (8011acc <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	4b0f      	ldr	r3, [pc, #60]	; (8011ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	3304      	adds	r3, #4
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4610      	mov	r0, r2
 8011a90:	f7fe fbab 	bl	80101ea <vListInsert>
}
 8011a94:	e010      	b.n	8011ab8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a96:	4b0e      	ldr	r3, [pc, #56]	; (8011ad0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	4b0a      	ldr	r3, [pc, #40]	; (8011ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	f7fe fba1 	bl	80101ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	; (8011ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	68ba      	ldr	r2, [r7, #8]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d202      	bcs.n	8011ab8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011ab2:	4a08      	ldr	r2, [pc, #32]	; (8011ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	6013      	str	r3, [r2, #0]
}
 8011ab8:	bf00      	nop
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	20004bd0 	.word	0x20004bd0
 8011ac4:	200046f8 	.word	0x200046f8
 8011ac8:	20004bb8 	.word	0x20004bb8
 8011acc:	20004b88 	.word	0x20004b88
 8011ad0:	20004b84 	.word	0x20004b84
 8011ad4:	20004bec 	.word	0x20004bec

08011ad8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08a      	sub	sp, #40	; 0x28
 8011adc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011ae2:	f000 fb07 	bl	80120f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011ae6:	4b1c      	ldr	r3, [pc, #112]	; (8011b58 <xTimerCreateTimerTask+0x80>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d021      	beq.n	8011b32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011aee:	2300      	movs	r3, #0
 8011af0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011af2:	2300      	movs	r3, #0
 8011af4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011af6:	1d3a      	adds	r2, r7, #4
 8011af8:	f107 0108 	add.w	r1, r7, #8
 8011afc:	f107 030c 	add.w	r3, r7, #12
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fe fb07 	bl	8010114 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011b06:	6879      	ldr	r1, [r7, #4]
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	68fa      	ldr	r2, [r7, #12]
 8011b0c:	9202      	str	r2, [sp, #8]
 8011b0e:	9301      	str	r3, [sp, #4]
 8011b10:	2302      	movs	r3, #2
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	2300      	movs	r3, #0
 8011b16:	460a      	mov	r2, r1
 8011b18:	4910      	ldr	r1, [pc, #64]	; (8011b5c <xTimerCreateTimerTask+0x84>)
 8011b1a:	4811      	ldr	r0, [pc, #68]	; (8011b60 <xTimerCreateTimerTask+0x88>)
 8011b1c:	f7ff f8b4 	bl	8010c88 <xTaskCreateStatic>
 8011b20:	4603      	mov	r3, r0
 8011b22:	4a10      	ldr	r2, [pc, #64]	; (8011b64 <xTimerCreateTimerTask+0x8c>)
 8011b24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011b26:	4b0f      	ldr	r3, [pc, #60]	; (8011b64 <xTimerCreateTimerTask+0x8c>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d001      	beq.n	8011b32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10a      	bne.n	8011b4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b3c:	f383 8811 	msr	BASEPRI, r3
 8011b40:	f3bf 8f6f 	isb	sy
 8011b44:	f3bf 8f4f 	dsb	sy
 8011b48:	613b      	str	r3, [r7, #16]
}
 8011b4a:	bf00      	nop
 8011b4c:	e7fe      	b.n	8011b4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011b4e:	697b      	ldr	r3, [r7, #20]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3718      	adds	r7, #24
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	20004c28 	.word	0x20004c28
 8011b5c:	0801690c 	.word	0x0801690c
 8011b60:	08011c9d 	.word	0x08011c9d
 8011b64:	20004c2c 	.word	0x20004c2c

08011b68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b08a      	sub	sp, #40	; 0x28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
 8011b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b76:	2300      	movs	r3, #0
 8011b78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d10a      	bne.n	8011b96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b84:	f383 8811 	msr	BASEPRI, r3
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	623b      	str	r3, [r7, #32]
}
 8011b92:	bf00      	nop
 8011b94:	e7fe      	b.n	8011b94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011b96:	4b1a      	ldr	r3, [pc, #104]	; (8011c00 <xTimerGenericCommand+0x98>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d02a      	beq.n	8011bf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	2b05      	cmp	r3, #5
 8011bae:	dc18      	bgt.n	8011be2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011bb0:	f7ff feb2 	bl	8011918 <xTaskGetSchedulerState>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b02      	cmp	r3, #2
 8011bb8:	d109      	bne.n	8011bce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011bba:	4b11      	ldr	r3, [pc, #68]	; (8011c00 <xTimerGenericCommand+0x98>)
 8011bbc:	6818      	ldr	r0, [r3, #0]
 8011bbe:	f107 0110 	add.w	r1, r7, #16
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bc6:	f7fe fc77 	bl	80104b8 <xQueueGenericSend>
 8011bca:	6278      	str	r0, [r7, #36]	; 0x24
 8011bcc:	e012      	b.n	8011bf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011bce:	4b0c      	ldr	r3, [pc, #48]	; (8011c00 <xTimerGenericCommand+0x98>)
 8011bd0:	6818      	ldr	r0, [r3, #0]
 8011bd2:	f107 0110 	add.w	r1, r7, #16
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f7fe fc6d 	bl	80104b8 <xQueueGenericSend>
 8011bde:	6278      	str	r0, [r7, #36]	; 0x24
 8011be0:	e008      	b.n	8011bf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011be2:	4b07      	ldr	r3, [pc, #28]	; (8011c00 <xTimerGenericCommand+0x98>)
 8011be4:	6818      	ldr	r0, [r3, #0]
 8011be6:	f107 0110 	add.w	r1, r7, #16
 8011bea:	2300      	movs	r3, #0
 8011bec:	683a      	ldr	r2, [r7, #0]
 8011bee:	f7fe fd61 	bl	80106b4 <xQueueGenericSendFromISR>
 8011bf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3728      	adds	r7, #40	; 0x28
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	20004c28 	.word	0x20004c28

08011c04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b088      	sub	sp, #32
 8011c08:	af02      	add	r7, sp, #8
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c0e:	4b22      	ldr	r3, [pc, #136]	; (8011c98 <prvProcessExpiredTimer+0x94>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	3304      	adds	r3, #4
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fe fb1d 	bl	801025c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c28:	f003 0304 	and.w	r3, r3, #4
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d022      	beq.n	8011c76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	699a      	ldr	r2, [r3, #24]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	18d1      	adds	r1, r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	683a      	ldr	r2, [r7, #0]
 8011c3c:	6978      	ldr	r0, [r7, #20]
 8011c3e:	f000 f8d1 	bl	8011de4 <prvInsertTimerInActiveList>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d01f      	beq.n	8011c88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c48:	2300      	movs	r3, #0
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	2100      	movs	r1, #0
 8011c52:	6978      	ldr	r0, [r7, #20]
 8011c54:	f7ff ff88 	bl	8011b68 <xTimerGenericCommand>
 8011c58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d113      	bne.n	8011c88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c64:	f383 8811 	msr	BASEPRI, r3
 8011c68:	f3bf 8f6f 	isb	sy
 8011c6c:	f3bf 8f4f 	dsb	sy
 8011c70:	60fb      	str	r3, [r7, #12]
}
 8011c72:	bf00      	nop
 8011c74:	e7fe      	b.n	8011c74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c7c:	f023 0301 	bic.w	r3, r3, #1
 8011c80:	b2da      	uxtb	r2, r3
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	6a1b      	ldr	r3, [r3, #32]
 8011c8c:	6978      	ldr	r0, [r7, #20]
 8011c8e:	4798      	blx	r3
}
 8011c90:	bf00      	nop
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	20004c20 	.word	0x20004c20

08011c9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b084      	sub	sp, #16
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ca4:	f107 0308 	add.w	r3, r7, #8
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f000 f857 	bl	8011d5c <prvGetNextExpireTime>
 8011cae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f000 f803 	bl	8011cc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011cba:	f000 f8d5 	bl	8011e68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cbe:	e7f1      	b.n	8011ca4 <prvTimerTask+0x8>

08011cc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011cca:	f7ff fa39 	bl	8011140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011cce:	f107 0308 	add.w	r3, r7, #8
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f000 f866 	bl	8011da4 <prvSampleTimeNow>
 8011cd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d130      	bne.n	8011d42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10a      	bne.n	8011cfc <prvProcessTimerOrBlockTask+0x3c>
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d806      	bhi.n	8011cfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011cee:	f7ff fa35 	bl	801115c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011cf2:	68f9      	ldr	r1, [r7, #12]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff ff85 	bl	8011c04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011cfa:	e024      	b.n	8011d46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d008      	beq.n	8011d14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011d02:	4b13      	ldr	r3, [pc, #76]	; (8011d50 <prvProcessTimerOrBlockTask+0x90>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d101      	bne.n	8011d10 <prvProcessTimerOrBlockTask+0x50>
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	e000      	b.n	8011d12 <prvProcessTimerOrBlockTask+0x52>
 8011d10:	2300      	movs	r3, #0
 8011d12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011d14:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <prvProcessTimerOrBlockTask+0x94>)
 8011d16:	6818      	ldr	r0, [r3, #0]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	4619      	mov	r1, r3
 8011d22:	f7fe ff7d 	bl	8010c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011d26:	f7ff fa19 	bl	801115c <xTaskResumeAll>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d10a      	bne.n	8011d46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011d30:	4b09      	ldr	r3, [pc, #36]	; (8011d58 <prvProcessTimerOrBlockTask+0x98>)
 8011d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d36:	601a      	str	r2, [r3, #0]
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	f3bf 8f6f 	isb	sy
}
 8011d40:	e001      	b.n	8011d46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011d42:	f7ff fa0b 	bl	801115c <xTaskResumeAll>
}
 8011d46:	bf00      	nop
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	20004c24 	.word	0x20004c24
 8011d54:	20004c28 	.word	0x20004c28
 8011d58:	e000ed04 	.word	0xe000ed04

08011d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d64:	4b0e      	ldr	r3, [pc, #56]	; (8011da0 <prvGetNextExpireTime+0x44>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d101      	bne.n	8011d72 <prvGetNextExpireTime+0x16>
 8011d6e:	2201      	movs	r2, #1
 8011d70:	e000      	b.n	8011d74 <prvGetNextExpireTime+0x18>
 8011d72:	2200      	movs	r2, #0
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d105      	bne.n	8011d8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d80:	4b07      	ldr	r3, [pc, #28]	; (8011da0 <prvGetNextExpireTime+0x44>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	60fb      	str	r3, [r7, #12]
 8011d8a:	e001      	b.n	8011d90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011d90:	68fb      	ldr	r3, [r7, #12]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3714      	adds	r7, #20
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	20004c20 	.word	0x20004c20

08011da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011dac:	f7ff fa74 	bl	8011298 <xTaskGetTickCount>
 8011db0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011db2:	4b0b      	ldr	r3, [pc, #44]	; (8011de0 <prvSampleTimeNow+0x3c>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d205      	bcs.n	8011dc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011dbc:	f000 f936 	bl	801202c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	601a      	str	r2, [r3, #0]
 8011dc6:	e002      	b.n	8011dce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011dce:	4a04      	ldr	r2, [pc, #16]	; (8011de0 <prvSampleTimeNow+0x3c>)
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	20004c30 	.word	0x20004c30

08011de4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	607a      	str	r2, [r7, #4]
 8011df0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011df2:	2300      	movs	r3, #0
 8011df4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	68fa      	ldr	r2, [r7, #12]
 8011e00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d812      	bhi.n	8011e30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	1ad2      	subs	r2, r2, r3
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	699b      	ldr	r3, [r3, #24]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d302      	bcc.n	8011e1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	617b      	str	r3, [r7, #20]
 8011e1c:	e01b      	b.n	8011e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011e1e:	4b10      	ldr	r3, [pc, #64]	; (8011e60 <prvInsertTimerInActiveList+0x7c>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	3304      	adds	r3, #4
 8011e26:	4619      	mov	r1, r3
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f7fe f9de 	bl	80101ea <vListInsert>
 8011e2e:	e012      	b.n	8011e56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d206      	bcs.n	8011e46 <prvInsertTimerInActiveList+0x62>
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d302      	bcc.n	8011e46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011e40:	2301      	movs	r3, #1
 8011e42:	617b      	str	r3, [r7, #20]
 8011e44:	e007      	b.n	8011e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e46:	4b07      	ldr	r3, [pc, #28]	; (8011e64 <prvInsertTimerInActiveList+0x80>)
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	4619      	mov	r1, r3
 8011e50:	4610      	mov	r0, r2
 8011e52:	f7fe f9ca 	bl	80101ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e56:	697b      	ldr	r3, [r7, #20]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3718      	adds	r7, #24
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20004c24 	.word	0x20004c24
 8011e64:	20004c20 	.word	0x20004c20

08011e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b08e      	sub	sp, #56	; 0x38
 8011e6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e6e:	e0ca      	b.n	8012006 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	da18      	bge.n	8011ea8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e76:	1d3b      	adds	r3, r7, #4
 8011e78:	3304      	adds	r3, #4
 8011e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d10a      	bne.n	8011e98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e86:	f383 8811 	msr	BASEPRI, r3
 8011e8a:	f3bf 8f6f 	isb	sy
 8011e8e:	f3bf 8f4f 	dsb	sy
 8011e92:	61fb      	str	r3, [r7, #28]
}
 8011e94:	bf00      	nop
 8011e96:	e7fe      	b.n	8011e96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e9e:	6850      	ldr	r0, [r2, #4]
 8011ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ea2:	6892      	ldr	r2, [r2, #8]
 8011ea4:	4611      	mov	r1, r2
 8011ea6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f2c0 80ab 	blt.w	8012006 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb6:	695b      	ldr	r3, [r3, #20]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d004      	beq.n	8011ec6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	3304      	adds	r3, #4
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fe f9cb 	bl	801025c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ec6:	463b      	mov	r3, r7
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7ff ff6b 	bl	8011da4 <prvSampleTimeNow>
 8011ece:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b09      	cmp	r3, #9
 8011ed4:	f200 8096 	bhi.w	8012004 <prvProcessReceivedCommands+0x19c>
 8011ed8:	a201      	add	r2, pc, #4	; (adr r2, 8011ee0 <prvProcessReceivedCommands+0x78>)
 8011eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ede:	bf00      	nop
 8011ee0:	08011f09 	.word	0x08011f09
 8011ee4:	08011f09 	.word	0x08011f09
 8011ee8:	08011f09 	.word	0x08011f09
 8011eec:	08011f7d 	.word	0x08011f7d
 8011ef0:	08011f91 	.word	0x08011f91
 8011ef4:	08011fdb 	.word	0x08011fdb
 8011ef8:	08011f09 	.word	0x08011f09
 8011efc:	08011f09 	.word	0x08011f09
 8011f00:	08011f7d 	.word	0x08011f7d
 8011f04:	08011f91 	.word	0x08011f91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f0e:	f043 0301 	orr.w	r3, r3, #1
 8011f12:	b2da      	uxtb	r2, r3
 8011f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011f1a:	68ba      	ldr	r2, [r7, #8]
 8011f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1e:	699b      	ldr	r3, [r3, #24]
 8011f20:	18d1      	adds	r1, r2, r3
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f28:	f7ff ff5c 	bl	8011de4 <prvInsertTimerInActiveList>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d069      	beq.n	8012006 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f34:	6a1b      	ldr	r3, [r3, #32]
 8011f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f40:	f003 0304 	and.w	r3, r3, #4
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d05e      	beq.n	8012006 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011f48:	68ba      	ldr	r2, [r7, #8]
 8011f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4c:	699b      	ldr	r3, [r3, #24]
 8011f4e:	441a      	add	r2, r3
 8011f50:	2300      	movs	r3, #0
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	2300      	movs	r3, #0
 8011f56:	2100      	movs	r1, #0
 8011f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f5a:	f7ff fe05 	bl	8011b68 <xTimerGenericCommand>
 8011f5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f60:	6a3b      	ldr	r3, [r7, #32]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d14f      	bne.n	8012006 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6a:	f383 8811 	msr	BASEPRI, r3
 8011f6e:	f3bf 8f6f 	isb	sy
 8011f72:	f3bf 8f4f 	dsb	sy
 8011f76:	61bb      	str	r3, [r7, #24]
}
 8011f78:	bf00      	nop
 8011f7a:	e7fe      	b.n	8011f7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f82:	f023 0301 	bic.w	r3, r3, #1
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011f8e:	e03a      	b.n	8012006 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f96:	f043 0301 	orr.w	r3, r3, #1
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011faa:	699b      	ldr	r3, [r3, #24]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10a      	bne.n	8011fc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	617b      	str	r3, [r7, #20]
}
 8011fc2:	bf00      	nop
 8011fc4:	e7fe      	b.n	8011fc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc8:	699a      	ldr	r2, [r3, #24]
 8011fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fcc:	18d1      	adds	r1, r2, r3
 8011fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fd4:	f7ff ff06 	bl	8011de4 <prvInsertTimerInActiveList>
					break;
 8011fd8:	e015      	b.n	8012006 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fe0:	f003 0302 	and.w	r3, r3, #2
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d103      	bne.n	8011ff0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fea:	f000 fbe1 	bl	80127b0 <vPortFree>
 8011fee:	e00a      	b.n	8012006 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ff6:	f023 0301 	bic.w	r3, r3, #1
 8011ffa:	b2da      	uxtb	r2, r3
 8011ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012002:	e000      	b.n	8012006 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8012004:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012006:	4b08      	ldr	r3, [pc, #32]	; (8012028 <prvProcessReceivedCommands+0x1c0>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	1d39      	adds	r1, r7, #4
 801200c:	2200      	movs	r2, #0
 801200e:	4618      	mov	r0, r3
 8012010:	f7fe fbec 	bl	80107ec <xQueueReceive>
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	f47f af2a 	bne.w	8011e70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801201c:	bf00      	nop
 801201e:	bf00      	nop
 8012020:	3730      	adds	r7, #48	; 0x30
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	20004c28 	.word	0x20004c28

0801202c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b088      	sub	sp, #32
 8012030:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012032:	e048      	b.n	80120c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012034:	4b2d      	ldr	r3, [pc, #180]	; (80120ec <prvSwitchTimerLists+0xc0>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801203e:	4b2b      	ldr	r3, [pc, #172]	; (80120ec <prvSwitchTimerLists+0xc0>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	68db      	ldr	r3, [r3, #12]
 8012046:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	3304      	adds	r3, #4
 801204c:	4618      	mov	r0, r3
 801204e:	f7fe f905 	bl	801025c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6a1b      	ldr	r3, [r3, #32]
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012060:	f003 0304 	and.w	r3, r3, #4
 8012064:	2b00      	cmp	r3, #0
 8012066:	d02e      	beq.n	80120c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	699b      	ldr	r3, [r3, #24]
 801206c:	693a      	ldr	r2, [r7, #16]
 801206e:	4413      	add	r3, r2
 8012070:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	429a      	cmp	r2, r3
 8012078:	d90e      	bls.n	8012098 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	68ba      	ldr	r2, [r7, #8]
 801207e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012086:	4b19      	ldr	r3, [pc, #100]	; (80120ec <prvSwitchTimerLists+0xc0>)
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	3304      	adds	r3, #4
 801208e:	4619      	mov	r1, r3
 8012090:	4610      	mov	r0, r2
 8012092:	f7fe f8aa 	bl	80101ea <vListInsert>
 8012096:	e016      	b.n	80120c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012098:	2300      	movs	r3, #0
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	2300      	movs	r3, #0
 801209e:	693a      	ldr	r2, [r7, #16]
 80120a0:	2100      	movs	r1, #0
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7ff fd60 	bl	8011b68 <xTimerGenericCommand>
 80120a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10a      	bne.n	80120c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	603b      	str	r3, [r7, #0]
}
 80120c2:	bf00      	nop
 80120c4:	e7fe      	b.n	80120c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120c6:	4b09      	ldr	r3, [pc, #36]	; (80120ec <prvSwitchTimerLists+0xc0>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1b1      	bne.n	8012034 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80120d0:	4b06      	ldr	r3, [pc, #24]	; (80120ec <prvSwitchTimerLists+0xc0>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80120d6:	4b06      	ldr	r3, [pc, #24]	; (80120f0 <prvSwitchTimerLists+0xc4>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4a04      	ldr	r2, [pc, #16]	; (80120ec <prvSwitchTimerLists+0xc0>)
 80120dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80120de:	4a04      	ldr	r2, [pc, #16]	; (80120f0 <prvSwitchTimerLists+0xc4>)
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	6013      	str	r3, [r2, #0]
}
 80120e4:	bf00      	nop
 80120e6:	3718      	adds	r7, #24
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	20004c20 	.word	0x20004c20
 80120f0:	20004c24 	.word	0x20004c24

080120f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80120fa:	f000 f96b 	bl	80123d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80120fe:	4b15      	ldr	r3, [pc, #84]	; (8012154 <prvCheckForValidListAndQueue+0x60>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d120      	bne.n	8012148 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012106:	4814      	ldr	r0, [pc, #80]	; (8012158 <prvCheckForValidListAndQueue+0x64>)
 8012108:	f7fe f81e 	bl	8010148 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801210c:	4813      	ldr	r0, [pc, #76]	; (801215c <prvCheckForValidListAndQueue+0x68>)
 801210e:	f7fe f81b 	bl	8010148 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012112:	4b13      	ldr	r3, [pc, #76]	; (8012160 <prvCheckForValidListAndQueue+0x6c>)
 8012114:	4a10      	ldr	r2, [pc, #64]	; (8012158 <prvCheckForValidListAndQueue+0x64>)
 8012116:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012118:	4b12      	ldr	r3, [pc, #72]	; (8012164 <prvCheckForValidListAndQueue+0x70>)
 801211a:	4a10      	ldr	r2, [pc, #64]	; (801215c <prvCheckForValidListAndQueue+0x68>)
 801211c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801211e:	2300      	movs	r3, #0
 8012120:	9300      	str	r3, [sp, #0]
 8012122:	4b11      	ldr	r3, [pc, #68]	; (8012168 <prvCheckForValidListAndQueue+0x74>)
 8012124:	4a11      	ldr	r2, [pc, #68]	; (801216c <prvCheckForValidListAndQueue+0x78>)
 8012126:	2110      	movs	r1, #16
 8012128:	200a      	movs	r0, #10
 801212a:	f7fe f929 	bl	8010380 <xQueueGenericCreateStatic>
 801212e:	4603      	mov	r3, r0
 8012130:	4a08      	ldr	r2, [pc, #32]	; (8012154 <prvCheckForValidListAndQueue+0x60>)
 8012132:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012134:	4b07      	ldr	r3, [pc, #28]	; (8012154 <prvCheckForValidListAndQueue+0x60>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d005      	beq.n	8012148 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801213c:	4b05      	ldr	r3, [pc, #20]	; (8012154 <prvCheckForValidListAndQueue+0x60>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	490b      	ldr	r1, [pc, #44]	; (8012170 <prvCheckForValidListAndQueue+0x7c>)
 8012142:	4618      	mov	r0, r3
 8012144:	f7fe fd42 	bl	8010bcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012148:	f000 f974 	bl	8012434 <vPortExitCritical>
}
 801214c:	bf00      	nop
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	20004c28 	.word	0x20004c28
 8012158:	20004bf8 	.word	0x20004bf8
 801215c:	20004c0c 	.word	0x20004c0c
 8012160:	20004c20 	.word	0x20004c20
 8012164:	20004c24 	.word	0x20004c24
 8012168:	20004cd4 	.word	0x20004cd4
 801216c:	20004c34 	.word	0x20004c34
 8012170:	08016914 	.word	0x08016914

08012174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012174:	b480      	push	{r7}
 8012176:	b085      	sub	sp, #20
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	3b04      	subs	r3, #4
 8012184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801218c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	3b04      	subs	r3, #4
 8012192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	f023 0201 	bic.w	r2, r3, #1
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	3b04      	subs	r3, #4
 80121a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121a4:	4a0c      	ldr	r2, [pc, #48]	; (80121d8 <pxPortInitialiseStack+0x64>)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	3b14      	subs	r3, #20
 80121ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	3b04      	subs	r3, #4
 80121ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f06f 0202 	mvn.w	r2, #2
 80121c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	3b20      	subs	r3, #32
 80121c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121ca:	68fb      	ldr	r3, [r7, #12]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3714      	adds	r7, #20
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr
 80121d8:	080121dd 	.word	0x080121dd

080121dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80121e2:	2300      	movs	r3, #0
 80121e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80121e6:	4b12      	ldr	r3, [pc, #72]	; (8012230 <prvTaskExitError+0x54>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ee:	d00a      	beq.n	8012206 <prvTaskExitError+0x2a>
	__asm volatile
 80121f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	60fb      	str	r3, [r7, #12]
}
 8012202:	bf00      	nop
 8012204:	e7fe      	b.n	8012204 <prvTaskExitError+0x28>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	60bb      	str	r3, [r7, #8]
}
 8012218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801221a:	bf00      	nop
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d0fc      	beq.n	801221c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012222:	bf00      	nop
 8012224:	bf00      	nop
 8012226:	3714      	adds	r7, #20
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	20000340 	.word	0x20000340
	...

08012240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012240:	4b07      	ldr	r3, [pc, #28]	; (8012260 <pxCurrentTCBConst2>)
 8012242:	6819      	ldr	r1, [r3, #0]
 8012244:	6808      	ldr	r0, [r1, #0]
 8012246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224a:	f380 8809 	msr	PSP, r0
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f04f 0000 	mov.w	r0, #0
 8012256:	f380 8811 	msr	BASEPRI, r0
 801225a:	4770      	bx	lr
 801225c:	f3af 8000 	nop.w

08012260 <pxCurrentTCBConst2>:
 8012260:	200046f8 	.word	0x200046f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012264:	bf00      	nop
 8012266:	bf00      	nop

08012268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012268:	4808      	ldr	r0, [pc, #32]	; (801228c <prvPortStartFirstTask+0x24>)
 801226a:	6800      	ldr	r0, [r0, #0]
 801226c:	6800      	ldr	r0, [r0, #0]
 801226e:	f380 8808 	msr	MSP, r0
 8012272:	f04f 0000 	mov.w	r0, #0
 8012276:	f380 8814 	msr	CONTROL, r0
 801227a:	b662      	cpsie	i
 801227c:	b661      	cpsie	f
 801227e:	f3bf 8f4f 	dsb	sy
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	df00      	svc	0
 8012288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801228a:	bf00      	nop
 801228c:	e000ed08 	.word	0xe000ed08

08012290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012296:	4b46      	ldr	r3, [pc, #280]	; (80123b0 <xPortStartScheduler+0x120>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	4a46      	ldr	r2, [pc, #280]	; (80123b4 <xPortStartScheduler+0x124>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d10a      	bne.n	80122b6 <xPortStartScheduler+0x26>
	__asm volatile
 80122a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a4:	f383 8811 	msr	BASEPRI, r3
 80122a8:	f3bf 8f6f 	isb	sy
 80122ac:	f3bf 8f4f 	dsb	sy
 80122b0:	613b      	str	r3, [r7, #16]
}
 80122b2:	bf00      	nop
 80122b4:	e7fe      	b.n	80122b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80122b6:	4b3e      	ldr	r3, [pc, #248]	; (80123b0 <xPortStartScheduler+0x120>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	4a3f      	ldr	r2, [pc, #252]	; (80123b8 <xPortStartScheduler+0x128>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d10a      	bne.n	80122d6 <xPortStartScheduler+0x46>
	__asm volatile
 80122c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	60fb      	str	r3, [r7, #12]
}
 80122d2:	bf00      	nop
 80122d4:	e7fe      	b.n	80122d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80122d6:	4b39      	ldr	r3, [pc, #228]	; (80123bc <xPortStartScheduler+0x12c>)
 80122d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	22ff      	movs	r2, #255	; 0xff
 80122e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80122f0:	78fb      	ldrb	r3, [r7, #3]
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80122f8:	b2da      	uxtb	r2, r3
 80122fa:	4b31      	ldr	r3, [pc, #196]	; (80123c0 <xPortStartScheduler+0x130>)
 80122fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80122fe:	4b31      	ldr	r3, [pc, #196]	; (80123c4 <xPortStartScheduler+0x134>)
 8012300:	2207      	movs	r2, #7
 8012302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012304:	e009      	b.n	801231a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012306:	4b2f      	ldr	r3, [pc, #188]	; (80123c4 <xPortStartScheduler+0x134>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	3b01      	subs	r3, #1
 801230c:	4a2d      	ldr	r2, [pc, #180]	; (80123c4 <xPortStartScheduler+0x134>)
 801230e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012310:	78fb      	ldrb	r3, [r7, #3]
 8012312:	b2db      	uxtb	r3, r3
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	b2db      	uxtb	r3, r3
 8012318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801231a:	78fb      	ldrb	r3, [r7, #3]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012322:	2b80      	cmp	r3, #128	; 0x80
 8012324:	d0ef      	beq.n	8012306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012326:	4b27      	ldr	r3, [pc, #156]	; (80123c4 <xPortStartScheduler+0x134>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f1c3 0307 	rsb	r3, r3, #7
 801232e:	2b04      	cmp	r3, #4
 8012330:	d00a      	beq.n	8012348 <xPortStartScheduler+0xb8>
	__asm volatile
 8012332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	60bb      	str	r3, [r7, #8]
}
 8012344:	bf00      	nop
 8012346:	e7fe      	b.n	8012346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012348:	4b1e      	ldr	r3, [pc, #120]	; (80123c4 <xPortStartScheduler+0x134>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	021b      	lsls	r3, r3, #8
 801234e:	4a1d      	ldr	r2, [pc, #116]	; (80123c4 <xPortStartScheduler+0x134>)
 8012350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012352:	4b1c      	ldr	r3, [pc, #112]	; (80123c4 <xPortStartScheduler+0x134>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801235a:	4a1a      	ldr	r2, [pc, #104]	; (80123c4 <xPortStartScheduler+0x134>)
 801235c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	b2da      	uxtb	r2, r3
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012366:	4b18      	ldr	r3, [pc, #96]	; (80123c8 <xPortStartScheduler+0x138>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4a17      	ldr	r2, [pc, #92]	; (80123c8 <xPortStartScheduler+0x138>)
 801236c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012372:	4b15      	ldr	r3, [pc, #84]	; (80123c8 <xPortStartScheduler+0x138>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a14      	ldr	r2, [pc, #80]	; (80123c8 <xPortStartScheduler+0x138>)
 8012378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801237c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801237e:	f000 f8dd 	bl	801253c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012382:	4b12      	ldr	r3, [pc, #72]	; (80123cc <xPortStartScheduler+0x13c>)
 8012384:	2200      	movs	r2, #0
 8012386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012388:	f000 f8fc 	bl	8012584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801238c:	4b10      	ldr	r3, [pc, #64]	; (80123d0 <xPortStartScheduler+0x140>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4a0f      	ldr	r2, [pc, #60]	; (80123d0 <xPortStartScheduler+0x140>)
 8012392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012398:	f7ff ff66 	bl	8012268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801239c:	f7ff f846 	bl	801142c <vTaskSwitchContext>
	prvTaskExitError();
 80123a0:	f7ff ff1c 	bl	80121dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123a4:	2300      	movs	r3, #0
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3718      	adds	r7, #24
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
 80123ae:	bf00      	nop
 80123b0:	e000ed00 	.word	0xe000ed00
 80123b4:	410fc271 	.word	0x410fc271
 80123b8:	410fc270 	.word	0x410fc270
 80123bc:	e000e400 	.word	0xe000e400
 80123c0:	20004d24 	.word	0x20004d24
 80123c4:	20004d28 	.word	0x20004d28
 80123c8:	e000ed20 	.word	0xe000ed20
 80123cc:	20000340 	.word	0x20000340
 80123d0:	e000ef34 	.word	0xe000ef34

080123d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
	__asm volatile
 80123da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123de:	f383 8811 	msr	BASEPRI, r3
 80123e2:	f3bf 8f6f 	isb	sy
 80123e6:	f3bf 8f4f 	dsb	sy
 80123ea:	607b      	str	r3, [r7, #4]
}
 80123ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80123ee:	4b0f      	ldr	r3, [pc, #60]	; (801242c <vPortEnterCritical+0x58>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	3301      	adds	r3, #1
 80123f4:	4a0d      	ldr	r2, [pc, #52]	; (801242c <vPortEnterCritical+0x58>)
 80123f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80123f8:	4b0c      	ldr	r3, [pc, #48]	; (801242c <vPortEnterCritical+0x58>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d10f      	bne.n	8012420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012400:	4b0b      	ldr	r3, [pc, #44]	; (8012430 <vPortEnterCritical+0x5c>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d00a      	beq.n	8012420 <vPortEnterCritical+0x4c>
	__asm volatile
 801240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240e:	f383 8811 	msr	BASEPRI, r3
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	f3bf 8f4f 	dsb	sy
 801241a:	603b      	str	r3, [r7, #0]
}
 801241c:	bf00      	nop
 801241e:	e7fe      	b.n	801241e <vPortEnterCritical+0x4a>
	}
}
 8012420:	bf00      	nop
 8012422:	370c      	adds	r7, #12
 8012424:	46bd      	mov	sp, r7
 8012426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242a:	4770      	bx	lr
 801242c:	20000340 	.word	0x20000340
 8012430:	e000ed04 	.word	0xe000ed04

08012434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801243a:	4b12      	ldr	r3, [pc, #72]	; (8012484 <vPortExitCritical+0x50>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d10a      	bne.n	8012458 <vPortExitCritical+0x24>
	__asm volatile
 8012442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	607b      	str	r3, [r7, #4]
}
 8012454:	bf00      	nop
 8012456:	e7fe      	b.n	8012456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012458:	4b0a      	ldr	r3, [pc, #40]	; (8012484 <vPortExitCritical+0x50>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	3b01      	subs	r3, #1
 801245e:	4a09      	ldr	r2, [pc, #36]	; (8012484 <vPortExitCritical+0x50>)
 8012460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012462:	4b08      	ldr	r3, [pc, #32]	; (8012484 <vPortExitCritical+0x50>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d105      	bne.n	8012476 <vPortExitCritical+0x42>
 801246a:	2300      	movs	r3, #0
 801246c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	f383 8811 	msr	BASEPRI, r3
}
 8012474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012476:	bf00      	nop
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	20000340 	.word	0x20000340
	...

08012490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012490:	f3ef 8009 	mrs	r0, PSP
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	4b15      	ldr	r3, [pc, #84]	; (80124f0 <pxCurrentTCBConst>)
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	f01e 0f10 	tst.w	lr, #16
 80124a0:	bf08      	it	eq
 80124a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124aa:	6010      	str	r0, [r2, #0]
 80124ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80124b4:	f380 8811 	msr	BASEPRI, r0
 80124b8:	f3bf 8f4f 	dsb	sy
 80124bc:	f3bf 8f6f 	isb	sy
 80124c0:	f7fe ffb4 	bl	801142c <vTaskSwitchContext>
 80124c4:	f04f 0000 	mov.w	r0, #0
 80124c8:	f380 8811 	msr	BASEPRI, r0
 80124cc:	bc09      	pop	{r0, r3}
 80124ce:	6819      	ldr	r1, [r3, #0]
 80124d0:	6808      	ldr	r0, [r1, #0]
 80124d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d6:	f01e 0f10 	tst.w	lr, #16
 80124da:	bf08      	it	eq
 80124dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80124e0:	f380 8809 	msr	PSP, r0
 80124e4:	f3bf 8f6f 	isb	sy
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop
 80124ec:	f3af 8000 	nop.w

080124f0 <pxCurrentTCBConst>:
 80124f0:	200046f8 	.word	0x200046f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80124f4:	bf00      	nop
 80124f6:	bf00      	nop

080124f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
	__asm volatile
 80124fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012502:	f383 8811 	msr	BASEPRI, r3
 8012506:	f3bf 8f6f 	isb	sy
 801250a:	f3bf 8f4f 	dsb	sy
 801250e:	607b      	str	r3, [r7, #4]
}
 8012510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012512:	f7fe fed1 	bl	80112b8 <xTaskIncrementTick>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d003      	beq.n	8012524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801251c:	4b06      	ldr	r3, [pc, #24]	; (8012538 <xPortSysTickHandler+0x40>)
 801251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	2300      	movs	r3, #0
 8012526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	f383 8811 	msr	BASEPRI, r3
}
 801252e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012530:	bf00      	nop
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	e000ed04 	.word	0xe000ed04

0801253c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801253c:	b480      	push	{r7}
 801253e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012540:	4b0b      	ldr	r3, [pc, #44]	; (8012570 <vPortSetupTimerInterrupt+0x34>)
 8012542:	2200      	movs	r2, #0
 8012544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012546:	4b0b      	ldr	r3, [pc, #44]	; (8012574 <vPortSetupTimerInterrupt+0x38>)
 8012548:	2200      	movs	r2, #0
 801254a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801254c:	4b0a      	ldr	r3, [pc, #40]	; (8012578 <vPortSetupTimerInterrupt+0x3c>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a0a      	ldr	r2, [pc, #40]	; (801257c <vPortSetupTimerInterrupt+0x40>)
 8012552:	fba2 2303 	umull	r2, r3, r2, r3
 8012556:	099b      	lsrs	r3, r3, #6
 8012558:	4a09      	ldr	r2, [pc, #36]	; (8012580 <vPortSetupTimerInterrupt+0x44>)
 801255a:	3b01      	subs	r3, #1
 801255c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801255e:	4b04      	ldr	r3, [pc, #16]	; (8012570 <vPortSetupTimerInterrupt+0x34>)
 8012560:	2207      	movs	r2, #7
 8012562:	601a      	str	r2, [r3, #0]
}
 8012564:	bf00      	nop
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	e000e010 	.word	0xe000e010
 8012574:	e000e018 	.word	0xe000e018
 8012578:	20000224 	.word	0x20000224
 801257c:	10624dd3 	.word	0x10624dd3
 8012580:	e000e014 	.word	0xe000e014

08012584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012594 <vPortEnableVFP+0x10>
 8012588:	6801      	ldr	r1, [r0, #0]
 801258a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801258e:	6001      	str	r1, [r0, #0]
 8012590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012592:	bf00      	nop
 8012594:	e000ed88 	.word	0xe000ed88

08012598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012598:	b480      	push	{r7}
 801259a:	b085      	sub	sp, #20
 801259c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801259e:	f3ef 8305 	mrs	r3, IPSR
 80125a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2b0f      	cmp	r3, #15
 80125a8:	d914      	bls.n	80125d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125aa:	4a17      	ldr	r2, [pc, #92]	; (8012608 <vPortValidateInterruptPriority+0x70>)
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	4413      	add	r3, r2
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125b4:	4b15      	ldr	r3, [pc, #84]	; (801260c <vPortValidateInterruptPriority+0x74>)
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	7afa      	ldrb	r2, [r7, #11]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d20a      	bcs.n	80125d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80125be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c2:	f383 8811 	msr	BASEPRI, r3
 80125c6:	f3bf 8f6f 	isb	sy
 80125ca:	f3bf 8f4f 	dsb	sy
 80125ce:	607b      	str	r3, [r7, #4]
}
 80125d0:	bf00      	nop
 80125d2:	e7fe      	b.n	80125d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80125d4:	4b0e      	ldr	r3, [pc, #56]	; (8012610 <vPortValidateInterruptPriority+0x78>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80125dc:	4b0d      	ldr	r3, [pc, #52]	; (8012614 <vPortValidateInterruptPriority+0x7c>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d90a      	bls.n	80125fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80125e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e8:	f383 8811 	msr	BASEPRI, r3
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	603b      	str	r3, [r7, #0]
}
 80125f6:	bf00      	nop
 80125f8:	e7fe      	b.n	80125f8 <vPortValidateInterruptPriority+0x60>
	}
 80125fa:	bf00      	nop
 80125fc:	3714      	adds	r7, #20
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	e000e3f0 	.word	0xe000e3f0
 801260c:	20004d24 	.word	0x20004d24
 8012610:	e000ed0c 	.word	0xe000ed0c
 8012614:	20004d28 	.word	0x20004d28

08012618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b08a      	sub	sp, #40	; 0x28
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012620:	2300      	movs	r3, #0
 8012622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012624:	f7fe fd8c 	bl	8011140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012628:	4b5b      	ldr	r3, [pc, #364]	; (8012798 <pvPortMalloc+0x180>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d101      	bne.n	8012634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012630:	f000 f920 	bl	8012874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012634:	4b59      	ldr	r3, [pc, #356]	; (801279c <pvPortMalloc+0x184>)
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4013      	ands	r3, r2
 801263c:	2b00      	cmp	r3, #0
 801263e:	f040 8093 	bne.w	8012768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d01d      	beq.n	8012684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012648:	2208      	movs	r2, #8
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4413      	add	r3, r2
 801264e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f003 0307 	and.w	r3, r3, #7
 8012656:	2b00      	cmp	r3, #0
 8012658:	d014      	beq.n	8012684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f023 0307 	bic.w	r3, r3, #7
 8012660:	3308      	adds	r3, #8
 8012662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f003 0307 	and.w	r3, r3, #7
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00a      	beq.n	8012684 <pvPortMalloc+0x6c>
	__asm volatile
 801266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012672:	f383 8811 	msr	BASEPRI, r3
 8012676:	f3bf 8f6f 	isb	sy
 801267a:	f3bf 8f4f 	dsb	sy
 801267e:	617b      	str	r3, [r7, #20]
}
 8012680:	bf00      	nop
 8012682:	e7fe      	b.n	8012682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d06e      	beq.n	8012768 <pvPortMalloc+0x150>
 801268a:	4b45      	ldr	r3, [pc, #276]	; (80127a0 <pvPortMalloc+0x188>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	687a      	ldr	r2, [r7, #4]
 8012690:	429a      	cmp	r2, r3
 8012692:	d869      	bhi.n	8012768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012694:	4b43      	ldr	r3, [pc, #268]	; (80127a4 <pvPortMalloc+0x18c>)
 8012696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012698:	4b42      	ldr	r3, [pc, #264]	; (80127a4 <pvPortMalloc+0x18c>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801269e:	e004      	b.n	80126aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80126a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d903      	bls.n	80126bc <pvPortMalloc+0xa4>
 80126b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1f1      	bne.n	80126a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80126bc:	4b36      	ldr	r3, [pc, #216]	; (8012798 <pvPortMalloc+0x180>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d050      	beq.n	8012768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80126c6:	6a3b      	ldr	r3, [r7, #32]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2208      	movs	r2, #8
 80126cc:	4413      	add	r3, r2
 80126ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	6a3b      	ldr	r3, [r7, #32]
 80126d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	685a      	ldr	r2, [r3, #4]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	1ad2      	subs	r2, r2, r3
 80126e0:	2308      	movs	r3, #8
 80126e2:	005b      	lsls	r3, r3, #1
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d91f      	bls.n	8012728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80126e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4413      	add	r3, r2
 80126ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	f003 0307 	and.w	r3, r3, #7
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00a      	beq.n	8012710 <pvPortMalloc+0xf8>
	__asm volatile
 80126fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	613b      	str	r3, [r7, #16]
}
 801270c:	bf00      	nop
 801270e:	e7fe      	b.n	801270e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	685a      	ldr	r2, [r3, #4]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	1ad2      	subs	r2, r2, r3
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012722:	69b8      	ldr	r0, [r7, #24]
 8012724:	f000 f908 	bl	8012938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012728:	4b1d      	ldr	r3, [pc, #116]	; (80127a0 <pvPortMalloc+0x188>)
 801272a:	681a      	ldr	r2, [r3, #0]
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	1ad3      	subs	r3, r2, r3
 8012732:	4a1b      	ldr	r2, [pc, #108]	; (80127a0 <pvPortMalloc+0x188>)
 8012734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012736:	4b1a      	ldr	r3, [pc, #104]	; (80127a0 <pvPortMalloc+0x188>)
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	4b1b      	ldr	r3, [pc, #108]	; (80127a8 <pvPortMalloc+0x190>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	429a      	cmp	r2, r3
 8012740:	d203      	bcs.n	801274a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012742:	4b17      	ldr	r3, [pc, #92]	; (80127a0 <pvPortMalloc+0x188>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	4a18      	ldr	r2, [pc, #96]	; (80127a8 <pvPortMalloc+0x190>)
 8012748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274c:	685a      	ldr	r2, [r3, #4]
 801274e:	4b13      	ldr	r3, [pc, #76]	; (801279c <pvPortMalloc+0x184>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	431a      	orrs	r2, r3
 8012754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275a:	2200      	movs	r2, #0
 801275c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801275e:	4b13      	ldr	r3, [pc, #76]	; (80127ac <pvPortMalloc+0x194>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	3301      	adds	r3, #1
 8012764:	4a11      	ldr	r2, [pc, #68]	; (80127ac <pvPortMalloc+0x194>)
 8012766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012768:	f7fe fcf8 	bl	801115c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	f003 0307 	and.w	r3, r3, #7
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00a      	beq.n	801278c <pvPortMalloc+0x174>
	__asm volatile
 8012776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277a:	f383 8811 	msr	BASEPRI, r3
 801277e:	f3bf 8f6f 	isb	sy
 8012782:	f3bf 8f4f 	dsb	sy
 8012786:	60fb      	str	r3, [r7, #12]
}
 8012788:	bf00      	nop
 801278a:	e7fe      	b.n	801278a <pvPortMalloc+0x172>
	return pvReturn;
 801278c:	69fb      	ldr	r3, [r7, #28]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3728      	adds	r7, #40	; 0x28
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	20007c14 	.word	0x20007c14
 801279c:	20007c28 	.word	0x20007c28
 80127a0:	20007c18 	.word	0x20007c18
 80127a4:	20007c0c 	.word	0x20007c0c
 80127a8:	20007c1c 	.word	0x20007c1c
 80127ac:	20007c20 	.word	0x20007c20

080127b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d04d      	beq.n	801285e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80127c2:	2308      	movs	r3, #8
 80127c4:	425b      	negs	r3, r3
 80127c6:	697a      	ldr	r2, [r7, #20]
 80127c8:	4413      	add	r3, r2
 80127ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	4b24      	ldr	r3, [pc, #144]	; (8012868 <vPortFree+0xb8>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4013      	ands	r3, r2
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d10a      	bne.n	80127f4 <vPortFree+0x44>
	__asm volatile
 80127de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e2:	f383 8811 	msr	BASEPRI, r3
 80127e6:	f3bf 8f6f 	isb	sy
 80127ea:	f3bf 8f4f 	dsb	sy
 80127ee:	60fb      	str	r3, [r7, #12]
}
 80127f0:	bf00      	nop
 80127f2:	e7fe      	b.n	80127f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00a      	beq.n	8012812 <vPortFree+0x62>
	__asm volatile
 80127fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012800:	f383 8811 	msr	BASEPRI, r3
 8012804:	f3bf 8f6f 	isb	sy
 8012808:	f3bf 8f4f 	dsb	sy
 801280c:	60bb      	str	r3, [r7, #8]
}
 801280e:	bf00      	nop
 8012810:	e7fe      	b.n	8012810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	685a      	ldr	r2, [r3, #4]
 8012816:	4b14      	ldr	r3, [pc, #80]	; (8012868 <vPortFree+0xb8>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4013      	ands	r3, r2
 801281c:	2b00      	cmp	r3, #0
 801281e:	d01e      	beq.n	801285e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d11a      	bne.n	801285e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	685a      	ldr	r2, [r3, #4]
 801282c:	4b0e      	ldr	r3, [pc, #56]	; (8012868 <vPortFree+0xb8>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	43db      	mvns	r3, r3
 8012832:	401a      	ands	r2, r3
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012838:	f7fe fc82 	bl	8011140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	4b0a      	ldr	r3, [pc, #40]	; (801286c <vPortFree+0xbc>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4413      	add	r3, r2
 8012846:	4a09      	ldr	r2, [pc, #36]	; (801286c <vPortFree+0xbc>)
 8012848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801284a:	6938      	ldr	r0, [r7, #16]
 801284c:	f000 f874 	bl	8012938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012850:	4b07      	ldr	r3, [pc, #28]	; (8012870 <vPortFree+0xc0>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	3301      	adds	r3, #1
 8012856:	4a06      	ldr	r2, [pc, #24]	; (8012870 <vPortFree+0xc0>)
 8012858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801285a:	f7fe fc7f 	bl	801115c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801285e:	bf00      	nop
 8012860:	3718      	adds	r7, #24
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	20007c28 	.word	0x20007c28
 801286c:	20007c18 	.word	0x20007c18
 8012870:	20007c24 	.word	0x20007c24

08012874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801287a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801287e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012880:	4b27      	ldr	r3, [pc, #156]	; (8012920 <prvHeapInit+0xac>)
 8012882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f003 0307 	and.w	r3, r3, #7
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00c      	beq.n	80128a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	3307      	adds	r3, #7
 8012892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f023 0307 	bic.w	r3, r3, #7
 801289a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801289c:	68ba      	ldr	r2, [r7, #8]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	1ad3      	subs	r3, r2, r3
 80128a2:	4a1f      	ldr	r2, [pc, #124]	; (8012920 <prvHeapInit+0xac>)
 80128a4:	4413      	add	r3, r2
 80128a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80128ac:	4a1d      	ldr	r2, [pc, #116]	; (8012924 <prvHeapInit+0xb0>)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80128b2:	4b1c      	ldr	r3, [pc, #112]	; (8012924 <prvHeapInit+0xb0>)
 80128b4:	2200      	movs	r2, #0
 80128b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	68ba      	ldr	r2, [r7, #8]
 80128bc:	4413      	add	r3, r2
 80128be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80128c0:	2208      	movs	r2, #8
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	1a9b      	subs	r3, r3, r2
 80128c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f023 0307 	bic.w	r3, r3, #7
 80128ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	4a15      	ldr	r2, [pc, #84]	; (8012928 <prvHeapInit+0xb4>)
 80128d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80128d6:	4b14      	ldr	r3, [pc, #80]	; (8012928 <prvHeapInit+0xb4>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2200      	movs	r2, #0
 80128dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80128de:	4b12      	ldr	r3, [pc, #72]	; (8012928 <prvHeapInit+0xb4>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2200      	movs	r2, #0
 80128e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	1ad2      	subs	r2, r2, r3
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80128f4:	4b0c      	ldr	r3, [pc, #48]	; (8012928 <prvHeapInit+0xb4>)
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	4a0a      	ldr	r2, [pc, #40]	; (801292c <prvHeapInit+0xb8>)
 8012902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	4a09      	ldr	r2, [pc, #36]	; (8012930 <prvHeapInit+0xbc>)
 801290a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801290c:	4b09      	ldr	r3, [pc, #36]	; (8012934 <prvHeapInit+0xc0>)
 801290e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012912:	601a      	str	r2, [r3, #0]
}
 8012914:	bf00      	nop
 8012916:	3714      	adds	r7, #20
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr
 8012920:	20004d2c 	.word	0x20004d2c
 8012924:	20007c0c 	.word	0x20007c0c
 8012928:	20007c14 	.word	0x20007c14
 801292c:	20007c1c 	.word	0x20007c1c
 8012930:	20007c18 	.word	0x20007c18
 8012934:	20007c28 	.word	0x20007c28

08012938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012938:	b480      	push	{r7}
 801293a:	b085      	sub	sp, #20
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012940:	4b28      	ldr	r3, [pc, #160]	; (80129e4 <prvInsertBlockIntoFreeList+0xac>)
 8012942:	60fb      	str	r3, [r7, #12]
 8012944:	e002      	b.n	801294c <prvInsertBlockIntoFreeList+0x14>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	60fb      	str	r3, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	429a      	cmp	r2, r3
 8012954:	d8f7      	bhi.n	8012946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	68ba      	ldr	r2, [r7, #8]
 8012960:	4413      	add	r3, r2
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	429a      	cmp	r2, r3
 8012966:	d108      	bne.n	801297a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	441a      	add	r2, r3
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	68ba      	ldr	r2, [r7, #8]
 8012984:	441a      	add	r2, r3
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	429a      	cmp	r2, r3
 801298c:	d118      	bne.n	80129c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	4b15      	ldr	r3, [pc, #84]	; (80129e8 <prvInsertBlockIntoFreeList+0xb0>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d00d      	beq.n	80129b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	685a      	ldr	r2, [r3, #4]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	441a      	add	r2, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	601a      	str	r2, [r3, #0]
 80129b4:	e008      	b.n	80129c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80129b6:	4b0c      	ldr	r3, [pc, #48]	; (80129e8 <prvInsertBlockIntoFreeList+0xb0>)
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	601a      	str	r2, [r3, #0]
 80129be:	e003      	b.n	80129c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80129c8:	68fa      	ldr	r2, [r7, #12]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d002      	beq.n	80129d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129d6:	bf00      	nop
 80129d8:	3714      	adds	r7, #20
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	20007c0c 	.word	0x20007c0c
 80129e8:	20007c14 	.word	0x20007c14

080129ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80129f0:	2200      	movs	r2, #0
 80129f2:	4912      	ldr	r1, [pc, #72]	; (8012a3c <MX_USB_DEVICE_Init+0x50>)
 80129f4:	4812      	ldr	r0, [pc, #72]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 80129f6:	f7fc f8a3 	bl	800eb40 <USBD_Init>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012a00:	f7f1 f97a 	bl	8003cf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012a04:	490f      	ldr	r1, [pc, #60]	; (8012a44 <MX_USB_DEVICE_Init+0x58>)
 8012a06:	480e      	ldr	r0, [pc, #56]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 8012a08:	f7fc f8ca 	bl	800eba0 <USBD_RegisterClass>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012a12:	f7f1 f971 	bl	8003cf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012a16:	490c      	ldr	r1, [pc, #48]	; (8012a48 <MX_USB_DEVICE_Init+0x5c>)
 8012a18:	4809      	ldr	r0, [pc, #36]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 8012a1a:	f7fb ffeb 	bl	800e9f4 <USBD_CDC_RegisterInterface>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d001      	beq.n	8012a28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012a24:	f7f1 f968 	bl	8003cf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012a28:	4805      	ldr	r0, [pc, #20]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 8012a2a:	f7fc f8e0 	bl	800ebee <USBD_Start>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012a34:	f7f1 f960 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012a38:	bf00      	nop
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	20000358 	.word	0x20000358
 8012a40:	20007c2c 	.word	0x20007c2c
 8012a44:	2000023c 	.word	0x2000023c
 8012a48:	20000344 	.word	0x20000344

08012a4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a50:	2200      	movs	r2, #0
 8012a52:	4905      	ldr	r1, [pc, #20]	; (8012a68 <CDC_Init_FS+0x1c>)
 8012a54:	4805      	ldr	r0, [pc, #20]	; (8012a6c <CDC_Init_FS+0x20>)
 8012a56:	f7fb ffe2 	bl	800ea1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a5a:	4905      	ldr	r1, [pc, #20]	; (8012a70 <CDC_Init_FS+0x24>)
 8012a5c:	4803      	ldr	r0, [pc, #12]	; (8012a6c <CDC_Init_FS+0x20>)
 8012a5e:	f7fb fffc 	bl	800ea5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	200086fc 	.word	0x200086fc
 8012a6c:	20007c2c 	.word	0x20007c2c
 8012a70:	20007efc 	.word	0x20007efc

08012a74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a74:	b480      	push	{r7}
 8012a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	6039      	str	r1, [r7, #0]
 8012a8e:	71fb      	strb	r3, [r7, #7]
 8012a90:	4613      	mov	r3, r2
 8012a92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012a94:	79fb      	ldrb	r3, [r7, #7]
 8012a96:	2b23      	cmp	r3, #35	; 0x23
 8012a98:	d84a      	bhi.n	8012b30 <CDC_Control_FS+0xac>
 8012a9a:	a201      	add	r2, pc, #4	; (adr r2, 8012aa0 <CDC_Control_FS+0x1c>)
 8012a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa0:	08012b31 	.word	0x08012b31
 8012aa4:	08012b31 	.word	0x08012b31
 8012aa8:	08012b31 	.word	0x08012b31
 8012aac:	08012b31 	.word	0x08012b31
 8012ab0:	08012b31 	.word	0x08012b31
 8012ab4:	08012b31 	.word	0x08012b31
 8012ab8:	08012b31 	.word	0x08012b31
 8012abc:	08012b31 	.word	0x08012b31
 8012ac0:	08012b31 	.word	0x08012b31
 8012ac4:	08012b31 	.word	0x08012b31
 8012ac8:	08012b31 	.word	0x08012b31
 8012acc:	08012b31 	.word	0x08012b31
 8012ad0:	08012b31 	.word	0x08012b31
 8012ad4:	08012b31 	.word	0x08012b31
 8012ad8:	08012b31 	.word	0x08012b31
 8012adc:	08012b31 	.word	0x08012b31
 8012ae0:	08012b31 	.word	0x08012b31
 8012ae4:	08012b31 	.word	0x08012b31
 8012ae8:	08012b31 	.word	0x08012b31
 8012aec:	08012b31 	.word	0x08012b31
 8012af0:	08012b31 	.word	0x08012b31
 8012af4:	08012b31 	.word	0x08012b31
 8012af8:	08012b31 	.word	0x08012b31
 8012afc:	08012b31 	.word	0x08012b31
 8012b00:	08012b31 	.word	0x08012b31
 8012b04:	08012b31 	.word	0x08012b31
 8012b08:	08012b31 	.word	0x08012b31
 8012b0c:	08012b31 	.word	0x08012b31
 8012b10:	08012b31 	.word	0x08012b31
 8012b14:	08012b31 	.word	0x08012b31
 8012b18:	08012b31 	.word	0x08012b31
 8012b1c:	08012b31 	.word	0x08012b31
 8012b20:	08012b31 	.word	0x08012b31
 8012b24:	08012b31 	.word	0x08012b31
 8012b28:	08012b31 	.word	0x08012b31
 8012b2c:	08012b31 	.word	0x08012b31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b30:	bf00      	nop
  }

  return (USBD_OK);
 8012b32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  WriteUSBDataToRingBuffer(Buf, *Len);
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4619      	mov	r1, r3
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f847 	bl	8012be4 <WriteUSBDataToRingBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	4805      	ldr	r0, [pc, #20]	; (8012b70 <CDC_Receive_FS+0x30>)
 8012b5a:	f7fb ff7e 	bl	800ea5a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012b5e:	4804      	ldr	r0, [pc, #16]	; (8012b70 <CDC_Receive_FS+0x30>)
 8012b60:	f7fb ffc4 	bl	800eaec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012b64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	20007c2c 	.word	0x20007c2c

08012b74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b084      	sub	sp, #16
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012b80:	2300      	movs	r3, #0
 8012b82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012b84:	4b0d      	ldr	r3, [pc, #52]	; (8012bbc <CDC_Transmit_FS+0x48>)
 8012b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d001      	beq.n	8012b9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012b96:	2301      	movs	r3, #1
 8012b98:	e00b      	b.n	8012bb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012b9a:	887b      	ldrh	r3, [r7, #2]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	4806      	ldr	r0, [pc, #24]	; (8012bbc <CDC_Transmit_FS+0x48>)
 8012ba2:	f7fb ff3c 	bl	800ea1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012ba6:	4805      	ldr	r0, [pc, #20]	; (8012bbc <CDC_Transmit_FS+0x48>)
 8012ba8:	f7fb ff70 	bl	800ea8c <USBD_CDC_TransmitPacket>
 8012bac:	4603      	mov	r3, r0
 8012bae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3710      	adds	r7, #16
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	20007c2c 	.word	0x20007c2c

08012bc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b087      	sub	sp, #28
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	371c      	adds	r7, #28
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr
	...

08012be4 <WriteUSBDataToRingBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void WriteUSBDataToRingBuffer(uint8_t *Buf, uint32_t Len) {
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < Len; i++) {
 8012bee:	2300      	movs	r3, #0
 8012bf0:	60fb      	str	r3, [r7, #12]
 8012bf2:	e00a      	b.n	8012c0a <WriteUSBDataToRingBuffer+0x26>
        RB_Write(&USB_Receive_Buffer, Buf[i]);
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4807      	ldr	r0, [pc, #28]	; (8012c1c <WriteUSBDataToRingBuffer+0x38>)
 8012c00:	f7f1 f87f 	bl	8003d02 <RB_Write>
    for(uint32_t i = 0; i < Len; i++) {
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	3301      	adds	r3, #1
 8012c08:	60fb      	str	r3, [r7, #12]
 8012c0a:	68fa      	ldr	r2, [r7, #12]
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d3f0      	bcc.n	8012bf4 <WriteUSBDataToRingBuffer+0x10>
    }
}
 8012c12:	bf00      	nop
 8012c14:	bf00      	nop
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	200005a4 	.word	0x200005a4

08012c20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b083      	sub	sp, #12
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	4603      	mov	r3, r0
 8012c28:	6039      	str	r1, [r7, #0]
 8012c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	2212      	movs	r2, #18
 8012c30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012c32:	4b03      	ldr	r3, [pc, #12]	; (8012c40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr
 8012c40:	20000378 	.word	0x20000378

08012c44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	6039      	str	r1, [r7, #0]
 8012c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	2204      	movs	r2, #4
 8012c54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c56:	4b03      	ldr	r3, [pc, #12]	; (8012c64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	20000398 	.word	0x20000398

08012c68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	6039      	str	r1, [r7, #0]
 8012c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d105      	bne.n	8012c86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012c7a:	683a      	ldr	r2, [r7, #0]
 8012c7c:	4907      	ldr	r1, [pc, #28]	; (8012c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8012c7e:	4808      	ldr	r0, [pc, #32]	; (8012ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012c80:	f7fd f811 	bl	800fca6 <USBD_GetString>
 8012c84:	e004      	b.n	8012c90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	4904      	ldr	r1, [pc, #16]	; (8012c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8012c8a:	4805      	ldr	r0, [pc, #20]	; (8012ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012c8c:	f7fd f80b 	bl	800fca6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c90:	4b02      	ldr	r3, [pc, #8]	; (8012c9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	20008efc 	.word	0x20008efc
 8012ca0:	0801691c 	.word	0x0801691c

08012ca4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	6039      	str	r1, [r7, #0]
 8012cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012cb0:	683a      	ldr	r2, [r7, #0]
 8012cb2:	4904      	ldr	r1, [pc, #16]	; (8012cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012cb4:	4804      	ldr	r0, [pc, #16]	; (8012cc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012cb6:	f7fc fff6 	bl	800fca6 <USBD_GetString>
  return USBD_StrDesc;
 8012cba:	4b02      	ldr	r3, [pc, #8]	; (8012cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	20008efc 	.word	0x20008efc
 8012cc8:	08016934 	.word	0x08016934

08012ccc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	6039      	str	r1, [r7, #0]
 8012cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	221a      	movs	r2, #26
 8012cdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012cde:	f000 f855 	bl	8012d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012ce2:	4b02      	ldr	r3, [pc, #8]	; (8012cec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	2000039c 	.word	0x2000039c

08012cf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	6039      	str	r1, [r7, #0]
 8012cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012cfc:	79fb      	ldrb	r3, [r7, #7]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d105      	bne.n	8012d0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d02:	683a      	ldr	r2, [r7, #0]
 8012d04:	4907      	ldr	r1, [pc, #28]	; (8012d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d06:	4808      	ldr	r0, [pc, #32]	; (8012d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d08:	f7fc ffcd 	bl	800fca6 <USBD_GetString>
 8012d0c:	e004      	b.n	8012d18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d0e:	683a      	ldr	r2, [r7, #0]
 8012d10:	4904      	ldr	r1, [pc, #16]	; (8012d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d12:	4805      	ldr	r0, [pc, #20]	; (8012d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d14:	f7fc ffc7 	bl	800fca6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d18:	4b02      	ldr	r3, [pc, #8]	; (8012d24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3708      	adds	r7, #8
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	20008efc 	.word	0x20008efc
 8012d28:	08016948 	.word	0x08016948

08012d2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	4603      	mov	r3, r0
 8012d34:	6039      	str	r1, [r7, #0]
 8012d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d38:	79fb      	ldrb	r3, [r7, #7]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d105      	bne.n	8012d4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d3e:	683a      	ldr	r2, [r7, #0]
 8012d40:	4907      	ldr	r1, [pc, #28]	; (8012d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d42:	4808      	ldr	r0, [pc, #32]	; (8012d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d44:	f7fc ffaf 	bl	800fca6 <USBD_GetString>
 8012d48:	e004      	b.n	8012d54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d4a:	683a      	ldr	r2, [r7, #0]
 8012d4c:	4904      	ldr	r1, [pc, #16]	; (8012d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d4e:	4805      	ldr	r0, [pc, #20]	; (8012d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d50:	f7fc ffa9 	bl	800fca6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d54:	4b02      	ldr	r3, [pc, #8]	; (8012d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	20008efc 	.word	0x20008efc
 8012d64:	08016954 	.word	0x08016954

08012d68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	6039      	str	r1, [r7, #0]
 8012d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	220c      	movs	r2, #12
 8012d78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012d7a:	4b03      	ldr	r3, [pc, #12]	; (8012d88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr
 8012d88:	2000038c 	.word	0x2000038c

08012d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d92:	4b0f      	ldr	r3, [pc, #60]	; (8012dd0 <Get_SerialNum+0x44>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d98:	4b0e      	ldr	r3, [pc, #56]	; (8012dd4 <Get_SerialNum+0x48>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d9e:	4b0e      	ldr	r3, [pc, #56]	; (8012dd8 <Get_SerialNum+0x4c>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4413      	add	r3, r2
 8012daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d009      	beq.n	8012dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012db2:	2208      	movs	r2, #8
 8012db4:	4909      	ldr	r1, [pc, #36]	; (8012ddc <Get_SerialNum+0x50>)
 8012db6:	68f8      	ldr	r0, [r7, #12]
 8012db8:	f000 f814 	bl	8012de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012dbc:	2204      	movs	r2, #4
 8012dbe:	4908      	ldr	r1, [pc, #32]	; (8012de0 <Get_SerialNum+0x54>)
 8012dc0:	68b8      	ldr	r0, [r7, #8]
 8012dc2:	f000 f80f 	bl	8012de4 <IntToUnicode>
  }
}
 8012dc6:	bf00      	nop
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	1fff7590 	.word	0x1fff7590
 8012dd4:	1fff7594 	.word	0x1fff7594
 8012dd8:	1fff7598 	.word	0x1fff7598
 8012ddc:	2000039e 	.word	0x2000039e
 8012de0:	200003ae 	.word	0x200003ae

08012de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b087      	sub	sp, #28
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	60b9      	str	r1, [r7, #8]
 8012dee:	4613      	mov	r3, r2
 8012df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012df6:	2300      	movs	r3, #0
 8012df8:	75fb      	strb	r3, [r7, #23]
 8012dfa:	e027      	b.n	8012e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	0f1b      	lsrs	r3, r3, #28
 8012e00:	2b09      	cmp	r3, #9
 8012e02:	d80b      	bhi.n	8012e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	0f1b      	lsrs	r3, r3, #28
 8012e08:	b2da      	uxtb	r2, r3
 8012e0a:	7dfb      	ldrb	r3, [r7, #23]
 8012e0c:	005b      	lsls	r3, r3, #1
 8012e0e:	4619      	mov	r1, r3
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	440b      	add	r3, r1
 8012e14:	3230      	adds	r2, #48	; 0x30
 8012e16:	b2d2      	uxtb	r2, r2
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	e00a      	b.n	8012e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	0f1b      	lsrs	r3, r3, #28
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	7dfb      	ldrb	r3, [r7, #23]
 8012e24:	005b      	lsls	r3, r3, #1
 8012e26:	4619      	mov	r1, r3
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	440b      	add	r3, r1
 8012e2c:	3237      	adds	r2, #55	; 0x37
 8012e2e:	b2d2      	uxtb	r2, r2
 8012e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	011b      	lsls	r3, r3, #4
 8012e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e38:	7dfb      	ldrb	r3, [r7, #23]
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	68ba      	ldr	r2, [r7, #8]
 8012e40:	4413      	add	r3, r2
 8012e42:	2200      	movs	r2, #0
 8012e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e46:	7dfb      	ldrb	r3, [r7, #23]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	75fb      	strb	r3, [r7, #23]
 8012e4c:	7dfa      	ldrb	r2, [r7, #23]
 8012e4e:	79fb      	ldrb	r3, [r7, #7]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d3d3      	bcc.n	8012dfc <IntToUnicode+0x18>
  }
}
 8012e54:	bf00      	nop
 8012e56:	bf00      	nop
 8012e58:	371c      	adds	r7, #28
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
	...

08012e64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b0b0      	sub	sp, #192	; 0xc0
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012e70:	2200      	movs	r2, #0
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	605a      	str	r2, [r3, #4]
 8012e76:	609a      	str	r2, [r3, #8]
 8012e78:	60da      	str	r2, [r3, #12]
 8012e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012e7c:	f107 0314 	add.w	r3, r7, #20
 8012e80:	2298      	movs	r2, #152	; 0x98
 8012e82:	2100      	movs	r1, #0
 8012e84:	4618      	mov	r0, r3
 8012e86:	f001 faf8 	bl	801447a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012e92:	d163      	bne.n	8012f5c <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012e98:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012ea0:	f107 0314 	add.w	r3, r7, #20
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f7 fcb7 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d001      	beq.n	8012eb4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012eb0:	f7f0 ff22 	bl	8003cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012eb4:	4b2b      	ldr	r3, [pc, #172]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012eb8:	4a2a      	ldr	r2, [pc, #168]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012eba:	f043 0301 	orr.w	r3, r3, #1
 8012ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ec0:	4b28      	ldr	r3, [pc, #160]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	613b      	str	r3, [r7, #16]
 8012eca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012ecc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eda:	2300      	movs	r3, #0
 8012edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ee0:	2303      	movs	r3, #3
 8012ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012ee6:	230a      	movs	r3, #10
 8012ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012eec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012ef6:	f7f5 f879 	bl	8007fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012efa:	4b1a      	ldr	r3, [pc, #104]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012efe:	4a19      	ldr	r2, [pc, #100]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f06:	4b17      	ldr	r3, [pc, #92]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012f0e:	60fb      	str	r3, [r7, #12]
 8012f10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012f12:	4b14      	ldr	r3, [pc, #80]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d114      	bne.n	8012f48 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012f1e:	4b11      	ldr	r3, [pc, #68]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f22:	4a10      	ldr	r2, [pc, #64]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f28:	6593      	str	r3, [r2, #88]	; 0x58
 8012f2a:	4b0e      	ldr	r3, [pc, #56]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f32:	60bb      	str	r3, [r7, #8]
 8012f34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012f36:	f7f6 fcb7 	bl	80098a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012f3a:	4b0a      	ldr	r3, [pc, #40]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f3e:	4a09      	ldr	r2, [pc, #36]	; (8012f64 <HAL_PCD_MspInit+0x100>)
 8012f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f44:	6593      	str	r3, [r2, #88]	; 0x58
 8012f46:	e001      	b.n	8012f4c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012f48:	f7f6 fcae 	bl	80098a8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	2105      	movs	r1, #5
 8012f50:	2043      	movs	r0, #67	; 0x43
 8012f52:	f7f4 fdaf 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012f56:	2043      	movs	r0, #67	; 0x43
 8012f58:	f7f4 fdc8 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f5c:	bf00      	nop
 8012f5e:	37c0      	adds	r7, #192	; 0xc0
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	40021000 	.word	0x40021000

08012f68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	4610      	mov	r0, r2
 8012f80:	f7fb fe80 	bl	800ec84 <USBD_LL_SetupStage>
}
 8012f84:	bf00      	nop
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	460b      	mov	r3, r1
 8012f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012f9e:	78fa      	ldrb	r2, [r7, #3]
 8012fa0:	6879      	ldr	r1, [r7, #4]
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	00db      	lsls	r3, r3, #3
 8012fa6:	4413      	add	r3, r2
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	440b      	add	r3, r1
 8012fac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	78fb      	ldrb	r3, [r7, #3]
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	f7fb feba 	bl	800ed2e <USBD_LL_DataOutStage>
}
 8012fba:	bf00      	nop
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b082      	sub	sp, #8
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
 8012fca:	460b      	mov	r3, r1
 8012fcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012fd4:	78fa      	ldrb	r2, [r7, #3]
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	4613      	mov	r3, r2
 8012fda:	00db      	lsls	r3, r3, #3
 8012fdc:	4413      	add	r3, r2
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	440b      	add	r3, r1
 8012fe2:	334c      	adds	r3, #76	; 0x4c
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	78fb      	ldrb	r3, [r7, #3]
 8012fe8:	4619      	mov	r1, r3
 8012fea:	f7fb ff03 	bl	800edf4 <USBD_LL_DataInStage>
}
 8012fee:	bf00      	nop
 8012ff0:	3708      	adds	r7, #8
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013004:	4618      	mov	r0, r3
 8013006:	f7fc f817 	bl	800f038 <USBD_LL_SOF>
}
 801300a:	bf00      	nop
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013012:	b580      	push	{r7, lr}
 8013014:	b084      	sub	sp, #16
 8013016:	af00      	add	r7, sp, #0
 8013018:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801301a:	2301      	movs	r3, #1
 801301c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	68db      	ldr	r3, [r3, #12]
 8013022:	2b02      	cmp	r3, #2
 8013024:	d001      	beq.n	801302a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013026:	f7f0 fe67 	bl	8003cf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013030:	7bfa      	ldrb	r2, [r7, #15]
 8013032:	4611      	mov	r1, r2
 8013034:	4618      	mov	r0, r3
 8013036:	f7fb ffc1 	bl	800efbc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013040:	4618      	mov	r0, r3
 8013042:	f7fb ff6d 	bl	800ef20 <USBD_LL_Reset>
}
 8013046:	bf00      	nop
 8013048:	3710      	adds	r7, #16
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
	...

08013050 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	6812      	ldr	r2, [r2, #0]
 8013066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801306a:	f043 0301 	orr.w	r3, r3, #1
 801306e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013076:	4618      	mov	r0, r3
 8013078:	f7fb ffb0 	bl	800efdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6a1b      	ldr	r3, [r3, #32]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d005      	beq.n	8013090 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013084:	4b04      	ldr	r3, [pc, #16]	; (8013098 <HAL_PCD_SuspendCallback+0x48>)
 8013086:	691b      	ldr	r3, [r3, #16]
 8013088:	4a03      	ldr	r2, [pc, #12]	; (8013098 <HAL_PCD_SuspendCallback+0x48>)
 801308a:	f043 0306 	orr.w	r3, r3, #6
 801308e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013090:	bf00      	nop
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}
 8013098:	e000ed00 	.word	0xe000ed00

0801309c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	6812      	ldr	r2, [r2, #0]
 80130b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130b6:	f023 0301 	bic.w	r3, r3, #1
 80130ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6a1b      	ldr	r3, [r3, #32]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130c4:	4b08      	ldr	r3, [pc, #32]	; (80130e8 <HAL_PCD_ResumeCallback+0x4c>)
 80130c6:	691b      	ldr	r3, [r3, #16]
 80130c8:	4a07      	ldr	r2, [pc, #28]	; (80130e8 <HAL_PCD_ResumeCallback+0x4c>)
 80130ca:	f023 0306 	bic.w	r3, r3, #6
 80130ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80130d0:	f000 faf4 	bl	80136bc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fb ff94 	bl	800f008 <USBD_LL_Resume>
}
 80130e0:	bf00      	nop
 80130e2:	3708      	adds	r7, #8
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	e000ed00 	.word	0xe000ed00

080130ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	460b      	mov	r3, r1
 80130f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130fe:	78fa      	ldrb	r2, [r7, #3]
 8013100:	4611      	mov	r1, r2
 8013102:	4618      	mov	r0, r3
 8013104:	f7fb ffe0 	bl	800f0c8 <USBD_LL_IsoOUTIncomplete>
}
 8013108:	bf00      	nop
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	460b      	mov	r3, r1
 801311a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013122:	78fa      	ldrb	r2, [r7, #3]
 8013124:	4611      	mov	r1, r2
 8013126:	4618      	mov	r0, r3
 8013128:	f7fb ffa8 	bl	800f07c <USBD_LL_IsoINIncomplete>
}
 801312c:	bf00      	nop
 801312e:	3708      	adds	r7, #8
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013142:	4618      	mov	r0, r3
 8013144:	f7fb ffe6 	bl	800f114 <USBD_LL_DevConnected>
}
 8013148:	bf00      	nop
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801315e:	4618      	mov	r0, r3
 8013160:	f7fb ffe3 	bl	800f12a <USBD_LL_DevDisconnected>
}
 8013164:	bf00      	nop
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d139      	bne.n	80131f0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801317c:	4a1f      	ldr	r2, [pc, #124]	; (80131fc <USBD_LL_Init+0x90>)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	4a1d      	ldr	r2, [pc, #116]	; (80131fc <USBD_LL_Init+0x90>)
 8013188:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801318c:	4b1b      	ldr	r3, [pc, #108]	; (80131fc <USBD_LL_Init+0x90>)
 801318e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013192:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013194:	4b19      	ldr	r3, [pc, #100]	; (80131fc <USBD_LL_Init+0x90>)
 8013196:	2206      	movs	r2, #6
 8013198:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801319a:	4b18      	ldr	r3, [pc, #96]	; (80131fc <USBD_LL_Init+0x90>)
 801319c:	2202      	movs	r2, #2
 801319e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80131a0:	4b16      	ldr	r3, [pc, #88]	; (80131fc <USBD_LL_Init+0x90>)
 80131a2:	2200      	movs	r2, #0
 80131a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80131a6:	4b15      	ldr	r3, [pc, #84]	; (80131fc <USBD_LL_Init+0x90>)
 80131a8:	2200      	movs	r2, #0
 80131aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80131ac:	4b13      	ldr	r3, [pc, #76]	; (80131fc <USBD_LL_Init+0x90>)
 80131ae:	2200      	movs	r2, #0
 80131b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80131b2:	4b12      	ldr	r3, [pc, #72]	; (80131fc <USBD_LL_Init+0x90>)
 80131b4:	2200      	movs	r2, #0
 80131b6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80131b8:	4b10      	ldr	r3, [pc, #64]	; (80131fc <USBD_LL_Init+0x90>)
 80131ba:	2200      	movs	r2, #0
 80131bc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80131be:	4b0f      	ldr	r3, [pc, #60]	; (80131fc <USBD_LL_Init+0x90>)
 80131c0:	2200      	movs	r2, #0
 80131c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80131c4:	480d      	ldr	r0, [pc, #52]	; (80131fc <USBD_LL_Init+0x90>)
 80131c6:	f7f5 f8d3 	bl	8008370 <HAL_PCD_Init>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80131d0:	f7f0 fd92 	bl	8003cf8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80131d4:	2180      	movs	r1, #128	; 0x80
 80131d6:	4809      	ldr	r0, [pc, #36]	; (80131fc <USBD_LL_Init+0x90>)
 80131d8:	f7f6 fa55 	bl	8009686 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80131dc:	2240      	movs	r2, #64	; 0x40
 80131de:	2100      	movs	r1, #0
 80131e0:	4806      	ldr	r0, [pc, #24]	; (80131fc <USBD_LL_Init+0x90>)
 80131e2:	f7f6 fa09 	bl	80095f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80131e6:	2280      	movs	r2, #128	; 0x80
 80131e8:	2101      	movs	r1, #1
 80131ea:	4804      	ldr	r0, [pc, #16]	; (80131fc <USBD_LL_Init+0x90>)
 80131ec:	f7f6 fa04 	bl	80095f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	200090fc 	.word	0x200090fc

08013200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801320c:	2300      	movs	r3, #0
 801320e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013216:	4618      	mov	r0, r3
 8013218:	f7f5 f9ce 	bl	80085b8 <HAL_PCD_Start>
 801321c:	4603      	mov	r3, r0
 801321e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013220:	7bbb      	ldrb	r3, [r7, #14]
 8013222:	2b03      	cmp	r3, #3
 8013224:	d816      	bhi.n	8013254 <USBD_LL_Start+0x54>
 8013226:	a201      	add	r2, pc, #4	; (adr r2, 801322c <USBD_LL_Start+0x2c>)
 8013228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801322c:	0801323d 	.word	0x0801323d
 8013230:	08013243 	.word	0x08013243
 8013234:	08013249 	.word	0x08013249
 8013238:	0801324f 	.word	0x0801324f
    case HAL_OK :
      usb_status = USBD_OK;
 801323c:	2300      	movs	r3, #0
 801323e:	73fb      	strb	r3, [r7, #15]
    break;
 8013240:	e00b      	b.n	801325a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013242:	2303      	movs	r3, #3
 8013244:	73fb      	strb	r3, [r7, #15]
    break;
 8013246:	e008      	b.n	801325a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013248:	2301      	movs	r3, #1
 801324a:	73fb      	strb	r3, [r7, #15]
    break;
 801324c:	e005      	b.n	801325a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801324e:	2303      	movs	r3, #3
 8013250:	73fb      	strb	r3, [r7, #15]
    break;
 8013252:	e002      	b.n	801325a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013254:	2303      	movs	r3, #3
 8013256:	73fb      	strb	r3, [r7, #15]
    break;
 8013258:	bf00      	nop
  }
  return usb_status;
 801325a:	7bfb      	ldrb	r3, [r7, #15]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3710      	adds	r7, #16
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	4608      	mov	r0, r1
 801326e:	4611      	mov	r1, r2
 8013270:	461a      	mov	r2, r3
 8013272:	4603      	mov	r3, r0
 8013274:	70fb      	strb	r3, [r7, #3]
 8013276:	460b      	mov	r3, r1
 8013278:	70bb      	strb	r3, [r7, #2]
 801327a:	4613      	mov	r3, r2
 801327c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801327e:	2300      	movs	r3, #0
 8013280:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801328c:	78bb      	ldrb	r3, [r7, #2]
 801328e:	883a      	ldrh	r2, [r7, #0]
 8013290:	78f9      	ldrb	r1, [r7, #3]
 8013292:	f7f5 fe78 	bl	8008f86 <HAL_PCD_EP_Open>
 8013296:	4603      	mov	r3, r0
 8013298:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801329a:	7bbb      	ldrb	r3, [r7, #14]
 801329c:	2b03      	cmp	r3, #3
 801329e:	d817      	bhi.n	80132d0 <USBD_LL_OpenEP+0x6c>
 80132a0:	a201      	add	r2, pc, #4	; (adr r2, 80132a8 <USBD_LL_OpenEP+0x44>)
 80132a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132a6:	bf00      	nop
 80132a8:	080132b9 	.word	0x080132b9
 80132ac:	080132bf 	.word	0x080132bf
 80132b0:	080132c5 	.word	0x080132c5
 80132b4:	080132cb 	.word	0x080132cb
    case HAL_OK :
      usb_status = USBD_OK;
 80132b8:	2300      	movs	r3, #0
 80132ba:	73fb      	strb	r3, [r7, #15]
    break;
 80132bc:	e00b      	b.n	80132d6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132be:	2303      	movs	r3, #3
 80132c0:	73fb      	strb	r3, [r7, #15]
    break;
 80132c2:	e008      	b.n	80132d6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132c4:	2301      	movs	r3, #1
 80132c6:	73fb      	strb	r3, [r7, #15]
    break;
 80132c8:	e005      	b.n	80132d6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132ca:	2303      	movs	r3, #3
 80132cc:	73fb      	strb	r3, [r7, #15]
    break;
 80132ce:	e002      	b.n	80132d6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80132d0:	2303      	movs	r3, #3
 80132d2:	73fb      	strb	r3, [r7, #15]
    break;
 80132d4:	bf00      	nop
  }
  return usb_status;
 80132d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	460b      	mov	r3, r1
 80132ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132ec:	2300      	movs	r3, #0
 80132ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132f0:	2300      	movs	r3, #0
 80132f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132fa:	78fa      	ldrb	r2, [r7, #3]
 80132fc:	4611      	mov	r1, r2
 80132fe:	4618      	mov	r0, r3
 8013300:	f7f5 fea9 	bl	8009056 <HAL_PCD_EP_Close>
 8013304:	4603      	mov	r3, r0
 8013306:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013308:	7bbb      	ldrb	r3, [r7, #14]
 801330a:	2b03      	cmp	r3, #3
 801330c:	d816      	bhi.n	801333c <USBD_LL_CloseEP+0x5c>
 801330e:	a201      	add	r2, pc, #4	; (adr r2, 8013314 <USBD_LL_CloseEP+0x34>)
 8013310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013314:	08013325 	.word	0x08013325
 8013318:	0801332b 	.word	0x0801332b
 801331c:	08013331 	.word	0x08013331
 8013320:	08013337 	.word	0x08013337
    case HAL_OK :
      usb_status = USBD_OK;
 8013324:	2300      	movs	r3, #0
 8013326:	73fb      	strb	r3, [r7, #15]
    break;
 8013328:	e00b      	b.n	8013342 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801332a:	2303      	movs	r3, #3
 801332c:	73fb      	strb	r3, [r7, #15]
    break;
 801332e:	e008      	b.n	8013342 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013330:	2301      	movs	r3, #1
 8013332:	73fb      	strb	r3, [r7, #15]
    break;
 8013334:	e005      	b.n	8013342 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013336:	2303      	movs	r3, #3
 8013338:	73fb      	strb	r3, [r7, #15]
    break;
 801333a:	e002      	b.n	8013342 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801333c:	2303      	movs	r3, #3
 801333e:	73fb      	strb	r3, [r7, #15]
    break;
 8013340:	bf00      	nop
  }
  return usb_status;
 8013342:	7bfb      	ldrb	r3, [r7, #15]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3710      	adds	r7, #16
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	460b      	mov	r3, r1
 8013356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013358:	2300      	movs	r3, #0
 801335a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801335c:	2300      	movs	r3, #0
 801335e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013366:	78fa      	ldrb	r2, [r7, #3]
 8013368:	4611      	mov	r1, r2
 801336a:	4618      	mov	r0, r3
 801336c:	f7f5 ff50 	bl	8009210 <HAL_PCD_EP_SetStall>
 8013370:	4603      	mov	r3, r0
 8013372:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013374:	7bbb      	ldrb	r3, [r7, #14]
 8013376:	2b03      	cmp	r3, #3
 8013378:	d816      	bhi.n	80133a8 <USBD_LL_StallEP+0x5c>
 801337a:	a201      	add	r2, pc, #4	; (adr r2, 8013380 <USBD_LL_StallEP+0x34>)
 801337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013380:	08013391 	.word	0x08013391
 8013384:	08013397 	.word	0x08013397
 8013388:	0801339d 	.word	0x0801339d
 801338c:	080133a3 	.word	0x080133a3
    case HAL_OK :
      usb_status = USBD_OK;
 8013390:	2300      	movs	r3, #0
 8013392:	73fb      	strb	r3, [r7, #15]
    break;
 8013394:	e00b      	b.n	80133ae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013396:	2303      	movs	r3, #3
 8013398:	73fb      	strb	r3, [r7, #15]
    break;
 801339a:	e008      	b.n	80133ae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801339c:	2301      	movs	r3, #1
 801339e:	73fb      	strb	r3, [r7, #15]
    break;
 80133a0:	e005      	b.n	80133ae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80133a2:	2303      	movs	r3, #3
 80133a4:	73fb      	strb	r3, [r7, #15]
    break;
 80133a6:	e002      	b.n	80133ae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80133a8:	2303      	movs	r3, #3
 80133aa:	73fb      	strb	r3, [r7, #15]
    break;
 80133ac:	bf00      	nop
  }
  return usb_status;
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3710      	adds	r7, #16
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	460b      	mov	r3, r1
 80133c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133c4:	2300      	movs	r3, #0
 80133c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133d2:	78fa      	ldrb	r2, [r7, #3]
 80133d4:	4611      	mov	r1, r2
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7f5 ff7c 	bl	80092d4 <HAL_PCD_EP_ClrStall>
 80133dc:	4603      	mov	r3, r0
 80133de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80133e0:	7bbb      	ldrb	r3, [r7, #14]
 80133e2:	2b03      	cmp	r3, #3
 80133e4:	d816      	bhi.n	8013414 <USBD_LL_ClearStallEP+0x5c>
 80133e6:	a201      	add	r2, pc, #4	; (adr r2, 80133ec <USBD_LL_ClearStallEP+0x34>)
 80133e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ec:	080133fd 	.word	0x080133fd
 80133f0:	08013403 	.word	0x08013403
 80133f4:	08013409 	.word	0x08013409
 80133f8:	0801340f 	.word	0x0801340f
    case HAL_OK :
      usb_status = USBD_OK;
 80133fc:	2300      	movs	r3, #0
 80133fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013400:	e00b      	b.n	801341a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013402:	2303      	movs	r3, #3
 8013404:	73fb      	strb	r3, [r7, #15]
    break;
 8013406:	e008      	b.n	801341a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013408:	2301      	movs	r3, #1
 801340a:	73fb      	strb	r3, [r7, #15]
    break;
 801340c:	e005      	b.n	801341a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801340e:	2303      	movs	r3, #3
 8013410:	73fb      	strb	r3, [r7, #15]
    break;
 8013412:	e002      	b.n	801341a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013414:	2303      	movs	r3, #3
 8013416:	73fb      	strb	r3, [r7, #15]
    break;
 8013418:	bf00      	nop
  }
  return usb_status;
 801341a:	7bfb      	ldrb	r3, [r7, #15]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3710      	adds	r7, #16
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	460b      	mov	r3, r1
 801342e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013436:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801343c:	2b00      	cmp	r3, #0
 801343e:	da0b      	bge.n	8013458 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013440:	78fb      	ldrb	r3, [r7, #3]
 8013442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013446:	68f9      	ldr	r1, [r7, #12]
 8013448:	4613      	mov	r3, r2
 801344a:	00db      	lsls	r3, r3, #3
 801344c:	4413      	add	r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	440b      	add	r3, r1
 8013452:	333e      	adds	r3, #62	; 0x3e
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	e00b      	b.n	8013470 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013458:	78fb      	ldrb	r3, [r7, #3]
 801345a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801345e:	68f9      	ldr	r1, [r7, #12]
 8013460:	4613      	mov	r3, r2
 8013462:	00db      	lsls	r3, r3, #3
 8013464:	4413      	add	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	440b      	add	r3, r1
 801346a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801346e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013470:	4618      	mov	r0, r3
 8013472:	3714      	adds	r7, #20
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr

0801347c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b084      	sub	sp, #16
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	460b      	mov	r3, r1
 8013486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013488:	2300      	movs	r3, #0
 801348a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801348c:	2300      	movs	r3, #0
 801348e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013496:	78fa      	ldrb	r2, [r7, #3]
 8013498:	4611      	mov	r1, r2
 801349a:	4618      	mov	r0, r3
 801349c:	f7f5 fd4e 	bl	8008f3c <HAL_PCD_SetAddress>
 80134a0:	4603      	mov	r3, r0
 80134a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80134a4:	7bbb      	ldrb	r3, [r7, #14]
 80134a6:	2b03      	cmp	r3, #3
 80134a8:	d816      	bhi.n	80134d8 <USBD_LL_SetUSBAddress+0x5c>
 80134aa:	a201      	add	r2, pc, #4	; (adr r2, 80134b0 <USBD_LL_SetUSBAddress+0x34>)
 80134ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134b0:	080134c1 	.word	0x080134c1
 80134b4:	080134c7 	.word	0x080134c7
 80134b8:	080134cd 	.word	0x080134cd
 80134bc:	080134d3 	.word	0x080134d3
    case HAL_OK :
      usb_status = USBD_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	73fb      	strb	r3, [r7, #15]
    break;
 80134c4:	e00b      	b.n	80134de <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134c6:	2303      	movs	r3, #3
 80134c8:	73fb      	strb	r3, [r7, #15]
    break;
 80134ca:	e008      	b.n	80134de <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134cc:	2301      	movs	r3, #1
 80134ce:	73fb      	strb	r3, [r7, #15]
    break;
 80134d0:	e005      	b.n	80134de <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134d2:	2303      	movs	r3, #3
 80134d4:	73fb      	strb	r3, [r7, #15]
    break;
 80134d6:	e002      	b.n	80134de <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80134d8:	2303      	movs	r3, #3
 80134da:	73fb      	strb	r3, [r7, #15]
    break;
 80134dc:	bf00      	nop
  }
  return usb_status;
 80134de:	7bfb      	ldrb	r3, [r7, #15]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3710      	adds	r7, #16
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	607a      	str	r2, [r7, #4]
 80134f2:	603b      	str	r3, [r7, #0]
 80134f4:	460b      	mov	r3, r1
 80134f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134f8:	2300      	movs	r3, #0
 80134fa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134fc:	2300      	movs	r3, #0
 80134fe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013506:	7af9      	ldrb	r1, [r7, #11]
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	f7f5 fe43 	bl	8009196 <HAL_PCD_EP_Transmit>
 8013510:	4603      	mov	r3, r0
 8013512:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013514:	7dbb      	ldrb	r3, [r7, #22]
 8013516:	2b03      	cmp	r3, #3
 8013518:	d816      	bhi.n	8013548 <USBD_LL_Transmit+0x60>
 801351a:	a201      	add	r2, pc, #4	; (adr r2, 8013520 <USBD_LL_Transmit+0x38>)
 801351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013520:	08013531 	.word	0x08013531
 8013524:	08013537 	.word	0x08013537
 8013528:	0801353d 	.word	0x0801353d
 801352c:	08013543 	.word	0x08013543
    case HAL_OK :
      usb_status = USBD_OK;
 8013530:	2300      	movs	r3, #0
 8013532:	75fb      	strb	r3, [r7, #23]
    break;
 8013534:	e00b      	b.n	801354e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013536:	2303      	movs	r3, #3
 8013538:	75fb      	strb	r3, [r7, #23]
    break;
 801353a:	e008      	b.n	801354e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801353c:	2301      	movs	r3, #1
 801353e:	75fb      	strb	r3, [r7, #23]
    break;
 8013540:	e005      	b.n	801354e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013542:	2303      	movs	r3, #3
 8013544:	75fb      	strb	r3, [r7, #23]
    break;
 8013546:	e002      	b.n	801354e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013548:	2303      	movs	r3, #3
 801354a:	75fb      	strb	r3, [r7, #23]
    break;
 801354c:	bf00      	nop
  }
  return usb_status;
 801354e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013550:	4618      	mov	r0, r3
 8013552:	3718      	adds	r7, #24
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	607a      	str	r2, [r7, #4]
 8013562:	603b      	str	r3, [r7, #0]
 8013564:	460b      	mov	r3, r1
 8013566:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013568:	2300      	movs	r3, #0
 801356a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801356c:	2300      	movs	r3, #0
 801356e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013576:	7af9      	ldrb	r1, [r7, #11]
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	f7f5 fdb5 	bl	80090ea <HAL_PCD_EP_Receive>
 8013580:	4603      	mov	r3, r0
 8013582:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013584:	7dbb      	ldrb	r3, [r7, #22]
 8013586:	2b03      	cmp	r3, #3
 8013588:	d816      	bhi.n	80135b8 <USBD_LL_PrepareReceive+0x60>
 801358a:	a201      	add	r2, pc, #4	; (adr r2, 8013590 <USBD_LL_PrepareReceive+0x38>)
 801358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013590:	080135a1 	.word	0x080135a1
 8013594:	080135a7 	.word	0x080135a7
 8013598:	080135ad 	.word	0x080135ad
 801359c:	080135b3 	.word	0x080135b3
    case HAL_OK :
      usb_status = USBD_OK;
 80135a0:	2300      	movs	r3, #0
 80135a2:	75fb      	strb	r3, [r7, #23]
    break;
 80135a4:	e00b      	b.n	80135be <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80135a6:	2303      	movs	r3, #3
 80135a8:	75fb      	strb	r3, [r7, #23]
    break;
 80135aa:	e008      	b.n	80135be <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80135ac:	2301      	movs	r3, #1
 80135ae:	75fb      	strb	r3, [r7, #23]
    break;
 80135b0:	e005      	b.n	80135be <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80135b2:	2303      	movs	r3, #3
 80135b4:	75fb      	strb	r3, [r7, #23]
    break;
 80135b6:	e002      	b.n	80135be <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80135b8:	2303      	movs	r3, #3
 80135ba:	75fb      	strb	r3, [r7, #23]
    break;
 80135bc:	bf00      	nop
  }
  return usb_status;
 80135be:	7dfb      	ldrb	r3, [r7, #23]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3718      	adds	r7, #24
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	460b      	mov	r3, r1
 80135d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135da:	78fa      	ldrb	r2, [r7, #3]
 80135dc:	4611      	mov	r1, r2
 80135de:	4618      	mov	r0, r3
 80135e0:	f7f5 fdc1 	bl	8009166 <HAL_PCD_EP_GetRxCount>
 80135e4:	4603      	mov	r3, r0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
	...

080135f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	460b      	mov	r3, r1
 80135fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80135fc:	78fb      	ldrb	r3, [r7, #3]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d002      	beq.n	8013608 <HAL_PCDEx_LPM_Callback+0x18>
 8013602:	2b01      	cmp	r3, #1
 8013604:	d01f      	beq.n	8013646 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013606:	e03b      	b.n	8013680 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6a1b      	ldr	r3, [r3, #32]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d007      	beq.n	8013620 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013610:	f000 f854 	bl	80136bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013614:	4b1c      	ldr	r3, [pc, #112]	; (8013688 <HAL_PCDEx_LPM_Callback+0x98>)
 8013616:	691b      	ldr	r3, [r3, #16]
 8013618:	4a1b      	ldr	r2, [pc, #108]	; (8013688 <HAL_PCDEx_LPM_Callback+0x98>)
 801361a:	f023 0306 	bic.w	r3, r3, #6
 801361e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	687a      	ldr	r2, [r7, #4]
 801362c:	6812      	ldr	r2, [r2, #0]
 801362e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013632:	f023 0301 	bic.w	r3, r3, #1
 8013636:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801363e:	4618      	mov	r0, r3
 8013640:	f7fb fce2 	bl	800f008 <USBD_LL_Resume>
    break;
 8013644:	e01c      	b.n	8013680 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	687a      	ldr	r2, [r7, #4]
 8013652:	6812      	ldr	r2, [r2, #0]
 8013654:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013658:	f043 0301 	orr.w	r3, r3, #1
 801365c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013664:	4618      	mov	r0, r3
 8013666:	f7fb fcb9 	bl	800efdc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6a1b      	ldr	r3, [r3, #32]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d005      	beq.n	801367e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013672:	4b05      	ldr	r3, [pc, #20]	; (8013688 <HAL_PCDEx_LPM_Callback+0x98>)
 8013674:	691b      	ldr	r3, [r3, #16]
 8013676:	4a04      	ldr	r2, [pc, #16]	; (8013688 <HAL_PCDEx_LPM_Callback+0x98>)
 8013678:	f043 0306 	orr.w	r3, r3, #6
 801367c:	6113      	str	r3, [r2, #16]
    break;
 801367e:	bf00      	nop
}
 8013680:	bf00      	nop
 8013682:	3708      	adds	r7, #8
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	e000ed00 	.word	0xe000ed00

0801368c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013694:	4b03      	ldr	r3, [pc, #12]	; (80136a4 <USBD_static_malloc+0x18>)
}
 8013696:	4618      	mov	r0, r3
 8013698:	370c      	adds	r7, #12
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr
 80136a2:	bf00      	nop
 80136a4:	20009608 	.word	0x20009608

080136a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]

}
 80136b0:	bf00      	nop
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr

080136bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80136c0:	f7ef fe50 	bl	8003364 <SystemClock_Config>
}
 80136c4:	bf00      	nop
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <expf>:
 80136c8:	b508      	push	{r3, lr}
 80136ca:	ed2d 8b02 	vpush	{d8}
 80136ce:	eef0 8a40 	vmov.f32	s17, s0
 80136d2:	f000 f83d 	bl	8013750 <__ieee754_expf>
 80136d6:	eeb0 8a40 	vmov.f32	s16, s0
 80136da:	eeb0 0a68 	vmov.f32	s0, s17
 80136de:	f000 f829 	bl	8013734 <finitef>
 80136e2:	b160      	cbz	r0, 80136fe <expf+0x36>
 80136e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013724 <expf+0x5c>
 80136e8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80136ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f0:	dd0a      	ble.n	8013708 <expf+0x40>
 80136f2:	f000 ff6b 	bl	80145cc <__errno>
 80136f6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013728 <expf+0x60>
 80136fa:	2322      	movs	r3, #34	; 0x22
 80136fc:	6003      	str	r3, [r0, #0]
 80136fe:	eeb0 0a48 	vmov.f32	s0, s16
 8013702:	ecbd 8b02 	vpop	{d8}
 8013706:	bd08      	pop	{r3, pc}
 8013708:	eddf 7a08 	vldr	s15, [pc, #32]	; 801372c <expf+0x64>
 801370c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013714:	d5f3      	bpl.n	80136fe <expf+0x36>
 8013716:	f000 ff59 	bl	80145cc <__errno>
 801371a:	2322      	movs	r3, #34	; 0x22
 801371c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013730 <expf+0x68>
 8013720:	6003      	str	r3, [r0, #0]
 8013722:	e7ec      	b.n	80136fe <expf+0x36>
 8013724:	42b17217 	.word	0x42b17217
 8013728:	7f800000 	.word	0x7f800000
 801372c:	c2cff1b5 	.word	0xc2cff1b5
 8013730:	00000000 	.word	0x00000000

08013734 <finitef>:
 8013734:	b082      	sub	sp, #8
 8013736:	ed8d 0a01 	vstr	s0, [sp, #4]
 801373a:	9801      	ldr	r0, [sp, #4]
 801373c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013740:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013744:	bfac      	ite	ge
 8013746:	2000      	movge	r0, #0
 8013748:	2001      	movlt	r0, #1
 801374a:	b002      	add	sp, #8
 801374c:	4770      	bx	lr
	...

08013750 <__ieee754_expf>:
 8013750:	ee10 2a10 	vmov	r2, s0
 8013754:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013758:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801375c:	d902      	bls.n	8013764 <__ieee754_expf+0x14>
 801375e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013762:	4770      	bx	lr
 8013764:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8013768:	d106      	bne.n	8013778 <__ieee754_expf+0x28>
 801376a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80138a4 <__ieee754_expf+0x154>
 801376e:	2900      	cmp	r1, #0
 8013770:	bf18      	it	ne
 8013772:	eeb0 0a67 	vmovne.f32	s0, s15
 8013776:	4770      	bx	lr
 8013778:	484b      	ldr	r0, [pc, #300]	; (80138a8 <__ieee754_expf+0x158>)
 801377a:	4282      	cmp	r2, r0
 801377c:	dd02      	ble.n	8013784 <__ieee754_expf+0x34>
 801377e:	2000      	movs	r0, #0
 8013780:	f000 b8d0 	b.w	8013924 <__math_oflowf>
 8013784:	2a00      	cmp	r2, #0
 8013786:	da05      	bge.n	8013794 <__ieee754_expf+0x44>
 8013788:	4a48      	ldr	r2, [pc, #288]	; (80138ac <__ieee754_expf+0x15c>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d902      	bls.n	8013794 <__ieee754_expf+0x44>
 801378e:	2000      	movs	r0, #0
 8013790:	f000 b8c2 	b.w	8013918 <__math_uflowf>
 8013794:	4a46      	ldr	r2, [pc, #280]	; (80138b0 <__ieee754_expf+0x160>)
 8013796:	4293      	cmp	r3, r2
 8013798:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801379c:	d952      	bls.n	8013844 <__ieee754_expf+0xf4>
 801379e:	4a45      	ldr	r2, [pc, #276]	; (80138b4 <__ieee754_expf+0x164>)
 80137a0:	4293      	cmp	r3, r2
 80137a2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80137a6:	d834      	bhi.n	8013812 <__ieee754_expf+0xc2>
 80137a8:	4b43      	ldr	r3, [pc, #268]	; (80138b8 <__ieee754_expf+0x168>)
 80137aa:	4413      	add	r3, r2
 80137ac:	ed93 7a00 	vldr	s14, [r3]
 80137b0:	4b42      	ldr	r3, [pc, #264]	; (80138bc <__ieee754_expf+0x16c>)
 80137b2:	4413      	add	r3, r2
 80137b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80137b8:	f1c1 0201 	rsb	r2, r1, #1
 80137bc:	edd3 7a00 	vldr	s15, [r3]
 80137c0:	1a52      	subs	r2, r2, r1
 80137c2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80137c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80137ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80138c0 <__ieee754_expf+0x170>
 80137ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80138c4 <__ieee754_expf+0x174>
 80137d2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80137d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80138c8 <__ieee754_expf+0x178>
 80137da:	eea6 5a86 	vfma.f32	s10, s13, s12
 80137de:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80138cc <__ieee754_expf+0x17c>
 80137e2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80137e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80138d0 <__ieee754_expf+0x180>
 80137ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 80137ee:	eef0 6a40 	vmov.f32	s13, s0
 80137f2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80137f6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80137fa:	ee20 5a26 	vmul.f32	s10, s0, s13
 80137fe:	bb92      	cbnz	r2, 8013866 <__ieee754_expf+0x116>
 8013800:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013804:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013808:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801380c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8013810:	4770      	bx	lr
 8013812:	4b30      	ldr	r3, [pc, #192]	; (80138d4 <__ieee754_expf+0x184>)
 8013814:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80138d8 <__ieee754_expf+0x188>
 8013818:	eddf 6a30 	vldr	s13, [pc, #192]	; 80138dc <__ieee754_expf+0x18c>
 801381c:	4413      	add	r3, r2
 801381e:	edd3 7a00 	vldr	s15, [r3]
 8013822:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013826:	eeb0 7a40 	vmov.f32	s14, s0
 801382a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801382e:	ee17 2a90 	vmov	r2, s15
 8013832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013836:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801383a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80138e0 <__ieee754_expf+0x190>
 801383e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013842:	e7be      	b.n	80137c2 <__ieee754_expf+0x72>
 8013844:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8013848:	d20b      	bcs.n	8013862 <__ieee754_expf+0x112>
 801384a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80138e4 <__ieee754_expf+0x194>
 801384e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8013852:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385a:	dd02      	ble.n	8013862 <__ieee754_expf+0x112>
 801385c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8013860:	4770      	bx	lr
 8013862:	2200      	movs	r2, #0
 8013864:	e7af      	b.n	80137c6 <__ieee754_expf+0x76>
 8013866:	ee36 6a66 	vsub.f32	s12, s12, s13
 801386a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801386e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8013872:	bfb8      	it	lt
 8013874:	3264      	addlt	r2, #100	; 0x64
 8013876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801387a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801387e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013882:	ee17 3a90 	vmov	r3, s15
 8013886:	bfab      	itete	ge
 8013888:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801388c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013890:	ee00 3a10 	vmovge	s0, r3
 8013894:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80138e8 <__ieee754_expf+0x198>
 8013898:	bfbc      	itt	lt
 801389a:	ee00 3a10 	vmovlt	s0, r3
 801389e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80138a2:	4770      	bx	lr
 80138a4:	00000000 	.word	0x00000000
 80138a8:	42b17217 	.word	0x42b17217
 80138ac:	42cff1b5 	.word	0x42cff1b5
 80138b0:	3eb17218 	.word	0x3eb17218
 80138b4:	3f851591 	.word	0x3f851591
 80138b8:	08016d30 	.word	0x08016d30
 80138bc:	08016d38 	.word	0x08016d38
 80138c0:	3331bb4c 	.word	0x3331bb4c
 80138c4:	b5ddea0e 	.word	0xb5ddea0e
 80138c8:	388ab355 	.word	0x388ab355
 80138cc:	bb360b61 	.word	0xbb360b61
 80138d0:	3e2aaaab 	.word	0x3e2aaaab
 80138d4:	08016d28 	.word	0x08016d28
 80138d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80138dc:	3f317180 	.word	0x3f317180
 80138e0:	3717f7d1 	.word	0x3717f7d1
 80138e4:	7149f2ca 	.word	0x7149f2ca
 80138e8:	0d800000 	.word	0x0d800000

080138ec <with_errnof>:
 80138ec:	b513      	push	{r0, r1, r4, lr}
 80138ee:	4604      	mov	r4, r0
 80138f0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80138f4:	f000 fe6a 	bl	80145cc <__errno>
 80138f8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80138fc:	6004      	str	r4, [r0, #0]
 80138fe:	b002      	add	sp, #8
 8013900:	bd10      	pop	{r4, pc}

08013902 <xflowf>:
 8013902:	b130      	cbz	r0, 8013912 <xflowf+0x10>
 8013904:	eef1 7a40 	vneg.f32	s15, s0
 8013908:	ee27 0a80 	vmul.f32	s0, s15, s0
 801390c:	2022      	movs	r0, #34	; 0x22
 801390e:	f7ff bfed 	b.w	80138ec <with_errnof>
 8013912:	eef0 7a40 	vmov.f32	s15, s0
 8013916:	e7f7      	b.n	8013908 <xflowf+0x6>

08013918 <__math_uflowf>:
 8013918:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013920 <__math_uflowf+0x8>
 801391c:	f7ff bff1 	b.w	8013902 <xflowf>
 8013920:	10000000 	.word	0x10000000

08013924 <__math_oflowf>:
 8013924:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801392c <__math_oflowf+0x8>
 8013928:	f7ff bfeb 	b.w	8013902 <xflowf>
 801392c:	70000000 	.word	0x70000000

08013930 <__cvt>:
 8013930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013934:	ec55 4b10 	vmov	r4, r5, d0
 8013938:	2d00      	cmp	r5, #0
 801393a:	460e      	mov	r6, r1
 801393c:	4619      	mov	r1, r3
 801393e:	462b      	mov	r3, r5
 8013940:	bfbb      	ittet	lt
 8013942:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013946:	461d      	movlt	r5, r3
 8013948:	2300      	movge	r3, #0
 801394a:	232d      	movlt	r3, #45	; 0x2d
 801394c:	700b      	strb	r3, [r1, #0]
 801394e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013950:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013954:	4691      	mov	r9, r2
 8013956:	f023 0820 	bic.w	r8, r3, #32
 801395a:	bfbc      	itt	lt
 801395c:	4622      	movlt	r2, r4
 801395e:	4614      	movlt	r4, r2
 8013960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013964:	d005      	beq.n	8013972 <__cvt+0x42>
 8013966:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801396a:	d100      	bne.n	801396e <__cvt+0x3e>
 801396c:	3601      	adds	r6, #1
 801396e:	2102      	movs	r1, #2
 8013970:	e000      	b.n	8013974 <__cvt+0x44>
 8013972:	2103      	movs	r1, #3
 8013974:	ab03      	add	r3, sp, #12
 8013976:	9301      	str	r3, [sp, #4]
 8013978:	ab02      	add	r3, sp, #8
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	ec45 4b10 	vmov	d0, r4, r5
 8013980:	4653      	mov	r3, sl
 8013982:	4632      	mov	r2, r6
 8013984:	f000 fee8 	bl	8014758 <_dtoa_r>
 8013988:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801398c:	4607      	mov	r7, r0
 801398e:	d102      	bne.n	8013996 <__cvt+0x66>
 8013990:	f019 0f01 	tst.w	r9, #1
 8013994:	d022      	beq.n	80139dc <__cvt+0xac>
 8013996:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801399a:	eb07 0906 	add.w	r9, r7, r6
 801399e:	d110      	bne.n	80139c2 <__cvt+0x92>
 80139a0:	783b      	ldrb	r3, [r7, #0]
 80139a2:	2b30      	cmp	r3, #48	; 0x30
 80139a4:	d10a      	bne.n	80139bc <__cvt+0x8c>
 80139a6:	2200      	movs	r2, #0
 80139a8:	2300      	movs	r3, #0
 80139aa:	4620      	mov	r0, r4
 80139ac:	4629      	mov	r1, r5
 80139ae:	f7ed f8a3 	bl	8000af8 <__aeabi_dcmpeq>
 80139b2:	b918      	cbnz	r0, 80139bc <__cvt+0x8c>
 80139b4:	f1c6 0601 	rsb	r6, r6, #1
 80139b8:	f8ca 6000 	str.w	r6, [sl]
 80139bc:	f8da 3000 	ldr.w	r3, [sl]
 80139c0:	4499      	add	r9, r3
 80139c2:	2200      	movs	r2, #0
 80139c4:	2300      	movs	r3, #0
 80139c6:	4620      	mov	r0, r4
 80139c8:	4629      	mov	r1, r5
 80139ca:	f7ed f895 	bl	8000af8 <__aeabi_dcmpeq>
 80139ce:	b108      	cbz	r0, 80139d4 <__cvt+0xa4>
 80139d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80139d4:	2230      	movs	r2, #48	; 0x30
 80139d6:	9b03      	ldr	r3, [sp, #12]
 80139d8:	454b      	cmp	r3, r9
 80139da:	d307      	bcc.n	80139ec <__cvt+0xbc>
 80139dc:	9b03      	ldr	r3, [sp, #12]
 80139de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139e0:	1bdb      	subs	r3, r3, r7
 80139e2:	4638      	mov	r0, r7
 80139e4:	6013      	str	r3, [r2, #0]
 80139e6:	b004      	add	sp, #16
 80139e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ec:	1c59      	adds	r1, r3, #1
 80139ee:	9103      	str	r1, [sp, #12]
 80139f0:	701a      	strb	r2, [r3, #0]
 80139f2:	e7f0      	b.n	80139d6 <__cvt+0xa6>

080139f4 <__exponent>:
 80139f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139f6:	4603      	mov	r3, r0
 80139f8:	2900      	cmp	r1, #0
 80139fa:	bfb8      	it	lt
 80139fc:	4249      	neglt	r1, r1
 80139fe:	f803 2b02 	strb.w	r2, [r3], #2
 8013a02:	bfb4      	ite	lt
 8013a04:	222d      	movlt	r2, #45	; 0x2d
 8013a06:	222b      	movge	r2, #43	; 0x2b
 8013a08:	2909      	cmp	r1, #9
 8013a0a:	7042      	strb	r2, [r0, #1]
 8013a0c:	dd2a      	ble.n	8013a64 <__exponent+0x70>
 8013a0e:	f10d 0207 	add.w	r2, sp, #7
 8013a12:	4617      	mov	r7, r2
 8013a14:	260a      	movs	r6, #10
 8013a16:	4694      	mov	ip, r2
 8013a18:	fb91 f5f6 	sdiv	r5, r1, r6
 8013a1c:	fb06 1415 	mls	r4, r6, r5, r1
 8013a20:	3430      	adds	r4, #48	; 0x30
 8013a22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013a26:	460c      	mov	r4, r1
 8013a28:	2c63      	cmp	r4, #99	; 0x63
 8013a2a:	f102 32ff 	add.w	r2, r2, #4294967295
 8013a2e:	4629      	mov	r1, r5
 8013a30:	dcf1      	bgt.n	8013a16 <__exponent+0x22>
 8013a32:	3130      	adds	r1, #48	; 0x30
 8013a34:	f1ac 0402 	sub.w	r4, ip, #2
 8013a38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013a3c:	1c41      	adds	r1, r0, #1
 8013a3e:	4622      	mov	r2, r4
 8013a40:	42ba      	cmp	r2, r7
 8013a42:	d30a      	bcc.n	8013a5a <__exponent+0x66>
 8013a44:	f10d 0209 	add.w	r2, sp, #9
 8013a48:	eba2 020c 	sub.w	r2, r2, ip
 8013a4c:	42bc      	cmp	r4, r7
 8013a4e:	bf88      	it	hi
 8013a50:	2200      	movhi	r2, #0
 8013a52:	4413      	add	r3, r2
 8013a54:	1a18      	subs	r0, r3, r0
 8013a56:	b003      	add	sp, #12
 8013a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013a5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013a62:	e7ed      	b.n	8013a40 <__exponent+0x4c>
 8013a64:	2330      	movs	r3, #48	; 0x30
 8013a66:	3130      	adds	r1, #48	; 0x30
 8013a68:	7083      	strb	r3, [r0, #2]
 8013a6a:	70c1      	strb	r1, [r0, #3]
 8013a6c:	1d03      	adds	r3, r0, #4
 8013a6e:	e7f1      	b.n	8013a54 <__exponent+0x60>

08013a70 <_printf_float>:
 8013a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a74:	ed2d 8b02 	vpush	{d8}
 8013a78:	b08d      	sub	sp, #52	; 0x34
 8013a7a:	460c      	mov	r4, r1
 8013a7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013a80:	4616      	mov	r6, r2
 8013a82:	461f      	mov	r7, r3
 8013a84:	4605      	mov	r5, r0
 8013a86:	f000 fd01 	bl	801448c <_localeconv_r>
 8013a8a:	f8d0 a000 	ldr.w	sl, [r0]
 8013a8e:	4650      	mov	r0, sl
 8013a90:	f7ec fc06 	bl	80002a0 <strlen>
 8013a94:	2300      	movs	r3, #0
 8013a96:	930a      	str	r3, [sp, #40]	; 0x28
 8013a98:	6823      	ldr	r3, [r4, #0]
 8013a9a:	9305      	str	r3, [sp, #20]
 8013a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8013aa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013aa4:	3307      	adds	r3, #7
 8013aa6:	f023 0307 	bic.w	r3, r3, #7
 8013aaa:	f103 0208 	add.w	r2, r3, #8
 8013aae:	f8c8 2000 	str.w	r2, [r8]
 8013ab2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013aba:	9307      	str	r3, [sp, #28]
 8013abc:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ac0:	ee08 0a10 	vmov	s16, r0
 8013ac4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013acc:	4b9e      	ldr	r3, [pc, #632]	; (8013d48 <_printf_float+0x2d8>)
 8013ace:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad2:	f7ed f843 	bl	8000b5c <__aeabi_dcmpun>
 8013ad6:	bb88      	cbnz	r0, 8013b3c <_printf_float+0xcc>
 8013ad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013adc:	4b9a      	ldr	r3, [pc, #616]	; (8013d48 <_printf_float+0x2d8>)
 8013ade:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae2:	f7ed f81d 	bl	8000b20 <__aeabi_dcmple>
 8013ae6:	bb48      	cbnz	r0, 8013b3c <_printf_float+0xcc>
 8013ae8:	2200      	movs	r2, #0
 8013aea:	2300      	movs	r3, #0
 8013aec:	4640      	mov	r0, r8
 8013aee:	4649      	mov	r1, r9
 8013af0:	f7ed f80c 	bl	8000b0c <__aeabi_dcmplt>
 8013af4:	b110      	cbz	r0, 8013afc <_printf_float+0x8c>
 8013af6:	232d      	movs	r3, #45	; 0x2d
 8013af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013afc:	4a93      	ldr	r2, [pc, #588]	; (8013d4c <_printf_float+0x2dc>)
 8013afe:	4b94      	ldr	r3, [pc, #592]	; (8013d50 <_printf_float+0x2e0>)
 8013b00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013b04:	bf94      	ite	ls
 8013b06:	4690      	movls	r8, r2
 8013b08:	4698      	movhi	r8, r3
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	6123      	str	r3, [r4, #16]
 8013b0e:	9b05      	ldr	r3, [sp, #20]
 8013b10:	f023 0304 	bic.w	r3, r3, #4
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	f04f 0900 	mov.w	r9, #0
 8013b1a:	9700      	str	r7, [sp, #0]
 8013b1c:	4633      	mov	r3, r6
 8013b1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013b20:	4621      	mov	r1, r4
 8013b22:	4628      	mov	r0, r5
 8013b24:	f000 f9da 	bl	8013edc <_printf_common>
 8013b28:	3001      	adds	r0, #1
 8013b2a:	f040 8090 	bne.w	8013c4e <_printf_float+0x1de>
 8013b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b32:	b00d      	add	sp, #52	; 0x34
 8013b34:	ecbd 8b02 	vpop	{d8}
 8013b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3c:	4642      	mov	r2, r8
 8013b3e:	464b      	mov	r3, r9
 8013b40:	4640      	mov	r0, r8
 8013b42:	4649      	mov	r1, r9
 8013b44:	f7ed f80a 	bl	8000b5c <__aeabi_dcmpun>
 8013b48:	b140      	cbz	r0, 8013b5c <_printf_float+0xec>
 8013b4a:	464b      	mov	r3, r9
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	bfbc      	itt	lt
 8013b50:	232d      	movlt	r3, #45	; 0x2d
 8013b52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b56:	4a7f      	ldr	r2, [pc, #508]	; (8013d54 <_printf_float+0x2e4>)
 8013b58:	4b7f      	ldr	r3, [pc, #508]	; (8013d58 <_printf_float+0x2e8>)
 8013b5a:	e7d1      	b.n	8013b00 <_printf_float+0x90>
 8013b5c:	6863      	ldr	r3, [r4, #4]
 8013b5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013b62:	9206      	str	r2, [sp, #24]
 8013b64:	1c5a      	adds	r2, r3, #1
 8013b66:	d13f      	bne.n	8013be8 <_printf_float+0x178>
 8013b68:	2306      	movs	r3, #6
 8013b6a:	6063      	str	r3, [r4, #4]
 8013b6c:	9b05      	ldr	r3, [sp, #20]
 8013b6e:	6861      	ldr	r1, [r4, #4]
 8013b70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013b74:	2300      	movs	r3, #0
 8013b76:	9303      	str	r3, [sp, #12]
 8013b78:	ab0a      	add	r3, sp, #40	; 0x28
 8013b7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013b7e:	ab09      	add	r3, sp, #36	; 0x24
 8013b80:	ec49 8b10 	vmov	d0, r8, r9
 8013b84:	9300      	str	r3, [sp, #0]
 8013b86:	6022      	str	r2, [r4, #0]
 8013b88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f7ff fecf 	bl	8013930 <__cvt>
 8013b92:	9b06      	ldr	r3, [sp, #24]
 8013b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b96:	2b47      	cmp	r3, #71	; 0x47
 8013b98:	4680      	mov	r8, r0
 8013b9a:	d108      	bne.n	8013bae <_printf_float+0x13e>
 8013b9c:	1cc8      	adds	r0, r1, #3
 8013b9e:	db02      	blt.n	8013ba6 <_printf_float+0x136>
 8013ba0:	6863      	ldr	r3, [r4, #4]
 8013ba2:	4299      	cmp	r1, r3
 8013ba4:	dd41      	ble.n	8013c2a <_printf_float+0x1ba>
 8013ba6:	f1ab 0302 	sub.w	r3, fp, #2
 8013baa:	fa5f fb83 	uxtb.w	fp, r3
 8013bae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013bb2:	d820      	bhi.n	8013bf6 <_printf_float+0x186>
 8013bb4:	3901      	subs	r1, #1
 8013bb6:	465a      	mov	r2, fp
 8013bb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013bbc:	9109      	str	r1, [sp, #36]	; 0x24
 8013bbe:	f7ff ff19 	bl	80139f4 <__exponent>
 8013bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bc4:	1813      	adds	r3, r2, r0
 8013bc6:	2a01      	cmp	r2, #1
 8013bc8:	4681      	mov	r9, r0
 8013bca:	6123      	str	r3, [r4, #16]
 8013bcc:	dc02      	bgt.n	8013bd4 <_printf_float+0x164>
 8013bce:	6822      	ldr	r2, [r4, #0]
 8013bd0:	07d2      	lsls	r2, r2, #31
 8013bd2:	d501      	bpl.n	8013bd8 <_printf_float+0x168>
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	6123      	str	r3, [r4, #16]
 8013bd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d09c      	beq.n	8013b1a <_printf_float+0xaa>
 8013be0:	232d      	movs	r3, #45	; 0x2d
 8013be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013be6:	e798      	b.n	8013b1a <_printf_float+0xaa>
 8013be8:	9a06      	ldr	r2, [sp, #24]
 8013bea:	2a47      	cmp	r2, #71	; 0x47
 8013bec:	d1be      	bne.n	8013b6c <_printf_float+0xfc>
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d1bc      	bne.n	8013b6c <_printf_float+0xfc>
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e7b9      	b.n	8013b6a <_printf_float+0xfa>
 8013bf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013bfa:	d118      	bne.n	8013c2e <_printf_float+0x1be>
 8013bfc:	2900      	cmp	r1, #0
 8013bfe:	6863      	ldr	r3, [r4, #4]
 8013c00:	dd0b      	ble.n	8013c1a <_printf_float+0x1aa>
 8013c02:	6121      	str	r1, [r4, #16]
 8013c04:	b913      	cbnz	r3, 8013c0c <_printf_float+0x19c>
 8013c06:	6822      	ldr	r2, [r4, #0]
 8013c08:	07d0      	lsls	r0, r2, #31
 8013c0a:	d502      	bpl.n	8013c12 <_printf_float+0x1a2>
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	440b      	add	r3, r1
 8013c10:	6123      	str	r3, [r4, #16]
 8013c12:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c14:	f04f 0900 	mov.w	r9, #0
 8013c18:	e7de      	b.n	8013bd8 <_printf_float+0x168>
 8013c1a:	b913      	cbnz	r3, 8013c22 <_printf_float+0x1b2>
 8013c1c:	6822      	ldr	r2, [r4, #0]
 8013c1e:	07d2      	lsls	r2, r2, #31
 8013c20:	d501      	bpl.n	8013c26 <_printf_float+0x1b6>
 8013c22:	3302      	adds	r3, #2
 8013c24:	e7f4      	b.n	8013c10 <_printf_float+0x1a0>
 8013c26:	2301      	movs	r3, #1
 8013c28:	e7f2      	b.n	8013c10 <_printf_float+0x1a0>
 8013c2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c30:	4299      	cmp	r1, r3
 8013c32:	db05      	blt.n	8013c40 <_printf_float+0x1d0>
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	6121      	str	r1, [r4, #16]
 8013c38:	07d8      	lsls	r0, r3, #31
 8013c3a:	d5ea      	bpl.n	8013c12 <_printf_float+0x1a2>
 8013c3c:	1c4b      	adds	r3, r1, #1
 8013c3e:	e7e7      	b.n	8013c10 <_printf_float+0x1a0>
 8013c40:	2900      	cmp	r1, #0
 8013c42:	bfd4      	ite	le
 8013c44:	f1c1 0202 	rsble	r2, r1, #2
 8013c48:	2201      	movgt	r2, #1
 8013c4a:	4413      	add	r3, r2
 8013c4c:	e7e0      	b.n	8013c10 <_printf_float+0x1a0>
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	055a      	lsls	r2, r3, #21
 8013c52:	d407      	bmi.n	8013c64 <_printf_float+0x1f4>
 8013c54:	6923      	ldr	r3, [r4, #16]
 8013c56:	4642      	mov	r2, r8
 8013c58:	4631      	mov	r1, r6
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	47b8      	blx	r7
 8013c5e:	3001      	adds	r0, #1
 8013c60:	d12c      	bne.n	8013cbc <_printf_float+0x24c>
 8013c62:	e764      	b.n	8013b2e <_printf_float+0xbe>
 8013c64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c68:	f240 80e0 	bls.w	8013e2c <_printf_float+0x3bc>
 8013c6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c70:	2200      	movs	r2, #0
 8013c72:	2300      	movs	r3, #0
 8013c74:	f7ec ff40 	bl	8000af8 <__aeabi_dcmpeq>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d034      	beq.n	8013ce6 <_printf_float+0x276>
 8013c7c:	4a37      	ldr	r2, [pc, #220]	; (8013d5c <_printf_float+0x2ec>)
 8013c7e:	2301      	movs	r3, #1
 8013c80:	4631      	mov	r1, r6
 8013c82:	4628      	mov	r0, r5
 8013c84:	47b8      	blx	r7
 8013c86:	3001      	adds	r0, #1
 8013c88:	f43f af51 	beq.w	8013b2e <_printf_float+0xbe>
 8013c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c90:	429a      	cmp	r2, r3
 8013c92:	db02      	blt.n	8013c9a <_printf_float+0x22a>
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	07d8      	lsls	r0, r3, #31
 8013c98:	d510      	bpl.n	8013cbc <_printf_float+0x24c>
 8013c9a:	ee18 3a10 	vmov	r3, s16
 8013c9e:	4652      	mov	r2, sl
 8013ca0:	4631      	mov	r1, r6
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	47b8      	blx	r7
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	f43f af41 	beq.w	8013b2e <_printf_float+0xbe>
 8013cac:	f04f 0800 	mov.w	r8, #0
 8013cb0:	f104 091a 	add.w	r9, r4, #26
 8013cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cb6:	3b01      	subs	r3, #1
 8013cb8:	4543      	cmp	r3, r8
 8013cba:	dc09      	bgt.n	8013cd0 <_printf_float+0x260>
 8013cbc:	6823      	ldr	r3, [r4, #0]
 8013cbe:	079b      	lsls	r3, r3, #30
 8013cc0:	f100 8107 	bmi.w	8013ed2 <_printf_float+0x462>
 8013cc4:	68e0      	ldr	r0, [r4, #12]
 8013cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cc8:	4298      	cmp	r0, r3
 8013cca:	bfb8      	it	lt
 8013ccc:	4618      	movlt	r0, r3
 8013cce:	e730      	b.n	8013b32 <_printf_float+0xc2>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	464a      	mov	r2, r9
 8013cd4:	4631      	mov	r1, r6
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	47b8      	blx	r7
 8013cda:	3001      	adds	r0, #1
 8013cdc:	f43f af27 	beq.w	8013b2e <_printf_float+0xbe>
 8013ce0:	f108 0801 	add.w	r8, r8, #1
 8013ce4:	e7e6      	b.n	8013cb4 <_printf_float+0x244>
 8013ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	dc39      	bgt.n	8013d60 <_printf_float+0x2f0>
 8013cec:	4a1b      	ldr	r2, [pc, #108]	; (8013d5c <_printf_float+0x2ec>)
 8013cee:	2301      	movs	r3, #1
 8013cf0:	4631      	mov	r1, r6
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	47b8      	blx	r7
 8013cf6:	3001      	adds	r0, #1
 8013cf8:	f43f af19 	beq.w	8013b2e <_printf_float+0xbe>
 8013cfc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d00:	4313      	orrs	r3, r2
 8013d02:	d102      	bne.n	8013d0a <_printf_float+0x29a>
 8013d04:	6823      	ldr	r3, [r4, #0]
 8013d06:	07d9      	lsls	r1, r3, #31
 8013d08:	d5d8      	bpl.n	8013cbc <_printf_float+0x24c>
 8013d0a:	ee18 3a10 	vmov	r3, s16
 8013d0e:	4652      	mov	r2, sl
 8013d10:	4631      	mov	r1, r6
 8013d12:	4628      	mov	r0, r5
 8013d14:	47b8      	blx	r7
 8013d16:	3001      	adds	r0, #1
 8013d18:	f43f af09 	beq.w	8013b2e <_printf_float+0xbe>
 8013d1c:	f04f 0900 	mov.w	r9, #0
 8013d20:	f104 0a1a 	add.w	sl, r4, #26
 8013d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d26:	425b      	negs	r3, r3
 8013d28:	454b      	cmp	r3, r9
 8013d2a:	dc01      	bgt.n	8013d30 <_printf_float+0x2c0>
 8013d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d2e:	e792      	b.n	8013c56 <_printf_float+0x1e6>
 8013d30:	2301      	movs	r3, #1
 8013d32:	4652      	mov	r2, sl
 8013d34:	4631      	mov	r1, r6
 8013d36:	4628      	mov	r0, r5
 8013d38:	47b8      	blx	r7
 8013d3a:	3001      	adds	r0, #1
 8013d3c:	f43f aef7 	beq.w	8013b2e <_printf_float+0xbe>
 8013d40:	f109 0901 	add.w	r9, r9, #1
 8013d44:	e7ee      	b.n	8013d24 <_printf_float+0x2b4>
 8013d46:	bf00      	nop
 8013d48:	7fefffff 	.word	0x7fefffff
 8013d4c:	08016d40 	.word	0x08016d40
 8013d50:	08016d44 	.word	0x08016d44
 8013d54:	08016d48 	.word	0x08016d48
 8013d58:	08016d4c 	.word	0x08016d4c
 8013d5c:	08016d50 	.word	0x08016d50
 8013d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d64:	429a      	cmp	r2, r3
 8013d66:	bfa8      	it	ge
 8013d68:	461a      	movge	r2, r3
 8013d6a:	2a00      	cmp	r2, #0
 8013d6c:	4691      	mov	r9, r2
 8013d6e:	dc37      	bgt.n	8013de0 <_printf_float+0x370>
 8013d70:	f04f 0b00 	mov.w	fp, #0
 8013d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d78:	f104 021a 	add.w	r2, r4, #26
 8013d7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d7e:	9305      	str	r3, [sp, #20]
 8013d80:	eba3 0309 	sub.w	r3, r3, r9
 8013d84:	455b      	cmp	r3, fp
 8013d86:	dc33      	bgt.n	8013df0 <_printf_float+0x380>
 8013d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	db3b      	blt.n	8013e08 <_printf_float+0x398>
 8013d90:	6823      	ldr	r3, [r4, #0]
 8013d92:	07da      	lsls	r2, r3, #31
 8013d94:	d438      	bmi.n	8013e08 <_printf_float+0x398>
 8013d96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d9a:	eba2 0903 	sub.w	r9, r2, r3
 8013d9e:	9b05      	ldr	r3, [sp, #20]
 8013da0:	1ad2      	subs	r2, r2, r3
 8013da2:	4591      	cmp	r9, r2
 8013da4:	bfa8      	it	ge
 8013da6:	4691      	movge	r9, r2
 8013da8:	f1b9 0f00 	cmp.w	r9, #0
 8013dac:	dc35      	bgt.n	8013e1a <_printf_float+0x3aa>
 8013dae:	f04f 0800 	mov.w	r8, #0
 8013db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013db6:	f104 0a1a 	add.w	sl, r4, #26
 8013dba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dbe:	1a9b      	subs	r3, r3, r2
 8013dc0:	eba3 0309 	sub.w	r3, r3, r9
 8013dc4:	4543      	cmp	r3, r8
 8013dc6:	f77f af79 	ble.w	8013cbc <_printf_float+0x24c>
 8013dca:	2301      	movs	r3, #1
 8013dcc:	4652      	mov	r2, sl
 8013dce:	4631      	mov	r1, r6
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	47b8      	blx	r7
 8013dd4:	3001      	adds	r0, #1
 8013dd6:	f43f aeaa 	beq.w	8013b2e <_printf_float+0xbe>
 8013dda:	f108 0801 	add.w	r8, r8, #1
 8013dde:	e7ec      	b.n	8013dba <_printf_float+0x34a>
 8013de0:	4613      	mov	r3, r2
 8013de2:	4631      	mov	r1, r6
 8013de4:	4642      	mov	r2, r8
 8013de6:	4628      	mov	r0, r5
 8013de8:	47b8      	blx	r7
 8013dea:	3001      	adds	r0, #1
 8013dec:	d1c0      	bne.n	8013d70 <_printf_float+0x300>
 8013dee:	e69e      	b.n	8013b2e <_printf_float+0xbe>
 8013df0:	2301      	movs	r3, #1
 8013df2:	4631      	mov	r1, r6
 8013df4:	4628      	mov	r0, r5
 8013df6:	9205      	str	r2, [sp, #20]
 8013df8:	47b8      	blx	r7
 8013dfa:	3001      	adds	r0, #1
 8013dfc:	f43f ae97 	beq.w	8013b2e <_printf_float+0xbe>
 8013e00:	9a05      	ldr	r2, [sp, #20]
 8013e02:	f10b 0b01 	add.w	fp, fp, #1
 8013e06:	e7b9      	b.n	8013d7c <_printf_float+0x30c>
 8013e08:	ee18 3a10 	vmov	r3, s16
 8013e0c:	4652      	mov	r2, sl
 8013e0e:	4631      	mov	r1, r6
 8013e10:	4628      	mov	r0, r5
 8013e12:	47b8      	blx	r7
 8013e14:	3001      	adds	r0, #1
 8013e16:	d1be      	bne.n	8013d96 <_printf_float+0x326>
 8013e18:	e689      	b.n	8013b2e <_printf_float+0xbe>
 8013e1a:	9a05      	ldr	r2, [sp, #20]
 8013e1c:	464b      	mov	r3, r9
 8013e1e:	4442      	add	r2, r8
 8013e20:	4631      	mov	r1, r6
 8013e22:	4628      	mov	r0, r5
 8013e24:	47b8      	blx	r7
 8013e26:	3001      	adds	r0, #1
 8013e28:	d1c1      	bne.n	8013dae <_printf_float+0x33e>
 8013e2a:	e680      	b.n	8013b2e <_printf_float+0xbe>
 8013e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e2e:	2a01      	cmp	r2, #1
 8013e30:	dc01      	bgt.n	8013e36 <_printf_float+0x3c6>
 8013e32:	07db      	lsls	r3, r3, #31
 8013e34:	d53a      	bpl.n	8013eac <_printf_float+0x43c>
 8013e36:	2301      	movs	r3, #1
 8013e38:	4642      	mov	r2, r8
 8013e3a:	4631      	mov	r1, r6
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	47b8      	blx	r7
 8013e40:	3001      	adds	r0, #1
 8013e42:	f43f ae74 	beq.w	8013b2e <_printf_float+0xbe>
 8013e46:	ee18 3a10 	vmov	r3, s16
 8013e4a:	4652      	mov	r2, sl
 8013e4c:	4631      	mov	r1, r6
 8013e4e:	4628      	mov	r0, r5
 8013e50:	47b8      	blx	r7
 8013e52:	3001      	adds	r0, #1
 8013e54:	f43f ae6b 	beq.w	8013b2e <_printf_float+0xbe>
 8013e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	2300      	movs	r3, #0
 8013e60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013e64:	f7ec fe48 	bl	8000af8 <__aeabi_dcmpeq>
 8013e68:	b9d8      	cbnz	r0, 8013ea2 <_printf_float+0x432>
 8013e6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013e6e:	f108 0201 	add.w	r2, r8, #1
 8013e72:	4631      	mov	r1, r6
 8013e74:	4628      	mov	r0, r5
 8013e76:	47b8      	blx	r7
 8013e78:	3001      	adds	r0, #1
 8013e7a:	d10e      	bne.n	8013e9a <_printf_float+0x42a>
 8013e7c:	e657      	b.n	8013b2e <_printf_float+0xbe>
 8013e7e:	2301      	movs	r3, #1
 8013e80:	4652      	mov	r2, sl
 8013e82:	4631      	mov	r1, r6
 8013e84:	4628      	mov	r0, r5
 8013e86:	47b8      	blx	r7
 8013e88:	3001      	adds	r0, #1
 8013e8a:	f43f ae50 	beq.w	8013b2e <_printf_float+0xbe>
 8013e8e:	f108 0801 	add.w	r8, r8, #1
 8013e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e94:	3b01      	subs	r3, #1
 8013e96:	4543      	cmp	r3, r8
 8013e98:	dcf1      	bgt.n	8013e7e <_printf_float+0x40e>
 8013e9a:	464b      	mov	r3, r9
 8013e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ea0:	e6da      	b.n	8013c58 <_printf_float+0x1e8>
 8013ea2:	f04f 0800 	mov.w	r8, #0
 8013ea6:	f104 0a1a 	add.w	sl, r4, #26
 8013eaa:	e7f2      	b.n	8013e92 <_printf_float+0x422>
 8013eac:	2301      	movs	r3, #1
 8013eae:	4642      	mov	r2, r8
 8013eb0:	e7df      	b.n	8013e72 <_printf_float+0x402>
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	464a      	mov	r2, r9
 8013eb6:	4631      	mov	r1, r6
 8013eb8:	4628      	mov	r0, r5
 8013eba:	47b8      	blx	r7
 8013ebc:	3001      	adds	r0, #1
 8013ebe:	f43f ae36 	beq.w	8013b2e <_printf_float+0xbe>
 8013ec2:	f108 0801 	add.w	r8, r8, #1
 8013ec6:	68e3      	ldr	r3, [r4, #12]
 8013ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013eca:	1a5b      	subs	r3, r3, r1
 8013ecc:	4543      	cmp	r3, r8
 8013ece:	dcf0      	bgt.n	8013eb2 <_printf_float+0x442>
 8013ed0:	e6f8      	b.n	8013cc4 <_printf_float+0x254>
 8013ed2:	f04f 0800 	mov.w	r8, #0
 8013ed6:	f104 0919 	add.w	r9, r4, #25
 8013eda:	e7f4      	b.n	8013ec6 <_printf_float+0x456>

08013edc <_printf_common>:
 8013edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ee0:	4616      	mov	r6, r2
 8013ee2:	4699      	mov	r9, r3
 8013ee4:	688a      	ldr	r2, [r1, #8]
 8013ee6:	690b      	ldr	r3, [r1, #16]
 8013ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013eec:	4293      	cmp	r3, r2
 8013eee:	bfb8      	it	lt
 8013ef0:	4613      	movlt	r3, r2
 8013ef2:	6033      	str	r3, [r6, #0]
 8013ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ef8:	4607      	mov	r7, r0
 8013efa:	460c      	mov	r4, r1
 8013efc:	b10a      	cbz	r2, 8013f02 <_printf_common+0x26>
 8013efe:	3301      	adds	r3, #1
 8013f00:	6033      	str	r3, [r6, #0]
 8013f02:	6823      	ldr	r3, [r4, #0]
 8013f04:	0699      	lsls	r1, r3, #26
 8013f06:	bf42      	ittt	mi
 8013f08:	6833      	ldrmi	r3, [r6, #0]
 8013f0a:	3302      	addmi	r3, #2
 8013f0c:	6033      	strmi	r3, [r6, #0]
 8013f0e:	6825      	ldr	r5, [r4, #0]
 8013f10:	f015 0506 	ands.w	r5, r5, #6
 8013f14:	d106      	bne.n	8013f24 <_printf_common+0x48>
 8013f16:	f104 0a19 	add.w	sl, r4, #25
 8013f1a:	68e3      	ldr	r3, [r4, #12]
 8013f1c:	6832      	ldr	r2, [r6, #0]
 8013f1e:	1a9b      	subs	r3, r3, r2
 8013f20:	42ab      	cmp	r3, r5
 8013f22:	dc26      	bgt.n	8013f72 <_printf_common+0x96>
 8013f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f28:	1e13      	subs	r3, r2, #0
 8013f2a:	6822      	ldr	r2, [r4, #0]
 8013f2c:	bf18      	it	ne
 8013f2e:	2301      	movne	r3, #1
 8013f30:	0692      	lsls	r2, r2, #26
 8013f32:	d42b      	bmi.n	8013f8c <_printf_common+0xb0>
 8013f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f38:	4649      	mov	r1, r9
 8013f3a:	4638      	mov	r0, r7
 8013f3c:	47c0      	blx	r8
 8013f3e:	3001      	adds	r0, #1
 8013f40:	d01e      	beq.n	8013f80 <_printf_common+0xa4>
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	6922      	ldr	r2, [r4, #16]
 8013f46:	f003 0306 	and.w	r3, r3, #6
 8013f4a:	2b04      	cmp	r3, #4
 8013f4c:	bf02      	ittt	eq
 8013f4e:	68e5      	ldreq	r5, [r4, #12]
 8013f50:	6833      	ldreq	r3, [r6, #0]
 8013f52:	1aed      	subeq	r5, r5, r3
 8013f54:	68a3      	ldr	r3, [r4, #8]
 8013f56:	bf0c      	ite	eq
 8013f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f5c:	2500      	movne	r5, #0
 8013f5e:	4293      	cmp	r3, r2
 8013f60:	bfc4      	itt	gt
 8013f62:	1a9b      	subgt	r3, r3, r2
 8013f64:	18ed      	addgt	r5, r5, r3
 8013f66:	2600      	movs	r6, #0
 8013f68:	341a      	adds	r4, #26
 8013f6a:	42b5      	cmp	r5, r6
 8013f6c:	d11a      	bne.n	8013fa4 <_printf_common+0xc8>
 8013f6e:	2000      	movs	r0, #0
 8013f70:	e008      	b.n	8013f84 <_printf_common+0xa8>
 8013f72:	2301      	movs	r3, #1
 8013f74:	4652      	mov	r2, sl
 8013f76:	4649      	mov	r1, r9
 8013f78:	4638      	mov	r0, r7
 8013f7a:	47c0      	blx	r8
 8013f7c:	3001      	adds	r0, #1
 8013f7e:	d103      	bne.n	8013f88 <_printf_common+0xac>
 8013f80:	f04f 30ff 	mov.w	r0, #4294967295
 8013f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f88:	3501      	adds	r5, #1
 8013f8a:	e7c6      	b.n	8013f1a <_printf_common+0x3e>
 8013f8c:	18e1      	adds	r1, r4, r3
 8013f8e:	1c5a      	adds	r2, r3, #1
 8013f90:	2030      	movs	r0, #48	; 0x30
 8013f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f96:	4422      	add	r2, r4
 8013f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fa0:	3302      	adds	r3, #2
 8013fa2:	e7c7      	b.n	8013f34 <_printf_common+0x58>
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	4622      	mov	r2, r4
 8013fa8:	4649      	mov	r1, r9
 8013faa:	4638      	mov	r0, r7
 8013fac:	47c0      	blx	r8
 8013fae:	3001      	adds	r0, #1
 8013fb0:	d0e6      	beq.n	8013f80 <_printf_common+0xa4>
 8013fb2:	3601      	adds	r6, #1
 8013fb4:	e7d9      	b.n	8013f6a <_printf_common+0x8e>
	...

08013fb8 <_printf_i>:
 8013fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fbc:	7e0f      	ldrb	r7, [r1, #24]
 8013fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013fc0:	2f78      	cmp	r7, #120	; 0x78
 8013fc2:	4691      	mov	r9, r2
 8013fc4:	4680      	mov	r8, r0
 8013fc6:	460c      	mov	r4, r1
 8013fc8:	469a      	mov	sl, r3
 8013fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013fce:	d807      	bhi.n	8013fe0 <_printf_i+0x28>
 8013fd0:	2f62      	cmp	r7, #98	; 0x62
 8013fd2:	d80a      	bhi.n	8013fea <_printf_i+0x32>
 8013fd4:	2f00      	cmp	r7, #0
 8013fd6:	f000 80d4 	beq.w	8014182 <_printf_i+0x1ca>
 8013fda:	2f58      	cmp	r7, #88	; 0x58
 8013fdc:	f000 80c0 	beq.w	8014160 <_printf_i+0x1a8>
 8013fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013fe8:	e03a      	b.n	8014060 <_printf_i+0xa8>
 8013fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013fee:	2b15      	cmp	r3, #21
 8013ff0:	d8f6      	bhi.n	8013fe0 <_printf_i+0x28>
 8013ff2:	a101      	add	r1, pc, #4	; (adr r1, 8013ff8 <_printf_i+0x40>)
 8013ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ff8:	08014051 	.word	0x08014051
 8013ffc:	08014065 	.word	0x08014065
 8014000:	08013fe1 	.word	0x08013fe1
 8014004:	08013fe1 	.word	0x08013fe1
 8014008:	08013fe1 	.word	0x08013fe1
 801400c:	08013fe1 	.word	0x08013fe1
 8014010:	08014065 	.word	0x08014065
 8014014:	08013fe1 	.word	0x08013fe1
 8014018:	08013fe1 	.word	0x08013fe1
 801401c:	08013fe1 	.word	0x08013fe1
 8014020:	08013fe1 	.word	0x08013fe1
 8014024:	08014169 	.word	0x08014169
 8014028:	08014091 	.word	0x08014091
 801402c:	08014123 	.word	0x08014123
 8014030:	08013fe1 	.word	0x08013fe1
 8014034:	08013fe1 	.word	0x08013fe1
 8014038:	0801418b 	.word	0x0801418b
 801403c:	08013fe1 	.word	0x08013fe1
 8014040:	08014091 	.word	0x08014091
 8014044:	08013fe1 	.word	0x08013fe1
 8014048:	08013fe1 	.word	0x08013fe1
 801404c:	0801412b 	.word	0x0801412b
 8014050:	682b      	ldr	r3, [r5, #0]
 8014052:	1d1a      	adds	r2, r3, #4
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	602a      	str	r2, [r5, #0]
 8014058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801405c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014060:	2301      	movs	r3, #1
 8014062:	e09f      	b.n	80141a4 <_printf_i+0x1ec>
 8014064:	6820      	ldr	r0, [r4, #0]
 8014066:	682b      	ldr	r3, [r5, #0]
 8014068:	0607      	lsls	r7, r0, #24
 801406a:	f103 0104 	add.w	r1, r3, #4
 801406e:	6029      	str	r1, [r5, #0]
 8014070:	d501      	bpl.n	8014076 <_printf_i+0xbe>
 8014072:	681e      	ldr	r6, [r3, #0]
 8014074:	e003      	b.n	801407e <_printf_i+0xc6>
 8014076:	0646      	lsls	r6, r0, #25
 8014078:	d5fb      	bpl.n	8014072 <_printf_i+0xba>
 801407a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801407e:	2e00      	cmp	r6, #0
 8014080:	da03      	bge.n	801408a <_printf_i+0xd2>
 8014082:	232d      	movs	r3, #45	; 0x2d
 8014084:	4276      	negs	r6, r6
 8014086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801408a:	485a      	ldr	r0, [pc, #360]	; (80141f4 <_printf_i+0x23c>)
 801408c:	230a      	movs	r3, #10
 801408e:	e012      	b.n	80140b6 <_printf_i+0xfe>
 8014090:	682b      	ldr	r3, [r5, #0]
 8014092:	6820      	ldr	r0, [r4, #0]
 8014094:	1d19      	adds	r1, r3, #4
 8014096:	6029      	str	r1, [r5, #0]
 8014098:	0605      	lsls	r5, r0, #24
 801409a:	d501      	bpl.n	80140a0 <_printf_i+0xe8>
 801409c:	681e      	ldr	r6, [r3, #0]
 801409e:	e002      	b.n	80140a6 <_printf_i+0xee>
 80140a0:	0641      	lsls	r1, r0, #25
 80140a2:	d5fb      	bpl.n	801409c <_printf_i+0xe4>
 80140a4:	881e      	ldrh	r6, [r3, #0]
 80140a6:	4853      	ldr	r0, [pc, #332]	; (80141f4 <_printf_i+0x23c>)
 80140a8:	2f6f      	cmp	r7, #111	; 0x6f
 80140aa:	bf0c      	ite	eq
 80140ac:	2308      	moveq	r3, #8
 80140ae:	230a      	movne	r3, #10
 80140b0:	2100      	movs	r1, #0
 80140b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140b6:	6865      	ldr	r5, [r4, #4]
 80140b8:	60a5      	str	r5, [r4, #8]
 80140ba:	2d00      	cmp	r5, #0
 80140bc:	bfa2      	ittt	ge
 80140be:	6821      	ldrge	r1, [r4, #0]
 80140c0:	f021 0104 	bicge.w	r1, r1, #4
 80140c4:	6021      	strge	r1, [r4, #0]
 80140c6:	b90e      	cbnz	r6, 80140cc <_printf_i+0x114>
 80140c8:	2d00      	cmp	r5, #0
 80140ca:	d04b      	beq.n	8014164 <_printf_i+0x1ac>
 80140cc:	4615      	mov	r5, r2
 80140ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80140d2:	fb03 6711 	mls	r7, r3, r1, r6
 80140d6:	5dc7      	ldrb	r7, [r0, r7]
 80140d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80140dc:	4637      	mov	r7, r6
 80140de:	42bb      	cmp	r3, r7
 80140e0:	460e      	mov	r6, r1
 80140e2:	d9f4      	bls.n	80140ce <_printf_i+0x116>
 80140e4:	2b08      	cmp	r3, #8
 80140e6:	d10b      	bne.n	8014100 <_printf_i+0x148>
 80140e8:	6823      	ldr	r3, [r4, #0]
 80140ea:	07de      	lsls	r6, r3, #31
 80140ec:	d508      	bpl.n	8014100 <_printf_i+0x148>
 80140ee:	6923      	ldr	r3, [r4, #16]
 80140f0:	6861      	ldr	r1, [r4, #4]
 80140f2:	4299      	cmp	r1, r3
 80140f4:	bfde      	ittt	le
 80140f6:	2330      	movle	r3, #48	; 0x30
 80140f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014100:	1b52      	subs	r2, r2, r5
 8014102:	6122      	str	r2, [r4, #16]
 8014104:	f8cd a000 	str.w	sl, [sp]
 8014108:	464b      	mov	r3, r9
 801410a:	aa03      	add	r2, sp, #12
 801410c:	4621      	mov	r1, r4
 801410e:	4640      	mov	r0, r8
 8014110:	f7ff fee4 	bl	8013edc <_printf_common>
 8014114:	3001      	adds	r0, #1
 8014116:	d14a      	bne.n	80141ae <_printf_i+0x1f6>
 8014118:	f04f 30ff 	mov.w	r0, #4294967295
 801411c:	b004      	add	sp, #16
 801411e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014122:	6823      	ldr	r3, [r4, #0]
 8014124:	f043 0320 	orr.w	r3, r3, #32
 8014128:	6023      	str	r3, [r4, #0]
 801412a:	4833      	ldr	r0, [pc, #204]	; (80141f8 <_printf_i+0x240>)
 801412c:	2778      	movs	r7, #120	; 0x78
 801412e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014132:	6823      	ldr	r3, [r4, #0]
 8014134:	6829      	ldr	r1, [r5, #0]
 8014136:	061f      	lsls	r7, r3, #24
 8014138:	f851 6b04 	ldr.w	r6, [r1], #4
 801413c:	d402      	bmi.n	8014144 <_printf_i+0x18c>
 801413e:	065f      	lsls	r7, r3, #25
 8014140:	bf48      	it	mi
 8014142:	b2b6      	uxthmi	r6, r6
 8014144:	07df      	lsls	r7, r3, #31
 8014146:	bf48      	it	mi
 8014148:	f043 0320 	orrmi.w	r3, r3, #32
 801414c:	6029      	str	r1, [r5, #0]
 801414e:	bf48      	it	mi
 8014150:	6023      	strmi	r3, [r4, #0]
 8014152:	b91e      	cbnz	r6, 801415c <_printf_i+0x1a4>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	f023 0320 	bic.w	r3, r3, #32
 801415a:	6023      	str	r3, [r4, #0]
 801415c:	2310      	movs	r3, #16
 801415e:	e7a7      	b.n	80140b0 <_printf_i+0xf8>
 8014160:	4824      	ldr	r0, [pc, #144]	; (80141f4 <_printf_i+0x23c>)
 8014162:	e7e4      	b.n	801412e <_printf_i+0x176>
 8014164:	4615      	mov	r5, r2
 8014166:	e7bd      	b.n	80140e4 <_printf_i+0x12c>
 8014168:	682b      	ldr	r3, [r5, #0]
 801416a:	6826      	ldr	r6, [r4, #0]
 801416c:	6961      	ldr	r1, [r4, #20]
 801416e:	1d18      	adds	r0, r3, #4
 8014170:	6028      	str	r0, [r5, #0]
 8014172:	0635      	lsls	r5, r6, #24
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	d501      	bpl.n	801417c <_printf_i+0x1c4>
 8014178:	6019      	str	r1, [r3, #0]
 801417a:	e002      	b.n	8014182 <_printf_i+0x1ca>
 801417c:	0670      	lsls	r0, r6, #25
 801417e:	d5fb      	bpl.n	8014178 <_printf_i+0x1c0>
 8014180:	8019      	strh	r1, [r3, #0]
 8014182:	2300      	movs	r3, #0
 8014184:	6123      	str	r3, [r4, #16]
 8014186:	4615      	mov	r5, r2
 8014188:	e7bc      	b.n	8014104 <_printf_i+0x14c>
 801418a:	682b      	ldr	r3, [r5, #0]
 801418c:	1d1a      	adds	r2, r3, #4
 801418e:	602a      	str	r2, [r5, #0]
 8014190:	681d      	ldr	r5, [r3, #0]
 8014192:	6862      	ldr	r2, [r4, #4]
 8014194:	2100      	movs	r1, #0
 8014196:	4628      	mov	r0, r5
 8014198:	f7ec f832 	bl	8000200 <memchr>
 801419c:	b108      	cbz	r0, 80141a2 <_printf_i+0x1ea>
 801419e:	1b40      	subs	r0, r0, r5
 80141a0:	6060      	str	r0, [r4, #4]
 80141a2:	6863      	ldr	r3, [r4, #4]
 80141a4:	6123      	str	r3, [r4, #16]
 80141a6:	2300      	movs	r3, #0
 80141a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141ac:	e7aa      	b.n	8014104 <_printf_i+0x14c>
 80141ae:	6923      	ldr	r3, [r4, #16]
 80141b0:	462a      	mov	r2, r5
 80141b2:	4649      	mov	r1, r9
 80141b4:	4640      	mov	r0, r8
 80141b6:	47d0      	blx	sl
 80141b8:	3001      	adds	r0, #1
 80141ba:	d0ad      	beq.n	8014118 <_printf_i+0x160>
 80141bc:	6823      	ldr	r3, [r4, #0]
 80141be:	079b      	lsls	r3, r3, #30
 80141c0:	d413      	bmi.n	80141ea <_printf_i+0x232>
 80141c2:	68e0      	ldr	r0, [r4, #12]
 80141c4:	9b03      	ldr	r3, [sp, #12]
 80141c6:	4298      	cmp	r0, r3
 80141c8:	bfb8      	it	lt
 80141ca:	4618      	movlt	r0, r3
 80141cc:	e7a6      	b.n	801411c <_printf_i+0x164>
 80141ce:	2301      	movs	r3, #1
 80141d0:	4632      	mov	r2, r6
 80141d2:	4649      	mov	r1, r9
 80141d4:	4640      	mov	r0, r8
 80141d6:	47d0      	blx	sl
 80141d8:	3001      	adds	r0, #1
 80141da:	d09d      	beq.n	8014118 <_printf_i+0x160>
 80141dc:	3501      	adds	r5, #1
 80141de:	68e3      	ldr	r3, [r4, #12]
 80141e0:	9903      	ldr	r1, [sp, #12]
 80141e2:	1a5b      	subs	r3, r3, r1
 80141e4:	42ab      	cmp	r3, r5
 80141e6:	dcf2      	bgt.n	80141ce <_printf_i+0x216>
 80141e8:	e7eb      	b.n	80141c2 <_printf_i+0x20a>
 80141ea:	2500      	movs	r5, #0
 80141ec:	f104 0619 	add.w	r6, r4, #25
 80141f0:	e7f5      	b.n	80141de <_printf_i+0x226>
 80141f2:	bf00      	nop
 80141f4:	08016d52 	.word	0x08016d52
 80141f8:	08016d63 	.word	0x08016d63

080141fc <std>:
 80141fc:	2300      	movs	r3, #0
 80141fe:	b510      	push	{r4, lr}
 8014200:	4604      	mov	r4, r0
 8014202:	e9c0 3300 	strd	r3, r3, [r0]
 8014206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801420a:	6083      	str	r3, [r0, #8]
 801420c:	8181      	strh	r1, [r0, #12]
 801420e:	6643      	str	r3, [r0, #100]	; 0x64
 8014210:	81c2      	strh	r2, [r0, #14]
 8014212:	6183      	str	r3, [r0, #24]
 8014214:	4619      	mov	r1, r3
 8014216:	2208      	movs	r2, #8
 8014218:	305c      	adds	r0, #92	; 0x5c
 801421a:	f000 f92e 	bl	801447a <memset>
 801421e:	4b0d      	ldr	r3, [pc, #52]	; (8014254 <std+0x58>)
 8014220:	6263      	str	r3, [r4, #36]	; 0x24
 8014222:	4b0d      	ldr	r3, [pc, #52]	; (8014258 <std+0x5c>)
 8014224:	62a3      	str	r3, [r4, #40]	; 0x28
 8014226:	4b0d      	ldr	r3, [pc, #52]	; (801425c <std+0x60>)
 8014228:	62e3      	str	r3, [r4, #44]	; 0x2c
 801422a:	4b0d      	ldr	r3, [pc, #52]	; (8014260 <std+0x64>)
 801422c:	6323      	str	r3, [r4, #48]	; 0x30
 801422e:	4b0d      	ldr	r3, [pc, #52]	; (8014264 <std+0x68>)
 8014230:	6224      	str	r4, [r4, #32]
 8014232:	429c      	cmp	r4, r3
 8014234:	d006      	beq.n	8014244 <std+0x48>
 8014236:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801423a:	4294      	cmp	r4, r2
 801423c:	d002      	beq.n	8014244 <std+0x48>
 801423e:	33d0      	adds	r3, #208	; 0xd0
 8014240:	429c      	cmp	r4, r3
 8014242:	d105      	bne.n	8014250 <std+0x54>
 8014244:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801424c:	f000 b9e8 	b.w	8014620 <__retarget_lock_init_recursive>
 8014250:	bd10      	pop	{r4, pc}
 8014252:	bf00      	nop
 8014254:	080143c1 	.word	0x080143c1
 8014258:	080143e3 	.word	0x080143e3
 801425c:	0801441b 	.word	0x0801441b
 8014260:	0801443f 	.word	0x0801443f
 8014264:	20009828 	.word	0x20009828

08014268 <stdio_exit_handler>:
 8014268:	4a02      	ldr	r2, [pc, #8]	; (8014274 <stdio_exit_handler+0xc>)
 801426a:	4903      	ldr	r1, [pc, #12]	; (8014278 <stdio_exit_handler+0x10>)
 801426c:	4803      	ldr	r0, [pc, #12]	; (801427c <stdio_exit_handler+0x14>)
 801426e:	f000 b869 	b.w	8014344 <_fwalk_sglue>
 8014272:	bf00      	nop
 8014274:	200003b8 	.word	0x200003b8
 8014278:	08015ff1 	.word	0x08015ff1
 801427c:	200003c4 	.word	0x200003c4

08014280 <cleanup_stdio>:
 8014280:	6841      	ldr	r1, [r0, #4]
 8014282:	4b0c      	ldr	r3, [pc, #48]	; (80142b4 <cleanup_stdio+0x34>)
 8014284:	4299      	cmp	r1, r3
 8014286:	b510      	push	{r4, lr}
 8014288:	4604      	mov	r4, r0
 801428a:	d001      	beq.n	8014290 <cleanup_stdio+0x10>
 801428c:	f001 feb0 	bl	8015ff0 <_fflush_r>
 8014290:	68a1      	ldr	r1, [r4, #8]
 8014292:	4b09      	ldr	r3, [pc, #36]	; (80142b8 <cleanup_stdio+0x38>)
 8014294:	4299      	cmp	r1, r3
 8014296:	d002      	beq.n	801429e <cleanup_stdio+0x1e>
 8014298:	4620      	mov	r0, r4
 801429a:	f001 fea9 	bl	8015ff0 <_fflush_r>
 801429e:	68e1      	ldr	r1, [r4, #12]
 80142a0:	4b06      	ldr	r3, [pc, #24]	; (80142bc <cleanup_stdio+0x3c>)
 80142a2:	4299      	cmp	r1, r3
 80142a4:	d004      	beq.n	80142b0 <cleanup_stdio+0x30>
 80142a6:	4620      	mov	r0, r4
 80142a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142ac:	f001 bea0 	b.w	8015ff0 <_fflush_r>
 80142b0:	bd10      	pop	{r4, pc}
 80142b2:	bf00      	nop
 80142b4:	20009828 	.word	0x20009828
 80142b8:	20009890 	.word	0x20009890
 80142bc:	200098f8 	.word	0x200098f8

080142c0 <global_stdio_init.part.0>:
 80142c0:	b510      	push	{r4, lr}
 80142c2:	4b0b      	ldr	r3, [pc, #44]	; (80142f0 <global_stdio_init.part.0+0x30>)
 80142c4:	4c0b      	ldr	r4, [pc, #44]	; (80142f4 <global_stdio_init.part.0+0x34>)
 80142c6:	4a0c      	ldr	r2, [pc, #48]	; (80142f8 <global_stdio_init.part.0+0x38>)
 80142c8:	601a      	str	r2, [r3, #0]
 80142ca:	4620      	mov	r0, r4
 80142cc:	2200      	movs	r2, #0
 80142ce:	2104      	movs	r1, #4
 80142d0:	f7ff ff94 	bl	80141fc <std>
 80142d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80142d8:	2201      	movs	r2, #1
 80142da:	2109      	movs	r1, #9
 80142dc:	f7ff ff8e 	bl	80141fc <std>
 80142e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80142e4:	2202      	movs	r2, #2
 80142e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142ea:	2112      	movs	r1, #18
 80142ec:	f7ff bf86 	b.w	80141fc <std>
 80142f0:	20009960 	.word	0x20009960
 80142f4:	20009828 	.word	0x20009828
 80142f8:	08014269 	.word	0x08014269

080142fc <__sfp_lock_acquire>:
 80142fc:	4801      	ldr	r0, [pc, #4]	; (8014304 <__sfp_lock_acquire+0x8>)
 80142fe:	f000 b990 	b.w	8014622 <__retarget_lock_acquire_recursive>
 8014302:	bf00      	nop
 8014304:	20009969 	.word	0x20009969

08014308 <__sfp_lock_release>:
 8014308:	4801      	ldr	r0, [pc, #4]	; (8014310 <__sfp_lock_release+0x8>)
 801430a:	f000 b98b 	b.w	8014624 <__retarget_lock_release_recursive>
 801430e:	bf00      	nop
 8014310:	20009969 	.word	0x20009969

08014314 <__sinit>:
 8014314:	b510      	push	{r4, lr}
 8014316:	4604      	mov	r4, r0
 8014318:	f7ff fff0 	bl	80142fc <__sfp_lock_acquire>
 801431c:	6a23      	ldr	r3, [r4, #32]
 801431e:	b11b      	cbz	r3, 8014328 <__sinit+0x14>
 8014320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014324:	f7ff bff0 	b.w	8014308 <__sfp_lock_release>
 8014328:	4b04      	ldr	r3, [pc, #16]	; (801433c <__sinit+0x28>)
 801432a:	6223      	str	r3, [r4, #32]
 801432c:	4b04      	ldr	r3, [pc, #16]	; (8014340 <__sinit+0x2c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d1f5      	bne.n	8014320 <__sinit+0xc>
 8014334:	f7ff ffc4 	bl	80142c0 <global_stdio_init.part.0>
 8014338:	e7f2      	b.n	8014320 <__sinit+0xc>
 801433a:	bf00      	nop
 801433c:	08014281 	.word	0x08014281
 8014340:	20009960 	.word	0x20009960

08014344 <_fwalk_sglue>:
 8014344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014348:	4607      	mov	r7, r0
 801434a:	4688      	mov	r8, r1
 801434c:	4614      	mov	r4, r2
 801434e:	2600      	movs	r6, #0
 8014350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014354:	f1b9 0901 	subs.w	r9, r9, #1
 8014358:	d505      	bpl.n	8014366 <_fwalk_sglue+0x22>
 801435a:	6824      	ldr	r4, [r4, #0]
 801435c:	2c00      	cmp	r4, #0
 801435e:	d1f7      	bne.n	8014350 <_fwalk_sglue+0xc>
 8014360:	4630      	mov	r0, r6
 8014362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014366:	89ab      	ldrh	r3, [r5, #12]
 8014368:	2b01      	cmp	r3, #1
 801436a:	d907      	bls.n	801437c <_fwalk_sglue+0x38>
 801436c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014370:	3301      	adds	r3, #1
 8014372:	d003      	beq.n	801437c <_fwalk_sglue+0x38>
 8014374:	4629      	mov	r1, r5
 8014376:	4638      	mov	r0, r7
 8014378:	47c0      	blx	r8
 801437a:	4306      	orrs	r6, r0
 801437c:	3568      	adds	r5, #104	; 0x68
 801437e:	e7e9      	b.n	8014354 <_fwalk_sglue+0x10>

08014380 <siprintf>:
 8014380:	b40e      	push	{r1, r2, r3}
 8014382:	b500      	push	{lr}
 8014384:	b09c      	sub	sp, #112	; 0x70
 8014386:	ab1d      	add	r3, sp, #116	; 0x74
 8014388:	9002      	str	r0, [sp, #8]
 801438a:	9006      	str	r0, [sp, #24]
 801438c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014390:	4809      	ldr	r0, [pc, #36]	; (80143b8 <siprintf+0x38>)
 8014392:	9107      	str	r1, [sp, #28]
 8014394:	9104      	str	r1, [sp, #16]
 8014396:	4909      	ldr	r1, [pc, #36]	; (80143bc <siprintf+0x3c>)
 8014398:	f853 2b04 	ldr.w	r2, [r3], #4
 801439c:	9105      	str	r1, [sp, #20]
 801439e:	6800      	ldr	r0, [r0, #0]
 80143a0:	9301      	str	r3, [sp, #4]
 80143a2:	a902      	add	r1, sp, #8
 80143a4:	f001 fca0 	bl	8015ce8 <_svfiprintf_r>
 80143a8:	9b02      	ldr	r3, [sp, #8]
 80143aa:	2200      	movs	r2, #0
 80143ac:	701a      	strb	r2, [r3, #0]
 80143ae:	b01c      	add	sp, #112	; 0x70
 80143b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80143b4:	b003      	add	sp, #12
 80143b6:	4770      	bx	lr
 80143b8:	20000410 	.word	0x20000410
 80143bc:	ffff0208 	.word	0xffff0208

080143c0 <__sread>:
 80143c0:	b510      	push	{r4, lr}
 80143c2:	460c      	mov	r4, r1
 80143c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143c8:	f000 f8dc 	bl	8014584 <_read_r>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	bfab      	itete	ge
 80143d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143d2:	89a3      	ldrhlt	r3, [r4, #12]
 80143d4:	181b      	addge	r3, r3, r0
 80143d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143da:	bfac      	ite	ge
 80143dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80143de:	81a3      	strhlt	r3, [r4, #12]
 80143e0:	bd10      	pop	{r4, pc}

080143e2 <__swrite>:
 80143e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143e6:	461f      	mov	r7, r3
 80143e8:	898b      	ldrh	r3, [r1, #12]
 80143ea:	05db      	lsls	r3, r3, #23
 80143ec:	4605      	mov	r5, r0
 80143ee:	460c      	mov	r4, r1
 80143f0:	4616      	mov	r6, r2
 80143f2:	d505      	bpl.n	8014400 <__swrite+0x1e>
 80143f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f8:	2302      	movs	r3, #2
 80143fa:	2200      	movs	r2, #0
 80143fc:	f000 f8b0 	bl	8014560 <_lseek_r>
 8014400:	89a3      	ldrh	r3, [r4, #12]
 8014402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801440a:	81a3      	strh	r3, [r4, #12]
 801440c:	4632      	mov	r2, r6
 801440e:	463b      	mov	r3, r7
 8014410:	4628      	mov	r0, r5
 8014412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014416:	f000 b8c7 	b.w	80145a8 <_write_r>

0801441a <__sseek>:
 801441a:	b510      	push	{r4, lr}
 801441c:	460c      	mov	r4, r1
 801441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014422:	f000 f89d 	bl	8014560 <_lseek_r>
 8014426:	1c43      	adds	r3, r0, #1
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	bf15      	itete	ne
 801442c:	6560      	strne	r0, [r4, #84]	; 0x54
 801442e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014436:	81a3      	strheq	r3, [r4, #12]
 8014438:	bf18      	it	ne
 801443a:	81a3      	strhne	r3, [r4, #12]
 801443c:	bd10      	pop	{r4, pc}

0801443e <__sclose>:
 801443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014442:	f000 b827 	b.w	8014494 <_close_r>

08014446 <memmove>:
 8014446:	4288      	cmp	r0, r1
 8014448:	b510      	push	{r4, lr}
 801444a:	eb01 0402 	add.w	r4, r1, r2
 801444e:	d902      	bls.n	8014456 <memmove+0x10>
 8014450:	4284      	cmp	r4, r0
 8014452:	4623      	mov	r3, r4
 8014454:	d807      	bhi.n	8014466 <memmove+0x20>
 8014456:	1e43      	subs	r3, r0, #1
 8014458:	42a1      	cmp	r1, r4
 801445a:	d008      	beq.n	801446e <memmove+0x28>
 801445c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014460:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014464:	e7f8      	b.n	8014458 <memmove+0x12>
 8014466:	4402      	add	r2, r0
 8014468:	4601      	mov	r1, r0
 801446a:	428a      	cmp	r2, r1
 801446c:	d100      	bne.n	8014470 <memmove+0x2a>
 801446e:	bd10      	pop	{r4, pc}
 8014470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014474:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014478:	e7f7      	b.n	801446a <memmove+0x24>

0801447a <memset>:
 801447a:	4402      	add	r2, r0
 801447c:	4603      	mov	r3, r0
 801447e:	4293      	cmp	r3, r2
 8014480:	d100      	bne.n	8014484 <memset+0xa>
 8014482:	4770      	bx	lr
 8014484:	f803 1b01 	strb.w	r1, [r3], #1
 8014488:	e7f9      	b.n	801447e <memset+0x4>
	...

0801448c <_localeconv_r>:
 801448c:	4800      	ldr	r0, [pc, #0]	; (8014490 <_localeconv_r+0x4>)
 801448e:	4770      	bx	lr
 8014490:	20000504 	.word	0x20000504

08014494 <_close_r>:
 8014494:	b538      	push	{r3, r4, r5, lr}
 8014496:	4d06      	ldr	r5, [pc, #24]	; (80144b0 <_close_r+0x1c>)
 8014498:	2300      	movs	r3, #0
 801449a:	4604      	mov	r4, r0
 801449c:	4608      	mov	r0, r1
 801449e:	602b      	str	r3, [r5, #0]
 80144a0:	f7f0 fd99 	bl	8004fd6 <_close>
 80144a4:	1c43      	adds	r3, r0, #1
 80144a6:	d102      	bne.n	80144ae <_close_r+0x1a>
 80144a8:	682b      	ldr	r3, [r5, #0]
 80144aa:	b103      	cbz	r3, 80144ae <_close_r+0x1a>
 80144ac:	6023      	str	r3, [r4, #0]
 80144ae:	bd38      	pop	{r3, r4, r5, pc}
 80144b0:	20009964 	.word	0x20009964

080144b4 <_reclaim_reent>:
 80144b4:	4b29      	ldr	r3, [pc, #164]	; (801455c <_reclaim_reent+0xa8>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	4283      	cmp	r3, r0
 80144ba:	b570      	push	{r4, r5, r6, lr}
 80144bc:	4604      	mov	r4, r0
 80144be:	d04b      	beq.n	8014558 <_reclaim_reent+0xa4>
 80144c0:	69c3      	ldr	r3, [r0, #28]
 80144c2:	b143      	cbz	r3, 80144d6 <_reclaim_reent+0x22>
 80144c4:	68db      	ldr	r3, [r3, #12]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d144      	bne.n	8014554 <_reclaim_reent+0xa0>
 80144ca:	69e3      	ldr	r3, [r4, #28]
 80144cc:	6819      	ldr	r1, [r3, #0]
 80144ce:	b111      	cbz	r1, 80144d6 <_reclaim_reent+0x22>
 80144d0:	4620      	mov	r0, r4
 80144d2:	f000 ff33 	bl	801533c <_free_r>
 80144d6:	6961      	ldr	r1, [r4, #20]
 80144d8:	b111      	cbz	r1, 80144e0 <_reclaim_reent+0x2c>
 80144da:	4620      	mov	r0, r4
 80144dc:	f000 ff2e 	bl	801533c <_free_r>
 80144e0:	69e1      	ldr	r1, [r4, #28]
 80144e2:	b111      	cbz	r1, 80144ea <_reclaim_reent+0x36>
 80144e4:	4620      	mov	r0, r4
 80144e6:	f000 ff29 	bl	801533c <_free_r>
 80144ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80144ec:	b111      	cbz	r1, 80144f4 <_reclaim_reent+0x40>
 80144ee:	4620      	mov	r0, r4
 80144f0:	f000 ff24 	bl	801533c <_free_r>
 80144f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144f6:	b111      	cbz	r1, 80144fe <_reclaim_reent+0x4a>
 80144f8:	4620      	mov	r0, r4
 80144fa:	f000 ff1f 	bl	801533c <_free_r>
 80144fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014500:	b111      	cbz	r1, 8014508 <_reclaim_reent+0x54>
 8014502:	4620      	mov	r0, r4
 8014504:	f000 ff1a 	bl	801533c <_free_r>
 8014508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801450a:	b111      	cbz	r1, 8014512 <_reclaim_reent+0x5e>
 801450c:	4620      	mov	r0, r4
 801450e:	f000 ff15 	bl	801533c <_free_r>
 8014512:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014514:	b111      	cbz	r1, 801451c <_reclaim_reent+0x68>
 8014516:	4620      	mov	r0, r4
 8014518:	f000 ff10 	bl	801533c <_free_r>
 801451c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801451e:	b111      	cbz	r1, 8014526 <_reclaim_reent+0x72>
 8014520:	4620      	mov	r0, r4
 8014522:	f000 ff0b 	bl	801533c <_free_r>
 8014526:	6a23      	ldr	r3, [r4, #32]
 8014528:	b1b3      	cbz	r3, 8014558 <_reclaim_reent+0xa4>
 801452a:	4620      	mov	r0, r4
 801452c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014530:	4718      	bx	r3
 8014532:	5949      	ldr	r1, [r1, r5]
 8014534:	b941      	cbnz	r1, 8014548 <_reclaim_reent+0x94>
 8014536:	3504      	adds	r5, #4
 8014538:	69e3      	ldr	r3, [r4, #28]
 801453a:	2d80      	cmp	r5, #128	; 0x80
 801453c:	68d9      	ldr	r1, [r3, #12]
 801453e:	d1f8      	bne.n	8014532 <_reclaim_reent+0x7e>
 8014540:	4620      	mov	r0, r4
 8014542:	f000 fefb 	bl	801533c <_free_r>
 8014546:	e7c0      	b.n	80144ca <_reclaim_reent+0x16>
 8014548:	680e      	ldr	r6, [r1, #0]
 801454a:	4620      	mov	r0, r4
 801454c:	f000 fef6 	bl	801533c <_free_r>
 8014550:	4631      	mov	r1, r6
 8014552:	e7ef      	b.n	8014534 <_reclaim_reent+0x80>
 8014554:	2500      	movs	r5, #0
 8014556:	e7ef      	b.n	8014538 <_reclaim_reent+0x84>
 8014558:	bd70      	pop	{r4, r5, r6, pc}
 801455a:	bf00      	nop
 801455c:	20000410 	.word	0x20000410

08014560 <_lseek_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	4d07      	ldr	r5, [pc, #28]	; (8014580 <_lseek_r+0x20>)
 8014564:	4604      	mov	r4, r0
 8014566:	4608      	mov	r0, r1
 8014568:	4611      	mov	r1, r2
 801456a:	2200      	movs	r2, #0
 801456c:	602a      	str	r2, [r5, #0]
 801456e:	461a      	mov	r2, r3
 8014570:	f7f0 fd58 	bl	8005024 <_lseek>
 8014574:	1c43      	adds	r3, r0, #1
 8014576:	d102      	bne.n	801457e <_lseek_r+0x1e>
 8014578:	682b      	ldr	r3, [r5, #0]
 801457a:	b103      	cbz	r3, 801457e <_lseek_r+0x1e>
 801457c:	6023      	str	r3, [r4, #0]
 801457e:	bd38      	pop	{r3, r4, r5, pc}
 8014580:	20009964 	.word	0x20009964

08014584 <_read_r>:
 8014584:	b538      	push	{r3, r4, r5, lr}
 8014586:	4d07      	ldr	r5, [pc, #28]	; (80145a4 <_read_r+0x20>)
 8014588:	4604      	mov	r4, r0
 801458a:	4608      	mov	r0, r1
 801458c:	4611      	mov	r1, r2
 801458e:	2200      	movs	r2, #0
 8014590:	602a      	str	r2, [r5, #0]
 8014592:	461a      	mov	r2, r3
 8014594:	f7f0 fce6 	bl	8004f64 <_read>
 8014598:	1c43      	adds	r3, r0, #1
 801459a:	d102      	bne.n	80145a2 <_read_r+0x1e>
 801459c:	682b      	ldr	r3, [r5, #0]
 801459e:	b103      	cbz	r3, 80145a2 <_read_r+0x1e>
 80145a0:	6023      	str	r3, [r4, #0]
 80145a2:	bd38      	pop	{r3, r4, r5, pc}
 80145a4:	20009964 	.word	0x20009964

080145a8 <_write_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4d07      	ldr	r5, [pc, #28]	; (80145c8 <_write_r+0x20>)
 80145ac:	4604      	mov	r4, r0
 80145ae:	4608      	mov	r0, r1
 80145b0:	4611      	mov	r1, r2
 80145b2:	2200      	movs	r2, #0
 80145b4:	602a      	str	r2, [r5, #0]
 80145b6:	461a      	mov	r2, r3
 80145b8:	f7f0 fcf1 	bl	8004f9e <_write>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	d102      	bne.n	80145c6 <_write_r+0x1e>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	b103      	cbz	r3, 80145c6 <_write_r+0x1e>
 80145c4:	6023      	str	r3, [r4, #0]
 80145c6:	bd38      	pop	{r3, r4, r5, pc}
 80145c8:	20009964 	.word	0x20009964

080145cc <__errno>:
 80145cc:	4b01      	ldr	r3, [pc, #4]	; (80145d4 <__errno+0x8>)
 80145ce:	6818      	ldr	r0, [r3, #0]
 80145d0:	4770      	bx	lr
 80145d2:	bf00      	nop
 80145d4:	20000410 	.word	0x20000410

080145d8 <__libc_init_array>:
 80145d8:	b570      	push	{r4, r5, r6, lr}
 80145da:	4d0d      	ldr	r5, [pc, #52]	; (8014610 <__libc_init_array+0x38>)
 80145dc:	4c0d      	ldr	r4, [pc, #52]	; (8014614 <__libc_init_array+0x3c>)
 80145de:	1b64      	subs	r4, r4, r5
 80145e0:	10a4      	asrs	r4, r4, #2
 80145e2:	2600      	movs	r6, #0
 80145e4:	42a6      	cmp	r6, r4
 80145e6:	d109      	bne.n	80145fc <__libc_init_array+0x24>
 80145e8:	4d0b      	ldr	r5, [pc, #44]	; (8014618 <__libc_init_array+0x40>)
 80145ea:	4c0c      	ldr	r4, [pc, #48]	; (801461c <__libc_init_array+0x44>)
 80145ec:	f002 f87c 	bl	80166e8 <_init>
 80145f0:	1b64      	subs	r4, r4, r5
 80145f2:	10a4      	asrs	r4, r4, #2
 80145f4:	2600      	movs	r6, #0
 80145f6:	42a6      	cmp	r6, r4
 80145f8:	d105      	bne.n	8014606 <__libc_init_array+0x2e>
 80145fa:	bd70      	pop	{r4, r5, r6, pc}
 80145fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014600:	4798      	blx	r3
 8014602:	3601      	adds	r6, #1
 8014604:	e7ee      	b.n	80145e4 <__libc_init_array+0xc>
 8014606:	f855 3b04 	ldr.w	r3, [r5], #4
 801460a:	4798      	blx	r3
 801460c:	3601      	adds	r6, #1
 801460e:	e7f2      	b.n	80145f6 <__libc_init_array+0x1e>
 8014610:	080170b4 	.word	0x080170b4
 8014614:	080170b4 	.word	0x080170b4
 8014618:	080170b4 	.word	0x080170b4
 801461c:	080170c4 	.word	0x080170c4

08014620 <__retarget_lock_init_recursive>:
 8014620:	4770      	bx	lr

08014622 <__retarget_lock_acquire_recursive>:
 8014622:	4770      	bx	lr

08014624 <__retarget_lock_release_recursive>:
 8014624:	4770      	bx	lr

08014626 <memcpy>:
 8014626:	440a      	add	r2, r1
 8014628:	4291      	cmp	r1, r2
 801462a:	f100 33ff 	add.w	r3, r0, #4294967295
 801462e:	d100      	bne.n	8014632 <memcpy+0xc>
 8014630:	4770      	bx	lr
 8014632:	b510      	push	{r4, lr}
 8014634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014638:	f803 4f01 	strb.w	r4, [r3, #1]!
 801463c:	4291      	cmp	r1, r2
 801463e:	d1f9      	bne.n	8014634 <memcpy+0xe>
 8014640:	bd10      	pop	{r4, pc}

08014642 <quorem>:
 8014642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014646:	6903      	ldr	r3, [r0, #16]
 8014648:	690c      	ldr	r4, [r1, #16]
 801464a:	42a3      	cmp	r3, r4
 801464c:	4607      	mov	r7, r0
 801464e:	db7e      	blt.n	801474e <quorem+0x10c>
 8014650:	3c01      	subs	r4, #1
 8014652:	f101 0814 	add.w	r8, r1, #20
 8014656:	f100 0514 	add.w	r5, r0, #20
 801465a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801465e:	9301      	str	r3, [sp, #4]
 8014660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014668:	3301      	adds	r3, #1
 801466a:	429a      	cmp	r2, r3
 801466c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014674:	fbb2 f6f3 	udiv	r6, r2, r3
 8014678:	d331      	bcc.n	80146de <quorem+0x9c>
 801467a:	f04f 0e00 	mov.w	lr, #0
 801467e:	4640      	mov	r0, r8
 8014680:	46ac      	mov	ip, r5
 8014682:	46f2      	mov	sl, lr
 8014684:	f850 2b04 	ldr.w	r2, [r0], #4
 8014688:	b293      	uxth	r3, r2
 801468a:	fb06 e303 	mla	r3, r6, r3, lr
 801468e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014692:	0c1a      	lsrs	r2, r3, #16
 8014694:	b29b      	uxth	r3, r3
 8014696:	ebaa 0303 	sub.w	r3, sl, r3
 801469a:	f8dc a000 	ldr.w	sl, [ip]
 801469e:	fa13 f38a 	uxtah	r3, r3, sl
 80146a2:	fb06 220e 	mla	r2, r6, lr, r2
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	9b00      	ldr	r3, [sp, #0]
 80146aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80146ae:	b292      	uxth	r2, r2
 80146b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80146b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80146b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80146bc:	4581      	cmp	r9, r0
 80146be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146c2:	f84c 3b04 	str.w	r3, [ip], #4
 80146c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80146ca:	d2db      	bcs.n	8014684 <quorem+0x42>
 80146cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80146d0:	b92b      	cbnz	r3, 80146de <quorem+0x9c>
 80146d2:	9b01      	ldr	r3, [sp, #4]
 80146d4:	3b04      	subs	r3, #4
 80146d6:	429d      	cmp	r5, r3
 80146d8:	461a      	mov	r2, r3
 80146da:	d32c      	bcc.n	8014736 <quorem+0xf4>
 80146dc:	613c      	str	r4, [r7, #16]
 80146de:	4638      	mov	r0, r7
 80146e0:	f001 f9a8 	bl	8015a34 <__mcmp>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	db22      	blt.n	801472e <quorem+0xec>
 80146e8:	3601      	adds	r6, #1
 80146ea:	4629      	mov	r1, r5
 80146ec:	2000      	movs	r0, #0
 80146ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80146f2:	f8d1 c000 	ldr.w	ip, [r1]
 80146f6:	b293      	uxth	r3, r2
 80146f8:	1ac3      	subs	r3, r0, r3
 80146fa:	0c12      	lsrs	r2, r2, #16
 80146fc:	fa13 f38c 	uxtah	r3, r3, ip
 8014700:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014708:	b29b      	uxth	r3, r3
 801470a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801470e:	45c1      	cmp	r9, r8
 8014710:	f841 3b04 	str.w	r3, [r1], #4
 8014714:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014718:	d2e9      	bcs.n	80146ee <quorem+0xac>
 801471a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801471e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014722:	b922      	cbnz	r2, 801472e <quorem+0xec>
 8014724:	3b04      	subs	r3, #4
 8014726:	429d      	cmp	r5, r3
 8014728:	461a      	mov	r2, r3
 801472a:	d30a      	bcc.n	8014742 <quorem+0x100>
 801472c:	613c      	str	r4, [r7, #16]
 801472e:	4630      	mov	r0, r6
 8014730:	b003      	add	sp, #12
 8014732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014736:	6812      	ldr	r2, [r2, #0]
 8014738:	3b04      	subs	r3, #4
 801473a:	2a00      	cmp	r2, #0
 801473c:	d1ce      	bne.n	80146dc <quorem+0x9a>
 801473e:	3c01      	subs	r4, #1
 8014740:	e7c9      	b.n	80146d6 <quorem+0x94>
 8014742:	6812      	ldr	r2, [r2, #0]
 8014744:	3b04      	subs	r3, #4
 8014746:	2a00      	cmp	r2, #0
 8014748:	d1f0      	bne.n	801472c <quorem+0xea>
 801474a:	3c01      	subs	r4, #1
 801474c:	e7eb      	b.n	8014726 <quorem+0xe4>
 801474e:	2000      	movs	r0, #0
 8014750:	e7ee      	b.n	8014730 <quorem+0xee>
 8014752:	0000      	movs	r0, r0
 8014754:	0000      	movs	r0, r0
	...

08014758 <_dtoa_r>:
 8014758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801475c:	ed2d 8b04 	vpush	{d8-d9}
 8014760:	69c5      	ldr	r5, [r0, #28]
 8014762:	b093      	sub	sp, #76	; 0x4c
 8014764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014768:	ec57 6b10 	vmov	r6, r7, d0
 801476c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014770:	9107      	str	r1, [sp, #28]
 8014772:	4604      	mov	r4, r0
 8014774:	920a      	str	r2, [sp, #40]	; 0x28
 8014776:	930d      	str	r3, [sp, #52]	; 0x34
 8014778:	b975      	cbnz	r5, 8014798 <_dtoa_r+0x40>
 801477a:	2010      	movs	r0, #16
 801477c:	f000 fe2a 	bl	80153d4 <malloc>
 8014780:	4602      	mov	r2, r0
 8014782:	61e0      	str	r0, [r4, #28]
 8014784:	b920      	cbnz	r0, 8014790 <_dtoa_r+0x38>
 8014786:	4bae      	ldr	r3, [pc, #696]	; (8014a40 <_dtoa_r+0x2e8>)
 8014788:	21ef      	movs	r1, #239	; 0xef
 801478a:	48ae      	ldr	r0, [pc, #696]	; (8014a44 <_dtoa_r+0x2ec>)
 801478c:	f001 fc68 	bl	8016060 <__assert_func>
 8014790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014794:	6005      	str	r5, [r0, #0]
 8014796:	60c5      	str	r5, [r0, #12]
 8014798:	69e3      	ldr	r3, [r4, #28]
 801479a:	6819      	ldr	r1, [r3, #0]
 801479c:	b151      	cbz	r1, 80147b4 <_dtoa_r+0x5c>
 801479e:	685a      	ldr	r2, [r3, #4]
 80147a0:	604a      	str	r2, [r1, #4]
 80147a2:	2301      	movs	r3, #1
 80147a4:	4093      	lsls	r3, r2
 80147a6:	608b      	str	r3, [r1, #8]
 80147a8:	4620      	mov	r0, r4
 80147aa:	f000 ff07 	bl	80155bc <_Bfree>
 80147ae:	69e3      	ldr	r3, [r4, #28]
 80147b0:	2200      	movs	r2, #0
 80147b2:	601a      	str	r2, [r3, #0]
 80147b4:	1e3b      	subs	r3, r7, #0
 80147b6:	bfbb      	ittet	lt
 80147b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80147bc:	9303      	strlt	r3, [sp, #12]
 80147be:	2300      	movge	r3, #0
 80147c0:	2201      	movlt	r2, #1
 80147c2:	bfac      	ite	ge
 80147c4:	f8c8 3000 	strge.w	r3, [r8]
 80147c8:	f8c8 2000 	strlt.w	r2, [r8]
 80147cc:	4b9e      	ldr	r3, [pc, #632]	; (8014a48 <_dtoa_r+0x2f0>)
 80147ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80147d2:	ea33 0308 	bics.w	r3, r3, r8
 80147d6:	d11b      	bne.n	8014810 <_dtoa_r+0xb8>
 80147d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147da:	f242 730f 	movw	r3, #9999	; 0x270f
 80147de:	6013      	str	r3, [r2, #0]
 80147e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80147e4:	4333      	orrs	r3, r6
 80147e6:	f000 8593 	beq.w	8015310 <_dtoa_r+0xbb8>
 80147ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ec:	b963      	cbnz	r3, 8014808 <_dtoa_r+0xb0>
 80147ee:	4b97      	ldr	r3, [pc, #604]	; (8014a4c <_dtoa_r+0x2f4>)
 80147f0:	e027      	b.n	8014842 <_dtoa_r+0xea>
 80147f2:	4b97      	ldr	r3, [pc, #604]	; (8014a50 <_dtoa_r+0x2f8>)
 80147f4:	9300      	str	r3, [sp, #0]
 80147f6:	3308      	adds	r3, #8
 80147f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147fa:	6013      	str	r3, [r2, #0]
 80147fc:	9800      	ldr	r0, [sp, #0]
 80147fe:	b013      	add	sp, #76	; 0x4c
 8014800:	ecbd 8b04 	vpop	{d8-d9}
 8014804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014808:	4b90      	ldr	r3, [pc, #576]	; (8014a4c <_dtoa_r+0x2f4>)
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	3303      	adds	r3, #3
 801480e:	e7f3      	b.n	80147f8 <_dtoa_r+0xa0>
 8014810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014814:	2200      	movs	r2, #0
 8014816:	ec51 0b17 	vmov	r0, r1, d7
 801481a:	eeb0 8a47 	vmov.f32	s16, s14
 801481e:	eef0 8a67 	vmov.f32	s17, s15
 8014822:	2300      	movs	r3, #0
 8014824:	f7ec f968 	bl	8000af8 <__aeabi_dcmpeq>
 8014828:	4681      	mov	r9, r0
 801482a:	b160      	cbz	r0, 8014846 <_dtoa_r+0xee>
 801482c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801482e:	2301      	movs	r3, #1
 8014830:	6013      	str	r3, [r2, #0]
 8014832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014834:	2b00      	cmp	r3, #0
 8014836:	f000 8568 	beq.w	801530a <_dtoa_r+0xbb2>
 801483a:	4b86      	ldr	r3, [pc, #536]	; (8014a54 <_dtoa_r+0x2fc>)
 801483c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801483e:	6013      	str	r3, [r2, #0]
 8014840:	3b01      	subs	r3, #1
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	e7da      	b.n	80147fc <_dtoa_r+0xa4>
 8014846:	aa10      	add	r2, sp, #64	; 0x40
 8014848:	a911      	add	r1, sp, #68	; 0x44
 801484a:	4620      	mov	r0, r4
 801484c:	eeb0 0a48 	vmov.f32	s0, s16
 8014850:	eef0 0a68 	vmov.f32	s1, s17
 8014854:	f001 f994 	bl	8015b80 <__d2b>
 8014858:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801485c:	4682      	mov	sl, r0
 801485e:	2d00      	cmp	r5, #0
 8014860:	d07f      	beq.n	8014962 <_dtoa_r+0x20a>
 8014862:	ee18 3a90 	vmov	r3, s17
 8014866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801486a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801486e:	ec51 0b18 	vmov	r0, r1, d8
 8014872:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801487a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801487e:	4619      	mov	r1, r3
 8014880:	2200      	movs	r2, #0
 8014882:	4b75      	ldr	r3, [pc, #468]	; (8014a58 <_dtoa_r+0x300>)
 8014884:	f7eb fd18 	bl	80002b8 <__aeabi_dsub>
 8014888:	a367      	add	r3, pc, #412	; (adr r3, 8014a28 <_dtoa_r+0x2d0>)
 801488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488e:	f7eb fecb 	bl	8000628 <__aeabi_dmul>
 8014892:	a367      	add	r3, pc, #412	; (adr r3, 8014a30 <_dtoa_r+0x2d8>)
 8014894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014898:	f7eb fd10 	bl	80002bc <__adddf3>
 801489c:	4606      	mov	r6, r0
 801489e:	4628      	mov	r0, r5
 80148a0:	460f      	mov	r7, r1
 80148a2:	f7eb fe57 	bl	8000554 <__aeabi_i2d>
 80148a6:	a364      	add	r3, pc, #400	; (adr r3, 8014a38 <_dtoa_r+0x2e0>)
 80148a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ac:	f7eb febc 	bl	8000628 <__aeabi_dmul>
 80148b0:	4602      	mov	r2, r0
 80148b2:	460b      	mov	r3, r1
 80148b4:	4630      	mov	r0, r6
 80148b6:	4639      	mov	r1, r7
 80148b8:	f7eb fd00 	bl	80002bc <__adddf3>
 80148bc:	4606      	mov	r6, r0
 80148be:	460f      	mov	r7, r1
 80148c0:	f7ec f962 	bl	8000b88 <__aeabi_d2iz>
 80148c4:	2200      	movs	r2, #0
 80148c6:	4683      	mov	fp, r0
 80148c8:	2300      	movs	r3, #0
 80148ca:	4630      	mov	r0, r6
 80148cc:	4639      	mov	r1, r7
 80148ce:	f7ec f91d 	bl	8000b0c <__aeabi_dcmplt>
 80148d2:	b148      	cbz	r0, 80148e8 <_dtoa_r+0x190>
 80148d4:	4658      	mov	r0, fp
 80148d6:	f7eb fe3d 	bl	8000554 <__aeabi_i2d>
 80148da:	4632      	mov	r2, r6
 80148dc:	463b      	mov	r3, r7
 80148de:	f7ec f90b 	bl	8000af8 <__aeabi_dcmpeq>
 80148e2:	b908      	cbnz	r0, 80148e8 <_dtoa_r+0x190>
 80148e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148e8:	f1bb 0f16 	cmp.w	fp, #22
 80148ec:	d857      	bhi.n	801499e <_dtoa_r+0x246>
 80148ee:	4b5b      	ldr	r3, [pc, #364]	; (8014a5c <_dtoa_r+0x304>)
 80148f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80148f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f8:	ec51 0b18 	vmov	r0, r1, d8
 80148fc:	f7ec f906 	bl	8000b0c <__aeabi_dcmplt>
 8014900:	2800      	cmp	r0, #0
 8014902:	d04e      	beq.n	80149a2 <_dtoa_r+0x24a>
 8014904:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014908:	2300      	movs	r3, #0
 801490a:	930c      	str	r3, [sp, #48]	; 0x30
 801490c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801490e:	1b5b      	subs	r3, r3, r5
 8014910:	1e5a      	subs	r2, r3, #1
 8014912:	bf45      	ittet	mi
 8014914:	f1c3 0301 	rsbmi	r3, r3, #1
 8014918:	9305      	strmi	r3, [sp, #20]
 801491a:	2300      	movpl	r3, #0
 801491c:	2300      	movmi	r3, #0
 801491e:	9206      	str	r2, [sp, #24]
 8014920:	bf54      	ite	pl
 8014922:	9305      	strpl	r3, [sp, #20]
 8014924:	9306      	strmi	r3, [sp, #24]
 8014926:	f1bb 0f00 	cmp.w	fp, #0
 801492a:	db3c      	blt.n	80149a6 <_dtoa_r+0x24e>
 801492c:	9b06      	ldr	r3, [sp, #24]
 801492e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014932:	445b      	add	r3, fp
 8014934:	9306      	str	r3, [sp, #24]
 8014936:	2300      	movs	r3, #0
 8014938:	9308      	str	r3, [sp, #32]
 801493a:	9b07      	ldr	r3, [sp, #28]
 801493c:	2b09      	cmp	r3, #9
 801493e:	d868      	bhi.n	8014a12 <_dtoa_r+0x2ba>
 8014940:	2b05      	cmp	r3, #5
 8014942:	bfc4      	itt	gt
 8014944:	3b04      	subgt	r3, #4
 8014946:	9307      	strgt	r3, [sp, #28]
 8014948:	9b07      	ldr	r3, [sp, #28]
 801494a:	f1a3 0302 	sub.w	r3, r3, #2
 801494e:	bfcc      	ite	gt
 8014950:	2500      	movgt	r5, #0
 8014952:	2501      	movle	r5, #1
 8014954:	2b03      	cmp	r3, #3
 8014956:	f200 8085 	bhi.w	8014a64 <_dtoa_r+0x30c>
 801495a:	e8df f003 	tbb	[pc, r3]
 801495e:	3b2e      	.short	0x3b2e
 8014960:	5839      	.short	0x5839
 8014962:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014966:	441d      	add	r5, r3
 8014968:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801496c:	2b20      	cmp	r3, #32
 801496e:	bfc1      	itttt	gt
 8014970:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014974:	fa08 f803 	lslgt.w	r8, r8, r3
 8014978:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801497c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014980:	bfd6      	itet	le
 8014982:	f1c3 0320 	rsble	r3, r3, #32
 8014986:	ea48 0003 	orrgt.w	r0, r8, r3
 801498a:	fa06 f003 	lslle.w	r0, r6, r3
 801498e:	f7eb fdd1 	bl	8000534 <__aeabi_ui2d>
 8014992:	2201      	movs	r2, #1
 8014994:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014998:	3d01      	subs	r5, #1
 801499a:	920e      	str	r2, [sp, #56]	; 0x38
 801499c:	e76f      	b.n	801487e <_dtoa_r+0x126>
 801499e:	2301      	movs	r3, #1
 80149a0:	e7b3      	b.n	801490a <_dtoa_r+0x1b2>
 80149a2:	900c      	str	r0, [sp, #48]	; 0x30
 80149a4:	e7b2      	b.n	801490c <_dtoa_r+0x1b4>
 80149a6:	9b05      	ldr	r3, [sp, #20]
 80149a8:	eba3 030b 	sub.w	r3, r3, fp
 80149ac:	9305      	str	r3, [sp, #20]
 80149ae:	f1cb 0300 	rsb	r3, fp, #0
 80149b2:	9308      	str	r3, [sp, #32]
 80149b4:	2300      	movs	r3, #0
 80149b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80149b8:	e7bf      	b.n	801493a <_dtoa_r+0x1e2>
 80149ba:	2300      	movs	r3, #0
 80149bc:	9309      	str	r3, [sp, #36]	; 0x24
 80149be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	dc52      	bgt.n	8014a6a <_dtoa_r+0x312>
 80149c4:	2301      	movs	r3, #1
 80149c6:	9301      	str	r3, [sp, #4]
 80149c8:	9304      	str	r3, [sp, #16]
 80149ca:	461a      	mov	r2, r3
 80149cc:	920a      	str	r2, [sp, #40]	; 0x28
 80149ce:	e00b      	b.n	80149e8 <_dtoa_r+0x290>
 80149d0:	2301      	movs	r3, #1
 80149d2:	e7f3      	b.n	80149bc <_dtoa_r+0x264>
 80149d4:	2300      	movs	r3, #0
 80149d6:	9309      	str	r3, [sp, #36]	; 0x24
 80149d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149da:	445b      	add	r3, fp
 80149dc:	9301      	str	r3, [sp, #4]
 80149de:	3301      	adds	r3, #1
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	9304      	str	r3, [sp, #16]
 80149e4:	bfb8      	it	lt
 80149e6:	2301      	movlt	r3, #1
 80149e8:	69e0      	ldr	r0, [r4, #28]
 80149ea:	2100      	movs	r1, #0
 80149ec:	2204      	movs	r2, #4
 80149ee:	f102 0614 	add.w	r6, r2, #20
 80149f2:	429e      	cmp	r6, r3
 80149f4:	d93d      	bls.n	8014a72 <_dtoa_r+0x31a>
 80149f6:	6041      	str	r1, [r0, #4]
 80149f8:	4620      	mov	r0, r4
 80149fa:	f000 fd9f 	bl	801553c <_Balloc>
 80149fe:	9000      	str	r0, [sp, #0]
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d139      	bne.n	8014a78 <_dtoa_r+0x320>
 8014a04:	4b16      	ldr	r3, [pc, #88]	; (8014a60 <_dtoa_r+0x308>)
 8014a06:	4602      	mov	r2, r0
 8014a08:	f240 11af 	movw	r1, #431	; 0x1af
 8014a0c:	e6bd      	b.n	801478a <_dtoa_r+0x32>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e7e1      	b.n	80149d6 <_dtoa_r+0x27e>
 8014a12:	2501      	movs	r5, #1
 8014a14:	2300      	movs	r3, #0
 8014a16:	9307      	str	r3, [sp, #28]
 8014a18:	9509      	str	r5, [sp, #36]	; 0x24
 8014a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a1e:	9301      	str	r3, [sp, #4]
 8014a20:	9304      	str	r3, [sp, #16]
 8014a22:	2200      	movs	r2, #0
 8014a24:	2312      	movs	r3, #18
 8014a26:	e7d1      	b.n	80149cc <_dtoa_r+0x274>
 8014a28:	636f4361 	.word	0x636f4361
 8014a2c:	3fd287a7 	.word	0x3fd287a7
 8014a30:	8b60c8b3 	.word	0x8b60c8b3
 8014a34:	3fc68a28 	.word	0x3fc68a28
 8014a38:	509f79fb 	.word	0x509f79fb
 8014a3c:	3fd34413 	.word	0x3fd34413
 8014a40:	08016d81 	.word	0x08016d81
 8014a44:	08016d98 	.word	0x08016d98
 8014a48:	7ff00000 	.word	0x7ff00000
 8014a4c:	08016d7d 	.word	0x08016d7d
 8014a50:	08016d74 	.word	0x08016d74
 8014a54:	08016d51 	.word	0x08016d51
 8014a58:	3ff80000 	.word	0x3ff80000
 8014a5c:	08016e88 	.word	0x08016e88
 8014a60:	08016df0 	.word	0x08016df0
 8014a64:	2301      	movs	r3, #1
 8014a66:	9309      	str	r3, [sp, #36]	; 0x24
 8014a68:	e7d7      	b.n	8014a1a <_dtoa_r+0x2c2>
 8014a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a6c:	9301      	str	r3, [sp, #4]
 8014a6e:	9304      	str	r3, [sp, #16]
 8014a70:	e7ba      	b.n	80149e8 <_dtoa_r+0x290>
 8014a72:	3101      	adds	r1, #1
 8014a74:	0052      	lsls	r2, r2, #1
 8014a76:	e7ba      	b.n	80149ee <_dtoa_r+0x296>
 8014a78:	69e3      	ldr	r3, [r4, #28]
 8014a7a:	9a00      	ldr	r2, [sp, #0]
 8014a7c:	601a      	str	r2, [r3, #0]
 8014a7e:	9b04      	ldr	r3, [sp, #16]
 8014a80:	2b0e      	cmp	r3, #14
 8014a82:	f200 80a8 	bhi.w	8014bd6 <_dtoa_r+0x47e>
 8014a86:	2d00      	cmp	r5, #0
 8014a88:	f000 80a5 	beq.w	8014bd6 <_dtoa_r+0x47e>
 8014a8c:	f1bb 0f00 	cmp.w	fp, #0
 8014a90:	dd38      	ble.n	8014b04 <_dtoa_r+0x3ac>
 8014a92:	4bc0      	ldr	r3, [pc, #768]	; (8014d94 <_dtoa_r+0x63c>)
 8014a94:	f00b 020f 	and.w	r2, fp, #15
 8014a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014aa0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014aa4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014aa8:	d019      	beq.n	8014ade <_dtoa_r+0x386>
 8014aaa:	4bbb      	ldr	r3, [pc, #748]	; (8014d98 <_dtoa_r+0x640>)
 8014aac:	ec51 0b18 	vmov	r0, r1, d8
 8014ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ab4:	f7eb fee2 	bl	800087c <__aeabi_ddiv>
 8014ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014abc:	f008 080f 	and.w	r8, r8, #15
 8014ac0:	2503      	movs	r5, #3
 8014ac2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014d98 <_dtoa_r+0x640>
 8014ac6:	f1b8 0f00 	cmp.w	r8, #0
 8014aca:	d10a      	bne.n	8014ae2 <_dtoa_r+0x38a>
 8014acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ad0:	4632      	mov	r2, r6
 8014ad2:	463b      	mov	r3, r7
 8014ad4:	f7eb fed2 	bl	800087c <__aeabi_ddiv>
 8014ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014adc:	e02b      	b.n	8014b36 <_dtoa_r+0x3de>
 8014ade:	2502      	movs	r5, #2
 8014ae0:	e7ef      	b.n	8014ac2 <_dtoa_r+0x36a>
 8014ae2:	f018 0f01 	tst.w	r8, #1
 8014ae6:	d008      	beq.n	8014afa <_dtoa_r+0x3a2>
 8014ae8:	4630      	mov	r0, r6
 8014aea:	4639      	mov	r1, r7
 8014aec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014af0:	f7eb fd9a 	bl	8000628 <__aeabi_dmul>
 8014af4:	3501      	adds	r5, #1
 8014af6:	4606      	mov	r6, r0
 8014af8:	460f      	mov	r7, r1
 8014afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014afe:	f109 0908 	add.w	r9, r9, #8
 8014b02:	e7e0      	b.n	8014ac6 <_dtoa_r+0x36e>
 8014b04:	f000 809f 	beq.w	8014c46 <_dtoa_r+0x4ee>
 8014b08:	f1cb 0600 	rsb	r6, fp, #0
 8014b0c:	4ba1      	ldr	r3, [pc, #644]	; (8014d94 <_dtoa_r+0x63c>)
 8014b0e:	4fa2      	ldr	r7, [pc, #648]	; (8014d98 <_dtoa_r+0x640>)
 8014b10:	f006 020f 	and.w	r2, r6, #15
 8014b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	ec51 0b18 	vmov	r0, r1, d8
 8014b20:	f7eb fd82 	bl	8000628 <__aeabi_dmul>
 8014b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b28:	1136      	asrs	r6, r6, #4
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	2502      	movs	r5, #2
 8014b2e:	2e00      	cmp	r6, #0
 8014b30:	d17e      	bne.n	8014c30 <_dtoa_r+0x4d8>
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d1d0      	bne.n	8014ad8 <_dtoa_r+0x380>
 8014b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	f000 8084 	beq.w	8014c4a <_dtoa_r+0x4f2>
 8014b42:	4b96      	ldr	r3, [pc, #600]	; (8014d9c <_dtoa_r+0x644>)
 8014b44:	2200      	movs	r2, #0
 8014b46:	4640      	mov	r0, r8
 8014b48:	4649      	mov	r1, r9
 8014b4a:	f7eb ffdf 	bl	8000b0c <__aeabi_dcmplt>
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d07b      	beq.n	8014c4a <_dtoa_r+0x4f2>
 8014b52:	9b04      	ldr	r3, [sp, #16]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d078      	beq.n	8014c4a <_dtoa_r+0x4f2>
 8014b58:	9b01      	ldr	r3, [sp, #4]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	dd39      	ble.n	8014bd2 <_dtoa_r+0x47a>
 8014b5e:	4b90      	ldr	r3, [pc, #576]	; (8014da0 <_dtoa_r+0x648>)
 8014b60:	2200      	movs	r2, #0
 8014b62:	4640      	mov	r0, r8
 8014b64:	4649      	mov	r1, r9
 8014b66:	f7eb fd5f 	bl	8000628 <__aeabi_dmul>
 8014b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b6e:	9e01      	ldr	r6, [sp, #4]
 8014b70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014b74:	3501      	adds	r5, #1
 8014b76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f7eb fcea 	bl	8000554 <__aeabi_i2d>
 8014b80:	4642      	mov	r2, r8
 8014b82:	464b      	mov	r3, r9
 8014b84:	f7eb fd50 	bl	8000628 <__aeabi_dmul>
 8014b88:	4b86      	ldr	r3, [pc, #536]	; (8014da4 <_dtoa_r+0x64c>)
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f7eb fb96 	bl	80002bc <__adddf3>
 8014b90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b98:	9303      	str	r3, [sp, #12]
 8014b9a:	2e00      	cmp	r6, #0
 8014b9c:	d158      	bne.n	8014c50 <_dtoa_r+0x4f8>
 8014b9e:	4b82      	ldr	r3, [pc, #520]	; (8014da8 <_dtoa_r+0x650>)
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	4640      	mov	r0, r8
 8014ba4:	4649      	mov	r1, r9
 8014ba6:	f7eb fb87 	bl	80002b8 <__aeabi_dsub>
 8014baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bae:	4680      	mov	r8, r0
 8014bb0:	4689      	mov	r9, r1
 8014bb2:	f7eb ffc9 	bl	8000b48 <__aeabi_dcmpgt>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	f040 8296 	bne.w	80150e8 <_dtoa_r+0x990>
 8014bbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014bc0:	4640      	mov	r0, r8
 8014bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bc6:	4649      	mov	r1, r9
 8014bc8:	f7eb ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	f040 8289 	bne.w	80150e4 <_dtoa_r+0x98c>
 8014bd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f2c0 814e 	blt.w	8014e7a <_dtoa_r+0x722>
 8014bde:	f1bb 0f0e 	cmp.w	fp, #14
 8014be2:	f300 814a 	bgt.w	8014e7a <_dtoa_r+0x722>
 8014be6:	4b6b      	ldr	r3, [pc, #428]	; (8014d94 <_dtoa_r+0x63c>)
 8014be8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f280 80dc 	bge.w	8014db0 <_dtoa_r+0x658>
 8014bf8:	9b04      	ldr	r3, [sp, #16]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f300 80d8 	bgt.w	8014db0 <_dtoa_r+0x658>
 8014c00:	f040 826f 	bne.w	80150e2 <_dtoa_r+0x98a>
 8014c04:	4b68      	ldr	r3, [pc, #416]	; (8014da8 <_dtoa_r+0x650>)
 8014c06:	2200      	movs	r2, #0
 8014c08:	4640      	mov	r0, r8
 8014c0a:	4649      	mov	r1, r9
 8014c0c:	f7eb fd0c 	bl	8000628 <__aeabi_dmul>
 8014c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c14:	f7eb ff8e 	bl	8000b34 <__aeabi_dcmpge>
 8014c18:	9e04      	ldr	r6, [sp, #16]
 8014c1a:	4637      	mov	r7, r6
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	f040 8245 	bne.w	80150ac <_dtoa_r+0x954>
 8014c22:	9d00      	ldr	r5, [sp, #0]
 8014c24:	2331      	movs	r3, #49	; 0x31
 8014c26:	f805 3b01 	strb.w	r3, [r5], #1
 8014c2a:	f10b 0b01 	add.w	fp, fp, #1
 8014c2e:	e241      	b.n	80150b4 <_dtoa_r+0x95c>
 8014c30:	07f2      	lsls	r2, r6, #31
 8014c32:	d505      	bpl.n	8014c40 <_dtoa_r+0x4e8>
 8014c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c38:	f7eb fcf6 	bl	8000628 <__aeabi_dmul>
 8014c3c:	3501      	adds	r5, #1
 8014c3e:	2301      	movs	r3, #1
 8014c40:	1076      	asrs	r6, r6, #1
 8014c42:	3708      	adds	r7, #8
 8014c44:	e773      	b.n	8014b2e <_dtoa_r+0x3d6>
 8014c46:	2502      	movs	r5, #2
 8014c48:	e775      	b.n	8014b36 <_dtoa_r+0x3de>
 8014c4a:	9e04      	ldr	r6, [sp, #16]
 8014c4c:	465f      	mov	r7, fp
 8014c4e:	e792      	b.n	8014b76 <_dtoa_r+0x41e>
 8014c50:	9900      	ldr	r1, [sp, #0]
 8014c52:	4b50      	ldr	r3, [pc, #320]	; (8014d94 <_dtoa_r+0x63c>)
 8014c54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c58:	4431      	add	r1, r6
 8014c5a:	9102      	str	r1, [sp, #8]
 8014c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c5e:	eeb0 9a47 	vmov.f32	s18, s14
 8014c62:	eef0 9a67 	vmov.f32	s19, s15
 8014c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014c6e:	2900      	cmp	r1, #0
 8014c70:	d044      	beq.n	8014cfc <_dtoa_r+0x5a4>
 8014c72:	494e      	ldr	r1, [pc, #312]	; (8014dac <_dtoa_r+0x654>)
 8014c74:	2000      	movs	r0, #0
 8014c76:	f7eb fe01 	bl	800087c <__aeabi_ddiv>
 8014c7a:	ec53 2b19 	vmov	r2, r3, d9
 8014c7e:	f7eb fb1b 	bl	80002b8 <__aeabi_dsub>
 8014c82:	9d00      	ldr	r5, [sp, #0]
 8014c84:	ec41 0b19 	vmov	d9, r0, r1
 8014c88:	4649      	mov	r1, r9
 8014c8a:	4640      	mov	r0, r8
 8014c8c:	f7eb ff7c 	bl	8000b88 <__aeabi_d2iz>
 8014c90:	4606      	mov	r6, r0
 8014c92:	f7eb fc5f 	bl	8000554 <__aeabi_i2d>
 8014c96:	4602      	mov	r2, r0
 8014c98:	460b      	mov	r3, r1
 8014c9a:	4640      	mov	r0, r8
 8014c9c:	4649      	mov	r1, r9
 8014c9e:	f7eb fb0b 	bl	80002b8 <__aeabi_dsub>
 8014ca2:	3630      	adds	r6, #48	; 0x30
 8014ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8014ca8:	ec53 2b19 	vmov	r2, r3, d9
 8014cac:	4680      	mov	r8, r0
 8014cae:	4689      	mov	r9, r1
 8014cb0:	f7eb ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d164      	bne.n	8014d82 <_dtoa_r+0x62a>
 8014cb8:	4642      	mov	r2, r8
 8014cba:	464b      	mov	r3, r9
 8014cbc:	4937      	ldr	r1, [pc, #220]	; (8014d9c <_dtoa_r+0x644>)
 8014cbe:	2000      	movs	r0, #0
 8014cc0:	f7eb fafa 	bl	80002b8 <__aeabi_dsub>
 8014cc4:	ec53 2b19 	vmov	r2, r3, d9
 8014cc8:	f7eb ff20 	bl	8000b0c <__aeabi_dcmplt>
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	f040 80b6 	bne.w	8014e3e <_dtoa_r+0x6e6>
 8014cd2:	9b02      	ldr	r3, [sp, #8]
 8014cd4:	429d      	cmp	r5, r3
 8014cd6:	f43f af7c 	beq.w	8014bd2 <_dtoa_r+0x47a>
 8014cda:	4b31      	ldr	r3, [pc, #196]	; (8014da0 <_dtoa_r+0x648>)
 8014cdc:	ec51 0b19 	vmov	r0, r1, d9
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f7eb fca1 	bl	8000628 <__aeabi_dmul>
 8014ce6:	4b2e      	ldr	r3, [pc, #184]	; (8014da0 <_dtoa_r+0x648>)
 8014ce8:	ec41 0b19 	vmov	d9, r0, r1
 8014cec:	2200      	movs	r2, #0
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	f7eb fc99 	bl	8000628 <__aeabi_dmul>
 8014cf6:	4680      	mov	r8, r0
 8014cf8:	4689      	mov	r9, r1
 8014cfa:	e7c5      	b.n	8014c88 <_dtoa_r+0x530>
 8014cfc:	ec51 0b17 	vmov	r0, r1, d7
 8014d00:	f7eb fc92 	bl	8000628 <__aeabi_dmul>
 8014d04:	9b02      	ldr	r3, [sp, #8]
 8014d06:	9d00      	ldr	r5, [sp, #0]
 8014d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d0a:	ec41 0b19 	vmov	d9, r0, r1
 8014d0e:	4649      	mov	r1, r9
 8014d10:	4640      	mov	r0, r8
 8014d12:	f7eb ff39 	bl	8000b88 <__aeabi_d2iz>
 8014d16:	4606      	mov	r6, r0
 8014d18:	f7eb fc1c 	bl	8000554 <__aeabi_i2d>
 8014d1c:	3630      	adds	r6, #48	; 0x30
 8014d1e:	4602      	mov	r2, r0
 8014d20:	460b      	mov	r3, r1
 8014d22:	4640      	mov	r0, r8
 8014d24:	4649      	mov	r1, r9
 8014d26:	f7eb fac7 	bl	80002b8 <__aeabi_dsub>
 8014d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8014d2e:	9b02      	ldr	r3, [sp, #8]
 8014d30:	429d      	cmp	r5, r3
 8014d32:	4680      	mov	r8, r0
 8014d34:	4689      	mov	r9, r1
 8014d36:	f04f 0200 	mov.w	r2, #0
 8014d3a:	d124      	bne.n	8014d86 <_dtoa_r+0x62e>
 8014d3c:	4b1b      	ldr	r3, [pc, #108]	; (8014dac <_dtoa_r+0x654>)
 8014d3e:	ec51 0b19 	vmov	r0, r1, d9
 8014d42:	f7eb fabb 	bl	80002bc <__adddf3>
 8014d46:	4602      	mov	r2, r0
 8014d48:	460b      	mov	r3, r1
 8014d4a:	4640      	mov	r0, r8
 8014d4c:	4649      	mov	r1, r9
 8014d4e:	f7eb fefb 	bl	8000b48 <__aeabi_dcmpgt>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d173      	bne.n	8014e3e <_dtoa_r+0x6e6>
 8014d56:	ec53 2b19 	vmov	r2, r3, d9
 8014d5a:	4914      	ldr	r1, [pc, #80]	; (8014dac <_dtoa_r+0x654>)
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	f7eb faab 	bl	80002b8 <__aeabi_dsub>
 8014d62:	4602      	mov	r2, r0
 8014d64:	460b      	mov	r3, r1
 8014d66:	4640      	mov	r0, r8
 8014d68:	4649      	mov	r1, r9
 8014d6a:	f7eb fecf 	bl	8000b0c <__aeabi_dcmplt>
 8014d6e:	2800      	cmp	r0, #0
 8014d70:	f43f af2f 	beq.w	8014bd2 <_dtoa_r+0x47a>
 8014d74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014d76:	1e6b      	subs	r3, r5, #1
 8014d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d7e:	2b30      	cmp	r3, #48	; 0x30
 8014d80:	d0f8      	beq.n	8014d74 <_dtoa_r+0x61c>
 8014d82:	46bb      	mov	fp, r7
 8014d84:	e04a      	b.n	8014e1c <_dtoa_r+0x6c4>
 8014d86:	4b06      	ldr	r3, [pc, #24]	; (8014da0 <_dtoa_r+0x648>)
 8014d88:	f7eb fc4e 	bl	8000628 <__aeabi_dmul>
 8014d8c:	4680      	mov	r8, r0
 8014d8e:	4689      	mov	r9, r1
 8014d90:	e7bd      	b.n	8014d0e <_dtoa_r+0x5b6>
 8014d92:	bf00      	nop
 8014d94:	08016e88 	.word	0x08016e88
 8014d98:	08016e60 	.word	0x08016e60
 8014d9c:	3ff00000 	.word	0x3ff00000
 8014da0:	40240000 	.word	0x40240000
 8014da4:	401c0000 	.word	0x401c0000
 8014da8:	40140000 	.word	0x40140000
 8014dac:	3fe00000 	.word	0x3fe00000
 8014db0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014db4:	9d00      	ldr	r5, [sp, #0]
 8014db6:	4642      	mov	r2, r8
 8014db8:	464b      	mov	r3, r9
 8014dba:	4630      	mov	r0, r6
 8014dbc:	4639      	mov	r1, r7
 8014dbe:	f7eb fd5d 	bl	800087c <__aeabi_ddiv>
 8014dc2:	f7eb fee1 	bl	8000b88 <__aeabi_d2iz>
 8014dc6:	9001      	str	r0, [sp, #4]
 8014dc8:	f7eb fbc4 	bl	8000554 <__aeabi_i2d>
 8014dcc:	4642      	mov	r2, r8
 8014dce:	464b      	mov	r3, r9
 8014dd0:	f7eb fc2a 	bl	8000628 <__aeabi_dmul>
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	460b      	mov	r3, r1
 8014dd8:	4630      	mov	r0, r6
 8014dda:	4639      	mov	r1, r7
 8014ddc:	f7eb fa6c 	bl	80002b8 <__aeabi_dsub>
 8014de0:	9e01      	ldr	r6, [sp, #4]
 8014de2:	9f04      	ldr	r7, [sp, #16]
 8014de4:	3630      	adds	r6, #48	; 0x30
 8014de6:	f805 6b01 	strb.w	r6, [r5], #1
 8014dea:	9e00      	ldr	r6, [sp, #0]
 8014dec:	1bae      	subs	r6, r5, r6
 8014dee:	42b7      	cmp	r7, r6
 8014df0:	4602      	mov	r2, r0
 8014df2:	460b      	mov	r3, r1
 8014df4:	d134      	bne.n	8014e60 <_dtoa_r+0x708>
 8014df6:	f7eb fa61 	bl	80002bc <__adddf3>
 8014dfa:	4642      	mov	r2, r8
 8014dfc:	464b      	mov	r3, r9
 8014dfe:	4606      	mov	r6, r0
 8014e00:	460f      	mov	r7, r1
 8014e02:	f7eb fea1 	bl	8000b48 <__aeabi_dcmpgt>
 8014e06:	b9c8      	cbnz	r0, 8014e3c <_dtoa_r+0x6e4>
 8014e08:	4642      	mov	r2, r8
 8014e0a:	464b      	mov	r3, r9
 8014e0c:	4630      	mov	r0, r6
 8014e0e:	4639      	mov	r1, r7
 8014e10:	f7eb fe72 	bl	8000af8 <__aeabi_dcmpeq>
 8014e14:	b110      	cbz	r0, 8014e1c <_dtoa_r+0x6c4>
 8014e16:	9b01      	ldr	r3, [sp, #4]
 8014e18:	07db      	lsls	r3, r3, #31
 8014e1a:	d40f      	bmi.n	8014e3c <_dtoa_r+0x6e4>
 8014e1c:	4651      	mov	r1, sl
 8014e1e:	4620      	mov	r0, r4
 8014e20:	f000 fbcc 	bl	80155bc <_Bfree>
 8014e24:	2300      	movs	r3, #0
 8014e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e28:	702b      	strb	r3, [r5, #0]
 8014e2a:	f10b 0301 	add.w	r3, fp, #1
 8014e2e:	6013      	str	r3, [r2, #0]
 8014e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	f43f ace2 	beq.w	80147fc <_dtoa_r+0xa4>
 8014e38:	601d      	str	r5, [r3, #0]
 8014e3a:	e4df      	b.n	80147fc <_dtoa_r+0xa4>
 8014e3c:	465f      	mov	r7, fp
 8014e3e:	462b      	mov	r3, r5
 8014e40:	461d      	mov	r5, r3
 8014e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e46:	2a39      	cmp	r2, #57	; 0x39
 8014e48:	d106      	bne.n	8014e58 <_dtoa_r+0x700>
 8014e4a:	9a00      	ldr	r2, [sp, #0]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d1f7      	bne.n	8014e40 <_dtoa_r+0x6e8>
 8014e50:	9900      	ldr	r1, [sp, #0]
 8014e52:	2230      	movs	r2, #48	; 0x30
 8014e54:	3701      	adds	r7, #1
 8014e56:	700a      	strb	r2, [r1, #0]
 8014e58:	781a      	ldrb	r2, [r3, #0]
 8014e5a:	3201      	adds	r2, #1
 8014e5c:	701a      	strb	r2, [r3, #0]
 8014e5e:	e790      	b.n	8014d82 <_dtoa_r+0x62a>
 8014e60:	4ba3      	ldr	r3, [pc, #652]	; (80150f0 <_dtoa_r+0x998>)
 8014e62:	2200      	movs	r2, #0
 8014e64:	f7eb fbe0 	bl	8000628 <__aeabi_dmul>
 8014e68:	2200      	movs	r2, #0
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4606      	mov	r6, r0
 8014e6e:	460f      	mov	r7, r1
 8014e70:	f7eb fe42 	bl	8000af8 <__aeabi_dcmpeq>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d09e      	beq.n	8014db6 <_dtoa_r+0x65e>
 8014e78:	e7d0      	b.n	8014e1c <_dtoa_r+0x6c4>
 8014e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e7c:	2a00      	cmp	r2, #0
 8014e7e:	f000 80ca 	beq.w	8015016 <_dtoa_r+0x8be>
 8014e82:	9a07      	ldr	r2, [sp, #28]
 8014e84:	2a01      	cmp	r2, #1
 8014e86:	f300 80ad 	bgt.w	8014fe4 <_dtoa_r+0x88c>
 8014e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e8c:	2a00      	cmp	r2, #0
 8014e8e:	f000 80a5 	beq.w	8014fdc <_dtoa_r+0x884>
 8014e92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014e96:	9e08      	ldr	r6, [sp, #32]
 8014e98:	9d05      	ldr	r5, [sp, #20]
 8014e9a:	9a05      	ldr	r2, [sp, #20]
 8014e9c:	441a      	add	r2, r3
 8014e9e:	9205      	str	r2, [sp, #20]
 8014ea0:	9a06      	ldr	r2, [sp, #24]
 8014ea2:	2101      	movs	r1, #1
 8014ea4:	441a      	add	r2, r3
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	9206      	str	r2, [sp, #24]
 8014eaa:	f000 fc3d 	bl	8015728 <__i2b>
 8014eae:	4607      	mov	r7, r0
 8014eb0:	b165      	cbz	r5, 8014ecc <_dtoa_r+0x774>
 8014eb2:	9b06      	ldr	r3, [sp, #24]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	dd09      	ble.n	8014ecc <_dtoa_r+0x774>
 8014eb8:	42ab      	cmp	r3, r5
 8014eba:	9a05      	ldr	r2, [sp, #20]
 8014ebc:	bfa8      	it	ge
 8014ebe:	462b      	movge	r3, r5
 8014ec0:	1ad2      	subs	r2, r2, r3
 8014ec2:	9205      	str	r2, [sp, #20]
 8014ec4:	9a06      	ldr	r2, [sp, #24]
 8014ec6:	1aed      	subs	r5, r5, r3
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	9306      	str	r3, [sp, #24]
 8014ecc:	9b08      	ldr	r3, [sp, #32]
 8014ece:	b1f3      	cbz	r3, 8014f0e <_dtoa_r+0x7b6>
 8014ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f000 80a3 	beq.w	801501e <_dtoa_r+0x8c6>
 8014ed8:	2e00      	cmp	r6, #0
 8014eda:	dd10      	ble.n	8014efe <_dtoa_r+0x7a6>
 8014edc:	4639      	mov	r1, r7
 8014ede:	4632      	mov	r2, r6
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f000 fce1 	bl	80158a8 <__pow5mult>
 8014ee6:	4652      	mov	r2, sl
 8014ee8:	4601      	mov	r1, r0
 8014eea:	4607      	mov	r7, r0
 8014eec:	4620      	mov	r0, r4
 8014eee:	f000 fc31 	bl	8015754 <__multiply>
 8014ef2:	4651      	mov	r1, sl
 8014ef4:	4680      	mov	r8, r0
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	f000 fb60 	bl	80155bc <_Bfree>
 8014efc:	46c2      	mov	sl, r8
 8014efe:	9b08      	ldr	r3, [sp, #32]
 8014f00:	1b9a      	subs	r2, r3, r6
 8014f02:	d004      	beq.n	8014f0e <_dtoa_r+0x7b6>
 8014f04:	4651      	mov	r1, sl
 8014f06:	4620      	mov	r0, r4
 8014f08:	f000 fcce 	bl	80158a8 <__pow5mult>
 8014f0c:	4682      	mov	sl, r0
 8014f0e:	2101      	movs	r1, #1
 8014f10:	4620      	mov	r0, r4
 8014f12:	f000 fc09 	bl	8015728 <__i2b>
 8014f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	f340 8081 	ble.w	8015022 <_dtoa_r+0x8ca>
 8014f20:	461a      	mov	r2, r3
 8014f22:	4601      	mov	r1, r0
 8014f24:	4620      	mov	r0, r4
 8014f26:	f000 fcbf 	bl	80158a8 <__pow5mult>
 8014f2a:	9b07      	ldr	r3, [sp, #28]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	4606      	mov	r6, r0
 8014f30:	dd7a      	ble.n	8015028 <_dtoa_r+0x8d0>
 8014f32:	f04f 0800 	mov.w	r8, #0
 8014f36:	6933      	ldr	r3, [r6, #16]
 8014f38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014f3c:	6918      	ldr	r0, [r3, #16]
 8014f3e:	f000 fba5 	bl	801568c <__hi0bits>
 8014f42:	f1c0 0020 	rsb	r0, r0, #32
 8014f46:	9b06      	ldr	r3, [sp, #24]
 8014f48:	4418      	add	r0, r3
 8014f4a:	f010 001f 	ands.w	r0, r0, #31
 8014f4e:	f000 8094 	beq.w	801507a <_dtoa_r+0x922>
 8014f52:	f1c0 0320 	rsb	r3, r0, #32
 8014f56:	2b04      	cmp	r3, #4
 8014f58:	f340 8085 	ble.w	8015066 <_dtoa_r+0x90e>
 8014f5c:	9b05      	ldr	r3, [sp, #20]
 8014f5e:	f1c0 001c 	rsb	r0, r0, #28
 8014f62:	4403      	add	r3, r0
 8014f64:	9305      	str	r3, [sp, #20]
 8014f66:	9b06      	ldr	r3, [sp, #24]
 8014f68:	4403      	add	r3, r0
 8014f6a:	4405      	add	r5, r0
 8014f6c:	9306      	str	r3, [sp, #24]
 8014f6e:	9b05      	ldr	r3, [sp, #20]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	dd05      	ble.n	8014f80 <_dtoa_r+0x828>
 8014f74:	4651      	mov	r1, sl
 8014f76:	461a      	mov	r2, r3
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f000 fcef 	bl	801595c <__lshift>
 8014f7e:	4682      	mov	sl, r0
 8014f80:	9b06      	ldr	r3, [sp, #24]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	dd05      	ble.n	8014f92 <_dtoa_r+0x83a>
 8014f86:	4631      	mov	r1, r6
 8014f88:	461a      	mov	r2, r3
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f000 fce6 	bl	801595c <__lshift>
 8014f90:	4606      	mov	r6, r0
 8014f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d072      	beq.n	801507e <_dtoa_r+0x926>
 8014f98:	4631      	mov	r1, r6
 8014f9a:	4650      	mov	r0, sl
 8014f9c:	f000 fd4a 	bl	8015a34 <__mcmp>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	da6c      	bge.n	801507e <_dtoa_r+0x926>
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	4651      	mov	r1, sl
 8014fa8:	220a      	movs	r2, #10
 8014faa:	4620      	mov	r0, r4
 8014fac:	f000 fb28 	bl	8015600 <__multadd>
 8014fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014fb6:	4682      	mov	sl, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	f000 81b0 	beq.w	801531e <_dtoa_r+0xbc6>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	4639      	mov	r1, r7
 8014fc2:	220a      	movs	r2, #10
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f000 fb1b 	bl	8015600 <__multadd>
 8014fca:	9b01      	ldr	r3, [sp, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	4607      	mov	r7, r0
 8014fd0:	f300 8096 	bgt.w	8015100 <_dtoa_r+0x9a8>
 8014fd4:	9b07      	ldr	r3, [sp, #28]
 8014fd6:	2b02      	cmp	r3, #2
 8014fd8:	dc59      	bgt.n	801508e <_dtoa_r+0x936>
 8014fda:	e091      	b.n	8015100 <_dtoa_r+0x9a8>
 8014fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014fde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014fe2:	e758      	b.n	8014e96 <_dtoa_r+0x73e>
 8014fe4:	9b04      	ldr	r3, [sp, #16]
 8014fe6:	1e5e      	subs	r6, r3, #1
 8014fe8:	9b08      	ldr	r3, [sp, #32]
 8014fea:	42b3      	cmp	r3, r6
 8014fec:	bfbf      	itttt	lt
 8014fee:	9b08      	ldrlt	r3, [sp, #32]
 8014ff0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014ff2:	9608      	strlt	r6, [sp, #32]
 8014ff4:	1af3      	sublt	r3, r6, r3
 8014ff6:	bfb4      	ite	lt
 8014ff8:	18d2      	addlt	r2, r2, r3
 8014ffa:	1b9e      	subge	r6, r3, r6
 8014ffc:	9b04      	ldr	r3, [sp, #16]
 8014ffe:	bfbc      	itt	lt
 8015000:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015002:	2600      	movlt	r6, #0
 8015004:	2b00      	cmp	r3, #0
 8015006:	bfb7      	itett	lt
 8015008:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801500c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015010:	1a9d      	sublt	r5, r3, r2
 8015012:	2300      	movlt	r3, #0
 8015014:	e741      	b.n	8014e9a <_dtoa_r+0x742>
 8015016:	9e08      	ldr	r6, [sp, #32]
 8015018:	9d05      	ldr	r5, [sp, #20]
 801501a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801501c:	e748      	b.n	8014eb0 <_dtoa_r+0x758>
 801501e:	9a08      	ldr	r2, [sp, #32]
 8015020:	e770      	b.n	8014f04 <_dtoa_r+0x7ac>
 8015022:	9b07      	ldr	r3, [sp, #28]
 8015024:	2b01      	cmp	r3, #1
 8015026:	dc19      	bgt.n	801505c <_dtoa_r+0x904>
 8015028:	9b02      	ldr	r3, [sp, #8]
 801502a:	b9bb      	cbnz	r3, 801505c <_dtoa_r+0x904>
 801502c:	9b03      	ldr	r3, [sp, #12]
 801502e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015032:	b99b      	cbnz	r3, 801505c <_dtoa_r+0x904>
 8015034:	9b03      	ldr	r3, [sp, #12]
 8015036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801503a:	0d1b      	lsrs	r3, r3, #20
 801503c:	051b      	lsls	r3, r3, #20
 801503e:	b183      	cbz	r3, 8015062 <_dtoa_r+0x90a>
 8015040:	9b05      	ldr	r3, [sp, #20]
 8015042:	3301      	adds	r3, #1
 8015044:	9305      	str	r3, [sp, #20]
 8015046:	9b06      	ldr	r3, [sp, #24]
 8015048:	3301      	adds	r3, #1
 801504a:	9306      	str	r3, [sp, #24]
 801504c:	f04f 0801 	mov.w	r8, #1
 8015050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015052:	2b00      	cmp	r3, #0
 8015054:	f47f af6f 	bne.w	8014f36 <_dtoa_r+0x7de>
 8015058:	2001      	movs	r0, #1
 801505a:	e774      	b.n	8014f46 <_dtoa_r+0x7ee>
 801505c:	f04f 0800 	mov.w	r8, #0
 8015060:	e7f6      	b.n	8015050 <_dtoa_r+0x8f8>
 8015062:	4698      	mov	r8, r3
 8015064:	e7f4      	b.n	8015050 <_dtoa_r+0x8f8>
 8015066:	d082      	beq.n	8014f6e <_dtoa_r+0x816>
 8015068:	9a05      	ldr	r2, [sp, #20]
 801506a:	331c      	adds	r3, #28
 801506c:	441a      	add	r2, r3
 801506e:	9205      	str	r2, [sp, #20]
 8015070:	9a06      	ldr	r2, [sp, #24]
 8015072:	441a      	add	r2, r3
 8015074:	441d      	add	r5, r3
 8015076:	9206      	str	r2, [sp, #24]
 8015078:	e779      	b.n	8014f6e <_dtoa_r+0x816>
 801507a:	4603      	mov	r3, r0
 801507c:	e7f4      	b.n	8015068 <_dtoa_r+0x910>
 801507e:	9b04      	ldr	r3, [sp, #16]
 8015080:	2b00      	cmp	r3, #0
 8015082:	dc37      	bgt.n	80150f4 <_dtoa_r+0x99c>
 8015084:	9b07      	ldr	r3, [sp, #28]
 8015086:	2b02      	cmp	r3, #2
 8015088:	dd34      	ble.n	80150f4 <_dtoa_r+0x99c>
 801508a:	9b04      	ldr	r3, [sp, #16]
 801508c:	9301      	str	r3, [sp, #4]
 801508e:	9b01      	ldr	r3, [sp, #4]
 8015090:	b963      	cbnz	r3, 80150ac <_dtoa_r+0x954>
 8015092:	4631      	mov	r1, r6
 8015094:	2205      	movs	r2, #5
 8015096:	4620      	mov	r0, r4
 8015098:	f000 fab2 	bl	8015600 <__multadd>
 801509c:	4601      	mov	r1, r0
 801509e:	4606      	mov	r6, r0
 80150a0:	4650      	mov	r0, sl
 80150a2:	f000 fcc7 	bl	8015a34 <__mcmp>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	f73f adbb 	bgt.w	8014c22 <_dtoa_r+0x4ca>
 80150ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ae:	9d00      	ldr	r5, [sp, #0]
 80150b0:	ea6f 0b03 	mvn.w	fp, r3
 80150b4:	f04f 0800 	mov.w	r8, #0
 80150b8:	4631      	mov	r1, r6
 80150ba:	4620      	mov	r0, r4
 80150bc:	f000 fa7e 	bl	80155bc <_Bfree>
 80150c0:	2f00      	cmp	r7, #0
 80150c2:	f43f aeab 	beq.w	8014e1c <_dtoa_r+0x6c4>
 80150c6:	f1b8 0f00 	cmp.w	r8, #0
 80150ca:	d005      	beq.n	80150d8 <_dtoa_r+0x980>
 80150cc:	45b8      	cmp	r8, r7
 80150ce:	d003      	beq.n	80150d8 <_dtoa_r+0x980>
 80150d0:	4641      	mov	r1, r8
 80150d2:	4620      	mov	r0, r4
 80150d4:	f000 fa72 	bl	80155bc <_Bfree>
 80150d8:	4639      	mov	r1, r7
 80150da:	4620      	mov	r0, r4
 80150dc:	f000 fa6e 	bl	80155bc <_Bfree>
 80150e0:	e69c      	b.n	8014e1c <_dtoa_r+0x6c4>
 80150e2:	2600      	movs	r6, #0
 80150e4:	4637      	mov	r7, r6
 80150e6:	e7e1      	b.n	80150ac <_dtoa_r+0x954>
 80150e8:	46bb      	mov	fp, r7
 80150ea:	4637      	mov	r7, r6
 80150ec:	e599      	b.n	8014c22 <_dtoa_r+0x4ca>
 80150ee:	bf00      	nop
 80150f0:	40240000 	.word	0x40240000
 80150f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f000 80c8 	beq.w	801528c <_dtoa_r+0xb34>
 80150fc:	9b04      	ldr	r3, [sp, #16]
 80150fe:	9301      	str	r3, [sp, #4]
 8015100:	2d00      	cmp	r5, #0
 8015102:	dd05      	ble.n	8015110 <_dtoa_r+0x9b8>
 8015104:	4639      	mov	r1, r7
 8015106:	462a      	mov	r2, r5
 8015108:	4620      	mov	r0, r4
 801510a:	f000 fc27 	bl	801595c <__lshift>
 801510e:	4607      	mov	r7, r0
 8015110:	f1b8 0f00 	cmp.w	r8, #0
 8015114:	d05b      	beq.n	80151ce <_dtoa_r+0xa76>
 8015116:	6879      	ldr	r1, [r7, #4]
 8015118:	4620      	mov	r0, r4
 801511a:	f000 fa0f 	bl	801553c <_Balloc>
 801511e:	4605      	mov	r5, r0
 8015120:	b928      	cbnz	r0, 801512e <_dtoa_r+0x9d6>
 8015122:	4b83      	ldr	r3, [pc, #524]	; (8015330 <_dtoa_r+0xbd8>)
 8015124:	4602      	mov	r2, r0
 8015126:	f240 21ef 	movw	r1, #751	; 0x2ef
 801512a:	f7ff bb2e 	b.w	801478a <_dtoa_r+0x32>
 801512e:	693a      	ldr	r2, [r7, #16]
 8015130:	3202      	adds	r2, #2
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	f107 010c 	add.w	r1, r7, #12
 8015138:	300c      	adds	r0, #12
 801513a:	f7ff fa74 	bl	8014626 <memcpy>
 801513e:	2201      	movs	r2, #1
 8015140:	4629      	mov	r1, r5
 8015142:	4620      	mov	r0, r4
 8015144:	f000 fc0a 	bl	801595c <__lshift>
 8015148:	9b00      	ldr	r3, [sp, #0]
 801514a:	3301      	adds	r3, #1
 801514c:	9304      	str	r3, [sp, #16]
 801514e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015152:	4413      	add	r3, r2
 8015154:	9308      	str	r3, [sp, #32]
 8015156:	9b02      	ldr	r3, [sp, #8]
 8015158:	f003 0301 	and.w	r3, r3, #1
 801515c:	46b8      	mov	r8, r7
 801515e:	9306      	str	r3, [sp, #24]
 8015160:	4607      	mov	r7, r0
 8015162:	9b04      	ldr	r3, [sp, #16]
 8015164:	4631      	mov	r1, r6
 8015166:	3b01      	subs	r3, #1
 8015168:	4650      	mov	r0, sl
 801516a:	9301      	str	r3, [sp, #4]
 801516c:	f7ff fa69 	bl	8014642 <quorem>
 8015170:	4641      	mov	r1, r8
 8015172:	9002      	str	r0, [sp, #8]
 8015174:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015178:	4650      	mov	r0, sl
 801517a:	f000 fc5b 	bl	8015a34 <__mcmp>
 801517e:	463a      	mov	r2, r7
 8015180:	9005      	str	r0, [sp, #20]
 8015182:	4631      	mov	r1, r6
 8015184:	4620      	mov	r0, r4
 8015186:	f000 fc71 	bl	8015a6c <__mdiff>
 801518a:	68c2      	ldr	r2, [r0, #12]
 801518c:	4605      	mov	r5, r0
 801518e:	bb02      	cbnz	r2, 80151d2 <_dtoa_r+0xa7a>
 8015190:	4601      	mov	r1, r0
 8015192:	4650      	mov	r0, sl
 8015194:	f000 fc4e 	bl	8015a34 <__mcmp>
 8015198:	4602      	mov	r2, r0
 801519a:	4629      	mov	r1, r5
 801519c:	4620      	mov	r0, r4
 801519e:	9209      	str	r2, [sp, #36]	; 0x24
 80151a0:	f000 fa0c 	bl	80155bc <_Bfree>
 80151a4:	9b07      	ldr	r3, [sp, #28]
 80151a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151a8:	9d04      	ldr	r5, [sp, #16]
 80151aa:	ea43 0102 	orr.w	r1, r3, r2
 80151ae:	9b06      	ldr	r3, [sp, #24]
 80151b0:	4319      	orrs	r1, r3
 80151b2:	d110      	bne.n	80151d6 <_dtoa_r+0xa7e>
 80151b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80151b8:	d029      	beq.n	801520e <_dtoa_r+0xab6>
 80151ba:	9b05      	ldr	r3, [sp, #20]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	dd02      	ble.n	80151c6 <_dtoa_r+0xa6e>
 80151c0:	9b02      	ldr	r3, [sp, #8]
 80151c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80151c6:	9b01      	ldr	r3, [sp, #4]
 80151c8:	f883 9000 	strb.w	r9, [r3]
 80151cc:	e774      	b.n	80150b8 <_dtoa_r+0x960>
 80151ce:	4638      	mov	r0, r7
 80151d0:	e7ba      	b.n	8015148 <_dtoa_r+0x9f0>
 80151d2:	2201      	movs	r2, #1
 80151d4:	e7e1      	b.n	801519a <_dtoa_r+0xa42>
 80151d6:	9b05      	ldr	r3, [sp, #20]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	db04      	blt.n	80151e6 <_dtoa_r+0xa8e>
 80151dc:	9907      	ldr	r1, [sp, #28]
 80151de:	430b      	orrs	r3, r1
 80151e0:	9906      	ldr	r1, [sp, #24]
 80151e2:	430b      	orrs	r3, r1
 80151e4:	d120      	bne.n	8015228 <_dtoa_r+0xad0>
 80151e6:	2a00      	cmp	r2, #0
 80151e8:	dded      	ble.n	80151c6 <_dtoa_r+0xa6e>
 80151ea:	4651      	mov	r1, sl
 80151ec:	2201      	movs	r2, #1
 80151ee:	4620      	mov	r0, r4
 80151f0:	f000 fbb4 	bl	801595c <__lshift>
 80151f4:	4631      	mov	r1, r6
 80151f6:	4682      	mov	sl, r0
 80151f8:	f000 fc1c 	bl	8015a34 <__mcmp>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	dc03      	bgt.n	8015208 <_dtoa_r+0xab0>
 8015200:	d1e1      	bne.n	80151c6 <_dtoa_r+0xa6e>
 8015202:	f019 0f01 	tst.w	r9, #1
 8015206:	d0de      	beq.n	80151c6 <_dtoa_r+0xa6e>
 8015208:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801520c:	d1d8      	bne.n	80151c0 <_dtoa_r+0xa68>
 801520e:	9a01      	ldr	r2, [sp, #4]
 8015210:	2339      	movs	r3, #57	; 0x39
 8015212:	7013      	strb	r3, [r2, #0]
 8015214:	462b      	mov	r3, r5
 8015216:	461d      	mov	r5, r3
 8015218:	3b01      	subs	r3, #1
 801521a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801521e:	2a39      	cmp	r2, #57	; 0x39
 8015220:	d06c      	beq.n	80152fc <_dtoa_r+0xba4>
 8015222:	3201      	adds	r2, #1
 8015224:	701a      	strb	r2, [r3, #0]
 8015226:	e747      	b.n	80150b8 <_dtoa_r+0x960>
 8015228:	2a00      	cmp	r2, #0
 801522a:	dd07      	ble.n	801523c <_dtoa_r+0xae4>
 801522c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015230:	d0ed      	beq.n	801520e <_dtoa_r+0xab6>
 8015232:	9a01      	ldr	r2, [sp, #4]
 8015234:	f109 0301 	add.w	r3, r9, #1
 8015238:	7013      	strb	r3, [r2, #0]
 801523a:	e73d      	b.n	80150b8 <_dtoa_r+0x960>
 801523c:	9b04      	ldr	r3, [sp, #16]
 801523e:	9a08      	ldr	r2, [sp, #32]
 8015240:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015244:	4293      	cmp	r3, r2
 8015246:	d043      	beq.n	80152d0 <_dtoa_r+0xb78>
 8015248:	4651      	mov	r1, sl
 801524a:	2300      	movs	r3, #0
 801524c:	220a      	movs	r2, #10
 801524e:	4620      	mov	r0, r4
 8015250:	f000 f9d6 	bl	8015600 <__multadd>
 8015254:	45b8      	cmp	r8, r7
 8015256:	4682      	mov	sl, r0
 8015258:	f04f 0300 	mov.w	r3, #0
 801525c:	f04f 020a 	mov.w	r2, #10
 8015260:	4641      	mov	r1, r8
 8015262:	4620      	mov	r0, r4
 8015264:	d107      	bne.n	8015276 <_dtoa_r+0xb1e>
 8015266:	f000 f9cb 	bl	8015600 <__multadd>
 801526a:	4680      	mov	r8, r0
 801526c:	4607      	mov	r7, r0
 801526e:	9b04      	ldr	r3, [sp, #16]
 8015270:	3301      	adds	r3, #1
 8015272:	9304      	str	r3, [sp, #16]
 8015274:	e775      	b.n	8015162 <_dtoa_r+0xa0a>
 8015276:	f000 f9c3 	bl	8015600 <__multadd>
 801527a:	4639      	mov	r1, r7
 801527c:	4680      	mov	r8, r0
 801527e:	2300      	movs	r3, #0
 8015280:	220a      	movs	r2, #10
 8015282:	4620      	mov	r0, r4
 8015284:	f000 f9bc 	bl	8015600 <__multadd>
 8015288:	4607      	mov	r7, r0
 801528a:	e7f0      	b.n	801526e <_dtoa_r+0xb16>
 801528c:	9b04      	ldr	r3, [sp, #16]
 801528e:	9301      	str	r3, [sp, #4]
 8015290:	9d00      	ldr	r5, [sp, #0]
 8015292:	4631      	mov	r1, r6
 8015294:	4650      	mov	r0, sl
 8015296:	f7ff f9d4 	bl	8014642 <quorem>
 801529a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801529e:	9b00      	ldr	r3, [sp, #0]
 80152a0:	f805 9b01 	strb.w	r9, [r5], #1
 80152a4:	1aea      	subs	r2, r5, r3
 80152a6:	9b01      	ldr	r3, [sp, #4]
 80152a8:	4293      	cmp	r3, r2
 80152aa:	dd07      	ble.n	80152bc <_dtoa_r+0xb64>
 80152ac:	4651      	mov	r1, sl
 80152ae:	2300      	movs	r3, #0
 80152b0:	220a      	movs	r2, #10
 80152b2:	4620      	mov	r0, r4
 80152b4:	f000 f9a4 	bl	8015600 <__multadd>
 80152b8:	4682      	mov	sl, r0
 80152ba:	e7ea      	b.n	8015292 <_dtoa_r+0xb3a>
 80152bc:	9b01      	ldr	r3, [sp, #4]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	bfc8      	it	gt
 80152c2:	461d      	movgt	r5, r3
 80152c4:	9b00      	ldr	r3, [sp, #0]
 80152c6:	bfd8      	it	le
 80152c8:	2501      	movle	r5, #1
 80152ca:	441d      	add	r5, r3
 80152cc:	f04f 0800 	mov.w	r8, #0
 80152d0:	4651      	mov	r1, sl
 80152d2:	2201      	movs	r2, #1
 80152d4:	4620      	mov	r0, r4
 80152d6:	f000 fb41 	bl	801595c <__lshift>
 80152da:	4631      	mov	r1, r6
 80152dc:	4682      	mov	sl, r0
 80152de:	f000 fba9 	bl	8015a34 <__mcmp>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	dc96      	bgt.n	8015214 <_dtoa_r+0xabc>
 80152e6:	d102      	bne.n	80152ee <_dtoa_r+0xb96>
 80152e8:	f019 0f01 	tst.w	r9, #1
 80152ec:	d192      	bne.n	8015214 <_dtoa_r+0xabc>
 80152ee:	462b      	mov	r3, r5
 80152f0:	461d      	mov	r5, r3
 80152f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80152f6:	2a30      	cmp	r2, #48	; 0x30
 80152f8:	d0fa      	beq.n	80152f0 <_dtoa_r+0xb98>
 80152fa:	e6dd      	b.n	80150b8 <_dtoa_r+0x960>
 80152fc:	9a00      	ldr	r2, [sp, #0]
 80152fe:	429a      	cmp	r2, r3
 8015300:	d189      	bne.n	8015216 <_dtoa_r+0xabe>
 8015302:	f10b 0b01 	add.w	fp, fp, #1
 8015306:	2331      	movs	r3, #49	; 0x31
 8015308:	e796      	b.n	8015238 <_dtoa_r+0xae0>
 801530a:	4b0a      	ldr	r3, [pc, #40]	; (8015334 <_dtoa_r+0xbdc>)
 801530c:	f7ff ba99 	b.w	8014842 <_dtoa_r+0xea>
 8015310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015312:	2b00      	cmp	r3, #0
 8015314:	f47f aa6d 	bne.w	80147f2 <_dtoa_r+0x9a>
 8015318:	4b07      	ldr	r3, [pc, #28]	; (8015338 <_dtoa_r+0xbe0>)
 801531a:	f7ff ba92 	b.w	8014842 <_dtoa_r+0xea>
 801531e:	9b01      	ldr	r3, [sp, #4]
 8015320:	2b00      	cmp	r3, #0
 8015322:	dcb5      	bgt.n	8015290 <_dtoa_r+0xb38>
 8015324:	9b07      	ldr	r3, [sp, #28]
 8015326:	2b02      	cmp	r3, #2
 8015328:	f73f aeb1 	bgt.w	801508e <_dtoa_r+0x936>
 801532c:	e7b0      	b.n	8015290 <_dtoa_r+0xb38>
 801532e:	bf00      	nop
 8015330:	08016df0 	.word	0x08016df0
 8015334:	08016d50 	.word	0x08016d50
 8015338:	08016d74 	.word	0x08016d74

0801533c <_free_r>:
 801533c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801533e:	2900      	cmp	r1, #0
 8015340:	d044      	beq.n	80153cc <_free_r+0x90>
 8015342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015346:	9001      	str	r0, [sp, #4]
 8015348:	2b00      	cmp	r3, #0
 801534a:	f1a1 0404 	sub.w	r4, r1, #4
 801534e:	bfb8      	it	lt
 8015350:	18e4      	addlt	r4, r4, r3
 8015352:	f000 f8e7 	bl	8015524 <__malloc_lock>
 8015356:	4a1e      	ldr	r2, [pc, #120]	; (80153d0 <_free_r+0x94>)
 8015358:	9801      	ldr	r0, [sp, #4]
 801535a:	6813      	ldr	r3, [r2, #0]
 801535c:	b933      	cbnz	r3, 801536c <_free_r+0x30>
 801535e:	6063      	str	r3, [r4, #4]
 8015360:	6014      	str	r4, [r2, #0]
 8015362:	b003      	add	sp, #12
 8015364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015368:	f000 b8e2 	b.w	8015530 <__malloc_unlock>
 801536c:	42a3      	cmp	r3, r4
 801536e:	d908      	bls.n	8015382 <_free_r+0x46>
 8015370:	6825      	ldr	r5, [r4, #0]
 8015372:	1961      	adds	r1, r4, r5
 8015374:	428b      	cmp	r3, r1
 8015376:	bf01      	itttt	eq
 8015378:	6819      	ldreq	r1, [r3, #0]
 801537a:	685b      	ldreq	r3, [r3, #4]
 801537c:	1949      	addeq	r1, r1, r5
 801537e:	6021      	streq	r1, [r4, #0]
 8015380:	e7ed      	b.n	801535e <_free_r+0x22>
 8015382:	461a      	mov	r2, r3
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	b10b      	cbz	r3, 801538c <_free_r+0x50>
 8015388:	42a3      	cmp	r3, r4
 801538a:	d9fa      	bls.n	8015382 <_free_r+0x46>
 801538c:	6811      	ldr	r1, [r2, #0]
 801538e:	1855      	adds	r5, r2, r1
 8015390:	42a5      	cmp	r5, r4
 8015392:	d10b      	bne.n	80153ac <_free_r+0x70>
 8015394:	6824      	ldr	r4, [r4, #0]
 8015396:	4421      	add	r1, r4
 8015398:	1854      	adds	r4, r2, r1
 801539a:	42a3      	cmp	r3, r4
 801539c:	6011      	str	r1, [r2, #0]
 801539e:	d1e0      	bne.n	8015362 <_free_r+0x26>
 80153a0:	681c      	ldr	r4, [r3, #0]
 80153a2:	685b      	ldr	r3, [r3, #4]
 80153a4:	6053      	str	r3, [r2, #4]
 80153a6:	440c      	add	r4, r1
 80153a8:	6014      	str	r4, [r2, #0]
 80153aa:	e7da      	b.n	8015362 <_free_r+0x26>
 80153ac:	d902      	bls.n	80153b4 <_free_r+0x78>
 80153ae:	230c      	movs	r3, #12
 80153b0:	6003      	str	r3, [r0, #0]
 80153b2:	e7d6      	b.n	8015362 <_free_r+0x26>
 80153b4:	6825      	ldr	r5, [r4, #0]
 80153b6:	1961      	adds	r1, r4, r5
 80153b8:	428b      	cmp	r3, r1
 80153ba:	bf04      	itt	eq
 80153bc:	6819      	ldreq	r1, [r3, #0]
 80153be:	685b      	ldreq	r3, [r3, #4]
 80153c0:	6063      	str	r3, [r4, #4]
 80153c2:	bf04      	itt	eq
 80153c4:	1949      	addeq	r1, r1, r5
 80153c6:	6021      	streq	r1, [r4, #0]
 80153c8:	6054      	str	r4, [r2, #4]
 80153ca:	e7ca      	b.n	8015362 <_free_r+0x26>
 80153cc:	b003      	add	sp, #12
 80153ce:	bd30      	pop	{r4, r5, pc}
 80153d0:	2000996c 	.word	0x2000996c

080153d4 <malloc>:
 80153d4:	4b02      	ldr	r3, [pc, #8]	; (80153e0 <malloc+0xc>)
 80153d6:	4601      	mov	r1, r0
 80153d8:	6818      	ldr	r0, [r3, #0]
 80153da:	f000 b823 	b.w	8015424 <_malloc_r>
 80153de:	bf00      	nop
 80153e0:	20000410 	.word	0x20000410

080153e4 <sbrk_aligned>:
 80153e4:	b570      	push	{r4, r5, r6, lr}
 80153e6:	4e0e      	ldr	r6, [pc, #56]	; (8015420 <sbrk_aligned+0x3c>)
 80153e8:	460c      	mov	r4, r1
 80153ea:	6831      	ldr	r1, [r6, #0]
 80153ec:	4605      	mov	r5, r0
 80153ee:	b911      	cbnz	r1, 80153f6 <sbrk_aligned+0x12>
 80153f0:	f000 fe26 	bl	8016040 <_sbrk_r>
 80153f4:	6030      	str	r0, [r6, #0]
 80153f6:	4621      	mov	r1, r4
 80153f8:	4628      	mov	r0, r5
 80153fa:	f000 fe21 	bl	8016040 <_sbrk_r>
 80153fe:	1c43      	adds	r3, r0, #1
 8015400:	d00a      	beq.n	8015418 <sbrk_aligned+0x34>
 8015402:	1cc4      	adds	r4, r0, #3
 8015404:	f024 0403 	bic.w	r4, r4, #3
 8015408:	42a0      	cmp	r0, r4
 801540a:	d007      	beq.n	801541c <sbrk_aligned+0x38>
 801540c:	1a21      	subs	r1, r4, r0
 801540e:	4628      	mov	r0, r5
 8015410:	f000 fe16 	bl	8016040 <_sbrk_r>
 8015414:	3001      	adds	r0, #1
 8015416:	d101      	bne.n	801541c <sbrk_aligned+0x38>
 8015418:	f04f 34ff 	mov.w	r4, #4294967295
 801541c:	4620      	mov	r0, r4
 801541e:	bd70      	pop	{r4, r5, r6, pc}
 8015420:	20009970 	.word	0x20009970

08015424 <_malloc_r>:
 8015424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015428:	1ccd      	adds	r5, r1, #3
 801542a:	f025 0503 	bic.w	r5, r5, #3
 801542e:	3508      	adds	r5, #8
 8015430:	2d0c      	cmp	r5, #12
 8015432:	bf38      	it	cc
 8015434:	250c      	movcc	r5, #12
 8015436:	2d00      	cmp	r5, #0
 8015438:	4607      	mov	r7, r0
 801543a:	db01      	blt.n	8015440 <_malloc_r+0x1c>
 801543c:	42a9      	cmp	r1, r5
 801543e:	d905      	bls.n	801544c <_malloc_r+0x28>
 8015440:	230c      	movs	r3, #12
 8015442:	603b      	str	r3, [r7, #0]
 8015444:	2600      	movs	r6, #0
 8015446:	4630      	mov	r0, r6
 8015448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801544c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015520 <_malloc_r+0xfc>
 8015450:	f000 f868 	bl	8015524 <__malloc_lock>
 8015454:	f8d8 3000 	ldr.w	r3, [r8]
 8015458:	461c      	mov	r4, r3
 801545a:	bb5c      	cbnz	r4, 80154b4 <_malloc_r+0x90>
 801545c:	4629      	mov	r1, r5
 801545e:	4638      	mov	r0, r7
 8015460:	f7ff ffc0 	bl	80153e4 <sbrk_aligned>
 8015464:	1c43      	adds	r3, r0, #1
 8015466:	4604      	mov	r4, r0
 8015468:	d155      	bne.n	8015516 <_malloc_r+0xf2>
 801546a:	f8d8 4000 	ldr.w	r4, [r8]
 801546e:	4626      	mov	r6, r4
 8015470:	2e00      	cmp	r6, #0
 8015472:	d145      	bne.n	8015500 <_malloc_r+0xdc>
 8015474:	2c00      	cmp	r4, #0
 8015476:	d048      	beq.n	801550a <_malloc_r+0xe6>
 8015478:	6823      	ldr	r3, [r4, #0]
 801547a:	4631      	mov	r1, r6
 801547c:	4638      	mov	r0, r7
 801547e:	eb04 0903 	add.w	r9, r4, r3
 8015482:	f000 fddd 	bl	8016040 <_sbrk_r>
 8015486:	4581      	cmp	r9, r0
 8015488:	d13f      	bne.n	801550a <_malloc_r+0xe6>
 801548a:	6821      	ldr	r1, [r4, #0]
 801548c:	1a6d      	subs	r5, r5, r1
 801548e:	4629      	mov	r1, r5
 8015490:	4638      	mov	r0, r7
 8015492:	f7ff ffa7 	bl	80153e4 <sbrk_aligned>
 8015496:	3001      	adds	r0, #1
 8015498:	d037      	beq.n	801550a <_malloc_r+0xe6>
 801549a:	6823      	ldr	r3, [r4, #0]
 801549c:	442b      	add	r3, r5
 801549e:	6023      	str	r3, [r4, #0]
 80154a0:	f8d8 3000 	ldr.w	r3, [r8]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d038      	beq.n	801551a <_malloc_r+0xf6>
 80154a8:	685a      	ldr	r2, [r3, #4]
 80154aa:	42a2      	cmp	r2, r4
 80154ac:	d12b      	bne.n	8015506 <_malloc_r+0xe2>
 80154ae:	2200      	movs	r2, #0
 80154b0:	605a      	str	r2, [r3, #4]
 80154b2:	e00f      	b.n	80154d4 <_malloc_r+0xb0>
 80154b4:	6822      	ldr	r2, [r4, #0]
 80154b6:	1b52      	subs	r2, r2, r5
 80154b8:	d41f      	bmi.n	80154fa <_malloc_r+0xd6>
 80154ba:	2a0b      	cmp	r2, #11
 80154bc:	d917      	bls.n	80154ee <_malloc_r+0xca>
 80154be:	1961      	adds	r1, r4, r5
 80154c0:	42a3      	cmp	r3, r4
 80154c2:	6025      	str	r5, [r4, #0]
 80154c4:	bf18      	it	ne
 80154c6:	6059      	strne	r1, [r3, #4]
 80154c8:	6863      	ldr	r3, [r4, #4]
 80154ca:	bf08      	it	eq
 80154cc:	f8c8 1000 	streq.w	r1, [r8]
 80154d0:	5162      	str	r2, [r4, r5]
 80154d2:	604b      	str	r3, [r1, #4]
 80154d4:	4638      	mov	r0, r7
 80154d6:	f104 060b 	add.w	r6, r4, #11
 80154da:	f000 f829 	bl	8015530 <__malloc_unlock>
 80154de:	f026 0607 	bic.w	r6, r6, #7
 80154e2:	1d23      	adds	r3, r4, #4
 80154e4:	1af2      	subs	r2, r6, r3
 80154e6:	d0ae      	beq.n	8015446 <_malloc_r+0x22>
 80154e8:	1b9b      	subs	r3, r3, r6
 80154ea:	50a3      	str	r3, [r4, r2]
 80154ec:	e7ab      	b.n	8015446 <_malloc_r+0x22>
 80154ee:	42a3      	cmp	r3, r4
 80154f0:	6862      	ldr	r2, [r4, #4]
 80154f2:	d1dd      	bne.n	80154b0 <_malloc_r+0x8c>
 80154f4:	f8c8 2000 	str.w	r2, [r8]
 80154f8:	e7ec      	b.n	80154d4 <_malloc_r+0xb0>
 80154fa:	4623      	mov	r3, r4
 80154fc:	6864      	ldr	r4, [r4, #4]
 80154fe:	e7ac      	b.n	801545a <_malloc_r+0x36>
 8015500:	4634      	mov	r4, r6
 8015502:	6876      	ldr	r6, [r6, #4]
 8015504:	e7b4      	b.n	8015470 <_malloc_r+0x4c>
 8015506:	4613      	mov	r3, r2
 8015508:	e7cc      	b.n	80154a4 <_malloc_r+0x80>
 801550a:	230c      	movs	r3, #12
 801550c:	603b      	str	r3, [r7, #0]
 801550e:	4638      	mov	r0, r7
 8015510:	f000 f80e 	bl	8015530 <__malloc_unlock>
 8015514:	e797      	b.n	8015446 <_malloc_r+0x22>
 8015516:	6025      	str	r5, [r4, #0]
 8015518:	e7dc      	b.n	80154d4 <_malloc_r+0xb0>
 801551a:	605b      	str	r3, [r3, #4]
 801551c:	deff      	udf	#255	; 0xff
 801551e:	bf00      	nop
 8015520:	2000996c 	.word	0x2000996c

08015524 <__malloc_lock>:
 8015524:	4801      	ldr	r0, [pc, #4]	; (801552c <__malloc_lock+0x8>)
 8015526:	f7ff b87c 	b.w	8014622 <__retarget_lock_acquire_recursive>
 801552a:	bf00      	nop
 801552c:	20009968 	.word	0x20009968

08015530 <__malloc_unlock>:
 8015530:	4801      	ldr	r0, [pc, #4]	; (8015538 <__malloc_unlock+0x8>)
 8015532:	f7ff b877 	b.w	8014624 <__retarget_lock_release_recursive>
 8015536:	bf00      	nop
 8015538:	20009968 	.word	0x20009968

0801553c <_Balloc>:
 801553c:	b570      	push	{r4, r5, r6, lr}
 801553e:	69c6      	ldr	r6, [r0, #28]
 8015540:	4604      	mov	r4, r0
 8015542:	460d      	mov	r5, r1
 8015544:	b976      	cbnz	r6, 8015564 <_Balloc+0x28>
 8015546:	2010      	movs	r0, #16
 8015548:	f7ff ff44 	bl	80153d4 <malloc>
 801554c:	4602      	mov	r2, r0
 801554e:	61e0      	str	r0, [r4, #28]
 8015550:	b920      	cbnz	r0, 801555c <_Balloc+0x20>
 8015552:	4b18      	ldr	r3, [pc, #96]	; (80155b4 <_Balloc+0x78>)
 8015554:	4818      	ldr	r0, [pc, #96]	; (80155b8 <_Balloc+0x7c>)
 8015556:	216b      	movs	r1, #107	; 0x6b
 8015558:	f000 fd82 	bl	8016060 <__assert_func>
 801555c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015560:	6006      	str	r6, [r0, #0]
 8015562:	60c6      	str	r6, [r0, #12]
 8015564:	69e6      	ldr	r6, [r4, #28]
 8015566:	68f3      	ldr	r3, [r6, #12]
 8015568:	b183      	cbz	r3, 801558c <_Balloc+0x50>
 801556a:	69e3      	ldr	r3, [r4, #28]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015572:	b9b8      	cbnz	r0, 80155a4 <_Balloc+0x68>
 8015574:	2101      	movs	r1, #1
 8015576:	fa01 f605 	lsl.w	r6, r1, r5
 801557a:	1d72      	adds	r2, r6, #5
 801557c:	0092      	lsls	r2, r2, #2
 801557e:	4620      	mov	r0, r4
 8015580:	f000 fd8c 	bl	801609c <_calloc_r>
 8015584:	b160      	cbz	r0, 80155a0 <_Balloc+0x64>
 8015586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801558a:	e00e      	b.n	80155aa <_Balloc+0x6e>
 801558c:	2221      	movs	r2, #33	; 0x21
 801558e:	2104      	movs	r1, #4
 8015590:	4620      	mov	r0, r4
 8015592:	f000 fd83 	bl	801609c <_calloc_r>
 8015596:	69e3      	ldr	r3, [r4, #28]
 8015598:	60f0      	str	r0, [r6, #12]
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d1e4      	bne.n	801556a <_Balloc+0x2e>
 80155a0:	2000      	movs	r0, #0
 80155a2:	bd70      	pop	{r4, r5, r6, pc}
 80155a4:	6802      	ldr	r2, [r0, #0]
 80155a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155aa:	2300      	movs	r3, #0
 80155ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155b0:	e7f7      	b.n	80155a2 <_Balloc+0x66>
 80155b2:	bf00      	nop
 80155b4:	08016d81 	.word	0x08016d81
 80155b8:	08016e01 	.word	0x08016e01

080155bc <_Bfree>:
 80155bc:	b570      	push	{r4, r5, r6, lr}
 80155be:	69c6      	ldr	r6, [r0, #28]
 80155c0:	4605      	mov	r5, r0
 80155c2:	460c      	mov	r4, r1
 80155c4:	b976      	cbnz	r6, 80155e4 <_Bfree+0x28>
 80155c6:	2010      	movs	r0, #16
 80155c8:	f7ff ff04 	bl	80153d4 <malloc>
 80155cc:	4602      	mov	r2, r0
 80155ce:	61e8      	str	r0, [r5, #28]
 80155d0:	b920      	cbnz	r0, 80155dc <_Bfree+0x20>
 80155d2:	4b09      	ldr	r3, [pc, #36]	; (80155f8 <_Bfree+0x3c>)
 80155d4:	4809      	ldr	r0, [pc, #36]	; (80155fc <_Bfree+0x40>)
 80155d6:	218f      	movs	r1, #143	; 0x8f
 80155d8:	f000 fd42 	bl	8016060 <__assert_func>
 80155dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155e0:	6006      	str	r6, [r0, #0]
 80155e2:	60c6      	str	r6, [r0, #12]
 80155e4:	b13c      	cbz	r4, 80155f6 <_Bfree+0x3a>
 80155e6:	69eb      	ldr	r3, [r5, #28]
 80155e8:	6862      	ldr	r2, [r4, #4]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80155f0:	6021      	str	r1, [r4, #0]
 80155f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80155f6:	bd70      	pop	{r4, r5, r6, pc}
 80155f8:	08016d81 	.word	0x08016d81
 80155fc:	08016e01 	.word	0x08016e01

08015600 <__multadd>:
 8015600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015604:	690d      	ldr	r5, [r1, #16]
 8015606:	4607      	mov	r7, r0
 8015608:	460c      	mov	r4, r1
 801560a:	461e      	mov	r6, r3
 801560c:	f101 0c14 	add.w	ip, r1, #20
 8015610:	2000      	movs	r0, #0
 8015612:	f8dc 3000 	ldr.w	r3, [ip]
 8015616:	b299      	uxth	r1, r3
 8015618:	fb02 6101 	mla	r1, r2, r1, r6
 801561c:	0c1e      	lsrs	r6, r3, #16
 801561e:	0c0b      	lsrs	r3, r1, #16
 8015620:	fb02 3306 	mla	r3, r2, r6, r3
 8015624:	b289      	uxth	r1, r1
 8015626:	3001      	adds	r0, #1
 8015628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801562c:	4285      	cmp	r5, r0
 801562e:	f84c 1b04 	str.w	r1, [ip], #4
 8015632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015636:	dcec      	bgt.n	8015612 <__multadd+0x12>
 8015638:	b30e      	cbz	r6, 801567e <__multadd+0x7e>
 801563a:	68a3      	ldr	r3, [r4, #8]
 801563c:	42ab      	cmp	r3, r5
 801563e:	dc19      	bgt.n	8015674 <__multadd+0x74>
 8015640:	6861      	ldr	r1, [r4, #4]
 8015642:	4638      	mov	r0, r7
 8015644:	3101      	adds	r1, #1
 8015646:	f7ff ff79 	bl	801553c <_Balloc>
 801564a:	4680      	mov	r8, r0
 801564c:	b928      	cbnz	r0, 801565a <__multadd+0x5a>
 801564e:	4602      	mov	r2, r0
 8015650:	4b0c      	ldr	r3, [pc, #48]	; (8015684 <__multadd+0x84>)
 8015652:	480d      	ldr	r0, [pc, #52]	; (8015688 <__multadd+0x88>)
 8015654:	21ba      	movs	r1, #186	; 0xba
 8015656:	f000 fd03 	bl	8016060 <__assert_func>
 801565a:	6922      	ldr	r2, [r4, #16]
 801565c:	3202      	adds	r2, #2
 801565e:	f104 010c 	add.w	r1, r4, #12
 8015662:	0092      	lsls	r2, r2, #2
 8015664:	300c      	adds	r0, #12
 8015666:	f7fe ffde 	bl	8014626 <memcpy>
 801566a:	4621      	mov	r1, r4
 801566c:	4638      	mov	r0, r7
 801566e:	f7ff ffa5 	bl	80155bc <_Bfree>
 8015672:	4644      	mov	r4, r8
 8015674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015678:	3501      	adds	r5, #1
 801567a:	615e      	str	r6, [r3, #20]
 801567c:	6125      	str	r5, [r4, #16]
 801567e:	4620      	mov	r0, r4
 8015680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015684:	08016df0 	.word	0x08016df0
 8015688:	08016e01 	.word	0x08016e01

0801568c <__hi0bits>:
 801568c:	0c03      	lsrs	r3, r0, #16
 801568e:	041b      	lsls	r3, r3, #16
 8015690:	b9d3      	cbnz	r3, 80156c8 <__hi0bits+0x3c>
 8015692:	0400      	lsls	r0, r0, #16
 8015694:	2310      	movs	r3, #16
 8015696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801569a:	bf04      	itt	eq
 801569c:	0200      	lsleq	r0, r0, #8
 801569e:	3308      	addeq	r3, #8
 80156a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80156a4:	bf04      	itt	eq
 80156a6:	0100      	lsleq	r0, r0, #4
 80156a8:	3304      	addeq	r3, #4
 80156aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80156ae:	bf04      	itt	eq
 80156b0:	0080      	lsleq	r0, r0, #2
 80156b2:	3302      	addeq	r3, #2
 80156b4:	2800      	cmp	r0, #0
 80156b6:	db05      	blt.n	80156c4 <__hi0bits+0x38>
 80156b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80156bc:	f103 0301 	add.w	r3, r3, #1
 80156c0:	bf08      	it	eq
 80156c2:	2320      	moveq	r3, #32
 80156c4:	4618      	mov	r0, r3
 80156c6:	4770      	bx	lr
 80156c8:	2300      	movs	r3, #0
 80156ca:	e7e4      	b.n	8015696 <__hi0bits+0xa>

080156cc <__lo0bits>:
 80156cc:	6803      	ldr	r3, [r0, #0]
 80156ce:	f013 0207 	ands.w	r2, r3, #7
 80156d2:	d00c      	beq.n	80156ee <__lo0bits+0x22>
 80156d4:	07d9      	lsls	r1, r3, #31
 80156d6:	d422      	bmi.n	801571e <__lo0bits+0x52>
 80156d8:	079a      	lsls	r2, r3, #30
 80156da:	bf49      	itett	mi
 80156dc:	085b      	lsrmi	r3, r3, #1
 80156de:	089b      	lsrpl	r3, r3, #2
 80156e0:	6003      	strmi	r3, [r0, #0]
 80156e2:	2201      	movmi	r2, #1
 80156e4:	bf5c      	itt	pl
 80156e6:	6003      	strpl	r3, [r0, #0]
 80156e8:	2202      	movpl	r2, #2
 80156ea:	4610      	mov	r0, r2
 80156ec:	4770      	bx	lr
 80156ee:	b299      	uxth	r1, r3
 80156f0:	b909      	cbnz	r1, 80156f6 <__lo0bits+0x2a>
 80156f2:	0c1b      	lsrs	r3, r3, #16
 80156f4:	2210      	movs	r2, #16
 80156f6:	b2d9      	uxtb	r1, r3
 80156f8:	b909      	cbnz	r1, 80156fe <__lo0bits+0x32>
 80156fa:	3208      	adds	r2, #8
 80156fc:	0a1b      	lsrs	r3, r3, #8
 80156fe:	0719      	lsls	r1, r3, #28
 8015700:	bf04      	itt	eq
 8015702:	091b      	lsreq	r3, r3, #4
 8015704:	3204      	addeq	r2, #4
 8015706:	0799      	lsls	r1, r3, #30
 8015708:	bf04      	itt	eq
 801570a:	089b      	lsreq	r3, r3, #2
 801570c:	3202      	addeq	r2, #2
 801570e:	07d9      	lsls	r1, r3, #31
 8015710:	d403      	bmi.n	801571a <__lo0bits+0x4e>
 8015712:	085b      	lsrs	r3, r3, #1
 8015714:	f102 0201 	add.w	r2, r2, #1
 8015718:	d003      	beq.n	8015722 <__lo0bits+0x56>
 801571a:	6003      	str	r3, [r0, #0]
 801571c:	e7e5      	b.n	80156ea <__lo0bits+0x1e>
 801571e:	2200      	movs	r2, #0
 8015720:	e7e3      	b.n	80156ea <__lo0bits+0x1e>
 8015722:	2220      	movs	r2, #32
 8015724:	e7e1      	b.n	80156ea <__lo0bits+0x1e>
	...

08015728 <__i2b>:
 8015728:	b510      	push	{r4, lr}
 801572a:	460c      	mov	r4, r1
 801572c:	2101      	movs	r1, #1
 801572e:	f7ff ff05 	bl	801553c <_Balloc>
 8015732:	4602      	mov	r2, r0
 8015734:	b928      	cbnz	r0, 8015742 <__i2b+0x1a>
 8015736:	4b05      	ldr	r3, [pc, #20]	; (801574c <__i2b+0x24>)
 8015738:	4805      	ldr	r0, [pc, #20]	; (8015750 <__i2b+0x28>)
 801573a:	f240 1145 	movw	r1, #325	; 0x145
 801573e:	f000 fc8f 	bl	8016060 <__assert_func>
 8015742:	2301      	movs	r3, #1
 8015744:	6144      	str	r4, [r0, #20]
 8015746:	6103      	str	r3, [r0, #16]
 8015748:	bd10      	pop	{r4, pc}
 801574a:	bf00      	nop
 801574c:	08016df0 	.word	0x08016df0
 8015750:	08016e01 	.word	0x08016e01

08015754 <__multiply>:
 8015754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015758:	4691      	mov	r9, r2
 801575a:	690a      	ldr	r2, [r1, #16]
 801575c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015760:	429a      	cmp	r2, r3
 8015762:	bfb8      	it	lt
 8015764:	460b      	movlt	r3, r1
 8015766:	460c      	mov	r4, r1
 8015768:	bfbc      	itt	lt
 801576a:	464c      	movlt	r4, r9
 801576c:	4699      	movlt	r9, r3
 801576e:	6927      	ldr	r7, [r4, #16]
 8015770:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015774:	68a3      	ldr	r3, [r4, #8]
 8015776:	6861      	ldr	r1, [r4, #4]
 8015778:	eb07 060a 	add.w	r6, r7, sl
 801577c:	42b3      	cmp	r3, r6
 801577e:	b085      	sub	sp, #20
 8015780:	bfb8      	it	lt
 8015782:	3101      	addlt	r1, #1
 8015784:	f7ff feda 	bl	801553c <_Balloc>
 8015788:	b930      	cbnz	r0, 8015798 <__multiply+0x44>
 801578a:	4602      	mov	r2, r0
 801578c:	4b44      	ldr	r3, [pc, #272]	; (80158a0 <__multiply+0x14c>)
 801578e:	4845      	ldr	r0, [pc, #276]	; (80158a4 <__multiply+0x150>)
 8015790:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015794:	f000 fc64 	bl	8016060 <__assert_func>
 8015798:	f100 0514 	add.w	r5, r0, #20
 801579c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80157a0:	462b      	mov	r3, r5
 80157a2:	2200      	movs	r2, #0
 80157a4:	4543      	cmp	r3, r8
 80157a6:	d321      	bcc.n	80157ec <__multiply+0x98>
 80157a8:	f104 0314 	add.w	r3, r4, #20
 80157ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80157b0:	f109 0314 	add.w	r3, r9, #20
 80157b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80157b8:	9202      	str	r2, [sp, #8]
 80157ba:	1b3a      	subs	r2, r7, r4
 80157bc:	3a15      	subs	r2, #21
 80157be:	f022 0203 	bic.w	r2, r2, #3
 80157c2:	3204      	adds	r2, #4
 80157c4:	f104 0115 	add.w	r1, r4, #21
 80157c8:	428f      	cmp	r7, r1
 80157ca:	bf38      	it	cc
 80157cc:	2204      	movcc	r2, #4
 80157ce:	9201      	str	r2, [sp, #4]
 80157d0:	9a02      	ldr	r2, [sp, #8]
 80157d2:	9303      	str	r3, [sp, #12]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d80c      	bhi.n	80157f2 <__multiply+0x9e>
 80157d8:	2e00      	cmp	r6, #0
 80157da:	dd03      	ble.n	80157e4 <__multiply+0x90>
 80157dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d05b      	beq.n	801589c <__multiply+0x148>
 80157e4:	6106      	str	r6, [r0, #16]
 80157e6:	b005      	add	sp, #20
 80157e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ec:	f843 2b04 	str.w	r2, [r3], #4
 80157f0:	e7d8      	b.n	80157a4 <__multiply+0x50>
 80157f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80157f6:	f1ba 0f00 	cmp.w	sl, #0
 80157fa:	d024      	beq.n	8015846 <__multiply+0xf2>
 80157fc:	f104 0e14 	add.w	lr, r4, #20
 8015800:	46a9      	mov	r9, r5
 8015802:	f04f 0c00 	mov.w	ip, #0
 8015806:	f85e 2b04 	ldr.w	r2, [lr], #4
 801580a:	f8d9 1000 	ldr.w	r1, [r9]
 801580e:	fa1f fb82 	uxth.w	fp, r2
 8015812:	b289      	uxth	r1, r1
 8015814:	fb0a 110b 	mla	r1, sl, fp, r1
 8015818:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801581c:	f8d9 2000 	ldr.w	r2, [r9]
 8015820:	4461      	add	r1, ip
 8015822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015826:	fb0a c20b 	mla	r2, sl, fp, ip
 801582a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801582e:	b289      	uxth	r1, r1
 8015830:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015834:	4577      	cmp	r7, lr
 8015836:	f849 1b04 	str.w	r1, [r9], #4
 801583a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801583e:	d8e2      	bhi.n	8015806 <__multiply+0xb2>
 8015840:	9a01      	ldr	r2, [sp, #4]
 8015842:	f845 c002 	str.w	ip, [r5, r2]
 8015846:	9a03      	ldr	r2, [sp, #12]
 8015848:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801584c:	3304      	adds	r3, #4
 801584e:	f1b9 0f00 	cmp.w	r9, #0
 8015852:	d021      	beq.n	8015898 <__multiply+0x144>
 8015854:	6829      	ldr	r1, [r5, #0]
 8015856:	f104 0c14 	add.w	ip, r4, #20
 801585a:	46ae      	mov	lr, r5
 801585c:	f04f 0a00 	mov.w	sl, #0
 8015860:	f8bc b000 	ldrh.w	fp, [ip]
 8015864:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015868:	fb09 220b 	mla	r2, r9, fp, r2
 801586c:	4452      	add	r2, sl
 801586e:	b289      	uxth	r1, r1
 8015870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015874:	f84e 1b04 	str.w	r1, [lr], #4
 8015878:	f85c 1b04 	ldr.w	r1, [ip], #4
 801587c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015880:	f8be 1000 	ldrh.w	r1, [lr]
 8015884:	fb09 110a 	mla	r1, r9, sl, r1
 8015888:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801588c:	4567      	cmp	r7, ip
 801588e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015892:	d8e5      	bhi.n	8015860 <__multiply+0x10c>
 8015894:	9a01      	ldr	r2, [sp, #4]
 8015896:	50a9      	str	r1, [r5, r2]
 8015898:	3504      	adds	r5, #4
 801589a:	e799      	b.n	80157d0 <__multiply+0x7c>
 801589c:	3e01      	subs	r6, #1
 801589e:	e79b      	b.n	80157d8 <__multiply+0x84>
 80158a0:	08016df0 	.word	0x08016df0
 80158a4:	08016e01 	.word	0x08016e01

080158a8 <__pow5mult>:
 80158a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158ac:	4615      	mov	r5, r2
 80158ae:	f012 0203 	ands.w	r2, r2, #3
 80158b2:	4606      	mov	r6, r0
 80158b4:	460f      	mov	r7, r1
 80158b6:	d007      	beq.n	80158c8 <__pow5mult+0x20>
 80158b8:	4c25      	ldr	r4, [pc, #148]	; (8015950 <__pow5mult+0xa8>)
 80158ba:	3a01      	subs	r2, #1
 80158bc:	2300      	movs	r3, #0
 80158be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80158c2:	f7ff fe9d 	bl	8015600 <__multadd>
 80158c6:	4607      	mov	r7, r0
 80158c8:	10ad      	asrs	r5, r5, #2
 80158ca:	d03d      	beq.n	8015948 <__pow5mult+0xa0>
 80158cc:	69f4      	ldr	r4, [r6, #28]
 80158ce:	b97c      	cbnz	r4, 80158f0 <__pow5mult+0x48>
 80158d0:	2010      	movs	r0, #16
 80158d2:	f7ff fd7f 	bl	80153d4 <malloc>
 80158d6:	4602      	mov	r2, r0
 80158d8:	61f0      	str	r0, [r6, #28]
 80158da:	b928      	cbnz	r0, 80158e8 <__pow5mult+0x40>
 80158dc:	4b1d      	ldr	r3, [pc, #116]	; (8015954 <__pow5mult+0xac>)
 80158de:	481e      	ldr	r0, [pc, #120]	; (8015958 <__pow5mult+0xb0>)
 80158e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80158e4:	f000 fbbc 	bl	8016060 <__assert_func>
 80158e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80158ec:	6004      	str	r4, [r0, #0]
 80158ee:	60c4      	str	r4, [r0, #12]
 80158f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80158f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80158f8:	b94c      	cbnz	r4, 801590e <__pow5mult+0x66>
 80158fa:	f240 2171 	movw	r1, #625	; 0x271
 80158fe:	4630      	mov	r0, r6
 8015900:	f7ff ff12 	bl	8015728 <__i2b>
 8015904:	2300      	movs	r3, #0
 8015906:	f8c8 0008 	str.w	r0, [r8, #8]
 801590a:	4604      	mov	r4, r0
 801590c:	6003      	str	r3, [r0, #0]
 801590e:	f04f 0900 	mov.w	r9, #0
 8015912:	07eb      	lsls	r3, r5, #31
 8015914:	d50a      	bpl.n	801592c <__pow5mult+0x84>
 8015916:	4639      	mov	r1, r7
 8015918:	4622      	mov	r2, r4
 801591a:	4630      	mov	r0, r6
 801591c:	f7ff ff1a 	bl	8015754 <__multiply>
 8015920:	4639      	mov	r1, r7
 8015922:	4680      	mov	r8, r0
 8015924:	4630      	mov	r0, r6
 8015926:	f7ff fe49 	bl	80155bc <_Bfree>
 801592a:	4647      	mov	r7, r8
 801592c:	106d      	asrs	r5, r5, #1
 801592e:	d00b      	beq.n	8015948 <__pow5mult+0xa0>
 8015930:	6820      	ldr	r0, [r4, #0]
 8015932:	b938      	cbnz	r0, 8015944 <__pow5mult+0x9c>
 8015934:	4622      	mov	r2, r4
 8015936:	4621      	mov	r1, r4
 8015938:	4630      	mov	r0, r6
 801593a:	f7ff ff0b 	bl	8015754 <__multiply>
 801593e:	6020      	str	r0, [r4, #0]
 8015940:	f8c0 9000 	str.w	r9, [r0]
 8015944:	4604      	mov	r4, r0
 8015946:	e7e4      	b.n	8015912 <__pow5mult+0x6a>
 8015948:	4638      	mov	r0, r7
 801594a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801594e:	bf00      	nop
 8015950:	08016f50 	.word	0x08016f50
 8015954:	08016d81 	.word	0x08016d81
 8015958:	08016e01 	.word	0x08016e01

0801595c <__lshift>:
 801595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015960:	460c      	mov	r4, r1
 8015962:	6849      	ldr	r1, [r1, #4]
 8015964:	6923      	ldr	r3, [r4, #16]
 8015966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801596a:	68a3      	ldr	r3, [r4, #8]
 801596c:	4607      	mov	r7, r0
 801596e:	4691      	mov	r9, r2
 8015970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015974:	f108 0601 	add.w	r6, r8, #1
 8015978:	42b3      	cmp	r3, r6
 801597a:	db0b      	blt.n	8015994 <__lshift+0x38>
 801597c:	4638      	mov	r0, r7
 801597e:	f7ff fddd 	bl	801553c <_Balloc>
 8015982:	4605      	mov	r5, r0
 8015984:	b948      	cbnz	r0, 801599a <__lshift+0x3e>
 8015986:	4602      	mov	r2, r0
 8015988:	4b28      	ldr	r3, [pc, #160]	; (8015a2c <__lshift+0xd0>)
 801598a:	4829      	ldr	r0, [pc, #164]	; (8015a30 <__lshift+0xd4>)
 801598c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015990:	f000 fb66 	bl	8016060 <__assert_func>
 8015994:	3101      	adds	r1, #1
 8015996:	005b      	lsls	r3, r3, #1
 8015998:	e7ee      	b.n	8015978 <__lshift+0x1c>
 801599a:	2300      	movs	r3, #0
 801599c:	f100 0114 	add.w	r1, r0, #20
 80159a0:	f100 0210 	add.w	r2, r0, #16
 80159a4:	4618      	mov	r0, r3
 80159a6:	4553      	cmp	r3, sl
 80159a8:	db33      	blt.n	8015a12 <__lshift+0xb6>
 80159aa:	6920      	ldr	r0, [r4, #16]
 80159ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159b0:	f104 0314 	add.w	r3, r4, #20
 80159b4:	f019 091f 	ands.w	r9, r9, #31
 80159b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80159bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80159c0:	d02b      	beq.n	8015a1a <__lshift+0xbe>
 80159c2:	f1c9 0e20 	rsb	lr, r9, #32
 80159c6:	468a      	mov	sl, r1
 80159c8:	2200      	movs	r2, #0
 80159ca:	6818      	ldr	r0, [r3, #0]
 80159cc:	fa00 f009 	lsl.w	r0, r0, r9
 80159d0:	4310      	orrs	r0, r2
 80159d2:	f84a 0b04 	str.w	r0, [sl], #4
 80159d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80159da:	459c      	cmp	ip, r3
 80159dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80159e0:	d8f3      	bhi.n	80159ca <__lshift+0x6e>
 80159e2:	ebac 0304 	sub.w	r3, ip, r4
 80159e6:	3b15      	subs	r3, #21
 80159e8:	f023 0303 	bic.w	r3, r3, #3
 80159ec:	3304      	adds	r3, #4
 80159ee:	f104 0015 	add.w	r0, r4, #21
 80159f2:	4584      	cmp	ip, r0
 80159f4:	bf38      	it	cc
 80159f6:	2304      	movcc	r3, #4
 80159f8:	50ca      	str	r2, [r1, r3]
 80159fa:	b10a      	cbz	r2, 8015a00 <__lshift+0xa4>
 80159fc:	f108 0602 	add.w	r6, r8, #2
 8015a00:	3e01      	subs	r6, #1
 8015a02:	4638      	mov	r0, r7
 8015a04:	612e      	str	r6, [r5, #16]
 8015a06:	4621      	mov	r1, r4
 8015a08:	f7ff fdd8 	bl	80155bc <_Bfree>
 8015a0c:	4628      	mov	r0, r5
 8015a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a12:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a16:	3301      	adds	r3, #1
 8015a18:	e7c5      	b.n	80159a6 <__lshift+0x4a>
 8015a1a:	3904      	subs	r1, #4
 8015a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a20:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a24:	459c      	cmp	ip, r3
 8015a26:	d8f9      	bhi.n	8015a1c <__lshift+0xc0>
 8015a28:	e7ea      	b.n	8015a00 <__lshift+0xa4>
 8015a2a:	bf00      	nop
 8015a2c:	08016df0 	.word	0x08016df0
 8015a30:	08016e01 	.word	0x08016e01

08015a34 <__mcmp>:
 8015a34:	b530      	push	{r4, r5, lr}
 8015a36:	6902      	ldr	r2, [r0, #16]
 8015a38:	690c      	ldr	r4, [r1, #16]
 8015a3a:	1b12      	subs	r2, r2, r4
 8015a3c:	d10e      	bne.n	8015a5c <__mcmp+0x28>
 8015a3e:	f100 0314 	add.w	r3, r0, #20
 8015a42:	3114      	adds	r1, #20
 8015a44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015a48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015a4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015a50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015a54:	42a5      	cmp	r5, r4
 8015a56:	d003      	beq.n	8015a60 <__mcmp+0x2c>
 8015a58:	d305      	bcc.n	8015a66 <__mcmp+0x32>
 8015a5a:	2201      	movs	r2, #1
 8015a5c:	4610      	mov	r0, r2
 8015a5e:	bd30      	pop	{r4, r5, pc}
 8015a60:	4283      	cmp	r3, r0
 8015a62:	d3f3      	bcc.n	8015a4c <__mcmp+0x18>
 8015a64:	e7fa      	b.n	8015a5c <__mcmp+0x28>
 8015a66:	f04f 32ff 	mov.w	r2, #4294967295
 8015a6a:	e7f7      	b.n	8015a5c <__mcmp+0x28>

08015a6c <__mdiff>:
 8015a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a70:	460c      	mov	r4, r1
 8015a72:	4606      	mov	r6, r0
 8015a74:	4611      	mov	r1, r2
 8015a76:	4620      	mov	r0, r4
 8015a78:	4690      	mov	r8, r2
 8015a7a:	f7ff ffdb 	bl	8015a34 <__mcmp>
 8015a7e:	1e05      	subs	r5, r0, #0
 8015a80:	d110      	bne.n	8015aa4 <__mdiff+0x38>
 8015a82:	4629      	mov	r1, r5
 8015a84:	4630      	mov	r0, r6
 8015a86:	f7ff fd59 	bl	801553c <_Balloc>
 8015a8a:	b930      	cbnz	r0, 8015a9a <__mdiff+0x2e>
 8015a8c:	4b3a      	ldr	r3, [pc, #232]	; (8015b78 <__mdiff+0x10c>)
 8015a8e:	4602      	mov	r2, r0
 8015a90:	f240 2137 	movw	r1, #567	; 0x237
 8015a94:	4839      	ldr	r0, [pc, #228]	; (8015b7c <__mdiff+0x110>)
 8015a96:	f000 fae3 	bl	8016060 <__assert_func>
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa4:	bfa4      	itt	ge
 8015aa6:	4643      	movge	r3, r8
 8015aa8:	46a0      	movge	r8, r4
 8015aaa:	4630      	mov	r0, r6
 8015aac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015ab0:	bfa6      	itte	ge
 8015ab2:	461c      	movge	r4, r3
 8015ab4:	2500      	movge	r5, #0
 8015ab6:	2501      	movlt	r5, #1
 8015ab8:	f7ff fd40 	bl	801553c <_Balloc>
 8015abc:	b920      	cbnz	r0, 8015ac8 <__mdiff+0x5c>
 8015abe:	4b2e      	ldr	r3, [pc, #184]	; (8015b78 <__mdiff+0x10c>)
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	f240 2145 	movw	r1, #581	; 0x245
 8015ac6:	e7e5      	b.n	8015a94 <__mdiff+0x28>
 8015ac8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015acc:	6926      	ldr	r6, [r4, #16]
 8015ace:	60c5      	str	r5, [r0, #12]
 8015ad0:	f104 0914 	add.w	r9, r4, #20
 8015ad4:	f108 0514 	add.w	r5, r8, #20
 8015ad8:	f100 0e14 	add.w	lr, r0, #20
 8015adc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015ae0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015ae4:	f108 0210 	add.w	r2, r8, #16
 8015ae8:	46f2      	mov	sl, lr
 8015aea:	2100      	movs	r1, #0
 8015aec:	f859 3b04 	ldr.w	r3, [r9], #4
 8015af0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015af4:	fa11 f88b 	uxtah	r8, r1, fp
 8015af8:	b299      	uxth	r1, r3
 8015afa:	0c1b      	lsrs	r3, r3, #16
 8015afc:	eba8 0801 	sub.w	r8, r8, r1
 8015b00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015b04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015b08:	fa1f f888 	uxth.w	r8, r8
 8015b0c:	1419      	asrs	r1, r3, #16
 8015b0e:	454e      	cmp	r6, r9
 8015b10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015b14:	f84a 3b04 	str.w	r3, [sl], #4
 8015b18:	d8e8      	bhi.n	8015aec <__mdiff+0x80>
 8015b1a:	1b33      	subs	r3, r6, r4
 8015b1c:	3b15      	subs	r3, #21
 8015b1e:	f023 0303 	bic.w	r3, r3, #3
 8015b22:	3304      	adds	r3, #4
 8015b24:	3415      	adds	r4, #21
 8015b26:	42a6      	cmp	r6, r4
 8015b28:	bf38      	it	cc
 8015b2a:	2304      	movcc	r3, #4
 8015b2c:	441d      	add	r5, r3
 8015b2e:	4473      	add	r3, lr
 8015b30:	469e      	mov	lr, r3
 8015b32:	462e      	mov	r6, r5
 8015b34:	4566      	cmp	r6, ip
 8015b36:	d30e      	bcc.n	8015b56 <__mdiff+0xea>
 8015b38:	f10c 0203 	add.w	r2, ip, #3
 8015b3c:	1b52      	subs	r2, r2, r5
 8015b3e:	f022 0203 	bic.w	r2, r2, #3
 8015b42:	3d03      	subs	r5, #3
 8015b44:	45ac      	cmp	ip, r5
 8015b46:	bf38      	it	cc
 8015b48:	2200      	movcc	r2, #0
 8015b4a:	4413      	add	r3, r2
 8015b4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015b50:	b17a      	cbz	r2, 8015b72 <__mdiff+0x106>
 8015b52:	6107      	str	r7, [r0, #16]
 8015b54:	e7a4      	b.n	8015aa0 <__mdiff+0x34>
 8015b56:	f856 8b04 	ldr.w	r8, [r6], #4
 8015b5a:	fa11 f288 	uxtah	r2, r1, r8
 8015b5e:	1414      	asrs	r4, r2, #16
 8015b60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015b64:	b292      	uxth	r2, r2
 8015b66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015b6a:	f84e 2b04 	str.w	r2, [lr], #4
 8015b6e:	1421      	asrs	r1, r4, #16
 8015b70:	e7e0      	b.n	8015b34 <__mdiff+0xc8>
 8015b72:	3f01      	subs	r7, #1
 8015b74:	e7ea      	b.n	8015b4c <__mdiff+0xe0>
 8015b76:	bf00      	nop
 8015b78:	08016df0 	.word	0x08016df0
 8015b7c:	08016e01 	.word	0x08016e01

08015b80 <__d2b>:
 8015b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b84:	460f      	mov	r7, r1
 8015b86:	2101      	movs	r1, #1
 8015b88:	ec59 8b10 	vmov	r8, r9, d0
 8015b8c:	4616      	mov	r6, r2
 8015b8e:	f7ff fcd5 	bl	801553c <_Balloc>
 8015b92:	4604      	mov	r4, r0
 8015b94:	b930      	cbnz	r0, 8015ba4 <__d2b+0x24>
 8015b96:	4602      	mov	r2, r0
 8015b98:	4b24      	ldr	r3, [pc, #144]	; (8015c2c <__d2b+0xac>)
 8015b9a:	4825      	ldr	r0, [pc, #148]	; (8015c30 <__d2b+0xb0>)
 8015b9c:	f240 310f 	movw	r1, #783	; 0x30f
 8015ba0:	f000 fa5e 	bl	8016060 <__assert_func>
 8015ba4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015bac:	bb2d      	cbnz	r5, 8015bfa <__d2b+0x7a>
 8015bae:	9301      	str	r3, [sp, #4]
 8015bb0:	f1b8 0300 	subs.w	r3, r8, #0
 8015bb4:	d026      	beq.n	8015c04 <__d2b+0x84>
 8015bb6:	4668      	mov	r0, sp
 8015bb8:	9300      	str	r3, [sp, #0]
 8015bba:	f7ff fd87 	bl	80156cc <__lo0bits>
 8015bbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015bc2:	b1e8      	cbz	r0, 8015c00 <__d2b+0x80>
 8015bc4:	f1c0 0320 	rsb	r3, r0, #32
 8015bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8015bcc:	430b      	orrs	r3, r1
 8015bce:	40c2      	lsrs	r2, r0
 8015bd0:	6163      	str	r3, [r4, #20]
 8015bd2:	9201      	str	r2, [sp, #4]
 8015bd4:	9b01      	ldr	r3, [sp, #4]
 8015bd6:	61a3      	str	r3, [r4, #24]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	bf14      	ite	ne
 8015bdc:	2202      	movne	r2, #2
 8015bde:	2201      	moveq	r2, #1
 8015be0:	6122      	str	r2, [r4, #16]
 8015be2:	b1bd      	cbz	r5, 8015c14 <__d2b+0x94>
 8015be4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015be8:	4405      	add	r5, r0
 8015bea:	603d      	str	r5, [r7, #0]
 8015bec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015bf0:	6030      	str	r0, [r6, #0]
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	b003      	add	sp, #12
 8015bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015bfe:	e7d6      	b.n	8015bae <__d2b+0x2e>
 8015c00:	6161      	str	r1, [r4, #20]
 8015c02:	e7e7      	b.n	8015bd4 <__d2b+0x54>
 8015c04:	a801      	add	r0, sp, #4
 8015c06:	f7ff fd61 	bl	80156cc <__lo0bits>
 8015c0a:	9b01      	ldr	r3, [sp, #4]
 8015c0c:	6163      	str	r3, [r4, #20]
 8015c0e:	3020      	adds	r0, #32
 8015c10:	2201      	movs	r2, #1
 8015c12:	e7e5      	b.n	8015be0 <__d2b+0x60>
 8015c14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c1c:	6038      	str	r0, [r7, #0]
 8015c1e:	6918      	ldr	r0, [r3, #16]
 8015c20:	f7ff fd34 	bl	801568c <__hi0bits>
 8015c24:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c28:	e7e2      	b.n	8015bf0 <__d2b+0x70>
 8015c2a:	bf00      	nop
 8015c2c:	08016df0 	.word	0x08016df0
 8015c30:	08016e01 	.word	0x08016e01

08015c34 <__ssputs_r>:
 8015c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c38:	688e      	ldr	r6, [r1, #8]
 8015c3a:	461f      	mov	r7, r3
 8015c3c:	42be      	cmp	r6, r7
 8015c3e:	680b      	ldr	r3, [r1, #0]
 8015c40:	4682      	mov	sl, r0
 8015c42:	460c      	mov	r4, r1
 8015c44:	4690      	mov	r8, r2
 8015c46:	d82c      	bhi.n	8015ca2 <__ssputs_r+0x6e>
 8015c48:	898a      	ldrh	r2, [r1, #12]
 8015c4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015c4e:	d026      	beq.n	8015c9e <__ssputs_r+0x6a>
 8015c50:	6965      	ldr	r5, [r4, #20]
 8015c52:	6909      	ldr	r1, [r1, #16]
 8015c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c58:	eba3 0901 	sub.w	r9, r3, r1
 8015c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c60:	1c7b      	adds	r3, r7, #1
 8015c62:	444b      	add	r3, r9
 8015c64:	106d      	asrs	r5, r5, #1
 8015c66:	429d      	cmp	r5, r3
 8015c68:	bf38      	it	cc
 8015c6a:	461d      	movcc	r5, r3
 8015c6c:	0553      	lsls	r3, r2, #21
 8015c6e:	d527      	bpl.n	8015cc0 <__ssputs_r+0x8c>
 8015c70:	4629      	mov	r1, r5
 8015c72:	f7ff fbd7 	bl	8015424 <_malloc_r>
 8015c76:	4606      	mov	r6, r0
 8015c78:	b360      	cbz	r0, 8015cd4 <__ssputs_r+0xa0>
 8015c7a:	6921      	ldr	r1, [r4, #16]
 8015c7c:	464a      	mov	r2, r9
 8015c7e:	f7fe fcd2 	bl	8014626 <memcpy>
 8015c82:	89a3      	ldrh	r3, [r4, #12]
 8015c84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c8c:	81a3      	strh	r3, [r4, #12]
 8015c8e:	6126      	str	r6, [r4, #16]
 8015c90:	6165      	str	r5, [r4, #20]
 8015c92:	444e      	add	r6, r9
 8015c94:	eba5 0509 	sub.w	r5, r5, r9
 8015c98:	6026      	str	r6, [r4, #0]
 8015c9a:	60a5      	str	r5, [r4, #8]
 8015c9c:	463e      	mov	r6, r7
 8015c9e:	42be      	cmp	r6, r7
 8015ca0:	d900      	bls.n	8015ca4 <__ssputs_r+0x70>
 8015ca2:	463e      	mov	r6, r7
 8015ca4:	6820      	ldr	r0, [r4, #0]
 8015ca6:	4632      	mov	r2, r6
 8015ca8:	4641      	mov	r1, r8
 8015caa:	f7fe fbcc 	bl	8014446 <memmove>
 8015cae:	68a3      	ldr	r3, [r4, #8]
 8015cb0:	1b9b      	subs	r3, r3, r6
 8015cb2:	60a3      	str	r3, [r4, #8]
 8015cb4:	6823      	ldr	r3, [r4, #0]
 8015cb6:	4433      	add	r3, r6
 8015cb8:	6023      	str	r3, [r4, #0]
 8015cba:	2000      	movs	r0, #0
 8015cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cc0:	462a      	mov	r2, r5
 8015cc2:	f000 fa13 	bl	80160ec <_realloc_r>
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	d1e0      	bne.n	8015c8e <__ssputs_r+0x5a>
 8015ccc:	6921      	ldr	r1, [r4, #16]
 8015cce:	4650      	mov	r0, sl
 8015cd0:	f7ff fb34 	bl	801533c <_free_r>
 8015cd4:	230c      	movs	r3, #12
 8015cd6:	f8ca 3000 	str.w	r3, [sl]
 8015cda:	89a3      	ldrh	r3, [r4, #12]
 8015cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ce0:	81a3      	strh	r3, [r4, #12]
 8015ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ce6:	e7e9      	b.n	8015cbc <__ssputs_r+0x88>

08015ce8 <_svfiprintf_r>:
 8015ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cec:	4698      	mov	r8, r3
 8015cee:	898b      	ldrh	r3, [r1, #12]
 8015cf0:	061b      	lsls	r3, r3, #24
 8015cf2:	b09d      	sub	sp, #116	; 0x74
 8015cf4:	4607      	mov	r7, r0
 8015cf6:	460d      	mov	r5, r1
 8015cf8:	4614      	mov	r4, r2
 8015cfa:	d50e      	bpl.n	8015d1a <_svfiprintf_r+0x32>
 8015cfc:	690b      	ldr	r3, [r1, #16]
 8015cfe:	b963      	cbnz	r3, 8015d1a <_svfiprintf_r+0x32>
 8015d00:	2140      	movs	r1, #64	; 0x40
 8015d02:	f7ff fb8f 	bl	8015424 <_malloc_r>
 8015d06:	6028      	str	r0, [r5, #0]
 8015d08:	6128      	str	r0, [r5, #16]
 8015d0a:	b920      	cbnz	r0, 8015d16 <_svfiprintf_r+0x2e>
 8015d0c:	230c      	movs	r3, #12
 8015d0e:	603b      	str	r3, [r7, #0]
 8015d10:	f04f 30ff 	mov.w	r0, #4294967295
 8015d14:	e0d0      	b.n	8015eb8 <_svfiprintf_r+0x1d0>
 8015d16:	2340      	movs	r3, #64	; 0x40
 8015d18:	616b      	str	r3, [r5, #20]
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d1e:	2320      	movs	r3, #32
 8015d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d28:	2330      	movs	r3, #48	; 0x30
 8015d2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015ed0 <_svfiprintf_r+0x1e8>
 8015d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d32:	f04f 0901 	mov.w	r9, #1
 8015d36:	4623      	mov	r3, r4
 8015d38:	469a      	mov	sl, r3
 8015d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d3e:	b10a      	cbz	r2, 8015d44 <_svfiprintf_r+0x5c>
 8015d40:	2a25      	cmp	r2, #37	; 0x25
 8015d42:	d1f9      	bne.n	8015d38 <_svfiprintf_r+0x50>
 8015d44:	ebba 0b04 	subs.w	fp, sl, r4
 8015d48:	d00b      	beq.n	8015d62 <_svfiprintf_r+0x7a>
 8015d4a:	465b      	mov	r3, fp
 8015d4c:	4622      	mov	r2, r4
 8015d4e:	4629      	mov	r1, r5
 8015d50:	4638      	mov	r0, r7
 8015d52:	f7ff ff6f 	bl	8015c34 <__ssputs_r>
 8015d56:	3001      	adds	r0, #1
 8015d58:	f000 80a9 	beq.w	8015eae <_svfiprintf_r+0x1c6>
 8015d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d5e:	445a      	add	r2, fp
 8015d60:	9209      	str	r2, [sp, #36]	; 0x24
 8015d62:	f89a 3000 	ldrb.w	r3, [sl]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	f000 80a1 	beq.w	8015eae <_svfiprintf_r+0x1c6>
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d76:	f10a 0a01 	add.w	sl, sl, #1
 8015d7a:	9304      	str	r3, [sp, #16]
 8015d7c:	9307      	str	r3, [sp, #28]
 8015d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d82:	931a      	str	r3, [sp, #104]	; 0x68
 8015d84:	4654      	mov	r4, sl
 8015d86:	2205      	movs	r2, #5
 8015d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d8c:	4850      	ldr	r0, [pc, #320]	; (8015ed0 <_svfiprintf_r+0x1e8>)
 8015d8e:	f7ea fa37 	bl	8000200 <memchr>
 8015d92:	9a04      	ldr	r2, [sp, #16]
 8015d94:	b9d8      	cbnz	r0, 8015dce <_svfiprintf_r+0xe6>
 8015d96:	06d0      	lsls	r0, r2, #27
 8015d98:	bf44      	itt	mi
 8015d9a:	2320      	movmi	r3, #32
 8015d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015da0:	0711      	lsls	r1, r2, #28
 8015da2:	bf44      	itt	mi
 8015da4:	232b      	movmi	r3, #43	; 0x2b
 8015da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015daa:	f89a 3000 	ldrb.w	r3, [sl]
 8015dae:	2b2a      	cmp	r3, #42	; 0x2a
 8015db0:	d015      	beq.n	8015dde <_svfiprintf_r+0xf6>
 8015db2:	9a07      	ldr	r2, [sp, #28]
 8015db4:	4654      	mov	r4, sl
 8015db6:	2000      	movs	r0, #0
 8015db8:	f04f 0c0a 	mov.w	ip, #10
 8015dbc:	4621      	mov	r1, r4
 8015dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dc2:	3b30      	subs	r3, #48	; 0x30
 8015dc4:	2b09      	cmp	r3, #9
 8015dc6:	d94d      	bls.n	8015e64 <_svfiprintf_r+0x17c>
 8015dc8:	b1b0      	cbz	r0, 8015df8 <_svfiprintf_r+0x110>
 8015dca:	9207      	str	r2, [sp, #28]
 8015dcc:	e014      	b.n	8015df8 <_svfiprintf_r+0x110>
 8015dce:	eba0 0308 	sub.w	r3, r0, r8
 8015dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	9304      	str	r3, [sp, #16]
 8015dda:	46a2      	mov	sl, r4
 8015ddc:	e7d2      	b.n	8015d84 <_svfiprintf_r+0x9c>
 8015dde:	9b03      	ldr	r3, [sp, #12]
 8015de0:	1d19      	adds	r1, r3, #4
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	9103      	str	r1, [sp, #12]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	bfbb      	ittet	lt
 8015dea:	425b      	neglt	r3, r3
 8015dec:	f042 0202 	orrlt.w	r2, r2, #2
 8015df0:	9307      	strge	r3, [sp, #28]
 8015df2:	9307      	strlt	r3, [sp, #28]
 8015df4:	bfb8      	it	lt
 8015df6:	9204      	strlt	r2, [sp, #16]
 8015df8:	7823      	ldrb	r3, [r4, #0]
 8015dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8015dfc:	d10c      	bne.n	8015e18 <_svfiprintf_r+0x130>
 8015dfe:	7863      	ldrb	r3, [r4, #1]
 8015e00:	2b2a      	cmp	r3, #42	; 0x2a
 8015e02:	d134      	bne.n	8015e6e <_svfiprintf_r+0x186>
 8015e04:	9b03      	ldr	r3, [sp, #12]
 8015e06:	1d1a      	adds	r2, r3, #4
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	9203      	str	r2, [sp, #12]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	bfb8      	it	lt
 8015e10:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e14:	3402      	adds	r4, #2
 8015e16:	9305      	str	r3, [sp, #20]
 8015e18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015ee0 <_svfiprintf_r+0x1f8>
 8015e1c:	7821      	ldrb	r1, [r4, #0]
 8015e1e:	2203      	movs	r2, #3
 8015e20:	4650      	mov	r0, sl
 8015e22:	f7ea f9ed 	bl	8000200 <memchr>
 8015e26:	b138      	cbz	r0, 8015e38 <_svfiprintf_r+0x150>
 8015e28:	9b04      	ldr	r3, [sp, #16]
 8015e2a:	eba0 000a 	sub.w	r0, r0, sl
 8015e2e:	2240      	movs	r2, #64	; 0x40
 8015e30:	4082      	lsls	r2, r0
 8015e32:	4313      	orrs	r3, r2
 8015e34:	3401      	adds	r4, #1
 8015e36:	9304      	str	r3, [sp, #16]
 8015e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e3c:	4825      	ldr	r0, [pc, #148]	; (8015ed4 <_svfiprintf_r+0x1ec>)
 8015e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e42:	2206      	movs	r2, #6
 8015e44:	f7ea f9dc 	bl	8000200 <memchr>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d038      	beq.n	8015ebe <_svfiprintf_r+0x1d6>
 8015e4c:	4b22      	ldr	r3, [pc, #136]	; (8015ed8 <_svfiprintf_r+0x1f0>)
 8015e4e:	bb1b      	cbnz	r3, 8015e98 <_svfiprintf_r+0x1b0>
 8015e50:	9b03      	ldr	r3, [sp, #12]
 8015e52:	3307      	adds	r3, #7
 8015e54:	f023 0307 	bic.w	r3, r3, #7
 8015e58:	3308      	adds	r3, #8
 8015e5a:	9303      	str	r3, [sp, #12]
 8015e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e5e:	4433      	add	r3, r6
 8015e60:	9309      	str	r3, [sp, #36]	; 0x24
 8015e62:	e768      	b.n	8015d36 <_svfiprintf_r+0x4e>
 8015e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e68:	460c      	mov	r4, r1
 8015e6a:	2001      	movs	r0, #1
 8015e6c:	e7a6      	b.n	8015dbc <_svfiprintf_r+0xd4>
 8015e6e:	2300      	movs	r3, #0
 8015e70:	3401      	adds	r4, #1
 8015e72:	9305      	str	r3, [sp, #20]
 8015e74:	4619      	mov	r1, r3
 8015e76:	f04f 0c0a 	mov.w	ip, #10
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e80:	3a30      	subs	r2, #48	; 0x30
 8015e82:	2a09      	cmp	r2, #9
 8015e84:	d903      	bls.n	8015e8e <_svfiprintf_r+0x1a6>
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d0c6      	beq.n	8015e18 <_svfiprintf_r+0x130>
 8015e8a:	9105      	str	r1, [sp, #20]
 8015e8c:	e7c4      	b.n	8015e18 <_svfiprintf_r+0x130>
 8015e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e92:	4604      	mov	r4, r0
 8015e94:	2301      	movs	r3, #1
 8015e96:	e7f0      	b.n	8015e7a <_svfiprintf_r+0x192>
 8015e98:	ab03      	add	r3, sp, #12
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	462a      	mov	r2, r5
 8015e9e:	4b0f      	ldr	r3, [pc, #60]	; (8015edc <_svfiprintf_r+0x1f4>)
 8015ea0:	a904      	add	r1, sp, #16
 8015ea2:	4638      	mov	r0, r7
 8015ea4:	f7fd fde4 	bl	8013a70 <_printf_float>
 8015ea8:	1c42      	adds	r2, r0, #1
 8015eaa:	4606      	mov	r6, r0
 8015eac:	d1d6      	bne.n	8015e5c <_svfiprintf_r+0x174>
 8015eae:	89ab      	ldrh	r3, [r5, #12]
 8015eb0:	065b      	lsls	r3, r3, #25
 8015eb2:	f53f af2d 	bmi.w	8015d10 <_svfiprintf_r+0x28>
 8015eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015eb8:	b01d      	add	sp, #116	; 0x74
 8015eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ebe:	ab03      	add	r3, sp, #12
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	462a      	mov	r2, r5
 8015ec4:	4b05      	ldr	r3, [pc, #20]	; (8015edc <_svfiprintf_r+0x1f4>)
 8015ec6:	a904      	add	r1, sp, #16
 8015ec8:	4638      	mov	r0, r7
 8015eca:	f7fe f875 	bl	8013fb8 <_printf_i>
 8015ece:	e7eb      	b.n	8015ea8 <_svfiprintf_r+0x1c0>
 8015ed0:	08016f5c 	.word	0x08016f5c
 8015ed4:	08016f66 	.word	0x08016f66
 8015ed8:	08013a71 	.word	0x08013a71
 8015edc:	08015c35 	.word	0x08015c35
 8015ee0:	08016f62 	.word	0x08016f62

08015ee4 <__sflush_r>:
 8015ee4:	898a      	ldrh	r2, [r1, #12]
 8015ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eea:	4605      	mov	r5, r0
 8015eec:	0710      	lsls	r0, r2, #28
 8015eee:	460c      	mov	r4, r1
 8015ef0:	d458      	bmi.n	8015fa4 <__sflush_r+0xc0>
 8015ef2:	684b      	ldr	r3, [r1, #4]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	dc05      	bgt.n	8015f04 <__sflush_r+0x20>
 8015ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	dc02      	bgt.n	8015f04 <__sflush_r+0x20>
 8015efe:	2000      	movs	r0, #0
 8015f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f06:	2e00      	cmp	r6, #0
 8015f08:	d0f9      	beq.n	8015efe <__sflush_r+0x1a>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f10:	682f      	ldr	r7, [r5, #0]
 8015f12:	6a21      	ldr	r1, [r4, #32]
 8015f14:	602b      	str	r3, [r5, #0]
 8015f16:	d032      	beq.n	8015f7e <__sflush_r+0x9a>
 8015f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f1a:	89a3      	ldrh	r3, [r4, #12]
 8015f1c:	075a      	lsls	r2, r3, #29
 8015f1e:	d505      	bpl.n	8015f2c <__sflush_r+0x48>
 8015f20:	6863      	ldr	r3, [r4, #4]
 8015f22:	1ac0      	subs	r0, r0, r3
 8015f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f26:	b10b      	cbz	r3, 8015f2c <__sflush_r+0x48>
 8015f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f2a:	1ac0      	subs	r0, r0, r3
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	4602      	mov	r2, r0
 8015f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f32:	6a21      	ldr	r1, [r4, #32]
 8015f34:	4628      	mov	r0, r5
 8015f36:	47b0      	blx	r6
 8015f38:	1c43      	adds	r3, r0, #1
 8015f3a:	89a3      	ldrh	r3, [r4, #12]
 8015f3c:	d106      	bne.n	8015f4c <__sflush_r+0x68>
 8015f3e:	6829      	ldr	r1, [r5, #0]
 8015f40:	291d      	cmp	r1, #29
 8015f42:	d82b      	bhi.n	8015f9c <__sflush_r+0xb8>
 8015f44:	4a29      	ldr	r2, [pc, #164]	; (8015fec <__sflush_r+0x108>)
 8015f46:	410a      	asrs	r2, r1
 8015f48:	07d6      	lsls	r6, r2, #31
 8015f4a:	d427      	bmi.n	8015f9c <__sflush_r+0xb8>
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	6062      	str	r2, [r4, #4]
 8015f50:	04d9      	lsls	r1, r3, #19
 8015f52:	6922      	ldr	r2, [r4, #16]
 8015f54:	6022      	str	r2, [r4, #0]
 8015f56:	d504      	bpl.n	8015f62 <__sflush_r+0x7e>
 8015f58:	1c42      	adds	r2, r0, #1
 8015f5a:	d101      	bne.n	8015f60 <__sflush_r+0x7c>
 8015f5c:	682b      	ldr	r3, [r5, #0]
 8015f5e:	b903      	cbnz	r3, 8015f62 <__sflush_r+0x7e>
 8015f60:	6560      	str	r0, [r4, #84]	; 0x54
 8015f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f64:	602f      	str	r7, [r5, #0]
 8015f66:	2900      	cmp	r1, #0
 8015f68:	d0c9      	beq.n	8015efe <__sflush_r+0x1a>
 8015f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f6e:	4299      	cmp	r1, r3
 8015f70:	d002      	beq.n	8015f78 <__sflush_r+0x94>
 8015f72:	4628      	mov	r0, r5
 8015f74:	f7ff f9e2 	bl	801533c <_free_r>
 8015f78:	2000      	movs	r0, #0
 8015f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8015f7c:	e7c0      	b.n	8015f00 <__sflush_r+0x1c>
 8015f7e:	2301      	movs	r3, #1
 8015f80:	4628      	mov	r0, r5
 8015f82:	47b0      	blx	r6
 8015f84:	1c41      	adds	r1, r0, #1
 8015f86:	d1c8      	bne.n	8015f1a <__sflush_r+0x36>
 8015f88:	682b      	ldr	r3, [r5, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d0c5      	beq.n	8015f1a <__sflush_r+0x36>
 8015f8e:	2b1d      	cmp	r3, #29
 8015f90:	d001      	beq.n	8015f96 <__sflush_r+0xb2>
 8015f92:	2b16      	cmp	r3, #22
 8015f94:	d101      	bne.n	8015f9a <__sflush_r+0xb6>
 8015f96:	602f      	str	r7, [r5, #0]
 8015f98:	e7b1      	b.n	8015efe <__sflush_r+0x1a>
 8015f9a:	89a3      	ldrh	r3, [r4, #12]
 8015f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fa0:	81a3      	strh	r3, [r4, #12]
 8015fa2:	e7ad      	b.n	8015f00 <__sflush_r+0x1c>
 8015fa4:	690f      	ldr	r7, [r1, #16]
 8015fa6:	2f00      	cmp	r7, #0
 8015fa8:	d0a9      	beq.n	8015efe <__sflush_r+0x1a>
 8015faa:	0793      	lsls	r3, r2, #30
 8015fac:	680e      	ldr	r6, [r1, #0]
 8015fae:	bf08      	it	eq
 8015fb0:	694b      	ldreq	r3, [r1, #20]
 8015fb2:	600f      	str	r7, [r1, #0]
 8015fb4:	bf18      	it	ne
 8015fb6:	2300      	movne	r3, #0
 8015fb8:	eba6 0807 	sub.w	r8, r6, r7
 8015fbc:	608b      	str	r3, [r1, #8]
 8015fbe:	f1b8 0f00 	cmp.w	r8, #0
 8015fc2:	dd9c      	ble.n	8015efe <__sflush_r+0x1a>
 8015fc4:	6a21      	ldr	r1, [r4, #32]
 8015fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015fc8:	4643      	mov	r3, r8
 8015fca:	463a      	mov	r2, r7
 8015fcc:	4628      	mov	r0, r5
 8015fce:	47b0      	blx	r6
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	dc06      	bgt.n	8015fe2 <__sflush_r+0xfe>
 8015fd4:	89a3      	ldrh	r3, [r4, #12]
 8015fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fda:	81a3      	strh	r3, [r4, #12]
 8015fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe0:	e78e      	b.n	8015f00 <__sflush_r+0x1c>
 8015fe2:	4407      	add	r7, r0
 8015fe4:	eba8 0800 	sub.w	r8, r8, r0
 8015fe8:	e7e9      	b.n	8015fbe <__sflush_r+0xda>
 8015fea:	bf00      	nop
 8015fec:	dfbffffe 	.word	0xdfbffffe

08015ff0 <_fflush_r>:
 8015ff0:	b538      	push	{r3, r4, r5, lr}
 8015ff2:	690b      	ldr	r3, [r1, #16]
 8015ff4:	4605      	mov	r5, r0
 8015ff6:	460c      	mov	r4, r1
 8015ff8:	b913      	cbnz	r3, 8016000 <_fflush_r+0x10>
 8015ffa:	2500      	movs	r5, #0
 8015ffc:	4628      	mov	r0, r5
 8015ffe:	bd38      	pop	{r3, r4, r5, pc}
 8016000:	b118      	cbz	r0, 801600a <_fflush_r+0x1a>
 8016002:	6a03      	ldr	r3, [r0, #32]
 8016004:	b90b      	cbnz	r3, 801600a <_fflush_r+0x1a>
 8016006:	f7fe f985 	bl	8014314 <__sinit>
 801600a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d0f3      	beq.n	8015ffa <_fflush_r+0xa>
 8016012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016014:	07d0      	lsls	r0, r2, #31
 8016016:	d404      	bmi.n	8016022 <_fflush_r+0x32>
 8016018:	0599      	lsls	r1, r3, #22
 801601a:	d402      	bmi.n	8016022 <_fflush_r+0x32>
 801601c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801601e:	f7fe fb00 	bl	8014622 <__retarget_lock_acquire_recursive>
 8016022:	4628      	mov	r0, r5
 8016024:	4621      	mov	r1, r4
 8016026:	f7ff ff5d 	bl	8015ee4 <__sflush_r>
 801602a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801602c:	07da      	lsls	r2, r3, #31
 801602e:	4605      	mov	r5, r0
 8016030:	d4e4      	bmi.n	8015ffc <_fflush_r+0xc>
 8016032:	89a3      	ldrh	r3, [r4, #12]
 8016034:	059b      	lsls	r3, r3, #22
 8016036:	d4e1      	bmi.n	8015ffc <_fflush_r+0xc>
 8016038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801603a:	f7fe faf3 	bl	8014624 <__retarget_lock_release_recursive>
 801603e:	e7dd      	b.n	8015ffc <_fflush_r+0xc>

08016040 <_sbrk_r>:
 8016040:	b538      	push	{r3, r4, r5, lr}
 8016042:	4d06      	ldr	r5, [pc, #24]	; (801605c <_sbrk_r+0x1c>)
 8016044:	2300      	movs	r3, #0
 8016046:	4604      	mov	r4, r0
 8016048:	4608      	mov	r0, r1
 801604a:	602b      	str	r3, [r5, #0]
 801604c:	f7ee fff8 	bl	8005040 <_sbrk>
 8016050:	1c43      	adds	r3, r0, #1
 8016052:	d102      	bne.n	801605a <_sbrk_r+0x1a>
 8016054:	682b      	ldr	r3, [r5, #0]
 8016056:	b103      	cbz	r3, 801605a <_sbrk_r+0x1a>
 8016058:	6023      	str	r3, [r4, #0]
 801605a:	bd38      	pop	{r3, r4, r5, pc}
 801605c:	20009964 	.word	0x20009964

08016060 <__assert_func>:
 8016060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016062:	4614      	mov	r4, r2
 8016064:	461a      	mov	r2, r3
 8016066:	4b09      	ldr	r3, [pc, #36]	; (801608c <__assert_func+0x2c>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	4605      	mov	r5, r0
 801606c:	68d8      	ldr	r0, [r3, #12]
 801606e:	b14c      	cbz	r4, 8016084 <__assert_func+0x24>
 8016070:	4b07      	ldr	r3, [pc, #28]	; (8016090 <__assert_func+0x30>)
 8016072:	9100      	str	r1, [sp, #0]
 8016074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016078:	4906      	ldr	r1, [pc, #24]	; (8016094 <__assert_func+0x34>)
 801607a:	462b      	mov	r3, r5
 801607c:	f000 f872 	bl	8016164 <fiprintf>
 8016080:	f000 f882 	bl	8016188 <abort>
 8016084:	4b04      	ldr	r3, [pc, #16]	; (8016098 <__assert_func+0x38>)
 8016086:	461c      	mov	r4, r3
 8016088:	e7f3      	b.n	8016072 <__assert_func+0x12>
 801608a:	bf00      	nop
 801608c:	20000410 	.word	0x20000410
 8016090:	08016f77 	.word	0x08016f77
 8016094:	08016f84 	.word	0x08016f84
 8016098:	08016fb2 	.word	0x08016fb2

0801609c <_calloc_r>:
 801609c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801609e:	fba1 2402 	umull	r2, r4, r1, r2
 80160a2:	b94c      	cbnz	r4, 80160b8 <_calloc_r+0x1c>
 80160a4:	4611      	mov	r1, r2
 80160a6:	9201      	str	r2, [sp, #4]
 80160a8:	f7ff f9bc 	bl	8015424 <_malloc_r>
 80160ac:	9a01      	ldr	r2, [sp, #4]
 80160ae:	4605      	mov	r5, r0
 80160b0:	b930      	cbnz	r0, 80160c0 <_calloc_r+0x24>
 80160b2:	4628      	mov	r0, r5
 80160b4:	b003      	add	sp, #12
 80160b6:	bd30      	pop	{r4, r5, pc}
 80160b8:	220c      	movs	r2, #12
 80160ba:	6002      	str	r2, [r0, #0]
 80160bc:	2500      	movs	r5, #0
 80160be:	e7f8      	b.n	80160b2 <_calloc_r+0x16>
 80160c0:	4621      	mov	r1, r4
 80160c2:	f7fe f9da 	bl	801447a <memset>
 80160c6:	e7f4      	b.n	80160b2 <_calloc_r+0x16>

080160c8 <__ascii_mbtowc>:
 80160c8:	b082      	sub	sp, #8
 80160ca:	b901      	cbnz	r1, 80160ce <__ascii_mbtowc+0x6>
 80160cc:	a901      	add	r1, sp, #4
 80160ce:	b142      	cbz	r2, 80160e2 <__ascii_mbtowc+0x1a>
 80160d0:	b14b      	cbz	r3, 80160e6 <__ascii_mbtowc+0x1e>
 80160d2:	7813      	ldrb	r3, [r2, #0]
 80160d4:	600b      	str	r3, [r1, #0]
 80160d6:	7812      	ldrb	r2, [r2, #0]
 80160d8:	1e10      	subs	r0, r2, #0
 80160da:	bf18      	it	ne
 80160dc:	2001      	movne	r0, #1
 80160de:	b002      	add	sp, #8
 80160e0:	4770      	bx	lr
 80160e2:	4610      	mov	r0, r2
 80160e4:	e7fb      	b.n	80160de <__ascii_mbtowc+0x16>
 80160e6:	f06f 0001 	mvn.w	r0, #1
 80160ea:	e7f8      	b.n	80160de <__ascii_mbtowc+0x16>

080160ec <_realloc_r>:
 80160ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160f0:	4680      	mov	r8, r0
 80160f2:	4614      	mov	r4, r2
 80160f4:	460e      	mov	r6, r1
 80160f6:	b921      	cbnz	r1, 8016102 <_realloc_r+0x16>
 80160f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160fc:	4611      	mov	r1, r2
 80160fe:	f7ff b991 	b.w	8015424 <_malloc_r>
 8016102:	b92a      	cbnz	r2, 8016110 <_realloc_r+0x24>
 8016104:	f7ff f91a 	bl	801533c <_free_r>
 8016108:	4625      	mov	r5, r4
 801610a:	4628      	mov	r0, r5
 801610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016110:	f000 f841 	bl	8016196 <_malloc_usable_size_r>
 8016114:	4284      	cmp	r4, r0
 8016116:	4607      	mov	r7, r0
 8016118:	d802      	bhi.n	8016120 <_realloc_r+0x34>
 801611a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801611e:	d812      	bhi.n	8016146 <_realloc_r+0x5a>
 8016120:	4621      	mov	r1, r4
 8016122:	4640      	mov	r0, r8
 8016124:	f7ff f97e 	bl	8015424 <_malloc_r>
 8016128:	4605      	mov	r5, r0
 801612a:	2800      	cmp	r0, #0
 801612c:	d0ed      	beq.n	801610a <_realloc_r+0x1e>
 801612e:	42bc      	cmp	r4, r7
 8016130:	4622      	mov	r2, r4
 8016132:	4631      	mov	r1, r6
 8016134:	bf28      	it	cs
 8016136:	463a      	movcs	r2, r7
 8016138:	f7fe fa75 	bl	8014626 <memcpy>
 801613c:	4631      	mov	r1, r6
 801613e:	4640      	mov	r0, r8
 8016140:	f7ff f8fc 	bl	801533c <_free_r>
 8016144:	e7e1      	b.n	801610a <_realloc_r+0x1e>
 8016146:	4635      	mov	r5, r6
 8016148:	e7df      	b.n	801610a <_realloc_r+0x1e>

0801614a <__ascii_wctomb>:
 801614a:	b149      	cbz	r1, 8016160 <__ascii_wctomb+0x16>
 801614c:	2aff      	cmp	r2, #255	; 0xff
 801614e:	bf85      	ittet	hi
 8016150:	238a      	movhi	r3, #138	; 0x8a
 8016152:	6003      	strhi	r3, [r0, #0]
 8016154:	700a      	strbls	r2, [r1, #0]
 8016156:	f04f 30ff 	movhi.w	r0, #4294967295
 801615a:	bf98      	it	ls
 801615c:	2001      	movls	r0, #1
 801615e:	4770      	bx	lr
 8016160:	4608      	mov	r0, r1
 8016162:	4770      	bx	lr

08016164 <fiprintf>:
 8016164:	b40e      	push	{r1, r2, r3}
 8016166:	b503      	push	{r0, r1, lr}
 8016168:	4601      	mov	r1, r0
 801616a:	ab03      	add	r3, sp, #12
 801616c:	4805      	ldr	r0, [pc, #20]	; (8016184 <fiprintf+0x20>)
 801616e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016172:	6800      	ldr	r0, [r0, #0]
 8016174:	9301      	str	r3, [sp, #4]
 8016176:	f000 f83f 	bl	80161f8 <_vfiprintf_r>
 801617a:	b002      	add	sp, #8
 801617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016180:	b003      	add	sp, #12
 8016182:	4770      	bx	lr
 8016184:	20000410 	.word	0x20000410

08016188 <abort>:
 8016188:	b508      	push	{r3, lr}
 801618a:	2006      	movs	r0, #6
 801618c:	f000 fa0c 	bl	80165a8 <raise>
 8016190:	2001      	movs	r0, #1
 8016192:	f7ee fedd 	bl	8004f50 <_exit>

08016196 <_malloc_usable_size_r>:
 8016196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801619a:	1f18      	subs	r0, r3, #4
 801619c:	2b00      	cmp	r3, #0
 801619e:	bfbc      	itt	lt
 80161a0:	580b      	ldrlt	r3, [r1, r0]
 80161a2:	18c0      	addlt	r0, r0, r3
 80161a4:	4770      	bx	lr

080161a6 <__sfputc_r>:
 80161a6:	6893      	ldr	r3, [r2, #8]
 80161a8:	3b01      	subs	r3, #1
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	b410      	push	{r4}
 80161ae:	6093      	str	r3, [r2, #8]
 80161b0:	da08      	bge.n	80161c4 <__sfputc_r+0x1e>
 80161b2:	6994      	ldr	r4, [r2, #24]
 80161b4:	42a3      	cmp	r3, r4
 80161b6:	db01      	blt.n	80161bc <__sfputc_r+0x16>
 80161b8:	290a      	cmp	r1, #10
 80161ba:	d103      	bne.n	80161c4 <__sfputc_r+0x1e>
 80161bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161c0:	f000 b934 	b.w	801642c <__swbuf_r>
 80161c4:	6813      	ldr	r3, [r2, #0]
 80161c6:	1c58      	adds	r0, r3, #1
 80161c8:	6010      	str	r0, [r2, #0]
 80161ca:	7019      	strb	r1, [r3, #0]
 80161cc:	4608      	mov	r0, r1
 80161ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161d2:	4770      	bx	lr

080161d4 <__sfputs_r>:
 80161d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d6:	4606      	mov	r6, r0
 80161d8:	460f      	mov	r7, r1
 80161da:	4614      	mov	r4, r2
 80161dc:	18d5      	adds	r5, r2, r3
 80161de:	42ac      	cmp	r4, r5
 80161e0:	d101      	bne.n	80161e6 <__sfputs_r+0x12>
 80161e2:	2000      	movs	r0, #0
 80161e4:	e007      	b.n	80161f6 <__sfputs_r+0x22>
 80161e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161ea:	463a      	mov	r2, r7
 80161ec:	4630      	mov	r0, r6
 80161ee:	f7ff ffda 	bl	80161a6 <__sfputc_r>
 80161f2:	1c43      	adds	r3, r0, #1
 80161f4:	d1f3      	bne.n	80161de <__sfputs_r+0xa>
 80161f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080161f8 <_vfiprintf_r>:
 80161f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161fc:	460d      	mov	r5, r1
 80161fe:	b09d      	sub	sp, #116	; 0x74
 8016200:	4614      	mov	r4, r2
 8016202:	4698      	mov	r8, r3
 8016204:	4606      	mov	r6, r0
 8016206:	b118      	cbz	r0, 8016210 <_vfiprintf_r+0x18>
 8016208:	6a03      	ldr	r3, [r0, #32]
 801620a:	b90b      	cbnz	r3, 8016210 <_vfiprintf_r+0x18>
 801620c:	f7fe f882 	bl	8014314 <__sinit>
 8016210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016212:	07d9      	lsls	r1, r3, #31
 8016214:	d405      	bmi.n	8016222 <_vfiprintf_r+0x2a>
 8016216:	89ab      	ldrh	r3, [r5, #12]
 8016218:	059a      	lsls	r2, r3, #22
 801621a:	d402      	bmi.n	8016222 <_vfiprintf_r+0x2a>
 801621c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801621e:	f7fe fa00 	bl	8014622 <__retarget_lock_acquire_recursive>
 8016222:	89ab      	ldrh	r3, [r5, #12]
 8016224:	071b      	lsls	r3, r3, #28
 8016226:	d501      	bpl.n	801622c <_vfiprintf_r+0x34>
 8016228:	692b      	ldr	r3, [r5, #16]
 801622a:	b99b      	cbnz	r3, 8016254 <_vfiprintf_r+0x5c>
 801622c:	4629      	mov	r1, r5
 801622e:	4630      	mov	r0, r6
 8016230:	f000 f93a 	bl	80164a8 <__swsetup_r>
 8016234:	b170      	cbz	r0, 8016254 <_vfiprintf_r+0x5c>
 8016236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016238:	07dc      	lsls	r4, r3, #31
 801623a:	d504      	bpl.n	8016246 <_vfiprintf_r+0x4e>
 801623c:	f04f 30ff 	mov.w	r0, #4294967295
 8016240:	b01d      	add	sp, #116	; 0x74
 8016242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016246:	89ab      	ldrh	r3, [r5, #12]
 8016248:	0598      	lsls	r0, r3, #22
 801624a:	d4f7      	bmi.n	801623c <_vfiprintf_r+0x44>
 801624c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801624e:	f7fe f9e9 	bl	8014624 <__retarget_lock_release_recursive>
 8016252:	e7f3      	b.n	801623c <_vfiprintf_r+0x44>
 8016254:	2300      	movs	r3, #0
 8016256:	9309      	str	r3, [sp, #36]	; 0x24
 8016258:	2320      	movs	r3, #32
 801625a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801625e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016262:	2330      	movs	r3, #48	; 0x30
 8016264:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016418 <_vfiprintf_r+0x220>
 8016268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801626c:	f04f 0901 	mov.w	r9, #1
 8016270:	4623      	mov	r3, r4
 8016272:	469a      	mov	sl, r3
 8016274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016278:	b10a      	cbz	r2, 801627e <_vfiprintf_r+0x86>
 801627a:	2a25      	cmp	r2, #37	; 0x25
 801627c:	d1f9      	bne.n	8016272 <_vfiprintf_r+0x7a>
 801627e:	ebba 0b04 	subs.w	fp, sl, r4
 8016282:	d00b      	beq.n	801629c <_vfiprintf_r+0xa4>
 8016284:	465b      	mov	r3, fp
 8016286:	4622      	mov	r2, r4
 8016288:	4629      	mov	r1, r5
 801628a:	4630      	mov	r0, r6
 801628c:	f7ff ffa2 	bl	80161d4 <__sfputs_r>
 8016290:	3001      	adds	r0, #1
 8016292:	f000 80a9 	beq.w	80163e8 <_vfiprintf_r+0x1f0>
 8016296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016298:	445a      	add	r2, fp
 801629a:	9209      	str	r2, [sp, #36]	; 0x24
 801629c:	f89a 3000 	ldrb.w	r3, [sl]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f000 80a1 	beq.w	80163e8 <_vfiprintf_r+0x1f0>
 80162a6:	2300      	movs	r3, #0
 80162a8:	f04f 32ff 	mov.w	r2, #4294967295
 80162ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162b0:	f10a 0a01 	add.w	sl, sl, #1
 80162b4:	9304      	str	r3, [sp, #16]
 80162b6:	9307      	str	r3, [sp, #28]
 80162b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162bc:	931a      	str	r3, [sp, #104]	; 0x68
 80162be:	4654      	mov	r4, sl
 80162c0:	2205      	movs	r2, #5
 80162c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162c6:	4854      	ldr	r0, [pc, #336]	; (8016418 <_vfiprintf_r+0x220>)
 80162c8:	f7e9 ff9a 	bl	8000200 <memchr>
 80162cc:	9a04      	ldr	r2, [sp, #16]
 80162ce:	b9d8      	cbnz	r0, 8016308 <_vfiprintf_r+0x110>
 80162d0:	06d1      	lsls	r1, r2, #27
 80162d2:	bf44      	itt	mi
 80162d4:	2320      	movmi	r3, #32
 80162d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162da:	0713      	lsls	r3, r2, #28
 80162dc:	bf44      	itt	mi
 80162de:	232b      	movmi	r3, #43	; 0x2b
 80162e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162e4:	f89a 3000 	ldrb.w	r3, [sl]
 80162e8:	2b2a      	cmp	r3, #42	; 0x2a
 80162ea:	d015      	beq.n	8016318 <_vfiprintf_r+0x120>
 80162ec:	9a07      	ldr	r2, [sp, #28]
 80162ee:	4654      	mov	r4, sl
 80162f0:	2000      	movs	r0, #0
 80162f2:	f04f 0c0a 	mov.w	ip, #10
 80162f6:	4621      	mov	r1, r4
 80162f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162fc:	3b30      	subs	r3, #48	; 0x30
 80162fe:	2b09      	cmp	r3, #9
 8016300:	d94d      	bls.n	801639e <_vfiprintf_r+0x1a6>
 8016302:	b1b0      	cbz	r0, 8016332 <_vfiprintf_r+0x13a>
 8016304:	9207      	str	r2, [sp, #28]
 8016306:	e014      	b.n	8016332 <_vfiprintf_r+0x13a>
 8016308:	eba0 0308 	sub.w	r3, r0, r8
 801630c:	fa09 f303 	lsl.w	r3, r9, r3
 8016310:	4313      	orrs	r3, r2
 8016312:	9304      	str	r3, [sp, #16]
 8016314:	46a2      	mov	sl, r4
 8016316:	e7d2      	b.n	80162be <_vfiprintf_r+0xc6>
 8016318:	9b03      	ldr	r3, [sp, #12]
 801631a:	1d19      	adds	r1, r3, #4
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	9103      	str	r1, [sp, #12]
 8016320:	2b00      	cmp	r3, #0
 8016322:	bfbb      	ittet	lt
 8016324:	425b      	neglt	r3, r3
 8016326:	f042 0202 	orrlt.w	r2, r2, #2
 801632a:	9307      	strge	r3, [sp, #28]
 801632c:	9307      	strlt	r3, [sp, #28]
 801632e:	bfb8      	it	lt
 8016330:	9204      	strlt	r2, [sp, #16]
 8016332:	7823      	ldrb	r3, [r4, #0]
 8016334:	2b2e      	cmp	r3, #46	; 0x2e
 8016336:	d10c      	bne.n	8016352 <_vfiprintf_r+0x15a>
 8016338:	7863      	ldrb	r3, [r4, #1]
 801633a:	2b2a      	cmp	r3, #42	; 0x2a
 801633c:	d134      	bne.n	80163a8 <_vfiprintf_r+0x1b0>
 801633e:	9b03      	ldr	r3, [sp, #12]
 8016340:	1d1a      	adds	r2, r3, #4
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	9203      	str	r2, [sp, #12]
 8016346:	2b00      	cmp	r3, #0
 8016348:	bfb8      	it	lt
 801634a:	f04f 33ff 	movlt.w	r3, #4294967295
 801634e:	3402      	adds	r4, #2
 8016350:	9305      	str	r3, [sp, #20]
 8016352:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016428 <_vfiprintf_r+0x230>
 8016356:	7821      	ldrb	r1, [r4, #0]
 8016358:	2203      	movs	r2, #3
 801635a:	4650      	mov	r0, sl
 801635c:	f7e9 ff50 	bl	8000200 <memchr>
 8016360:	b138      	cbz	r0, 8016372 <_vfiprintf_r+0x17a>
 8016362:	9b04      	ldr	r3, [sp, #16]
 8016364:	eba0 000a 	sub.w	r0, r0, sl
 8016368:	2240      	movs	r2, #64	; 0x40
 801636a:	4082      	lsls	r2, r0
 801636c:	4313      	orrs	r3, r2
 801636e:	3401      	adds	r4, #1
 8016370:	9304      	str	r3, [sp, #16]
 8016372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016376:	4829      	ldr	r0, [pc, #164]	; (801641c <_vfiprintf_r+0x224>)
 8016378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801637c:	2206      	movs	r2, #6
 801637e:	f7e9 ff3f 	bl	8000200 <memchr>
 8016382:	2800      	cmp	r0, #0
 8016384:	d03f      	beq.n	8016406 <_vfiprintf_r+0x20e>
 8016386:	4b26      	ldr	r3, [pc, #152]	; (8016420 <_vfiprintf_r+0x228>)
 8016388:	bb1b      	cbnz	r3, 80163d2 <_vfiprintf_r+0x1da>
 801638a:	9b03      	ldr	r3, [sp, #12]
 801638c:	3307      	adds	r3, #7
 801638e:	f023 0307 	bic.w	r3, r3, #7
 8016392:	3308      	adds	r3, #8
 8016394:	9303      	str	r3, [sp, #12]
 8016396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016398:	443b      	add	r3, r7
 801639a:	9309      	str	r3, [sp, #36]	; 0x24
 801639c:	e768      	b.n	8016270 <_vfiprintf_r+0x78>
 801639e:	fb0c 3202 	mla	r2, ip, r2, r3
 80163a2:	460c      	mov	r4, r1
 80163a4:	2001      	movs	r0, #1
 80163a6:	e7a6      	b.n	80162f6 <_vfiprintf_r+0xfe>
 80163a8:	2300      	movs	r3, #0
 80163aa:	3401      	adds	r4, #1
 80163ac:	9305      	str	r3, [sp, #20]
 80163ae:	4619      	mov	r1, r3
 80163b0:	f04f 0c0a 	mov.w	ip, #10
 80163b4:	4620      	mov	r0, r4
 80163b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163ba:	3a30      	subs	r2, #48	; 0x30
 80163bc:	2a09      	cmp	r2, #9
 80163be:	d903      	bls.n	80163c8 <_vfiprintf_r+0x1d0>
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d0c6      	beq.n	8016352 <_vfiprintf_r+0x15a>
 80163c4:	9105      	str	r1, [sp, #20]
 80163c6:	e7c4      	b.n	8016352 <_vfiprintf_r+0x15a>
 80163c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80163cc:	4604      	mov	r4, r0
 80163ce:	2301      	movs	r3, #1
 80163d0:	e7f0      	b.n	80163b4 <_vfiprintf_r+0x1bc>
 80163d2:	ab03      	add	r3, sp, #12
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	462a      	mov	r2, r5
 80163d8:	4b12      	ldr	r3, [pc, #72]	; (8016424 <_vfiprintf_r+0x22c>)
 80163da:	a904      	add	r1, sp, #16
 80163dc:	4630      	mov	r0, r6
 80163de:	f7fd fb47 	bl	8013a70 <_printf_float>
 80163e2:	4607      	mov	r7, r0
 80163e4:	1c78      	adds	r0, r7, #1
 80163e6:	d1d6      	bne.n	8016396 <_vfiprintf_r+0x19e>
 80163e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163ea:	07d9      	lsls	r1, r3, #31
 80163ec:	d405      	bmi.n	80163fa <_vfiprintf_r+0x202>
 80163ee:	89ab      	ldrh	r3, [r5, #12]
 80163f0:	059a      	lsls	r2, r3, #22
 80163f2:	d402      	bmi.n	80163fa <_vfiprintf_r+0x202>
 80163f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163f6:	f7fe f915 	bl	8014624 <__retarget_lock_release_recursive>
 80163fa:	89ab      	ldrh	r3, [r5, #12]
 80163fc:	065b      	lsls	r3, r3, #25
 80163fe:	f53f af1d 	bmi.w	801623c <_vfiprintf_r+0x44>
 8016402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016404:	e71c      	b.n	8016240 <_vfiprintf_r+0x48>
 8016406:	ab03      	add	r3, sp, #12
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	462a      	mov	r2, r5
 801640c:	4b05      	ldr	r3, [pc, #20]	; (8016424 <_vfiprintf_r+0x22c>)
 801640e:	a904      	add	r1, sp, #16
 8016410:	4630      	mov	r0, r6
 8016412:	f7fd fdd1 	bl	8013fb8 <_printf_i>
 8016416:	e7e4      	b.n	80163e2 <_vfiprintf_r+0x1ea>
 8016418:	08016f5c 	.word	0x08016f5c
 801641c:	08016f66 	.word	0x08016f66
 8016420:	08013a71 	.word	0x08013a71
 8016424:	080161d5 	.word	0x080161d5
 8016428:	08016f62 	.word	0x08016f62

0801642c <__swbuf_r>:
 801642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801642e:	460e      	mov	r6, r1
 8016430:	4614      	mov	r4, r2
 8016432:	4605      	mov	r5, r0
 8016434:	b118      	cbz	r0, 801643e <__swbuf_r+0x12>
 8016436:	6a03      	ldr	r3, [r0, #32]
 8016438:	b90b      	cbnz	r3, 801643e <__swbuf_r+0x12>
 801643a:	f7fd ff6b 	bl	8014314 <__sinit>
 801643e:	69a3      	ldr	r3, [r4, #24]
 8016440:	60a3      	str	r3, [r4, #8]
 8016442:	89a3      	ldrh	r3, [r4, #12]
 8016444:	071a      	lsls	r2, r3, #28
 8016446:	d525      	bpl.n	8016494 <__swbuf_r+0x68>
 8016448:	6923      	ldr	r3, [r4, #16]
 801644a:	b31b      	cbz	r3, 8016494 <__swbuf_r+0x68>
 801644c:	6823      	ldr	r3, [r4, #0]
 801644e:	6922      	ldr	r2, [r4, #16]
 8016450:	1a98      	subs	r0, r3, r2
 8016452:	6963      	ldr	r3, [r4, #20]
 8016454:	b2f6      	uxtb	r6, r6
 8016456:	4283      	cmp	r3, r0
 8016458:	4637      	mov	r7, r6
 801645a:	dc04      	bgt.n	8016466 <__swbuf_r+0x3a>
 801645c:	4621      	mov	r1, r4
 801645e:	4628      	mov	r0, r5
 8016460:	f7ff fdc6 	bl	8015ff0 <_fflush_r>
 8016464:	b9e0      	cbnz	r0, 80164a0 <__swbuf_r+0x74>
 8016466:	68a3      	ldr	r3, [r4, #8]
 8016468:	3b01      	subs	r3, #1
 801646a:	60a3      	str	r3, [r4, #8]
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	1c5a      	adds	r2, r3, #1
 8016470:	6022      	str	r2, [r4, #0]
 8016472:	701e      	strb	r6, [r3, #0]
 8016474:	6962      	ldr	r2, [r4, #20]
 8016476:	1c43      	adds	r3, r0, #1
 8016478:	429a      	cmp	r2, r3
 801647a:	d004      	beq.n	8016486 <__swbuf_r+0x5a>
 801647c:	89a3      	ldrh	r3, [r4, #12]
 801647e:	07db      	lsls	r3, r3, #31
 8016480:	d506      	bpl.n	8016490 <__swbuf_r+0x64>
 8016482:	2e0a      	cmp	r6, #10
 8016484:	d104      	bne.n	8016490 <__swbuf_r+0x64>
 8016486:	4621      	mov	r1, r4
 8016488:	4628      	mov	r0, r5
 801648a:	f7ff fdb1 	bl	8015ff0 <_fflush_r>
 801648e:	b938      	cbnz	r0, 80164a0 <__swbuf_r+0x74>
 8016490:	4638      	mov	r0, r7
 8016492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016494:	4621      	mov	r1, r4
 8016496:	4628      	mov	r0, r5
 8016498:	f000 f806 	bl	80164a8 <__swsetup_r>
 801649c:	2800      	cmp	r0, #0
 801649e:	d0d5      	beq.n	801644c <__swbuf_r+0x20>
 80164a0:	f04f 37ff 	mov.w	r7, #4294967295
 80164a4:	e7f4      	b.n	8016490 <__swbuf_r+0x64>
	...

080164a8 <__swsetup_r>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	4b2a      	ldr	r3, [pc, #168]	; (8016554 <__swsetup_r+0xac>)
 80164ac:	4605      	mov	r5, r0
 80164ae:	6818      	ldr	r0, [r3, #0]
 80164b0:	460c      	mov	r4, r1
 80164b2:	b118      	cbz	r0, 80164bc <__swsetup_r+0x14>
 80164b4:	6a03      	ldr	r3, [r0, #32]
 80164b6:	b90b      	cbnz	r3, 80164bc <__swsetup_r+0x14>
 80164b8:	f7fd ff2c 	bl	8014314 <__sinit>
 80164bc:	89a3      	ldrh	r3, [r4, #12]
 80164be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164c2:	0718      	lsls	r0, r3, #28
 80164c4:	d422      	bmi.n	801650c <__swsetup_r+0x64>
 80164c6:	06d9      	lsls	r1, r3, #27
 80164c8:	d407      	bmi.n	80164da <__swsetup_r+0x32>
 80164ca:	2309      	movs	r3, #9
 80164cc:	602b      	str	r3, [r5, #0]
 80164ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80164d2:	81a3      	strh	r3, [r4, #12]
 80164d4:	f04f 30ff 	mov.w	r0, #4294967295
 80164d8:	e034      	b.n	8016544 <__swsetup_r+0x9c>
 80164da:	0758      	lsls	r0, r3, #29
 80164dc:	d512      	bpl.n	8016504 <__swsetup_r+0x5c>
 80164de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164e0:	b141      	cbz	r1, 80164f4 <__swsetup_r+0x4c>
 80164e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164e6:	4299      	cmp	r1, r3
 80164e8:	d002      	beq.n	80164f0 <__swsetup_r+0x48>
 80164ea:	4628      	mov	r0, r5
 80164ec:	f7fe ff26 	bl	801533c <_free_r>
 80164f0:	2300      	movs	r3, #0
 80164f2:	6363      	str	r3, [r4, #52]	; 0x34
 80164f4:	89a3      	ldrh	r3, [r4, #12]
 80164f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80164fa:	81a3      	strh	r3, [r4, #12]
 80164fc:	2300      	movs	r3, #0
 80164fe:	6063      	str	r3, [r4, #4]
 8016500:	6923      	ldr	r3, [r4, #16]
 8016502:	6023      	str	r3, [r4, #0]
 8016504:	89a3      	ldrh	r3, [r4, #12]
 8016506:	f043 0308 	orr.w	r3, r3, #8
 801650a:	81a3      	strh	r3, [r4, #12]
 801650c:	6923      	ldr	r3, [r4, #16]
 801650e:	b94b      	cbnz	r3, 8016524 <__swsetup_r+0x7c>
 8016510:	89a3      	ldrh	r3, [r4, #12]
 8016512:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801651a:	d003      	beq.n	8016524 <__swsetup_r+0x7c>
 801651c:	4621      	mov	r1, r4
 801651e:	4628      	mov	r0, r5
 8016520:	f000 f884 	bl	801662c <__smakebuf_r>
 8016524:	89a0      	ldrh	r0, [r4, #12]
 8016526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801652a:	f010 0301 	ands.w	r3, r0, #1
 801652e:	d00a      	beq.n	8016546 <__swsetup_r+0x9e>
 8016530:	2300      	movs	r3, #0
 8016532:	60a3      	str	r3, [r4, #8]
 8016534:	6963      	ldr	r3, [r4, #20]
 8016536:	425b      	negs	r3, r3
 8016538:	61a3      	str	r3, [r4, #24]
 801653a:	6923      	ldr	r3, [r4, #16]
 801653c:	b943      	cbnz	r3, 8016550 <__swsetup_r+0xa8>
 801653e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016542:	d1c4      	bne.n	80164ce <__swsetup_r+0x26>
 8016544:	bd38      	pop	{r3, r4, r5, pc}
 8016546:	0781      	lsls	r1, r0, #30
 8016548:	bf58      	it	pl
 801654a:	6963      	ldrpl	r3, [r4, #20]
 801654c:	60a3      	str	r3, [r4, #8]
 801654e:	e7f4      	b.n	801653a <__swsetup_r+0x92>
 8016550:	2000      	movs	r0, #0
 8016552:	e7f7      	b.n	8016544 <__swsetup_r+0x9c>
 8016554:	20000410 	.word	0x20000410

08016558 <_raise_r>:
 8016558:	291f      	cmp	r1, #31
 801655a:	b538      	push	{r3, r4, r5, lr}
 801655c:	4604      	mov	r4, r0
 801655e:	460d      	mov	r5, r1
 8016560:	d904      	bls.n	801656c <_raise_r+0x14>
 8016562:	2316      	movs	r3, #22
 8016564:	6003      	str	r3, [r0, #0]
 8016566:	f04f 30ff 	mov.w	r0, #4294967295
 801656a:	bd38      	pop	{r3, r4, r5, pc}
 801656c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801656e:	b112      	cbz	r2, 8016576 <_raise_r+0x1e>
 8016570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016574:	b94b      	cbnz	r3, 801658a <_raise_r+0x32>
 8016576:	4620      	mov	r0, r4
 8016578:	f000 f830 	bl	80165dc <_getpid_r>
 801657c:	462a      	mov	r2, r5
 801657e:	4601      	mov	r1, r0
 8016580:	4620      	mov	r0, r4
 8016582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016586:	f000 b817 	b.w	80165b8 <_kill_r>
 801658a:	2b01      	cmp	r3, #1
 801658c:	d00a      	beq.n	80165a4 <_raise_r+0x4c>
 801658e:	1c59      	adds	r1, r3, #1
 8016590:	d103      	bne.n	801659a <_raise_r+0x42>
 8016592:	2316      	movs	r3, #22
 8016594:	6003      	str	r3, [r0, #0]
 8016596:	2001      	movs	r0, #1
 8016598:	e7e7      	b.n	801656a <_raise_r+0x12>
 801659a:	2400      	movs	r4, #0
 801659c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165a0:	4628      	mov	r0, r5
 80165a2:	4798      	blx	r3
 80165a4:	2000      	movs	r0, #0
 80165a6:	e7e0      	b.n	801656a <_raise_r+0x12>

080165a8 <raise>:
 80165a8:	4b02      	ldr	r3, [pc, #8]	; (80165b4 <raise+0xc>)
 80165aa:	4601      	mov	r1, r0
 80165ac:	6818      	ldr	r0, [r3, #0]
 80165ae:	f7ff bfd3 	b.w	8016558 <_raise_r>
 80165b2:	bf00      	nop
 80165b4:	20000410 	.word	0x20000410

080165b8 <_kill_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	4d07      	ldr	r5, [pc, #28]	; (80165d8 <_kill_r+0x20>)
 80165bc:	2300      	movs	r3, #0
 80165be:	4604      	mov	r4, r0
 80165c0:	4608      	mov	r0, r1
 80165c2:	4611      	mov	r1, r2
 80165c4:	602b      	str	r3, [r5, #0]
 80165c6:	f7ee fcb3 	bl	8004f30 <_kill>
 80165ca:	1c43      	adds	r3, r0, #1
 80165cc:	d102      	bne.n	80165d4 <_kill_r+0x1c>
 80165ce:	682b      	ldr	r3, [r5, #0]
 80165d0:	b103      	cbz	r3, 80165d4 <_kill_r+0x1c>
 80165d2:	6023      	str	r3, [r4, #0]
 80165d4:	bd38      	pop	{r3, r4, r5, pc}
 80165d6:	bf00      	nop
 80165d8:	20009964 	.word	0x20009964

080165dc <_getpid_r>:
 80165dc:	f7ee bca0 	b.w	8004f20 <_getpid>

080165e0 <__swhatbuf_r>:
 80165e0:	b570      	push	{r4, r5, r6, lr}
 80165e2:	460c      	mov	r4, r1
 80165e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165e8:	2900      	cmp	r1, #0
 80165ea:	b096      	sub	sp, #88	; 0x58
 80165ec:	4615      	mov	r5, r2
 80165ee:	461e      	mov	r6, r3
 80165f0:	da0d      	bge.n	801660e <__swhatbuf_r+0x2e>
 80165f2:	89a3      	ldrh	r3, [r4, #12]
 80165f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80165f8:	f04f 0100 	mov.w	r1, #0
 80165fc:	bf0c      	ite	eq
 80165fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016602:	2340      	movne	r3, #64	; 0x40
 8016604:	2000      	movs	r0, #0
 8016606:	6031      	str	r1, [r6, #0]
 8016608:	602b      	str	r3, [r5, #0]
 801660a:	b016      	add	sp, #88	; 0x58
 801660c:	bd70      	pop	{r4, r5, r6, pc}
 801660e:	466a      	mov	r2, sp
 8016610:	f000 f848 	bl	80166a4 <_fstat_r>
 8016614:	2800      	cmp	r0, #0
 8016616:	dbec      	blt.n	80165f2 <__swhatbuf_r+0x12>
 8016618:	9901      	ldr	r1, [sp, #4]
 801661a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801661e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016622:	4259      	negs	r1, r3
 8016624:	4159      	adcs	r1, r3
 8016626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801662a:	e7eb      	b.n	8016604 <__swhatbuf_r+0x24>

0801662c <__smakebuf_r>:
 801662c:	898b      	ldrh	r3, [r1, #12]
 801662e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016630:	079d      	lsls	r5, r3, #30
 8016632:	4606      	mov	r6, r0
 8016634:	460c      	mov	r4, r1
 8016636:	d507      	bpl.n	8016648 <__smakebuf_r+0x1c>
 8016638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801663c:	6023      	str	r3, [r4, #0]
 801663e:	6123      	str	r3, [r4, #16]
 8016640:	2301      	movs	r3, #1
 8016642:	6163      	str	r3, [r4, #20]
 8016644:	b002      	add	sp, #8
 8016646:	bd70      	pop	{r4, r5, r6, pc}
 8016648:	ab01      	add	r3, sp, #4
 801664a:	466a      	mov	r2, sp
 801664c:	f7ff ffc8 	bl	80165e0 <__swhatbuf_r>
 8016650:	9900      	ldr	r1, [sp, #0]
 8016652:	4605      	mov	r5, r0
 8016654:	4630      	mov	r0, r6
 8016656:	f7fe fee5 	bl	8015424 <_malloc_r>
 801665a:	b948      	cbnz	r0, 8016670 <__smakebuf_r+0x44>
 801665c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016660:	059a      	lsls	r2, r3, #22
 8016662:	d4ef      	bmi.n	8016644 <__smakebuf_r+0x18>
 8016664:	f023 0303 	bic.w	r3, r3, #3
 8016668:	f043 0302 	orr.w	r3, r3, #2
 801666c:	81a3      	strh	r3, [r4, #12]
 801666e:	e7e3      	b.n	8016638 <__smakebuf_r+0xc>
 8016670:	89a3      	ldrh	r3, [r4, #12]
 8016672:	6020      	str	r0, [r4, #0]
 8016674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016678:	81a3      	strh	r3, [r4, #12]
 801667a:	9b00      	ldr	r3, [sp, #0]
 801667c:	6163      	str	r3, [r4, #20]
 801667e:	9b01      	ldr	r3, [sp, #4]
 8016680:	6120      	str	r0, [r4, #16]
 8016682:	b15b      	cbz	r3, 801669c <__smakebuf_r+0x70>
 8016684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016688:	4630      	mov	r0, r6
 801668a:	f000 f81d 	bl	80166c8 <_isatty_r>
 801668e:	b128      	cbz	r0, 801669c <__smakebuf_r+0x70>
 8016690:	89a3      	ldrh	r3, [r4, #12]
 8016692:	f023 0303 	bic.w	r3, r3, #3
 8016696:	f043 0301 	orr.w	r3, r3, #1
 801669a:	81a3      	strh	r3, [r4, #12]
 801669c:	89a3      	ldrh	r3, [r4, #12]
 801669e:	431d      	orrs	r5, r3
 80166a0:	81a5      	strh	r5, [r4, #12]
 80166a2:	e7cf      	b.n	8016644 <__smakebuf_r+0x18>

080166a4 <_fstat_r>:
 80166a4:	b538      	push	{r3, r4, r5, lr}
 80166a6:	4d07      	ldr	r5, [pc, #28]	; (80166c4 <_fstat_r+0x20>)
 80166a8:	2300      	movs	r3, #0
 80166aa:	4604      	mov	r4, r0
 80166ac:	4608      	mov	r0, r1
 80166ae:	4611      	mov	r1, r2
 80166b0:	602b      	str	r3, [r5, #0]
 80166b2:	f7ee fc9c 	bl	8004fee <_fstat>
 80166b6:	1c43      	adds	r3, r0, #1
 80166b8:	d102      	bne.n	80166c0 <_fstat_r+0x1c>
 80166ba:	682b      	ldr	r3, [r5, #0]
 80166bc:	b103      	cbz	r3, 80166c0 <_fstat_r+0x1c>
 80166be:	6023      	str	r3, [r4, #0]
 80166c0:	bd38      	pop	{r3, r4, r5, pc}
 80166c2:	bf00      	nop
 80166c4:	20009964 	.word	0x20009964

080166c8 <_isatty_r>:
 80166c8:	b538      	push	{r3, r4, r5, lr}
 80166ca:	4d06      	ldr	r5, [pc, #24]	; (80166e4 <_isatty_r+0x1c>)
 80166cc:	2300      	movs	r3, #0
 80166ce:	4604      	mov	r4, r0
 80166d0:	4608      	mov	r0, r1
 80166d2:	602b      	str	r3, [r5, #0]
 80166d4:	f7ee fc9b 	bl	800500e <_isatty>
 80166d8:	1c43      	adds	r3, r0, #1
 80166da:	d102      	bne.n	80166e2 <_isatty_r+0x1a>
 80166dc:	682b      	ldr	r3, [r5, #0]
 80166de:	b103      	cbz	r3, 80166e2 <_isatty_r+0x1a>
 80166e0:	6023      	str	r3, [r4, #0]
 80166e2:	bd38      	pop	{r3, r4, r5, pc}
 80166e4:	20009964 	.word	0x20009964

080166e8 <_init>:
 80166e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ea:	bf00      	nop
 80166ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ee:	bc08      	pop	{r3}
 80166f0:	469e      	mov	lr, r3
 80166f2:	4770      	bx	lr

080166f4 <_fini>:
 80166f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f6:	bf00      	nop
 80166f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166fa:	bc08      	pop	{r3}
 80166fc:	469e      	mov	lr, r3
 80166fe:	4770      	bx	lr
