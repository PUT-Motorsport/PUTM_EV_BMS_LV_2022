
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000163d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  08016590  08016590  00026590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f34  08016f34  000304e8  2**0
                  CONTENTS
  4 .ARM          00000000  08016f34  08016f34  000304e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016f34  08016f34  000304e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08016f34  08016f34  00026f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f44  08016f44  00026f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e8  20000000  08016f48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092e8  200004e8  08017430  000304e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097d0  08017430  000397d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b3dc  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008879  00000000  00000000  0007b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ac0  00000000  00000000  00084170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027c8  00000000  00000000  00086c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b986  00000000  00000000  000893f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036e57  00000000  00000000  000c4d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014d496  00000000  00000000  000fbbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024906b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c764  00000000  00000000  002490bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200004e8 	.word	0x200004e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016578 	.word	0x08016578

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200004ec 	.word	0x200004ec
 80001fc:	08016578 	.word	0x08016578

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <_Z20discharge_cells_tailRi>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int &i){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(5 == i)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d106      	bne.n	8000c96 <_Z20discharge_cells_tailRi+0x1e>
		return i = -1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	e001      	b.n	8000c9a <_Z20discharge_cells_tailRi+0x22>
	else
		return i;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d811      	bhi.n	8000cde <_Z18set_discharge_cellRhRi+0x36>
	{
		data.charging.cell_discharge[i] = true;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <_Z18set_discharge_cellRhRi+0x64>)
 8000cc0:	4413      	add	r3, r2
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	601a      	str	r2, [r3, #0]
	}
	data.charging.discharge_activation = true;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <_Z18set_discharge_cellRhRi+0x64>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000ce6:	f004 f911 	bl	8004f0c <HAL_GetTick>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cf0:	3310      	adds	r3, #16
 8000cf2:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <_Z18set_discharge_cellRhRi+0x64>)
 8000cf4:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c

	i=discharge_cells_tail(i);
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f7ff ffbd 	bl	8000c78 <_Z20discharge_cells_tailRi>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20001398 	.word	0x20001398

08000d10 <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d812      	bhi.n	8000d50 <_Z22set_discharge_cell_maxRhRiRb+0x40>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d2c:	8bdb      	ldrh	r3, [r3, #30]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d32:	4413      	add	r3, r2
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d48:	8bdb      	ldrh	r3, [r3, #30]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	601a      	str	r2, [r3, #0]
	}

	data.charging.discharge_activation = true;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000d58:	f004 f8d8 	bl	8004f0c <HAL_GetTick>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000d62:	3310      	adds	r3, #16
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d66:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c

	i=discharge_cells_tail(i);
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	f7ff ff84 	bl	8000c78 <_Z20discharge_cells_tailRi>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20001398 	.word	0x20001398

08000d84 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	75bb      	strb	r3, [r7, #22]
 8000d92:	2300      	movs	r3, #0
 8000d94:	757b      	strb	r3, [r7, #21]
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73bb      	strb	r3, [r7, #14]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d83c      	bhi.n	8000e26 <_Z15balance_controlv+0xa2>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000dac:	4b94      	ldr	r3, [pc, #592]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000dae:	8b9b      	ldrh	r3, [r3, #28]
 8000db0:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d807      	bhi.n	8000dc8 <_Z15balance_controlv+0x44>
 8000db8:	4b91      	ldr	r3, [pc, #580]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000dba:	8b9b      	ldrh	r3, [r3, #28]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b90      	ldr	r3, [pc, #576]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000dc0:	8b5b      	ldrh	r3, [r3, #26]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b32      	cmp	r3, #50	; 0x32
 8000dc6:	dd01      	ble.n	8000dcc <_Z15balance_controlv+0x48>
		{
			max_voltage_discharge_activation= true;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000dcc:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000dce:	8b9b      	ldrh	r3, [r3, #28]
 8000dd0:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d901      	bls.n	8000ddc <_Z15balance_controlv+0x58>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000ddc:	4a88      	ldr	r2, [pc, #544]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de4:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d902      	bls.n	8000df2 <_Z15balance_controlv+0x6e>
		{
			charged_cells++;
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	3301      	adds	r3, #1
 8000df0:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000df2:	4a83      	ldr	r2, [pc, #524]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfa:	f24a 32de 	movw	r2, #41950	; 0xa3de
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d902      	bls.n	8000e08 <_Z15balance_controlv+0x84>
		{
			nearly_charged_cells++;
 8000e02:	7dbb      	ldrb	r3, [r7, #22]
 8000e04:	3301      	adds	r3, #1
 8000e06:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000e08:	4a7d      	ldr	r2, [pc, #500]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d902      	bls.n	8000e1e <_Z15balance_controlv+0x9a>
		{
			cell_overcharged++;
 8000e18:	7d7b      	ldrb	r3, [r7, #21]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	3301      	adds	r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	e7bf      	b.n	8000da6 <_Z15balance_controlv+0x22>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d926      	bls.n	8000e7a <_Z15balance_controlv+0xf6>
 8000e2c:	4b74      	ldr	r3, [pc, #464]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000e2e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000e32:	eef0 7ae7 	vabs.f32	s15, s15
 8000e36:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001004 <_Z15balance_controlv+0x280>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	d51a      	bpl.n	8000e7a <_Z15balance_controlv+0xf6>
 8000e44:	7dbb      	ldrb	r3, [r7, #22]
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d117      	bne.n	8000e7a <_Z15balance_controlv+0xf6>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f007 f93f 	bl	80080d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	486a      	ldr	r0, [pc, #424]	; (8001008 <_Z15balance_controlv+0x284>)
 8000e5e:	f007 f939 	bl	80080d4 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000e62:	486a      	ldr	r0, [pc, #424]	; (800100c <_Z15balance_controlv+0x288>)
 8000e64:	f003 f8b8 	bl	8003fd8 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000e68:	4b65      	ldr	r3, [pc, #404]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000e70:	4b63      	ldr	r3, [pc, #396]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000e78:	e043      	b.n	8000f02 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1)
 8000e7a:	7d7b      	ldrb	r3, [r7, #21]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d914      	bls.n	8000eaa <_Z15balance_controlv+0x126>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2104      	movs	r1, #4
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f007 f924 	bl	80080d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	485d      	ldr	r0, [pc, #372]	; (8001008 <_Z15balance_controlv+0x284>)
 8000e94:	f007 f91e 	bl	80080d4 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e98:	4b59      	ldr	r3, [pc, #356]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000ea8:	e02b      	b.n	8000f02 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch on
	else if(HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin) == 0 && nearly_charged_cells < 6 && data.charging.discharge_activation == 0 && cell_overcharged == 0)// && acuState == 0)
 8000eaa:	2104      	movs	r1, #4
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f007 f8f8 	bl	80080a4 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <_Z15balance_controlv+0x150>
 8000eba:	7dbb      	ldrb	r3, [r7, #22]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d809      	bhi.n	8000ed4 <_Z15balance_controlv+0x150>
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000ec2:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <_Z15balance_controlv+0x150>
 8000eca:	7d7b      	ldrb	r3, [r7, #21]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <_Z15balance_controlv+0x150>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <_Z15balance_controlv+0x152>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d013      	beq.n	8000f02 <_Z15balance_controlv+0x17e>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f007 f8f7 	bl	80080d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	4846      	ldr	r0, [pc, #280]	; (8001008 <_Z15balance_controlv+0x284>)
 8000eee:	f007 f8f1 	bl	80080d4 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 1;
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state) //charging on
 8000f02:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f04:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d144      	bne.n	8000f96 <_Z15balance_controlv+0x212>
	{
		if(false == data.charging.discharge_activation)
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f0e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d16f      	bne.n	8000ff6 <_Z15balance_controlv+0x272>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	dc6a      	bgt.n	8000ff6 <_Z15balance_controlv+0x272>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d109      	bne.n	8000f3a <_Z15balance_controlv+0x1b6>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000f26:	f107 020e 	add.w	r2, r7, #14
 8000f2a:	f107 0108 	add.w	r1, r7, #8
 8000f2e:	f107 030f 	add.w	r3, r7, #15
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff feec 	bl	8000d10 <_Z22set_discharge_cell_maxRhRiRb>
 8000f38:	e029      	b.n	8000f8e <_Z15balance_controlv+0x20a>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_UP_OK)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4a30      	ldr	r2, [pc, #192]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f42:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d908      	bls.n	8000f5c <_Z15balance_controlv+0x1d8>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	f107 030f 	add.w	r3, r7, #15
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fea7 	bl	8000ca8 <_Z18set_discharge_cellRhRi>
 8000f5a:	e018      	b.n	8000f8e <_Z15balance_controlv+0x20a>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f68:	8b5b      	ldrh	r3, [r3, #26]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b32      	cmp	r3, #50	; 0x32
 8000f6e:	dd08      	ble.n	8000f82 <_Z15balance_controlv+0x1fe>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe94 	bl	8000ca8 <_Z18set_discharge_cellRhRi>
 8000f80:	e005      	b.n	8000f8e <_Z15balance_controlv+0x20a>
				}
				else
					data.charging.cell_discharge[i] = 0;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f86:	4413      	add	r3, r2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	e7c1      	b.n	8000f1a <_Z15balance_controlv+0x196>
		}
	}
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(false == data.charging.discharge_activation)
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000f98:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d12a      	bne.n	8000ff6 <_Z15balance_controlv+0x272>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	dc25      	bgt.n	8000ff6 <_Z15balance_controlv+0x272>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <_Z15balance_controlv+0x23e>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000fb0:	f107 020d 	add.w	r2, r7, #13
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	f107 030f 	add.w	r3, r7, #15
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fea8 	bl	8000d10 <_Z22set_discharge_cell_maxRhRiRb>
 8000fc0:	e015      	b.n	8000fee <_Z15balance_controlv+0x26a>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_UP_OK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fca:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d907      	bls.n	8000fe2 <_Z15balance_controlv+0x25e>
				{
					set_discharge_cell(discharge_at_once, i);
 8000fd2:	1d3a      	adds	r2, r7, #4
 8000fd4:	f107 030f 	add.w	r3, r7, #15
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe64 	bl	8000ca8 <_Z18set_discharge_cellRhRi>
 8000fe0:	e005      	b.n	8000fee <_Z15balance_controlv+0x26a>
				}
				else
					data.charging.cell_discharge[i] = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <_Z15balance_controlv+0x27c>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e7d6      	b.n	8000fa4 <_Z15balance_controlv+0x220>
			}
		}
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20001398 	.word	0x20001398
 8001004:	3e99999a 	.word	0x3e99999a
 8001008:	48000800 	.word	0x48000800
 800100c:	2000156c 	.word	0x2000156c

08001010 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 8001018:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800101c:	2b01      	cmp	r3, #1
 800101e:	d114      	bne.n	800104a <_Z31balance_activation_deactivationv+0x3a>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b05      	cmp	r3, #5
 8001028:	dc26      	bgt.n	8001078 <_Z31balance_activation_deactivationv+0x68>
		{
			if(true == data.charging.cell_discharge[i])
 800102a:	4a15      	ldr	r2, [pc, #84]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d103      	bne.n	8001042 <_Z31balance_activation_deactivationv+0x32>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 800103a:	4912      	ldr	r1, [pc, #72]	; (8001084 <_Z31balance_activation_deactivationv+0x74>)
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 fc8b 	bl	8002958 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	e7ec      	b.n	8001024 <_Z31balance_activation_deactivationv+0x14>
			}
		}

	}
	else if(data.charging.discharge_tick_end <= HAL_GetTick())
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 800104c:	f8d3 429c 	ldr.w	r4, [r3, #668]	; 0x29c
 8001050:	f003 ff5c 	bl	8004f0c <HAL_GetTick>
 8001054:	4603      	mov	r3, r0
 8001056:	429c      	cmp	r4, r3
 8001058:	bf94      	ite	ls
 800105a:	2301      	movls	r3, #1
 800105c:	2300      	movhi	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <_Z31balance_activation_deactivationv+0x68>
	{
		data.charging.discharge_activation = 0;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		LTC_turn_off_discharge();
 800106c:	f001 fd64 	bl	8002b38 <_Z22LTC_turn_off_dischargev>
		osDelay(1500);
 8001070:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001074:	f00e fee2 	bl	800fe3c <osDelay>
	}
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	20001398 	.word	0x20001398
 8001084:	20001628 	.word	0x20001628

08001088 <_Z22start_balance_functionPv>:

void start_balance_function(void *argument){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001090:	2104      	movs	r1, #4
 8001092:	4813      	ldr	r0, [pc, #76]	; (80010e0 <_Z22start_balance_functionPv+0x58>)
 8001094:	f007 f806 	bl	80080a4 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <_Z22start_balance_functionPv+0x5c>)
 80010a6:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for(;;){
		osDelay(30);
 80010aa:	201e      	movs	r0, #30
 80010ac:	f00e fec6 	bl	800fe3c <osDelay>
		if(data.charging.charger_plugged) //charger is plugged
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <_Z22start_balance_functionPv+0x5c>)
 80010b2:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00a      	beq.n	80010d0 <_Z22start_balance_functionPv+0x48>
		{
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <_Z22start_balance_functionPv+0x60>)
 80010c2:	f007 f807 	bl	80080d4 <HAL_GPIO_WritePin>

			balance_control();
 80010c6:	f7ff fe5d 	bl	8000d84 <_Z15balance_controlv>
			balance_activation_deactivation();
 80010ca:	f7ff ffa1 	bl	8001010 <_Z31balance_activation_deactivationv>
 80010ce:	e7ec      	b.n	80010aa <_Z22start_balance_functionPv+0x22>

		}
		else	//charger is unplugged
		{
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <_Z22start_balance_functionPv+0x60>)
 80010d8:	f006 fffc 	bl	80080d4 <HAL_GPIO_WritePin>
		osDelay(30);
 80010dc:	e7e5      	b.n	80010aa <_Z22start_balance_functionPv+0x22>
 80010de:	bf00      	nop
 80010e0:	48000400 	.word	0x48000400
 80010e4:	20001398 	.word	0x20001398
 80010e8:	48000800 	.word	0x48000800

080010ec <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	2300      	movs	r3, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	601a      	str	r2, [r3, #0]
    {
    }
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    {
    }
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	461a      	mov	r2, r3
 8001158:	2300      	movs	r3, #0
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	6053      	str	r3, [r2, #4]
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	60d3      	str	r3, [r2, #12]
 8001162:	6113      	str	r3, [r2, #16]
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	331c      	adds	r3, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	331c      	adds	r3, #28
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f005 ff45 	bl	800700a <HAL_CAN_GetRxMessage>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
    this->status =
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791a      	ldrb	r2, [r3, #4]
 80011a0:	795b      	ldrb	r3, [r3, #5]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &telemetry_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	6938      	ldr	r0, [r7, #16]
 80011cc:	f000 fcaa 	bl	8001b24 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>
 80011d0:	6178      	str	r0, [r7, #20]
 80011d2:	6938      	ldr	r0, [r7, #16]
 80011d4:	f000 fcb2 	bl	8001b3c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d01f      	beq.n	8001222 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffd2 	bl	8001194 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00a      	beq.n	800121a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	4610      	mov	r0, r2
 8001214:	4798      	blx	r3
        return true;
 8001216:	2301      	movs	r3, #1
 8001218:	e004      	b.n	8001224 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e7db      	b.n	80011da <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8001222:	2300      	movs	r3, #0
  }
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff83 	bl	8001148 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8001242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001252:	f7ff ffb1 	bl	80011b8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
 8001256:	4603      	mov	r3, r0
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      // Unknown message
      Error_Handler();
 8001262:	f002 fc29 	bl	8003ab8 <Error_Handler>
    }
  }
}
 8001266:	bf00      	nop
 8001268:	3730      	adds	r7, #48	; 0x30
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000

08001274 <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 800127e:	230a      	movs	r3, #10
 8001280:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 800129e:	230a      	movs	r3, #10
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <_Z8can_initv+0x50>)
 80012a8:	f005 fcd1 	bl	8006c4e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012ac:	2102      	movs	r1, #2
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <_Z8can_initv+0x50>)
 80012b0:	f005 ffbd 	bl	800722e <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <_Z8can_initv+0x50>)
 80012b6:	f005 fd94 	bl	8006de2 <HAL_CAN_Start>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200019cc 	.word	0x200019cc

080012c8 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 7> errors_vector;
 80012ce:	463b      	mov	r3, r7
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fc4d 	bl	8001b70 <_ZN3etl6vectorI15Error_conditionLj7EEC1Ev>

	for(auto& error : error_conditions){
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <_Z11error_checkv+0xcc>)
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <_Z11error_checkv+0xcc>)
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <_Z11error_checkv+0xd0>)
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d041      	beq.n	800136e <_Z11error_checkv+0xa6>
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if(error.min <= error.value && error.value <= error.max){
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	d825      	bhi.n	8001350 <_Z11error_checkv+0x88>
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	ed93 7a03 	vldr	s14, [r3, #12]
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d81a      	bhi.n	8001350 <_Z11error_checkv+0x88>
			errors_vector.emplace_back(error.error);
 800131a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131c:	463b      	mov	r3, r7
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fc4a 	bl	8001bba <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	7d1a      	ldrb	r2, [r3, #20]
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <_Z11error_checkv+0xd4>)
 800132c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
			if(false == error.flag)
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	7f1b      	ldrb	r3, [r3, #28]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d116      	bne.n	8001366 <_Z11error_checkv+0x9e>
			{
				error.timer = HAL_GetTick() + error.error_time;
 8001338:	f003 fde8 	bl	8004f0c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	441a      	add	r2, r3
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	619a      	str	r2, [r3, #24]
				error.flag = true;
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	2201      	movs	r2, #1
 800134c:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 800134e:	e00a      	b.n	8001366 <_Z11error_checkv+0x9e>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 8001350:	f003 fddc 	bl	8004f0c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	441a      	add	r2, r3
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	619a      	str	r2, [r3, #24]
			error.flag = false;
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	2200      	movs	r2, #0
 8001364:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	3320      	adds	r3, #32
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
 800136c:	e7b9      	b.n	80012e2 <_Z11error_checkv+0x1a>
		}
	}

	if(errors_vector.empty())
 800136e:	463b      	mov	r3, r7
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fc3d 	bl	8001bf0 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <_Z11error_checkv+0xd4>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	etl::vector<Error_condition, 7> errors_vector;
 8001384:	463b      	mov	r3, r7
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fc06 	bl	8001b98 <_ZN3etl6vectorI15Error_conditionLj7EED1Ev>
	}

	/*for (auto error : errors_vector){
		// do sth
	}*/
}
 800138c:	bf00      	nop
 800138e:	3738      	adds	r7, #56	; 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000504 	.word	0x20000504
 8001398:	200005e4 	.word	0x200005e4
 800139c:	20001398 	.word	0x20001398

080013a0 <_Z13error_executev>:

void error_execute(){
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 80013a6:	f003 fdb1 	bl	8004f0c <HAL_GetTick>
 80013aa:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <_Z13error_executev+0x9c>)
 80013ae:	699c      	ldr	r4, [r3, #24]
 80013b0:	f003 fdac 	bl	8004f0c <HAL_GetTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	429c      	cmp	r4, r3
 80013b8:	bf94      	ite	ls
 80013ba:	2301      	movls	r3, #1
 80013bc:	2300      	movhi	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00a      	beq.n	80013da <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2104      	movs	r1, #4
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f006 fe82 	bl	80080d4 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013d0:	2101      	movs	r1, #1
 80013d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013d6:	f008 f855 	bl	8009484 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 7; i++){
 80013da:	2303      	movs	r3, #3
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d819      	bhi.n	8001418 <_Z13error_executev+0x78>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <_Z13error_executev+0x9c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	015b      	lsls	r3, r3, #5
 80013ea:	4413      	add	r3, r2
 80013ec:	3318      	adds	r3, #24
 80013ee:	681c      	ldr	r4, [r3, #0]
 80013f0:	f003 fd8c 	bl	8004f0c <HAL_GetTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	429c      	cmp	r4, r3
 80013f8:	bf94      	ite	ls
 80013fa:	2301      	movls	r3, #1
 80013fc:	2300      	movhi	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <_Z13error_executev+0x70>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2104      	movs	r1, #4
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f006 fe62 	bl	80080d4 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 7; i++){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	e7e2      	b.n	80013de <_Z13error_executev+0x3e>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 8001418:	2104      	movs	r1, #4
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f006 fe41 	bl	80080a4 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <_Z13error_executev+0xa0>)
 8001430:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	20000504 	.word	0x20000504
 8001440:	20001398 	.word	0x20001398

08001444 <_Z11serialPrintv>:

void serialPrint()
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08d      	sub	sp, #52	; 0x34
 8001448:	af02      	add	r7, sp, #8
	static char tab[3500];
	uint16_t n=0;
 800144a:	2300      	movs	r3, #0
 800144c:	84fb      	strh	r3, [r7, #38]	; 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	48ab      	ldr	r0, [pc, #684]	; (8001704 <_Z11serialPrintv+0x2c0>)
 8001456:	f009 ff2d 	bl	800b2b4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	48a8      	ldr	r0, [pc, #672]	; (8001704 <_Z11serialPrintv+0x2c0>)
 8001464:	f00a f810 	bl	800b488 <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10000;
 8001468:	4ba7      	ldr	r3, [pc, #668]	; (8001708 <_Z11serialPrintv+0x2c4>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001474:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800170c <_Z11serialPrintv+0x2c8>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8001480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001482:	4aa3      	ldr	r2, [pc, #652]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001484:	1898      	adds	r0, r3, r2
 8001486:	783b      	ldrb	r3, [r7, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	787b      	ldrb	r3, [r7, #1]
 800148c:	4619      	mov	r1, r3
 800148e:	78bb      	ldrb	r3, [r7, #2]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	460b      	mov	r3, r1
 8001494:	499f      	ldr	r1, [pc, #636]	; (8001714 <_Z11serialPrintv+0x2d0>)
 8001496:	f012 ffbb 	bl	8014410 <siprintf>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a0:	4413      	add	r3, r2
 80014a2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 80014a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a6:	4a9a      	ldr	r2, [pc, #616]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80014a8:	4413      	add	r3, r2
 80014aa:	4a97      	ldr	r2, [pc, #604]	; (8001708 <_Z11serialPrintv+0x2c4>)
 80014ac:	f892 22a0 	ldrb.w	r2, [r2, #672]	; 0x2a0
 80014b0:	4999      	ldr	r1, [pc, #612]	; (8001718 <_Z11serialPrintv+0x2d4>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f012 ffac 	bl	8014410 <siprintf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014be:	4413      	add	r3, r2
 80014c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c4:	4a92      	ldr	r2, [pc, #584]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80014c6:	4413      	add	r3, r2
 80014c8:	4994      	ldr	r1, [pc, #592]	; (800171c <_Z11serialPrintv+0x2d8>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f012 ffa0 	bl	8014410 <siprintf>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d6:	4413      	add	r3, r2
 80014d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014dc:	4a8c      	ldr	r2, [pc, #560]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80014de:	4413      	add	r3, r2
 80014e0:	498f      	ldr	r1, [pc, #572]	; (8001720 <_Z11serialPrintv+0x2dc>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f012 ff94 	bl	8014410 <siprintf>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ee:	4413      	add	r3, r2
 80014f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f4:	4a86      	ldr	r2, [pc, #536]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80014f6:	4413      	add	r3, r2
 80014f8:	4988      	ldr	r1, [pc, #544]	; (800171c <_Z11serialPrintv+0x2d8>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f012 ff88 	bl	8014410 <siprintf>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001506:	4413      	add	r3, r2
 8001508:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "0- all good");
 800150a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800150c:	4a80      	ldr	r2, [pc, #512]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800150e:	4413      	add	r3, r2
 8001510:	4984      	ldr	r1, [pc, #528]	; (8001724 <_Z11serialPrintv+0x2e0>)
 8001512:	4618      	mov	r0, r3
 8001514:	f012 ff7c 	bl	8014410 <siprintf>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151e:	4413      	add	r3, r2
 8001520:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001524:	4a7a      	ldr	r2, [pc, #488]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001526:	4413      	add	r3, r2
 8001528:	497c      	ldr	r1, [pc, #496]	; (800171c <_Z11serialPrintv+0x2d8>)
 800152a:	4618      	mov	r0, r3
 800152c:	f012 ff70 	bl	8014410 <siprintf>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001536:	4413      	add	r3, r2
 8001538:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "1- charging");
 800153a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800153c:	4a74      	ldr	r2, [pc, #464]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800153e:	4413      	add	r3, r2
 8001540:	4979      	ldr	r1, [pc, #484]	; (8001728 <_Z11serialPrintv+0x2e4>)
 8001542:	4618      	mov	r0, r3
 8001544:	f012 ff64 	bl	8014410 <siprintf>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800154e:	4413      	add	r3, r2
 8001550:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001554:	4a6e      	ldr	r2, [pc, #440]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001556:	4413      	add	r3, r2
 8001558:	4970      	ldr	r1, [pc, #448]	; (800171c <_Z11serialPrintv+0x2d8>)
 800155a:	4618      	mov	r0, r3
 800155c:	f012 ff58 	bl	8014410 <siprintf>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001566:	4413      	add	r3, r2
 8001568:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 800156a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156c:	4a68      	ldr	r2, [pc, #416]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800156e:	4413      	add	r3, r2
 8001570:	496e      	ldr	r1, [pc, #440]	; (800172c <_Z11serialPrintv+0x2e8>)
 8001572:	4618      	mov	r0, r3
 8001574:	f012 ff4c 	bl	8014410 <siprintf>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800157e:	4413      	add	r3, r2
 8001580:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001582:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001584:	4a62      	ldr	r2, [pc, #392]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001586:	4413      	add	r3, r2
 8001588:	4964      	ldr	r1, [pc, #400]	; (800171c <_Z11serialPrintv+0x2d8>)
 800158a:	4618      	mov	r0, r3
 800158c:	f012 ff40 	bl	8014410 <siprintf>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001596:	4413      	add	r3, r2
 8001598:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 800159a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159c:	4a5c      	ldr	r2, [pc, #368]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800159e:	4413      	add	r3, r2
 80015a0:	4963      	ldr	r1, [pc, #396]	; (8001730 <_Z11serialPrintv+0x2ec>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f012 ff34 	bl	8014410 <siprintf>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ae:	4413      	add	r3, r2
 80015b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b4:	4a56      	ldr	r2, [pc, #344]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4958      	ldr	r1, [pc, #352]	; (800171c <_Z11serialPrintv+0x2d8>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f012 ff28 	bl	8014410 <siprintf>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c6:	4413      	add	r3, r2
 80015c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 80015ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80015ce:	4413      	add	r3, r2
 80015d0:	4958      	ldr	r1, [pc, #352]	; (8001734 <_Z11serialPrintv+0x2f0>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f012 ff1c 	bl	8014410 <siprintf>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015de:	4413      	add	r3, r2
 80015e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80015e6:	4413      	add	r3, r2
 80015e8:	494c      	ldr	r1, [pc, #304]	; (800171c <_Z11serialPrintv+0x2d8>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f012 ff10 	bl	8014410 <siprintf>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f6:	4413      	add	r3, r2
 80015f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 80015fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fc:	4a44      	ldr	r2, [pc, #272]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80015fe:	4413      	add	r3, r2
 8001600:	494d      	ldr	r1, [pc, #308]	; (8001738 <_Z11serialPrintv+0x2f4>)
 8001602:	4618      	mov	r0, r3
 8001604:	f012 ff04 	bl	8014410 <siprintf>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800160e:	4413      	add	r3, r2
 8001610:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001614:	4a3e      	ldr	r2, [pc, #248]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001616:	4413      	add	r3, r2
 8001618:	4940      	ldr	r1, [pc, #256]	; (800171c <_Z11serialPrintv+0x2d8>)
 800161a:	4618      	mov	r0, r3
 800161c:	f012 fef8 	bl	8014410 <siprintf>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001626:	4413      	add	r3, r2
 8001628:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 800162a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800162c:	4a38      	ldr	r2, [pc, #224]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800162e:	4413      	add	r3, r2
 8001630:	4942      	ldr	r1, [pc, #264]	; (800173c <_Z11serialPrintv+0x2f8>)
 8001632:	4618      	mov	r0, r3
 8001634:	f012 feec 	bl	8014410 <siprintf>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800163e:	4413      	add	r3, r2
 8001640:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001644:	4a32      	ldr	r2, [pc, #200]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001646:	4413      	add	r3, r2
 8001648:	4934      	ldr	r1, [pc, #208]	; (800171c <_Z11serialPrintv+0x2d8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f012 fee0 	bl	8014410 <siprintf>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001656:	4413      	add	r3, r2
 8001658:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "7- too high current");
 800165a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165c:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800165e:	4413      	add	r3, r2
 8001660:	4937      	ldr	r1, [pc, #220]	; (8001740 <_Z11serialPrintv+0x2fc>)
 8001662:	4618      	mov	r0, r3
 8001664:	f012 fed4 	bl	8014410 <siprintf>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800166e:	4413      	add	r3, r2
 8001670:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <_Z11serialPrintv+0x2cc>)
 8001676:	4413      	add	r3, r2
 8001678:	4928      	ldr	r1, [pc, #160]	; (800171c <_Z11serialPrintv+0x2d8>)
 800167a:	4618      	mov	r0, r3
 800167c:	f012 fec8 	bl	8014410 <siprintf>
 8001680:	4603      	mov	r3, r0
 8001682:	b29a      	uxth	r2, r3
 8001684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001686:	4413      	add	r3, r2
 8001688:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 800168a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <_Z11serialPrintv+0x2cc>)
 800168e:	4413      	add	r3, r2
 8001690:	492c      	ldr	r1, [pc, #176]	; (8001744 <_Z11serialPrintv+0x300>)
 8001692:	4618      	mov	r0, r3
 8001694:	f012 febc 	bl	8014410 <siprintf>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800169e:	4413      	add	r3, r2
 80016a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n\n");
 80016a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a4:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80016a6:	4413      	add	r3, r2
 80016a8:	4927      	ldr	r1, [pc, #156]	; (8001748 <_Z11serialPrintv+0x304>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f012 feb0 	bl	8014410 <siprintf>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016b6:	4413      	add	r3, r2
 80016b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 80016ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80016be:	189c      	adds	r4, r3, r2
 80016c0:	69f8      	ldr	r0, [r7, #28]
 80016c2:	f7fe ff59 	bl	8000578 <__aeabi_f2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4920      	ldr	r1, [pc, #128]	; (800174c <_Z11serialPrintv+0x308>)
 80016cc:	4620      	mov	r0, r4
 80016ce:	f012 fe9f 	bl	8014410 <siprintf>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016d8:	4413      	add	r3, r2
 80016da:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80016dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016de:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80016e0:	4413      	add	r3, r2
 80016e2:	490e      	ldr	r1, [pc, #56]	; (800171c <_Z11serialPrintv+0x2d8>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f012 fe93 	bl	8014410 <siprintf>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016f0:	4413      	add	r3, r2
 80016f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 80016f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016f6:	4a06      	ldr	r2, [pc, #24]	; (8001710 <_Z11serialPrintv+0x2cc>)
 80016f8:	189c      	adds	r4, r3, r2
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <_Z11serialPrintv+0x2c4>)
 80016fc:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8001700:	e028      	b.n	8001754 <_Z11serialPrintv+0x310>
 8001702:	bf00      	nop
 8001704:	200019f4 	.word	0x200019f4
 8001708:	20001398 	.word	0x20001398
 800170c:	461c4000 	.word	0x461c4000
 8001710:	200005e4 	.word	0x200005e4
 8001714:	08016590 	.word	0x08016590
 8001718:	080165a4 	.word	0x080165a4
 800171c:	080165c0 	.word	0x080165c0
 8001720:	080165c4 	.word	0x080165c4
 8001724:	080165e0 	.word	0x080165e0
 8001728:	080165ec 	.word	0x080165ec
 800172c:	080165f8 	.word	0x080165f8
 8001730:	08016630 	.word	0x08016630
 8001734:	08016658 	.word	0x08016658
 8001738:	0801666c 	.word	0x0801666c
 800173c:	08016680 	.word	0x08016680
 8001740:	08016698 	.word	0x08016698
 8001744:	080166ac 	.word	0x080166ac
 8001748:	080166bc 	.word	0x080166bc
 800174c:	080166c0 	.word	0x080166c0
 8001750:	42c80000 	.word	0x42c80000
 8001754:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001750 <_Z11serialPrintv+0x30c>
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	ee17 0a90 	vmov	r0, s15
 8001760:	f7fe ff0a 	bl	8000578 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	496c      	ldr	r1, [pc, #432]	; (800191c <_Z11serialPrintv+0x4d8>)
 800176a:	4620      	mov	r0, r4
 800176c:	f012 fe50 	bl	8014410 <siprintf>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001776:	4413      	add	r3, r2
 8001778:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800177a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177c:	4a68      	ldr	r2, [pc, #416]	; (8001920 <_Z11serialPrintv+0x4dc>)
 800177e:	4413      	add	r3, r2
 8001780:	4968      	ldr	r1, [pc, #416]	; (8001924 <_Z11serialPrintv+0x4e0>)
 8001782:	4618      	mov	r0, r3
 8001784:	f012 fe44 	bl	8014410 <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800178e:	4413      	add	r3, r2
 8001790:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	2b05      	cmp	r3, #5
 800179a:	dc6a      	bgt.n	8001872 <_Z11serialPrintv+0x42e>
	{
		float cell_value = (float)data.voltages.cells[i] / 10000;
 800179c:	4a62      	ldr	r2, [pc, #392]	; (8001928 <_Z11serialPrintv+0x4e4>)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ac:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800192c <_Z11serialPrintv+0x4e8>
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i+1);
 80017b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ba:	4a59      	ldr	r2, [pc, #356]	; (8001920 <_Z11serialPrintv+0x4dc>)
 80017bc:	1898      	adds	r0, r3, r2
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	3301      	adds	r3, #1
 80017c2:	461a      	mov	r2, r3
 80017c4:	495a      	ldr	r1, [pc, #360]	; (8001930 <_Z11serialPrintv+0x4ec>)
 80017c6:	f012 fe23 	bl	8014410 <siprintf>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d0:	4413      	add	r3, r2
 80017d2:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 80017d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d6:	4a52      	ldr	r2, [pc, #328]	; (8001920 <_Z11serialPrintv+0x4dc>)
 80017d8:	189c      	adds	r4, r3, r2
 80017da:	69b8      	ldr	r0, [r7, #24]
 80017dc:	f7fe fecc 	bl	8000578 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4850      	ldr	r0, [pc, #320]	; (8001928 <_Z11serialPrintv+0x4e4>)
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	4401      	add	r1, r0
 80017ea:	f501 7124 	add.w	r1, r1, #656	; 0x290
 80017ee:	7809      	ldrb	r1, [r1, #0]
 80017f0:	2900      	cmp	r1, #0
 80017f2:	d101      	bne.n	80017f8 <_Z11serialPrintv+0x3b4>
 80017f4:	2120      	movs	r1, #32
 80017f6:	e000      	b.n	80017fa <_Z11serialPrintv+0x3b6>
 80017f8:	212a      	movs	r1, #42	; 0x2a
 80017fa:	9100      	str	r1, [sp, #0]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <_Z11serialPrintv+0x4f0>)
 80017fe:	4620      	mov	r0, r4
 8001800:	f012 fe06 	bl	8014410 <siprintf>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800180a:	4413      	add	r3, r2
 800180c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i != 5)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d00d      	beq.n	8001830 <_Z11serialPrintv+0x3ec>
		n += sprintf(&tab[n], " -T.%d-\t", i+1);
 8001814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001816:	4a42      	ldr	r2, [pc, #264]	; (8001920 <_Z11serialPrintv+0x4dc>)
 8001818:	1898      	adds	r0, r3, r2
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	3301      	adds	r3, #1
 800181e:	461a      	mov	r2, r3
 8001820:	4945      	ldr	r1, [pc, #276]	; (8001938 <_Z11serialPrintv+0x4f4>)
 8001822:	f012 fdf5 	bl	8014410 <siprintf>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800182c:	4413      	add	r3, r2
 800182e:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
 8001830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001832:	4a3b      	ldr	r2, [pc, #236]	; (8001920 <_Z11serialPrintv+0x4dc>)
 8001834:	1898      	adds	r0, r3, r2
 8001836:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <_Z11serialPrintv+0x4e4>)
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	4413      	add	r3, r2
 800183c:	3320      	adds	r3, #32
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	493e      	ldr	r1, [pc, #248]	; (800193c <_Z11serialPrintv+0x4f8>)
 8001844:	f012 fde4 	bl	8014410 <siprintf>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800184e:	4413      	add	r3, r2
 8001850:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "\r\n");
 8001852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001854:	4a32      	ldr	r2, [pc, #200]	; (8001920 <_Z11serialPrintv+0x4dc>)
 8001856:	4413      	add	r3, r2
 8001858:	4932      	ldr	r1, [pc, #200]	; (8001924 <_Z11serialPrintv+0x4e0>)
 800185a:	4618      	mov	r0, r3
 800185c:	f012 fdd8 	bl	8014410 <siprintf>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001866:	4413      	add	r3, r2
 8001868:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	3301      	adds	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	e791      	b.n	8001796 <_Z11serialPrintv+0x352>
	}

	n += sprintf(&tab[n], "\r\n");
 8001872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <_Z11serialPrintv+0x4dc>)
 8001876:	4413      	add	r3, r2
 8001878:	492a      	ldr	r1, [pc, #168]	; (8001924 <_Z11serialPrintv+0x4e0>)
 800187a:	4618      	mov	r0, r3
 800187c:	f012 fdc8 	bl	8014410 <siprintf>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001886:	4413      	add	r3, r2
 8001888:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 800188a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <_Z11serialPrintv+0x4dc>)
 800188e:	189c      	adds	r4, r3, r2
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <_Z11serialPrintv+0x4e4>)
 8001892:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe6e 	bl	8000578 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4927      	ldr	r1, [pc, #156]	; (8001940 <_Z11serialPrintv+0x4fc>)
 80018a2:	4620      	mov	r0, r4
 80018a4:	f012 fdb4 	bl	8014410 <siprintf>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ae:	4413      	add	r3, r2
 80018b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	//n += sprintf(&tab[n], "Max current:\t%3.2f\r\n", data.current.value_max);
	//n += sprintf(&tab[n], "Min current:\t%3.2f\r\n", data.current.value_min);
	n += sprintf(&tab[n], "\r\n");
 80018b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018b4:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <_Z11serialPrintv+0x4dc>)
 80018b6:	4413      	add	r3, r2
 80018b8:	491a      	ldr	r1, [pc, #104]	; (8001924 <_Z11serialPrintv+0x4e0>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f012 fda8 	bl	8014410 <siprintf>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018c6:	4413      	add	r3, r2
 80018c8:	84fb      	strh	r3, [r7, #38]	; 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 80018ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <_Z11serialPrintv+0x4dc>)
 80018ce:	189c      	adds	r4, r3, r2
 80018d0:	2104      	movs	r1, #4
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f006 fbe5 	bl	80080a4 <HAL_GPIO_ReadPin>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4919      	ldr	r1, [pc, #100]	; (8001944 <_Z11serialPrintv+0x500>)
 80018e0:	4620      	mov	r0, r4
 80018e2:	f012 fd95 	bl	8014410 <siprintf>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ec:	4413      	add	r3, r2
 80018ee:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <_Z11serialPrintv+0x4dc>)
 80018f4:	4413      	add	r3, r2
 80018f6:	490b      	ldr	r1, [pc, #44]	; (8001924 <_Z11serialPrintv+0x4e0>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f012 fd89 	bl	8014410 <siprintf>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001904:	4413      	add	r3, r2
 8001906:	84fb      	strh	r3, [r7, #38]	; 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 8001908:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800190a:	4619      	mov	r1, r3
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <_Z11serialPrintv+0x4dc>)
 800190e:	f010 fff3 	bl	80128f8 <CDC_Transmit_FS>
}
 8001912:	bf00      	nop
 8001914:	372c      	adds	r7, #44	; 0x2c
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	080166e0 	.word	0x080166e0
 8001920:	200005e4 	.word	0x200005e4
 8001924:	080165c0 	.word	0x080165c0
 8001928:	20001398 	.word	0x20001398
 800192c:	461c4000 	.word	0x461c4000
 8001930:	080166fc 	.word	0x080166fc
 8001934:	08016704 	.word	0x08016704
 8001938:	08016710 	.word	0x08016710
 800193c:	0801671c 	.word	0x0801671c
 8001940:	08016720 	.word	0x08016720
 8001944:	08016738 	.word	0x08016738

08001948 <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001964:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3318      	adds	r3, #24
 800196c:	2206      	movs	r2, #6
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f011 ffa4 	bl	80138be <memcpy>
  }
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}

08001980 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001998:	e895 0003 	ldmia.w	r5, {r0, r1}
 800199c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3318      	adds	r3, #24
 80019a4:	2208      	movs	r2, #8
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f011 ff88 	bl	80138be <memcpy>
  }
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}

080019b8 <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	can_init();
 80019c0:	f7ff fc58 	bl	8001274 <_Z8can_initv>
	for(;;){
		osDelay(20);
 80019c4:	2014      	movs	r0, #20
 80019c6:	f00e fa39 	bl	800fe3c <osDelay>

		error_conditions[0].value = data.current.value;
 80019ca:	4b51      	ldr	r3, [pc, #324]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 80019cc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 80019d2:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 80019d6:	8b9b      	ldrh	r3, [r3, #28]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 80019dc:	8b5b      	ldrh	r3, [r3, #26]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 80019ea:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 80019ee:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 80019f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019fc:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 80019fe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 8001a02:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a04:	8b5b      	ldrh	r3, [r3, #26]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 8001a10:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 8001a14:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a16:	8b9b      	ldrh	r3, [r3, #28]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a20:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 8001a22:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a28:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 8001a36:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		error_conditions[6].value = data.current.value;
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a3c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001a40:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <_Z23start_comm_err_functionPv+0x15c>)
 8001a42:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

		BMS_LV_main can_message_main{
			data.voltages.total_can,
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a48:	8b1b      	ldrh	r3, [r3, #24]
			data.soc.value_can,
			data.temperatures.average,
			(uint8_t)data.current.value,
			static_cast<BMS_LV_states>(data.acu_state)
		};
 8001a4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			data.soc.value_can,
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a50:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
		};
 8001a54:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			data.temperatures.average,
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a5a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001a5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			(uint8_t)data.current.value,
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a64:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6c:	edc7 7a00 	vstr	s15, [r7]
 8001a70:	783b      	ldrb	r3, [r7, #0]
 8001a72:	b2db      	uxtb	r3, r3
		};
 8001a74:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			static_cast<BMS_LV_states>(data.acu_state)
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
		};
 8001a7e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		BMS_LV_temperature can_message_temp{
 8001a82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 8001a92:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 8001a9c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001aa2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 8001aa6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001aac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 8001ab0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <_Z23start_comm_err_functionPv+0x158>)
 8001ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 8001aba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		serialPrint();
 8001abe:	f7ff fcc1 	bl	8001444 <_Z11serialPrintv>

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<BMS_LV_main>(can_message_main, can_tx_header_BMS_LV_MAIN);
 8001ac2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <_Z23start_comm_err_functionPv+0x160>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff3b 	bl	8001948 <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<BMS_LV_temperature>(can_message_temp, can_tx_header_BMS_LV_TEMPERATURE);
 8001ad2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <_Z23start_comm_err_functionPv+0x164>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff4f 	bl	8001980 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		auto status_main = can_message_main_frame.send(hcan1);
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	490e      	ldr	r1, [pc, #56]	; (8001b20 <_Z23start_comm_err_functionPv+0x168>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f895 	bl	8001c18 <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainE4sendER19__CAN_HandleTypeDef>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		auto status_temp = can_message_temp_frame.send(hcan1);
 8001af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af8:	4909      	ldr	r1, [pc, #36]	; (8001b20 <_Z23start_comm_err_functionPv+0x168>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f8a0 	bl	8001c40 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureE4sendER19__CAN_HandleTypeDef>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

		error_check();
 8001b06:	f7ff fbdf 	bl	80012c8 <_Z11error_checkv>

		error_execute();
 8001b0a:	f7ff fc49 	bl	80013a0 <_Z13error_executev>
	}
 8001b0e:	e759      	b.n	80019c4 <_Z23start_comm_err_functionPv+0xc>
 8001b10:	20001398 	.word	0x20001398
 8001b14:	20000504 	.word	0x20000504
 8001b18:	080167f4 	.word	0x080167f4
 8001b1c:	0801680c 	.word	0x0801680c
 8001b20:	200019cc 	.word	0x200019cc

08001b24 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f89b 	bl	8001c68 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f88f 	bl	8001c68 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	335c      	adds	r3, #92	; 0x5c
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fae6 	bl	8001132 <_ZN3etl11vector_baseD1Ev>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZN3etl6vectorI15Error_conditionLj7EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4619      	mov	r1, r3
 8001b82:	f000 f87e 	bl	8001c82 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f890 	bl	8001cae <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_ZN3etl6vectorI15Error_conditionLj7EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f897 	bl	8001cd6 <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ffd3 	bl	8001b56 <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001bba:	b590      	push	{r4, r7, lr}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001bc4:	6838      	ldr	r0, [r7, #0]
 8001bc6:	f000 f891 	bl	8001cec <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	681c      	ldr	r4, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2004      	movs	r0, #4
 8001bd6:	f7ff fa91 	bl	80010fc <_ZnwjPv>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	601c      	str	r4, [r3, #0]
      ++p_end;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
    }
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}

08001bf0 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
    }
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f103 0218 	add.w	r2, r3, #24
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainE4sendER19__CAN_HandleTypeDef+0x24>)
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f005 f91c 	bl	8006e6a <HAL_CAN_AddTxMessage>
 8001c32:	4603      	mov	r3, r0
  }
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20001390 	.word	0x20001390

08001c40 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f103 0218 	add.w	r2, r3, #24
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureE4sendER19__CAN_HandleTypeDef+0x24>)
 8001c54:	6838      	ldr	r0, [r7, #0]
 8001c56:	f005 f908 	bl	8006e6a <HAL_CAN_AddTxMessage>
 8001c5a:	4603      	mov	r3, r0
  }
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20001394 	.word	0x20001394

08001c68 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f845 	bl	8001d02 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fa3e 	bl	8001114 <_ZN3etl11vector_baseC1Ej>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]
    }
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f000 f829 	bl	8001d18 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
    }
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
      initialise();
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffe5 	bl	8001cae <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001cf4:	687b      	ldr	r3, [r7, #4]
  }
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f804 	bl	8001d32 <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001d3c:	6839      	ldr	r1, [r7, #0]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f804 	bl	8001d4c <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001d56:	f7ff f9c9 	bl	80010ec <_ZSt21is_constant_evaluatedv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f808 	bl	8001d78 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001d68:	e003      	b.n	8001d72 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f81b 	bl	8001da8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d00a      	beq.n	8001da0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f817 	bl	8001dbe <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f81e 	bl	8001dd4 <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	e7f0      	b.n	8001d82 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xa>
	}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f804 	bl	8001dea <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
    }
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 80ac 	bne.w	8001f6a <_Z41__static_initialization_and_destruction_0ii+0x16a>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	f040 80a6 	bne.w	8001f6a <_Z41__static_initialization_and_destruction_0ii+0x16a>
};
 8001e1e:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8001e20:	2206      	movs	r2, #6
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	4a55      	ldr	r2, [pc, #340]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8001e2a:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001e2c:	4a55      	ldr	r2, [pc, #340]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001e2e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	751a      	strb	r2, [r3, #20]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
 8001e44:	3320      	adds	r3, #32
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8001e50:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001e52:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001e54:	8b92      	ldrh	r2, [r2, #28]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4a4a      	ldr	r2, [pc, #296]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001e5a:	8b52      	ldrh	r2, [r2, #26]
 8001e5c:	1a8a      	subs	r2, r1, r2
 8001e5e:	ee07 2a90 	vmov	s15, r2
 8001e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001e66:	edc3 7a03 	vstr	s15, [r3, #12]
 8001e6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	2202      	movs	r2, #2
 8001e72:	751a      	strb	r2, [r3, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
 8001e7c:	3320      	adds	r3, #32
 8001e7e:	2203      	movs	r2, #3
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	4a44      	ldr	r2, [pc, #272]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8001e88:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001e8a:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001e8c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001e90:	ee07 2a90 	vmov	s15, r2
 8001e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001e98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	751a      	strb	r2, [r3, #20]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	771a      	strb	r2, [r3, #28]
 8001eae:	3320      	adds	r3, #32
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8001ebc:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001ec0:	8b52      	ldrh	r2, [r2, #26]
 8001ec2:	ee07 2a90 	vmov	s15, r2
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001eca:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ece:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	751a      	strb	r2, [r3, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8001eec:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001ef0:	8b92      	ldrh	r2, [r2, #28]
 8001ef2:	ee07 2a90 	vmov	s15, r2
 8001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001efa:	edc3 7a03 	vstr	s15, [r3, #12]
 8001efe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	2205      	movs	r2, #5
 8001f06:	751a      	strb	r2, [r3, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
 8001f10:	3320      	adds	r3, #32
 8001f12:	2204      	movs	r2, #4
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8001f1c:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001f1e:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001f20:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001f24:	ee07 2a90 	vmov	s15, r2
 8001f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f2c:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	2206      	movs	r2, #6
 8001f38:	751a      	strb	r2, [r3, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
 8001f42:	3320      	adds	r3, #32
 8001f44:	2205      	movs	r2, #5
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001f4e:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8001f50:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001f52:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	2207      	movs	r2, #7
 8001f60:	751a      	strb	r2, [r3, #20]
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	2200      	movs	r2, #0
 8001f68:	771a      	strb	r2, [r3, #28]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000504 	.word	0x20000504
 8001f7c:	be99999a 	.word	0xbe99999a
 8001f80:	3e99999a 	.word	0x3e99999a
 8001f84:	20001398 	.word	0x20001398
 8001f88:	00124f80 	.word	0x00124f80
 8001f8c:	44fa0000 	.word	0x44fa0000
 8001f90:	47435000 	.word	0x47435000
 8001f94:	42400000 	.word	0x42400000
 8001f98:	425c0000 	.word	0x425c0000
 8001f9c:	46ea6000 	.word	0x46ea6000
 8001fa0:	4724d800 	.word	0x4724d800
 8001fa4:	48f42400 	.word	0x48f42400
 8001fa8:	42f00000 	.word	0x42f00000
 8001fac:	41a00000 	.word	0x41a00000
 8001fb0:	42c80000 	.word	0x42c80000

08001fb4 <_ZN8PUTM_CAN6DeviceI14Telemetry_MainE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	7993      	ldrb	r3, [r2, #6]
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3307      	adds	r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	321c      	adds	r2, #28
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	701a      	strb	r2, [r3, #0]
  }
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_ZN8PUTM_CAN6DeviceI18TS_rear_suspensionE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	7993      	ldrb	r3, [r2, #6]
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1dd8      	adds	r0, r3, #7
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4619      	mov	r1, r3
 8002000:	f011 fc5d 	bl	80138be <memcpy>
  }
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_ZN8PUTM_CAN6DeviceI7TS_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	7993      	ldrb	r3, [r2, #6]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1dd8      	adds	r0, r3, #7
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	331c      	adds	r3, #28
 8002028:	2208      	movs	r2, #8
 800202a:	4619      	mov	r1, r3
 800202c:	f011 fc47 	bl	80138be <memcpy>
  }
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_ZN8PUTM_CAN6DeviceI20Steering_Wheel_eventE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	7993      	ldrb	r3, [r2, #6]
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1dd8      	adds	r0, r3, #7
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	331c      	adds	r3, #28
 8002054:	2203      	movs	r2, #3
 8002056:	4619      	mov	r1, r3
 8002058:	f011 fc31 	bl	80138be <memcpy>
  }
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN8PUTM_CAN6DeviceI19Steering_Wheel_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	7993      	ldrb	r3, [r2, #6]
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1dd8      	adds	r0, r3, #7
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	331c      	adds	r3, #28
 8002080:	2203      	movs	r2, #3
 8002082:	4619      	mov	r1, r3
 8002084:	f011 fc1b 	bl	80138be <memcpy>
  }
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_ZN8PUTM_CAN6DeviceI7SF_NUCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    new_data = true;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	7993      	ldrb	r3, [r2, #6]
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3307      	adds	r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	321c      	adds	r2, #28
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	601a      	str	r2, [r3, #0]
  }
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN8PUTM_CAN6DeviceI5SF_WSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	7993      	ldrb	r3, [r2, #6]
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	1dd8      	adds	r0, r3, #7
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	331c      	adds	r3, #28
 80020d8:	2208      	movs	r2, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	f011 fbef 	bl	80138be <memcpy>
  }
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN8PUTM_CAN6DeviceI5SF_DVE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	7993      	ldrb	r3, [r2, #6]
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1dd8      	adds	r0, r3, #7
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	331c      	adds	r3, #28
 8002104:	2208      	movs	r2, #8
 8002106:	4619      	mov	r1, r3
 8002108:	f011 fbd9 	bl	80138be <memcpy>
  }
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_ZN8PUTM_CAN6DeviceI20SF_CoolingAndVSafetyE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	7993      	ldrb	r3, [r2, #6]
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1dd8      	adds	r0, r3, #7
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	331c      	adds	r3, #28
 8002130:	2208      	movs	r2, #8
 8002132:	4619      	mov	r1, r3
 8002134:	f011 fbc3 	bl	80138be <memcpy>
  }
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZN8PUTM_CAN6DeviceI11SF_FrontBoxE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
    new_data = true;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	7993      	ldrb	r3, [r2, #6]
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	1dd8      	adds	r0, r3, #7
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	331c      	adds	r3, #28
 800215c:	2208      	movs	r2, #8
 800215e:	4619      	mov	r1, r3
 8002160:	f011 fbad 	bl	80138be <memcpy>
  }
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZN8PUTM_CAN6DeviceI7SF_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	7993      	ldrb	r3, [r2, #6]
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1dd8      	adds	r0, r3, #7
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	331c      	adds	r3, #28
 8002188:	2203      	movs	r2, #3
 800218a:	4619      	mov	r1, r3
 800218c:	f011 fb97 	bl	80138be <memcpy>
  }
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_ZN8PUTM_CAN6DeviceI14Lap_timer_PassE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	7993      	ldrb	r3, [r2, #6]
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3307      	adds	r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	321c      	adds	r2, #28
 80021b4:	8812      	ldrh	r2, [r2, #0]
 80021b6:	b292      	uxth	r2, r2
 80021b8:	801a      	strh	r2, [r3, #0]
  }
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZN8PUTM_CAN6DeviceI14Lap_timer_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	7993      	ldrb	r3, [r2, #6]
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3307      	adds	r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	321c      	adds	r2, #28
 80021e2:	7812      	ldrb	r2, [r2, #0]
 80021e4:	701a      	strb	r2, [r3, #0]
  }
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_ZN8PUTM_CAN6DeviceI17Dash_lap_finishedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	7993      	ldrb	r3, [r2, #6]
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3307      	adds	r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	321c      	adds	r2, #28
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	601a      	str	r2, [r3, #0]
  }
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_ZN8PUTM_CAN6DeviceI27Dash_steering_wheel_requestE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	7993      	ldrb	r3, [r2, #6]
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3307      	adds	r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	321c      	adds	r2, #28
 800223a:	7812      	ldrb	r2, [r2, #0]
 800223c:	701a      	strb	r2, [r3, #0]
  }
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_ZN8PUTM_CAN6DeviceI26Dash_Smart_Fuses_FAN_speedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	7993      	ldrb	r3, [r2, #6]
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3307      	adds	r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	321c      	adds	r2, #28
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	b292      	uxth	r2, r2
 800226a:	801a      	strh	r2, [r3, #0]
  }
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_ZN8PUTM_CAN6DeviceI8Dash_TCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	7993      	ldrb	r3, [r2, #6]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1dd8      	adds	r0, r3, #7
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	331c      	adds	r3, #28
 8002294:	2208      	movs	r2, #8
 8002296:	4619      	mov	r1, r3
 8002298:	f011 fb11 	bl	80138be <memcpy>
  }
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN8PUTM_CAN6DeviceI9Dash_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	7993      	ldrb	r3, [r2, #6]
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3307      	adds	r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	321c      	adds	r2, #28
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	701a      	strb	r2, [r3, #0]
  }
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_ZN8PUTM_CAN6DeviceI18BMS_LV_temperatureE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	7993      	ldrb	r3, [r2, #6]
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1dd8      	adds	r0, r3, #7
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	331c      	adds	r3, #28
 80022ec:	2208      	movs	r2, #8
 80022ee:	4619      	mov	r1, r3
 80022f0:	f011 fae5 	bl	80138be <memcpy>
  }
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_ZN8PUTM_CAN6DeviceI11BMS_LV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	7993      	ldrb	r3, [r2, #6]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1dd8      	adds	r0, r3, #7
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	331c      	adds	r3, #28
 8002318:	2206      	movs	r2, #6
 800231a:	4619      	mov	r1, r3
 800231c:	f011 facf 	bl	80138be <memcpy>
  }
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZN8PUTM_CAN6DeviceI11BMS_HV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	7993      	ldrb	r3, [r2, #6]
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1dd8      	adds	r0, r3, #7
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	331c      	adds	r3, #28
 8002344:	2207      	movs	r2, #7
 8002346:	4619      	mov	r1, r3
 8002348:	f011 fab9 	bl	80138be <memcpy>
  }
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZN8PUTM_CAN6DeviceI7AQ_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	7993      	ldrb	r3, [r2, #6]
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1dd8      	adds	r0, r3, #7
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	331c      	adds	r3, #28
 8002370:	2206      	movs	r2, #6
 8002372:	4619      	mov	r1, r3
 8002374:	f011 faa3 	bl	80138be <memcpy>
  }
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZN8PUTM_CAN6DeviceI9Apps_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    new_data = true;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7993      	ldrb	r3, [r2, #6]
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1dd8      	adds	r0, r3, #7
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	331c      	adds	r3, #28
 800239c:	2205      	movs	r2, #5
 800239e:	4619      	mov	r1, r3
 80023a0:	f011 fa8d 	bl	80138be <memcpy>
  }
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff fd23 	bl	8001e00 <_Z41__static_initialization_and_destruction_0ii>
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffe7 	bl	80023bc <_ZN22Battery_characteristicC1Ev>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffeb 	bl	80023de <_ZN7SoC_EKFC1Ev>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_ZN4DataC1Ev>:
	bool charging_state;
	bool discharge_activation;
	uint32_t discharge_tick_end;
};

struct Data{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ffe9 	bl	80023f8 <_ZN15State_of_ChargeC1Ev>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002446:	4293      	cmp	r3, r2
 8002448:	d102      	bne.n	8002450 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800244c:	f7ff ffe1 	bl	8002412 <_ZN4DataC1Ev>
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20001398 	.word	0x20001398

0800245c <_GLOBAL__sub_I_data>:
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
 8002460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002464:	2001      	movs	r0, #1
 8002466:	f7ff ffe3 	bl	8002430 <_Z41__static_initialization_and_destruction_0ii>
 800246a:	bd80      	pop	{r7, pc}

0800246c <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2bff      	cmp	r3, #255	; 0xff
 800247a:	dc26      	bgt.n	80024ca <_Z16init_PEC15_Tablev+0x5e>
	{
		remainder = i << 7;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	b29b      	uxth	r3, r3
 8002480:	01db      	lsls	r3, r3, #7
 8002482:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002484:	2308      	movs	r3, #8
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	dd14      	ble.n	80024b8 <_Z16init_PEC15_Tablev+0x4c>
		{
			if (remainder & 0x4000)
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <_Z16init_PEC15_Tablev+0x3e>
			{
				remainder = ((remainder << 1));
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <_Z16init_PEC15_Tablev+0x6c>)
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	4053      	eors	r3, r2
 80024a6:	81fb      	strh	r3, [r7, #14]
 80024a8:	e002      	b.n	80024b0 <_Z16init_PEC15_Tablev+0x44>
			}
			else
			{
				remainder = ((remainder << 1));
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	e7e7      	b.n	8002488 <_Z16init_PEC15_Tablev+0x1c>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 80024b8:	4908      	ldr	r1, [pc, #32]	; (80024dc <_Z16init_PEC15_Tablev+0x70>)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	89fa      	ldrh	r2, [r7, #14]
 80024be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	e7d5      	b.n	8002476 <_Z16init_PEC15_Tablev+0xa>
	}
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000170 	.word	0x20000170
 80024dc:	2000163c 	.word	0x2000163c

080024e0 <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 80024ea:	2310      	movs	r3, #16
 80024ec:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	da1a      	bge.n	8002530 <_Z5pec15Pci+0x50>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80024fa:	8afb      	ldrh	r3, [r7, #22]
 80024fc:	09db      	lsrs	r3, r3, #7
 80024fe:	b29a      	uxth	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	440b      	add	r3, r1
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4053      	eors	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 8002512:	8afb      	ldrh	r3, [r7, #22]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <_Z5pec15Pci+0x64>)
 800251c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4053      	eors	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	3301      	adds	r3, #1
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e7e0      	b.n	80024f2 <_Z5pec15Pci+0x12>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8002530:	8afb      	ldrh	r3, [r7, #22]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	b29b      	uxth	r3, r3
}
 8002536:	4618      	mov	r0, r3
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000163c 	.word	0x2000163c

08002548 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 800254e:	23ff      	movs	r3, #255	; 0xff
 8002550:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255c:	f005 fdba 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 8002560:	1d39      	adds	r1, r7, #4
 8002562:	2301      	movs	r3, #1
 8002564:	2202      	movs	r2, #2
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <_Z11LTC_wake_upv+0x3c>)
 8002568:	f009 f953 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f005 fdad 	bl	80080d4 <HAL_GPIO_WritePin>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20001a28 	.word	0x20001a28

08002588 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 800258e:	f248 0301 	movw	r3, #32769	; 0x8001
 8002592:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80025a4:	463b      	mov	r3, r7
 80025a6:	2102      	movs	r1, #2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff99 	bl	80024e0 <_Z5pec15Pci>
 80025ae:	4603      	mov	r3, r0
 80025b0:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 80025b2:	89bb      	ldrh	r3, [r7, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <_Z18LTC_start_cell_adcv+0x11c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 80025c8:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <_Z18LTC_start_cell_adcv+0x11c>)
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 80025ce:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <_Z18LTC_start_cell_adcv+0x11c>)
 80025d0:	789b      	ldrb	r3, [r3, #2]
 80025d2:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 80025d4:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <_Z18LTC_start_cell_adcv+0x11c>)
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <_Z18LTC_start_cell_adcv+0x11c>)
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <_Z18LTC_start_cell_adcv+0x11c>)
 80025e2:	795b      	ldrb	r3, [r3, #5]
 80025e4:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 80025e6:	463b      	mov	r3, r7
 80025e8:	3304      	adds	r3, #4
 80025ea:	2106      	movs	r1, #6
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff77 	bl	80024e0 <_Z5pec15Pci>
 80025f2:	4603      	mov	r3, r0
 80025f4:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 80025f6:	89bb      	ldrh	r3, [r7, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002600:	89bb      	ldrh	r3, [r7, #12]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002606:	f7ff ff9f 	bl	8002548 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002614:	f005 fd5e 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 8002618:	4639      	mov	r1, r7
 800261a:	2314      	movs	r3, #20
 800261c:	220c      	movs	r2, #12
 800261e:	4822      	ldr	r0, [pc, #136]	; (80026a8 <_Z18LTC_start_cell_adcv+0x120>)
 8002620:	f009 f8f7 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800262a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262e:	f005 fd51 	bl	80080d4 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 8002632:	463b      	mov	r3, r7
 8002634:	220c      	movs	r2, #12
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f011 f968 	bl	801390e <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 800263e:	f44f 731c 	mov.w	r3, #624	; 0x270
 8002642:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b29b      	uxth	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800264e:	89fb      	ldrh	r3, [r7, #14]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002654:	463b      	mov	r3, r7
 8002656:	2102      	movs	r1, #2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff41 	bl	80024e0 <_Z5pec15Pci>
 800265e:	4603      	mov	r3, r0
 8002660:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8002662:	89bb      	ldrh	r3, [r7, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	b29b      	uxth	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 800266c:	89bb      	ldrh	r3, [r7, #12]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002672:	2200      	movs	r2, #0
 8002674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267c:	f005 fd2a 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 8002680:	4639      	mov	r1, r7
 8002682:	2314      	movs	r3, #20
 8002684:	2204      	movs	r2, #4
 8002686:	4808      	ldr	r0, [pc, #32]	; (80026a8 <_Z18LTC_start_cell_adcv+0x120>)
 8002688:	f009 f8c3 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f005 fd1d 	bl	80080d4 <HAL_GPIO_WritePin>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000174 	.word	0x20000174
 80026a8:	20001a28 	.word	0x20001a28

080026ac <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0b8      	sub	sp, #224	; 0xe0
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 80026b4:	f248 0304 	movw	r3, #32772	; 0x8004
 80026b8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 80026bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026c0:	220c      	movs	r2, #12
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f011 f922 	bl	801390e <memset>
	tab[0] = (cmd>>8);
 80026ca:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80026d8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80026e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026e6:	2102      	movs	r1, #2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fef9 	bl	80024e0 <_Z5pec15Pci>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80026f4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002702:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 800270c:	f7ff ff1c 	bl	8002548 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271a:	f005 fcdb 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 800271e:	f107 020c 	add.w	r2, r7, #12
 8002722:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002726:	2314      	movs	r3, #20
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	230c      	movs	r3, #12
 800272c:	4849      	ldr	r0, [pc, #292]	; (8002854 <_Z18LTC_get_values_adcPt+0x1a8>)
 800272e:	f009 f9de 	bl	800baee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f005 fcca 	bl	80080d4 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002740:	7c3b      	ldrb	r3, [r7, #16]
 8002742:	b21a      	sxth	r2, r3
 8002744:	7c7b      	ldrb	r3, [r7, #17]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	b21b      	sxth	r3, r3
 800274a:	4313      	orrs	r3, r2
 800274c:	b21b      	sxth	r3, r3
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002754:	7cbb      	ldrb	r3, [r7, #18]
 8002756:	b21a      	sxth	r2, r3
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	b21b      	sxth	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b21a      	sxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3302      	adds	r3, #2
 8002766:	b292      	uxth	r2, r2
 8002768:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 800276a:	7d3b      	ldrb	r3, [r7, #20]
 800276c:	b21a      	sxth	r2, r3
 800276e:	7d7b      	ldrb	r3, [r7, #21]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21b      	sxth	r3, r3
 8002774:	4313      	orrs	r3, r2
 8002776:	b21a      	sxth	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	b292      	uxth	r2, r2
 800277e:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 8002780:	f248 0306 	movw	r3, #32774	; 0x8006
 8002784:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 8002788:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800278c:	220c      	movs	r2, #12
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f011 f8bc 	bl	801390e <memset>
	tab[0] = (cmd>>8);
 8002796:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80027a4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80027ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027b2:	2102      	movs	r1, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe93 	bl	80024e0 <_Z5pec15Pci>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80027c0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 80027ce:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f005 fc77 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 80027e6:	f107 020c 	add.w	r2, r7, #12
 80027ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80027ee:	2314      	movs	r3, #20
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	230c      	movs	r3, #12
 80027f4:	4817      	ldr	r0, [pc, #92]	; (8002854 <_Z18LTC_get_values_adcPt+0x1a8>)
 80027f6:	f009 f97a 	bl	800baee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002804:	f005 fc66 	bl	80080d4 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002808:	7c3b      	ldrb	r3, [r7, #16]
 800280a:	b21a      	sxth	r2, r3
 800280c:	7c7b      	ldrb	r3, [r7, #17]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b21b      	sxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b21a      	sxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3306      	adds	r3, #6
 800281a:	b292      	uxth	r2, r2
 800281c:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 800281e:	7cbb      	ldrb	r3, [r7, #18]
 8002820:	b21a      	sxth	r2, r3
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b21b      	sxth	r3, r3
 8002828:	4313      	orrs	r3, r2
 800282a:	b21a      	sxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3308      	adds	r3, #8
 8002830:	b292      	uxth	r2, r2
 8002832:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002834:	7d3b      	ldrb	r3, [r7, #20]
 8002836:	b21a      	sxth	r2, r3
 8002838:	7d7b      	ldrb	r3, [r7, #21]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b21a      	sxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	330a      	adds	r3, #10
 8002846:	b292      	uxth	r2, r2
 8002848:	801a      	strh	r2, [r3, #0]


}
 800284a:	bf00      	nop
 800284c:	37d8      	adds	r7, #216	; 0xd8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20001a28 	.word	0x20001a28

08002858 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 800285e:	f248 0328 	movw	r3, #32808	; 0x8028
 8002862:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002864:	463b      	mov	r3, r7
 8002866:	2204      	movs	r2, #4
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f011 f84f 	bl	801390e <memset>
	tab[0] = (cmd>>8);
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29b      	uxth	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002880:	463b      	mov	r3, r7
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fe2b 	bl	80024e0 <_Z5pec15Pci>
 800288a:	4603      	mov	r3, r0
 800288c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 800288e:	88bb      	ldrh	r3, [r7, #4]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	b29b      	uxth	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002898:	88bb      	ldrh	r3, [r7, #4]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 800289e:	f7ff fe53 	bl	8002548 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ac:	f005 fc12 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 80028b0:	4639      	mov	r1, r7
 80028b2:	2364      	movs	r3, #100	; 0x64
 80028b4:	2204      	movs	r2, #4
 80028b6:	4807      	ldr	r0, [pc, #28]	; (80028d4 <_Z8mute_disv+0x7c>)
 80028b8:	f008 ffab 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c6:	f005 fc05 	bl	80080d4 <HAL_GPIO_WritePin>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20001a28 	.word	0x20001a28

080028d8 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 80028de:	f248 0329 	movw	r3, #32809	; 0x8029
 80028e2:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 80028e4:	463b      	mov	r3, r7
 80028e6:	2204      	movs	r2, #4
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f011 f80f 	bl	801390e <memset>
	tab[0] = (cmd>>8);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002900:	463b      	mov	r3, r7
 8002902:	2102      	movs	r1, #2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fdeb 	bl	80024e0 <_Z5pec15Pci>
 800290a:	4603      	mov	r3, r0
 800290c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 800290e:	88bb      	ldrh	r3, [r7, #4]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002918:	88bb      	ldrh	r3, [r7, #4]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 800291e:	f7ff fe13 	bl	8002548 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292c:	f005 fbd2 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002930:	4639      	mov	r1, r7
 8002932:	2364      	movs	r3, #100	; 0x64
 8002934:	2204      	movs	r2, #4
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <_Z10unmute_disv+0x7c>)
 8002938:	f008 ff6b 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002946:	f005 fbc5 	bl	80080d4 <HAL_GPIO_WritePin>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20001a28 	.word	0x20001a28

08002958 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002962:	f7ff ffb9 	bl	80028d8 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002966:	f248 0314 	movw	r3, #32788	; 0x8014
 800296a:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	220c      	movs	r2, #12
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f010 ffca 	bl	801390e <memset>
	tab[0] = (cmd>>8);
 800297a:	8afb      	ldrh	r3, [r7, #22]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	b29b      	uxth	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002984:	8afb      	ldrh	r3, [r7, #22]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fda5 	bl	80024e0 <_Z5pec15Pci>
 8002996:	4603      	mov	r3, r0
 8002998:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 800299a:	8abb      	ldrh	r3, [r7, #20]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 80029a4:	8abb      	ldrh	r3, [r7, #20]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	3302      	adds	r3, #2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b25a      	sxtb	r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	3303      	adds	r3, #3
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	3304      	adds	r3, #4
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b25a      	sxtb	r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	3305      	adds	r3, #5
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	3304      	adds	r3, #4
 8002a08:	2106      	movs	r1, #6
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fd68 	bl	80024e0 <_Z5pec15Pci>
 8002a10:	4603      	mov	r3, r0
 8002a12:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002a14:	8abb      	ldrh	r3, [r7, #20]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002a1e:	8abb      	ldrh	r3, [r7, #20]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002a24:	f7ff fd90 	bl	8002548 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a32:	f005 fb4f 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002a36:	f107 0108 	add.w	r1, r7, #8
 8002a3a:	2364      	movs	r3, #100	; 0x64
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	483c      	ldr	r0, [pc, #240]	; (8002b30 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002a40:	f008 fee7 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4e:	f005 fb41 	bl	80080d4 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002a52:	f248 0301 	movw	r3, #32769	; 0x8001
 8002a56:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f010 ff54 	bl	801390e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002a66:	8afb      	ldrh	r3, [r7, #22]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002a70:	8afb      	ldrh	r3, [r7, #22]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fd2f 	bl	80024e0 <_Z5pec15Pci>
 8002a82:	4603      	mov	r3, r0
 8002a84:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002a86:	8abb      	ldrh	r3, [r7, #20]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002a90:	8abb      	ldrh	r3, [r7, #20]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	dc0c      	bgt.n	8002ace <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002ab6:	791b      	ldrb	r3, [r3, #4]
 8002ab8:	b25a      	sxtb	r2, r3
 8002aba:	2101      	movs	r1, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002acc:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002ad6:	795b      	ldrb	r3, [r3, #5]
 8002ad8:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	3304      	adds	r3, #4
 8002ae0:	2106      	movs	r1, #6
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fcfc 	bl	80024e0 <_Z5pec15Pci>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002aec:	8abb      	ldrh	r3, [r7, #20]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002af6:	8abb      	ldrh	r3, [r7, #20]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b06:	f005 fae5 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002b0a:	f107 0108 	add.w	r1, r7, #8
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	220c      	movs	r2, #12
 8002b12:	4807      	ldr	r0, [pc, #28]	; (8002b30 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002b14:	f008 fe7d 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f005 fad7 	bl	80080d4 <HAL_GPIO_WritePin>


}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20001a28 	.word	0x20001a28
 8002b34:	20000174 	.word	0x20000174

08002b38 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b09a      	sub	sp, #104	; 0x68
 8002b3c:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002b3e:	f248 0314 	movw	r3, #32788	; 0x8014
 8002b42:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002b46:	463b      	mov	r3, r7
 8002b48:	220c      	movs	r2, #12
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f010 fede 	bl	801390e <memset>
	tab[0] = (cmd>>8);
 8002b52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b66:	463b      	mov	r3, r7
 8002b68:	2102      	movs	r1, #2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fcb8 	bl	80024e0 <_Z5pec15Pci>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002b76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002b82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2106      	movs	r1, #6
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fc99 	bl	80024e0 <_Z5pec15Pci>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002bb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002bc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002bc8:	f7ff fcbe 	bl	8002548 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd6:	f005 fa7d 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002bda:	4639      	mov	r1, r7
 8002bdc:	2364      	movs	r3, #100	; 0x64
 8002bde:	220c      	movs	r2, #12
 8002be0:	4838      	ldr	r0, [pc, #224]	; (8002cc4 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002be2:	f008 fe16 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002be6:	2201      	movs	r2, #1
 8002be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf0:	f005 fa70 	bl	80080d4 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002bf4:	f248 0301 	movw	r3, #32769	; 0x8001
 8002bf8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	220c      	movs	r2, #12
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f010 fe83 	bl	801390e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002c08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002c14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fc5d 	bl	80024e0 <_Z5pec15Pci>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002c38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c54:	789b      	ldrb	r3, [r3, #2]
 8002c56:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c5a:	78db      	ldrb	r3, [r3, #3]
 8002c5c:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c60:	791b      	ldrb	r3, [r3, #4]
 8002c62:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002c66:	795b      	ldrb	r3, [r3, #5]
 8002c68:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2106      	movs	r1, #6
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fc35 	bl	80024e0 <_Z5pec15Pci>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002c7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002c88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9a:	f005 fa1b 	bl	80080d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002c9e:	4639      	mov	r1, r7
 8002ca0:	2364      	movs	r3, #100	; 0x64
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002ca6:	f008 fdb4 	bl	800b812 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002caa:	2201      	movs	r2, #1
 8002cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb4:	f005 fa0e 	bl	80080d4 <HAL_GPIO_WritePin>

	mute_dis();
 8002cb8:	f7ff fdce 	bl	8002858 <_Z8mute_disv>
}
 8002cbc:	bf00      	nop
 8002cbe:	3768      	adds	r7, #104	; 0x68
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20001a28 	.word	0x20001a28
 8002cc8:	20000174 	.word	0x20000174

08002ccc <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002ccc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002cde:	2301      	movs	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b1b      	cmp	r3, #27
 8002ce6:	d862      	bhi.n	8002dae <_Z24temperature_calculationst+0xe2>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002ce8:	4a35      	ldr	r2, [pc, #212]	; (8002dc0 <_Z24temperature_calculationst+0xf4>)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d356      	bcc.n	8002da6 <_Z24temperature_calculationst+0xda>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <_Z24temperature_calculationst+0xf4>)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0a:	ee17 0a90 	vmov	r0, s15
 8002d0e:	f7fd fc33 	bl	8000578 <__aeabi_f2d>
 8002d12:	4604      	mov	r4, r0
 8002d14:	460d      	mov	r5, r1
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <_Z24temperature_calculationst+0xf4>)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d34:	ee17 0a90 	vmov	r0, s15
 8002d38:	f7fd fc1e 	bl	8000578 <__aeabi_f2d>
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <_Z24temperature_calculationst+0xf8>)
 8002d42:	f7fd fc71 	bl	8000628 <__aeabi_dmul>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	4699      	mov	r9, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <_Z24temperature_calculationst+0xf4>)
 8002d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <_Z24temperature_calculationst+0xf4>)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d74:	ee17 0a90 	vmov	r0, s15
 8002d78:	f7fd fbfe 	bl	8000578 <__aeabi_f2d>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4640      	mov	r0, r8
 8002d82:	4649      	mov	r1, r9
 8002d84:	f7fd fd7a 	bl	800087c <__aeabi_ddiv>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fa92 	bl	80002b8 <__aeabi_dsub>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7fd ff1c 	bl	8000bd8 <__aeabi_d2f>
 8002da0:	4603      	mov	r3, r0
 8002da2:	60fb      	str	r3, [r7, #12]
			break;
 8002da4:	e003      	b.n	8002dae <_Z24temperature_calculationst+0xe2>
	for(unsigned int i = 1; i < 28; i++)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	e799      	b.n	8002ce2 <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	ee07 3a90 	vmov	s15, r3
}
 8002db4:	eeb0 0a67 	vmov.f32	s0, s15
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc0:	08016938 	.word	0x08016938
 8002dc4:	40140000 	.word	0x40140000

08002dc8 <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d827      	bhi.n	8002e30 <_Z16get_temperaturesv+0x68>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[i]);
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3314      	adds	r3, #20
 8002de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff6d 	bl	8002ccc <_Z24temperature_calculationst>
 8002df2:	eef0 7a40 	vmov.f32	s15, s0
 8002df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b2d9      	uxtb	r1, r3
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	3320      	adds	r3, #32
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002e10:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002e14:	490e      	ldr	r1, [pc, #56]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	440b      	add	r3, r1
 8002e1a:	3320      	adds	r3, #32
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002e24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e7d4      	b.n	8002dda <_Z16get_temperaturesv+0x12>
	}
	data.temperatures.average = data.temperatures.average / 6;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002e32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <_Z16get_temperaturesv+0x8c>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <_Z16get_temperaturesv+0x88>)
 8002e42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20001398 	.word	0x20001398
 8002e54:	aaaaaaab 	.word	0xaaaaaaab

08002e58 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e64:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e6c:	839a      	strh	r2, [r3, #28]
	for(unsigned int i = 1; i < NUMBER_OF_CELLS; i++)
 8002e6e:	2301      	movs	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d823      	bhi.n	8002ec0 <_Z15min_max_voltagev+0x68>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e7a:	8b5a      	ldrh	r2, [r3, #26]
 8002e7c:	4913      	ldr	r1, [pc, #76]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d905      	bls.n	8002e94 <_Z15min_max_voltagev+0x3c>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e92:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e96:	8b9a      	ldrh	r2, [r3, #28]
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d209      	bcs.n	8002eb8 <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002eae:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <_Z15min_max_voltagev+0x74>)
 8002eb6:	83da      	strh	r2, [r3, #30]
	for(unsigned int i = 1; i < NUMBER_OF_CELLS; i++)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	e7d8      	b.n	8002e72 <_Z15min_max_voltagev+0x1a>
		}
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	20001398 	.word	0x20001398

08002ed0 <_Z19min_max_temperaturev>:


void min_max_temperature(){
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002ed8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002ee4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002eea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8002eee:	2301      	movs	r3, #1
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d827      	bhi.n	8002f48 <_Z19min_max_temperaturev+0x78>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002efa:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002efe:	4915      	ldr	r1, [pc, #84]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	440b      	add	r3, r1
 8002f04:	3320      	adds	r3, #32
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d907      	bls.n	8002f1c <_Z19min_max_temperaturev+0x4c>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3320      	adds	r3, #32
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f1e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002f22:	490c      	ldr	r1, [pc, #48]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	440b      	add	r3, r1
 8002f28:	3320      	adds	r3, #32
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d207      	bcs.n	8002f40 <_Z19min_max_temperaturev+0x70>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3320      	adds	r3, #32
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <_Z19min_max_temperaturev+0x84>)
 8002f3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e7d4      	b.n	8002ef2 <_Z19min_max_temperaturev+0x22>
		}
	}
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	20001398 	.word	0x20001398

08002f58 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	dc1c      	bgt.n	8002fa8 <_Z16voltage_can_calcv+0x50>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4915      	ldr	r1, [pc, #84]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002f7e:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 8002f80:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f88:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <_Z16voltage_can_calcv+0x74>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b2d9      	uxtb	r1, r3
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	e7df      	b.n	8002f68 <_Z16voltage_can_calcv+0x10>
	}

	data.voltages.total_can = data.voltages.total / 100;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <_Z16voltage_can_calcv+0x78>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <_Z16voltage_can_calcv+0x70>)
 8002fb8:	831a      	strh	r2, [r3, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20001398 	.word	0x20001398
 8002fcc:	10624dd3 	.word	0x10624dd3
 8002fd0:	51eb851f 	.word	0x51eb851f

08002fd4 <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 8002fdc:	f7ff fa46 	bl	800246c <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f00c ff2b 	bl	800fe3c <osDelay>
		LTC_start_cell_adc();
 8002fe6:	f7ff facf 	bl	8002588 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 8002fea:	201e      	movs	r0, #30
 8002fec:	f00c ff26 	bl	800fe3c <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 8002ff0:	4805      	ldr	r0, [pc, #20]	; (8003008 <_Z18start_ltc_functionPv+0x34>)
 8002ff2:	f7ff fb5b 	bl	80026ac <_Z18LTC_get_values_adcPt>

		voltage_can_calc();
 8002ff6:	f7ff ffaf 	bl	8002f58 <_Z16voltage_can_calcv>

		min_max_voltage();
 8002ffa:	f7ff ff2d 	bl	8002e58 <_Z15min_max_voltagev>

		get_temperatures();
 8002ffe:	f7ff fee3 	bl	8002dc8 <_Z16get_temperaturesv>

		min_max_temperature();
 8003002:	f7ff ff65 	bl	8002ed0 <_Z19min_max_temperaturev>
		osDelay(1);
 8003006:	e7eb      	b.n	8002fe0 <_Z18start_ltc_functionPv+0xc>
 8003008:	20001398 	.word	0x20001398

0800300c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003010:	f001 ff4f 	bl	8004eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003014:	f000 f892 	bl	800313c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003018:	f000 fcac 	bl	8003974 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800301c:	f000 fc6c 	bl	80038f8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8003020:	f000 f8f0 	bl	8003204 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003024:	f000 fa0c 	bl	8003440 <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 8003028:	f000 fa78 	bl	800351c <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 800302c:	f000 fab2 	bl	8003594 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8003030:	f000 fb20 	bl	8003674 <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8003034:	f000 fb60 	bl	80036f8 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8003038:	f000 fbbc 	bl	80037b4 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 800303c:	f000 fbfa 	bl	8003834 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003040:	f00c fe20 	bl	800fc84 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003044:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <main+0xd8>)
 8003046:	2100      	movs	r1, #0
 8003048:	4827      	ldr	r0, [pc, #156]	; (80030e8 <main+0xdc>)
 800304a:	f00c fe65 	bl	800fd18 <osThreadNew>
 800304e:	4603      	mov	r3, r0
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <main+0xe0>)
 8003052:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <main+0xe4>)
 8003056:	2100      	movs	r1, #0
 8003058:	4826      	ldr	r0, [pc, #152]	; (80030f4 <main+0xe8>)
 800305a:	f00c fe5d 	bl	800fd18 <osThreadNew>
 800305e:	4603      	mov	r3, r0
 8003060:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <main+0xec>)
 8003062:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <main+0xf0>)
 8003066:	2100      	movs	r1, #0
 8003068:	4825      	ldr	r0, [pc, #148]	; (8003100 <main+0xf4>)
 800306a:	f00c fe55 	bl	800fd18 <osThreadNew>
 800306e:	4603      	mov	r3, r0
 8003070:	4a24      	ldr	r2, [pc, #144]	; (8003104 <main+0xf8>)
 8003072:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 8003074:	4a24      	ldr	r2, [pc, #144]	; (8003108 <main+0xfc>)
 8003076:	2100      	movs	r1, #0
 8003078:	4824      	ldr	r0, [pc, #144]	; (800310c <main+0x100>)
 800307a:	f00c fe4d 	bl	800fd18 <osThreadNew>
 800307e:	4603      	mov	r3, r0
 8003080:	4a23      	ldr	r2, [pc, #140]	; (8003110 <main+0x104>)
 8003082:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <main+0x108>)
 8003086:	2100      	movs	r1, #0
 8003088:	4823      	ldr	r0, [pc, #140]	; (8003118 <main+0x10c>)
 800308a:	f00c fe45 	bl	800fd18 <osThreadNew>
 800308e:	4603      	mov	r3, r0
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <main+0x110>)
 8003092:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  HAL_Delay(2000);
 8003094:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003098:	f001 ff44 	bl	8004f24 <HAL_Delay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 800309c:	2201      	movs	r2, #1
 800309e:	2104      	movs	r1, #4
 80030a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a4:	f005 f816 	bl	80080d4 <HAL_GPIO_WritePin>
  //canInit();
  HAL_TIM_Base_Start_IT(&htim3);
 80030a8:	481d      	ldr	r0, [pc, #116]	; (8003120 <main+0x114>)
 80030aa:	f009 f957 	bl	800c35c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80030ae:	481d      	ldr	r0, [pc, #116]	; (8003124 <main+0x118>)
 80030b0:	f009 f8ec 	bl	800c28c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80030b4:	481c      	ldr	r0, [pc, #112]	; (8003128 <main+0x11c>)
 80030b6:	f009 f8e9 	bl	800c28c <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80030ba:	217f      	movs	r1, #127	; 0x7f
 80030bc:	481b      	ldr	r0, [pc, #108]	; (800312c <main+0x120>)
 80030be:	f003 fb95 	bl	80067ec <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80030c2:	217f      	movs	r1, #127	; 0x7f
 80030c4:	481a      	ldr	r0, [pc, #104]	; (8003130 <main+0x124>)
 80030c6:	f003 fb91 	bl	80067ec <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 80030ca:	2208      	movs	r2, #8
 80030cc:	4919      	ldr	r1, [pc, #100]	; (8003134 <main+0x128>)
 80030ce:	4817      	ldr	r0, [pc, #92]	; (800312c <main+0x120>)
 80030d0:	f002 face 	bl	8005670 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	4918      	ldr	r1, [pc, #96]	; (8003138 <main+0x12c>)
 80030d8:	4815      	ldr	r0, [pc, #84]	; (8003130 <main+0x124>)
 80030da:	f002 fac9 	bl	8005670 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80030de:	f00c fdf5 	bl	800fccc <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 80030e2:	e7fe      	b.n	80030e2 <main+0xd6>
 80030e4:	08016a08 	.word	0x08016a08
 80030e8:	08003a81 	.word	0x08003a81
 80030ec:	20001b70 	.word	0x20001b70
 80030f0:	08016a2c 	.word	0x08016a2c
 80030f4:	08002fd5 	.word	0x08002fd5
 80030f8:	20001b74 	.word	0x20001b74
 80030fc:	08016a50 	.word	0x08016a50
 8003100:	0800442d 	.word	0x0800442d
 8003104:	20002434 	.word	0x20002434
 8003108:	08016a74 	.word	0x08016a74
 800310c:	08001089 	.word	0x08001089
 8003110:	20002cf4 	.word	0x20002cf4
 8003114:	08016a98 	.word	0x08016a98
 8003118:	080019b9 	.word	0x080019b9
 800311c:	200035b4 	.word	0x200035b4
 8003120:	20001a8c 	.word	0x20001a8c
 8003124:	20001ad8 	.word	0x20001ad8
 8003128:	20001b24 	.word	0x20001b24
 800312c:	2000183c 	.word	0x2000183c
 8003130:	200018a4 	.word	0x200018a4
 8003134:	200013c0 	.word	0x200013c0
 8003138:	200013d0 	.word	0x200013d0

0800313c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b098      	sub	sp, #96	; 0x60
 8003140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003142:	f107 0318 	add.w	r3, r7, #24
 8003146:	2248      	movs	r2, #72	; 0x48
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f010 fbdf 	bl	801390e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800315e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003162:	f006 f9c7 	bl	80094f4 <HAL_PWREx_ControlVoltageScaling>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <SystemClock_Config+0x3e>
  {
    Error_Handler();
 8003176:	f000 fc9f 	bl	8003ab8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800317a:	2329      	movs	r3, #41	; 0x29
 800317c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800317e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003184:	2301      	movs	r3, #1
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003188:	2301      	movs	r3, #1
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800318c:	2302      	movs	r3, #2
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003190:	2303      	movs	r3, #3
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003194:	2302      	movs	r3, #2
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003198:	2310      	movs	r3, #16
 800319a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800319c:	2302      	movs	r3, #2
 800319e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031a0:	2302      	movs	r3, #2
 80031a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a8:	f107 0318 	add.w	r3, r7, #24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f006 faab 	bl	8009708 <HAL_RCC_OscConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80031c2:	f000 fc79 	bl	8003ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c6:	230f      	movs	r3, #15
 80031c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ca:	2303      	movs	r3, #3
 80031cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	2103      	movs	r1, #3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f006 ff0d 	bl	800a000 <HAL_RCC_ClockConfig>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80031f6:	f000 fc5f 	bl	8003ab8 <Error_Handler>
  }
}
 80031fa:	bf00      	nop
 80031fc:	3760      	adds	r7, #96	; 0x60
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
 8003224:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003226:	4b7c      	ldr	r3, [pc, #496]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003228:	4a7c      	ldr	r2, [pc, #496]	; (800341c <_ZL12MX_ADC1_Initv+0x218>)
 800322a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800322c:	4b7a      	ldr	r3, [pc, #488]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800322e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003232:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003234:	4b78      	ldr	r3, [pc, #480]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800323a:	4b77      	ldr	r3, [pc, #476]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800323c:	2200      	movs	r2, #0
 800323e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003240:	4b75      	ldr	r3, [pc, #468]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003242:	2201      	movs	r2, #1
 8003244:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003246:	4b74      	ldr	r3, [pc, #464]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003248:	2204      	movs	r2, #4
 800324a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800324c:	4b72      	ldr	r3, [pc, #456]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800324e:	2200      	movs	r2, #0
 8003250:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003252:	4b71      	ldr	r3, [pc, #452]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003254:	2201      	movs	r2, #1
 8003256:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800325a:	2208      	movs	r2, #8
 800325c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800325e:	4b6e      	ldr	r3, [pc, #440]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003266:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003268:	2200      	movs	r2, #0
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800326e:	2200      	movs	r2, #0
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003272:	4b69      	ldr	r3, [pc, #420]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800327c:	2200      	movs	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003280:	4b65      	ldr	r3, [pc, #404]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003288:	4863      	ldr	r0, [pc, #396]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800328a:	f002 f89f 	bl	80053cc <HAL_ADC_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 800329e:	f000 fc0b 	bl	8003ab8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	485a      	ldr	r0, [pc, #360]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 80032ae:	f003 fb2f 	bl	8006910 <HAL_ADCEx_MultiModeConfigChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80032c2:	f000 fbf9 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80032c6:	4b56      	ldr	r3, [pc, #344]	; (8003420 <_ZL12MX_ADC1_Initv+0x21c>)
 80032c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032ca:	2306      	movs	r3, #6
 80032cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80032ce:	2306      	movs	r3, #6
 80032d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032d2:	237f      	movs	r3, #127	; 0x7f
 80032d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032d6:	2304      	movs	r3, #4
 80032d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	484d      	ldr	r0, [pc, #308]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 80032e4:	f002 fcba 	bl	8005c5c <HAL_ADC_ConfigChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 80032f8:	f000 fbde 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80032fc:	4b49      	ldr	r3, [pc, #292]	; (8003424 <_ZL12MX_ADC1_Initv+0x220>)
 80032fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003300:	230c      	movs	r3, #12
 8003302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4843      	ldr	r0, [pc, #268]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800330a:	f002 fca7 	bl	8005c5c <HAL_ADC_ConfigChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 800331e:	f000 fbcb 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003322:	4b41      	ldr	r3, [pc, #260]	; (8003428 <_ZL12MX_ADC1_Initv+0x224>)
 8003324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003326:	2312      	movs	r3, #18
 8003328:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	4619      	mov	r1, r3
 800332e:	483a      	ldr	r0, [pc, #232]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003330:	f002 fc94 	bl	8005c5c <HAL_ADC_ConfigChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 8003344:	f000 fbb8 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003348:	4b38      	ldr	r3, [pc, #224]	; (800342c <_ZL12MX_ADC1_Initv+0x228>)
 800334a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800334c:	2318      	movs	r3, #24
 800334e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4830      	ldr	r0, [pc, #192]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 8003356:	f002 fc81 	bl	8005c5c <HAL_ADC_ConfigChannel>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 800336a:	f000 fba5 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800336e:	4b30      	ldr	r3, [pc, #192]	; (8003430 <_ZL12MX_ADC1_Initv+0x22c>)
 8003370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4826      	ldr	r0, [pc, #152]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 800337e:	f002 fc6d 	bl	8005c5c <HAL_ADC_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 8003392:	f000 fb91 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003396:	4b27      	ldr	r3, [pc, #156]	; (8003434 <_ZL12MX_ADC1_Initv+0x230>)
 8003398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800339a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800339e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	481c      	ldr	r0, [pc, #112]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 80033a6:	f002 fc59 	bl	8005c5c <HAL_ADC_ConfigChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 80033ba:	f000 fb7d 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80033be:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <_ZL12MX_ADC1_Initv+0x234>)
 80033c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80033c2:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80033c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4812      	ldr	r0, [pc, #72]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 80033ce:	f002 fc45 	bl	8005c5c <HAL_ADC_ConfigChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 80033e2:	f000 fb69 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <_ZL12MX_ADC1_Initv+0x238>)
 80033e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80033ea:	f44f 7389 	mov.w	r3, #274	; 0x112
 80033ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4808      	ldr	r0, [pc, #32]	; (8003418 <_ZL12MX_ADC1_Initv+0x214>)
 80033f6:	f002 fc31 	bl	8005c5c <HAL_ADC_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 800340a:	f000 fb55 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000183c 	.word	0x2000183c
 800341c:	50040000 	.word	0x50040000
 8003420:	21800100 	.word	0x21800100
 8003424:	25b00200 	.word	0x25b00200
 8003428:	2a000400 	.word	0x2a000400
 800342c:	2e300800 	.word	0x2e300800
 8003430:	32601000 	.word	0x32601000
 8003434:	36902000 	.word	0x36902000
 8003438:	3ac04000 	.word	0x3ac04000
 800343c:	3ef08000 	.word	0x3ef08000

08003440 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003446:	463b      	mov	r3, r7
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
 8003454:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003458:	4a2e      	ldr	r2, [pc, #184]	; (8003514 <_ZL12MX_ADC2_Initv+0xd4>)
 800345a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 800345e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003462:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003478:	2204      	movs	r2, #4
 800347a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 800347e:	2200      	movs	r2, #0
 8003480:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003484:	2201      	movs	r2, #1
 8003486:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 800348a:	2201      	movs	r2, #1
 800348c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 8003498:	2200      	movs	r2, #0
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034b8:	4815      	ldr	r0, [pc, #84]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 80034ba:	f001 ff87 	bl	80053cc <HAL_ADC_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 80034ce:	f000 faf3 	bl	8003ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <_ZL12MX_ADC2_Initv+0xd8>)
 80034d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034d6:	2306      	movs	r3, #6
 80034d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80034da:	2306      	movs	r3, #6
 80034dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034de:	237f      	movs	r3, #127	; 0x7f
 80034e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034ea:	463b      	mov	r3, r7
 80034ec:	4619      	mov	r1, r3
 80034ee:	4808      	ldr	r0, [pc, #32]	; (8003510 <_ZL12MX_ADC2_Initv+0xd0>)
 80034f0:	f002 fbb4 	bl	8005c5c <HAL_ADC_ConfigChannel>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8003504:	f000 fad8 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200018a4 	.word	0x200018a4
 8003514:	50040100 	.word	0x50040100
 8003518:	43210000 	.word	0x43210000

0800351c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003522:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <_ZL12MX_CAN1_Initv+0x74>)
 8003524:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003528:	2202      	movs	r2, #2
 800352a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003534:	2200      	movs	r2, #0
 8003536:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 800353a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800353e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003542:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003546:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 800354a:	2200      	movs	r2, #0
 800354c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003550:	2200      	movs	r2, #0
 8003552:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003556:	2200      	movs	r2, #0
 8003558:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 800355c:	2200      	movs	r2, #0
 800355e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003562:	2200      	movs	r2, #0
 8003564:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 8003568:	2200      	movs	r2, #0
 800356a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800356c:	4807      	ldr	r0, [pc, #28]	; (800358c <_ZL12MX_CAN1_Initv+0x70>)
 800356e:	f003 fa73 	bl	8006a58 <HAL_CAN_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8003582:	f000 fa99 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200019cc 	.word	0x200019cc
 8003590:	40006400 	.word	0x40006400

08003594 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80035a8:	2300      	movs	r3, #0
 80035aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035ac:	4b2f      	ldr	r3, [pc, #188]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035ae:	4a30      	ldr	r2, [pc, #192]	; (8003670 <_ZL11MX_RTC_Initv+0xdc>)
 80035b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035b2:	4b2e      	ldr	r3, [pc, #184]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035ba:	227f      	movs	r2, #127	; 0x7f
 80035bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035d0:	4b26      	ldr	r3, [pc, #152]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035d6:	4b25      	ldr	r3, [pc, #148]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035dc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035e4:	4821      	ldr	r0, [pc, #132]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 80035e6:	f007 fd35 	bl	800b054 <HAL_RTC_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 80035fa:	f000 fa5d 	bl	8003ab8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80035fe:	2300      	movs	r3, #0
 8003600:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003602:	2300      	movs	r3, #0
 8003604:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003606:	2300      	movs	r3, #0
 8003608:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	2201      	movs	r2, #1
 8003616:	4619      	mov	r1, r3
 8003618:	4814      	ldr	r0, [pc, #80]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 800361a:	f007 fdab 	bl	800b174 <HAL_RTC_SetTime>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 800362e:	f000 fa43 	bl	8003ab8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003632:	2301      	movs	r3, #1
 8003634:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003636:	2301      	movs	r3, #1
 8003638:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800363a:	2301      	movs	r3, #1
 800363c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800363e:	2300      	movs	r3, #0
 8003640:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003642:	463b      	mov	r3, r7
 8003644:	2201      	movs	r2, #1
 8003646:	4619      	mov	r1, r3
 8003648:	4808      	ldr	r0, [pc, #32]	; (800366c <_ZL11MX_RTC_Initv+0xd8>)
 800364a:	f007 fe95 	bl	800b378 <HAL_RTC_SetDate>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 800365e:	f000 fa2b 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200019f4 	.word	0x200019f4
 8003670:	40002800 	.word	0x40002800

08003674 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 800367a:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <_ZL12MX_SPI1_Initv+0x80>)
 800367c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 800368e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003692:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003696:	2202      	movs	r2, #2
 8003698:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 800369c:	2201      	movs	r2, #1
 800369e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036a0:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036aa:	2228      	movs	r2, #40	; 0x28
 80036ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036c2:	2207      	movs	r2, #7
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036d2:	4807      	ldr	r0, [pc, #28]	; (80036f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80036d4:	f007 fffa 	bl	800b6cc <HAL_SPI_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80036e8:	f000 f9e6 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20001a28 	.word	0x20001a28
 80036f4:	40013000 	.word	0x40013000

080036f8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036fe:	f107 0310 	add.w	r3, r7, #16
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003716:	4b25      	ldr	r3, [pc, #148]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 8003718:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <_ZL12MX_TIM3_Initv+0xb8>)
 800371a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 800371e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8003722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 800372c:	2231      	movs	r2, #49	; 0x31
 800372e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800373c:	481b      	ldr	r0, [pc, #108]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 800373e:	f008 fd4d 	bl	800c1dc <HAL_TIM_Base_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8003752:	f000 f9b1 	bl	8003ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4619      	mov	r1, r3
 8003762:	4812      	ldr	r0, [pc, #72]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 8003764:	f008 ff89 	bl	800c67a <HAL_TIM_ConfigClockSource>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8003778:	f000 f99e 	bl	8003ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <_ZL12MX_TIM3_Initv+0xb4>)
 800378a:	f009 f99b 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800379e:	f000 f98b 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037a2:	bf00      	nop
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20001a8c 	.word	0x20001a8c
 80037b0:	40000400 	.word	0x40000400

080037b4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <_ZL12MX_TIM6_Initv+0x7c>)
 80037c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 80037cc:	f640 125f 	movw	r2, #2399	; 0x95f
 80037d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 80037da:	2209      	movs	r2, #9
 80037dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037e4:	4811      	ldr	r0, [pc, #68]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 80037e6:	f008 fcf9 	bl	800c1dc <HAL_TIM_Base_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80037fa:	f000 f95d 	bl	8003ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037fe:	2320      	movs	r3, #32
 8003800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4808      	ldr	r0, [pc, #32]	; (800382c <_ZL12MX_TIM6_Initv+0x78>)
 800380c:	f009 f95a 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003820:	f000 f94a 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20001ad8 	.word	0x20001ad8
 8003830:	40001000 	.word	0x40001000

08003834 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383a:	f107 0310 	add.w	r3, r7, #16
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <_ZL12MX_TIM8_Initv+0xc0>)
 8003856:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 800385a:	225f      	movs	r2, #95	; 0x5f
 800385c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 8003866:	2231      	movs	r2, #49	; 0x31
 8003868:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800387c:	481c      	ldr	r0, [pc, #112]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 800387e:	f008 fcad 	bl	800c1dc <HAL_TIM_Base_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003892:	f000 f911 	bl	8003ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800389a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4619      	mov	r1, r3
 80038a2:	4813      	ldr	r0, [pc, #76]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 80038a4:	f008 fee9 	bl	800c67a <HAL_TIM_ConfigClockSource>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 80038b8:	f000 f8fe 	bl	8003ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038bc:	2320      	movs	r3, #32
 80038be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80038c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4808      	ldr	r0, [pc, #32]	; (80038f0 <_ZL12MX_TIM8_Initv+0xbc>)
 80038d0:	f009 f8f8 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 80038e4:	f000 f8e8 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20001b24 	.word	0x20001b24
 80038f4:	40013400 	.word	0x40013400

080038f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	6493      	str	r3, [r2, #72]	; 0x48
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6493      	str	r3, [r2, #72]	; 0x48
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6493      	str	r3, [r2, #72]	; 0x48
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <_ZL11MX_DMA_Initv+0x78>)
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2105      	movs	r1, #5
 800394a:	200b      	movs	r0, #11
 800394c:	f003 ff7c 	bl	8007848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003950:	200b      	movs	r0, #11
 8003952:	f003 ff95 	bl	8007880 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	2105      	movs	r1, #5
 800395a:	2038      	movs	r0, #56	; 0x38
 800395c:	f003 ff74 	bl	8007848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003960:	2038      	movs	r0, #56	; 0x38
 8003962:	f003 ff8d 	bl	8007880 <HAL_NVIC_EnableIRQ>

}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000

08003974 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800398a:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	4a39      	ldr	r2, [pc, #228]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003996:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	4a33      	ldr	r2, [pc, #204]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ae:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039c6:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039de:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <_ZL12MX_GPIO_Initv+0x100>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	f248 0104 	movw	r1, #32772	; 0x8004
 80039f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f4:	f004 fb6e 	bl	80080d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERLOCK_Pin|FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 80039f8:	2200      	movs	r2, #0
 80039fa:	f640 0104 	movw	r1, #2052	; 0x804
 80039fe:	481e      	ldr	r0, [pc, #120]	; (8003a78 <_ZL12MX_GPIO_Initv+0x104>)
 8003a00:	f004 fb68 	bl	80080d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003a0a:	481c      	ldr	r0, [pc, #112]	; (8003a7c <_ZL12MX_GPIO_Initv+0x108>)
 8003a0c:	f004 fb62 	bl	80080d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003a10:	f248 0304 	movw	r3, #32772	; 0x8004
 8003a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	f107 0314 	add.w	r3, r7, #20
 8003a26:	4619      	mov	r1, r3
 8003a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a2c:	f004 f9a8 	bl	8007d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|FUSE_VOLTAGE_Pin;
 8003a30:	f640 0304 	movw	r3, #2052	; 0x804
 8003a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	4619      	mov	r1, r3
 8003a48:	480b      	ldr	r0, [pc, #44]	; (8003a78 <_ZL12MX_GPIO_Initv+0x104>)
 8003a4a:	f004 f999 	bl	8007d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003a4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4619      	mov	r1, r3
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <_ZL12MX_GPIO_Initv+0x108>)
 8003a68:	f004 f98a 	bl	8007d80 <HAL_GPIO_Init>

}
 8003a6c:	bf00      	nop
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	48000800 	.word	0x48000800

08003a80 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003a88:	f00e fe78 	bl	801277c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f00c f9d5 	bl	800fe3c <osDelay>
 8003a92:	e7fb      	b.n	8003a8c <_Z16StartDefaultTaskPv+0xc>

08003a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aa6:	f001 fa1d 	bl	8004ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40014400 	.word	0x40014400

08003ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003abc:	b672      	cpsid	i
}
 8003abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ac0:	e7fe      	b.n	8003ac0 <Error_Handler+0x8>
	...

08003ac4 <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003ae6:	eeb1 7a67 	vneg.f32	s14, s15
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	edd3 7a03 	vldr	s15, [r3, #12]
 8003af0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003af4:	eeb0 0a66 	vmov.f32	s0, s13
 8003af8:	f00f fc8a 	bl	8013410 <expf>
 8003afc:	eef0 7a40 	vmov.f32	s15, s0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003b0c:	eeb1 7a67 	vneg.f32	s14, s15
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b1a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b1e:	f00f fc77 	bl	8013410 <expf>
 8003b22:	eef0 7a40 	vmov.f32	s15, s0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b32:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003b4a:	eef1 6a67 	vneg.f32	s13, s15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b58:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003c04 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b60:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003c04 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003b64:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a0f      	ldr	r2, [pc, #60]	; (8003c0c <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003bce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 8003bd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 8003bf6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	42700000 	.word	0x42700000
 8003c08:	3ba3d70a 	.word	0x3ba3d70a
 8003c0c:	3dcccccd 	.word	0x3dcccccd
 8003c10:	3951b717 	.word	0x3951b717
 8003c14:	48f42400 	.word	0x48f42400

08003c18 <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6178      	str	r0, [r7, #20]
 8003c20:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c24:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c28:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c2c:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	edd3 6a00 	vldr	s13, [r3]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	edd3 6a00 	vldr	s13, [r3]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	edd3 6a00 	vldr	s13, [r3]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f103 0020 	add.w	r0, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	33a8      	adds	r3, #168	; 0xa8
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2109      	movs	r1, #9
 8003d72:	f000 f99a 	bl	80040aa <_Z6hornerPKfjS0_>
 8003d76:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d90:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003d94:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003dae:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	edd3 6a00 	vldr	s13, [r3]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	edd3 7a02 	vldr	s15, [r3, #8]
 8003dbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dde:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	ed93 7a00 	vldr	s14, [r3]
 8003df0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	33a8      	adds	r3, #168	; 0xa8
 8003e06:	461a      	mov	r2, r3
 8003e08:	2108      	movs	r1, #8
 8003e0a:	f000 f94e 	bl	80040aa <_Z6hornerPKfjS0_>
 8003e0e:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003e18:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e20:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8003e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003e3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e4c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e54:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003e5e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003e62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 8003e74:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e78:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	33a8      	adds	r3, #168	; 0xa8
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	613a      	str	r2, [r7, #16]
 8003ea2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ea6:	617a      	str	r2, [r7, #20]
 8003ea8:	f107 0214 	add.w	r2, r7, #20
 8003eac:	f107 0110 	add.w	r1, r7, #16
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f928 	bl	8004106 <_ZSt5clampIfERKT_S2_S2_S2_>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003ec0:	bf00      	nop
 8003ec2:	3730      	adds	r7, #48	; 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 8003ed2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003f50 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x88>
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f88d 	bl	8003ff6 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fdf1 	bl	8003ac4 <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 8003ee2:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8003f54 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8003ee6:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8003f54 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8003eea:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003f58 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x90>
 8003eee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fe90 	bl	8003c18 <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f02:	4293      	cmp	r3, r2
 8003f04:	dc0d      	bgt.n	8003f22 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x5a>
        update(0, Voltage);
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fea1 	bl	8003c5c <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e7ec      	b.n	8003efc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x34>
    }

    set_filter_covariance();
 8003f22:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8003f54 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8003f26:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8003f54 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8003f2a:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003f58 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x90>
 8003f2e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003f5c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x94>
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe70 	bl	8003c18 <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 8003f38:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003f60 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f85a 	bl	8003ff6 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fdbe 	bl	8003ac4 <_ZN7SoC_EKF17set_update_matrixEv>
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	42c80000 	.word	0x42c80000
 8003f54:	3dcccccd 	.word	0x3dcccccd
 8003f58:	3951b717 	.word	0x3951b717
 8003f5c:	48f42400 	.word	0x48f42400
 8003f60:	3d4ccccd 	.word	0x3d4ccccd

08003f64 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f8ef 	bl	8004154 <_ZSt12__miter_baseIPKfET_S2_>
 8003f76:	4604      	mov	r4, r0
 8003f78:	68b8      	ldr	r0, [r7, #8]
 8003f7a:	f000 f8eb 	bl	8004154 <_ZSt12__miter_baseIPKfET_S2_>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4619      	mov	r1, r3
 8003f84:	4620      	mov	r0, r4
 8003f86:	f000 f8f0 	bl	800416a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003f8a:	4603      	mov	r3, r0
    }
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}

08003f94 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f103 0118 	add.w	r1, r3, #24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	f7ff ffda 	bl	8003f64 <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003fe6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	671a      	str	r2, [r3, #112]	; 0x70
};
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
};
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	18d1      	adds	r1, r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3320      	adds	r3, #32
 8004054:	461a      	mov	r2, r3
 8004056:	68b8      	ldr	r0, [r7, #8]
 8004058:	f7ff ff84 	bl	8003f64 <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	d21b      	bcs.n	80040a2 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x66>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3310      	adds	r3, #16
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3301      	adds	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e7de      	b.n	8004060 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x24>
    }
};
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
    float s = 0;
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d214      	bcs.n	80040f2 <_Z6hornerPKfjS0_+0x48>
        s = s*(*x) + arry[i];
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	ed93 7a00 	vldr	s14, [r3]
 80040ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80040d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e6:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3301      	adds	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e7e6      	b.n	80040c0 <_Z6hornerPKfjS0_+0x16>
    }
    return s;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	ee07 3a90 	vmov	s15, r3
}
 80040f8:	eeb0 0a67 	vmov.f32	s0, s15
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	ed93 7a00 	vldr	s14, [r3]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	d501      	bpl.n	800412c <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	e00d      	b.n	8004148 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	ed93 7a00 	vldr	s14, [r3]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004140:	d501      	bpl.n	8004146 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	e000      	b.n	8004148 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004146:	68fb      	ldr	r3, [r7, #12]
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800416a:	b5b0      	push	{r4, r5, r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f81a 	bl	80041b0 <_ZSt12__niter_baseIPKfET_S2_>
 800417c:	4604      	mov	r4, r0
 800417e:	68b8      	ldr	r0, [r7, #8]
 8004180:	f000 f816 	bl	80041b0 <_ZSt12__niter_baseIPKfET_S2_>
 8004184:	4605      	mov	r5, r0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f81c 	bl	80041c6 <_ZSt12__niter_baseIPfET_S1_>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	4629      	mov	r1, r5
 8004194:	4620      	mov	r0, r4
 8004196:	f000 f821 	bl	80041dc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800419a:	4602      	mov	r2, r0
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f82b 	bl	80041fc <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80041a6:	4603      	mov	r3, r0
    }
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}

080041b0 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f811 	bl	8004214 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8004220:	f7fc ff64 	bl	80010ec <_ZSt21is_constant_evaluatedv>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f80d 	bl	800424e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8004234:	4603      	mov	r3, r0
 8004236:	e006      	b.n	8004246 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f829 	bl	8004294 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004242:	4603      	mov	r3, r0
 8004244:	bf00      	nop
    }
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	109b      	asrs	r3, r3, #2
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	dd0d      	ble.n	8004286 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
	      ++__first;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3b01      	subs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e7ee      	b.n	8004264 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x16>
	  return __result;
 8004286:	687b      	ldr	r3, [r7, #4]
	}
 8004288:	4618      	mov	r0, r3
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	109b      	asrs	r3, r3, #2
 80042a8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	461a      	mov	r2, r3
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f00f fb0e 	bl	80138da <memmove>
	  return __result + _Num;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4413      	add	r3, r2
	}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eeb0 0a67 	vmov.f32	s0, s15
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 8004306:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b63      	cmp	r3, #99	; 0x63
 8004310:	dc3f      	bgt.n	8004392 <_Z17calculate_currentv+0xa2>
	{
		int16_t raw_value = data.current.adc[i];
 8004312:	4a42      	ldr	r2, [pc, #264]	; (800441c <_Z17calculate_currentv+0x12c>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	330e      	adds	r3, #14
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	80fb      	strh	r3, [r7, #6]
		raw_sum += raw_value;
 800431e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432a:	ed97 7a05 	vldr	s14, [r7, #20]
 800432e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004332:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 8004336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004342:	ed97 7a04 	vldr	s14, [r7, #16]
 8004346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	d507      	bpl.n	8004360 <_Z17calculate_currentv+0x70>
 8004350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800435c:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 8004360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	dd07      	ble.n	800438a <_Z17calculate_currentv+0x9a>
 800437a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004386:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3301      	adds	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	e7bc      	b.n	800430c <_Z17calculate_currentv+0x1c>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 8004392:	ed97 7a05 	vldr	s14, [r7, #20]
 8004396:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004420 <_Z17calculate_currentv+0x130>
 800439a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800439e:	edc7 7a00 	vstr	s15, [r7]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 80043a2:	edd7 7a00 	vldr	s15, [r7]
 80043a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004424 <_Z17calculate_currentv+0x134>
 80043aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043ae:	edc7 7a00 	vstr	s15, [r7]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 80043b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004424 <_Z17calculate_currentv+0x134>
 80043ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043be:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 80043c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004424 <_Z17calculate_currentv+0x134>
 80043ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043ce:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <_Z17calculate_currentv+0x138>)
 80043d4:	ed93 7a00 	vldr	s14, [r3]
 80043d8:	edd7 7a00 	vldr	s15, [r7]
 80043dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <_Z17calculate_currentv+0x12c>)
 80043e2:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
	data.current.value_max = (float)raw_max * output_current_factor;
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <_Z17calculate_currentv+0x138>)
 80043e8:	ed93 7a00 	vldr	s14, [r3]
 80043ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80043f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <_Z17calculate_currentv+0x12c>)
 80043f6:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	data.current.value_min = (float)raw_min * output_current_factor;
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <_Z17calculate_currentv+0x138>)
 80043fc:	ed93 7a00 	vldr	s14, [r3]
 8004400:	edd7 7a03 	vldr	s15, [r7, #12]
 8004404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <_Z17calculate_currentv+0x12c>)
 800440a:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20001398 	.word	0x20001398
 8004420:	42c80000 	.word	0x42c80000
 8004424:	4502a000 	.word	0x4502a000
 8004428:	20003e74 	.word	0x20003e74

0800442c <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 8004434:	4936      	ldr	r1, [pc, #216]	; (8004510 <_Z18start_soc_functionPv+0xe4>)
 8004436:	4837      	ldr	r0, [pc, #220]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 8004438:	f7ff fdac 	bl	8003f94 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 800443c:	2209      	movs	r2, #9
 800443e:	4936      	ldr	r1, [pc, #216]	; (8004518 <_Z18start_soc_functionPv+0xec>)
 8004440:	4834      	ldr	r0, [pc, #208]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 8004442:	f7ff fdfb 	bl	800403c <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 3);
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	2303      	movs	r3, #3
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	f107 0218 	add.w	r2, r7, #24
 8004452:	f107 0314 	add.w	r3, r7, #20
 8004456:	4619      	mov	r1, r3
 8004458:	482e      	ldr	r0, [pc, #184]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 800445a:	f7ff fddb 	bl	8004014 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.05f);
 800445e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800451c <_Z18start_soc_functionPv+0xf0>
 8004462:	482c      	ldr	r0, [pc, #176]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 8004464:	f7ff fdc7 	bl	8003ff6 <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 8004468:	482a      	ldr	r0, [pc, #168]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 800446a:	f7ff fb2b 	bl	8003ac4 <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 800446e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004472:	4828      	ldr	r0, [pc, #160]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 8004474:	f7ff fda0 	bl	8003fb8 <_ZN7SoC_EKF15set_initial_SoCEf>
	bool first_init_soc = true;
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]

	for(;;){
		osDelay(30);
 800447c:	201e      	movs	r0, #30
 800447e:	f00b fcdd 	bl	800fe3c <osDelay>

		calculate_current();
 8004482:	f7ff ff35 	bl	80042f0 <_Z17calculate_currentv>

		if(first_init_soc){
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d014      	beq.n	80044b6 <_Z18start_soc_functionPv+0x8a>
			float temp_voltage = (float)data.voltages.cells[0] / 10000.0f;
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <_Z18start_soc_functionPv+0xf4>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004498:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004524 <_Z18start_soc_functionPv+0xf8>
 800449c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044a0:	edc7 7a04 	vstr	s15, [r7, #16]
			data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	4619      	mov	r1, r3
 80044aa:	481a      	ldr	r0, [pc, #104]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 80044ac:	f7ff fd0c 	bl	8003ec8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>
			first_init_soc = false;
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e7e2      	b.n	800447c <_Z18start_soc_functionPv+0x50>
		}else{
			float temp_voltage = (float)data.voltages.cells[0] / 10000.0f;
 80044b6:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <_Z18start_soc_functionPv+0xf4>)
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044c2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004524 <_Z18start_soc_functionPv+0xf8>
 80044c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ca:	edc7 7a03 	vstr	s15, [r7, #12]
			data.soc.main.update(data.current.value, temp_voltage);
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	461a      	mov	r2, r3
 80044d4:	4914      	ldr	r1, [pc, #80]	; (8004528 <_Z18start_soc_functionPv+0xfc>)
 80044d6:	480f      	ldr	r0, [pc, #60]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 80044d8:	f7ff fbc0 	bl	8003c5c <_ZN7SoC_EKF6updateERKfS1_>
			data.soc.value = data.soc.main.get_SoC();
 80044dc:	480d      	ldr	r0, [pc, #52]	; (8004514 <_Z18start_soc_functionPv+0xe8>)
 80044de:	f7ff fef6 	bl	80042ce <_ZN7SoC_EKF7get_SoCEv>
 80044e2:	eef0 7a40 	vmov.f32	s15, s0
 80044e6:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <_Z18start_soc_functionPv+0xf4>)
 80044e8:	edc3 7aa2 	vstr	s15, [r3, #648]	; 0x288
			data.soc.value_can = (uint8_t)(data.soc.value * 100);
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <_Z18start_soc_functionPv+0xf4>)
 80044ee:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80044f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800452c <_Z18start_soc_functionPv+0x100>
 80044f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fe:	edc7 7a00 	vstr	s15, [r7]
 8004502:	783b      	ldrb	r3, [r7, #0]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <_Z18start_soc_functionPv+0xf4>)
 8004508:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
		}

	}
 800450c:	e7b6      	b.n	800447c <_Z18start_soc_functionPv+0x50>
 800450e:	bf00      	nop
 8004510:	08016abc 	.word	0x08016abc
 8004514:	2000156c 	.word	0x2000156c
 8004518:	08016ad4 	.word	0x08016ad4
 800451c:	3d4ccccd 	.word	0x3d4ccccd
 8004520:	20001398 	.word	0x20001398
 8004524:	461c4000 	.word	0x461c4000
 8004528:	20001560 	.word	0x20001560
 800452c:	42c80000 	.word	0x42c80000

08004530 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d12d      	bne.n	800459c <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004546:	4293      	cmp	r3, r2
 8004548:	d128      	bne.n	800459c <_Z41__static_initialization_and_destruction_0ii+0x6c>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 800454a:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc f812 	bl	8000578 <__aeabi_f2d>
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800455a:	f7fc f98f 	bl	800087c <__aeabi_ddiv>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4614      	mov	r4, r2
 8004564:	461d      	mov	r5, r3
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc f804 	bl	8000578 <__aeabi_f2d>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	490d      	ldr	r1, [pc, #52]	; (80045b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800457a:	f7fc f97f 	bl	800087c <__aeabi_ddiv>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4620      	mov	r0, r4
 8004584:	4629      	mov	r1, r5
 8004586:	f7fc f84f 	bl	8000628 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f7fc fb21 	bl	8000bd8 <__aeabi_d2f>
 8004596:	4603      	mov	r3, r0
 8004598:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bdb0      	pop	{r4, r5, r7, pc}
 80045a4:	2000017c 	.word	0x2000017c
 80045a8:	40b00000 	.word	0x40b00000
 80045ac:	20000180 	.word	0x20000180
 80045b0:	3ff00000 	.word	0x3ff00000
 80045b4:	20003e74 	.word	0x20003e74

080045b8 <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045c0:	2001      	movs	r0, #1
 80045c2:	f7ff ffb5 	bl	8004530 <_Z41__static_initialization_and_destruction_0ii>
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_MspInit+0x4c>)
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <HAL_MspInit+0x4c>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	6613      	str	r3, [r2, #96]	; 0x60
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_MspInit+0x4c>)
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_MspInit+0x4c>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_MspInit+0x4c>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6593      	str	r3, [r2, #88]	; 0x58
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_MspInit+0x4c>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	210f      	movs	r1, #15
 8004602:	f06f 0001 	mvn.w	r0, #1
 8004606:	f003 f91f 	bl	8007848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000

08004618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b0b4      	sub	sp, #208	; 0xd0
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004634:	2298      	movs	r2, #152	; 0x98
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f00f f968 	bl	801390e <memset>
  if(hadc->Instance==ADC1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a97      	ldr	r2, [pc, #604]	; (80048a0 <HAL_ADC_MspInit+0x288>)
 8004644:	4293      	cmp	r3, r2
 8004646:	f040 80ad 	bne.w	80047a4 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800464a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004650:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800465c:	4618      	mov	r0, r3
 800465e:	f005 ffa5 	bl	800a5ac <HAL_RCCEx_PeriphCLKConfig>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8004668:	f7ff fa26 	bl	8003ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800466c:	4b8d      	ldr	r3, [pc, #564]	; (80048a4 <HAL_ADC_MspInit+0x28c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	4a8c      	ldr	r2, [pc, #560]	; (80048a4 <HAL_ADC_MspInit+0x28c>)
 8004674:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004676:	4b8b      	ldr	r3, [pc, #556]	; (80048a4 <HAL_ADC_MspInit+0x28c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10b      	bne.n	8004696 <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 800467e:	4b8a      	ldr	r3, [pc, #552]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	4a89      	ldr	r2, [pc, #548]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 8004684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800468a:	4b87      	ldr	r3, [pc, #540]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004696:	4b84      	ldr	r3, [pc, #528]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	4a83      	ldr	r2, [pc, #524]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046a2:	4b81      	ldr	r3, [pc, #516]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ae:	4b7e      	ldr	r3, [pc, #504]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4a7d      	ldr	r2, [pc, #500]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ba:	4b7b      	ldr	r3, [pc, #492]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c6:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	4a77      	ldr	r2, [pc, #476]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d2:	4b75      	ldr	r3, [pc, #468]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 80046de:	23f8      	movs	r3, #248	; 0xf8
 80046e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80046e4:	230b      	movs	r3, #11
 80046e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80046f4:	4619      	mov	r1, r3
 80046f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046fa:	f003 fb41 	bl	8007d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 80046fe:	2330      	movs	r3, #48	; 0x30
 8004700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004704:	230b      	movs	r3, #11
 8004706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004710:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004714:	4619      	mov	r1, r3
 8004716:	4865      	ldr	r0, [pc, #404]	; (80048ac <HAL_ADC_MspInit+0x294>)
 8004718:	f003 fb32 	bl	8007d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 800471c:	2301      	movs	r3, #1
 800471e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004722:	230b      	movs	r3, #11
 8004724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 800472e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004732:	4619      	mov	r1, r3
 8004734:	485e      	ldr	r0, [pc, #376]	; (80048b0 <HAL_ADC_MspInit+0x298>)
 8004736:	f003 fb23 	bl	8007d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800473a:	4b5e      	ldr	r3, [pc, #376]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 800473c:	4a5e      	ldr	r2, [pc, #376]	; (80048b8 <HAL_ADC_MspInit+0x2a0>)
 800473e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004740:	4b5c      	ldr	r3, [pc, #368]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 8004742:	2205      	movs	r2, #5
 8004744:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004746:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800474c:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 800474e:	2200      	movs	r2, #0
 8004750:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004752:	4b58      	ldr	r3, [pc, #352]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004758:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 800475a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800475e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004760:	4b54      	ldr	r3, [pc, #336]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 8004762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004766:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004768:	4b52      	ldr	r3, [pc, #328]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 800476a:	2220      	movs	r2, #32
 800476c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800476e:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 8004770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004774:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004776:	484f      	ldr	r0, [pc, #316]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 8004778:	f003 f890 	bl	800789c <HAL_DMA_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8004782:	f7ff f999 	bl	8003ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4a      	ldr	r2, [pc, #296]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 800478a:	651a      	str	r2, [r3, #80]	; 0x50
 800478c:	4a49      	ldr	r2, [pc, #292]	; (80048b4 <HAL_ADC_MspInit+0x29c>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2105      	movs	r1, #5
 8004796:	2012      	movs	r0, #18
 8004798:	f003 f856 	bl	8007848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800479c:	2012      	movs	r0, #18
 800479e:	f003 f86f 	bl	8007880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047a2:	e079      	b.n	8004898 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a44      	ldr	r2, [pc, #272]	; (80048bc <HAL_ADC_MspInit+0x2a4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d174      	bne.n	8004898 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80047ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80047b4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80047b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f005 fef3 	bl	800a5ac <HAL_RCCEx_PeriphCLKConfig>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80047cc:	f7ff f974 	bl	8003ab8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <HAL_ADC_MspInit+0x28c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <HAL_ADC_MspInit+0x28c>)
 80047d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_ADC_MspInit+0x28c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10b      	bne.n	80047fa <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80047e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004806:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <HAL_ADC_MspInit+0x290>)
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004812:	2302      	movs	r3, #2
 8004814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004818:	230b      	movs	r3, #11
 800481a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004824:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004828:	4619      	mov	r1, r3
 800482a:	4821      	ldr	r0, [pc, #132]	; (80048b0 <HAL_ADC_MspInit+0x298>)
 800482c:	f003 faa8 	bl	8007d80 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004830:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004832:	4a24      	ldr	r2, [pc, #144]	; (80048c4 <HAL_ADC_MspInit+0x2ac>)
 8004834:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004838:	2206      	movs	r2, #6
 800483a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800483c:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 800483e:	2200      	movs	r2, #0
 8004840:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004844:	2200      	movs	r2, #0
 8004846:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004848:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004854:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800485c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004860:	2220      	movs	r2, #32
 8004862:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004864:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800486a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800486c:	4814      	ldr	r0, [pc, #80]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 800486e:	f003 f815 	bl	800789c <HAL_DMA_Init>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004878:	f7ff f91e 	bl	8003ab8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004880:	651a      	str	r2, [r3, #80]	; 0x50
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <HAL_ADC_MspInit+0x2a8>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004888:	2200      	movs	r2, #0
 800488a:	2105      	movs	r1, #5
 800488c:	2012      	movs	r0, #18
 800488e:	f002 ffdb 	bl	8007848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004892:	2012      	movs	r0, #18
 8004894:	f002 fff4 	bl	8007880 <HAL_NVIC_EnableIRQ>
}
 8004898:	bf00      	nop
 800489a:	37d0      	adds	r7, #208	; 0xd0
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	50040000 	.word	0x50040000
 80048a4:	20003e78 	.word	0x20003e78
 80048a8:	40021000 	.word	0x40021000
 80048ac:	48000800 	.word	0x48000800
 80048b0:	48000400 	.word	0x48000400
 80048b4:	2000190c 	.word	0x2000190c
 80048b8:	40020008 	.word	0x40020008
 80048bc:	50040100 	.word	0x50040100
 80048c0:	2000196c 	.word	0x2000196c
 80048c4:	40020408 	.word	0x40020408

080048c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <HAL_CAN_MspInit+0x8c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d130      	bne.n	800494c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_CAN_MspInit+0x90>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_CAN_MspInit+0x90>)
 80048f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048f4:	6593      	str	r3, [r2, #88]	; 0x58
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_CAN_MspInit+0x90>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_CAN_MspInit+0x90>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_CAN_MspInit+0x90>)
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_CAN_MspInit+0x90>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800491a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800491e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004928:	2303      	movs	r3, #3
 800492a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800492c:	2309      	movs	r3, #9
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4619      	mov	r1, r3
 8004936:	4809      	ldr	r0, [pc, #36]	; (800495c <HAL_CAN_MspInit+0x94>)
 8004938:	f003 fa22 	bl	8007d80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800493c:	2200      	movs	r2, #0
 800493e:	2105      	movs	r1, #5
 8004940:	2013      	movs	r0, #19
 8004942:	f002 ff81 	bl	8007848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004946:	2013      	movs	r0, #19
 8004948:	f002 ff9a 	bl	8007880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800494c:	bf00      	nop
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40006400 	.word	0x40006400
 8004958:	40021000 	.word	0x40021000
 800495c:	48000400 	.word	0x48000400

08004960 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0aa      	sub	sp, #168	; 0xa8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004968:	f107 0310 	add.w	r3, r7, #16
 800496c:	2298      	movs	r2, #152	; 0x98
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f00e ffcc 	bl	801390e <memset>
  if(hrtc->Instance==RTC)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_RTC_MspInit+0x74>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d124      	bne.n	80049ca <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004984:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800498e:	f107 0310 	add.w	r3, r7, #16
 8004992:	4618      	mov	r0, r3
 8004994:	f005 fe0a 	bl	800a5ac <HAL_RCCEx_PeriphCLKConfig>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800499e:	f7ff f88b 	bl	8003ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RTC_MspInit+0x78>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <HAL_RTC_MspInit+0x78>)
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RTC_MspInit+0x78>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <HAL_RTC_MspInit+0x78>)
 80049b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049bc:	6593      	str	r3, [r2, #88]	; 0x58
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RTC_MspInit+0x78>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80049ca:	bf00      	nop
 80049cc:	37a8      	adds	r7, #168	; 0xa8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40002800 	.word	0x40002800
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e4:	f107 0314 	add.w	r3, r7, #20
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <HAL_SPI_MspInit+0x9c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d137      	bne.n	8004a6e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_SPI_MspInit+0xa0>)
 8004a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a02:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <HAL_SPI_MspInit+0xa0>)
 8004a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a08:	6613      	str	r3, [r2, #96]	; 0x60
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <HAL_SPI_MspInit+0xa0>)
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_SPI_MspInit+0xa0>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <HAL_SPI_MspInit+0xa0>)
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <HAL_SPI_MspInit+0xa0>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004a2e:	2328      	movs	r3, #40	; 0x28
 8004a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a32:	2302      	movs	r3, #2
 8004a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a3e:	2305      	movs	r3, #5
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	4619      	mov	r1, r3
 8004a48:	480d      	ldr	r0, [pc, #52]	; (8004a80 <HAL_SPI_MspInit+0xa4>)
 8004a4a:	f003 f999 	bl	8007d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a4e:	2310      	movs	r3, #16
 8004a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a52:	2302      	movs	r3, #2
 8004a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a5e:	2305      	movs	r3, #5
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a62:	f107 0314 	add.w	r3, r7, #20
 8004a66:	4619      	mov	r1, r3
 8004a68:	4805      	ldr	r0, [pc, #20]	; (8004a80 <HAL_SPI_MspInit+0xa4>)
 8004a6a:	f003 f989 	bl	8007d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004a6e:	bf00      	nop
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40013000 	.word	0x40013000
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	48000400 	.word	0x48000400

08004a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a23      	ldr	r2, [pc, #140]	; (8004b20 <HAL_TIM_Base_MspInit+0x9c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d114      	bne.n	8004ac0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a96:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a22      	ldr	r2, [pc, #136]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2105      	movs	r1, #5
 8004ab2:	201d      	movs	r0, #29
 8004ab4:	f002 fec8 	bl	8007848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ab8:	201d      	movs	r0, #29
 8004aba:	f002 fee1 	bl	8007880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004abe:	e02a      	b.n	8004b16 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIM_Base_MspInit+0xa4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d114      	bne.n	8004af4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004ad0:	f043 0310 	orr.w	r3, r3, #16
 8004ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2105      	movs	r1, #5
 8004ae6:	2036      	movs	r0, #54	; 0x36
 8004ae8:	f002 feae 	bl	8007848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004aec:	2036      	movs	r0, #54	; 0x36
 8004aee:	f002 fec7 	bl	8007880 <HAL_NVIC_EnableIRQ>
}
 8004af2:	e010      	b.n	8004b16 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <HAL_TIM_Base_MspInit+0xa8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10b      	bne.n	8004b16 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004b04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b08:	6613      	str	r3, [r2, #96]	; 0x60
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_TIM_Base_MspInit+0xa0>)
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40001000 	.word	0x40001000
 8004b2c:	40013400 	.word	0x40013400

08004b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004b40:	2200      	movs	r2, #0
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	2019      	movs	r0, #25
 8004b46:	f002 fe7f 	bl	8007848 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004b4a:	2019      	movs	r0, #25
 8004b4c:	f002 fe98 	bl	8007880 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <HAL_InitTick+0x9c>)
 8004b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <HAL_InitTick+0x9c>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	6613      	str	r3, [r2, #96]	; 0x60
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_InitTick+0x9c>)
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b68:	f107 0210 	add.w	r2, r7, #16
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f005 fc2a 	bl	800a3cc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004b78:	f005 fc12 	bl	800a3a0 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <HAL_InitTick+0xa0>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0c9b      	lsrs	r3, r3, #18
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004b8e:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <HAL_InitTick+0xa8>)
 8004b90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004b92:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b98:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8004bac:	4809      	ldr	r0, [pc, #36]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004bae:	f007 fb15 	bl	800c1dc <HAL_TIM_Base_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <HAL_InitTick+0xa4>)
 8004bba:	f007 fbcf 	bl	800c35c <HAL_TIM_Base_Start_IT>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	e000      	b.n	8004bc4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3730      	adds	r7, #48	; 0x30
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	431bde83 	.word	0x431bde83
 8004bd4:	20003e7c 	.word	0x20003e7c
 8004bd8:	40014400 	.word	0x40014400

08004bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004be0:	e7fe      	b.n	8004be0 <NMI_Handler+0x4>

08004be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004be6:	e7fe      	b.n	8004be6 <HardFault_Handler+0x4>

08004be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bec:	e7fe      	b.n	8004bec <MemManage_Handler+0x4>

08004bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bf2:	e7fe      	b.n	8004bf2 <BusFault_Handler+0x4>

08004bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bf8:	e7fe      	b.n	8004bf8 <UsageFault_Handler+0x4>

08004bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <DMA1_Channel1_IRQHandler+0x10>)
 8004c0e:	f002 ff68 	bl	8007ae2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2000190c 	.word	0x2000190c

08004c1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004c20:	4803      	ldr	r0, [pc, #12]	; (8004c30 <ADC1_2_IRQHandler+0x14>)
 8004c22:	f000 fdd9 	bl	80057d8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004c26:	4803      	ldr	r0, [pc, #12]	; (8004c34 <ADC1_2_IRQHandler+0x18>)
 8004c28:	f000 fdd6 	bl	80057d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	2000183c 	.word	0x2000183c
 8004c34:	200018a4 	.word	0x200018a4

08004c38 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004c3c:	4802      	ldr	r0, [pc, #8]	; (8004c48 <CAN1_TX_IRQHandler+0x10>)
 8004c3e:	f002 fb1c 	bl	800727a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200019cc 	.word	0x200019cc

08004c4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004c50:	4802      	ldr	r0, [pc, #8]	; (8004c5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004c52:	f007 fbf3 	bl	800c43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20003e7c 	.word	0x20003e7c

08004c60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c64:	4802      	ldr	r0, [pc, #8]	; (8004c70 <TIM3_IRQHandler+0x10>)
 8004c66:	f007 fbe9 	bl	800c43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20001a8c 	.word	0x20001a8c

08004c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c78:	4802      	ldr	r0, [pc, #8]	; (8004c84 <TIM6_DAC_IRQHandler+0x10>)
 8004c7a:	f007 fbdf 	bl	800c43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20001ad8 	.word	0x20001ad8

08004c88 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004c8c:	4802      	ldr	r0, [pc, #8]	; (8004c98 <DMA2_Channel1_IRQHandler+0x10>)
 8004c8e:	f002 ff28 	bl	8007ae2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000196c 	.word	0x2000196c

08004c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ca0:	4802      	ldr	r0, [pc, #8]	; (8004cac <OTG_FS_IRQHandler+0x10>)
 8004ca2:	f003 fb82 	bl	80083aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20009094 	.word	0x20009094

08004cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
	return 1;
 8004cb4:	2301      	movs	r3, #1
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <_kill>:

int _kill(int pid, int sig)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cca:	f00e fcd5 	bl	8013678 <__errno>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2216      	movs	r2, #22
 8004cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_exit>:

void _exit (int status)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ffe7 	bl	8004cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cf2:	e7fe      	b.n	8004cf2 <_exit+0x12>

08004cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e00a      	b.n	8004d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d06:	f3af 8000 	nop.w
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	60ba      	str	r2, [r7, #8]
 8004d12:	b2ca      	uxtb	r2, r1
 8004d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	dbf0      	blt.n	8004d06 <_read+0x12>
	}

return len;
 8004d24:	687b      	ldr	r3, [r7, #4]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e009      	b.n	8004d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	60ba      	str	r2, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3301      	adds	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	dbf1      	blt.n	8004d40 <_write+0x12>
	}
	return len;
 8004d5c:	687b      	ldr	r3, [r7, #4]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <_close>:

int _close(int file)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8004d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <_isatty>:

int _isatty(int file)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
	return 1;
 8004da6:	2301      	movs	r3, #1
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dd8:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <_sbrk+0x5c>)
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <_sbrk+0x60>)
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <_sbrk+0x64>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <_sbrk+0x64>)
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <_sbrk+0x68>)
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <_sbrk+0x64>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d207      	bcs.n	8004e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e00:	f00e fc3a 	bl	8013678 <__errno>
 8004e04:	4603      	mov	r3, r0
 8004e06:	220c      	movs	r2, #12
 8004e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0e:	e009      	b.n	8004e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <_sbrk+0x64>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <_sbrk+0x64>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	4a05      	ldr	r2, [pc, #20]	; (8004e34 <_sbrk+0x64>)
 8004e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20050000 	.word	0x20050000
 8004e30:	00000400 	.word	0x00000400
 8004e34:	20003ec8 	.word	0x20003ec8
 8004e38:	200097d0 	.word	0x200097d0

08004e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <SystemInit+0x20>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <SystemInit+0x20>)
 8004e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004e50:	bf00      	nop
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e64:	f7ff ffea 	bl	8004e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e68:	480c      	ldr	r0, [pc, #48]	; (8004e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8004e6a:	490d      	ldr	r1, [pc, #52]	; (8004ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <LoopForever+0xe>)
  movs r3, #0
 8004e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e70:	e002      	b.n	8004e78 <LoopCopyDataInit>

08004e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e76:	3304      	adds	r3, #4

08004e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e7c:	d3f9      	bcc.n	8004e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e80:	4c0a      	ldr	r4, [pc, #40]	; (8004eac <LoopForever+0x16>)
  movs r3, #0
 8004e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e84:	e001      	b.n	8004e8a <LoopFillZerobss>

08004e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e88:	3204      	adds	r2, #4

08004e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e8c:	d3fb      	bcc.n	8004e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e8e:	f00e fcef 	bl	8013870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e92:	f7fe f8bb 	bl	800300c <main>

08004e96 <LoopForever>:

LoopForever:
    b LoopForever
 8004e96:	e7fe      	b.n	8004e96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004e98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ea0:	200004e8 	.word	0x200004e8
  ldr r2, =_sidata
 8004ea4:	08016f48 	.word	0x08016f48
  ldr r2, =_sbss
 8004ea8:	200004e8 	.word	0x200004e8
  ldr r4, =_ebss
 8004eac:	200097d0 	.word	0x200097d0

08004eb0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004eb0:	e7fe      	b.n	8004eb0 <CAN1_RX0_IRQHandler>

08004eb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ebc:	2003      	movs	r0, #3
 8004ebe:	f002 fcb8 	bl	8007832 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ec2:	200f      	movs	r0, #15
 8004ec4:	f7ff fe34 	bl	8004b30 <HAL_InitTick>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	71fb      	strb	r3, [r7, #7]
 8004ed2:	e001      	b.n	8004ed8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ed4:	f7ff fb78 	bl	80045c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_IncTick+0x20>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_IncTick+0x24>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <HAL_IncTick+0x24>)
 8004ef6:	6013      	str	r3, [r2, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000018c 	.word	0x2000018c
 8004f08:	20003ecc 	.word	0x20003ecc

08004f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_GetTick+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20003ecc 	.word	0x20003ecc

08004f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f2c:	f7ff ffee 	bl	8004f0c <HAL_GetTick>
 8004f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d005      	beq.n	8004f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_Delay+0x44>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f4a:	bf00      	nop
 8004f4c:	f7ff ffde 	bl	8004f0c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d8f7      	bhi.n	8004f4c <HAL_Delay+0x28>
  {
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2000018c 	.word	0x2000018c

08004f6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3360      	adds	r3, #96	; 0x60
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <LL_ADC_SetOffset+0x44>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	4313      	orrs	r3, r2
 8005004:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	03fff000 	.word	0x03fff000

0800501c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3360      	adds	r3, #96	; 0x60
 800502a:	461a      	mov	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3360      	adds	r3, #96	; 0x60
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	431a      	orrs	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	615a      	str	r2, [r3, #20]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b087      	sub	sp, #28
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3330      	adds	r3, #48	; 0x30
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	4413      	add	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	211f      	movs	r1, #31
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	401a      	ands	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0e9b      	lsrs	r3, r3, #26
 8005102:	f003 011f 	and.w	r1, r3, #31
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3314      	adds	r3, #20
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	0e5b      	lsrs	r3, r3, #25
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	4413      	add	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	0d1b      	lsrs	r3, r3, #20
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	2107      	movs	r1, #7
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	401a      	ands	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f003 0318 	and.w	r3, r3, #24
 80051c2:	4908      	ldr	r1, [pc, #32]	; (80051e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80051c4:	40d9      	lsrs	r1, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	400b      	ands	r3, r1
 80051ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	0007ffff 	.word	0x0007ffff

080051e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 031f 	and.w	r3, r3, #31
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6093      	str	r3, [r2, #8]
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005258:	d101      	bne.n	800525e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800527c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a8:	d101      	bne.n	80052ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052f8:	f043 0202 	orr.w	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <LL_ADC_IsEnabled+0x18>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <LL_ADC_IsEnabled+0x1a>
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d101      	bne.n	800534a <LL_ADC_IsDisableOngoing+0x18>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <LL_ADC_IsDisableOngoing+0x1a>
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d101      	bne.n	8005398 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d101      	bne.n	80053be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b089      	sub	sp, #36	; 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e134      	b.n	8005650 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff f90f 	bl	8004618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff19 	bl	8005244 <LL_ADC_IsDeepPowerDownEnabled>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff feff 	bl	8005220 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff ff34 	bl	8005294 <LL_ADC_IsInternalRegulatorEnabled>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d115      	bne.n	800545e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff ff18 	bl	800526c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800543c:	4b86      	ldr	r3, [pc, #536]	; (8005658 <HAL_ADC_Init+0x28c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	4a86      	ldr	r2, [pc, #536]	; (800565c <HAL_ADC_Init+0x290>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	3301      	adds	r3, #1
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005450:	e002      	b.n	8005458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	3b01      	subs	r3, #1
 8005456:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f9      	bne.n	8005452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ff16 	bl	8005294 <LL_ADC_IsInternalRegulatorEnabled>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10d      	bne.n	800548a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f043 0210 	orr.w	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff76 	bl	8005380 <LL_ADC_REG_IsConversionOngoing>
 8005494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f040 80cd 	bne.w	800563e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 80c9 	bne.w	800563e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054b4:	f043 0202 	orr.w	r2, r3, #2
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff ff23 	bl	800530c <LL_ADC_IsEnabled>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d110      	bne.n	80054ee <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054cc:	4864      	ldr	r0, [pc, #400]	; (8005660 <HAL_ADC_Init+0x294>)
 80054ce:	f7ff ff1d 	bl	800530c <LL_ADC_IsEnabled>
 80054d2:	4604      	mov	r4, r0
 80054d4:	4863      	ldr	r0, [pc, #396]	; (8005664 <HAL_ADC_Init+0x298>)
 80054d6:	f7ff ff19 	bl	800530c <LL_ADC_IsEnabled>
 80054da:	4603      	mov	r3, r0
 80054dc:	4323      	orrs	r3, r4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4619      	mov	r1, r3
 80054e8:	485f      	ldr	r0, [pc, #380]	; (8005668 <HAL_ADC_Init+0x29c>)
 80054ea:	f7ff fd3f 	bl	8004f6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7e5b      	ldrb	r3, [r3, #25]
 80054f2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054f8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80054fe:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005504:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800550c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d106      	bne.n	800552a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	3b01      	subs	r3, #1
 8005522:	045b      	lsls	r3, r3, #17
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	4b47      	ldr	r3, [pc, #284]	; (800566c <HAL_ADC_Init+0x2a0>)
 800554e:	4013      	ands	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	69b9      	ldr	r1, [r7, #24]
 8005556:	430b      	orrs	r3, r1
 8005558:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ff0e 	bl	8005380 <LL_ADC_REG_IsConversionOngoing>
 8005564:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff1b 	bl	80053a6 <LL_ADC_INJ_IsConversionOngoing>
 8005570:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d140      	bne.n	80055fa <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d13d      	bne.n	80055fa <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	7e1b      	ldrb	r3, [r3, #24]
 8005586:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005588:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005590:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a0:	f023 0306 	bic.w	r3, r3, #6
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	430b      	orrs	r3, r1
 80055ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d118      	bne.n	80055ea <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055ce:	4311      	orrs	r1, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055d4:	4311      	orrs	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055da:	430a      	orrs	r2, r1
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	611a      	str	r2, [r3, #16]
 80055e8:	e007      	b.n	80055fa <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10c      	bne.n	800561c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f023 010f 	bic.w	r1, r3, #15
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
 800561a:	e007      	b.n	800562c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 020f 	bic.w	r2, r2, #15
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	659a      	str	r2, [r3, #88]	; 0x58
 800563c:	e007      	b.n	800564e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	f043 0210 	orr.w	r2, r3, #16
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800564e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3724      	adds	r7, #36	; 0x24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd90      	pop	{r4, r7, pc}
 8005658:	20000184 	.word	0x20000184
 800565c:	053e2d63 	.word	0x053e2d63
 8005660:	50040000 	.word	0x50040000
 8005664:	50040100 	.word	0x50040100
 8005668:	50040300 	.word	0x50040300
 800566c:	fff0c007 	.word	0xfff0c007

08005670 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800567c:	4850      	ldr	r0, [pc, #320]	; (80057c0 <HAL_ADC_Start_DMA+0x150>)
 800567e:	f7ff fdb3 	bl	80051e8 <LL_ADC_GetMultimode>
 8005682:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fe79 	bl	8005380 <LL_ADC_REG_IsConversionOngoing>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 808e 	bne.w	80057b2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_ADC_Start_DMA+0x34>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e089      	b.n	80057b8 <HAL_ADC_Start_DMA+0x148>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d002      	beq.n	80056be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b09      	cmp	r3, #9
 80056bc:	d172      	bne.n	80057a4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fec8 	bl	8006454 <ADC_Enable>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d165      	bne.n	800579a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <HAL_ADC_Start_DMA+0x154>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d002      	beq.n	80056f2 <HAL_ADC_Start_DMA+0x82>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	e000      	b.n	80056f4 <HAL_ADC_Start_DMA+0x84>
 80056f2:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <HAL_ADC_Start_DMA+0x158>)
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d002      	beq.n	8005702 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	f023 0206 	bic.w	r2, r3, #6
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	65da      	str	r2, [r3, #92]	; 0x5c
 8005726:	e002      	b.n	800572e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <HAL_ADC_Start_DMA+0x15c>)
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573a:	4a25      	ldr	r2, [pc, #148]	; (80057d0 <HAL_ADC_Start_DMA+0x160>)
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005742:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_ADC_Start_DMA+0x164>)
 8005744:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	221c      	movs	r2, #28
 800574c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0210 	orr.w	r2, r2, #16
 8005764:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3340      	adds	r3, #64	; 0x40
 8005780:	4619      	mov	r1, r3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f002 f931 	bl	80079ec <HAL_DMA_Start_IT>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fde0 	bl	8005358 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005798:	e00d      	b.n	80057b6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80057a2:	e008      	b.n	80057b6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80057b0:	e001      	b.n	80057b6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
 80057b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	50040300 	.word	0x50040300
 80057c4:	50040100 	.word	0x50040100
 80057c8:	50040000 	.word	0x50040000
 80057cc:	0800661f 	.word	0x0800661f
 80057d0:	080066f7 	.word	0x080066f7
 80057d4:	08006713 	.word	0x08006713

080057d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057f4:	4882      	ldr	r0, [pc, #520]	; (8005a00 <HAL_ADC_IRQHandler+0x228>)
 80057f6:	f7ff fcf7 	bl	80051e8 <LL_ADC_GetMultimode>
 80057fa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d017      	beq.n	8005836 <HAL_ADC_IRQHandler+0x5e>
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d105      	bne.n	8005828 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f867 	bl	80068fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2202      	movs	r2, #2
 8005834:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <HAL_ADC_IRQHandler+0x72>
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8083 	beq.w	800595c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d07d      	beq.n	800595c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fc11 	bl	80050a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d062      	beq.n	800594e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a5d      	ldr	r2, [pc, #372]	; (8005a04 <HAL_ADC_IRQHandler+0x22c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d002      	beq.n	8005898 <HAL_ADC_IRQHandler+0xc0>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	e000      	b.n	800589a <HAL_ADC_IRQHandler+0xc2>
 8005898:	4b5b      	ldr	r3, [pc, #364]	; (8005a08 <HAL_ADC_IRQHandler+0x230>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	4293      	cmp	r3, r2
 80058a0:	d008      	beq.n	80058b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d002      	beq.n	80058b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d104      	bne.n	80058be <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	e00c      	b.n	80058d8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_ADC_IRQHandler+0x22c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d002      	beq.n	80058ce <HAL_ADC_IRQHandler+0xf6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	e000      	b.n	80058d0 <HAL_ADC_IRQHandler+0xf8>
 80058ce:	4b4e      	ldr	r3, [pc, #312]	; (8005a08 <HAL_ADC_IRQHandler+0x230>)
 80058d0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d135      	bne.n	800594e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d12e      	bne.n	800594e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fd43 	bl	8005380 <LL_ADC_REG_IsConversionOngoing>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11a      	bne.n	8005936 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 020c 	bic.w	r2, r2, #12
 800590e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d112      	bne.n	800594e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f043 0201 	orr.w	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	659a      	str	r2, [r3, #88]	; 0x58
 8005934:	e00b      	b.n	800594e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	f043 0210 	orr.w	r2, r3, #16
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	f043 0201 	orr.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f95c 	bl	8005c0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	220c      	movs	r2, #12
 800595a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_ADC_IRQHandler+0x198>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 809f 	beq.w	8005aba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8099 	beq.w	8005aba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fbbc 	bl	8005122 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80059aa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fb77 	bl	80050a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059b6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <HAL_ADC_IRQHandler+0x22c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d002      	beq.n	80059c8 <HAL_ADC_IRQHandler+0x1f0>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	e000      	b.n	80059ca <HAL_ADC_IRQHandler+0x1f2>
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <HAL_ADC_IRQHandler+0x230>)
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d008      	beq.n	80059e4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d002      	beq.n	80059e4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b07      	cmp	r3, #7
 80059e2:	d104      	bne.n	80059ee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	623b      	str	r3, [r7, #32]
 80059ec:	e013      	b.n	8005a16 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_ADC_IRQHandler+0x22c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_ADC_IRQHandler+0x234>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	e007      	b.n	8005a0e <HAL_ADC_IRQHandler+0x236>
 80059fe:	bf00      	nop
 8005a00:	50040300 	.word	0x50040300
 8005a04:	50040100 	.word	0x50040100
 8005a08:	50040000 	.word	0x50040000
 8005a0c:	4b7d      	ldr	r3, [pc, #500]	; (8005c04 <HAL_ADC_IRQHandler+0x42c>)
 8005a0e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d047      	beq.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_ADC_IRQHandler+0x25e>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d03f      	beq.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d13a      	bne.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d133      	bne.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d12e      	bne.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fca7 	bl	80053a6 <LL_ADC_INJ_IsConversionOngoing>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d11a      	bne.n	8005a94 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d112      	bne.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	f043 0201 	orr.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	659a      	str	r2, [r3, #88]	; 0x58
 8005a92:	e00b      	b.n	8005aac <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	f043 0210 	orr.w	r2, r3, #16
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa4:	f043 0201 	orr.w	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fefd 	bl	80068ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2260      	movs	r2, #96	; 0x60
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <HAL_ADC_IRQHandler+0x310>
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8aa 	bl	8005c34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <HAL_ADC_IRQHandler+0x340>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00d      	beq.n	8005b18 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fee3 	bl	80068d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d012      	beq.n	8005b48 <HAL_ADC_IRQHandler+0x370>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fed5 	bl	80068e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d036      	beq.n	8005bc0 <HAL_ADC_IRQHandler+0x3e8>
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d031      	beq.n	8005bc0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005b64:	2301      	movs	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	e014      	b.n	8005b94 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005b70:	4825      	ldr	r0, [pc, #148]	; (8005c08 <HAL_ADC_IRQHandler+0x430>)
 8005b72:	f7ff fb47 	bl	8005204 <LL_ADC_GetMultiDMATransfer>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	e008      	b.n	8005b94 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005b90:	2301      	movs	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10e      	bne.n	8005bb8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005baa:	f043 0202 	orr.w	r2, r3, #2
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f848 	bl	8005c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2210      	movs	r2, #16
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <HAL_ADC_IRQHandler+0x424>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be4:	f043 0208 	orr.w	r2, r3, #8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bf4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fe62 	bl	80068c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005bfc:	bf00      	nop
 8005bfe:	3728      	adds	r7, #40	; 0x28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	50040000 	.word	0x50040000
 8005c08:	50040300 	.word	0x50040300

08005c0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b0b6      	sub	sp, #216	; 0xd8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_ADC_ConfigChannel+0x22>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e3d5      	b.n	800642a <HAL_ADC_ConfigChannel+0x7ce>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fb78 	bl	8005380 <LL_ADC_REG_IsConversionOngoing>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f040 83ba 	bne.w	800640c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d824      	bhi.n	8005cea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	3b02      	subs	r3, #2
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d81b      	bhi.n	8005ce2 <HAL_ADC_ConfigChannel+0x86>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <HAL_ADC_ConfigChannel+0x54>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cc9 	.word	0x08005cc9
 8005cb8:	08005cd1 	.word	0x08005cd1
 8005cbc:	08005cd9 	.word	0x08005cd9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	220c      	movs	r2, #12
 8005cc4:	605a      	str	r2, [r3, #4]
          break;
 8005cc6:	e011      	b.n	8005cec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2212      	movs	r2, #18
 8005ccc:	605a      	str	r2, [r3, #4]
          break;
 8005cce:	e00d      	b.n	8005cec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2218      	movs	r2, #24
 8005cd4:	605a      	str	r2, [r3, #4]
          break;
 8005cd6:	e009      	b.n	8005cec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cde:	605a      	str	r2, [r3, #4]
          break;
 8005ce0:	e004      	b.n	8005cec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2206      	movs	r2, #6
 8005ce6:	605a      	str	r2, [r3, #4]
          break;
 8005ce8:	e000      	b.n	8005cec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005cea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f7ff f9e6 	bl	80050ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fb3c 	bl	8005380 <LL_ADC_REG_IsConversionOngoing>
 8005d08:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fb48 	bl	80053a6 <LL_ADC_INJ_IsConversionOngoing>
 8005d16:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 81c1 	bne.w	80060a6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 81bc 	bne.w	80060a6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d36:	d10f      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2200      	movs	r2, #0
 8005d42:	4619      	mov	r1, r3
 8005d44:	f7ff fa00 	bl	8005148 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff f994 	bl	800507e <LL_ADC_SetSamplingTimeCommonConfig>
 8005d56:	e00e      	b.n	8005d76 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	461a      	mov	r2, r3
 8005d66:	f7ff f9ef 	bl	8005148 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff f984 	bl	800507e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d00a      	beq.n	8005dae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6919      	ldr	r1, [r3, #16]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da8:	f7ff f914 	bl	8004fd4 <LL_ADC_SetOffset>
 8005dac:	e17b      	b.n	80060a6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff f931 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <HAL_ADC_ConfigChannel+0x17e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff f926 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	0e9b      	lsrs	r3, r3, #26
 8005dd4:	f003 021f 	and.w	r2, r3, #31
 8005dd8:	e01e      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x1bc>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff f91b 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005df0:	fa93 f3a3 	rbit	r3, r3
 8005df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005e08:	2320      	movs	r3, #32
 8005e0a:	e004      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e10:	fab3 f383 	clz	r3, r3
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <HAL_ADC_ConfigChannel+0x1d4>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	0e9b      	lsrs	r3, r3, #26
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	e018      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x206>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e3c:	fa93 f3a3 	rbit	r3, r3
 8005e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005e54:	2320      	movs	r3, #32
 8005e56:	e004      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005e58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e5c:	fab3 f383 	clz	r3, r3
 8005e60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d106      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff f8ea 	bl	8005048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff f8ce 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x244>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff f8c3 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005e96:	4603      	mov	r3, r0
 8005e98:	0e9b      	lsrs	r3, r3, #26
 8005e9a:	f003 021f 	and.w	r2, r3, #31
 8005e9e:	e01e      	b.n	8005ede <HAL_ADC_ConfigChannel+0x282>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff f8b8 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005ece:	2320      	movs	r3, #32
 8005ed0:	e004      	b.n	8005edc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8005ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ed6:	fab3 f383 	clz	r3, r3
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x29a>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	0e9b      	lsrs	r3, r3, #26
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	e018      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x2cc>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f02:	fa93 f3a3 	rbit	r3, r3
 8005f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	e004      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d106      	bne.n	8005f3a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2101      	movs	r1, #1
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff f887 	bl	8005048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff f86b 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <HAL_ADC_ConfigChannel+0x30a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2102      	movs	r1, #2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff f860 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	0e9b      	lsrs	r3, r3, #26
 8005f60:	f003 021f 	and.w	r2, r3, #31
 8005f64:	e01e      	b.n	8005fa4 <HAL_ADC_ConfigChannel+0x348>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f855 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f7c:	fa93 f3a3 	rbit	r3, r3
 8005f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005f8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8005f94:	2320      	movs	r3, #32
 8005f96:	e004      	b.n	8005fa2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f9c:	fab3 f383 	clz	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d105      	bne.n	8005fbc <HAL_ADC_ConfigChannel+0x360>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	0e9b      	lsrs	r3, r3, #26
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	e016      	b.n	8005fea <HAL_ADC_ConfigChannel+0x38e>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc8:	fa93 f3a3 	rbit	r3, r3
 8005fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005fdc:	2320      	movs	r3, #32
 8005fde:	e004      	b.n	8005fea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fe4:	fab3 f383 	clz	r3, r3
 8005fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d106      	bne.n	8005ffc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f826 	bl	8005048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2103      	movs	r1, #3
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff f80a 	bl	800501c <LL_ADC_GetOffsetChannel>
 8006008:	4603      	mov	r3, r0
 800600a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <HAL_ADC_ConfigChannel+0x3cc>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2103      	movs	r1, #3
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe ffff 	bl	800501c <LL_ADC_GetOffsetChannel>
 800601e:	4603      	mov	r3, r0
 8006020:	0e9b      	lsrs	r3, r3, #26
 8006022:	f003 021f 	and.w	r2, r3, #31
 8006026:	e017      	b.n	8006058 <HAL_ADC_ConfigChannel+0x3fc>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2103      	movs	r1, #3
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fff4 	bl	800501c <LL_ADC_GetOffsetChannel>
 8006034:	4603      	mov	r3, r0
 8006036:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800603a:	fa93 f3a3 	rbit	r3, r3
 800603e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006042:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800604a:	2320      	movs	r3, #32
 800604c:	e003      	b.n	8006056 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800604e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006050:	fab3 f383 	clz	r3, r3
 8006054:	b2db      	uxtb	r3, r3
 8006056:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_ADC_ConfigChannel+0x414>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	0e9b      	lsrs	r3, r3, #26
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	e011      	b.n	8006094 <HAL_ADC_ConfigChannel+0x438>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006078:	fa93 f3a3 	rbit	r3, r3
 800607c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800607e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006080:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006088:	2320      	movs	r3, #32
 800608a:	e003      	b.n	8006094 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800608c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006094:	429a      	cmp	r2, r3
 8006096:	d106      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	2103      	movs	r1, #3
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe ffd1 	bl	8005048 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff f92e 	bl	800530c <LL_ADC_IsEnabled>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 8140 	bne.w	8006338 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	461a      	mov	r2, r3
 80060c6:	f7ff f86b 	bl	80051a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4a8f      	ldr	r2, [pc, #572]	; (800630c <HAL_ADC_ConfigChannel+0x6b0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	f040 8131 	bne.w	8006338 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <HAL_ADC_ConfigChannel+0x4a2>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	0e9b      	lsrs	r3, r3, #26
 80060ec:	3301      	adds	r3, #1
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2b09      	cmp	r3, #9
 80060f4:	bf94      	ite	ls
 80060f6:	2301      	movls	r3, #1
 80060f8:	2300      	movhi	r3, #0
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	e019      	b.n	8006132 <HAL_ADC_ConfigChannel+0x4d6>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006106:	fa93 f3a3 	rbit	r3, r3
 800610a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800610c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800610e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006116:	2320      	movs	r3, #32
 8006118:	e003      	b.n	8006122 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800611a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800611c:	fab3 f383 	clz	r3, r3
 8006120:	b2db      	uxtb	r3, r3
 8006122:	3301      	adds	r3, #1
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	2b09      	cmp	r3, #9
 800612a:	bf94      	ite	ls
 800612c:	2301      	movls	r3, #1
 800612e:	2300      	movhi	r3, #0
 8006130:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006132:	2b00      	cmp	r3, #0
 8006134:	d079      	beq.n	800622a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <HAL_ADC_ConfigChannel+0x4f6>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	0e9b      	lsrs	r3, r3, #26
 8006148:	3301      	adds	r3, #1
 800614a:	069b      	lsls	r3, r3, #26
 800614c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006150:	e015      	b.n	800617e <HAL_ADC_ConfigChannel+0x522>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615a:	fa93 f3a3 	rbit	r3, r3
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006162:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800616a:	2320      	movs	r3, #32
 800616c:	e003      	b.n	8006176 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800616e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006170:	fab3 f383 	clz	r3, r3
 8006174:	b2db      	uxtb	r3, r3
 8006176:	3301      	adds	r3, #1
 8006178:	069b      	lsls	r3, r3, #26
 800617a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_ADC_ConfigChannel+0x542>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	3301      	adds	r3, #1
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	2101      	movs	r1, #1
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	e017      	b.n	80061ce <HAL_ADC_ConfigChannel+0x572>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a6:	fa93 f3a3 	rbit	r3, r3
 80061aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80061ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80061b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80061b6:	2320      	movs	r3, #32
 80061b8:	e003      	b.n	80061c2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80061ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061bc:	fab3 f383 	clz	r3, r3
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	3301      	adds	r3, #1
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	ea42 0103 	orr.w	r1, r2, r3
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <HAL_ADC_ConfigChannel+0x598>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	0e9b      	lsrs	r3, r3, #26
 80061e4:	3301      	adds	r3, #1
 80061e6:	f003 021f 	and.w	r2, r3, #31
 80061ea:	4613      	mov	r3, r2
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	4413      	add	r3, r2
 80061f0:	051b      	lsls	r3, r3, #20
 80061f2:	e018      	b.n	8006226 <HAL_ADC_ConfigChannel+0x5ca>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	fa93 f3a3 	rbit	r3, r3
 8006200:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800620c:	2320      	movs	r3, #32
 800620e:	e003      	b.n	8006218 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	fab3 f383 	clz	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	3301      	adds	r3, #1
 800621a:	f003 021f 	and.w	r2, r3, #31
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006226:	430b      	orrs	r3, r1
 8006228:	e081      	b.n	800632e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x5ea>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	0e9b      	lsrs	r3, r3, #26
 800623c:	3301      	adds	r3, #1
 800623e:	069b      	lsls	r3, r3, #26
 8006240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006244:	e015      	b.n	8006272 <HAL_ADC_ConfigChannel+0x616>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	fa93 f3a3 	rbit	r3, r3
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800625e:	2320      	movs	r3, #32
 8006260:	e003      	b.n	800626a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	fab3 f383 	clz	r3, r3
 8006268:	b2db      	uxtb	r3, r3
 800626a:	3301      	adds	r3, #1
 800626c:	069b      	lsls	r3, r3, #26
 800626e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x636>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	0e9b      	lsrs	r3, r3, #26
 8006284:	3301      	adds	r3, #1
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	e017      	b.n	80062c2 <HAL_ADC_ConfigChannel+0x666>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	fa93 f3a3 	rbit	r3, r3
 800629e:	61fb      	str	r3, [r7, #28]
  return result;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80062aa:	2320      	movs	r3, #32
 80062ac:	e003      	b.n	80062b6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	fab3 f383 	clz	r3, r3
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	3301      	adds	r3, #1
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f303 	lsl.w	r3, r1, r3
 80062c2:	ea42 0103 	orr.w	r1, r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <HAL_ADC_ConfigChannel+0x692>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	0e9b      	lsrs	r3, r3, #26
 80062d8:	3301      	adds	r3, #1
 80062da:	f003 021f 	and.w	r2, r3, #31
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	3b1e      	subs	r3, #30
 80062e6:	051b      	lsls	r3, r3, #20
 80062e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062ec:	e01e      	b.n	800632c <HAL_ADC_ConfigChannel+0x6d0>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	613b      	str	r3, [r7, #16]
  return result;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006306:	2320      	movs	r3, #32
 8006308:	e006      	b.n	8006318 <HAL_ADC_ConfigChannel+0x6bc>
 800630a:	bf00      	nop
 800630c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	fab3 f383 	clz	r3, r3
 8006316:	b2db      	uxtb	r3, r3
 8006318:	3301      	adds	r3, #1
 800631a:	f003 021f 	and.w	r2, r3, #31
 800631e:	4613      	mov	r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4413      	add	r3, r2
 8006324:	3b1e      	subs	r3, #30
 8006326:	051b      	lsls	r3, r3, #20
 8006328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800632c:	430b      	orrs	r3, r1
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	6892      	ldr	r2, [r2, #8]
 8006332:	4619      	mov	r1, r3
 8006334:	f7fe ff08 	bl	8005148 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b3d      	ldr	r3, [pc, #244]	; (8006434 <HAL_ADC_ConfigChannel+0x7d8>)
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d06c      	beq.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006344:	483c      	ldr	r0, [pc, #240]	; (8006438 <HAL_ADC_ConfigChannel+0x7dc>)
 8006346:	f7fe fe37 	bl	8004fb8 <LL_ADC_GetCommonPathInternalCh>
 800634a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3a      	ldr	r2, [pc, #232]	; (800643c <HAL_ADC_ConfigChannel+0x7e0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d127      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800635c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d121      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a35      	ldr	r2, [pc, #212]	; (8006440 <HAL_ADC_ConfigChannel+0x7e4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d157      	bne.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800636e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006376:	4619      	mov	r1, r3
 8006378:	482f      	ldr	r0, [pc, #188]	; (8006438 <HAL_ADC_ConfigChannel+0x7dc>)
 800637a:	f7fe fe0a 	bl	8004f92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800637e:	4b31      	ldr	r3, [pc, #196]	; (8006444 <HAL_ADC_ConfigChannel+0x7e8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	099b      	lsrs	r3, r3, #6
 8006384:	4a30      	ldr	r2, [pc, #192]	; (8006448 <HAL_ADC_ConfigChannel+0x7ec>)
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	099b      	lsrs	r3, r3, #6
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	4613      	mov	r3, r2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006398:	e002      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b01      	subs	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f9      	bne.n	800639a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063a6:	e03a      	b.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <HAL_ADC_ConfigChannel+0x7f0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d113      	bne.n	80063da <HAL_ADC_ConfigChannel+0x77e>
 80063b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10d      	bne.n	80063da <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <HAL_ADC_ConfigChannel+0x7e4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d12a      	bne.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d0:	4619      	mov	r1, r3
 80063d2:	4819      	ldr	r0, [pc, #100]	; (8006438 <HAL_ADC_ConfigChannel+0x7dc>)
 80063d4:	f7fe fddd 	bl	8004f92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063d8:	e021      	b.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_ADC_ConfigChannel+0x7f4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d11c      	bne.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d116      	bne.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a12      	ldr	r2, [pc, #72]	; (8006440 <HAL_ADC_ConfigChannel+0x7e4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d111      	bne.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006402:	4619      	mov	r1, r3
 8006404:	480c      	ldr	r0, [pc, #48]	; (8006438 <HAL_ADC_ConfigChannel+0x7dc>)
 8006406:	f7fe fdc4 	bl	8004f92 <LL_ADC_SetCommonPathInternalCh>
 800640a:	e008      	b.n	800641e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006426:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800642a:	4618      	mov	r0, r3
 800642c:	37d8      	adds	r7, #216	; 0xd8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	80080000 	.word	0x80080000
 8006438:	50040300 	.word	0x50040300
 800643c:	c7520000 	.word	0xc7520000
 8006440:	50040000 	.word	0x50040000
 8006444:	20000184 	.word	0x20000184
 8006448:	053e2d63 	.word	0x053e2d63
 800644c:	cb840000 	.word	0xcb840000
 8006450:	80000001 	.word	0x80000001

08006454 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800645c:	2300      	movs	r3, #0
 800645e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe ff51 	bl	800530c <LL_ADC_IsEnabled>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d169      	bne.n	8006544 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <ADC_Enable+0xfc>)
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	f043 0210 	orr.w	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648e:	f043 0201 	orr.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e055      	b.n	8006546 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe ff0c 	bl	80052bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80064a4:	482b      	ldr	r0, [pc, #172]	; (8006554 <ADC_Enable+0x100>)
 80064a6:	f7fe fd87 	bl	8004fb8 <LL_ADC_GetCommonPathInternalCh>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d013      	beq.n	80064dc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064b4:	4b28      	ldr	r3, [pc, #160]	; (8006558 <ADC_Enable+0x104>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	099b      	lsrs	r3, r3, #6
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <ADC_Enable+0x108>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	099b      	lsrs	r3, r3, #6
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	4613      	mov	r3, r2
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80064ce:	e002      	b.n	80064d6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f9      	bne.n	80064d0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80064dc:	f7fe fd16 	bl	8004f0c <HAL_GetTick>
 80064e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064e2:	e028      	b.n	8006536 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe ff0f 	bl	800530c <LL_ADC_IsEnabled>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe fedf 	bl	80052bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064fe:	f7fe fd05 	bl	8004f0c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d914      	bls.n	8006536 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b01      	cmp	r3, #1
 8006518:	d00d      	beq.n	8006536 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	f043 0210 	orr.w	r2, r3, #16
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e007      	b.n	8006546 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d1cf      	bne.n	80064e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	8000003f 	.word	0x8000003f
 8006554:	50040300 	.word	0x50040300
 8006558:	20000184 	.word	0x20000184
 800655c:	053e2d63 	.word	0x053e2d63

08006560 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe fee0 	bl	8005332 <LL_ADC_IsDisableOngoing>
 8006572:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe fec7 	bl	800530c <LL_ADC_IsEnabled>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d047      	beq.n	8006614 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d144      	bne.n	8006614 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 030d 	and.w	r3, r3, #13
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10c      	bne.n	80065b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fea1 	bl	80052e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2203      	movs	r2, #3
 80065a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80065aa:	f7fe fcaf 	bl	8004f0c <HAL_GetTick>
 80065ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80065b0:	e029      	b.n	8006606 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b6:	f043 0210 	orr.w	r2, r3, #16
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c2:	f043 0201 	orr.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e023      	b.n	8006616 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80065ce:	f7fe fc9d 	bl	8004f0c <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d914      	bls.n	8006606 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	f043 0210 	orr.w	r2, r3, #16
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	f043 0201 	orr.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e007      	b.n	8006616 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1dc      	bne.n	80065ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006630:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006634:	2b00      	cmp	r3, #0
 8006636:	d14b      	bne.n	80066d0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d021      	beq.n	8006696 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fd24 	bl	80050a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d032      	beq.n	80066c8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d12b      	bne.n	80066c8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11f      	bne.n	80066c8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668c:	f043 0201 	orr.w	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	659a      	str	r2, [r3, #88]	; 0x58
 8006694:	e018      	b.n	80066c8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d111      	bne.n	80066c8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff fa9f 	bl	8005c0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80066ce:	e00e      	b.n	80066ee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fab3 	bl	8005c48 <HAL_ADC_ErrorCallback>
}
 80066e2:	e004      	b.n	80066ee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff fa8b 	bl	8005c20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006730:	f043 0204 	orr.w	r2, r3, #4
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fa85 	bl	8005c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <LL_ADC_IsEnabled>:
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <LL_ADC_IsEnabled+0x18>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <LL_ADC_IsEnabled+0x1a>
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <LL_ADC_StartCalibration>:
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800677e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006788:	4313      	orrs	r3, r2
 800678a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	609a      	str	r2, [r3, #8]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <LL_ADC_IsCalibrationOnGoing>:
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b2:	d101      	bne.n	80067b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d101      	bne.n	80067de <LL_ADC_REG_IsConversionOngoing+0x18>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_ADCEx_Calibration_Start+0x1c>
 8006804:	2302      	movs	r3, #2
 8006806:	e04d      	b.n	80068a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fea5 	bl	8006560 <ADC_Disable>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d136      	bne.n	800688e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006828:	f023 0302 	bic.w	r3, r3, #2
 800682c:	f043 0202 	orr.w	r2, r3, #2
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff ff96 	bl	800676c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006840:	e014      	b.n	800686c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3301      	adds	r3, #1
 8006846:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800684e:	d30d      	bcc.n	800686c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	f023 0312 	bic.w	r3, r3, #18
 8006858:	f043 0210 	orr.w	r2, r3, #16
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e01b      	b.n	80068a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff ff94 	bl	800679e <LL_ADC_IsCalibrationOnGoing>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e2      	bne.n	8006842 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	f043 0201 	orr.w	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	659a      	str	r2, [r3, #88]	; 0x58
 800688c:	e005      	b.n	800689a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006892:	f043 0210 	orr.w	r2, r3, #16
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b0a1      	sub	sp, #132	; 0x84
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800692a:	2302      	movs	r3, #2
 800692c:	e089      	b.n	8006a42 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006936:	2300      	movs	r3, #0
 8006938:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800693a:	2300      	movs	r3, #0
 800693c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d102      	bne.n	800694e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006948:	4b41      	ldr	r3, [pc, #260]	; (8006a50 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	e001      	b.n	8006952 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e068      	b.n	8006a42 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ff27 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 8006978:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff ff21 	bl	80067c6 <LL_ADC_REG_IsConversionOngoing>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d14a      	bne.n	8006a20 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800698a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698c:	2b00      	cmp	r3, #0
 800698e:	d147      	bne.n	8006a20 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006990:	4b30      	ldr	r3, [pc, #192]	; (8006a54 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006992:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d027      	beq.n	80069ec <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800699c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069ae:	035b      	lsls	r3, r3, #13
 80069b0:	430b      	orrs	r3, r1
 80069b2:	431a      	orrs	r2, r3
 80069b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069b8:	4824      	ldr	r0, [pc, #144]	; (8006a4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80069ba:	f7ff fec4 	bl	8006746 <LL_ADC_IsEnabled>
 80069be:	4604      	mov	r4, r0
 80069c0:	4823      	ldr	r0, [pc, #140]	; (8006a50 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80069c2:	f7ff fec0 	bl	8006746 <LL_ADC_IsEnabled>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4323      	orrs	r3, r4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d132      	bne.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80069ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80069d6:	f023 030f 	bic.w	r3, r3, #15
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	6892      	ldr	r2, [r2, #8]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	431a      	orrs	r2, r3
 80069e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80069ea:	e023      	b.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80069ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069f8:	4814      	ldr	r0, [pc, #80]	; (8006a4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80069fa:	f7ff fea4 	bl	8006746 <LL_ADC_IsEnabled>
 80069fe:	4604      	mov	r4, r0
 8006a00:	4813      	ldr	r0, [pc, #76]	; (8006a50 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006a02:	f7ff fea0 	bl	8006746 <LL_ADC_IsEnabled>
 8006a06:	4603      	mov	r3, r0
 8006a08:	4323      	orrs	r3, r4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d112      	bne.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006a16:	f023 030f 	bic.w	r3, r3, #15
 8006a1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a1e:	e009      	b.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006a32:	e000      	b.n	8006a36 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3784      	adds	r7, #132	; 0x84
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd90      	pop	{r4, r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	50040000 	.word	0x50040000
 8006a50:	50040100 	.word	0x50040100
 8006a54:	50040300 	.word	0x50040300

08006a58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e0ed      	b.n	8006c46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d102      	bne.n	8006a7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fd ff26 	bl	80048c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a8c:	f7fe fa3e 	bl	8004f0c <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a92:	e012      	b.n	8006aba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a94:	f7fe fa3a 	bl	8004f0c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b0a      	cmp	r3, #10
 8006aa0:	d90b      	bls.n	8006aba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e0c5      	b.n	8006c46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0e5      	beq.n	8006a94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0202 	bic.w	r2, r2, #2
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ad8:	f7fe fa18 	bl	8004f0c <HAL_GetTick>
 8006adc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ade:	e012      	b.n	8006b06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ae0:	f7fe fa14 	bl	8004f0c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b0a      	cmp	r3, #10
 8006aec:	d90b      	bls.n	8006b06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2205      	movs	r2, #5
 8006afe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e09f      	b.n	8006c46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7e1b      	ldrb	r3, [r3, #24]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d108      	bne.n	8006b2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e007      	b.n	8006b3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7e5b      	ldrb	r3, [r3, #25]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d108      	bne.n	8006b58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e007      	b.n	8006b68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7e9b      	ldrb	r3, [r3, #26]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d108      	bne.n	8006b82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0220 	orr.w	r2, r2, #32
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	e007      	b.n	8006b92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0220 	bic.w	r2, r2, #32
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7edb      	ldrb	r3, [r3, #27]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d108      	bne.n	8006bac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0210 	bic.w	r2, r2, #16
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e007      	b.n	8006bbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0210 	orr.w	r2, r2, #16
 8006bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7f1b      	ldrb	r3, [r3, #28]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d108      	bne.n	8006bd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0208 	orr.w	r2, r2, #8
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e007      	b.n	8006be6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0208 	bic.w	r2, r2, #8
 8006be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	7f5b      	ldrb	r3, [r3, #29]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d108      	bne.n	8006c00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0204 	orr.w	r2, r2, #4
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e007      	b.n	8006c10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0204 	bic.w	r2, r2, #4
 8006c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	ea42 0103 	orr.w	r1, r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c64:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d003      	beq.n	8006c74 <HAL_CAN_ConfigFilter+0x26>
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	f040 80aa 	bne.w	8006dc8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c7a:	f043 0201 	orr.w	r2, r3, #1
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d123      	bne.n	8006cf6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	401a      	ands	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006cd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	3248      	adds	r2, #72	; 0x48
 8006cd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006cea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006cec:	6979      	ldr	r1, [r7, #20]
 8006cee:	3348      	adds	r3, #72	; 0x48
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	440b      	add	r3, r1
 8006cf4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d122      	bne.n	8006d44 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006d1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	3248      	adds	r2, #72	; 0x48
 8006d24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006d38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006d3a:	6979      	ldr	r1, [r7, #20]
 8006d3c:	3348      	adds	r3, #72	; 0x48
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	440b      	add	r3, r1
 8006d42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	401a      	ands	r2, r3
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006d5e:	e007      	b.n	8006d70 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	401a      	ands	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006d8a:	e007      	b.n	8006d9c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d107      	bne.n	8006db4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006dba:	f023 0201 	bic.w	r2, r3, #1
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e006      	b.n	8006dd6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d12e      	bne.n	8006e54 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e0e:	f7fe f87d 	bl	8004f0c <HAL_GetTick>
 8006e12:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006e14:	e012      	b.n	8006e3c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e16:	f7fe f879 	bl	8004f0c <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b0a      	cmp	r3, #10
 8006e22:	d90b      	bls.n	8006e3c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2205      	movs	r2, #5
 8006e34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e012      	b.n	8006e62 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	e006      	b.n	8006e62 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b089      	sub	sp, #36	; 0x24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e88:	7ffb      	ldrb	r3, [r7, #31]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d003      	beq.n	8006e96 <HAL_CAN_AddTxMessage+0x2c>
 8006e8e:	7ffb      	ldrb	r3, [r7, #31]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	f040 80ad 	bne.w	8006ff0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d105      	bne.n	8006eb6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8095 	beq.w	8006fe0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	0e1b      	lsrs	r3, r3, #24
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006edc:	68f9      	ldr	r1, [r7, #12]
 8006ede:	6809      	ldr	r1, [r1, #0]
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	440b      	add	r3, r1
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e00f      	b.n	8006f0e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ef8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006f02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	3318      	adds	r3, #24
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	440b      	add	r3, r1
 8006f0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	3318      	adds	r3, #24
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	440b      	add	r3, r1
 8006f1e:	3304      	adds	r3, #4
 8006f20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	7d1b      	ldrb	r3, [r3, #20]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d111      	bne.n	8006f4e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	3318      	adds	r3, #24
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	4413      	add	r3, r2
 8006f36:	3304      	adds	r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6811      	ldr	r1, [r2, #0]
 8006f3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	3318      	adds	r3, #24
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	440b      	add	r3, r1
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3307      	adds	r3, #7
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	061a      	lsls	r2, r3, #24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3306      	adds	r3, #6
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	041b      	lsls	r3, r3, #16
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3305      	adds	r3, #5
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	3204      	adds	r2, #4
 8006f6e:	7812      	ldrb	r2, [r2, #0]
 8006f70:	4610      	mov	r0, r2
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	ea43 0200 	orr.w	r2, r3, r0
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	440b      	add	r3, r1
 8006f80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006f84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3303      	adds	r3, #3
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	061a      	lsls	r2, r3, #24
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3302      	adds	r3, #2
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	6811      	ldr	r1, [r2, #0]
 8006fac:	ea43 0200 	orr.w	r2, r3, r0
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	440b      	add	r3, r1
 8006fb6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006fba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3318      	adds	r3, #24
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	4413      	add	r3, r2
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	6811      	ldr	r1, [r2, #0]
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	3318      	adds	r3, #24
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	440b      	add	r3, r1
 8006fda:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e00e      	b.n	8006ffe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e006      	b.n	8006ffe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3724      	adds	r7, #36	; 0x24
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800700a:	b480      	push	{r7}
 800700c:	b087      	sub	sp, #28
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800701e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d003      	beq.n	800702e <HAL_CAN_GetRxMessage+0x24>
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2b02      	cmp	r3, #2
 800702a:	f040 80f3 	bne.w	8007214 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10e      	bne.n	8007052 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d116      	bne.n	8007070 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e0e7      	b.n	8007222 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d107      	bne.n	8007070 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0d8      	b.n	8007222 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	331b      	adds	r3, #27
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	4413      	add	r3, r2
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0204 	and.w	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10c      	bne.n	80070a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	331b      	adds	r3, #27
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	4413      	add	r3, r2
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	0d5b      	lsrs	r3, r3, #21
 800709e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e00b      	b.n	80070c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	331b      	adds	r3, #27
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	4413      	add	r3, r2
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	08db      	lsrs	r3, r3, #3
 80070b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	331b      	adds	r3, #27
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	4413      	add	r3, r2
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0202 	and.w	r2, r3, #2
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	331b      	adds	r3, #27
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	4413      	add	r3, r2
 80070e2:	3304      	adds	r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 020f 	and.w	r2, r3, #15
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	331b      	adds	r3, #27
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	4413      	add	r3, r2
 80070fa:	3304      	adds	r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	b2da      	uxtb	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	331b      	adds	r3, #27
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	4413      	add	r3, r2
 8007112:	3304      	adds	r3, #4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	4413      	add	r3, r2
 8007128:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	4413      	add	r3, r2
 800713e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	0a1a      	lsrs	r2, r3, #8
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	4413      	add	r3, r2
 8007158:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	0c1a      	lsrs	r2, r3, #16
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	3302      	adds	r3, #2
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	4413      	add	r3, r2
 8007172:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	0e1a      	lsrs	r2, r3, #24
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	3303      	adds	r3, #3
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	4413      	add	r3, r2
 800718c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	3304      	adds	r3, #4
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	0a1a      	lsrs	r2, r3, #8
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3305      	adds	r3, #5
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	4413      	add	r3, r2
 80071be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	0c1a      	lsrs	r2, r3, #16
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	3306      	adds	r3, #6
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	0e1a      	lsrs	r2, r3, #24
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	3307      	adds	r3, #7
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d108      	bne.n	8007200 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0220 	orr.w	r2, r2, #32
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e007      	b.n	8007210 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0220 	orr.w	r2, r2, #32
 800720e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e006      	b.n	8007222 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800723e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d002      	beq.n	800724c <HAL_CAN_ActivateNotification+0x1e>
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d109      	bne.n	8007260 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6959      	ldr	r1, [r3, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e006      	b.n	800726e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b08a      	sub	sp, #40	; 0x28
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d07c      	beq.n	80073ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d023      	beq.n	8007312 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2201      	movs	r2, #1
 80072d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f983 	bl	80075e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80072e2:	e016      	b.n	8007312 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
 80072f6:	e00c      	b.n	8007312 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
 800730a:	e002      	b.n	8007312 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f989 	bl	8007624 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007318:	2b00      	cmp	r3, #0
 800731a:	d024      	beq.n	8007366 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007324:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f963 	bl	80075fc <HAL_CAN_TxMailbox1CompleteCallback>
 8007336:	e016      	b.n	8007366 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	e00c      	b.n	8007366 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
 800735e:	e002      	b.n	8007366 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f969 	bl	8007638 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d024      	beq.n	80073ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007378:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f943 	bl	8007610 <HAL_CAN_TxMailbox2CompleteCallback>
 800738a:	e016      	b.n	80073ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
 800739e:	e00c      	b.n	80073ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	e002      	b.n	80073ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f949 	bl	800764c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00c      	beq.n	80073de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d006      	beq.n	8007400 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2208      	movs	r2, #8
 80073f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f930 	bl	8007660 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7f9 ff07 	bl	800122c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00c      	beq.n	8007442 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b00      	cmp	r3, #0
 8007430:	d007      	beq.n	8007442 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007438:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2210      	movs	r2, #16
 8007440:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d006      	beq.n	8007464 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2208      	movs	r2, #8
 800745c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f912 	bl	8007688 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8f9 	bl	8007674 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b00      	cmp	r3, #0
 8007494:	d006      	beq.n	80074a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2210      	movs	r2, #16
 800749c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8fc 	bl	800769c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2208      	movs	r2, #8
 80074be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8f5 	bl	80076b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d07b      	beq.n	80075c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d072      	beq.n	80075c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007518:	2b00      	cmp	r3, #0
 800751a:	d008      	beq.n	800752e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	f043 0304 	orr.w	r3, r3, #4
 800752c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007534:	2b00      	cmp	r3, #0
 8007536:	d043      	beq.n	80075c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800753e:	2b00      	cmp	r3, #0
 8007540:	d03e      	beq.n	80075c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007548:	2b60      	cmp	r3, #96	; 0x60
 800754a:	d02b      	beq.n	80075a4 <HAL_CAN_IRQHandler+0x32a>
 800754c:	2b60      	cmp	r3, #96	; 0x60
 800754e:	d82e      	bhi.n	80075ae <HAL_CAN_IRQHandler+0x334>
 8007550:	2b50      	cmp	r3, #80	; 0x50
 8007552:	d022      	beq.n	800759a <HAL_CAN_IRQHandler+0x320>
 8007554:	2b50      	cmp	r3, #80	; 0x50
 8007556:	d82a      	bhi.n	80075ae <HAL_CAN_IRQHandler+0x334>
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d019      	beq.n	8007590 <HAL_CAN_IRQHandler+0x316>
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d826      	bhi.n	80075ae <HAL_CAN_IRQHandler+0x334>
 8007560:	2b30      	cmp	r3, #48	; 0x30
 8007562:	d010      	beq.n	8007586 <HAL_CAN_IRQHandler+0x30c>
 8007564:	2b30      	cmp	r3, #48	; 0x30
 8007566:	d822      	bhi.n	80075ae <HAL_CAN_IRQHandler+0x334>
 8007568:	2b10      	cmp	r3, #16
 800756a:	d002      	beq.n	8007572 <HAL_CAN_IRQHandler+0x2f8>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d005      	beq.n	800757c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007570:	e01d      	b.n	80075ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	f043 0308 	orr.w	r3, r3, #8
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800757a:	e019      	b.n	80075b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	f043 0310 	orr.w	r3, r3, #16
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007584:	e014      	b.n	80075b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	f043 0320 	orr.w	r3, r3, #32
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800758e:	e00f      	b.n	80075b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007598:	e00a      	b.n	80075b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80075a2:	e005      	b.n	80075b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80075ac:	e000      	b.n	80075b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80075ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80075be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2204      	movs	r2, #4
 80075c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d008      	beq.n	80075e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f872 	bl	80076c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80075e0:	bf00      	nop
 80075e2:	3728      	adds	r7, #40	; 0x28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <__NVIC_SetPriorityGrouping+0x44>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076f4:	4013      	ands	r3, r2
 80076f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800770a:	4a04      	ldr	r2, [pc, #16]	; (800771c <__NVIC_SetPriorityGrouping+0x44>)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	60d3      	str	r3, [r2, #12]
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <__NVIC_GetPriorityGrouping+0x18>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	0a1b      	lsrs	r3, r3, #8
 800772a:	f003 0307 	and.w	r3, r3, #7
}
 800772e:	4618      	mov	r0, r3
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	e000ed00 	.word	0xe000ed00

0800773c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800774a:	2b00      	cmp	r3, #0
 800774c:	db0b      	blt.n	8007766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	f003 021f 	and.w	r2, r3, #31
 8007754:	4907      	ldr	r1, [pc, #28]	; (8007774 <__NVIC_EnableIRQ+0x38>)
 8007756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800775a:	095b      	lsrs	r3, r3, #5
 800775c:	2001      	movs	r0, #1
 800775e:	fa00 f202 	lsl.w	r2, r0, r2
 8007762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	e000e100 	.word	0xe000e100

08007778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	6039      	str	r1, [r7, #0]
 8007782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007788:	2b00      	cmp	r3, #0
 800778a:	db0a      	blt.n	80077a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	b2da      	uxtb	r2, r3
 8007790:	490c      	ldr	r1, [pc, #48]	; (80077c4 <__NVIC_SetPriority+0x4c>)
 8007792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007796:	0112      	lsls	r2, r2, #4
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	440b      	add	r3, r1
 800779c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077a0:	e00a      	b.n	80077b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	4908      	ldr	r1, [pc, #32]	; (80077c8 <__NVIC_SetPriority+0x50>)
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	3b04      	subs	r3, #4
 80077b0:	0112      	lsls	r2, r2, #4
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	440b      	add	r3, r1
 80077b6:	761a      	strb	r2, [r3, #24]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	e000e100 	.word	0xe000e100
 80077c8:	e000ed00 	.word	0xe000ed00

080077cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b089      	sub	sp, #36	; 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f1c3 0307 	rsb	r3, r3, #7
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	bf28      	it	cs
 80077ea:	2304      	movcs	r3, #4
 80077ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	3304      	adds	r3, #4
 80077f2:	2b06      	cmp	r3, #6
 80077f4:	d902      	bls.n	80077fc <NVIC_EncodePriority+0x30>
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	3b03      	subs	r3, #3
 80077fa:	e000      	b.n	80077fe <NVIC_EncodePriority+0x32>
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	43da      	mvns	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	401a      	ands	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007814:	f04f 31ff 	mov.w	r1, #4294967295
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	43d9      	mvns	r1, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007824:	4313      	orrs	r3, r2
         );
}
 8007826:	4618      	mov	r0, r3
 8007828:	3724      	adds	r7, #36	; 0x24
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff ff4c 	bl	80076d8 <__NVIC_SetPriorityGrouping>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800785a:	f7ff ff61 	bl	8007720 <__NVIC_GetPriorityGrouping>
 800785e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	6978      	ldr	r0, [r7, #20]
 8007866:	f7ff ffb1 	bl	80077cc <NVIC_EncodePriority>
 800786a:	4602      	mov	r2, r0
 800786c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007870:	4611      	mov	r1, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff ff80 	bl	8007778 <__NVIC_SetPriority>
}
 8007878:	bf00      	nop
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800788a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff ff54 	bl	800773c <__NVIC_EnableIRQ>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e08d      	b.n	80079ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	4b47      	ldr	r3, [pc, #284]	; (80079d4 <HAL_DMA_Init+0x138>)
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d80f      	bhi.n	80078da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	4b45      	ldr	r3, [pc, #276]	; (80079d8 <HAL_DMA_Init+0x13c>)
 80078c2:	4413      	add	r3, r2
 80078c4:	4a45      	ldr	r2, [pc, #276]	; (80079dc <HAL_DMA_Init+0x140>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	009a      	lsls	r2, r3, #2
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a42      	ldr	r2, [pc, #264]	; (80079e0 <HAL_DMA_Init+0x144>)
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
 80078d8:	e00e      	b.n	80078f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	4b40      	ldr	r3, [pc, #256]	; (80079e4 <HAL_DMA_Init+0x148>)
 80078e2:	4413      	add	r3, r2
 80078e4:	4a3d      	ldr	r2, [pc, #244]	; (80079dc <HAL_DMA_Init+0x140>)
 80078e6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ea:	091b      	lsrs	r3, r3, #4
 80078ec:	009a      	lsls	r2, r3, #2
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a3c      	ldr	r2, [pc, #240]	; (80079e8 <HAL_DMA_Init+0x14c>)
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800791c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9b6 	bl	8007cbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007958:	d102      	bne.n	8007960 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007974:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d010      	beq.n	80079a0 <HAL_DMA_Init+0x104>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d80c      	bhi.n	80079a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9d6 	bl	8007d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800799c:	605a      	str	r2, [r3, #4]
 800799e:	e008      	b.n	80079b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40020407 	.word	0x40020407
 80079d8:	bffdfff8 	.word	0xbffdfff8
 80079dc:	cccccccd 	.word	0xcccccccd
 80079e0:	40020000 	.word	0x40020000
 80079e4:	bffdfbf8 	.word	0xbffdfbf8
 80079e8:	40020400 	.word	0x40020400

080079ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_DMA_Start_IT+0x20>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e066      	b.n	8007ada <HAL_DMA_Start_IT+0xee>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d155      	bne.n	8007acc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0201 	bic.w	r2, r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f8fb 	bl	8007c40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 020e 	orr.w	r2, r2, #14
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e00f      	b.n	8007a84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0204 	bic.w	r2, r2, #4
 8007a72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 020a 	orr.w	r2, r2, #10
 8007a82:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e005      	b.n	8007ad8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	f003 031c 	and.w	r3, r3, #28
 8007b02:	2204      	movs	r2, #4
 8007b04:	409a      	lsls	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d026      	beq.n	8007b5c <HAL_DMA_IRQHandler+0x7a>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d021      	beq.n	8007b5c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0204 	bic.w	r2, r2, #4
 8007b34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	f003 021c 	and.w	r2, r3, #28
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	2104      	movs	r1, #4
 8007b44:	fa01 f202 	lsl.w	r2, r1, r2
 8007b48:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d071      	beq.n	8007c36 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007b5a:	e06c      	b.n	8007c36 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b60:	f003 031c 	and.w	r3, r3, #28
 8007b64:	2202      	movs	r2, #2
 8007b66:	409a      	lsls	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d02e      	beq.n	8007bce <HAL_DMA_IRQHandler+0xec>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d029      	beq.n	8007bce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 020a 	bic.w	r2, r2, #10
 8007b96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba4:	f003 021c 	and.w	r2, r3, #28
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	2102      	movs	r1, #2
 8007bae:	fa01 f202 	lsl.w	r2, r1, r2
 8007bb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d038      	beq.n	8007c36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007bcc:	e033      	b.n	8007c36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	f003 031c 	and.w	r3, r3, #28
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	409a      	lsls	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02a      	beq.n	8007c38 <HAL_DMA_IRQHandler+0x156>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d025      	beq.n	8007c38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 020e 	bic.w	r2, r2, #14
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c00:	f003 021c 	and.w	r2, r3, #28
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007c0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
}
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c56:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c68:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	f003 021c 	and.w	r2, r3, #28
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	2101      	movs	r1, #1
 8007c78:	fa01 f202 	lsl.w	r2, r1, r2
 8007c7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d108      	bne.n	8007ca0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c9e:	e007      	b.n	8007cb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4b17      	ldr	r3, [pc, #92]	; (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d80a      	bhi.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	089b      	lsrs	r3, r3, #2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cdc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6493      	str	r3, [r2, #72]	; 0x48
 8007ce4:	e007      	b.n	8007cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	009a      	lsls	r2, r3, #2
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007cf0:	4413      	add	r3, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	3b08      	subs	r3, #8
 8007cfe:	4a0c      	ldr	r2, [pc, #48]	; (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007d00:	fba2 2303 	umull	r2, r3, r2, r3
 8007d04:	091b      	lsrs	r3, r3, #4
 8007d06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a0a      	ldr	r2, [pc, #40]	; (8007d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007d0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2201      	movs	r2, #1
 8007d16:	409a      	lsls	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40020407 	.word	0x40020407
 8007d2c:	4002081c 	.word	0x4002081c
 8007d30:	cccccccd 	.word	0xcccccccd
 8007d34:	40020880 	.word	0x40020880

08007d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a08      	ldr	r2, [pc, #32]	; (8007d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2201      	movs	r2, #1
 8007d66:	409a      	lsls	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	1000823f 	.word	0x1000823f
 8007d7c:	40020940 	.word	0x40020940

08007d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d8e:	e166      	b.n	800805e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	2101      	movs	r1, #1
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8158 	beq.w	8008058 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d005      	beq.n	8007dc0 <HAL_GPIO_Init+0x40>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d130      	bne.n	8007e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	2203      	movs	r2, #3
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	fa02 f303 	lsl.w	r3, r2, r3
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007df6:	2201      	movs	r2, #1
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4013      	ands	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	f003 0201 	and.w	r2, r3, #1
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d017      	beq.n	8007e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	2203      	movs	r2, #3
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	43db      	mvns	r3, r3
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4013      	ands	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d123      	bne.n	8007eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	08da      	lsrs	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3208      	adds	r2, #8
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	220f      	movs	r2, #15
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	43db      	mvns	r3, r3
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	08da      	lsrs	r2, r3, #3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3208      	adds	r2, #8
 8007eac:	6939      	ldr	r1, [r7, #16]
 8007eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0203 	and.w	r2, r3, #3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80b2 	beq.w	8008058 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ef4:	4b61      	ldr	r3, [pc, #388]	; (800807c <HAL_GPIO_Init+0x2fc>)
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef8:	4a60      	ldr	r2, [pc, #384]	; (800807c <HAL_GPIO_Init+0x2fc>)
 8007efa:	f043 0301 	orr.w	r3, r3, #1
 8007efe:	6613      	str	r3, [r2, #96]	; 0x60
 8007f00:	4b5e      	ldr	r3, [pc, #376]	; (800807c <HAL_GPIO_Init+0x2fc>)
 8007f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	60bb      	str	r3, [r7, #8]
 8007f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f0c:	4a5c      	ldr	r2, [pc, #368]	; (8008080 <HAL_GPIO_Init+0x300>)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	089b      	lsrs	r3, r3, #2
 8007f12:	3302      	adds	r3, #2
 8007f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	220f      	movs	r2, #15
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f36:	d02b      	beq.n	8007f90 <HAL_GPIO_Init+0x210>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a52      	ldr	r2, [pc, #328]	; (8008084 <HAL_GPIO_Init+0x304>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d025      	beq.n	8007f8c <HAL_GPIO_Init+0x20c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a51      	ldr	r2, [pc, #324]	; (8008088 <HAL_GPIO_Init+0x308>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d01f      	beq.n	8007f88 <HAL_GPIO_Init+0x208>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a50      	ldr	r2, [pc, #320]	; (800808c <HAL_GPIO_Init+0x30c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d019      	beq.n	8007f84 <HAL_GPIO_Init+0x204>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a4f      	ldr	r2, [pc, #316]	; (8008090 <HAL_GPIO_Init+0x310>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d013      	beq.n	8007f80 <HAL_GPIO_Init+0x200>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a4e      	ldr	r2, [pc, #312]	; (8008094 <HAL_GPIO_Init+0x314>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00d      	beq.n	8007f7c <HAL_GPIO_Init+0x1fc>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a4d      	ldr	r2, [pc, #308]	; (8008098 <HAL_GPIO_Init+0x318>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d007      	beq.n	8007f78 <HAL_GPIO_Init+0x1f8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a4c      	ldr	r2, [pc, #304]	; (800809c <HAL_GPIO_Init+0x31c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d101      	bne.n	8007f74 <HAL_GPIO_Init+0x1f4>
 8007f70:	2307      	movs	r3, #7
 8007f72:	e00e      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f74:	2308      	movs	r3, #8
 8007f76:	e00c      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f78:	2306      	movs	r3, #6
 8007f7a:	e00a      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f7c:	2305      	movs	r3, #5
 8007f7e:	e008      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f80:	2304      	movs	r3, #4
 8007f82:	e006      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f84:	2303      	movs	r3, #3
 8007f86:	e004      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e002      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <HAL_GPIO_Init+0x212>
 8007f90:	2300      	movs	r3, #0
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	f002 0203 	and.w	r2, r2, #3
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	4093      	lsls	r3, r2
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007fa2:	4937      	ldr	r1, [pc, #220]	; (8008080 <HAL_GPIO_Init+0x300>)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	3302      	adds	r3, #2
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fb0:	4b3b      	ldr	r3, [pc, #236]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007fd4:	4a32      	ldr	r2, [pc, #200]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007fda:	4b31      	ldr	r3, [pc, #196]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ffe:	4a28      	ldr	r2, [pc, #160]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008004:	4b26      	ldr	r3, [pc, #152]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	43db      	mvns	r3, r3
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4013      	ands	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008028:	4a1d      	ldr	r2, [pc, #116]	; (80080a0 <HAL_GPIO_Init+0x320>)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800802e:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	43db      	mvns	r3, r3
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4013      	ands	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <HAL_GPIO_Init+0x320>)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	3301      	adds	r3, #1
 800805c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f ae91 	bne.w	8007d90 <HAL_GPIO_Init+0x10>
  }
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	40021000 	.word	0x40021000
 8008080:	40010000 	.word	0x40010000
 8008084:	48000400 	.word	0x48000400
 8008088:	48000800 	.word	0x48000800
 800808c:	48000c00 	.word	0x48000c00
 8008090:	48001000 	.word	0x48001000
 8008094:	48001400 	.word	0x48001400
 8008098:	48001800 	.word	0x48001800
 800809c:	48001c00 	.word	0x48001c00
 80080a0:	40010400 	.word	0x40010400

080080a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	887b      	ldrh	r3, [r7, #2]
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e001      	b.n	80080c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	807b      	strh	r3, [r7, #2]
 80080e0:	4613      	mov	r3, r2
 80080e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080e4:	787b      	ldrb	r3, [r7, #1]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080ea:	887a      	ldrh	r2, [r7, #2]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80080f0:	e002      	b.n	80080f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080f2:	887a      	ldrh	r2, [r7, #2]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008106:	b08f      	sub	sp, #60	; 0x3c
 8008108:	af0a      	add	r7, sp, #40	; 0x28
 800810a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e116      	b.n	8008344 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f00a fd3b 	bl	8012bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2203      	movs	r2, #3
 800813a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	f004 fe34 	bl	800cdc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	687e      	ldr	r6, [r7, #4]
 8008162:	466d      	mov	r5, sp
 8008164:	f106 0410 	add.w	r4, r6, #16
 8008168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800816a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800816c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800816e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008170:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008174:	e885 0003 	stmia.w	r5, {r0, r1}
 8008178:	1d33      	adds	r3, r6, #4
 800817a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800817c:	6838      	ldr	r0, [r7, #0]
 800817e:	f004 fd47 	bl	800cc10 <USB_CoreInit>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0d7      	b.n	8008344 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f004 fe22 	bl	800cde4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	e04a      	b.n	800823c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081a6:	7bfa      	ldrb	r2, [r7, #15]
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	333d      	adds	r3, #61	; 0x3d
 80081b6:	2201      	movs	r2, #1
 80081b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80081ba:	7bfa      	ldrb	r2, [r7, #15]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	333c      	adds	r3, #60	; 0x3c
 80081ca:	7bfa      	ldrb	r2, [r7, #15]
 80081cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081ce:	7bfa      	ldrb	r2, [r7, #15]
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	b298      	uxth	r0, r3
 80081d4:	6879      	ldr	r1, [r7, #4]
 80081d6:	4613      	mov	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	440b      	add	r3, r1
 80081e0:	3344      	adds	r3, #68	; 0x44
 80081e2:	4602      	mov	r2, r0
 80081e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081e6:	7bfa      	ldrb	r2, [r7, #15]
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	3340      	adds	r3, #64	; 0x40
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081fa:	7bfa      	ldrb	r2, [r7, #15]
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	3348      	adds	r3, #72	; 0x48
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800820e:	7bfa      	ldrb	r2, [r7, #15]
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	00db      	lsls	r3, r3, #3
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	334c      	adds	r3, #76	; 0x4c
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008222:	7bfa      	ldrb	r2, [r7, #15]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	3354      	adds	r3, #84	; 0x54
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	3301      	adds	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	7bfa      	ldrb	r2, [r7, #15]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d3af      	bcc.n	80081a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
 800824a:	e044      	b.n	80082d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800824c:	7bfa      	ldrb	r2, [r7, #15]
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008262:	7bfa      	ldrb	r2, [r7, #15]
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	440b      	add	r3, r1
 8008270:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008274:	7bfa      	ldrb	r2, [r7, #15]
 8008276:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008278:	7bfa      	ldrb	r2, [r7, #15]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800828e:	7bfa      	ldrb	r2, [r7, #15]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082a4:	7bfa      	ldrb	r2, [r7, #15]
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	4613      	mov	r3, r2
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	3301      	adds	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
 80082d6:	7bfa      	ldrb	r2, [r7, #15]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d3b5      	bcc.n	800824c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	687e      	ldr	r6, [r7, #4]
 80082e8:	466d      	mov	r5, sp
 80082ea:	f106 0410 	add.w	r4, r6, #16
 80082ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80082fe:	1d33      	adds	r3, r6, #4
 8008300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008302:	6838      	ldr	r0, [r7, #0]
 8008304:	f004 fdba 	bl	800ce7c <USB_DevInit>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2202      	movs	r2, #2
 8008312:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e014      	b.n	8008344 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	2b01      	cmp	r3, #1
 8008330:	d102      	bne.n	8008338 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f882 	bl	800943c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f005 fe42 	bl	800dfc6 <USB_DevDisconnect>

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800834c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_PCD_Start+0x1c>
 8008364:	2302      	movs	r3, #2
 8008366:	e01c      	b.n	80083a2 <HAL_PCD_Start+0x56>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	2b01      	cmp	r3, #1
 8008376:	d105      	bne.n	8008384 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4618      	mov	r0, r3
 800838a:	f004 fd09 	bl	800cda0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f005 fdf6 	bl	800df84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083aa:	b590      	push	{r4, r7, lr}
 80083ac:	b08d      	sub	sp, #52	; 0x34
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f005 feb4 	bl	800e12e <USB_GetMode>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 847e 	bne.w	8008cca <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f005 fe18 	bl	800e008 <USB_ReadInterrupts>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8474 	beq.w	8008cc8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	0a1b      	lsrs	r3, r3, #8
 80083ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f005 fe05 	bl	800e008 <USB_ReadInterrupts>
 80083fe:	4603      	mov	r3, r0
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b02      	cmp	r3, #2
 8008406:	d107      	bne.n	8008418 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f002 0202 	and.w	r2, r2, #2
 8008416:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f005 fdf3 	bl	800e008 <USB_ReadInterrupts>
 8008422:	4603      	mov	r3, r0
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b10      	cmp	r3, #16
 800842a:	d161      	bne.n	80084f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0210 	bic.w	r2, r2, #16
 800843a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	f003 020f 	and.w	r2, r3, #15
 8008448:	4613      	mov	r3, r2
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4413      	add	r3, r2
 8008458:	3304      	adds	r3, #4
 800845a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	0c5b      	lsrs	r3, r3, #17
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	2b02      	cmp	r3, #2
 8008466:	d124      	bne.n	80084b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800846e:	4013      	ands	r3, r2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d035      	beq.n	80084e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	091b      	lsrs	r3, r3, #4
 800847c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800847e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	6a38      	ldr	r0, [r7, #32]
 8008488:	f005 fc2a 	bl	800dce0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	091b      	lsrs	r3, r3, #4
 8008494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008498:	441a      	add	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	6a1a      	ldr	r2, [r3, #32]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084aa:	441a      	add	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	621a      	str	r2, [r3, #32]
 80084b0:	e016      	b.n	80084e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	0c5b      	lsrs	r3, r3, #17
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	2b06      	cmp	r3, #6
 80084bc:	d110      	bne.n	80084e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084c4:	2208      	movs	r2, #8
 80084c6:	4619      	mov	r1, r3
 80084c8:	6a38      	ldr	r0, [r7, #32]
 80084ca:	f005 fc09 	bl	800dce0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	6a1a      	ldr	r2, [r3, #32]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084da:	441a      	add	r2, r3
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0210 	orr.w	r2, r2, #16
 80084ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f005 fd87 	bl	800e008 <USB_ReadInterrupts>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008500:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008504:	f040 80a7 	bne.w	8008656 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f005 fd8c 	bl	800e02e <USB_ReadDevAllOutEpInterrupt>
 8008516:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008518:	e099      	b.n	800864e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 808e 	beq.w	8008642 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f005 fdb0 	bl	800e096 <USB_ReadDevOutEPInterrupt>
 8008536:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	2301      	movs	r3, #1
 8008552:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fe96 	bl	8009288 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00c      	beq.n	8008580 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008572:	461a      	mov	r2, r3
 8008574:	2308      	movs	r3, #8
 8008576:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fed2 	bl	8009324 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b00      	cmp	r3, #0
 8008588:	d008      	beq.n	800859c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	461a      	mov	r2, r3
 8008598:	2310      	movs	r3, #16
 800859a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d030      	beq.n	8008608 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ae:	2b80      	cmp	r3, #128	; 0x80
 80085b0:	d109      	bne.n	80085c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80085c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c8:	4613      	mov	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	3304      	adds	r3, #4
 80085da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	78db      	ldrb	r3, [r3, #3]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d108      	bne.n	80085f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2200      	movs	r2, #0
 80085e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f00a fc1f 	bl	8012e34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	461a      	mov	r2, r3
 8008604:	2302      	movs	r3, #2
 8008606:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861e:	461a      	mov	r2, r3
 8008620:	2320      	movs	r3, #32
 8008622:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	461a      	mov	r2, r3
 800863c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008640:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	3301      	adds	r3, #1
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	085b      	lsrs	r3, r3, #1
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f af62 	bne.w	800851a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f005 fcd4 	bl	800e008 <USB_ReadInterrupts>
 8008660:	4603      	mov	r3, r0
 8008662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008666:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800866a:	f040 80a4 	bne.w	80087b6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f005 fcf5 	bl	800e062 <USB_ReadDevAllInEpInterrupt>
 8008678:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800867e:	e096      	b.n	80087ae <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 808b 	beq.w	80087a2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f005 fd1b 	bl	800e0d2 <USB_ReadDevInEPInterrupt>
 800869c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d020      	beq.n	80086ea <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	2201      	movs	r2, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	69f9      	ldr	r1, [r7, #28]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c8:	4013      	ands	r3, r2
 80086ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d8:	461a      	mov	r2, r3
 80086da:	2301      	movs	r3, #1
 80086dc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f00a fb10 	bl	8012d0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	461a      	mov	r2, r3
 8008702:	2308      	movs	r3, #8
 8008704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	461a      	mov	r2, r3
 800871e:	2310      	movs	r3, #16
 8008720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	461a      	mov	r2, r3
 800873a:	2340      	movs	r3, #64	; 0x40
 800873c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d023      	beq.n	8008790 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800874a:	6a38      	ldr	r0, [r7, #32]
 800874c:	f004 fce2 	bl	800d114 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	4613      	mov	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3338      	adds	r3, #56	; 0x38
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	78db      	ldrb	r3, [r3, #3]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d108      	bne.n	800877e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	b2db      	uxtb	r3, r3
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f00a fb6d 	bl	8012e58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	461a      	mov	r2, r3
 800878c:	2302      	movs	r3, #2
 800878e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800879a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fcea 	bl	8009176 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	3301      	adds	r3, #1
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	085b      	lsrs	r3, r3, #1
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f47f af65 	bne.w	8008680 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f005 fc24 	bl	800e008 <USB_ReadInterrupts>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ca:	d122      	bne.n	8008812 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d108      	bne.n	80087fc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80087f2:	2100      	movs	r1, #0
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f00a fd9f 	bl	8013338 <HAL_PCDEx_LPM_Callback>
 80087fa:	e002      	b.n	8008802 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f00a faf1 	bl	8012de4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f005 fbf6 	bl	800e008 <USB_ReadInterrupts>
 800881c:	4603      	mov	r3, r0
 800881e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008826:	d112      	bne.n	800884e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b01      	cmp	r3, #1
 8008836:	d102      	bne.n	800883e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f00a faad 	bl	8012d98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800884c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f005 fbd8 	bl	800e008 <USB_ReadInterrupts>
 8008858:	4603      	mov	r3, r0
 800885a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800885e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008862:	d121      	bne.n	80088a8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695a      	ldr	r2, [r3, #20]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008872:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d111      	bne.n	80088a2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888c:	089b      	lsrs	r3, r3, #2
 800888e:	f003 020f 	and.w	r2, r3, #15
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008898:	2101      	movs	r1, #1
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f00a fd4c 	bl	8013338 <HAL_PCDEx_LPM_Callback>
 80088a0:	e002      	b.n	80088a8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f00a fa78 	bl	8012d98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f005 fbab 	bl	800e008 <USB_ReadInterrupts>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088bc:	f040 80b5 	bne.w	8008a2a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2110      	movs	r1, #16
 80088da:	4618      	mov	r0, r3
 80088dc:	f004 fc1a 	bl	800d114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088e0:	2300      	movs	r3, #0
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e4:	e046      	b.n	8008974 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	461a      	mov	r2, r3
 80088f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008918:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	461a      	mov	r2, r3
 8008928:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800892c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008948:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800894c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008968:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800896c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800896e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008970:	3301      	adds	r3, #1
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d3b3      	bcc.n	80088e6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800898c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008990:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	2b00      	cmp	r3, #0
 8008998:	d016      	beq.n	80089c8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089aa:	f043 030b 	orr.w	r3, r3, #11
 80089ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089c0:	f043 030b 	orr.w	r3, r3, #11
 80089c4:	6453      	str	r3, [r2, #68]	; 0x44
 80089c6:	e015      	b.n	80089f4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80089de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	69fa      	ldr	r2, [r7, #28]
 80089ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ee:	f043 030b 	orr.w	r3, r3, #11
 80089f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f005 fbbb 	bl	800e190 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695a      	ldr	r2, [r3, #20]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f005 faea 	bl	800e008 <USB_ReadInterrupts>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	d124      	bne.n	8008a8a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f005 fb80 	bl	800e14a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f004 fbdd 	bl	800d20e <USB_GetDevSpeed>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681c      	ldr	r4, [r3, #0]
 8008a60:	f001 fc92 	bl	800a388 <HAL_RCC_GetHCLKFreq>
 8008a64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f004 f8fa 	bl	800cc68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f00a f970 	bl	8012d5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f005 faba 	bl	800e008 <USB_ReadInterrupts>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f003 0308 	and.w	r3, r3, #8
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f00a f94d 	bl	8012d3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695a      	ldr	r2, [r3, #20]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f002 0208 	and.w	r2, r2, #8
 8008ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f005 faa5 	bl	800e008 <USB_ReadInterrupts>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac4:	2b80      	cmp	r3, #128	; 0x80
 8008ac6:	d122      	bne.n	8008b0e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad8:	e014      	b.n	8008b04 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ade:	4613      	mov	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d105      	bne.n	8008afe <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fb0b 	bl	8009114 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	3301      	adds	r3, #1
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d3e5      	bcc.n	8008ada <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f005 fa78 	bl	800e008 <USB_ReadInterrupts>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b22:	d13b      	bne.n	8008b9c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b24:	2301      	movs	r3, #1
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
 8008b28:	e02b      	b.n	8008b82 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	4613      	mov	r3, r2
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	440b      	add	r3, r1
 8008b48:	3340      	adds	r3, #64	; 0x40
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d115      	bne.n	8008b7c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008b50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da12      	bge.n	8008b7c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	440b      	add	r3, r1
 8008b64:	333f      	adds	r3, #63	; 0x3f
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 facc 	bl	8009114 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	3301      	adds	r3, #1
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d3ce      	bcc.n	8008b2a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f005 fa31 	bl	800e008 <USB_ReadInterrupts>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bb0:	d155      	bne.n	8008c5e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb6:	e045      	b.n	8008c44 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bcc:	4613      	mov	r3, r2
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d12e      	bne.n	8008c3e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008be0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da2b      	bge.n	8008c3e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008bf2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d121      	bne.n	8008c3e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	4613      	mov	r3, r2
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c3a:	6053      	str	r3, [r2, #4]
            break;
 8008c3c:	e007      	b.n	8008c4e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	3301      	adds	r3, #1
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d3b4      	bcc.n	8008bb8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695a      	ldr	r2, [r3, #20]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f005 f9d0 	bl	800e008 <USB_ReadInterrupts>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c72:	d10a      	bne.n	8008c8a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f00a f901 	bl	8012e7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	695a      	ldr	r2, [r3, #20]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f005 f9ba 	bl	800e008 <USB_ReadInterrupts>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d115      	bne.n	8008cca <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f00a f8f1 	bl	8012e98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6859      	ldr	r1, [r3, #4]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
 8008cc6:	e000      	b.n	8008cca <HAL_PCD_IRQHandler+0x920>
      return;
 8008cc8:	bf00      	nop
    }
  }
}
 8008cca:	3734      	adds	r7, #52	; 0x34
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}

08008cd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <HAL_PCD_SetAddress+0x1a>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e013      	b.n	8008d12 <HAL_PCD_SetAddress+0x42>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f005 f918 	bl	800df38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	461a      	mov	r2, r3
 8008d28:	4603      	mov	r3, r0
 8008d2a:	70fb      	strb	r3, [r7, #3]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	803b      	strh	r3, [r7, #0]
 8008d30:	4613      	mov	r3, r2
 8008d32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da0f      	bge.n	8008d60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	f003 020f 	and.w	r2, r3, #15
 8008d46:	4613      	mov	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	3338      	adds	r3, #56	; 0x38
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	4413      	add	r3, r2
 8008d54:	3304      	adds	r3, #4
 8008d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	705a      	strb	r2, [r3, #1]
 8008d5e:	e00f      	b.n	8008d80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	f003 020f 	and.w	r2, r3, #15
 8008d66:	4613      	mov	r3, r2
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4413      	add	r3, r2
 8008d76:	3304      	adds	r3, #4
 8008d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008d8c:	883a      	ldrh	r2, [r7, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	78ba      	ldrb	r2, [r7, #2]
 8008d96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	785b      	ldrb	r3, [r3, #1]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d004      	beq.n	8008daa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008daa:	78bb      	ldrb	r3, [r7, #2]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d102      	bne.n	8008db6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_PCD_EP_Open+0xaa>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e00e      	b.n	8008de2 <HAL_PCD_EP_Open+0xc8>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68f9      	ldr	r1, [r7, #12]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f004 fa3a 	bl	800d24c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008de0:	7afb      	ldrb	r3, [r7, #11]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da0f      	bge.n	8008e1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	f003 020f 	and.w	r2, r3, #15
 8008e04:	4613      	mov	r3, r2
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	3338      	adds	r3, #56	; 0x38
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	3304      	adds	r3, #4
 8008e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	705a      	strb	r2, [r3, #1]
 8008e1c:	e00f      	b.n	8008e3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	f003 020f 	and.w	r2, r3, #15
 8008e24:	4613      	mov	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	3304      	adds	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_PCD_EP_Close+0x6e>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e00e      	b.n	8008e76 <HAL_PCD_EP_Close+0x8c>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68f9      	ldr	r1, [r7, #12]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f004 fa78 	bl	800d35c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b086      	sub	sp, #24
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e8e:	7afb      	ldrb	r3, [r7, #11]
 8008e90:	f003 020f 	and.w	r2, r3, #15
 8008e94:	4613      	mov	r3, r2
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6979      	ldr	r1, [r7, #20]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f004 fcf9 	bl	800d8d4 <USB_EP0StartXfer>
 8008ee2:	e005      	b.n	8008ef0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6979      	ldr	r1, [r7, #20]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f004 fb12 	bl	800d514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	f003 020f 	and.w	r2, r3, #15
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008f1c:	681b      	ldr	r3, [r3, #0]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b086      	sub	sp, #24
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
 8008f36:	460b      	mov	r3, r1
 8008f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
 8008f3c:	f003 020f 	and.w	r2, r3, #15
 8008f40:	4613      	mov	r3, r2
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	3338      	adds	r3, #56	; 0x38
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3304      	adds	r3, #4
 8008f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2200      	movs	r2, #0
 8008f62:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2201      	movs	r2, #1
 8008f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f6a:	7afb      	ldrb	r3, [r7, #11]
 8008f6c:	f003 030f 	and.w	r3, r3, #15
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6979      	ldr	r1, [r7, #20]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f004 fca4 	bl	800d8d4 <USB_EP0StartXfer>
 8008f8c:	e005      	b.n	8008f9a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6979      	ldr	r1, [r7, #20]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f004 fabd 	bl	800d514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	f003 020f 	and.w	r2, r3, #15
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d901      	bls.n	8008fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e04e      	b.n	8009060 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	da0f      	bge.n	8008fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	f003 020f 	and.w	r2, r3, #15
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	3338      	adds	r3, #56	; 0x38
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	3304      	adds	r3, #4
 8008fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	705a      	strb	r2, [r3, #1]
 8008fe8:	e00d      	b.n	8009006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	b2da      	uxtb	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <HAL_PCD_EP_SetStall+0x82>
 8009022:	2302      	movs	r3, #2
 8009024:	e01c      	b.n	8009060 <HAL_PCD_EP_SetStall+0xbc>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	4618      	mov	r0, r3
 8009036:	f004 feab 	bl	800dd90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	2b00      	cmp	r3, #0
 8009042:	d108      	bne.n	8009056 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800904e:	4619      	mov	r1, r3
 8009050:	4610      	mov	r0, r2
 8009052:	f005 f89d 	bl	800e190 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	f003 020f 	and.w	r2, r3, #15
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d901      	bls.n	8009086 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e042      	b.n	800910c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800908a:	2b00      	cmp	r3, #0
 800908c:	da0f      	bge.n	80090ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	f003 020f 	and.w	r2, r3, #15
 8009094:	4613      	mov	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	3338      	adds	r3, #56	; 0x38
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	4413      	add	r3, r2
 80090a2:	3304      	adds	r3, #4
 80090a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	705a      	strb	r2, [r3, #1]
 80090ac:	e00f      	b.n	80090ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	f003 020f 	and.w	r2, r3, #15
 80090b4:	4613      	mov	r3, r2
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	4413      	add	r3, r2
 80090c4:	3304      	adds	r3, #4
 80090c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_PCD_EP_ClrStall+0x86>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e00e      	b.n	800910c <HAL_PCD_EP_ClrStall+0xa4>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f004 feb5 	bl	800de6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009124:	2b00      	cmp	r3, #0
 8009126:	da0c      	bge.n	8009142 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	f003 020f 	and.w	r2, r3, #15
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	3338      	adds	r3, #56	; 0x38
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	4413      	add	r3, r2
 800913c:	3304      	adds	r3, #4
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e00c      	b.n	800915c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	f003 020f 	and.w	r2, r3, #15
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	4413      	add	r3, r2
 8009158:	3304      	adds	r3, #4
 800915a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	4618      	mov	r0, r3
 8009164:	f004 fcd8 	bl	800db18 <USB_EPStopXfer>
 8009168:	4603      	mov	r3, r0
 800916a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800916c:	7afb      	ldrb	r3, [r7, #11]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b088      	sub	sp, #32
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	3338      	adds	r3, #56	; 0x38
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1a      	ldr	r2, [r3, #32]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d901      	bls.n	80091ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e067      	b.n	800927e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	69fa      	ldr	r2, [r7, #28]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d902      	bls.n	80091ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	3303      	adds	r3, #3
 80091ce:	089b      	lsrs	r3, r3, #2
 80091d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091d2:	e026      	b.n	8009222 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d902      	bls.n	80091f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	3303      	adds	r3, #3
 80091f4:	089b      	lsrs	r3, r3, #2
 80091f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6919      	ldr	r1, [r3, #16]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	b29b      	uxth	r3, r3
 8009204:	6978      	ldr	r0, [r7, #20]
 8009206:	f004 fd31 	bl	800dc6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	441a      	add	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a1a      	ldr	r2, [r3, #32]
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	441a      	add	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	b29b      	uxth	r3, r3
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	429a      	cmp	r2, r3
 8009236:	d809      	bhi.n	800924c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a1a      	ldr	r2, [r3, #32]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009240:	429a      	cmp	r2, r3
 8009242:	d203      	bcs.n	800924c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1c3      	bne.n	80091d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	429a      	cmp	r2, r3
 8009256:	d811      	bhi.n	800927c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	2201      	movs	r2, #1
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	43db      	mvns	r3, r3
 8009272:	6939      	ldr	r1, [r7, #16]
 8009274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009278:	4013      	ands	r3, r2
 800927a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3720      	adds	r7, #32
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	333c      	adds	r3, #60	; 0x3c
 80092a0:	3304      	adds	r3, #4
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a19      	ldr	r2, [pc, #100]	; (8009320 <PCD_EP_OutXfrComplete_int+0x98>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d124      	bne.n	8009308 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	461a      	mov	r2, r3
 80092d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092da:	6093      	str	r3, [r2, #8]
 80092dc:	e01a      	b.n	8009314 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f4:	461a      	mov	r2, r3
 80092f6:	2320      	movs	r3, #32
 80092f8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f009 fce7 	bl	8012cd4 <HAL_PCD_DataOutStageCallback>
 8009306:	e005      	b.n	8009314 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f009 fce0 	bl	8012cd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	4f54310a 	.word	0x4f54310a

08009324 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	333c      	adds	r3, #60	; 0x3c
 800933c:	3304      	adds	r3, #4
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4a0c      	ldr	r2, [pc, #48]	; (8009388 <PCD_EP_OutSetupPacket_int+0x64>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d90e      	bls.n	8009378 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009360:	2b00      	cmp	r3, #0
 8009362:	d009      	beq.n	8009378 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009370:	461a      	mov	r2, r3
 8009372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009376:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f009 fc99 	bl	8012cb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	4f54300a 	.word	0x4f54300a

0800938c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
 8009398:	4613      	mov	r3, r2
 800939a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d107      	bne.n	80093ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80093aa:	883b      	ldrh	r3, [r7, #0]
 80093ac:	0419      	lsls	r1, r3, #16
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28
 80093b8:	e028      	b.n	800940c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	0c1b      	lsrs	r3, r3, #16
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	4413      	add	r3, r2
 80093c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	e00d      	b.n	80093ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	3340      	adds	r3, #64	; 0x40
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	0c1b      	lsrs	r3, r3, #16
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	3301      	adds	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
 80093ea:	7bfa      	ldrb	r2, [r7, #15]
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d3ec      	bcc.n	80093ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093f4:	883b      	ldrh	r3, [r7, #0]
 80093f6:	0418      	lsls	r0, r3, #16
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6819      	ldr	r1, [r3, #0]
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	3b01      	subs	r3, #1
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	4302      	orrs	r2, r0
 8009404:	3340      	adds	r3, #64	; 0x40
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	887a      	ldrh	r2, [r7, #2]
 800942c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800946e:	f043 0303 	orr.w	r3, r3, #3
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009496:	d104      	bne.n	80094a2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f908 	bl	80096b0 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80094a0:	e003      	b.n	80094aa <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f8d9 	bl	800965c <HAL_PWREx_EnterSTOP0Mode>
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094c4:	d102      	bne.n	80094cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80094c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ca:	e00b      	b.n	80094e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80094cc:	4b08      	ldr	r3, [pc, #32]	; (80094f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80094ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094da:	d102      	bne.n	80094e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80094dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094e0:	e000      	b.n	80094e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80094e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	40007000 	.word	0x40007000

080094f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d141      	bne.n	8009586 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009502:	4b4b      	ldr	r3, [pc, #300]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800950a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800950e:	d131      	bne.n	8009574 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009510:	4b47      	ldr	r3, [pc, #284]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009516:	4a46      	ldr	r2, [pc, #280]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800951c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009520:	4b43      	ldr	r3, [pc, #268]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009528:	4a41      	ldr	r2, [pc, #260]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800952a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800952e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009530:	4b40      	ldr	r3, [pc, #256]	; (8009634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2232      	movs	r2, #50	; 0x32
 8009536:	fb02 f303 	mul.w	r3, r2, r3
 800953a:	4a3f      	ldr	r2, [pc, #252]	; (8009638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800953c:	fba2 2303 	umull	r2, r3, r2, r3
 8009540:	0c9b      	lsrs	r3, r3, #18
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009546:	e002      	b.n	800954e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3b01      	subs	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800954e:	4b38      	ldr	r3, [pc, #224]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955a:	d102      	bne.n	8009562 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f2      	bne.n	8009548 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009562:	4b33      	ldr	r3, [pc, #204]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800956a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956e:	d158      	bne.n	8009622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e057      	b.n	8009624 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009574:	4b2e      	ldr	r3, [pc, #184]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800957a:	4a2d      	ldr	r2, [pc, #180]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800957c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009580:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009584:	e04d      	b.n	8009622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800958c:	d141      	bne.n	8009612 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800958e:	4b28      	ldr	r3, [pc, #160]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800959a:	d131      	bne.n	8009600 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800959c:	4b24      	ldr	r3, [pc, #144]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800959e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095a2:	4a23      	ldr	r2, [pc, #140]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80095ac:	4b20      	ldr	r3, [pc, #128]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80095b4:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2232      	movs	r2, #50	; 0x32
 80095c2:	fb02 f303 	mul.w	r3, r2, r3
 80095c6:	4a1c      	ldr	r2, [pc, #112]	; (8009638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80095c8:	fba2 2303 	umull	r2, r3, r2, r3
 80095cc:	0c9b      	lsrs	r3, r3, #18
 80095ce:	3301      	adds	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095d2:	e002      	b.n	80095da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095da:	4b15      	ldr	r3, [pc, #84]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095e6:	d102      	bne.n	80095ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1f2      	bne.n	80095d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095ee:	4b10      	ldr	r3, [pc, #64]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095fa:	d112      	bne.n	8009622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e011      	b.n	8009624 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009600:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009606:	4a0a      	ldr	r2, [pc, #40]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800960c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009610:	e007      	b.n	8009622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800961a:	4a05      	ldr	r2, [pc, #20]	; (8009630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800961c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009620:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	40007000 	.word	0x40007000
 8009634:	20000184 	.word	0x20000184
 8009638:	431bde83 	.word	0x431bde83

0800963c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009640:	4b05      	ldr	r3, [pc, #20]	; (8009658 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	4a04      	ldr	r2, [pc, #16]	; (8009658 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800964a:	6053      	str	r3, [r2, #4]
}
 800964c:	bf00      	nop
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40007000 	.word	0x40007000

0800965c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009666:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a0f      	ldr	r2, [pc, #60]	; (80096a8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800966c:	f023 0307 	bic.w	r3, r3, #7
 8009670:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009672:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	4a0d      	ldr	r2, [pc, #52]	; (80096ac <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009678:	f043 0304 	orr.w	r3, r3, #4
 800967c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800967e:	79fb      	ldrb	r3, [r7, #7]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009684:	bf30      	wfi
 8009686:	e002      	b.n	800968e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009688:	bf40      	sev
    __WFE();
 800968a:	bf20      	wfe
    __WFE();
 800968c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800968e:	4b07      	ldr	r3, [pc, #28]	; (80096ac <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	4a06      	ldr	r2, [pc, #24]	; (80096ac <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009694:	f023 0304 	bic.w	r3, r3, #4
 8009698:	6113      	str	r3, [r2, #16]
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40007000 	.word	0x40007000
 80096ac:	e000ed00 	.word	0xe000ed00

080096b0 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80096ba:	4b11      	ldr	r3, [pc, #68]	; (8009700 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 0307 	bic.w	r3, r3, #7
 80096c2:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80096ca:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80096d0:	f043 0304 	orr.w	r3, r3, #4
 80096d4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80096dc:	bf30      	wfi
 80096de:	e002      	b.n	80096e6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80096e0:	bf40      	sev
    __WFE();
 80096e2:	bf20      	wfe
    __WFE();
 80096e4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80096e6:	4b07      	ldr	r3, [pc, #28]	; (8009704 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	4a06      	ldr	r2, [pc, #24]	; (8009704 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80096ec:	f023 0304 	bic.w	r3, r3, #4
 80096f0:	6113      	str	r3, [r2, #16]
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40007000 	.word	0x40007000
 8009704:	e000ed00 	.word	0xe000ed00

08009708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	; 0x28
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f000 bc68 	b.w	8009fec <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800971c:	4b97      	ldr	r3, [pc, #604]	; (800997c <HAL_RCC_OscConfig+0x274>)
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 030c 	and.w	r3, r3, #12
 8009724:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009726:	4b95      	ldr	r3, [pc, #596]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f003 0303 	and.w	r3, r3, #3
 800972e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 80e6 	beq.w	800990a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d007      	beq.n	8009754 <HAL_RCC_OscConfig+0x4c>
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	2b0c      	cmp	r3, #12
 8009748:	f040 808d 	bne.w	8009866 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b01      	cmp	r3, #1
 8009750:	f040 8089 	bne.w	8009866 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009754:	4b89      	ldr	r3, [pc, #548]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d006      	beq.n	800976e <HAL_RCC_OscConfig+0x66>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	f000 bc3f 	b.w	8009fec <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009772:	4b82      	ldr	r3, [pc, #520]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0308 	and.w	r3, r3, #8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d004      	beq.n	8009788 <HAL_RCC_OscConfig+0x80>
 800977e:	4b7f      	ldr	r3, [pc, #508]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009786:	e005      	b.n	8009794 <HAL_RCC_OscConfig+0x8c>
 8009788:	4b7c      	ldr	r3, [pc, #496]	; (800997c <HAL_RCC_OscConfig+0x274>)
 800978a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800978e:	091b      	lsrs	r3, r3, #4
 8009790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009794:	4293      	cmp	r3, r2
 8009796:	d224      	bcs.n	80097e2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fe47 	bl	800a430 <RCC_SetFlashLatencyFromMSIRange>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	f000 bc1f 	b.w	8009fec <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097ae:	4b73      	ldr	r3, [pc, #460]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a72      	ldr	r2, [pc, #456]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097b4:	f043 0308 	orr.w	r3, r3, #8
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	4b70      	ldr	r3, [pc, #448]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	496d      	ldr	r1, [pc, #436]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097cc:	4b6b      	ldr	r3, [pc, #428]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	4968      	ldr	r1, [pc, #416]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	604b      	str	r3, [r1, #4]
 80097e0:	e025      	b.n	800982e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097e2:	4b66      	ldr	r3, [pc, #408]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a65      	ldr	r2, [pc, #404]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097e8:	f043 0308 	orr.w	r3, r3, #8
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	4b63      	ldr	r3, [pc, #396]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	4960      	ldr	r1, [pc, #384]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009800:	4b5e      	ldr	r3, [pc, #376]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	495b      	ldr	r1, [pc, #364]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009810:	4313      	orrs	r3, r2
 8009812:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fe06 	bl	800a430 <RCC_SetFlashLatencyFromMSIRange>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e3de      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800982e:	f000 fd21 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 8009832:	4602      	mov	r2, r0
 8009834:	4b51      	ldr	r3, [pc, #324]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	091b      	lsrs	r3, r3, #4
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	4950      	ldr	r1, [pc, #320]	; (8009980 <HAL_RCC_OscConfig+0x278>)
 8009840:	5ccb      	ldrb	r3, [r1, r3]
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	fa22 f303 	lsr.w	r3, r2, r3
 800984a:	4a4e      	ldr	r2, [pc, #312]	; (8009984 <HAL_RCC_OscConfig+0x27c>)
 800984c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800984e:	4b4e      	ldr	r3, [pc, #312]	; (8009988 <HAL_RCC_OscConfig+0x280>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f7fb f96c 	bl	8004b30 <HAL_InitTick>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d052      	beq.n	8009908 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	e3c2      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d032      	beq.n	80098d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800986e:	4b43      	ldr	r3, [pc, #268]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a42      	ldr	r2, [pc, #264]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009874:	f043 0301 	orr.w	r3, r3, #1
 8009878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800987a:	f7fb fb47 	bl	8004f0c <HAL_GetTick>
 800987e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009882:	f7fb fb43 	bl	8004f0c <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e3ab      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009894:	4b39      	ldr	r3, [pc, #228]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0f0      	beq.n	8009882 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098a0:	4b36      	ldr	r3, [pc, #216]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a35      	ldr	r2, [pc, #212]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098a6:	f043 0308 	orr.w	r3, r3, #8
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	4b33      	ldr	r3, [pc, #204]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	4930      	ldr	r1, [pc, #192]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098be:	4b2f      	ldr	r3, [pc, #188]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	492b      	ldr	r1, [pc, #172]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	604b      	str	r3, [r1, #4]
 80098d2:	e01a      	b.n	800990a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80098d4:	4b29      	ldr	r3, [pc, #164]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a28      	ldr	r2, [pc, #160]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098da:	f023 0301 	bic.w	r3, r3, #1
 80098de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80098e0:	f7fb fb14 	bl	8004f0c <HAL_GetTick>
 80098e4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80098e6:	e008      	b.n	80098fa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80098e8:	f7fb fb10 	bl	8004f0c <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e378      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80098fa:	4b20      	ldr	r3, [pc, #128]	; (800997c <HAL_RCC_OscConfig+0x274>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1f0      	bne.n	80098e8 <HAL_RCC_OscConfig+0x1e0>
 8009906:	e000      	b.n	800990a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d073      	beq.n	80099fe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d005      	beq.n	8009928 <HAL_RCC_OscConfig+0x220>
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	2b0c      	cmp	r3, #12
 8009920:	d10e      	bne.n	8009940 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	2b03      	cmp	r3, #3
 8009926:	d10b      	bne.n	8009940 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009928:	4b14      	ldr	r3, [pc, #80]	; (800997c <HAL_RCC_OscConfig+0x274>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d063      	beq.n	80099fc <HAL_RCC_OscConfig+0x2f4>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d15f      	bne.n	80099fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e355      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009948:	d106      	bne.n	8009958 <HAL_RCC_OscConfig+0x250>
 800994a:	4b0c      	ldr	r3, [pc, #48]	; (800997c <HAL_RCC_OscConfig+0x274>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0b      	ldr	r2, [pc, #44]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	e025      	b.n	80099a4 <HAL_RCC_OscConfig+0x29c>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009960:	d114      	bne.n	800998c <HAL_RCC_OscConfig+0x284>
 8009962:	4b06      	ldr	r3, [pc, #24]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a05      	ldr	r2, [pc, #20]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	4b03      	ldr	r3, [pc, #12]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a02      	ldr	r2, [pc, #8]	; (800997c <HAL_RCC_OscConfig+0x274>)
 8009974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e013      	b.n	80099a4 <HAL_RCC_OscConfig+0x29c>
 800997c:	40021000 	.word	0x40021000
 8009980:	08016af8 	.word	0x08016af8
 8009984:	20000184 	.word	0x20000184
 8009988:	20000188 	.word	0x20000188
 800998c:	4b8f      	ldr	r3, [pc, #572]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a8e      	ldr	r2, [pc, #568]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	4b8c      	ldr	r3, [pc, #560]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a8b      	ldr	r2, [pc, #556]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 800999e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d013      	beq.n	80099d4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ac:	f7fb faae 	bl	8004f0c <HAL_GetTick>
 80099b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099b2:	e008      	b.n	80099c6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099b4:	f7fb faaa 	bl	8004f0c <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b64      	cmp	r3, #100	; 0x64
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e312      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099c6:	4b81      	ldr	r3, [pc, #516]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0f0      	beq.n	80099b4 <HAL_RCC_OscConfig+0x2ac>
 80099d2:	e014      	b.n	80099fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d4:	f7fb fa9a 	bl	8004f0c <HAL_GetTick>
 80099d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80099da:	e008      	b.n	80099ee <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099dc:	f7fb fa96 	bl	8004f0c <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2b64      	cmp	r3, #100	; 0x64
 80099e8:	d901      	bls.n	80099ee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e2fe      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80099ee:	4b77      	ldr	r3, [pc, #476]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1f0      	bne.n	80099dc <HAL_RCC_OscConfig+0x2d4>
 80099fa:	e000      	b.n	80099fe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d060      	beq.n	8009acc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d005      	beq.n	8009a1c <HAL_RCC_OscConfig+0x314>
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b0c      	cmp	r3, #12
 8009a14:	d119      	bne.n	8009a4a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d116      	bne.n	8009a4a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a1c:	4b6b      	ldr	r3, [pc, #428]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <HAL_RCC_OscConfig+0x32c>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e2db      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a34:	4b65      	ldr	r3, [pc, #404]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	061b      	lsls	r3, r3, #24
 8009a42:	4962      	ldr	r1, [pc, #392]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a48:	e040      	b.n	8009acc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d023      	beq.n	8009a9a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a52:	4b5e      	ldr	r3, [pc, #376]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a5d      	ldr	r2, [pc, #372]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a5e:	f7fb fa55 	bl	8004f0c <HAL_GetTick>
 8009a62:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a64:	e008      	b.n	8009a78 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a66:	f7fb fa51 	bl	8004f0c <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e2b9      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a78:	4b54      	ldr	r3, [pc, #336]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0f0      	beq.n	8009a66 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a84:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	061b      	lsls	r3, r3, #24
 8009a92:	494e      	ldr	r1, [pc, #312]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	604b      	str	r3, [r1, #4]
 8009a98:	e018      	b.n	8009acc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a9a:	4b4c      	ldr	r3, [pc, #304]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a4b      	ldr	r2, [pc, #300]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa6:	f7fb fa31 	bl	8004f0c <HAL_GetTick>
 8009aaa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009aac:	e008      	b.n	8009ac0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aae:	f7fb fa2d 	bl	8004f0c <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e295      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ac0:	4b42      	ldr	r3, [pc, #264]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f0      	bne.n	8009aae <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0308 	and.w	r3, r3, #8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8082 	beq.w	8009bde <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d05f      	beq.n	8009ba2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009ae2:	4b3a      	ldr	r3, [pc, #232]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ae8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	699a      	ldr	r2, [r3, #24]
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d037      	beq.n	8009b68 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d006      	beq.n	8009b10 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e26d      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d01b      	beq.n	8009b52 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009b1a:	4b2c      	ldr	r3, [pc, #176]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b20:	4a2a      	ldr	r2, [pc, #168]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b22:	f023 0301 	bic.w	r3, r3, #1
 8009b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b2a:	f7fb f9ef 	bl	8004f0c <HAL_GetTick>
 8009b2e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009b30:	e008      	b.n	8009b44 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b32:	f7fb f9eb 	bl	8004f0c <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b11      	cmp	r3, #17
 8009b3e:	d901      	bls.n	8009b44 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e253      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009b44:	4b21      	ldr	r3, [pc, #132]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1ef      	bne.n	8009b32 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009b52:	4b1e      	ldr	r3, [pc, #120]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b58:	f023 0210 	bic.w	r2, r3, #16
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	491a      	ldr	r1, [pc, #104]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b68:	4b18      	ldr	r3, [pc, #96]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b6e:	4a17      	ldr	r2, [pc, #92]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b70:	f043 0301 	orr.w	r3, r3, #1
 8009b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b78:	f7fb f9c8 	bl	8004f0c <HAL_GetTick>
 8009b7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b80:	f7fb f9c4 	bl	8004f0c <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b11      	cmp	r3, #17
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e22c      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b92:	4b0e      	ldr	r3, [pc, #56]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0ef      	beq.n	8009b80 <HAL_RCC_OscConfig+0x478>
 8009ba0:	e01d      	b.n	8009bde <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ba8:	4a08      	ldr	r2, [pc, #32]	; (8009bcc <HAL_RCC_OscConfig+0x4c4>)
 8009baa:	f023 0301 	bic.w	r3, r3, #1
 8009bae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb2:	f7fb f9ab 	bl	8004f0c <HAL_GetTick>
 8009bb6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009bb8:	e00a      	b.n	8009bd0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bba:	f7fb f9a7 	bl	8004f0c <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b11      	cmp	r3, #17
 8009bc6:	d903      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e20f      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
 8009bcc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009bd0:	4b83      	ldr	r3, [pc, #524]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1ed      	bne.n	8009bba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 80bd 	beq.w	8009d66 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009bf2:	4b7b      	ldr	r3, [pc, #492]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10e      	bne.n	8009c1c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bfe:	4b78      	ldr	r3, [pc, #480]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c02:	4a77      	ldr	r2, [pc, #476]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c08:	6593      	str	r3, [r2, #88]	; 0x58
 8009c0a:	4b75      	ldr	r3, [pc, #468]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c1c:	4b71      	ldr	r3, [pc, #452]	; (8009de4 <HAL_RCC_OscConfig+0x6dc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d118      	bne.n	8009c5a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c28:	4b6e      	ldr	r3, [pc, #440]	; (8009de4 <HAL_RCC_OscConfig+0x6dc>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a6d      	ldr	r2, [pc, #436]	; (8009de4 <HAL_RCC_OscConfig+0x6dc>)
 8009c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c34:	f7fb f96a 	bl	8004f0c <HAL_GetTick>
 8009c38:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c3a:	e008      	b.n	8009c4e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c3c:	f7fb f966 	bl	8004f0c <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d901      	bls.n	8009c4e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e1ce      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c4e:	4b65      	ldr	r3, [pc, #404]	; (8009de4 <HAL_RCC_OscConfig+0x6dc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0f0      	beq.n	8009c3c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d02c      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8009c66:	4b5e      	ldr	r3, [pc, #376]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c78:	4959      	ldr	r1, [pc, #356]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d010      	beq.n	8009cae <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009c8c:	4b54      	ldr	r3, [pc, #336]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c92:	4a53      	ldr	r2, [pc, #332]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c94:	f043 0304 	orr.w	r3, r3, #4
 8009c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009c9c:	4b50      	ldr	r3, [pc, #320]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca2:	4a4f      	ldr	r2, [pc, #316]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009ca4:	f043 0301 	orr.w	r3, r3, #1
 8009ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009cac:	e018      	b.n	8009ce0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009cae:	4b4c      	ldr	r3, [pc, #304]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb4:	4a4a      	ldr	r2, [pc, #296]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009cbe:	e00f      	b.n	8009ce0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009cc0:	4b47      	ldr	r3, [pc, #284]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc6:	4a46      	ldr	r2, [pc, #280]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009cc8:	f023 0301 	bic.w	r3, r3, #1
 8009ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009cd0:	4b43      	ldr	r3, [pc, #268]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd6:	4a42      	ldr	r2, [pc, #264]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009cd8:	f023 0304 	bic.w	r3, r3, #4
 8009cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d016      	beq.n	8009d16 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce8:	f7fb f910 	bl	8004f0c <HAL_GetTick>
 8009cec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cee:	e00a      	b.n	8009d06 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cf0:	f7fb f90c 	bl	8004f0c <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d901      	bls.n	8009d06 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e172      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d06:	4b36      	ldr	r3, [pc, #216]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0ed      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x5e8>
 8009d14:	e01d      	b.n	8009d52 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d16:	f7fb f8f9 	bl	8004f0c <HAL_GetTick>
 8009d1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d1c:	e00a      	b.n	8009d34 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d1e:	f7fb f8f5 	bl	8004f0c <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e15b      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d34:	4b2a      	ldr	r3, [pc, #168]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1ed      	bne.n	8009d1e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8009d42:	4b27      	ldr	r3, [pc, #156]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d48:	4a25      	ldr	r2, [pc, #148]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d105      	bne.n	8009d66 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d5a:	4b21      	ldr	r3, [pc, #132]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	4a20      	ldr	r2, [pc, #128]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d041      	beq.n	8009df6 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d01c      	beq.n	8009db4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d7a:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d80:	4a17      	ldr	r2, [pc, #92]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d8a:	f7fb f8bf 	bl	8004f0c <HAL_GetTick>
 8009d8e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009d90:	e008      	b.n	8009da4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d92:	f7fb f8bb 	bl	8004f0c <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d901      	bls.n	8009da4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e123      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009da4:	4b0e      	ldr	r3, [pc, #56]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0ef      	beq.n	8009d92 <HAL_RCC_OscConfig+0x68a>
 8009db2:	e020      	b.n	8009df6 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009db4:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dba:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <HAL_RCC_OscConfig+0x6d8>)
 8009dbc:	f023 0301 	bic.w	r3, r3, #1
 8009dc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc4:	f7fb f8a2 	bl	8004f0c <HAL_GetTick>
 8009dc8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009dca:	e00d      	b.n	8009de8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dcc:	f7fb f89e 	bl	8004f0c <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d906      	bls.n	8009de8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e106      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
 8009dde:	bf00      	nop
 8009de0:	40021000 	.word	0x40021000
 8009de4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009de8:	4b82      	ldr	r3, [pc, #520]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1ea      	bne.n	8009dcc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 80f5 	beq.w	8009fea <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	f040 80cb 	bne.w	8009fa0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009e0a:	4b7a      	ldr	r3, [pc, #488]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	f003 0203 	and.w	r2, r3, #3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d12c      	bne.n	8009e78 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d123      	bne.n	8009e78 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d11b      	bne.n	8009e78 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d113      	bne.n	8009e78 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d109      	bne.n	8009e78 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	3b01      	subs	r3, #1
 8009e72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d06d      	beq.n	8009f54 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b0c      	cmp	r3, #12
 8009e7c:	d068      	beq.n	8009f50 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009e7e:	4b5d      	ldr	r3, [pc, #372]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d105      	bne.n	8009e96 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009e8a:	4b5a      	ldr	r3, [pc, #360]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e0a8      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009e9a:	4b56      	ldr	r3, [pc, #344]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a55      	ldr	r2, [pc, #340]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ea4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009ea6:	f7fb f831 	bl	8004f0c <HAL_GetTick>
 8009eaa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009eac:	e008      	b.n	8009ec0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eae:	f7fb f82d 	bl	8004f0c <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d901      	bls.n	8009ec0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e095      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ec0:	4b4c      	ldr	r3, [pc, #304]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f0      	bne.n	8009eae <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ecc:	4b49      	ldr	r3, [pc, #292]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	4b49      	ldr	r3, [pc, #292]	; (8009ff8 <HAL_RCC_OscConfig+0x8f0>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009edc:	3a01      	subs	r2, #1
 8009ede:	0112      	lsls	r2, r2, #4
 8009ee0:	4311      	orrs	r1, r2
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ee6:	0212      	lsls	r2, r2, #8
 8009ee8:	4311      	orrs	r1, r2
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009eee:	0852      	lsrs	r2, r2, #1
 8009ef0:	3a01      	subs	r2, #1
 8009ef2:	0552      	lsls	r2, r2, #21
 8009ef4:	4311      	orrs	r1, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009efa:	0852      	lsrs	r2, r2, #1
 8009efc:	3a01      	subs	r2, #1
 8009efe:	0652      	lsls	r2, r2, #25
 8009f00:	4311      	orrs	r1, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009f06:	06d2      	lsls	r2, r2, #27
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	493a      	ldr	r1, [pc, #232]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009f10:	4b38      	ldr	r3, [pc, #224]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a37      	ldr	r2, [pc, #220]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f1c:	4b35      	ldr	r3, [pc, #212]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	4a34      	ldr	r2, [pc, #208]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009f28:	f7fa fff0 	bl	8004f0c <HAL_GetTick>
 8009f2c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f30:	f7fa ffec 	bl	8004f0c <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e054      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f42:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009f4e:	e04c      	b.n	8009fea <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e04b      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f54:	4b27      	ldr	r3, [pc, #156]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d144      	bne.n	8009fea <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009f60:	4b24      	ldr	r3, [pc, #144]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a23      	ldr	r2, [pc, #140]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f6c:	4b21      	ldr	r3, [pc, #132]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	4a20      	ldr	r2, [pc, #128]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f78:	f7fa ffc8 	bl	8004f0c <HAL_GetTick>
 8009f7c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f80:	f7fa ffc4 	bl	8004f0c <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e02c      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f92:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f0      	beq.n	8009f80 <HAL_RCC_OscConfig+0x878>
 8009f9e:	e024      	b.n	8009fea <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2b0c      	cmp	r3, #12
 8009fa4:	d01f      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a12      	ldr	r2, [pc, #72]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb2:	f7fa ffab 	bl	8004f0c <HAL_GetTick>
 8009fb6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fb8:	e008      	b.n	8009fcc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fba:	f7fa ffa7 	bl	8004f0c <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d901      	bls.n	8009fcc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e00f      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fcc:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1f0      	bne.n	8009fba <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	4905      	ldr	r1, [pc, #20]	; (8009ff4 <HAL_RCC_OscConfig+0x8ec>)
 8009fde:	4b07      	ldr	r3, [pc, #28]	; (8009ffc <HAL_RCC_OscConfig+0x8f4>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	60cb      	str	r3, [r1, #12]
 8009fe4:	e001      	b.n	8009fea <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e000      	b.n	8009fec <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3728      	adds	r7, #40	; 0x28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	40021000 	.word	0x40021000
 8009ff8:	019d800c 	.word	0x019d800c
 8009ffc:	feeefffc 	.word	0xfeeefffc

0800a000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e11d      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a018:	4b90      	ldr	r3, [pc, #576]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 030f 	and.w	r3, r3, #15
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d910      	bls.n	800a048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a026:	4b8d      	ldr	r3, [pc, #564]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f023 020f 	bic.w	r2, r3, #15
 800a02e:	498b      	ldr	r1, [pc, #556]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	4313      	orrs	r3, r2
 800a034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a036:	4b89      	ldr	r3, [pc, #548]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d001      	beq.n	800a048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e105      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d010      	beq.n	800a076 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	4b81      	ldr	r3, [pc, #516]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a060:	429a      	cmp	r2, r3
 800a062:	d908      	bls.n	800a076 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a064:	4b7e      	ldr	r3, [pc, #504]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	497b      	ldr	r1, [pc, #492]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a072:	4313      	orrs	r3, r2
 800a074:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d079      	beq.n	800a176 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d11e      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a08a:	4b75      	ldr	r3, [pc, #468]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e0dc      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a09a:	f000 fa23 	bl	800a4e4 <RCC_GetSysClockFreqFromPLLSource>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4a70      	ldr	r2, [pc, #448]	; (800a264 <HAL_RCC_ClockConfig+0x264>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d946      	bls.n	800a134 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a0a6:	4b6e      	ldr	r3, [pc, #440]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d140      	bne.n	800a134 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a0b2:	4b6b      	ldr	r3, [pc, #428]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ba:	4a69      	ldr	r2, [pc, #420]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a0c2:	2380      	movs	r3, #128	; 0x80
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e035      	b.n	800a134 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d107      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0d0:	4b63      	ldr	r3, [pc, #396]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d115      	bne.n	800a108 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0b9      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d107      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a0e8:	4b5d      	ldr	r3, [pc, #372]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e0ad      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0f8:	4b59      	ldr	r3, [pc, #356]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e0a5      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a108:	f000 f8b4 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800a10c:	4603      	mov	r3, r0
 800a10e:	4a55      	ldr	r2, [pc, #340]	; (800a264 <HAL_RCC_ClockConfig+0x264>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d90f      	bls.n	800a134 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a114:	4b52      	ldr	r3, [pc, #328]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d109      	bne.n	800a134 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a120:	4b4f      	ldr	r3, [pc, #316]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a128:	4a4d      	ldr	r2, [pc, #308]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a12e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a134:	4b4a      	ldr	r3, [pc, #296]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f023 0203 	bic.w	r2, r3, #3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4947      	ldr	r1, [pc, #284]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a142:	4313      	orrs	r3, r2
 800a144:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a146:	f7fa fee1 	bl	8004f0c <HAL_GetTick>
 800a14a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a14c:	e00a      	b.n	800a164 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a14e:	f7fa fedd 	bl	8004f0c <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d901      	bls.n	800a164 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e077      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a164:	4b3e      	ldr	r3, [pc, #248]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f003 020c 	and.w	r2, r3, #12
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	429a      	cmp	r2, r3
 800a174:	d1eb      	bne.n	800a14e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b80      	cmp	r3, #128	; 0x80
 800a17a:	d105      	bne.n	800a188 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a17c:	4b38      	ldr	r3, [pc, #224]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	4a37      	ldr	r2, [pc, #220]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a186:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d010      	beq.n	800a1b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	4b31      	ldr	r3, [pc, #196]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d208      	bcs.n	800a1b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1a4:	4b2e      	ldr	r3, [pc, #184]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	492b      	ldr	r1, [pc, #172]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1b6:	4b29      	ldr	r3, [pc, #164]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 030f 	and.w	r3, r3, #15
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d210      	bcs.n	800a1e6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1c4:	4b25      	ldr	r3, [pc, #148]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f023 020f 	bic.w	r2, r3, #15
 800a1cc:	4923      	ldr	r1, [pc, #140]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1d4:	4b21      	ldr	r3, [pc, #132]	; (800a25c <HAL_RCC_ClockConfig+0x25c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d001      	beq.n	800a1e6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e036      	b.n	800a254 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d008      	beq.n	800a204 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1f2:	4b1b      	ldr	r3, [pc, #108]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	4918      	ldr	r1, [pc, #96]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a200:	4313      	orrs	r3, r2
 800a202:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0308 	and.w	r3, r3, #8
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a210:	4b13      	ldr	r3, [pc, #76]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	4910      	ldr	r1, [pc, #64]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a220:	4313      	orrs	r3, r2
 800a222:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a224:	f000 f826 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800a228:	4602      	mov	r2, r0
 800a22a:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <HAL_RCC_ClockConfig+0x260>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	091b      	lsrs	r3, r3, #4
 800a230:	f003 030f 	and.w	r3, r3, #15
 800a234:	490c      	ldr	r1, [pc, #48]	; (800a268 <HAL_RCC_ClockConfig+0x268>)
 800a236:	5ccb      	ldrb	r3, [r1, r3]
 800a238:	f003 031f 	and.w	r3, r3, #31
 800a23c:	fa22 f303 	lsr.w	r3, r2, r3
 800a240:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <HAL_RCC_ClockConfig+0x26c>)
 800a242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a244:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <HAL_RCC_ClockConfig+0x270>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fa fc71 	bl	8004b30 <HAL_InitTick>
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]

  return status;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40022000 	.word	0x40022000
 800a260:	40021000 	.word	0x40021000
 800a264:	04c4b400 	.word	0x04c4b400
 800a268:	08016af8 	.word	0x08016af8
 800a26c:	20000184 	.word	0x20000184
 800a270:	20000188 	.word	0x20000188

0800a274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a274:	b480      	push	{r7}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61fb      	str	r3, [r7, #28]
 800a27e:	2300      	movs	r3, #0
 800a280:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a282:	4b3e      	ldr	r3, [pc, #248]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f003 030c 	and.w	r3, r3, #12
 800a28a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a28c:	4b3b      	ldr	r3, [pc, #236]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <HAL_RCC_GetSysClockFreq+0x34>
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2b0c      	cmp	r3, #12
 800a2a0:	d121      	bne.n	800a2e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d11e      	bne.n	800a2e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a2a8:	4b34      	ldr	r3, [pc, #208]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0308 	and.w	r3, r3, #8
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d107      	bne.n	800a2c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a2b4:	4b31      	ldr	r3, [pc, #196]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a2b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2ba:	0a1b      	lsrs	r3, r3, #8
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	e005      	b.n	800a2d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a2c4:	4b2d      	ldr	r3, [pc, #180]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	091b      	lsrs	r3, r3, #4
 800a2ca:	f003 030f 	and.w	r3, r3, #15
 800a2ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a2d0:	4a2b      	ldr	r2, [pc, #172]	; (800a380 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10d      	bne.n	800a2fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a2e4:	e00a      	b.n	800a2fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d102      	bne.n	800a2f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a2ec:	4b25      	ldr	r3, [pc, #148]	; (800a384 <HAL_RCC_GetSysClockFreq+0x110>)
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	e004      	b.n	800a2fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	d101      	bne.n	800a2fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a2f8:	4b22      	ldr	r3, [pc, #136]	; (800a384 <HAL_RCC_GetSysClockFreq+0x110>)
 800a2fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2b0c      	cmp	r3, #12
 800a300:	d134      	bne.n	800a36c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a302:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d003      	beq.n	800a31a <HAL_RCC_GetSysClockFreq+0xa6>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b03      	cmp	r3, #3
 800a316:	d003      	beq.n	800a320 <HAL_RCC_GetSysClockFreq+0xac>
 800a318:	e005      	b.n	800a326 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a31a:	4b1a      	ldr	r3, [pc, #104]	; (800a384 <HAL_RCC_GetSysClockFreq+0x110>)
 800a31c:	617b      	str	r3, [r7, #20]
      break;
 800a31e:	e005      	b.n	800a32c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a320:	4b18      	ldr	r3, [pc, #96]	; (800a384 <HAL_RCC_GetSysClockFreq+0x110>)
 800a322:	617b      	str	r3, [r7, #20]
      break;
 800a324:	e002      	b.n	800a32c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	617b      	str	r3, [r7, #20]
      break;
 800a32a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a32c:	4b13      	ldr	r3, [pc, #76]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	091b      	lsrs	r3, r3, #4
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	3301      	adds	r3, #1
 800a338:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a33a:	4b10      	ldr	r3, [pc, #64]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	0a1b      	lsrs	r3, r3, #8
 800a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	fb03 f202 	mul.w	r2, r3, r2
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a350:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a352:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <HAL_RCC_GetSysClockFreq+0x108>)
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	0e5b      	lsrs	r3, r3, #25
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	3301      	adds	r3, #1
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a36c:	69bb      	ldr	r3, [r7, #24]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3724      	adds	r7, #36	; 0x24
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	40021000 	.word	0x40021000
 800a380:	08016b10 	.word	0x08016b10
 800a384:	00f42400 	.word	0x00f42400

0800a388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a38c:	4b03      	ldr	r3, [pc, #12]	; (800a39c <HAL_RCC_GetHCLKFreq+0x14>)
 800a38e:	681b      	ldr	r3, [r3, #0]
}
 800a390:	4618      	mov	r0, r3
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	20000184 	.word	0x20000184

0800a3a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a3a4:	f7ff fff0 	bl	800a388 <HAL_RCC_GetHCLKFreq>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	0adb      	lsrs	r3, r3, #11
 800a3b0:	f003 0307 	and.w	r3, r3, #7
 800a3b4:	4904      	ldr	r1, [pc, #16]	; (800a3c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a3b6:	5ccb      	ldrb	r3, [r1, r3]
 800a3b8:	f003 031f 	and.w	r3, r3, #31
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	40021000 	.word	0x40021000
 800a3c8:	08016b08 	.word	0x08016b08

0800a3cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	220f      	movs	r2, #15
 800a3da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a3dc:	4b12      	ldr	r3, [pc, #72]	; (800a428 <HAL_RCC_GetClockConfig+0x5c>)
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f003 0203 	and.w	r2, r3, #3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <HAL_RCC_GetClockConfig+0x5c>)
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <HAL_RCC_GetClockConfig+0x5c>)
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a400:	4b09      	ldr	r3, [pc, #36]	; (800a428 <HAL_RCC_GetClockConfig+0x5c>)
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	08db      	lsrs	r3, r3, #3
 800a406:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a40e:	4b07      	ldr	r3, [pc, #28]	; (800a42c <HAL_RCC_GetClockConfig+0x60>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 020f 	and.w	r2, r3, #15
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	601a      	str	r2, [r3, #0]
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	40021000 	.word	0x40021000
 800a42c:	40022000 	.word	0x40022000

0800a430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a43c:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a43e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a448:	f7ff f834 	bl	80094b4 <HAL_PWREx_GetVoltageRange>
 800a44c:	6178      	str	r0, [r7, #20]
 800a44e:	e014      	b.n	800a47a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a450:	4b22      	ldr	r3, [pc, #136]	; (800a4dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a454:	4a21      	ldr	r2, [pc, #132]	; (800a4dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a45a:	6593      	str	r3, [r2, #88]	; 0x58
 800a45c:	4b1f      	ldr	r3, [pc, #124]	; (800a4dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a468:	f7ff f824 	bl	80094b4 <HAL_PWREx_GetVoltageRange>
 800a46c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a46e:	4b1b      	ldr	r3, [pc, #108]	; (800a4dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a472:	4a1a      	ldr	r2, [pc, #104]	; (800a4dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a478:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a480:	d10b      	bne.n	800a49a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b80      	cmp	r3, #128	; 0x80
 800a486:	d913      	bls.n	800a4b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2ba0      	cmp	r3, #160	; 0xa0
 800a48c:	d902      	bls.n	800a494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a48e:	2302      	movs	r3, #2
 800a490:	613b      	str	r3, [r7, #16]
 800a492:	e00d      	b.n	800a4b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a494:	2301      	movs	r3, #1
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	e00a      	b.n	800a4b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b7f      	cmp	r3, #127	; 0x7f
 800a49e:	d902      	bls.n	800a4a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	e004      	b.n	800a4b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b70      	cmp	r3, #112	; 0x70
 800a4aa:	d101      	bne.n	800a4b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f023 020f 	bic.w	r2, r3, #15
 800a4b8:	4909      	ldr	r1, [pc, #36]	; (800a4e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d001      	beq.n	800a4d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	40021000 	.word	0x40021000
 800a4e0:	40022000 	.word	0x40022000

0800a4e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a4ea:	4b2d      	ldr	r3, [pc, #180]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d00b      	beq.n	800a512 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d825      	bhi.n	800a54c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d008      	beq.n	800a518 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d11f      	bne.n	800a54c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a50c:	4b25      	ldr	r3, [pc, #148]	; (800a5a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a50e:	613b      	str	r3, [r7, #16]
    break;
 800a510:	e01f      	b.n	800a552 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a514:	613b      	str	r3, [r7, #16]
    break;
 800a516:	e01c      	b.n	800a552 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a518:	4b21      	ldr	r3, [pc, #132]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0308 	and.w	r3, r3, #8
 800a520:	2b00      	cmp	r3, #0
 800a522:	d107      	bne.n	800a534 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a524:	4b1e      	ldr	r3, [pc, #120]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a52a:	0a1b      	lsrs	r3, r3, #8
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	617b      	str	r3, [r7, #20]
 800a532:	e005      	b.n	800a540 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a534:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	091b      	lsrs	r3, r3, #4
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a540:	4a19      	ldr	r2, [pc, #100]	; (800a5a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a548:	613b      	str	r3, [r7, #16]
    break;
 800a54a:	e002      	b.n	800a552 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	613b      	str	r3, [r7, #16]
    break;
 800a550:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a552:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	091b      	lsrs	r3, r3, #4
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	3301      	adds	r3, #1
 800a55e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	0a1b      	lsrs	r3, r3, #8
 800a566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	fb03 f202 	mul.w	r2, r3, r2
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	fbb2 f3f3 	udiv	r3, r2, r3
 800a576:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a578:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	0e5b      	lsrs	r3, r3, #25
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	3301      	adds	r3, #1
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a590:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a592:	683b      	ldr	r3, [r7, #0]
}
 800a594:	4618      	mov	r0, r3
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	40021000 	.word	0x40021000
 800a5a4:	00f42400 	.word	0x00f42400
 800a5a8:	08016b10 	.word	0x08016b10

0800a5ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d040      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5cc:	2b80      	cmp	r3, #128	; 0x80
 800a5ce:	d02a      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a5d0:	2b80      	cmp	r3, #128	; 0x80
 800a5d2:	d825      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a5d4:	2b60      	cmp	r3, #96	; 0x60
 800a5d6:	d026      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a5d8:	2b60      	cmp	r3, #96	; 0x60
 800a5da:	d821      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	d006      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a5e0:	2b40      	cmp	r3, #64	; 0x40
 800a5e2:	d81d      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d009      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	d010      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a5ec:	e018      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a5ee:	4b89      	ldr	r3, [pc, #548]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	4a88      	ldr	r2, [pc, #544]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a5f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a5fa:	e015      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3304      	adds	r3, #4
 800a600:	2100      	movs	r1, #0
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fb3e 	bl	800ac84 <RCCEx_PLLSAI1_Config>
 800a608:	4603      	mov	r3, r0
 800a60a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a60c:	e00c      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3320      	adds	r3, #32
 800a612:	2100      	movs	r1, #0
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fc29 	bl	800ae6c <RCCEx_PLLSAI2_Config>
 800a61a:	4603      	mov	r3, r0
 800a61c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a61e:	e003      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	74fb      	strb	r3, [r7, #19]
      break;
 800a624:	e000      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a626:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a628:	7cfb      	ldrb	r3, [r7, #19]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a62e:	4b79      	ldr	r3, [pc, #484]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a630:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a634:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63c:	4975      	ldr	r1, [pc, #468]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a644:	e001      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a646:	7cfb      	ldrb	r3, [r7, #19]
 800a648:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d047      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a65e:	d030      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a664:	d82a      	bhi.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a66a:	d02a      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a66c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a670:	d824      	bhi.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a676:	d008      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a67c:	d81e      	bhi.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a686:	d010      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a688:	e018      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a68a:	4b62      	ldr	r3, [pc, #392]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	4a61      	ldr	r2, [pc, #388]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a694:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a696:	e015      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3304      	adds	r3, #4
 800a69c:	2100      	movs	r1, #0
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 faf0 	bl	800ac84 <RCCEx_PLLSAI1_Config>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a6a8:	e00c      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3320      	adds	r3, #32
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 fbdb 	bl	800ae6c <RCCEx_PLLSAI2_Config>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a6ba:	e003      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	74fb      	strb	r3, [r7, #19]
      break;
 800a6c0:	e000      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a6c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6c4:	7cfb      	ldrb	r3, [r7, #19]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10b      	bne.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a6ca:	4b52      	ldr	r3, [pc, #328]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a6cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d8:	494e      	ldr	r1, [pc, #312]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a6e0:	e001      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e2:	7cfb      	ldrb	r3, [r7, #19]
 800a6e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 809f 	beq.w	800a832 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a6f8:	4b46      	ldr	r3, [pc, #280]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a708:	2300      	movs	r3, #0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00d      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a70e:	4b41      	ldr	r3, [pc, #260]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	4a40      	ldr	r2, [pc, #256]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a718:	6593      	str	r3, [r2, #88]	; 0x58
 800a71a:	4b3e      	ldr	r3, [pc, #248]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a71c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a722:	60bb      	str	r3, [r7, #8]
 800a724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a726:	2301      	movs	r3, #1
 800a728:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a72a:	4b3b      	ldr	r3, [pc, #236]	; (800a818 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a3a      	ldr	r2, [pc, #232]	; (800a818 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a736:	f7fa fbe9 	bl	8004f0c <HAL_GetTick>
 800a73a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a73c:	e009      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a73e:	f7fa fbe5 	bl	8004f0c <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d902      	bls.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	74fb      	strb	r3, [r7, #19]
        break;
 800a750:	e005      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a752:	4b31      	ldr	r3, [pc, #196]	; (800a818 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0ef      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a75e:	7cfb      	ldrb	r3, [r7, #19]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d15b      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a764:	4b2b      	ldr	r3, [pc, #172]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d01f      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d019      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a782:	4b24      	ldr	r3, [pc, #144]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a78e:	4b21      	ldr	r3, [pc, #132]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a794:	4a1f      	ldr	r2, [pc, #124]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a79a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a79e:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a4:	4a1b      	ldr	r2, [pc, #108]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a7a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a7ae:	4a19      	ldr	r2, [pc, #100]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d016      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c0:	f7fa fba4 	bl	8004f0c <HAL_GetTick>
 800a7c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7c6:	e00b      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7c8:	f7fa fba0 	bl	8004f0c <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d902      	bls.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	74fb      	strb	r3, [r7, #19]
            break;
 800a7de:	e006      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0ec      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a7ee:	7cfb      	ldrb	r3, [r7, #19]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10c      	bne.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7f4:	4b07      	ldr	r3, [pc, #28]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a804:	4903      	ldr	r1, [pc, #12]	; (800a814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a806:	4313      	orrs	r3, r2
 800a808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a80c:	e008      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a80e:	7cfb      	ldrb	r3, [r7, #19]
 800a810:	74bb      	strb	r3, [r7, #18]
 800a812:	e005      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a814:	40021000 	.word	0x40021000
 800a818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	7cfb      	ldrb	r3, [r7, #19]
 800a81e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a820:	7c7b      	ldrb	r3, [r7, #17]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d105      	bne.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a826:	4ba0      	ldr	r3, [pc, #640]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a82a:	4a9f      	ldr	r2, [pc, #636]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a82c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00a      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a83e:	4b9a      	ldr	r3, [pc, #616]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a844:	f023 0203 	bic.w	r2, r3, #3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84c:	4996      	ldr	r1, [pc, #600]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00a      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a860:	4b91      	ldr	r3, [pc, #580]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a866:	f023 020c 	bic.w	r2, r3, #12
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	498e      	ldr	r1, [pc, #568]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a870:	4313      	orrs	r3, r2
 800a872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0304 	and.w	r3, r3, #4
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00a      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a882:	4b89      	ldr	r3, [pc, #548]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a890:	4985      	ldr	r1, [pc, #532]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a892:	4313      	orrs	r3, r2
 800a894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0308 	and.w	r3, r3, #8
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00a      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a8a4:	4b80      	ldr	r3, [pc, #512]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8b2:	497d      	ldr	r1, [pc, #500]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0310 	and.w	r3, r3, #16
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a8c6:	4b78      	ldr	r3, [pc, #480]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d4:	4974      	ldr	r1, [pc, #464]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0320 	and.w	r3, r3, #32
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8e8:	4b6f      	ldr	r3, [pc, #444]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f6:	496c      	ldr	r1, [pc, #432]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a90a:	4b67      	ldr	r3, [pc, #412]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a918:	4963      	ldr	r1, [pc, #396]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a91a:	4313      	orrs	r3, r2
 800a91c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a92c:	4b5e      	ldr	r3, [pc, #376]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a93a:	495b      	ldr	r1, [pc, #364]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a94e:	4b56      	ldr	r3, [pc, #344]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95c:	4952      	ldr	r1, [pc, #328]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a970:	4b4d      	ldr	r3, [pc, #308]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97e:	494a      	ldr	r1, [pc, #296]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a980:	4313      	orrs	r3, r2
 800a982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a992:	4b45      	ldr	r3, [pc, #276]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a0:	4941      	ldr	r1, [pc, #260]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9b4:	4b3c      	ldr	r3, [pc, #240]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9ba:	f023 0203 	bic.w	r2, r3, #3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c2:	4939      	ldr	r1, [pc, #228]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d028      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9d6:	4b34      	ldr	r3, [pc, #208]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9e4:	4930      	ldr	r1, [pc, #192]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9f4:	d106      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a9f6:	4b2c      	ldr	r3, [pc, #176]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	4a2b      	ldr	r2, [pc, #172]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa00:	60d3      	str	r3, [r2, #12]
 800aa02:	e011      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa0c:	d10c      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3304      	adds	r3, #4
 800aa12:	2101      	movs	r1, #1
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 f935 	bl	800ac84 <RCCEx_PLLSAI1_Config>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800aa1e:	7cfb      	ldrb	r3, [r7, #19]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800aa24:	7cfb      	ldrb	r3, [r7, #19]
 800aa26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d04d      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa3c:	d108      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800aa3e:	4b1a      	ldr	r3, [pc, #104]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa44:	4a18      	ldr	r2, [pc, #96]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800aa4e:	e012      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800aa50:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa56:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800aa60:	4b11      	ldr	r3, [pc, #68]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa6e:	490e      	ldr	r1, [pc, #56]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa7e:	d106      	bne.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa80:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	4a08      	ldr	r2, [pc, #32]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa8a:	60d3      	str	r3, [r2, #12]
 800aa8c:	e020      	b.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa96:	d109      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aa98:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	4a02      	ldr	r2, [pc, #8]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aa9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaa2:	60d3      	str	r3, [r2, #12]
 800aaa4:	e014      	b.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800aaa6:	bf00      	nop
 800aaa8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aab4:	d10c      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3304      	adds	r3, #4
 800aaba:	2101      	movs	r1, #1
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f8e1 	bl	800ac84 <RCCEx_PLLSAI1_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800aac6:	7cfb      	ldrb	r3, [r7, #19]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800aacc:	7cfb      	ldrb	r3, [r7, #19]
 800aace:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d028      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aadc:	4b68      	ldr	r3, [pc, #416]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaea:	4965      	ldr	r1, [pc, #404]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aafa:	d106      	bne.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aafc:	4b60      	ldr	r3, [pc, #384]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	4a5f      	ldr	r2, [pc, #380]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab06:	60d3      	str	r3, [r2, #12]
 800ab08:	e011      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab12:	d10c      	bne.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3304      	adds	r3, #4
 800ab18:	2101      	movs	r1, #1
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f8b2 	bl	800ac84 <RCCEx_PLLSAI1_Config>
 800ab20:	4603      	mov	r3, r0
 800ab22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ab24:	7cfb      	ldrb	r3, [r7, #19]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800ab2a:	7cfb      	ldrb	r3, [r7, #19]
 800ab2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d01e      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab3a:	4b51      	ldr	r3, [pc, #324]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab4a:	494d      	ldr	r1, [pc, #308]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab5c:	d10c      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3304      	adds	r3, #4
 800ab62:	2102      	movs	r1, #2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 f88d 	bl	800ac84 <RCCEx_PLLSAI1_Config>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ab6e:	7cfb      	ldrb	r3, [r7, #19]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800ab74:	7cfb      	ldrb	r3, [r7, #19]
 800ab76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab84:	4b3e      	ldr	r3, [pc, #248]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab8a:	f023 0204 	bic.w	r2, r3, #4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab94:	493a      	ldr	r1, [pc, #232]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800aba8:	4b35      	ldr	r3, [pc, #212]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abae:	f023 0218 	bic.w	r2, r3, #24
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb8:	4931      	ldr	r1, [pc, #196]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d035      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800abcc:	4b2c      	ldr	r3, [pc, #176]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a2b      	ldr	r2, [pc, #172]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abd8:	f7fa f998 	bl	8004f0c <HAL_GetTick>
 800abdc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800abde:	e009      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800abe0:	f7fa f994 	bl	8004f0c <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b02      	cmp	r3, #2
 800abec:	d902      	bls.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	74fb      	strb	r3, [r7, #19]
        break;
 800abf2:	e005      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800abf4:	4b22      	ldr	r3, [pc, #136]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1ef      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800ac00:	7cfb      	ldrb	r3, [r7, #19]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d113      	bne.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800ac06:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac16:	491a      	ldr	r1, [pc, #104]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3320      	adds	r3, #32
 800ac22:	2102      	movs	r1, #2
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f921 	bl	800ae6c <RCCEx_PLLSAI2_Config>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800ac2e:	7cfb      	ldrb	r3, [r7, #19]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d017      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ac44:	4b0e      	ldr	r3, [pc, #56]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac54:	490a      	ldr	r1, [pc, #40]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac66:	d105      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	4a04      	ldr	r2, [pc, #16]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ac74:	7cbb      	ldrb	r3, [r7, #18]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	40021000 	.word	0x40021000

0800ac84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ac92:	4b72      	ldr	r3, [pc, #456]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00e      	beq.n	800acbc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ac9e:	4b6f      	ldr	r3, [pc, #444]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f003 0203 	and.w	r2, r3, #3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d103      	bne.n	800acb6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
       ||
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d142      	bne.n	800ad3c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	73fb      	strb	r3, [r7, #15]
 800acba:	e03f      	b.n	800ad3c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d018      	beq.n	800acf6 <RCCEx_PLLSAI1_Config+0x72>
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d825      	bhi.n	800ad14 <RCCEx_PLLSAI1_Config+0x90>
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d002      	beq.n	800acd2 <RCCEx_PLLSAI1_Config+0x4e>
 800accc:	2b02      	cmp	r3, #2
 800acce:	d009      	beq.n	800ace4 <RCCEx_PLLSAI1_Config+0x60>
 800acd0:	e020      	b.n	800ad14 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800acd2:	4b62      	ldr	r3, [pc, #392]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d11d      	bne.n	800ad1a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ace2:	e01a      	b.n	800ad1a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ace4:	4b5d      	ldr	r3, [pc, #372]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acec:	2b00      	cmp	r3, #0
 800acee:	d116      	bne.n	800ad1e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800acf4:	e013      	b.n	800ad1e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800acf6:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10f      	bne.n	800ad22 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ad02:	4b56      	ldr	r3, [pc, #344]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad12:	e006      	b.n	800ad22 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	73fb      	strb	r3, [r7, #15]
      break;
 800ad18:	e004      	b.n	800ad24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ad1a:	bf00      	nop
 800ad1c:	e002      	b.n	800ad24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ad1e:	bf00      	nop
 800ad20:	e000      	b.n	800ad24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ad22:	bf00      	nop
    }

    if(status == HAL_OK)
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d108      	bne.n	800ad3c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800ad2a:	4b4c      	ldr	r3, [pc, #304]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f023 0203 	bic.w	r2, r3, #3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4949      	ldr	r1, [pc, #292]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f040 8086 	bne.w	800ae50 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ad44:	4b45      	ldr	r3, [pc, #276]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a44      	ldr	r2, [pc, #272]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad50:	f7fa f8dc 	bl	8004f0c <HAL_GetTick>
 800ad54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ad56:	e009      	b.n	800ad6c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad58:	f7fa f8d8 	bl	8004f0c <HAL_GetTick>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d902      	bls.n	800ad6c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	73fb      	strb	r3, [r7, #15]
        break;
 800ad6a:	e005      	b.n	800ad78 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ad6c:	4b3b      	ldr	r3, [pc, #236]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1ef      	bne.n	800ad58 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d168      	bne.n	800ae50 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d113      	bne.n	800adac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ad84:	4b35      	ldr	r3, [pc, #212]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	4b35      	ldr	r3, [pc, #212]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	6892      	ldr	r2, [r2, #8]
 800ad90:	0211      	lsls	r1, r2, #8
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	68d2      	ldr	r2, [r2, #12]
 800ad96:	06d2      	lsls	r2, r2, #27
 800ad98:	4311      	orrs	r1, r2
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6852      	ldr	r2, [r2, #4]
 800ad9e:	3a01      	subs	r2, #1
 800ada0:	0112      	lsls	r2, r2, #4
 800ada2:	430a      	orrs	r2, r1
 800ada4:	492d      	ldr	r1, [pc, #180]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	610b      	str	r3, [r1, #16]
 800adaa:	e02d      	b.n	800ae08 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d115      	bne.n	800adde <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800adb2:	4b2a      	ldr	r3, [pc, #168]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800adb4:	691a      	ldr	r2, [r3, #16]
 800adb6:	4b2b      	ldr	r3, [pc, #172]	; (800ae64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800adb8:	4013      	ands	r3, r2
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	6892      	ldr	r2, [r2, #8]
 800adbe:	0211      	lsls	r1, r2, #8
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	6912      	ldr	r2, [r2, #16]
 800adc4:	0852      	lsrs	r2, r2, #1
 800adc6:	3a01      	subs	r2, #1
 800adc8:	0552      	lsls	r2, r2, #21
 800adca:	4311      	orrs	r1, r2
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	6852      	ldr	r2, [r2, #4]
 800add0:	3a01      	subs	r2, #1
 800add2:	0112      	lsls	r2, r2, #4
 800add4:	430a      	orrs	r2, r1
 800add6:	4921      	ldr	r1, [pc, #132]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800add8:	4313      	orrs	r3, r2
 800adda:	610b      	str	r3, [r1, #16]
 800addc:	e014      	b.n	800ae08 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800adde:	4b1f      	ldr	r3, [pc, #124]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ade0:	691a      	ldr	r2, [r3, #16]
 800ade2:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6892      	ldr	r2, [r2, #8]
 800adea:	0211      	lsls	r1, r2, #8
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6952      	ldr	r2, [r2, #20]
 800adf0:	0852      	lsrs	r2, r2, #1
 800adf2:	3a01      	subs	r2, #1
 800adf4:	0652      	lsls	r2, r2, #25
 800adf6:	4311      	orrs	r1, r2
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6852      	ldr	r2, [r2, #4]
 800adfc:	3a01      	subs	r2, #1
 800adfe:	0112      	lsls	r2, r2, #4
 800ae00:	430a      	orrs	r2, r1
 800ae02:	4916      	ldr	r1, [pc, #88]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ae08:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a13      	ldr	r2, [pc, #76]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae14:	f7fa f87a 	bl	8004f0c <HAL_GetTick>
 800ae18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae1a:	e009      	b.n	800ae30 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae1c:	f7fa f876 	bl	8004f0c <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d902      	bls.n	800ae30 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	73fb      	strb	r3, [r7, #15]
          break;
 800ae2e:	e005      	b.n	800ae3c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0ef      	beq.n	800ae1c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae44:	691a      	ldr	r2, [r3, #16]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	4904      	ldr	r1, [pc, #16]	; (800ae5c <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	07ff800f 	.word	0x07ff800f
 800ae64:	ff9f800f 	.word	0xff9f800f
 800ae68:	f9ff800f 	.word	0xf9ff800f

0800ae6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ae7a:	4b72      	ldr	r3, [pc, #456]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ae86:	4b6f      	ldr	r3, [pc, #444]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f003 0203 	and.w	r2, r3, #3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d103      	bne.n	800ae9e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
       ||
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d142      	bne.n	800af24 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	73fb      	strb	r3, [r7, #15]
 800aea2:	e03f      	b.n	800af24 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d018      	beq.n	800aede <RCCEx_PLLSAI2_Config+0x72>
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d825      	bhi.n	800aefc <RCCEx_PLLSAI2_Config+0x90>
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d002      	beq.n	800aeba <RCCEx_PLLSAI2_Config+0x4e>
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d009      	beq.n	800aecc <RCCEx_PLLSAI2_Config+0x60>
 800aeb8:	e020      	b.n	800aefc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aeba:	4b62      	ldr	r3, [pc, #392]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0302 	and.w	r3, r3, #2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d11d      	bne.n	800af02 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aeca:	e01a      	b.n	800af02 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aecc:	4b5d      	ldr	r3, [pc, #372]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d116      	bne.n	800af06 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aedc:	e013      	b.n	800af06 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aede:	4b59      	ldr	r3, [pc, #356]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10f      	bne.n	800af0a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aeea:	4b56      	ldr	r3, [pc, #344]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aefa:	e006      	b.n	800af0a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]
      break;
 800af00:	e004      	b.n	800af0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800af02:	bf00      	nop
 800af04:	e002      	b.n	800af0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800af06:	bf00      	nop
 800af08:	e000      	b.n	800af0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800af0a:	bf00      	nop
    }

    if(status == HAL_OK)
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d108      	bne.n	800af24 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800af12:	4b4c      	ldr	r3, [pc, #304]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	f023 0203 	bic.w	r2, r3, #3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4949      	ldr	r1, [pc, #292]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af20:	4313      	orrs	r3, r2
 800af22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f040 8086 	bne.w	800b038 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800af2c:	4b45      	ldr	r3, [pc, #276]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a44      	ldr	r2, [pc, #272]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af38:	f7f9 ffe8 	bl	8004f0c <HAL_GetTick>
 800af3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800af3e:	e009      	b.n	800af54 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800af40:	f7f9 ffe4 	bl	8004f0c <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d902      	bls.n	800af54 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	73fb      	strb	r3, [r7, #15]
        break;
 800af52:	e005      	b.n	800af60 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800af54:	4b3b      	ldr	r3, [pc, #236]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1ef      	bne.n	800af40 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d168      	bne.n	800b038 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d113      	bne.n	800af94 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800af6c:	4b35      	ldr	r3, [pc, #212]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af6e:	695a      	ldr	r2, [r3, #20]
 800af70:	4b35      	ldr	r3, [pc, #212]	; (800b048 <RCCEx_PLLSAI2_Config+0x1dc>)
 800af72:	4013      	ands	r3, r2
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6892      	ldr	r2, [r2, #8]
 800af78:	0211      	lsls	r1, r2, #8
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	68d2      	ldr	r2, [r2, #12]
 800af7e:	06d2      	lsls	r2, r2, #27
 800af80:	4311      	orrs	r1, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6852      	ldr	r2, [r2, #4]
 800af86:	3a01      	subs	r2, #1
 800af88:	0112      	lsls	r2, r2, #4
 800af8a:	430a      	orrs	r2, r1
 800af8c:	492d      	ldr	r1, [pc, #180]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	614b      	str	r3, [r1, #20]
 800af92:	e02d      	b.n	800aff0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d115      	bne.n	800afc6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800af9a:	4b2a      	ldr	r3, [pc, #168]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af9c:	695a      	ldr	r2, [r3, #20]
 800af9e:	4b2b      	ldr	r3, [pc, #172]	; (800b04c <RCCEx_PLLSAI2_Config+0x1e0>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6892      	ldr	r2, [r2, #8]
 800afa6:	0211      	lsls	r1, r2, #8
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6912      	ldr	r2, [r2, #16]
 800afac:	0852      	lsrs	r2, r2, #1
 800afae:	3a01      	subs	r2, #1
 800afb0:	0552      	lsls	r2, r2, #21
 800afb2:	4311      	orrs	r1, r2
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6852      	ldr	r2, [r2, #4]
 800afb8:	3a01      	subs	r2, #1
 800afba:	0112      	lsls	r2, r2, #4
 800afbc:	430a      	orrs	r2, r1
 800afbe:	4921      	ldr	r1, [pc, #132]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	614b      	str	r3, [r1, #20]
 800afc4:	e014      	b.n	800aff0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800afc6:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800afc8:	695a      	ldr	r2, [r3, #20]
 800afca:	4b21      	ldr	r3, [pc, #132]	; (800b050 <RCCEx_PLLSAI2_Config+0x1e4>)
 800afcc:	4013      	ands	r3, r2
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6892      	ldr	r2, [r2, #8]
 800afd2:	0211      	lsls	r1, r2, #8
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	6952      	ldr	r2, [r2, #20]
 800afd8:	0852      	lsrs	r2, r2, #1
 800afda:	3a01      	subs	r2, #1
 800afdc:	0652      	lsls	r2, r2, #25
 800afde:	4311      	orrs	r1, r2
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6852      	ldr	r2, [r2, #4]
 800afe4:	3a01      	subs	r2, #1
 800afe6:	0112      	lsls	r2, r2, #4
 800afe8:	430a      	orrs	r2, r1
 800afea:	4916      	ldr	r1, [pc, #88]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800afec:	4313      	orrs	r3, r2
 800afee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800aff0:	4b14      	ldr	r3, [pc, #80]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a13      	ldr	r2, [pc, #76]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800affa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800affc:	f7f9 ff86 	bl	8004f0c <HAL_GetTick>
 800b000:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b002:	e009      	b.n	800b018 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b004:	f7f9 ff82 	bl	8004f0c <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d902      	bls.n	800b018 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	73fb      	strb	r3, [r7, #15]
          break;
 800b016:	e005      	b.n	800b024 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b018:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0ef      	beq.n	800b004 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d106      	bne.n	800b038 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b02a:	4b06      	ldr	r3, [pc, #24]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b02c:	695a      	ldr	r2, [r3, #20]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	4904      	ldr	r1, [pc, #16]	; (800b044 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b034:	4313      	orrs	r3, r2
 800b036:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	40021000 	.word	0x40021000
 800b048:	07ff800f 	.word	0x07ff800f
 800b04c:	ff9f800f 	.word	0xff9f800f
 800b050:	f9ff800f 	.word	0xf9ff800f

0800b054 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d07f      	beq.n	800b166 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7f9 fc70 	bl	8004960 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b086:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	22ca      	movs	r2, #202	; 0xca
 800b096:	625a      	str	r2, [r3, #36]	; 0x24
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2253      	movs	r2, #83	; 0x53
 800b09e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fa65 	bl	800b570 <RTC_EnterInitMode>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d15a      	bne.n	800b166 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0c2:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6999      	ldr	r1, [r3, #24]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	689a      	ldr	r2, [r3, #8]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6912      	ldr	r2, [r2, #16]
 800b0ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6919      	ldr	r1, [r3, #16]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	041a      	lsls	r2, r3, #16
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b100:	4b1b      	ldr	r3, [pc, #108]	; (800b170 <HAL_RTC_Init+0x11c>)
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	430b      	orrs	r3, r1
 800b112:	4917      	ldr	r1, [pc, #92]	; (800b170 <HAL_RTC_Init+0x11c>)
 800b114:	4313      	orrs	r3, r2
 800b116:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fa5f 	bl	800b5dc <RTC_ExitInitMode>
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d11e      	bne.n	800b166 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b136:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6999      	ldr	r1, [r3, #24]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	22ff      	movs	r2, #255	; 0xff
 800b15c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800b166:	7bfb      	ldrb	r3, [r7, #15]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	40002800 	.word	0x40002800

0800b174 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_RTC_SetTime+0x1a>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e08b      	b.n	800b2a6 <HAL_RTC_SetTime+0x132>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2202      	movs	r2, #2
 800b19a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	22ca      	movs	r2, #202	; 0xca
 800b1a4:	625a      	str	r2, [r3, #36]	; 0x24
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2253      	movs	r2, #83	; 0x53
 800b1ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 f9de 	bl	800b570 <RTC_EnterInitMode>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b1b8:	7cfb      	ldrb	r3, [r7, #19]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d15e      	bne.n	800b27c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b1be:	4b3c      	ldr	r3, [pc, #240]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ca:	d057      	beq.n	800b27c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d125      	bne.n	800b21e <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b1d2:	4b37      	ldr	r3, [pc, #220]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 fa35 	bl	800b658 <RTC_ByteToBcd2>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 fa2e 	bl	800b658 <RTC_ByteToBcd2>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b200:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	789b      	ldrb	r3, [r3, #2]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fa26 	bl	800b658 <RTC_ByteToBcd2>
 800b20c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b20e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	78db      	ldrb	r3, [r3, #3]
 800b216:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b218:	4313      	orrs	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	e017      	b.n	800b24e <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b21e:	4b24      	ldr	r3, [pc, #144]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2200      	movs	r2, #0
 800b22e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	785b      	ldrb	r3, [r3, #1]
 800b23a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b23c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b242:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	78db      	ldrb	r3, [r3, #3]
 800b248:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b24a:	4313      	orrs	r3, r2
 800b24c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b24e:	4a18      	ldr	r2, [pc, #96]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b256:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b25a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b25c:	4b14      	ldr	r3, [pc, #80]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	4a13      	ldr	r2, [pc, #76]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b266:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b268:	4b11      	ldr	r3, [pc, #68]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b26a:	699a      	ldr	r2, [r3, #24]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	68d9      	ldr	r1, [r3, #12]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	430b      	orrs	r3, r1
 800b276:	490e      	ldr	r1, [pc, #56]	; (800b2b0 <HAL_RTC_SetTime+0x13c>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 f9ad 	bl	800b5dc <RTC_ExitInitMode>
 800b282:	4603      	mov	r3, r0
 800b284:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	22ff      	movs	r2, #255	; 0xff
 800b28c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b28e:	7cfb      	ldrb	r3, [r7, #19]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d103      	bne.n	800b29c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b2a4:	7cfb      	ldrb	r3, [r7, #19]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd90      	pop	{r4, r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	40002800 	.word	0x40002800

0800b2b4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b2c0:	4b2c      	ldr	r3, [pc, #176]	; (800b374 <HAL_RTC_GetTime+0xc0>)
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b2c8:	4b2a      	ldr	r3, [pc, #168]	; (800b374 <HAL_RTC_GetTime+0xc0>)
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d4:	d049      	beq.n	800b36a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b2d6:	4b27      	ldr	r3, [pc, #156]	; (800b374 <HAL_RTC_GetTime+0xc0>)
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b2e2:	4b24      	ldr	r3, [pc, #144]	; (800b374 <HAL_RTC_GetTime+0xc0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b2ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b2ee:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	0c1b      	lsrs	r3, r3, #16
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	0a1b      	lsrs	r3, r3, #8
 800b304:	b2db      	uxtb	r3, r3
 800b306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	0d9b      	lsrs	r3, r3, #22
 800b322:	b2db      	uxtb	r3, r3
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d11a      	bne.n	800b36a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 f9ad 	bl	800b698 <RTC_Bcd2ToByte>
 800b33e:	4603      	mov	r3, r0
 800b340:	461a      	mov	r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	785b      	ldrb	r3, [r3, #1]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f9a4 	bl	800b698 <RTC_Bcd2ToByte>
 800b350:	4603      	mov	r3, r0
 800b352:	461a      	mov	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	789b      	ldrb	r3, [r3, #2]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f99b 	bl	800b698 <RTC_Bcd2ToByte>
 800b362:	4603      	mov	r3, r0
 800b364:	461a      	mov	r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	40002800 	.word	0x40002800

0800b378 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d101      	bne.n	800b392 <HAL_RTC_SetDate+0x1a>
 800b38e:	2302      	movs	r3, #2
 800b390:	e074      	b.n	800b47c <HAL_RTC_SetDate+0x104>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10e      	bne.n	800b3c6 <HAL_RTC_SetDate+0x4e>
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	f003 0310 	and.w	r3, r3, #16
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d008      	beq.n	800b3c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	f023 0310 	bic.w	r3, r3, #16
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	330a      	adds	r3, #10
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d11c      	bne.n	800b406 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	78db      	ldrb	r3, [r3, #3]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f941 	bl	800b658 <RTC_ByteToBcd2>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 f93a 	bl	800b658 <RTC_ByteToBcd2>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b3e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	789b      	ldrb	r3, [r3, #2]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f932 	bl	800b658 <RTC_ByteToBcd2>
 800b3f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b3f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b400:	4313      	orrs	r3, r2
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	e00e      	b.n	800b424 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	78db      	ldrb	r3, [r3, #3]
 800b40a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	785b      	ldrb	r3, [r3, #1]
 800b410:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b412:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b418:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b420:	4313      	orrs	r3, r2
 800b422:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	22ca      	movs	r2, #202	; 0xca
 800b42a:	625a      	str	r2, [r3, #36]	; 0x24
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2253      	movs	r2, #83	; 0x53
 800b432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f000 f89b 	bl	800b570 <RTC_EnterInitMode>
 800b43a:	4603      	mov	r3, r0
 800b43c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b43e:	7cfb      	ldrb	r3, [r7, #19]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10b      	bne.n	800b45c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b444:	4a0f      	ldr	r2, [pc, #60]	; (800b484 <HAL_RTC_SetDate+0x10c>)
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b44c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b450:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 f8c2 	bl	800b5dc <RTC_ExitInitMode>
 800b458:	4603      	mov	r3, r0
 800b45a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	22ff      	movs	r2, #255	; 0xff
 800b462:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b464:	7cfb      	ldrb	r3, [r7, #19]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d103      	bne.n	800b472 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b47a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	371c      	adds	r7, #28
 800b480:	46bd      	mov	sp, r7
 800b482:	bd90      	pop	{r4, r7, pc}
 800b484:	40002800 	.word	0x40002800

0800b488 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b494:	4b22      	ldr	r3, [pc, #136]	; (800b520 <HAL_RTC_GetDate+0x98>)
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b49c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b4a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	0c1b      	lsrs	r3, r3, #16
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	0a1b      	lsrs	r3, r3, #8
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	f003 031f 	and.w	r3, r3, #31
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	0b5b      	lsrs	r3, r3, #13
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d11a      	bne.n	800b516 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	78db      	ldrb	r3, [r3, #3]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 f8d7 	bl	800b698 <RTC_Bcd2ToByte>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	785b      	ldrb	r3, [r3, #1]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f8ce 	bl	800b698 <RTC_Bcd2ToByte>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	461a      	mov	r2, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	789b      	ldrb	r3, [r3, #2]
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 f8c5 	bl	800b698 <RTC_Bcd2ToByte>
 800b50e:	4603      	mov	r3, r0
 800b510:	461a      	mov	r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	40002800 	.word	0x40002800

0800b524 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b53a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800b53c:	f7f9 fce6 	bl	8004f0c <HAL_GetTick>
 800b540:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b542:	e009      	b.n	800b558 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b544:	f7f9 fce2 	bl	8004f0c <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b552:	d901      	bls.n	800b558 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e007      	b.n	800b568 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0ee      	beq.n	800b544 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	d123      	bne.n	800b5d2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b598:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b59a:	f7f9 fcb7 	bl	8004f0c <HAL_GetTick>
 800b59e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b5a0:	e00d      	b.n	800b5be <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b5a2:	f7f9 fcb3 	bl	8004f0c <HAL_GetTick>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5b0:	d905      	bls.n	800b5be <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2203      	movs	r2, #3
 800b5ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <RTC_EnterInitMode+0x62>
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d1e7      	bne.n	800b5a2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	4a19      	ldr	r2, [pc, #100]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5f2:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b5f4:	4b17      	ldr	r3, [pc, #92]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	f003 0320 	and.w	r3, r3, #32
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10c      	bne.n	800b61a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff8f 	bl	800b524 <HAL_RTC_WaitForSynchro>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01e      	beq.n	800b64a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	73fb      	strb	r3, [r7, #15]
 800b618:	e017      	b.n	800b64a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b61a:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	4a0d      	ldr	r2, [pc, #52]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b620:	f023 0320 	bic.w	r3, r3, #32
 800b624:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff ff7c 	bl	800b524 <HAL_RTC_WaitForSynchro>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d005      	beq.n	800b63e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2203      	movs	r2, #3
 800b636:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b63e:	4b05      	ldr	r3, [pc, #20]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	4a04      	ldr	r2, [pc, #16]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b644:	f043 0320 	orr.w	r3, r3, #32
 800b648:	6193      	str	r3, [r2, #24]
  }

  return status;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	40002800 	.word	0x40002800

0800b658 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b66a:	e005      	b.n	800b678 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3301      	adds	r3, #1
 800b670:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	3b0a      	subs	r3, #10
 800b676:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	2b09      	cmp	r3, #9
 800b67c:	d8f6      	bhi.n	800b66c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	b2da      	uxtb	r2, r3
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	4313      	orrs	r3, r2
 800b68a:	b2db      	uxtb	r3, r3
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	091b      	lsrs	r3, r3, #4
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	0092      	lsls	r2, r2, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	f003 030f 	and.w	r3, r3, #15
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	4413      	add	r3, r2
 800b6be:	b2db      	uxtb	r3, r3
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e095      	b.n	800b80a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d108      	bne.n	800b6f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6ee:	d009      	beq.n	800b704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	61da      	str	r2, [r3, #28]
 800b6f6:	e005      	b.n	800b704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7f9 f95c 	bl	80049dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b73a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b744:	d902      	bls.n	800b74c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	e002      	b.n	800b752 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b750:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b75a:	d007      	beq.n	800b76c <HAL_SPI_Init+0xa0>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b764:	d002      	beq.n	800b76c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	f003 0302 	and.w	r3, r3, #2
 800b786:	431a      	orrs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	69db      	ldr	r3, [r3, #28]
 800b7a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ae:	ea42 0103 	orr.w	r1, r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	0c1b      	lsrs	r3, r3, #16
 800b7c8:	f003 0204 	and.w	r2, r3, #4
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	f003 0310 	and.w	r3, r3, #16
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7da:	f003 0308 	and.w	r3, r3, #8
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b7e8:	ea42 0103 	orr.w	r1, r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b088      	sub	sp, #32
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	603b      	str	r3, [r7, #0]
 800b81e:	4613      	mov	r3, r2
 800b820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d101      	bne.n	800b834 <HAL_SPI_Transmit+0x22>
 800b830:	2302      	movs	r3, #2
 800b832:	e158      	b.n	800bae6 <HAL_SPI_Transmit+0x2d4>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b83c:	f7f9 fb66 	bl	8004f0c <HAL_GetTick>
 800b840:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b842:	88fb      	ldrh	r3, [r7, #6]
 800b844:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d002      	beq.n	800b858 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b852:	2302      	movs	r3, #2
 800b854:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b856:	e13d      	b.n	800bad4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <HAL_SPI_Transmit+0x52>
 800b85e:	88fb      	ldrh	r3, [r7, #6]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d102      	bne.n	800b86a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b868:	e134      	b.n	800bad4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2203      	movs	r2, #3
 800b86e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	88fa      	ldrh	r2, [r7, #6]
 800b882:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	88fa      	ldrh	r2, [r7, #6]
 800b888:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b4:	d10f      	bne.n	800b8d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d007      	beq.n	800b8f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b8fc:	d94b      	bls.n	800b996 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <HAL_SPI_Transmit+0xfa>
 800b906:	8afb      	ldrh	r3, [r7, #22]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d13e      	bne.n	800b98a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b910:	881a      	ldrh	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91c:	1c9a      	adds	r2, r3, #2
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b926:	b29b      	uxth	r3, r3
 800b928:	3b01      	subs	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b930:	e02b      	b.n	800b98a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d112      	bne.n	800b966 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b944:	881a      	ldrh	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	1c9a      	adds	r2, r3, #2
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3b01      	subs	r3, #1
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b964:	e011      	b.n	800b98a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b966:	f7f9 fad1 	bl	8004f0c <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d803      	bhi.n	800b97e <HAL_SPI_Transmit+0x16c>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97c:	d102      	bne.n	800b984 <HAL_SPI_Transmit+0x172>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b988:	e0a4      	b.n	800bad4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b98e:	b29b      	uxth	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1ce      	bne.n	800b932 <HAL_SPI_Transmit+0x120>
 800b994:	e07c      	b.n	800ba90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <HAL_SPI_Transmit+0x192>
 800b99e:	8afb      	ldrh	r3, [r7, #22]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d170      	bne.n	800ba86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d912      	bls.n	800b9d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b2:	881a      	ldrh	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9be:	1c9a      	adds	r2, r3, #2
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	3b02      	subs	r3, #2
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b9d2:	e058      	b.n	800ba86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	330c      	adds	r3, #12
 800b9de:	7812      	ldrb	r2, [r2, #0]
 800b9e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b9fa:	e044      	b.n	800ba86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f003 0302 	and.w	r3, r3, #2
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d12b      	bne.n	800ba62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d912      	bls.n	800ba3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba18:	881a      	ldrh	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba24:	1c9a      	adds	r2, r3, #2
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3b02      	subs	r3, #2
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba38:	e025      	b.n	800ba86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	330c      	adds	r3, #12
 800ba44:	7812      	ldrb	r2, [r2, #0]
 800ba46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba60:	e011      	b.n	800ba86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba62:	f7f9 fa53 	bl	8004f0c <HAL_GetTick>
 800ba66:	4602      	mov	r2, r0
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d803      	bhi.n	800ba7a <HAL_SPI_Transmit+0x268>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba78:	d102      	bne.n	800ba80 <HAL_SPI_Transmit+0x26e>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba84:	e026      	b.n	800bad4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1b5      	bne.n	800b9fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fb5b 	bl	800c150 <SPI_EndRxTxTransaction>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2220      	movs	r2, #32
 800baa4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baae:	2300      	movs	r3, #0
 800bab0:	613b      	str	r3, [r7, #16]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	613b      	str	r3, [r7, #16]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	613b      	str	r3, [r7, #16]
 800bac2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	77fb      	strb	r3, [r7, #31]
 800bad0:	e000      	b.n	800bad4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bad2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bae4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3720      	adds	r7, #32
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b08a      	sub	sp, #40	; 0x28
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
 800bafa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bafc:	2301      	movs	r3, #1
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d101      	bne.n	800bb14 <HAL_SPI_TransmitReceive+0x26>
 800bb10:	2302      	movs	r3, #2
 800bb12:	e1fb      	b.n	800bf0c <HAL_SPI_TransmitReceive+0x41e>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb1c:	f7f9 f9f6 	bl	8004f0c <HAL_GetTick>
 800bb20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bb30:	887b      	ldrh	r3, [r7, #2]
 800bb32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bb34:	887b      	ldrh	r3, [r7, #2]
 800bb36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb38:	7efb      	ldrb	r3, [r7, #27]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d00e      	beq.n	800bb5c <HAL_SPI_TransmitReceive+0x6e>
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb44:	d106      	bne.n	800bb54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <HAL_SPI_TransmitReceive+0x66>
 800bb4e:	7efb      	ldrb	r3, [r7, #27]
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d003      	beq.n	800bb5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bb54:	2302      	movs	r3, #2
 800bb56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bb5a:	e1cd      	b.n	800bef8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d005      	beq.n	800bb6e <HAL_SPI_TransmitReceive+0x80>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <HAL_SPI_TransmitReceive+0x80>
 800bb68:	887b      	ldrh	r3, [r7, #2]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d103      	bne.n	800bb76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bb74:	e1c0      	b.n	800bef8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d003      	beq.n	800bb8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2205      	movs	r2, #5
 800bb86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	887a      	ldrh	r2, [r7, #2]
 800bb9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	887a      	ldrh	r2, [r7, #2]
 800bba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	887a      	ldrh	r2, [r7, #2]
 800bbb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	887a      	ldrh	r2, [r7, #2]
 800bbb6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bbcc:	d802      	bhi.n	800bbd4 <HAL_SPI_TransmitReceive+0xe6>
 800bbce:	8a3b      	ldrh	r3, [r7, #16]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d908      	bls.n	800bbe6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bbe2:	605a      	str	r2, [r3, #4]
 800bbe4:	e007      	b.n	800bbf6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbf4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc00:	2b40      	cmp	r3, #64	; 0x40
 800bc02:	d007      	beq.n	800bc14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc1c:	d97c      	bls.n	800bd18 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <HAL_SPI_TransmitReceive+0x13e>
 800bc26:	8a7b      	ldrh	r3, [r7, #18]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d169      	bne.n	800bd00 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc30:	881a      	ldrh	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3c:	1c9a      	adds	r2, r3, #2
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc50:	e056      	b.n	800bd00 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f003 0302 	and.w	r3, r3, #2
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d11b      	bne.n	800bc98 <HAL_SPI_TransmitReceive+0x1aa>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d016      	beq.n	800bc98 <HAL_SPI_TransmitReceive+0x1aa>
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d113      	bne.n	800bc98 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc74:	881a      	ldrh	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc80:	1c9a      	adds	r2, r3, #2
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d11c      	bne.n	800bce0 <HAL_SPI_TransmitReceive+0x1f2>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d016      	beq.n	800bce0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbc:	b292      	uxth	r2, r2
 800bcbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc4:	1c9a      	adds	r2, r3, #2
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bce0:	f7f9 f914 	bl	8004f0c <HAL_GetTick>
 800bce4:	4602      	mov	r2, r0
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d807      	bhi.n	800bd00 <HAL_SPI_TransmitReceive+0x212>
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf6:	d003      	beq.n	800bd00 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bcfe:	e0fb      	b.n	800bef8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1a3      	bne.n	800bc52 <HAL_SPI_TransmitReceive+0x164>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d19d      	bne.n	800bc52 <HAL_SPI_TransmitReceive+0x164>
 800bd16:	e0df      	b.n	800bed8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <HAL_SPI_TransmitReceive+0x23a>
 800bd20:	8a7b      	ldrh	r3, [r7, #18]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	f040 80cb 	bne.w	800bebe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d912      	bls.n	800bd58 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	881a      	ldrh	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	1c9a      	adds	r2, r3, #2
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3b02      	subs	r3, #2
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd56:	e0b2      	b.n	800bebe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	330c      	adds	r3, #12
 800bd62:	7812      	ldrb	r2, [r2, #0]
 800bd64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	3b01      	subs	r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd7e:	e09e      	b.n	800bebe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d134      	bne.n	800bdf8 <HAL_SPI_TransmitReceive+0x30a>
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d02f      	beq.n	800bdf8 <HAL_SPI_TransmitReceive+0x30a>
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d12c      	bne.n	800bdf8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d912      	bls.n	800bdce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdac:	881a      	ldrh	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb8:	1c9a      	adds	r2, r3, #2
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdcc:	e012      	b.n	800bdf4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	330c      	adds	r3, #12
 800bdd8:	7812      	ldrb	r2, [r2, #0]
 800bdda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b01      	cmp	r3, #1
 800be04:	d148      	bne.n	800be98 <HAL_SPI_TransmitReceive+0x3aa>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d042      	beq.n	800be98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be18:	b29b      	uxth	r3, r3
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d923      	bls.n	800be66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68da      	ldr	r2, [r3, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be28:	b292      	uxth	r2, r2
 800be2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be30:	1c9a      	adds	r2, r3, #2
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	3b02      	subs	r3, #2
 800be40:	b29a      	uxth	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be4e:	b29b      	uxth	r3, r3
 800be50:	2b01      	cmp	r3, #1
 800be52:	d81f      	bhi.n	800be94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be62:	605a      	str	r2, [r3, #4]
 800be64:	e016      	b.n	800be94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f103 020c 	add.w	r2, r3, #12
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	7812      	ldrb	r2, [r2, #0]
 800be74:	b2d2      	uxtb	r2, r2
 800be76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be88:	b29b      	uxth	r3, r3
 800be8a:	3b01      	subs	r3, #1
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be94:	2301      	movs	r3, #1
 800be96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800be98:	f7f9 f838 	bl	8004f0c <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d803      	bhi.n	800beb0 <HAL_SPI_TransmitReceive+0x3c2>
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d102      	bne.n	800beb6 <HAL_SPI_TransmitReceive+0x3c8>
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d103      	bne.n	800bebe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bebc:	e01c      	b.n	800bef8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f47f af5b 	bne.w	800bd80 <HAL_SPI_TransmitReceive+0x292>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f47f af54 	bne.w	800bd80 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bed8:	69fa      	ldr	r2, [r7, #28]
 800beda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 f937 	bl	800c150 <SPI_EndRxTxTransaction>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d006      	beq.n	800bef6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2220      	movs	r2, #32
 800bef2:	661a      	str	r2, [r3, #96]	; 0x60
 800bef4:	e000      	b.n	800bef8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800bef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bf08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3728      	adds	r7, #40	; 0x28
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	4613      	mov	r3, r2
 800bf22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bf24:	f7f8 fff2 	bl	8004f0c <HAL_GetTick>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	1a9b      	subs	r3, r3, r2
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	4413      	add	r3, r2
 800bf32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bf34:	f7f8 ffea 	bl	8004f0c <HAL_GetTick>
 800bf38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bf3a:	4b39      	ldr	r3, [pc, #228]	; (800c020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	015b      	lsls	r3, r3, #5
 800bf40:	0d1b      	lsrs	r3, r3, #20
 800bf42:	69fa      	ldr	r2, [r7, #28]
 800bf44:	fb02 f303 	mul.w	r3, r2, r3
 800bf48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf4a:	e054      	b.n	800bff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf52:	d050      	beq.n	800bff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf54:	f7f8 ffda 	bl	8004f0c <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	69fa      	ldr	r2, [r7, #28]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d902      	bls.n	800bf6a <SPI_WaitFlagStateUntilTimeout+0x56>
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d13d      	bne.n	800bfe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf82:	d111      	bne.n	800bfa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf8c:	d004      	beq.n	800bf98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf96:	d107      	bne.n	800bfa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfb0:	d10f      	bne.n	800bfd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e017      	b.n	800c016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bfec:	2300      	movs	r3, #0
 800bfee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	689a      	ldr	r2, [r3, #8]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4013      	ands	r3, r2
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	429a      	cmp	r2, r3
 800c004:	bf0c      	ite	eq
 800c006:	2301      	moveq	r3, #1
 800c008:	2300      	movne	r3, #0
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	429a      	cmp	r2, r3
 800c012:	d19b      	bne.n	800bf4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3720      	adds	r7, #32
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20000184 	.word	0x20000184

0800c024 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08a      	sub	sp, #40	; 0x28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c036:	f7f8 ff69 	bl	8004f0c <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	1a9b      	subs	r3, r3, r2
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	4413      	add	r3, r2
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c046:	f7f8 ff61 	bl	8004f0c <HAL_GetTick>
 800c04a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	330c      	adds	r3, #12
 800c052:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c054:	4b3d      	ldr	r3, [pc, #244]	; (800c14c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	00da      	lsls	r2, r3, #3
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	0d1b      	lsrs	r3, r3, #20
 800c064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c066:	fb02 f303 	mul.w	r3, r2, r3
 800c06a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c06c:	e060      	b.n	800c130 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c074:	d107      	bne.n	800c086 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d104      	bne.n	800c086 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	b2db      	uxtb	r3, r3
 800c082:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c084:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08c:	d050      	beq.n	800c130 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c08e:	f7f8 ff3d 	bl	8004f0c <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d902      	bls.n	800c0a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d13d      	bne.n	800c120 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c0b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0bc:	d111      	bne.n	800c0e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0c6:	d004      	beq.n	800c0d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0d0:	d107      	bne.n	800c0e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ea:	d10f      	bne.n	800c10c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c10a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e010      	b.n	800c142 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689a      	ldr	r2, [r3, #8]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	4013      	ands	r3, r2
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d196      	bne.n	800c06e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3728      	adds	r7, #40	; 0x28
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20000184 	.word	0x20000184

0800c150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2200      	movs	r2, #0
 800c164:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff ff5b 	bl	800c024 <SPI_WaitFifoStateUntilTimeout>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d007      	beq.n	800c184 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c178:	f043 0220 	orr.w	r2, r3, #32
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e027      	b.n	800c1d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2200      	movs	r2, #0
 800c18c:	2180      	movs	r1, #128	; 0x80
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f7ff fec0 	bl	800bf14 <SPI_WaitFlagStateUntilTimeout>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d007      	beq.n	800c1aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c19e:	f043 0220 	orr.w	r2, r3, #32
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e014      	b.n	800c1d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f7ff ff34 	bl	800c024 <SPI_WaitFifoStateUntilTimeout>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d007      	beq.n	800c1d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1c6:	f043 0220 	orr.w	r2, r3, #32
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e000      	b.n	800c1d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e049      	b.n	800c282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7f8 fc3e 	bl	8004a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3304      	adds	r3, #4
 800c218:	4619      	mov	r1, r3
 800c21a:	4610      	mov	r0, r2
 800c21c:	f000 fb1e 	bl	800c85c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d001      	beq.n	800c2a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e047      	b.n	800c334 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a23      	ldr	r2, [pc, #140]	; (800c340 <HAL_TIM_Base_Start+0xb4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d01d      	beq.n	800c2f2 <HAL_TIM_Base_Start+0x66>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2be:	d018      	beq.n	800c2f2 <HAL_TIM_Base_Start+0x66>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a1f      	ldr	r2, [pc, #124]	; (800c344 <HAL_TIM_Base_Start+0xb8>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d013      	beq.n	800c2f2 <HAL_TIM_Base_Start+0x66>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a1e      	ldr	r2, [pc, #120]	; (800c348 <HAL_TIM_Base_Start+0xbc>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00e      	beq.n	800c2f2 <HAL_TIM_Base_Start+0x66>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a1c      	ldr	r2, [pc, #112]	; (800c34c <HAL_TIM_Base_Start+0xc0>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d009      	beq.n	800c2f2 <HAL_TIM_Base_Start+0x66>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <HAL_TIM_Base_Start+0xc4>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d004      	beq.n	800c2f2 <HAL_TIM_Base_Start+0x66>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a19      	ldr	r2, [pc, #100]	; (800c354 <HAL_TIM_Base_Start+0xc8>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d115      	bne.n	800c31e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	689a      	ldr	r2, [r3, #8]
 800c2f8:	4b17      	ldr	r3, [pc, #92]	; (800c358 <HAL_TIM_Base_Start+0xcc>)
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b06      	cmp	r3, #6
 800c302:	d015      	beq.n	800c330 <HAL_TIM_Base_Start+0xa4>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c30a:	d011      	beq.n	800c330 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f042 0201 	orr.w	r2, r2, #1
 800c31a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c31c:	e008      	b.n	800c330 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f042 0201 	orr.w	r2, r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	e000      	b.n	800c332 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	40012c00 	.word	0x40012c00
 800c344:	40000400 	.word	0x40000400
 800c348:	40000800 	.word	0x40000800
 800c34c:	40000c00 	.word	0x40000c00
 800c350:	40013400 	.word	0x40013400
 800c354:	40014000 	.word	0x40014000
 800c358:	00010007 	.word	0x00010007

0800c35c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d001      	beq.n	800c374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	e04f      	b.n	800c414 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68da      	ldr	r2, [r3, #12]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f042 0201 	orr.w	r2, r2, #1
 800c38a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a23      	ldr	r2, [pc, #140]	; (800c420 <HAL_TIM_Base_Start_IT+0xc4>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d01d      	beq.n	800c3d2 <HAL_TIM_Base_Start_IT+0x76>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c39e:	d018      	beq.n	800c3d2 <HAL_TIM_Base_Start_IT+0x76>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a1f      	ldr	r2, [pc, #124]	; (800c424 <HAL_TIM_Base_Start_IT+0xc8>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d013      	beq.n	800c3d2 <HAL_TIM_Base_Start_IT+0x76>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a1e      	ldr	r2, [pc, #120]	; (800c428 <HAL_TIM_Base_Start_IT+0xcc>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d00e      	beq.n	800c3d2 <HAL_TIM_Base_Start_IT+0x76>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a1c      	ldr	r2, [pc, #112]	; (800c42c <HAL_TIM_Base_Start_IT+0xd0>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d009      	beq.n	800c3d2 <HAL_TIM_Base_Start_IT+0x76>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a1b      	ldr	r2, [pc, #108]	; (800c430 <HAL_TIM_Base_Start_IT+0xd4>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d004      	beq.n	800c3d2 <HAL_TIM_Base_Start_IT+0x76>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a19      	ldr	r2, [pc, #100]	; (800c434 <HAL_TIM_Base_Start_IT+0xd8>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d115      	bne.n	800c3fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689a      	ldr	r2, [r3, #8]
 800c3d8:	4b17      	ldr	r3, [pc, #92]	; (800c438 <HAL_TIM_Base_Start_IT+0xdc>)
 800c3da:	4013      	ands	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b06      	cmp	r3, #6
 800c3e2:	d015      	beq.n	800c410 <HAL_TIM_Base_Start_IT+0xb4>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ea:	d011      	beq.n	800c410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0201 	orr.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3fc:	e008      	b.n	800c410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f042 0201 	orr.w	r2, r2, #1
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e000      	b.n	800c412 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	40012c00 	.word	0x40012c00
 800c424:	40000400 	.word	0x40000400
 800c428:	40000800 	.word	0x40000800
 800c42c:	40000c00 	.word	0x40000c00
 800c430:	40013400 	.word	0x40013400
 800c434:	40014000 	.word	0x40014000
 800c438:	00010007 	.word	0x00010007

0800c43c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	f003 0302 	and.w	r3, r3, #2
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d122      	bne.n	800c498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d11b      	bne.n	800c498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f06f 0202 	mvn.w	r2, #2
 800c468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	f003 0303 	and.w	r3, r3, #3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f9ce 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c484:	e005      	b.n	800c492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f9c0 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f9d1 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	f003 0304 	and.w	r3, r3, #4
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	d122      	bne.n	800c4ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b04      	cmp	r3, #4
 800c4b2:	d11b      	bne.n	800c4ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f06f 0204 	mvn.w	r2, #4
 800c4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f9a4 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c4d8:	e005      	b.n	800c4e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f996 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f9a7 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	f003 0308 	and.w	r3, r3, #8
 800c4f6:	2b08      	cmp	r3, #8
 800c4f8:	d122      	bne.n	800c540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f003 0308 	and.w	r3, r3, #8
 800c504:	2b08      	cmp	r3, #8
 800c506:	d11b      	bne.n	800c540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f06f 0208 	mvn.w	r2, #8
 800c510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2204      	movs	r2, #4
 800c516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f97a 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c52c:	e005      	b.n	800c53a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f96c 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f97d 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	f003 0310 	and.w	r3, r3, #16
 800c54a:	2b10      	cmp	r3, #16
 800c54c:	d122      	bne.n	800c594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	f003 0310 	and.w	r3, r3, #16
 800c558:	2b10      	cmp	r3, #16
 800c55a:	d11b      	bne.n	800c594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f06f 0210 	mvn.w	r2, #16
 800c564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2208      	movs	r2, #8
 800c56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f950 	bl	800c820 <HAL_TIM_IC_CaptureCallback>
 800c580:	e005      	b.n	800c58e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f942 	bl	800c80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f953 	bl	800c834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d10e      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d107      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f06f 0201 	mvn.w	r2, #1
 800c5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7f7 fa6a 	bl	8003a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ca:	2b80      	cmp	r3, #128	; 0x80
 800c5cc:	d10e      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d8:	2b80      	cmp	r3, #128	; 0x80
 800c5da:	d107      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fafe 	bl	800cbe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5fa:	d10e      	bne.n	800c61a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c606:	2b80      	cmp	r3, #128	; 0x80
 800c608:	d107      	bne.n	800c61a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 faf1 	bl	800cbfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	d10e      	bne.n	800c646 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c632:	2b40      	cmp	r3, #64	; 0x40
 800c634:	d107      	bne.n	800c646 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f901 	bl	800c848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	f003 0320 	and.w	r3, r3, #32
 800c650:	2b20      	cmp	r3, #32
 800c652:	d10e      	bne.n	800c672 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	f003 0320 	and.w	r3, r3, #32
 800c65e:	2b20      	cmp	r3, #32
 800c660:	d107      	bne.n	800c672 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f06f 0220 	mvn.w	r2, #32
 800c66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fab1 	bl	800cbd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d101      	bne.n	800c696 <HAL_TIM_ConfigClockSource+0x1c>
 800c692:	2302      	movs	r3, #2
 800c694:	e0b6      	b.n	800c804 <HAL_TIM_ConfigClockSource+0x18a>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c6b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6d2:	d03e      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0xd8>
 800c6d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6d8:	f200 8087 	bhi.w	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6e0:	f000 8086 	beq.w	800c7f0 <HAL_TIM_ConfigClockSource+0x176>
 800c6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6e8:	d87f      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6ea:	2b70      	cmp	r3, #112	; 0x70
 800c6ec:	d01a      	beq.n	800c724 <HAL_TIM_ConfigClockSource+0xaa>
 800c6ee:	2b70      	cmp	r3, #112	; 0x70
 800c6f0:	d87b      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6f2:	2b60      	cmp	r3, #96	; 0x60
 800c6f4:	d050      	beq.n	800c798 <HAL_TIM_ConfigClockSource+0x11e>
 800c6f6:	2b60      	cmp	r3, #96	; 0x60
 800c6f8:	d877      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c6fa:	2b50      	cmp	r3, #80	; 0x50
 800c6fc:	d03c      	beq.n	800c778 <HAL_TIM_ConfigClockSource+0xfe>
 800c6fe:	2b50      	cmp	r3, #80	; 0x50
 800c700:	d873      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c702:	2b40      	cmp	r3, #64	; 0x40
 800c704:	d058      	beq.n	800c7b8 <HAL_TIM_ConfigClockSource+0x13e>
 800c706:	2b40      	cmp	r3, #64	; 0x40
 800c708:	d86f      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c70a:	2b30      	cmp	r3, #48	; 0x30
 800c70c:	d064      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c70e:	2b30      	cmp	r3, #48	; 0x30
 800c710:	d86b      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c712:	2b20      	cmp	r3, #32
 800c714:	d060      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c716:	2b20      	cmp	r3, #32
 800c718:	d867      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d05c      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c71e:	2b10      	cmp	r3, #16
 800c720:	d05a      	beq.n	800c7d8 <HAL_TIM_ConfigClockSource+0x15e>
 800c722:	e062      	b.n	800c7ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	6899      	ldr	r1, [r3, #8]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f000 f9a6 	bl	800ca84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c746:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	609a      	str	r2, [r3, #8]
      break;
 800c750:	e04f      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6818      	ldr	r0, [r3, #0]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	6899      	ldr	r1, [r3, #8]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	f000 f98f 	bl	800ca84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c774:	609a      	str	r2, [r3, #8]
      break;
 800c776:	e03c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	6859      	ldr	r1, [r3, #4]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	461a      	mov	r2, r3
 800c786:	f000 f903 	bl	800c990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2150      	movs	r1, #80	; 0x50
 800c790:	4618      	mov	r0, r3
 800c792:	f000 f95c 	bl	800ca4e <TIM_ITRx_SetConfig>
      break;
 800c796:	e02c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	6859      	ldr	r1, [r3, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f000 f922 	bl	800c9ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2160      	movs	r1, #96	; 0x60
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f94c 	bl	800ca4e <TIM_ITRx_SetConfig>
      break;
 800c7b6:	e01c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6818      	ldr	r0, [r3, #0]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	6859      	ldr	r1, [r3, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	f000 f8e3 	bl	800c990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2140      	movs	r1, #64	; 0x40
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 f93c 	bl	800ca4e <TIM_ITRx_SetConfig>
      break;
 800c7d6:	e00c      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	f000 f933 	bl	800ca4e <TIM_ITRx_SetConfig>
      break;
 800c7e8:	e003      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ee:	e000      	b.n	800c7f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c7f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c802:	7bfb      	ldrb	r3, [r7, #15]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a40      	ldr	r2, [pc, #256]	; (800c970 <TIM_Base_SetConfig+0x114>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d013      	beq.n	800c89c <TIM_Base_SetConfig+0x40>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c87a:	d00f      	beq.n	800c89c <TIM_Base_SetConfig+0x40>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a3d      	ldr	r2, [pc, #244]	; (800c974 <TIM_Base_SetConfig+0x118>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d00b      	beq.n	800c89c <TIM_Base_SetConfig+0x40>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a3c      	ldr	r2, [pc, #240]	; (800c978 <TIM_Base_SetConfig+0x11c>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d007      	beq.n	800c89c <TIM_Base_SetConfig+0x40>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a3b      	ldr	r2, [pc, #236]	; (800c97c <TIM_Base_SetConfig+0x120>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d003      	beq.n	800c89c <TIM_Base_SetConfig+0x40>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a3a      	ldr	r2, [pc, #232]	; (800c980 <TIM_Base_SetConfig+0x124>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d108      	bne.n	800c8ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a2f      	ldr	r2, [pc, #188]	; (800c970 <TIM_Base_SetConfig+0x114>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d01f      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8bc:	d01b      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a2c      	ldr	r2, [pc, #176]	; (800c974 <TIM_Base_SetConfig+0x118>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d017      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4a2b      	ldr	r2, [pc, #172]	; (800c978 <TIM_Base_SetConfig+0x11c>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d013      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a2a      	ldr	r2, [pc, #168]	; (800c97c <TIM_Base_SetConfig+0x120>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00f      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a29      	ldr	r2, [pc, #164]	; (800c980 <TIM_Base_SetConfig+0x124>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00b      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a28      	ldr	r2, [pc, #160]	; (800c984 <TIM_Base_SetConfig+0x128>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d007      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a27      	ldr	r2, [pc, #156]	; (800c988 <TIM_Base_SetConfig+0x12c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d003      	beq.n	800c8f6 <TIM_Base_SetConfig+0x9a>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a26      	ldr	r2, [pc, #152]	; (800c98c <TIM_Base_SetConfig+0x130>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d108      	bne.n	800c908 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	4313      	orrs	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	4313      	orrs	r3, r2
 800c914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	689a      	ldr	r2, [r3, #8]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a10      	ldr	r2, [pc, #64]	; (800c970 <TIM_Base_SetConfig+0x114>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d00f      	beq.n	800c954 <TIM_Base_SetConfig+0xf8>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a12      	ldr	r2, [pc, #72]	; (800c980 <TIM_Base_SetConfig+0x124>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d00b      	beq.n	800c954 <TIM_Base_SetConfig+0xf8>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a11      	ldr	r2, [pc, #68]	; (800c984 <TIM_Base_SetConfig+0x128>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d007      	beq.n	800c954 <TIM_Base_SetConfig+0xf8>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a10      	ldr	r2, [pc, #64]	; (800c988 <TIM_Base_SetConfig+0x12c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d003      	beq.n	800c954 <TIM_Base_SetConfig+0xf8>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a0f      	ldr	r2, [pc, #60]	; (800c98c <TIM_Base_SetConfig+0x130>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d103      	bne.n	800c95c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	691a      	ldr	r2, [r3, #16]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	615a      	str	r2, [r3, #20]
}
 800c962:	bf00      	nop
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	40012c00 	.word	0x40012c00
 800c974:	40000400 	.word	0x40000400
 800c978:	40000800 	.word	0x40000800
 800c97c:	40000c00 	.word	0x40000c00
 800c980:	40013400 	.word	0x40013400
 800c984:	40014000 	.word	0x40014000
 800c988:	40014400 	.word	0x40014400
 800c98c:	40014800 	.word	0x40014800

0800c990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	f023 0201 	bic.w	r2, r3, #1
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	011b      	lsls	r3, r3, #4
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f023 030a 	bic.w	r3, r3, #10
 800c9cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	693a      	ldr	r2, [r7, #16]
 800c9da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	621a      	str	r2, [r3, #32]
}
 800c9e2:	bf00      	nop
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b087      	sub	sp, #28
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	f023 0210 	bic.w	r2, r3, #16
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6a1b      	ldr	r3, [r3, #32]
 800ca10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	031b      	lsls	r3, r3, #12
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	011b      	lsls	r3, r3, #4
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	621a      	str	r2, [r3, #32]
}
 800ca42:	bf00      	nop
 800ca44:	371c      	adds	r7, #28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca4e:	b480      	push	{r7}
 800ca50:	b085      	sub	sp, #20
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	f043 0307 	orr.w	r3, r3, #7
 800ca70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	609a      	str	r2, [r3, #8]
}
 800ca78:	bf00      	nop
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b087      	sub	sp, #28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	021a      	lsls	r2, r3, #8
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	431a      	orrs	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	4313      	orrs	r3, r2
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	4313      	orrs	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	609a      	str	r2, [r3, #8]
}
 800cab8:	bf00      	nop
 800caba:	371c      	adds	r7, #28
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cad8:	2302      	movs	r3, #2
 800cada:	e068      	b.n	800cbae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2202      	movs	r2, #2
 800cae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a2e      	ldr	r2, [pc, #184]	; (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d004      	beq.n	800cb10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a2d      	ldr	r2, [pc, #180]	; (800cbc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d108      	bne.n	800cb22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a1e      	ldr	r2, [pc, #120]	; (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d01d      	beq.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb4e:	d018      	beq.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a1b      	ldr	r2, [pc, #108]	; (800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d013      	beq.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a1a      	ldr	r2, [pc, #104]	; (800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d00e      	beq.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a18      	ldr	r2, [pc, #96]	; (800cbcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d009      	beq.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a13      	ldr	r2, [pc, #76]	; (800cbc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d004      	beq.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a14      	ldr	r2, [pc, #80]	; (800cbd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d10c      	bne.n	800cb9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	40012c00 	.word	0x40012c00
 800cbc0:	40013400 	.word	0x40013400
 800cbc4:	40000400 	.word	0x40000400
 800cbc8:	40000800 	.word	0x40000800
 800cbcc:	40000c00 	.word	0x40000c00
 800cbd0:	40014000 	.word	0x40014000

0800cbd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc10:	b084      	sub	sp, #16
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b084      	sub	sp, #16
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	f107 001c 	add.w	r0, r7, #28
 800cc1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 faf6 	bl	800e220 <USB_CoreReset>
 800cc34:	4603      	mov	r3, r0
 800cc36:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800cc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d106      	bne.n	800cc4c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	639a      	str	r2, [r3, #56]	; 0x38
 800cc4a:	e005      	b.n	800cc58 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc64:	b004      	add	sp, #16
 800cc66:	4770      	bx	lr

0800cc68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b087      	sub	sp, #28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	4613      	mov	r3, r2
 800cc74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d165      	bne.n	800cd48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	4a3e      	ldr	r2, [pc, #248]	; (800cd78 <USB_SetTurnaroundTime+0x110>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d906      	bls.n	800cc92 <USB_SetTurnaroundTime+0x2a>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	4a3d      	ldr	r2, [pc, #244]	; (800cd7c <USB_SetTurnaroundTime+0x114>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d202      	bcs.n	800cc92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cc8c:	230f      	movs	r3, #15
 800cc8e:	617b      	str	r3, [r7, #20]
 800cc90:	e05c      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4a39      	ldr	r2, [pc, #228]	; (800cd7c <USB_SetTurnaroundTime+0x114>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d306      	bcc.n	800cca8 <USB_SetTurnaroundTime+0x40>
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	4a38      	ldr	r2, [pc, #224]	; (800cd80 <USB_SetTurnaroundTime+0x118>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d202      	bcs.n	800cca8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cca2:	230e      	movs	r3, #14
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e051      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	4a35      	ldr	r2, [pc, #212]	; (800cd80 <USB_SetTurnaroundTime+0x118>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d306      	bcc.n	800ccbe <USB_SetTurnaroundTime+0x56>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4a34      	ldr	r2, [pc, #208]	; (800cd84 <USB_SetTurnaroundTime+0x11c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d202      	bcs.n	800ccbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ccb8:	230d      	movs	r3, #13
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e046      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	4a30      	ldr	r2, [pc, #192]	; (800cd84 <USB_SetTurnaroundTime+0x11c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d306      	bcc.n	800ccd4 <USB_SetTurnaroundTime+0x6c>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	4a2f      	ldr	r2, [pc, #188]	; (800cd88 <USB_SetTurnaroundTime+0x120>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d802      	bhi.n	800ccd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ccce:	230c      	movs	r3, #12
 800ccd0:	617b      	str	r3, [r7, #20]
 800ccd2:	e03b      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	4a2c      	ldr	r2, [pc, #176]	; (800cd88 <USB_SetTurnaroundTime+0x120>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d906      	bls.n	800ccea <USB_SetTurnaroundTime+0x82>
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	4a2b      	ldr	r2, [pc, #172]	; (800cd8c <USB_SetTurnaroundTime+0x124>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d802      	bhi.n	800ccea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cce4:	230b      	movs	r3, #11
 800cce6:	617b      	str	r3, [r7, #20]
 800cce8:	e030      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	4a27      	ldr	r2, [pc, #156]	; (800cd8c <USB_SetTurnaroundTime+0x124>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d906      	bls.n	800cd00 <USB_SetTurnaroundTime+0x98>
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	4a26      	ldr	r2, [pc, #152]	; (800cd90 <USB_SetTurnaroundTime+0x128>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d802      	bhi.n	800cd00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ccfa:	230a      	movs	r3, #10
 800ccfc:	617b      	str	r3, [r7, #20]
 800ccfe:	e025      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	4a23      	ldr	r2, [pc, #140]	; (800cd90 <USB_SetTurnaroundTime+0x128>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d906      	bls.n	800cd16 <USB_SetTurnaroundTime+0xae>
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	4a22      	ldr	r2, [pc, #136]	; (800cd94 <USB_SetTurnaroundTime+0x12c>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d202      	bcs.n	800cd16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cd10:	2309      	movs	r3, #9
 800cd12:	617b      	str	r3, [r7, #20]
 800cd14:	e01a      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	4a1e      	ldr	r2, [pc, #120]	; (800cd94 <USB_SetTurnaroundTime+0x12c>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d306      	bcc.n	800cd2c <USB_SetTurnaroundTime+0xc4>
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	4a1d      	ldr	r2, [pc, #116]	; (800cd98 <USB_SetTurnaroundTime+0x130>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d802      	bhi.n	800cd2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cd26:	2308      	movs	r3, #8
 800cd28:	617b      	str	r3, [r7, #20]
 800cd2a:	e00f      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4a1a      	ldr	r2, [pc, #104]	; (800cd98 <USB_SetTurnaroundTime+0x130>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d906      	bls.n	800cd42 <USB_SetTurnaroundTime+0xda>
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	4a19      	ldr	r2, [pc, #100]	; (800cd9c <USB_SetTurnaroundTime+0x134>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d202      	bcs.n	800cd42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cd3c:	2307      	movs	r3, #7
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	e004      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cd42:	2306      	movs	r3, #6
 800cd44:	617b      	str	r3, [r7, #20]
 800cd46:	e001      	b.n	800cd4c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cd48:	2309      	movs	r3, #9
 800cd4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	68da      	ldr	r2, [r3, #12]
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	029b      	lsls	r3, r3, #10
 800cd60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cd64:	431a      	orrs	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	00d8acbf 	.word	0x00d8acbf
 800cd7c:	00e4e1c0 	.word	0x00e4e1c0
 800cd80:	00f42400 	.word	0x00f42400
 800cd84:	01067380 	.word	0x01067380
 800cd88:	011a499f 	.word	0x011a499f
 800cd8c:	01312cff 	.word	0x01312cff
 800cd90:	014ca43f 	.word	0x014ca43f
 800cd94:	016e3600 	.word	0x016e3600
 800cd98:	01a6ab1f 	.word	0x01a6ab1f
 800cd9c:	01e84800 	.word	0x01e84800

0800cda0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	f043 0201 	orr.w	r2, r3, #1
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f023 0201 	bic.w	r2, r3, #1
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d115      	bne.n	800ce32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce12:	2001      	movs	r0, #1
 800ce14:	f7f8 f886 	bl	8004f24 <HAL_Delay>
      ms++;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f001 f985 	bl	800e12e <USB_GetMode>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d01e      	beq.n	800ce68 <USB_SetCurrentMode+0x84>
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b31      	cmp	r3, #49	; 0x31
 800ce2e:	d9f0      	bls.n	800ce12 <USB_SetCurrentMode+0x2e>
 800ce30:	e01a      	b.n	800ce68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ce32:	78fb      	ldrb	r3, [r7, #3]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d115      	bne.n	800ce64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce44:	2001      	movs	r0, #1
 800ce46:	f7f8 f86d 	bl	8004f24 <HAL_Delay>
      ms++;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 f96c 	bl	800e12e <USB_GetMode>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <USB_SetCurrentMode+0x84>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b31      	cmp	r3, #49	; 0x31
 800ce60:	d9f0      	bls.n	800ce44 <USB_SetCurrentMode+0x60>
 800ce62:	e001      	b.n	800ce68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e005      	b.n	800ce74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b32      	cmp	r3, #50	; 0x32
 800ce6c:	d101      	bne.n	800ce72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b086      	sub	sp, #24
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ce8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ce96:	2300      	movs	r3, #0
 800ce98:	613b      	str	r3, [r7, #16]
 800ce9a:	e009      	b.n	800ceb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	3340      	adds	r3, #64	; 0x40
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	2200      	movs	r2, #0
 800cea8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	3301      	adds	r3, #1
 800ceae:	613b      	str	r3, [r7, #16]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	2b0e      	cmp	r3, #14
 800ceb4:	d9f2      	bls.n	800ce9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ceb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11c      	bne.n	800cef6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceca:	f043 0302 	orr.w	r3, r3, #2
 800cece:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	e005      	b.n	800cf02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf08:	461a      	mov	r2, r3
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf14:	4619      	mov	r1, r3
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	680b      	ldr	r3, [r1, #0]
 800cf20:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cf22:	2103      	movs	r1, #3
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f959 	bl	800d1dc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cf2a:	2110      	movs	r1, #16
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f8f1 	bl	800d114 <USB_FlushTxFifo>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f91d 	bl	800d17c <USB_FlushRxFifo>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf52:	461a      	mov	r2, r3
 800cf54:	2300      	movs	r3, #0
 800cf56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5e:	461a      	mov	r2, r3
 800cf60:	2300      	movs	r3, #0
 800cf62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf70:	2300      	movs	r3, #0
 800cf72:	613b      	str	r3, [r7, #16]
 800cf74:	e043      	b.n	800cffe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	015a      	lsls	r2, r3, #5
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf8c:	d118      	bne.n	800cfc0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10a      	bne.n	800cfaa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	015a      	lsls	r2, r3, #5
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cfa6:	6013      	str	r3, [r2, #0]
 800cfa8:	e013      	b.n	800cfd2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	015a      	lsls	r2, r3, #5
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cfbc:	6013      	str	r3, [r2, #0]
 800cfbe:	e008      	b.n	800cfd2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	015a      	lsls	r2, r3, #5
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfcc:	461a      	mov	r2, r3
 800cfce:	2300      	movs	r3, #0
 800cfd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	015a      	lsls	r2, r3, #5
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfde:	461a      	mov	r2, r3
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff0:	461a      	mov	r2, r3
 800cff2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	3301      	adds	r3, #1
 800cffc:	613b      	str	r3, [r7, #16]
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	429a      	cmp	r2, r3
 800d004:	d3b7      	bcc.n	800cf76 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d006:	2300      	movs	r3, #0
 800d008:	613b      	str	r3, [r7, #16]
 800d00a:	e043      	b.n	800d094 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d01e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d022:	d118      	bne.n	800d056 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d036:	461a      	mov	r2, r3
 800d038:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	e013      	b.n	800d068 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d04c:	461a      	mov	r2, r3
 800d04e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d052:	6013      	str	r3, [r2, #0]
 800d054:	e008      	b.n	800d068 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	015a      	lsls	r2, r3, #5
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	4413      	add	r3, r2
 800d05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d062:	461a      	mov	r2, r3
 800d064:	2300      	movs	r3, #0
 800d066:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d074:	461a      	mov	r2, r3
 800d076:	2300      	movs	r3, #0
 800d078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	015a      	lsls	r2, r3, #5
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	4413      	add	r3, r2
 800d082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d086:	461a      	mov	r2, r3
 800d088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d08c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	3301      	adds	r3, #1
 800d092:	613b      	str	r3, [r7, #16]
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d3b7      	bcc.n	800d00c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d0bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	f043 0210 	orr.w	r2, r3, #16
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	699a      	ldr	r2, [r3, #24]
 800d0ce:	4b10      	ldr	r3, [pc, #64]	; (800d110 <USB_DevInit+0x294>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d005      	beq.n	800d0e8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	f043 0208 	orr.w	r2, r3, #8
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d107      	bne.n	800d0fe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d0f6:	f043 0304 	orr.w	r3, r3, #4
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d10a:	b004      	add	sp, #16
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	803c3800 	.word	0x803c3800

0800d114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3301      	adds	r3, #1
 800d126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	4a13      	ldr	r2, [pc, #76]	; (800d178 <USB_FlushTxFifo+0x64>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d901      	bls.n	800d134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d130:	2303      	movs	r3, #3
 800d132:	e01b      	b.n	800d16c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	daf2      	bge.n	800d122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	019b      	lsls	r3, r3, #6
 800d144:	f043 0220 	orr.w	r2, r3, #32
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	3301      	adds	r3, #1
 800d150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	4a08      	ldr	r2, [pc, #32]	; (800d178 <USB_FlushTxFifo+0x64>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d901      	bls.n	800d15e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d15a:	2303      	movs	r3, #3
 800d15c:	e006      	b.n	800d16c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	f003 0320 	and.w	r3, r3, #32
 800d166:	2b20      	cmp	r3, #32
 800d168:	d0f0      	beq.n	800d14c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	00030d40 	.word	0x00030d40

0800d17c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3301      	adds	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	4a11      	ldr	r2, [pc, #68]	; (800d1d8 <USB_FlushRxFifo+0x5c>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d901      	bls.n	800d19a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d196:	2303      	movs	r3, #3
 800d198:	e018      	b.n	800d1cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	daf2      	bge.n	800d188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2210      	movs	r2, #16
 800d1aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	4a08      	ldr	r2, [pc, #32]	; (800d1d8 <USB_FlushRxFifo+0x5c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d901      	bls.n	800d1be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e006      	b.n	800d1cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	f003 0310 	and.w	r3, r3, #16
 800d1c6:	2b10      	cmp	r3, #16
 800d1c8:	d0f0      	beq.n	800d1ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	00030d40 	.word	0x00030d40

0800d1dc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	78fb      	ldrb	r3, [r7, #3]
 800d1f6:	68f9      	ldr	r1, [r7, #12]
 800d1f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d20e:	b480      	push	{r7}
 800d210:	b087      	sub	sp, #28
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	f003 0306 	and.w	r3, r3, #6
 800d226:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b02      	cmp	r3, #2
 800d22c:	d002      	beq.n	800d234 <USB_GetDevSpeed+0x26>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2b06      	cmp	r3, #6
 800d232:	d102      	bne.n	800d23a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d234:	2302      	movs	r3, #2
 800d236:	75fb      	strb	r3, [r7, #23]
 800d238:	e001      	b.n	800d23e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d23a:	230f      	movs	r3, #15
 800d23c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d240:	4618      	mov	r0, r3
 800d242:	371c      	adds	r7, #28
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	785b      	ldrb	r3, [r3, #1]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d13a      	bne.n	800d2de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d26e:	69da      	ldr	r2, [r3, #28]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f003 030f 	and.w	r3, r3, #15
 800d278:	2101      	movs	r1, #1
 800d27a:	fa01 f303 	lsl.w	r3, r1, r3
 800d27e:	b29b      	uxth	r3, r3
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d286:	4313      	orrs	r3, r2
 800d288:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d155      	bne.n	800d34c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	015a      	lsls	r2, r3, #5
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	791b      	ldrb	r3, [r3, #4]
 800d2ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d2bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	059b      	lsls	r3, r3, #22
 800d2c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	0151      	lsls	r1, r2, #5
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	440a      	add	r2, r1
 800d2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	e036      	b.n	800d34c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2e4:	69da      	ldr	r2, [r3, #28]
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f003 030f 	and.w	r3, r3, #15
 800d2ee:	2101      	movs	r1, #1
 800d2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d2f4:	041b      	lsls	r3, r3, #16
 800d2f6:	68f9      	ldr	r1, [r7, #12]
 800d2f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	015a      	lsls	r2, r3, #5
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	4413      	add	r3, r2
 800d308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d312:	2b00      	cmp	r3, #0
 800d314:	d11a      	bne.n	800d34c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	015a      	lsls	r2, r3, #5
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	4413      	add	r3, r2
 800d31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	791b      	ldrb	r3, [r3, #4]
 800d330:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d332:	430b      	orrs	r3, r1
 800d334:	4313      	orrs	r3, r2
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	0151      	lsls	r1, r2, #5
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	440a      	add	r2, r1
 800d33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d34a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3714      	adds	r7, #20
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
	...

0800d35c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	785b      	ldrb	r3, [r3, #1]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d161      	bne.n	800d43c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	015a      	lsls	r2, r3, #5
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	4413      	add	r3, r2
 800d380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d38a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d38e:	d11f      	bne.n	800d3d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	4413      	add	r3, r2
 800d398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	0151      	lsls	r1, r2, #5
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	440a      	add	r2, r1
 800d3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	015a      	lsls	r2, r3, #5
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	0151      	lsls	r1, r2, #5
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	440a      	add	r2, r1
 800d3c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	f003 030f 	and.w	r3, r3, #15
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	43db      	mvns	r3, r3
 800d3ea:	68f9      	ldr	r1, [r7, #12]
 800d3ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3fa:	69da      	ldr	r2, [r3, #28]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	f003 030f 	and.w	r3, r3, #15
 800d404:	2101      	movs	r1, #1
 800d406:	fa01 f303 	lsl.w	r3, r1, r3
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	43db      	mvns	r3, r3
 800d40e:	68f9      	ldr	r1, [r7, #12]
 800d410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d414:	4013      	ands	r3, r2
 800d416:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	015a      	lsls	r2, r3, #5
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	0159      	lsls	r1, r3, #5
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	440b      	add	r3, r1
 800d42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d432:	4619      	mov	r1, r3
 800d434:	4b35      	ldr	r3, [pc, #212]	; (800d50c <USB_DeactivateEndpoint+0x1b0>)
 800d436:	4013      	ands	r3, r2
 800d438:	600b      	str	r3, [r1, #0]
 800d43a:	e060      	b.n	800d4fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4413      	add	r3, r2
 800d444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d44e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d452:	d11f      	bne.n	800d494 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	015a      	lsls	r2, r3, #5
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	4413      	add	r3, r2
 800d45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	0151      	lsls	r1, r2, #5
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	440a      	add	r2, r1
 800d46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d46e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d472:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	015a      	lsls	r2, r3, #5
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	4413      	add	r3, r2
 800d47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	0151      	lsls	r1, r2, #5
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	440a      	add	r2, r1
 800d48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d48e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d49a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	f003 030f 	and.w	r3, r3, #15
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d4aa:	041b      	lsls	r3, r3, #16
 800d4ac:	43db      	mvns	r3, r3
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4be:	69da      	ldr	r2, [r3, #28]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 030f 	and.w	r3, r3, #15
 800d4c8:	2101      	movs	r1, #1
 800d4ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ce:	041b      	lsls	r3, r3, #16
 800d4d0:	43db      	mvns	r3, r3
 800d4d2:	68f9      	ldr	r1, [r7, #12]
 800d4d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4d8:	4013      	ands	r3, r2
 800d4da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	015a      	lsls	r2, r3, #5
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	0159      	lsls	r1, r3, #5
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	440b      	add	r3, r1
 800d4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4b05      	ldr	r3, [pc, #20]	; (800d510 <USB_DeactivateEndpoint+0x1b4>)
 800d4fa:	4013      	ands	r3, r2
 800d4fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	ec337800 	.word	0xec337800
 800d510:	eff37800 	.word	0xeff37800

0800d514 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	f040 810a 	bne.w	800d746 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d132      	bne.n	800d5a0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	4413      	add	r3, r2
 800d542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	0151      	lsls	r1, r2, #5
 800d54c:	697a      	ldr	r2, [r7, #20]
 800d54e:	440a      	add	r2, r1
 800d550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d55c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	4413      	add	r3, r2
 800d566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	0151      	lsls	r1, r2, #5
 800d570:	697a      	ldr	r2, [r7, #20]
 800d572:	440a      	add	r2, r1
 800d574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d57c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	015a      	lsls	r2, r3, #5
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	4413      	add	r3, r2
 800d586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	0151      	lsls	r1, r2, #5
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	440a      	add	r2, r1
 800d594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d598:	0cdb      	lsrs	r3, r3, #19
 800d59a:	04db      	lsls	r3, r3, #19
 800d59c:	6113      	str	r3, [r2, #16]
 800d59e:	e074      	b.n	800d68a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	015a      	lsls	r2, r3, #5
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	0151      	lsls	r1, r2, #5
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	440a      	add	r2, r1
 800d5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ba:	0cdb      	lsrs	r3, r3, #19
 800d5bc:	04db      	lsls	r3, r3, #19
 800d5be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	0151      	lsls	r1, r2, #5
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	440a      	add	r2, r1
 800d5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	6999      	ldr	r1, [r3, #24]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	440b      	add	r3, r1
 800d5fc:	1e59      	subs	r1, r3, #1
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	fbb1 f3f3 	udiv	r3, r1, r3
 800d606:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d608:	4b9e      	ldr	r3, [pc, #632]	; (800d884 <USB_EPStartXfer+0x370>)
 800d60a:	400b      	ands	r3, r1
 800d60c:	6939      	ldr	r1, [r7, #16]
 800d60e:	0148      	lsls	r0, r1, #5
 800d610:	6979      	ldr	r1, [r7, #20]
 800d612:	4401      	add	r1, r0
 800d614:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d618:	4313      	orrs	r3, r2
 800d61a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d632:	6939      	ldr	r1, [r7, #16]
 800d634:	0148      	lsls	r0, r1, #5
 800d636:	6979      	ldr	r1, [r7, #20]
 800d638:	4401      	add	r1, r0
 800d63a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d63e:	4313      	orrs	r3, r2
 800d640:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	791b      	ldrb	r3, [r3, #4]
 800d646:	2b01      	cmp	r3, #1
 800d648:	d11f      	bne.n	800d68a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	015a      	lsls	r2, r3, #5
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	4413      	add	r3, r2
 800d652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	0151      	lsls	r1, r2, #5
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	440a      	add	r2, r1
 800d660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d664:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d668:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	015a      	lsls	r2, r3, #5
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	4413      	add	r3, r2
 800d672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	693a      	ldr	r2, [r7, #16]
 800d67a:	0151      	lsls	r1, r2, #5
 800d67c:	697a      	ldr	r2, [r7, #20]
 800d67e:	440a      	add	r2, r1
 800d680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d688:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	015a      	lsls	r2, r3, #5
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	4413      	add	r3, r2
 800d692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	0151      	lsls	r1, r2, #5
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	440a      	add	r2, r1
 800d6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6a8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	791b      	ldrb	r3, [r3, #4]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d015      	beq.n	800d6de <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 8106 	beq.w	800d8c8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	f003 030f 	and.w	r3, r3, #15
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d6d2:	6979      	ldr	r1, [r7, #20]
 800d6d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	634b      	str	r3, [r1, #52]	; 0x34
 800d6dc:	e0f4      	b.n	800d8c8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d110      	bne.n	800d710 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	0151      	lsls	r1, r2, #5
 800d700:	697a      	ldr	r2, [r7, #20]
 800d702:	440a      	add	r2, r1
 800d704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	e00f      	b.n	800d730 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	015a      	lsls	r2, r3, #5
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	4413      	add	r3, r2
 800d718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	0151      	lsls	r1, r2, #5
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	440a      	add	r2, r1
 800d726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d72a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d72e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	6919      	ldr	r1, [r3, #16]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	781a      	ldrb	r2, [r3, #0]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 fa94 	bl	800dc6c <USB_WritePacket>
 800d744:	e0c0      	b.n	800d8c8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	015a      	lsls	r2, r3, #5
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	4413      	add	r3, r2
 800d74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	0151      	lsls	r1, r2, #5
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	440a      	add	r2, r1
 800d75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d760:	0cdb      	lsrs	r3, r3, #19
 800d762:	04db      	lsls	r3, r3, #19
 800d764:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	0151      	lsls	r1, r2, #5
 800d778:	697a      	ldr	r2, [r7, #20]
 800d77a:	440a      	add	r2, r1
 800d77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d788:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d123      	bne.n	800d7da <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	015a      	lsls	r2, r3, #5
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	4413      	add	r3, r2
 800d79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d79e:	691a      	ldr	r2, [r3, #16]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7a8:	6939      	ldr	r1, [r7, #16]
 800d7aa:	0148      	lsls	r0, r1, #5
 800d7ac:	6979      	ldr	r1, [r7, #20]
 800d7ae:	4401      	add	r1, r0
 800d7b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	015a      	lsls	r2, r3, #5
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	0151      	lsls	r1, r2, #5
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	440a      	add	r2, r1
 800d7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7d6:	6113      	str	r3, [r2, #16]
 800d7d8:	e037      	b.n	800d84a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	699a      	ldr	r2, [r3, #24]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	1e5a      	subs	r2, r3, #1
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ee:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	89fa      	ldrh	r2, [r7, #14]
 800d7f6:	fb03 f202 	mul.w	r2, r3, r2
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	015a      	lsls	r2, r3, #5
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	4413      	add	r3, r2
 800d806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80a:	691a      	ldr	r2, [r3, #16]
 800d80c:	89fb      	ldrh	r3, [r7, #14]
 800d80e:	04d9      	lsls	r1, r3, #19
 800d810:	4b1c      	ldr	r3, [pc, #112]	; (800d884 <USB_EPStartXfer+0x370>)
 800d812:	400b      	ands	r3, r1
 800d814:	6939      	ldr	r1, [r7, #16]
 800d816:	0148      	lsls	r0, r1, #5
 800d818:	6979      	ldr	r1, [r7, #20]
 800d81a:	4401      	add	r1, r0
 800d81c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d820:	4313      	orrs	r3, r2
 800d822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	015a      	lsls	r2, r3, #5
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d830:	691a      	ldr	r2, [r3, #16]
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d83a:	6939      	ldr	r1, [r7, #16]
 800d83c:	0148      	lsls	r0, r1, #5
 800d83e:	6979      	ldr	r1, [r7, #20]
 800d840:	4401      	add	r1, r0
 800d842:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d846:	4313      	orrs	r3, r2
 800d848:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	791b      	ldrb	r3, [r3, #4]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d12a      	bne.n	800d8a8 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d112      	bne.n	800d888 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	015a      	lsls	r2, r3, #5
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	4413      	add	r3, r2
 800d86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	0151      	lsls	r1, r2, #5
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	440a      	add	r2, r1
 800d878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d87c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d880:	6013      	str	r3, [r2, #0]
 800d882:	e011      	b.n	800d8a8 <USB_EPStartXfer+0x394>
 800d884:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	015a      	lsls	r2, r3, #5
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	4413      	add	r3, r2
 800d890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	0151      	lsls	r1, r2, #5
 800d89a:	697a      	ldr	r2, [r7, #20]
 800d89c:	440a      	add	r2, r1
 800d89e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	015a      	lsls	r2, r3, #5
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	0151      	lsls	r1, r2, #5
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	440a      	add	r2, r1
 800d8be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop

0800d8d4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	f040 80ab 	bne.w	800da48 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d132      	bne.n	800d960 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	015a      	lsls	r2, r3, #5
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4413      	add	r3, r2
 800d902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	0151      	lsls	r1, r2, #5
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	440a      	add	r2, r1
 800d910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d914:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d918:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d91c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	015a      	lsls	r2, r3, #5
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4413      	add	r3, r2
 800d926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	0151      	lsls	r1, r2, #5
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	440a      	add	r2, r1
 800d934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d93c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	015a      	lsls	r2, r3, #5
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	4413      	add	r3, r2
 800d946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	0151      	lsls	r1, r2, #5
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	440a      	add	r2, r1
 800d954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d958:	0cdb      	lsrs	r3, r3, #19
 800d95a:	04db      	lsls	r3, r3, #19
 800d95c:	6113      	str	r3, [r2, #16]
 800d95e:	e04e      	b.n	800d9fe <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	0151      	lsls	r1, r2, #5
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	440a      	add	r2, r1
 800d976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d97a:	0cdb      	lsrs	r3, r3, #19
 800d97c:	04db      	lsls	r3, r3, #19
 800d97e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	015a      	lsls	r2, r3, #5
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4413      	add	r3, r2
 800d988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	0151      	lsls	r1, r2, #5
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	440a      	add	r2, r1
 800d996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d99a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d99e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	699a      	ldr	r2, [r3, #24]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d903      	bls.n	800d9b8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	0151      	lsls	r1, r2, #5
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	440a      	add	r2, r1
 800d9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e4:	691a      	ldr	r2, [r3, #16]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9ee:	68b9      	ldr	r1, [r7, #8]
 800d9f0:	0148      	lsls	r0, r1, #5
 800d9f2:	68f9      	ldr	r1, [r7, #12]
 800d9f4:	4401      	add	r1, r0
 800d9f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	0151      	lsls	r1, r2, #5
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	440a      	add	r2, r1
 800da14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da1c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d071      	beq.n	800db0a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	2101      	movs	r1, #1
 800da38:	fa01 f303 	lsl.w	r3, r1, r3
 800da3c:	68f9      	ldr	r1, [r7, #12]
 800da3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da42:	4313      	orrs	r3, r2
 800da44:	634b      	str	r3, [r1, #52]	; 0x34
 800da46:	e060      	b.n	800db0a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	0151      	lsls	r1, r2, #5
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	440a      	add	r2, r1
 800da5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da62:	0cdb      	lsrs	r3, r3, #19
 800da64:	04db      	lsls	r3, r3, #19
 800da66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	015a      	lsls	r2, r3, #5
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	4413      	add	r3, r2
 800da70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	0151      	lsls	r1, r2, #5
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	440a      	add	r2, r1
 800da7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d003      	beq.n	800da9c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	68da      	ldr	r2, [r3, #12]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	68da      	ldr	r2, [r3, #12]
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	0151      	lsls	r1, r2, #5
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	440a      	add	r2, r1
 800daba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dabe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dac2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad0:	691a      	ldr	r2, [r3, #16]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dada:	68b9      	ldr	r1, [r7, #8]
 800dadc:	0148      	lsls	r0, r1, #5
 800dade:	68f9      	ldr	r1, [r7, #12]
 800dae0:	4401      	add	r1, r0
 800dae2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dae6:	4313      	orrs	r3, r2
 800dae8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	015a      	lsls	r2, r3, #5
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	0151      	lsls	r1, r2, #5
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	440a      	add	r2, r1
 800db00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db18:	b480      	push	{r7}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db22:	2300      	movs	r3, #0
 800db24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	785b      	ldrb	r3, [r3, #1]
 800db32:	2b01      	cmp	r3, #1
 800db34:	d14a      	bne.n	800dbcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db4e:	f040 8086 	bne.w	800dc5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	7812      	ldrb	r2, [r2, #0]
 800db66:	0151      	lsls	r1, r2, #5
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	440a      	add	r2, r1
 800db6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	015a      	lsls	r2, r3, #5
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	4413      	add	r3, r2
 800db80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	7812      	ldrb	r2, [r2, #0]
 800db8a:	0151      	lsls	r1, r2, #5
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	440a      	add	r2, r1
 800db90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3301      	adds	r3, #1
 800db9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f242 7210 	movw	r2, #10000	; 0x2710
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d902      	bls.n	800dbb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	75fb      	strb	r3, [r7, #23]
          break;
 800dbae:	e056      	b.n	800dc5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	015a      	lsls	r2, r3, #5
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbc8:	d0e7      	beq.n	800db9a <USB_EPStopXfer+0x82>
 800dbca:	e048      	b.n	800dc5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	015a      	lsls	r2, r3, #5
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbe4:	d13b      	bne.n	800dc5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	7812      	ldrb	r2, [r2, #0]
 800dbfa:	0151      	lsls	r1, r2, #5
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	440a      	add	r2, r1
 800dc00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	015a      	lsls	r2, r3, #5
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	4413      	add	r3, r2
 800dc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	7812      	ldrb	r2, [r2, #0]
 800dc1e:	0151      	lsls	r1, r2, #5
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	440a      	add	r2, r1
 800dc24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3301      	adds	r3, #1
 800dc32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f242 7210 	movw	r2, #10000	; 0x2710
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d902      	bls.n	800dc44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	75fb      	strb	r3, [r7, #23]
          break;
 800dc42:	e00c      	b.n	800dc5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc5c:	d0e7      	beq.n	800dc2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	371c      	adds	r7, #28
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b089      	sub	sp, #36	; 0x24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4611      	mov	r1, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	71fb      	strb	r3, [r7, #7]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800dc8a:	88bb      	ldrh	r3, [r7, #4]
 800dc8c:	3303      	adds	r3, #3
 800dc8e:	089b      	lsrs	r3, r3, #2
 800dc90:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800dc92:	2300      	movs	r3, #0
 800dc94:	61bb      	str	r3, [r7, #24]
 800dc96:	e018      	b.n	800dcca <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dc98:	79fb      	ldrb	r3, [r7, #7]
 800dc9a:	031a      	lsls	r2, r3, #12
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	4413      	add	r3, r2
 800dca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dca4:	461a      	mov	r2, r3
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	6013      	str	r3, [r2, #0]
    pSrc++;
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	61bb      	str	r3, [r7, #24]
 800dcca:	69ba      	ldr	r2, [r7, #24]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d3e2      	bcc.n	800dc98 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3724      	adds	r7, #36	; 0x24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b08b      	sub	sp, #44	; 0x2c
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	4613      	mov	r3, r2
 800dcec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dcf6:	88fb      	ldrh	r3, [r7, #6]
 800dcf8:	089b      	lsrs	r3, r3, #2
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dcfe:	88fb      	ldrh	r3, [r7, #6]
 800dd00:	f003 0303 	and.w	r3, r3, #3
 800dd04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dd06:	2300      	movs	r3, #0
 800dd08:	623b      	str	r3, [r7, #32]
 800dd0a:	e014      	b.n	800dd36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	601a      	str	r2, [r3, #0]
    pDest++;
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	3301      	adds	r3, #1
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	3301      	adds	r3, #1
 800dd28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dd30:	6a3b      	ldr	r3, [r7, #32]
 800dd32:	3301      	adds	r3, #1
 800dd34:	623b      	str	r3, [r7, #32]
 800dd36:	6a3a      	ldr	r2, [r7, #32]
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d3e6      	bcc.n	800dd0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dd3e:	8bfb      	ldrh	r3, [r7, #30]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d01e      	beq.n	800dd82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dd44:	2300      	movs	r3, #0
 800dd46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f107 0310 	add.w	r3, r7, #16
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dd58:	693a      	ldr	r2, [r7, #16]
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	00db      	lsls	r3, r3, #3
 800dd60:	fa22 f303 	lsr.w	r3, r2, r3
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	701a      	strb	r2, [r3, #0]
      i++;
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	623b      	str	r3, [r7, #32]
      pDest++;
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	3301      	adds	r3, #1
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dd76:	8bfb      	ldrh	r3, [r7, #30]
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dd7c:	8bfb      	ldrh	r3, [r7, #30]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1ea      	bne.n	800dd58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	372c      	adds	r7, #44	; 0x2c
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	785b      	ldrb	r3, [r3, #1]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d12c      	bne.n	800de06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	015a      	lsls	r2, r3, #5
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	db12      	blt.n	800dde4 <USB_EPSetStall+0x54>
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00f      	beq.n	800dde4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	015a      	lsls	r2, r3, #5
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	0151      	lsls	r1, r2, #5
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	440a      	add	r2, r1
 800ddda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dde2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	0151      	lsls	r1, r2, #5
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	440a      	add	r2, r1
 800ddfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	e02b      	b.n	800de5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	db12      	blt.n	800de3e <USB_EPSetStall+0xae>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00f      	beq.n	800de3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	4413      	add	r3, r2
 800de26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	0151      	lsls	r1, r2, #5
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	440a      	add	r2, r1
 800de34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	015a      	lsls	r2, r3, #5
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	4413      	add	r3, r2
 800de46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	0151      	lsls	r1, r2, #5
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	440a      	add	r2, r1
 800de54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	785b      	ldrb	r3, [r3, #1]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d128      	bne.n	800deda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dea6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	791b      	ldrb	r3, [r3, #4]
 800deac:	2b03      	cmp	r3, #3
 800deae:	d003      	beq.n	800deb8 <USB_EPClearStall+0x4c>
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	791b      	ldrb	r3, [r3, #4]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d138      	bne.n	800df2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	015a      	lsls	r2, r3, #5
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	0151      	lsls	r1, r2, #5
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	440a      	add	r2, r1
 800dece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ded2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	e027      	b.n	800df2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	015a      	lsls	r2, r3, #5
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	4413      	add	r3, r2
 800dee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	0151      	lsls	r1, r2, #5
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	440a      	add	r2, r1
 800def0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800def4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800def8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	791b      	ldrb	r3, [r3, #4]
 800defe:	2b03      	cmp	r3, #3
 800df00:	d003      	beq.n	800df0a <USB_EPClearStall+0x9e>
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	791b      	ldrb	r3, [r3, #4]
 800df06:	2b02      	cmp	r3, #2
 800df08:	d10f      	bne.n	800df2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	4413      	add	r3, r2
 800df12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	0151      	lsls	r1, r2, #5
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	440a      	add	r2, r1
 800df20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800df5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	78fb      	ldrb	r3, [r7, #3]
 800df66:	011b      	lsls	r3, r3, #4
 800df68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800df6c:	68f9      	ldr	r1, [r7, #12]
 800df6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df72:	4313      	orrs	r3, r2
 800df74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df9e:	f023 0303 	bic.w	r3, r3, #3
 800dfa2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	68fa      	ldr	r2, [r7, #12]
 800dfae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfb2:	f023 0302 	bic.w	r3, r3, #2
 800dfb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr

0800dfc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dfc6:	b480      	push	{r7}
 800dfc8:	b085      	sub	sp, #20
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dfe0:	f023 0303 	bic.w	r3, r3, #3
 800dfe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dff4:	f043 0302 	orr.w	r3, r3, #2
 800dff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	699b      	ldr	r3, [r3, #24]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	4013      	ands	r3, r2
 800e01e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e020:	68fb      	ldr	r3, [r7, #12]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3714      	adds	r7, #20
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e02e:	b480      	push	{r7}
 800e030:	b085      	sub	sp, #20
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e04a:	69db      	ldr	r3, [r3, #28]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	4013      	ands	r3, r2
 800e050:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	0c1b      	lsrs	r3, r3, #16
}
 800e056:	4618      	mov	r0, r3
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e07e:	69db      	ldr	r3, [r3, #28]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	4013      	ands	r3, r2
 800e084:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	b29b      	uxth	r3, r3
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3714      	adds	r7, #20
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e096:	b480      	push	{r7}
 800e098:	b085      	sub	sp, #20
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
 800e09e:	460b      	mov	r3, r1
 800e0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e0a6:	78fb      	ldrb	r3, [r7, #3]
 800e0a8:	015a      	lsls	r2, r3, #5
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e0c4:	68bb      	ldr	r3, [r7, #8]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e0d2:	b480      	push	{r7}
 800e0d4:	b087      	sub	sp, #28
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e0f6:	78fb      	ldrb	r3, [r7, #3]
 800e0f8:	f003 030f 	and.w	r3, r3, #15
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e102:	01db      	lsls	r3, r3, #7
 800e104:	b2db      	uxtb	r3, r3
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	4313      	orrs	r3, r2
 800e10a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e10c:	78fb      	ldrb	r3, [r7, #3]
 800e10e:	015a      	lsls	r2, r3, #5
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	4413      	add	r3, r2
 800e114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	4013      	ands	r3, r2
 800e11e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e120:	68bb      	ldr	r3, [r7, #8]
}
 800e122:	4618      	mov	r0, r3
 800e124:	371c      	adds	r7, #28
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e12e:	b480      	push	{r7}
 800e130:	b083      	sub	sp, #12
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	f003 0301 	and.w	r3, r3, #1
}
 800e13e:	4618      	mov	r0, r3
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e14a:	b480      	push	{r7}
 800e14c:	b085      	sub	sp, #20
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e164:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e168:	f023 0307 	bic.w	r3, r3, #7
 800e16c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e17c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	333c      	adds	r3, #60	; 0x3c
 800e1a2:	3304      	adds	r3, #4
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	4a1c      	ldr	r2, [pc, #112]	; (800e21c <USB_EP0_OutStart+0x8c>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d90a      	bls.n	800e1c6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1c0:	d101      	bne.n	800e1c6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e024      	b.n	800e210 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1f4:	f043 0318 	orr.w	r3, r3, #24
 800e1f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e208:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e20c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	4f54300a 	.word	0x4f54300a

0800e220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e228:	2300      	movs	r3, #0
 800e22a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	3301      	adds	r3, #1
 800e230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	4a13      	ldr	r2, [pc, #76]	; (800e284 <USB_CoreReset+0x64>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d901      	bls.n	800e23e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e23a:	2303      	movs	r3, #3
 800e23c:	e01b      	b.n	800e276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	daf2      	bge.n	800e22c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e246:	2300      	movs	r3, #0
 800e248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	691b      	ldr	r3, [r3, #16]
 800e24e:	f043 0201 	orr.w	r2, r3, #1
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	3301      	adds	r3, #1
 800e25a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4a09      	ldr	r2, [pc, #36]	; (800e284 <USB_CoreReset+0x64>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d901      	bls.n	800e268 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e264:	2303      	movs	r3, #3
 800e266:	e006      	b.n	800e276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	f003 0301 	and.w	r3, r3, #1
 800e270:	2b01      	cmp	r3, #1
 800e272:	d0f0      	beq.n	800e256 <USB_CoreReset+0x36>

  return HAL_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	00030d40 	.word	0x00030d40

0800e288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	460b      	mov	r3, r1
 800e292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e294:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e298:	f005 f89c 	bl	80133d4 <USBD_static_malloc>
 800e29c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d105      	bne.n	800e2b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e2ac:	2302      	movs	r3, #2
 800e2ae:	e066      	b.n	800e37e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	7c1b      	ldrb	r3, [r3, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d119      	bne.n	800e2f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e2c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	2181      	movs	r1, #129	; 0x81
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f004 fe6f 	bl	8012fac <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2d8:	2202      	movs	r2, #2
 800e2da:	2101      	movs	r1, #1
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f004 fe65 	bl	8012fac <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2210      	movs	r2, #16
 800e2ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e2f2:	e016      	b.n	800e322 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e2f4:	2340      	movs	r3, #64	; 0x40
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	2181      	movs	r1, #129	; 0x81
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f004 fe56 	bl	8012fac <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e306:	2340      	movs	r3, #64	; 0x40
 800e308:	2202      	movs	r2, #2
 800e30a:	2101      	movs	r1, #1
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f004 fe4d 	bl	8012fac <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2201      	movs	r2, #1
 800e316:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2210      	movs	r2, #16
 800e31e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e322:	2308      	movs	r3, #8
 800e324:	2203      	movs	r2, #3
 800e326:	2182      	movs	r1, #130	; 0x82
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f004 fe3f 	bl	8012fac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2201      	movs	r2, #1
 800e332:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2200      	movs	r2, #0
 800e344:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7c1b      	ldrb	r3, [r3, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d109      	bne.n	800e36c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e35e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e362:	2101      	movs	r1, #1
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f004 ff9b 	bl	80132a0 <USBD_LL_PrepareReceive>
 800e36a:	e007      	b.n	800e37c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e372:	2340      	movs	r3, #64	; 0x40
 800e374:	2101      	movs	r1, #1
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f004 ff92 	bl	80132a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b082      	sub	sp, #8
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	460b      	mov	r3, r1
 800e390:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e392:	2181      	movs	r1, #129	; 0x81
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f004 fe47 	bl	8013028 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f004 fe40 	bl	8013028 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e3b0:	2182      	movs	r1, #130	; 0x82
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f004 fe38 	bl	8013028 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00e      	beq.n	800e3f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f005 f804 	bl	80133f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e40c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e40e:	2300      	movs	r3, #0
 800e410:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e420:	2303      	movs	r3, #3
 800e422:	e0af      	b.n	800e584 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d03f      	beq.n	800e4b0 <USBD_CDC_Setup+0xb4>
 800e430:	2b20      	cmp	r3, #32
 800e432:	f040 809f 	bne.w	800e574 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	88db      	ldrh	r3, [r3, #6]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d02e      	beq.n	800e49c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	b25b      	sxtb	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	da16      	bge.n	800e476 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e454:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	88d2      	ldrh	r2, [r2, #6]
 800e45a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	88db      	ldrh	r3, [r3, #6]
 800e460:	2b07      	cmp	r3, #7
 800e462:	bf28      	it	cs
 800e464:	2307      	movcs	r3, #7
 800e466:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	89fa      	ldrh	r2, [r7, #14]
 800e46c:	4619      	mov	r1, r3
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f001 fb43 	bl	800fafa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e474:	e085      	b.n	800e582 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	785a      	ldrb	r2, [r3, #1]
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	88db      	ldrh	r3, [r3, #6]
 800e484:	b2da      	uxtb	r2, r3
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e48c:	6939      	ldr	r1, [r7, #16]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	461a      	mov	r2, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f001 fb5c 	bl	800fb52 <USBD_CtlPrepareRx>
      break;
 800e49a:	e072      	b.n	800e582 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	7850      	ldrb	r0, [r2, #1]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	6839      	ldr	r1, [r7, #0]
 800e4ac:	4798      	blx	r3
      break;
 800e4ae:	e068      	b.n	800e582 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	785b      	ldrb	r3, [r3, #1]
 800e4b4:	2b0b      	cmp	r3, #11
 800e4b6:	d852      	bhi.n	800e55e <USBD_CDC_Setup+0x162>
 800e4b8:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <USBD_CDC_Setup+0xc4>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e4f1 	.word	0x0800e4f1
 800e4c4:	0800e56d 	.word	0x0800e56d
 800e4c8:	0800e55f 	.word	0x0800e55f
 800e4cc:	0800e55f 	.word	0x0800e55f
 800e4d0:	0800e55f 	.word	0x0800e55f
 800e4d4:	0800e55f 	.word	0x0800e55f
 800e4d8:	0800e55f 	.word	0x0800e55f
 800e4dc:	0800e55f 	.word	0x0800e55f
 800e4e0:	0800e55f 	.word	0x0800e55f
 800e4e4:	0800e55f 	.word	0x0800e55f
 800e4e8:	0800e51b 	.word	0x0800e51b
 800e4ec:	0800e545 	.word	0x0800e545
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d107      	bne.n	800e50c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e4fc:	f107 030a 	add.w	r3, r7, #10
 800e500:	2202      	movs	r2, #2
 800e502:	4619      	mov	r1, r3
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f001 faf8 	bl	800fafa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e50a:	e032      	b.n	800e572 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f001 fa82 	bl	800fa18 <USBD_CtlError>
            ret = USBD_FAIL;
 800e514:	2303      	movs	r3, #3
 800e516:	75fb      	strb	r3, [r7, #23]
          break;
 800e518:	e02b      	b.n	800e572 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b03      	cmp	r3, #3
 800e524:	d107      	bne.n	800e536 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e526:	f107 030d 	add.w	r3, r7, #13
 800e52a:	2201      	movs	r2, #1
 800e52c:	4619      	mov	r1, r3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f001 fae3 	bl	800fafa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e534:	e01d      	b.n	800e572 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e536:	6839      	ldr	r1, [r7, #0]
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f001 fa6d 	bl	800fa18 <USBD_CtlError>
            ret = USBD_FAIL;
 800e53e:	2303      	movs	r3, #3
 800e540:	75fb      	strb	r3, [r7, #23]
          break;
 800e542:	e016      	b.n	800e572 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b03      	cmp	r3, #3
 800e54e:	d00f      	beq.n	800e570 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f001 fa60 	bl	800fa18 <USBD_CtlError>
            ret = USBD_FAIL;
 800e558:	2303      	movs	r3, #3
 800e55a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e55c:	e008      	b.n	800e570 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e55e:	6839      	ldr	r1, [r7, #0]
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f001 fa59 	bl	800fa18 <USBD_CtlError>
          ret = USBD_FAIL;
 800e566:	2303      	movs	r3, #3
 800e568:	75fb      	strb	r3, [r7, #23]
          break;
 800e56a:	e002      	b.n	800e572 <USBD_CDC_Setup+0x176>
          break;
 800e56c:	bf00      	nop
 800e56e:	e008      	b.n	800e582 <USBD_CDC_Setup+0x186>
          break;
 800e570:	bf00      	nop
      }
      break;
 800e572:	e006      	b.n	800e582 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e574:	6839      	ldr	r1, [r7, #0]
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f001 fa4e 	bl	800fa18 <USBD_CtlError>
      ret = USBD_FAIL;
 800e57c:	2303      	movs	r3, #3
 800e57e:	75fb      	strb	r3, [r7, #23]
      break;
 800e580:	bf00      	nop
  }

  return (uint8_t)ret;
 800e582:	7dfb      	ldrb	r3, [r7, #23]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e59e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	e04f      	b.n	800e64e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e5b6:	78fa      	ldrb	r2, [r7, #3]
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	440b      	add	r3, r1
 800e5c4:	3318      	adds	r3, #24
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d029      	beq.n	800e620 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e5cc:	78fa      	ldrb	r2, [r7, #3]
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	440b      	add	r3, r1
 800e5da:	3318      	adds	r3, #24
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	78f9      	ldrb	r1, [r7, #3]
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	440b      	add	r3, r1
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4403      	add	r3, r0
 800e5ec:	3348      	adds	r3, #72	; 0x48
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e5f4:	fb01 f303 	mul.w	r3, r1, r3
 800e5f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d110      	bne.n	800e620 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e5fe:	78fa      	ldrb	r2, [r7, #3]
 800e600:	6879      	ldr	r1, [r7, #4]
 800e602:	4613      	mov	r3, r2
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	4413      	add	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	440b      	add	r3, r1
 800e60c:	3318      	adds	r3, #24
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e612:	78f9      	ldrb	r1, [r7, #3]
 800e614:	2300      	movs	r3, #0
 800e616:	2200      	movs	r2, #0
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f004 fe09 	bl	8013230 <USBD_LL_Transmit>
 800e61e:	e015      	b.n	800e64c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2200      	movs	r2, #0
 800e624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00b      	beq.n	800e64c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e648:	78fa      	ldrb	r2, [r7, #3]
 800e64a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b084      	sub	sp, #16
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	460b      	mov	r3, r1
 800e660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e668:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e674:	2303      	movs	r3, #3
 800e676:	e015      	b.n	800e6a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e678:	78fb      	ldrb	r3, [r7, #3]
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f004 fe47 	bl	8013310 <USBD_LL_GetRxDataSize>
 800e682:	4602      	mov	r2, r0
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e69e:	4611      	mov	r1, r2
 800e6a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e6c2:	2303      	movs	r3, #3
 800e6c4:	e01b      	b.n	800e6fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d015      	beq.n	800e6fc <USBD_CDC_EP0_RxReady+0x50>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e6d6:	2bff      	cmp	r3, #255	; 0xff
 800e6d8:	d010      	beq.n	800e6fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	68fa      	ldr	r2, [r7, #12]
 800e6e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e6e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e6f0:	b292      	uxth	r2, r2
 800e6f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	22ff      	movs	r2, #255	; 0xff
 800e6f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
	...

0800e708 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2243      	movs	r2, #67	; 0x43
 800e714:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e716:	4b03      	ldr	r3, [pc, #12]	; (800e724 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000218 	.word	0x20000218

0800e728 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2243      	movs	r2, #67	; 0x43
 800e734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e736:	4b03      	ldr	r3, [pc, #12]	; (800e744 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	200001d4 	.word	0x200001d4

0800e748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2243      	movs	r2, #67	; 0x43
 800e754:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e756:	4b03      	ldr	r3, [pc, #12]	; (800e764 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e758:	4618      	mov	r0, r3
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	2000025c 	.word	0x2000025c

0800e768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	220a      	movs	r2, #10
 800e774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e776:	4b03      	ldr	r3, [pc, #12]	; (800e784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e778:	4618      	mov	r0, r3
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	20000190 	.word	0x20000190

0800e788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d101      	bne.n	800e79c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e798:	2303      	movs	r3, #3
 800e79a:	e004      	b.n	800e7a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b087      	sub	sp, #28
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	60f8      	str	r0, [r7, #12]
 800e7ba:	60b9      	str	r1, [r7, #8]
 800e7bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e008      	b.n	800e7e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr

0800e7ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e7ee:	b480      	push	{r7}
 800e7f0:	b085      	sub	sp, #20
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e806:	2303      	movs	r3, #3
 800e808:	e004      	b.n	800e814 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e82e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e830:	2301      	movs	r3, #1
 800e832:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d101      	bne.n	800e842 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e83e:	2303      	movs	r3, #3
 800e840:	e01a      	b.n	800e878 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d114      	bne.n	800e876 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2201      	movs	r2, #1
 800e850:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e86a:	2181      	movs	r1, #129	; 0x81
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f004 fcdf 	bl	8013230 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e872:	2300      	movs	r3, #0
 800e874:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e876:	7bfb      	ldrb	r3, [r7, #15]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3710      	adds	r7, #16
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e88e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e89a:	2303      	movs	r3, #3
 800e89c:	e016      	b.n	800e8cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7c1b      	ldrb	r3, [r3, #16]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d109      	bne.n	800e8ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f004 fcf4 	bl	80132a0 <USBD_LL_PrepareReceive>
 800e8b8:	e007      	b.n	800e8ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8c0:	2340      	movs	r3, #64	; 0x40
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f004 fceb 	bl	80132a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e01f      	b.n	800e92c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	79fa      	ldrb	r2, [r7, #7]
 800e91e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f004 fac7 	bl	8012eb4 <USBD_LL_Init>
 800e926:	4603      	mov	r3, r0
 800e928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d101      	bne.n	800e94c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e948:	2303      	movs	r3, #3
 800e94a:	e016      	b.n	800e97a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00b      	beq.n	800e978 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e968:	f107 020e 	add.w	r2, r7, #14
 800e96c:	4610      	mov	r0, r2
 800e96e:	4798      	blx	r3
 800e970:	4602      	mov	r2, r0
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b082      	sub	sp, #8
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f004 fadc 	bl	8012f48 <USBD_LL_Start>
 800e990:	4603      	mov	r3, r0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e99a:	b480      	push	{r7}
 800e99c:	b083      	sub	sp, #12
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d009      	beq.n	800e9de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	78fa      	ldrb	r2, [r7, #3]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	4798      	blx	r3
 800e9da:	4603      	mov	r3, r0
 800e9dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	78fa      	ldrb	r2, [r7, #3]
 800ea08:	4611      	mov	r1, r2
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
  }

  return USBD_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f000 ffba 	bl	800f9a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ea3e:	461a      	mov	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea4c:	f003 031f 	and.w	r3, r3, #31
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d01a      	beq.n	800ea8a <USBD_LL_SetupStage+0x72>
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d822      	bhi.n	800ea9e <USBD_LL_SetupStage+0x86>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <USBD_LL_SetupStage+0x4a>
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d00a      	beq.n	800ea76 <USBD_LL_SetupStage+0x5e>
 800ea60:	e01d      	b.n	800ea9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 fa62 	bl	800ef34 <USBD_StdDevReq>
 800ea70:	4603      	mov	r3, r0
 800ea72:	73fb      	strb	r3, [r7, #15]
      break;
 800ea74:	e020      	b.n	800eab8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fac6 	bl	800f010 <USBD_StdItfReq>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
      break;
 800ea88:	e016      	b.n	800eab8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 fb05 	bl	800f0a2 <USBD_StdEPReq>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea9c:	e00c      	b.n	800eab8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eaa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f004 faf1 	bl	8013094 <USBD_LL_StallEP>
 800eab2:	4603      	mov	r3, r0
 800eab4:	73fb      	strb	r3, [r7, #15]
      break;
 800eab6:	bf00      	nop
  }

  return ret;
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b086      	sub	sp, #24
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	60f8      	str	r0, [r7, #12]
 800eaca:	460b      	mov	r3, r1
 800eacc:	607a      	str	r2, [r7, #4]
 800eace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ead0:	7afb      	ldrb	r3, [r7, #11]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d138      	bne.n	800eb48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eadc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eae4:	2b03      	cmp	r3, #3
 800eae6:	d14a      	bne.n	800eb7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	689a      	ldr	r2, [r3, #8]
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d913      	bls.n	800eb1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	689a      	ldr	r2, [r3, #8]
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	1ad2      	subs	r2, r2, r3
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	68da      	ldr	r2, [r3, #12]
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	bf28      	it	cs
 800eb0e:	4613      	movcs	r3, r2
 800eb10:	461a      	mov	r2, r3
 800eb12:	6879      	ldr	r1, [r7, #4]
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f001 f839 	bl	800fb8c <USBD_CtlContinueRx>
 800eb1a:	e030      	b.n	800eb7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b03      	cmp	r3, #3
 800eb26:	d10b      	bne.n	800eb40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d005      	beq.n	800eb40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f001 f834 	bl	800fbae <USBD_CtlSendStatus>
 800eb46:	e01a      	b.n	800eb7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d114      	bne.n	800eb7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00e      	beq.n	800eb7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	7afa      	ldrb	r2, [r7, #11]
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	4798      	blx	r3
 800eb70:	4603      	mov	r3, r0
 800eb72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800eb7a:	7dfb      	ldrb	r3, [r7, #23]
 800eb7c:	e000      	b.n	800eb80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3718      	adds	r7, #24
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	460b      	mov	r3, r1
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb96:	7afb      	ldrb	r3, [r7, #11]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d16b      	bne.n	800ec74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3314      	adds	r3, #20
 800eba0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d156      	bne.n	800ec5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	689a      	ldr	r2, [r3, #8]
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d914      	bls.n	800ebe2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	689a      	ldr	r2, [r3, #8]
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	1ad2      	subs	r2, r2, r3
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 ffae 	bl	800fb30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2100      	movs	r1, #0
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f004 fb60 	bl	80132a0 <USBD_LL_PrepareReceive>
 800ebe0:	e03b      	b.n	800ec5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d11c      	bne.n	800ec28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	685a      	ldr	r2, [r3, #4]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d316      	bcc.n	800ec28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	685a      	ldr	r2, [r3, #4]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d20f      	bcs.n	800ec28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec08:	2200      	movs	r2, #0
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f000 ff8f 	bl	800fb30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	2100      	movs	r1, #0
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f004 fb3d 	bl	80132a0 <USBD_LL_PrepareReceive>
 800ec26:	e018      	b.n	800ec5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d10b      	bne.n	800ec4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d005      	beq.n	800ec4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec4c:	2180      	movs	r1, #128	; 0x80
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f004 fa20 	bl	8013094 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 ffbd 	bl	800fbd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d122      	bne.n	800ecaa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f7ff fe98 	bl	800e99a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ec72:	e01a      	b.n	800ecaa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d114      	bne.n	800ecaa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec86:	695b      	ldr	r3, [r3, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00e      	beq.n	800ecaa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	7afa      	ldrb	r2, [r7, #11]
 800ec96:	4611      	mov	r1, r2
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	4798      	blx	r3
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800eca6:	7dfb      	ldrb	r3, [r7, #23]
 800eca8:	e000      	b.n	800ecac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ece4:	2303      	movs	r3, #3
 800ece6:	e02f      	b.n	800ed48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00f      	beq.n	800ed12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d009      	beq.n	800ed12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	6852      	ldr	r2, [r2, #4]
 800ed0a:	b2d2      	uxtb	r2, r2
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed12:	2340      	movs	r3, #64	; 0x40
 800ed14:	2200      	movs	r2, #0
 800ed16:	2100      	movs	r1, #0
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f004 f947 	bl	8012fac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2201      	movs	r2, #1
 800ed22:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2240      	movs	r2, #64	; 0x40
 800ed2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed2e:	2340      	movs	r3, #64	; 0x40
 800ed30:	2200      	movs	r2, #0
 800ed32:	2180      	movs	r1, #128	; 0x80
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f004 f939 	bl	8012fac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2240      	movs	r2, #64	; 0x40
 800ed44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	78fa      	ldrb	r2, [r7, #3]
 800ed60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2204      	movs	r2, #4
 800ed8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b04      	cmp	r3, #4
 800edae:	d106      	bne.n	800edbe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d101      	bne.n	800ede2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800edde:	2303      	movs	r3, #3
 800ede0:	e012      	b.n	800ee08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b03      	cmp	r3, #3
 800edec:	d10b      	bne.n	800ee06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf4:	69db      	ldr	r3, [r3, #28]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee00:	69db      	ldr	r3, [r3, #28]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d101      	bne.n	800ee2a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e014      	b.n	800ee54 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d10d      	bne.n	800ee52 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d007      	beq.n	800ee52 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	78fa      	ldrb	r2, [r7, #3]
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d101      	bne.n	800ee76 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ee72:	2303      	movs	r3, #3
 800ee74:	e014      	b.n	800eea0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	2b03      	cmp	r3, #3
 800ee80:	d10d      	bne.n	800ee9e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee96:	78fa      	ldrb	r2, [r7, #3]
 800ee98:	4611      	mov	r1, r2
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d009      	beq.n	800eeec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	6852      	ldr	r2, [r2, #4]
 800eee4:	b2d2      	uxtb	r2, r2
 800eee6:	4611      	mov	r1, r2
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	4798      	blx	r3
  }

  return USBD_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eef6:	b480      	push	{r7}
 800eef8:	b087      	sub	sp, #28
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef14:	8a3b      	ldrh	r3, [r7, #16]
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	b21a      	sxth	r2, r3
 800ef1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	b21b      	sxth	r3, r3
 800ef22:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef24:	89fb      	ldrh	r3, [r7, #14]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	371c      	adds	r7, #28
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
	...

0800ef34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef4a:	2b40      	cmp	r3, #64	; 0x40
 800ef4c:	d005      	beq.n	800ef5a <USBD_StdDevReq+0x26>
 800ef4e:	2b40      	cmp	r3, #64	; 0x40
 800ef50:	d853      	bhi.n	800effa <USBD_StdDevReq+0xc6>
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00b      	beq.n	800ef6e <USBD_StdDevReq+0x3a>
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	d14f      	bne.n	800effa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	4798      	blx	r3
 800ef68:	4603      	mov	r3, r0
 800ef6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef6c:	e04a      	b.n	800f004 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	785b      	ldrb	r3, [r3, #1]
 800ef72:	2b09      	cmp	r3, #9
 800ef74:	d83b      	bhi.n	800efee <USBD_StdDevReq+0xba>
 800ef76:	a201      	add	r2, pc, #4	; (adr r2, 800ef7c <USBD_StdDevReq+0x48>)
 800ef78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7c:	0800efd1 	.word	0x0800efd1
 800ef80:	0800efe5 	.word	0x0800efe5
 800ef84:	0800efef 	.word	0x0800efef
 800ef88:	0800efdb 	.word	0x0800efdb
 800ef8c:	0800efef 	.word	0x0800efef
 800ef90:	0800efaf 	.word	0x0800efaf
 800ef94:	0800efa5 	.word	0x0800efa5
 800ef98:	0800efef 	.word	0x0800efef
 800ef9c:	0800efc7 	.word	0x0800efc7
 800efa0:	0800efb9 	.word	0x0800efb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f9de 	bl	800f368 <USBD_GetDescriptor>
          break;
 800efac:	e024      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fb6d 	bl	800f690 <USBD_SetAddress>
          break;
 800efb6:	e01f      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fbac 	bl	800f718 <USBD_SetConfig>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]
          break;
 800efc4:	e018      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 fc4b 	bl	800f864 <USBD_GetConfig>
          break;
 800efce:	e013      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fc7c 	bl	800f8d0 <USBD_GetStatus>
          break;
 800efd8:	e00e      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800efda:	6839      	ldr	r1, [r7, #0]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fcab 	bl	800f938 <USBD_SetFeature>
          break;
 800efe2:	e009      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fcba 	bl	800f960 <USBD_ClrFeature>
          break;
 800efec:	e004      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800efee:	6839      	ldr	r1, [r7, #0]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fd11 	bl	800fa18 <USBD_CtlError>
          break;
 800eff6:	bf00      	nop
      }
      break;
 800eff8:	e004      	b.n	800f004 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800effa:	6839      	ldr	r1, [r7, #0]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 fd0b 	bl	800fa18 <USBD_CtlError>
      break;
 800f002:	bf00      	nop
  }

  return ret;
 800f004:	7bfb      	ldrb	r3, [r7, #15]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop

0800f010 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f01a:	2300      	movs	r3, #0
 800f01c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f026:	2b40      	cmp	r3, #64	; 0x40
 800f028:	d005      	beq.n	800f036 <USBD_StdItfReq+0x26>
 800f02a:	2b40      	cmp	r3, #64	; 0x40
 800f02c:	d82f      	bhi.n	800f08e <USBD_StdItfReq+0x7e>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <USBD_StdItfReq+0x26>
 800f032:	2b20      	cmp	r3, #32
 800f034:	d12b      	bne.n	800f08e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	3b01      	subs	r3, #1
 800f040:	2b02      	cmp	r3, #2
 800f042:	d81d      	bhi.n	800f080 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	889b      	ldrh	r3, [r3, #4]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d813      	bhi.n	800f076 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	4798      	blx	r3
 800f05c:	4603      	mov	r3, r0
 800f05e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	88db      	ldrh	r3, [r3, #6]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d110      	bne.n	800f08a <USBD_StdItfReq+0x7a>
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10d      	bne.n	800f08a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fd9d 	bl	800fbae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f074:	e009      	b.n	800f08a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fccd 	bl	800fa18 <USBD_CtlError>
          break;
 800f07e:	e004      	b.n	800f08a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fcc8 	bl	800fa18 <USBD_CtlError>
          break;
 800f088:	e000      	b.n	800f08c <USBD_StdItfReq+0x7c>
          break;
 800f08a:	bf00      	nop
      }
      break;
 800f08c:	e004      	b.n	800f098 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fcc1 	bl	800fa18 <USBD_CtlError>
      break;
 800f096:	bf00      	nop
  }

  return ret;
 800f098:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b084      	sub	sp, #16
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	889b      	ldrh	r3, [r3, #4]
 800f0b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0be:	2b40      	cmp	r3, #64	; 0x40
 800f0c0:	d007      	beq.n	800f0d2 <USBD_StdEPReq+0x30>
 800f0c2:	2b40      	cmp	r3, #64	; 0x40
 800f0c4:	f200 8145 	bhi.w	800f352 <USBD_StdEPReq+0x2b0>
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00c      	beq.n	800f0e6 <USBD_StdEPReq+0x44>
 800f0cc:	2b20      	cmp	r3, #32
 800f0ce:	f040 8140 	bne.w	800f352 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	4798      	blx	r3
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f0e4:	e13a      	b.n	800f35c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	785b      	ldrb	r3, [r3, #1]
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d007      	beq.n	800f0fe <USBD_StdEPReq+0x5c>
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	f300 8129 	bgt.w	800f346 <USBD_StdEPReq+0x2a4>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d07f      	beq.n	800f1f8 <USBD_StdEPReq+0x156>
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d03c      	beq.n	800f176 <USBD_StdEPReq+0xd4>
 800f0fc:	e123      	b.n	800f346 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b02      	cmp	r3, #2
 800f108:	d002      	beq.n	800f110 <USBD_StdEPReq+0x6e>
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d016      	beq.n	800f13c <USBD_StdEPReq+0x9a>
 800f10e:	e02c      	b.n	800f16a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f110:	7bbb      	ldrb	r3, [r7, #14]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00d      	beq.n	800f132 <USBD_StdEPReq+0x90>
 800f116:	7bbb      	ldrb	r3, [r7, #14]
 800f118:	2b80      	cmp	r3, #128	; 0x80
 800f11a:	d00a      	beq.n	800f132 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f11c:	7bbb      	ldrb	r3, [r7, #14]
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f003 ffb7 	bl	8013094 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f126:	2180      	movs	r1, #128	; 0x80
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f003 ffb3 	bl	8013094 <USBD_LL_StallEP>
 800f12e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f130:	e020      	b.n	800f174 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 fc6f 	bl	800fa18 <USBD_CtlError>
              break;
 800f13a:	e01b      	b.n	800f174 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	885b      	ldrh	r3, [r3, #2]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10e      	bne.n	800f162 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00b      	beq.n	800f162 <USBD_StdEPReq+0xc0>
 800f14a:	7bbb      	ldrb	r3, [r7, #14]
 800f14c:	2b80      	cmp	r3, #128	; 0x80
 800f14e:	d008      	beq.n	800f162 <USBD_StdEPReq+0xc0>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	88db      	ldrh	r3, [r3, #6]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d104      	bne.n	800f162 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f158:	7bbb      	ldrb	r3, [r7, #14]
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f003 ff99 	bl	8013094 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fd23 	bl	800fbae <USBD_CtlSendStatus>

              break;
 800f168:	e004      	b.n	800f174 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fc53 	bl	800fa18 <USBD_CtlError>
              break;
 800f172:	bf00      	nop
          }
          break;
 800f174:	e0ec      	b.n	800f350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b02      	cmp	r3, #2
 800f180:	d002      	beq.n	800f188 <USBD_StdEPReq+0xe6>
 800f182:	2b03      	cmp	r3, #3
 800f184:	d016      	beq.n	800f1b4 <USBD_StdEPReq+0x112>
 800f186:	e030      	b.n	800f1ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f188:	7bbb      	ldrb	r3, [r7, #14]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00d      	beq.n	800f1aa <USBD_StdEPReq+0x108>
 800f18e:	7bbb      	ldrb	r3, [r7, #14]
 800f190:	2b80      	cmp	r3, #128	; 0x80
 800f192:	d00a      	beq.n	800f1aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f194:	7bbb      	ldrb	r3, [r7, #14]
 800f196:	4619      	mov	r1, r3
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f003 ff7b 	bl	8013094 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f19e:	2180      	movs	r1, #128	; 0x80
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f003 ff77 	bl	8013094 <USBD_LL_StallEP>
 800f1a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1a8:	e025      	b.n	800f1f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f1aa:	6839      	ldr	r1, [r7, #0]
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fc33 	bl	800fa18 <USBD_CtlError>
              break;
 800f1b2:	e020      	b.n	800f1f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	885b      	ldrh	r3, [r3, #2]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d11b      	bne.n	800f1f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f1bc:	7bbb      	ldrb	r3, [r7, #14]
 800f1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f003 ff98 	bl	8013100 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fcec 	bl	800fbae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	4798      	blx	r3
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f1e8:	e004      	b.n	800f1f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 fc13 	bl	800fa18 <USBD_CtlError>
              break;
 800f1f2:	e000      	b.n	800f1f6 <USBD_StdEPReq+0x154>
              break;
 800f1f4:	bf00      	nop
          }
          break;
 800f1f6:	e0ab      	b.n	800f350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b02      	cmp	r3, #2
 800f202:	d002      	beq.n	800f20a <USBD_StdEPReq+0x168>
 800f204:	2b03      	cmp	r3, #3
 800f206:	d032      	beq.n	800f26e <USBD_StdEPReq+0x1cc>
 800f208:	e097      	b.n	800f33a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f20a:	7bbb      	ldrb	r3, [r7, #14]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <USBD_StdEPReq+0x17e>
 800f210:	7bbb      	ldrb	r3, [r7, #14]
 800f212:	2b80      	cmp	r3, #128	; 0x80
 800f214:	d004      	beq.n	800f220 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fbfd 	bl	800fa18 <USBD_CtlError>
                break;
 800f21e:	e091      	b.n	800f344 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f224:	2b00      	cmp	r3, #0
 800f226:	da0b      	bge.n	800f240 <USBD_StdEPReq+0x19e>
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f22e:	4613      	mov	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4413      	add	r3, r2
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	3310      	adds	r3, #16
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	4413      	add	r3, r2
 800f23c:	3304      	adds	r3, #4
 800f23e:	e00b      	b.n	800f258 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f240:	7bbb      	ldrb	r3, [r7, #14]
 800f242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f246:	4613      	mov	r3, r2
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	4413      	add	r3, r2
 800f256:	3304      	adds	r3, #4
 800f258:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2200      	movs	r2, #0
 800f25e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2202      	movs	r2, #2
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fc47 	bl	800fafa <USBD_CtlSendData>
              break;
 800f26c:	e06a      	b.n	800f344 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f272:	2b00      	cmp	r3, #0
 800f274:	da11      	bge.n	800f29a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f276:	7bbb      	ldrb	r3, [r7, #14]
 800f278:	f003 020f 	and.w	r2, r3, #15
 800f27c:	6879      	ldr	r1, [r7, #4]
 800f27e:	4613      	mov	r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4413      	add	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	440b      	add	r3, r1
 800f288:	3324      	adds	r3, #36	; 0x24
 800f28a:	881b      	ldrh	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d117      	bne.n	800f2c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fbc0 	bl	800fa18 <USBD_CtlError>
                  break;
 800f298:	e054      	b.n	800f344 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	f003 020f 	and.w	r2, r3, #15
 800f2a0:	6879      	ldr	r1, [r7, #4]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	440b      	add	r3, r1
 800f2ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d104      	bne.n	800f2c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fbad 	bl	800fa18 <USBD_CtlError>
                  break;
 800f2be:	e041      	b.n	800f344 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	da0b      	bge.n	800f2e0 <USBD_StdEPReq+0x23e>
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	4413      	add	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	3310      	adds	r3, #16
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	4413      	add	r3, r2
 800f2dc:	3304      	adds	r3, #4
 800f2de:	e00b      	b.n	800f2f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2e0:	7bbb      	ldrb	r3, [r7, #14]
 800f2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4413      	add	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2fa:	7bbb      	ldrb	r3, [r7, #14]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <USBD_StdEPReq+0x264>
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	2b80      	cmp	r3, #128	; 0x80
 800f304:	d103      	bne.n	800f30e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2200      	movs	r2, #0
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	e00e      	b.n	800f32c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f30e:	7bbb      	ldrb	r3, [r7, #14]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f003 ff2a 	bl	801316c <USBD_LL_IsStallEP>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2201      	movs	r2, #1
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	e002      	b.n	800f32c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2202      	movs	r2, #2
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fbe1 	bl	800fafa <USBD_CtlSendData>
              break;
 800f338:	e004      	b.n	800f344 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fb6b 	bl	800fa18 <USBD_CtlError>
              break;
 800f342:	bf00      	nop
          }
          break;
 800f344:	e004      	b.n	800f350 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fb65 	bl	800fa18 <USBD_CtlError>
          break;
 800f34e:	bf00      	nop
      }
      break;
 800f350:	e004      	b.n	800f35c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fb5f 	bl	800fa18 <USBD_CtlError>
      break;
 800f35a:	bf00      	nop
  }

  return ret;
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3710      	adds	r7, #16
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
	...

0800f368 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f372:	2300      	movs	r3, #0
 800f374:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f376:	2300      	movs	r3, #0
 800f378:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f37a:	2300      	movs	r3, #0
 800f37c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	885b      	ldrh	r3, [r3, #2]
 800f382:	0a1b      	lsrs	r3, r3, #8
 800f384:	b29b      	uxth	r3, r3
 800f386:	3b01      	subs	r3, #1
 800f388:	2b0e      	cmp	r3, #14
 800f38a:	f200 8152 	bhi.w	800f632 <USBD_GetDescriptor+0x2ca>
 800f38e:	a201      	add	r2, pc, #4	; (adr r2, 800f394 <USBD_GetDescriptor+0x2c>)
 800f390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f394:	0800f405 	.word	0x0800f405
 800f398:	0800f41d 	.word	0x0800f41d
 800f39c:	0800f45d 	.word	0x0800f45d
 800f3a0:	0800f633 	.word	0x0800f633
 800f3a4:	0800f633 	.word	0x0800f633
 800f3a8:	0800f5d3 	.word	0x0800f5d3
 800f3ac:	0800f5ff 	.word	0x0800f5ff
 800f3b0:	0800f633 	.word	0x0800f633
 800f3b4:	0800f633 	.word	0x0800f633
 800f3b8:	0800f633 	.word	0x0800f633
 800f3bc:	0800f633 	.word	0x0800f633
 800f3c0:	0800f633 	.word	0x0800f633
 800f3c4:	0800f633 	.word	0x0800f633
 800f3c8:	0800f633 	.word	0x0800f633
 800f3cc:	0800f3d1 	.word	0x0800f3d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3d6:	69db      	ldr	r3, [r3, #28]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	7c12      	ldrb	r2, [r2, #16]
 800f3e8:	f107 0108 	add.w	r1, r7, #8
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	4798      	blx	r3
 800f3f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3f2:	e126      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fb0e 	bl	800fa18 <USBD_CtlError>
        err++;
 800f3fc:	7afb      	ldrb	r3, [r7, #11]
 800f3fe:	3301      	adds	r3, #1
 800f400:	72fb      	strb	r3, [r7, #11]
      break;
 800f402:	e11e      	b.n	800f642 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	7c12      	ldrb	r2, [r2, #16]
 800f410:	f107 0108 	add.w	r1, r7, #8
 800f414:	4610      	mov	r0, r2
 800f416:	4798      	blx	r3
 800f418:	60f8      	str	r0, [r7, #12]
      break;
 800f41a:	e112      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7c1b      	ldrb	r3, [r3, #16]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10d      	bne.n	800f440 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42c:	f107 0208 	add.w	r2, r7, #8
 800f430:	4610      	mov	r0, r2
 800f432:	4798      	blx	r3
 800f434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	2202      	movs	r2, #2
 800f43c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f43e:	e100      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f448:	f107 0208 	add.w	r2, r7, #8
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
 800f450:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	3301      	adds	r3, #1
 800f456:	2202      	movs	r2, #2
 800f458:	701a      	strb	r2, [r3, #0]
      break;
 800f45a:	e0f2      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	885b      	ldrh	r3, [r3, #2]
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b05      	cmp	r3, #5
 800f464:	f200 80ac 	bhi.w	800f5c0 <USBD_GetDescriptor+0x258>
 800f468:	a201      	add	r2, pc, #4	; (adr r2, 800f470 <USBD_GetDescriptor+0x108>)
 800f46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f46e:	bf00      	nop
 800f470:	0800f489 	.word	0x0800f489
 800f474:	0800f4bd 	.word	0x0800f4bd
 800f478:	0800f4f1 	.word	0x0800f4f1
 800f47c:	0800f525 	.word	0x0800f525
 800f480:	0800f559 	.word	0x0800f559
 800f484:	0800f58d 	.word	0x0800f58d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00b      	beq.n	800f4ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	7c12      	ldrb	r2, [r2, #16]
 800f4a0:	f107 0108 	add.w	r1, r7, #8
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	4798      	blx	r3
 800f4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4aa:	e091      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fab2 	bl	800fa18 <USBD_CtlError>
            err++;
 800f4b4:	7afb      	ldrb	r3, [r7, #11]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ba:	e089      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00b      	beq.n	800f4e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	7c12      	ldrb	r2, [r2, #16]
 800f4d4:	f107 0108 	add.w	r1, r7, #8
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4798      	blx	r3
 800f4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4de:	e077      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fa98 	bl	800fa18 <USBD_CtlError>
            err++;
 800f4e8:	7afb      	ldrb	r3, [r7, #11]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ee:	e06f      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00b      	beq.n	800f514 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	7c12      	ldrb	r2, [r2, #16]
 800f508:	f107 0108 	add.w	r1, r7, #8
 800f50c:	4610      	mov	r0, r2
 800f50e:	4798      	blx	r3
 800f510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f512:	e05d      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 fa7e 	bl	800fa18 <USBD_CtlError>
            err++;
 800f51c:	7afb      	ldrb	r3, [r7, #11]
 800f51e:	3301      	adds	r3, #1
 800f520:	72fb      	strb	r3, [r7, #11]
          break;
 800f522:	e055      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00b      	beq.n	800f548 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f536:	691b      	ldr	r3, [r3, #16]
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	7c12      	ldrb	r2, [r2, #16]
 800f53c:	f107 0108 	add.w	r1, r7, #8
 800f540:	4610      	mov	r0, r2
 800f542:	4798      	blx	r3
 800f544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f546:	e043      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 fa64 	bl	800fa18 <USBD_CtlError>
            err++;
 800f550:	7afb      	ldrb	r3, [r7, #11]
 800f552:	3301      	adds	r3, #1
 800f554:	72fb      	strb	r3, [r7, #11]
          break;
 800f556:	e03b      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f55e:	695b      	ldr	r3, [r3, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00b      	beq.n	800f57c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f56a:	695b      	ldr	r3, [r3, #20]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	7c12      	ldrb	r2, [r2, #16]
 800f570:	f107 0108 	add.w	r1, r7, #8
 800f574:	4610      	mov	r0, r2
 800f576:	4798      	blx	r3
 800f578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f57a:	e029      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fa4a 	bl	800fa18 <USBD_CtlError>
            err++;
 800f584:	7afb      	ldrb	r3, [r7, #11]
 800f586:	3301      	adds	r3, #1
 800f588:	72fb      	strb	r3, [r7, #11]
          break;
 800f58a:	e021      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f592:	699b      	ldr	r3, [r3, #24]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00b      	beq.n	800f5b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f59e:	699b      	ldr	r3, [r3, #24]
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	7c12      	ldrb	r2, [r2, #16]
 800f5a4:	f107 0108 	add.w	r1, r7, #8
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	4798      	blx	r3
 800f5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5ae:	e00f      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fa30 	bl	800fa18 <USBD_CtlError>
            err++;
 800f5b8:	7afb      	ldrb	r3, [r7, #11]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f5be:	e007      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa28 	bl	800fa18 <USBD_CtlError>
          err++;
 800f5c8:	7afb      	ldrb	r3, [r7, #11]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f5ce:	bf00      	nop
      }
      break;
 800f5d0:	e037      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	7c1b      	ldrb	r3, [r3, #16]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d109      	bne.n	800f5ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e2:	f107 0208 	add.w	r2, r7, #8
 800f5e6:	4610      	mov	r0, r2
 800f5e8:	4798      	blx	r3
 800f5ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5ec:	e029      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 fa11 	bl	800fa18 <USBD_CtlError>
        err++;
 800f5f6:	7afb      	ldrb	r3, [r7, #11]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	72fb      	strb	r3, [r7, #11]
      break;
 800f5fc:	e021      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	7c1b      	ldrb	r3, [r3, #16]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d10d      	bne.n	800f622 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f60e:	f107 0208 	add.w	r2, r7, #8
 800f612:	4610      	mov	r0, r2
 800f614:	4798      	blx	r3
 800f616:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	3301      	adds	r3, #1
 800f61c:	2207      	movs	r2, #7
 800f61e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f620:	e00f      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f622:	6839      	ldr	r1, [r7, #0]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f9f7 	bl	800fa18 <USBD_CtlError>
        err++;
 800f62a:	7afb      	ldrb	r3, [r7, #11]
 800f62c:	3301      	adds	r3, #1
 800f62e:	72fb      	strb	r3, [r7, #11]
      break;
 800f630:	e007      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f9ef 	bl	800fa18 <USBD_CtlError>
      err++;
 800f63a:	7afb      	ldrb	r3, [r7, #11]
 800f63c:	3301      	adds	r3, #1
 800f63e:	72fb      	strb	r3, [r7, #11]
      break;
 800f640:	bf00      	nop
  }

  if (err != 0U)
 800f642:	7afb      	ldrb	r3, [r7, #11]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d11e      	bne.n	800f686 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	88db      	ldrh	r3, [r3, #6]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d016      	beq.n	800f67e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f650:	893b      	ldrh	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00e      	beq.n	800f674 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	88da      	ldrh	r2, [r3, #6]
 800f65a:	893b      	ldrh	r3, [r7, #8]
 800f65c:	4293      	cmp	r3, r2
 800f65e:	bf28      	it	cs
 800f660:	4613      	movcs	r3, r2
 800f662:	b29b      	uxth	r3, r3
 800f664:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f666:	893b      	ldrh	r3, [r7, #8]
 800f668:	461a      	mov	r2, r3
 800f66a:	68f9      	ldr	r1, [r7, #12]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fa44 	bl	800fafa <USBD_CtlSendData>
 800f672:	e009      	b.n	800f688 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 f9ce 	bl	800fa18 <USBD_CtlError>
 800f67c:	e004      	b.n	800f688 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fa95 	bl	800fbae <USBD_CtlSendStatus>
 800f684:	e000      	b.n	800f688 <USBD_GetDescriptor+0x320>
    return;
 800f686:	bf00      	nop
  }
}
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop

0800f690 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	889b      	ldrh	r3, [r3, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d131      	bne.n	800f706 <USBD_SetAddress+0x76>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	88db      	ldrh	r3, [r3, #6]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d12d      	bne.n	800f706 <USBD_SetAddress+0x76>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	885b      	ldrh	r3, [r3, #2]
 800f6ae:	2b7f      	cmp	r3, #127	; 0x7f
 800f6b0:	d829      	bhi.n	800f706 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	d104      	bne.n	800f6d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 f9a3 	bl	800fa18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6d2:	e01d      	b.n	800f710 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	7bfa      	ldrb	r2, [r7, #15]
 800f6d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
 800f6de:	4619      	mov	r1, r3
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f003 fd6f 	bl	80131c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fa61 	bl	800fbae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f6ec:	7bfb      	ldrb	r3, [r7, #15]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d004      	beq.n	800f6fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6fa:	e009      	b.n	800f710 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f704:	e004      	b.n	800f710 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f706:	6839      	ldr	r1, [r7, #0]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f985 	bl	800fa18 <USBD_CtlError>
  }
}
 800f70e:	bf00      	nop
 800f710:	bf00      	nop
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	885b      	ldrh	r3, [r3, #2]
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	4b4c      	ldr	r3, [pc, #304]	; (800f860 <USBD_SetConfig+0x148>)
 800f72e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f730:	4b4b      	ldr	r3, [pc, #300]	; (800f860 <USBD_SetConfig+0x148>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d905      	bls.n	800f744 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f96c 	bl	800fa18 <USBD_CtlError>
    return USBD_FAIL;
 800f740:	2303      	movs	r3, #3
 800f742:	e088      	b.n	800f856 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d002      	beq.n	800f756 <USBD_SetConfig+0x3e>
 800f750:	2b03      	cmp	r3, #3
 800f752:	d025      	beq.n	800f7a0 <USBD_SetConfig+0x88>
 800f754:	e071      	b.n	800f83a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f756:	4b42      	ldr	r3, [pc, #264]	; (800f860 <USBD_SetConfig+0x148>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d01c      	beq.n	800f798 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f75e:	4b40      	ldr	r3, [pc, #256]	; (800f860 <USBD_SetConfig+0x148>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f768:	4b3d      	ldr	r3, [pc, #244]	; (800f860 <USBD_SetConfig+0x148>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff f91e 	bl	800e9b0 <USBD_SetClassConfig>
 800f774:	4603      	mov	r3, r0
 800f776:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f778:	7bfb      	ldrb	r3, [r7, #15]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d004      	beq.n	800f788 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 f949 	bl	800fa18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f786:	e065      	b.n	800f854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fa10 	bl	800fbae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2203      	movs	r2, #3
 800f792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f796:	e05d      	b.n	800f854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 fa08 	bl	800fbae <USBD_CtlSendStatus>
      break;
 800f79e:	e059      	b.n	800f854 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7a0:	4b2f      	ldr	r3, [pc, #188]	; (800f860 <USBD_SetConfig+0x148>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d112      	bne.n	800f7ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f7b0:	4b2b      	ldr	r3, [pc, #172]	; (800f860 <USBD_SetConfig+0x148>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7ba:	4b29      	ldr	r3, [pc, #164]	; (800f860 <USBD_SetConfig+0x148>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff f911 	bl	800e9e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f9f1 	bl	800fbae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7cc:	e042      	b.n	800f854 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f7ce:	4b24      	ldr	r3, [pc, #144]	; (800f860 <USBD_SetConfig+0x148>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d02a      	beq.n	800f832 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff f8ff 	bl	800e9e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f7ea:	4b1d      	ldr	r3, [pc, #116]	; (800f860 <USBD_SetConfig+0x148>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7f4:	4b1a      	ldr	r3, [pc, #104]	; (800f860 <USBD_SetConfig+0x148>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff f8d8 	bl	800e9b0 <USBD_SetClassConfig>
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f804:	7bfb      	ldrb	r3, [r7, #15]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00f      	beq.n	800f82a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f903 	bl	800fa18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	4619      	mov	r1, r3
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7ff f8e4 	bl	800e9e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2202      	movs	r2, #2
 800f824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f828:	e014      	b.n	800f854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f9bf 	bl	800fbae <USBD_CtlSendStatus>
      break;
 800f830:	e010      	b.n	800f854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 f9bb 	bl	800fbae <USBD_CtlSendStatus>
      break;
 800f838:	e00c      	b.n	800f854 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f83a:	6839      	ldr	r1, [r7, #0]
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 f8eb 	bl	800fa18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f842:	4b07      	ldr	r3, [pc, #28]	; (800f860 <USBD_SetConfig+0x148>)
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	4619      	mov	r1, r3
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff f8cd 	bl	800e9e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f84e:	2303      	movs	r3, #3
 800f850:	73fb      	strb	r3, [r7, #15]
      break;
 800f852:	bf00      	nop
  }

  return ret;
 800f854:	7bfb      	ldrb	r3, [r7, #15]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	20003ed0 	.word	0x20003ed0

0800f864 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	88db      	ldrh	r3, [r3, #6]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d004      	beq.n	800f880 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f8cd 	bl	800fa18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f87e:	e023      	b.n	800f8c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b02      	cmp	r3, #2
 800f88a:	dc02      	bgt.n	800f892 <USBD_GetConfig+0x2e>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	dc03      	bgt.n	800f898 <USBD_GetConfig+0x34>
 800f890:	e015      	b.n	800f8be <USBD_GetConfig+0x5a>
 800f892:	2b03      	cmp	r3, #3
 800f894:	d00b      	beq.n	800f8ae <USBD_GetConfig+0x4a>
 800f896:	e012      	b.n	800f8be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f927 	bl	800fafa <USBD_CtlSendData>
        break;
 800f8ac:	e00c      	b.n	800f8c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	3304      	adds	r3, #4
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f91f 	bl	800fafa <USBD_CtlSendData>
        break;
 800f8bc:	e004      	b.n	800f8c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f8a9 	bl	800fa18 <USBD_CtlError>
        break;
 800f8c6:	bf00      	nop
}
 800f8c8:	bf00      	nop
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d81e      	bhi.n	800f926 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	88db      	ldrh	r3, [r3, #6]
 800f8ec:	2b02      	cmp	r3, #2
 800f8ee:	d004      	beq.n	800f8fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f890 	bl	800fa18 <USBD_CtlError>
        break;
 800f8f8:	e01a      	b.n	800f930 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f906:	2b00      	cmp	r3, #0
 800f908:	d005      	beq.n	800f916 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	f043 0202 	orr.w	r2, r3, #2
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	330c      	adds	r3, #12
 800f91a:	2202      	movs	r2, #2
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f8eb 	bl	800fafa <USBD_CtlSendData>
      break;
 800f924:	e004      	b.n	800f930 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f875 	bl	800fa18 <USBD_CtlError>
      break;
 800f92e:	bf00      	nop
  }
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	885b      	ldrh	r3, [r3, #2]
 800f946:	2b01      	cmp	r3, #1
 800f948:	d106      	bne.n	800f958 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2201      	movs	r2, #1
 800f94e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f92b 	bl	800fbae <USBD_CtlSendStatus>
  }
}
 800f958:	bf00      	nop
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f970:	b2db      	uxtb	r3, r3
 800f972:	3b01      	subs	r3, #1
 800f974:	2b02      	cmp	r3, #2
 800f976:	d80b      	bhi.n	800f990 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	885b      	ldrh	r3, [r3, #2]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d10c      	bne.n	800f99a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f910 	bl	800fbae <USBD_CtlSendStatus>
      }
      break;
 800f98e:	e004      	b.n	800f99a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f990:	6839      	ldr	r1, [r7, #0]
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f840 	bl	800fa18 <USBD_CtlError>
      break;
 800f998:	e000      	b.n	800f99c <USBD_ClrFeature+0x3c>
      break;
 800f99a:	bf00      	nop
  }
}
 800f99c:	bf00      	nop
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	781a      	ldrb	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff fa91 	bl	800eef6 <SWAPBYTE>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f7ff fa84 	bl	800eef6 <SWAPBYTE>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f7ff fa77 	bl	800eef6 <SWAPBYTE>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	80da      	strh	r2, [r3, #6]
}
 800fa10:	bf00      	nop
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa22:	2180      	movs	r1, #128	; 0x80
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f003 fb35 	bl	8013094 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f003 fb31 	bl	8013094 <USBD_LL_StallEP>
}
 800fa32:	bf00      	nop
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b086      	sub	sp, #24
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d036      	beq.n	800fabe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa54:	6938      	ldr	r0, [r7, #16]
 800fa56:	f000 f836 	bl	800fac6 <USBD_GetLen>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	005b      	lsls	r3, r3, #1
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	7812      	ldrb	r2, [r2, #0]
 800fa72:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	3301      	adds	r3, #1
 800fa78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	4413      	add	r3, r2
 800fa80:	2203      	movs	r2, #3
 800fa82:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa84:	7dfb      	ldrb	r3, [r7, #23]
 800fa86:	3301      	adds	r3, #1
 800fa88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa8a:	e013      	b.n	800fab4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	4413      	add	r3, r2
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	7812      	ldrb	r2, [r2, #0]
 800fa96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	613b      	str	r3, [r7, #16]
    idx++;
 800fa9e:	7dfb      	ldrb	r3, [r7, #23]
 800faa0:	3301      	adds	r3, #1
 800faa2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	4413      	add	r3, r2
 800faaa:	2200      	movs	r2, #0
 800faac:	701a      	strb	r2, [r3, #0]
    idx++;
 800faae:	7dfb      	ldrb	r3, [r7, #23]
 800fab0:	3301      	adds	r3, #1
 800fab2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e7      	bne.n	800fa8c <USBD_GetString+0x52>
 800fabc:	e000      	b.n	800fac0 <USBD_GetString+0x86>
    return;
 800fabe:	bf00      	nop
  }
}
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fac6:	b480      	push	{r7}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fad6:	e005      	b.n	800fae4 <USBD_GetLen+0x1e>
  {
    len++;
 800fad8:	7bfb      	ldrb	r3, [r7, #15]
 800fada:	3301      	adds	r3, #1
 800fadc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	3301      	adds	r3, #1
 800fae2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1f5      	bne.n	800fad8 <USBD_GetLen+0x12>
  }

  return len;
 800faec:	7bfb      	ldrb	r3, [r7, #15]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b084      	sub	sp, #16
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	60f8      	str	r0, [r7, #12]
 800fb02:	60b9      	str	r1, [r7, #8]
 800fb04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2202      	movs	r2, #2
 800fb0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	2100      	movs	r1, #0
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f003 fb85 	bl	8013230 <USBD_LL_Transmit>

  return USBD_OK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	2100      	movs	r1, #0
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f003 fb74 	bl	8013230 <USBD_LL_Transmit>

  return USBD_OK;
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b084      	sub	sp, #16
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	60f8      	str	r0, [r7, #12]
 800fb5a:	60b9      	str	r1, [r7, #8]
 800fb5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2203      	movs	r2, #3
 800fb62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f003 fb8f 	bl	80132a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f003 fb7e 	bl	80132a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b082      	sub	sp, #8
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2204      	movs	r2, #4
 800fbba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f003 fb33 	bl	8013230 <USBD_LL_Transmit>

  return USBD_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2205      	movs	r2, #5
 800fbe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	2100      	movs	r1, #0
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f003 fb58 	bl	80132a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3708      	adds	r7, #8
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
	...

0800fbfc <__NVIC_SetPriority>:
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	4603      	mov	r3, r0
 800fc04:	6039      	str	r1, [r7, #0]
 800fc06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	db0a      	blt.n	800fc26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	490c      	ldr	r1, [pc, #48]	; (800fc48 <__NVIC_SetPriority+0x4c>)
 800fc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc1a:	0112      	lsls	r2, r2, #4
 800fc1c:	b2d2      	uxtb	r2, r2
 800fc1e:	440b      	add	r3, r1
 800fc20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fc24:	e00a      	b.n	800fc3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	4908      	ldr	r1, [pc, #32]	; (800fc4c <__NVIC_SetPriority+0x50>)
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	f003 030f 	and.w	r3, r3, #15
 800fc32:	3b04      	subs	r3, #4
 800fc34:	0112      	lsls	r2, r2, #4
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	440b      	add	r3, r1
 800fc3a:	761a      	strb	r2, [r3, #24]
}
 800fc3c:	bf00      	nop
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	e000e100 	.word	0xe000e100
 800fc4c:	e000ed00 	.word	0xe000ed00

0800fc50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fc54:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <SysTick_Handler+0x1c>)
 800fc56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fc58:	f001 fd28 	bl	80116ac <xTaskGetSchedulerState>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d001      	beq.n	800fc66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fc62:	f002 fb11 	bl	8012288 <xPortSysTickHandler>
  }
}
 800fc66:	bf00      	nop
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	e000e010 	.word	0xe000e010

0800fc70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc70:	b580      	push	{r7, lr}
 800fc72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc74:	2100      	movs	r1, #0
 800fc76:	f06f 0004 	mvn.w	r0, #4
 800fc7a:	f7ff ffbf 	bl	800fbfc <__NVIC_SetPriority>
#endif
}
 800fc7e:	bf00      	nop
 800fc80:	bd80      	pop	{r7, pc}
	...

0800fc84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc8a:	f3ef 8305 	mrs	r3, IPSR
 800fc8e:	603b      	str	r3, [r7, #0]
  return(result);
 800fc90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fc96:	f06f 0305 	mvn.w	r3, #5
 800fc9a:	607b      	str	r3, [r7, #4]
 800fc9c:	e00c      	b.n	800fcb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fc9e:	4b0a      	ldr	r3, [pc, #40]	; (800fcc8 <osKernelInitialize+0x44>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d105      	bne.n	800fcb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fca6:	4b08      	ldr	r3, [pc, #32]	; (800fcc8 <osKernelInitialize+0x44>)
 800fca8:	2201      	movs	r2, #1
 800fcaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	607b      	str	r3, [r7, #4]
 800fcb0:	e002      	b.n	800fcb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fcb8:	687b      	ldr	r3, [r7, #4]
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop
 800fcc8:	20003ed4 	.word	0x20003ed4

0800fccc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcd2:	f3ef 8305 	mrs	r3, IPSR
 800fcd6:	603b      	str	r3, [r7, #0]
  return(result);
 800fcd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fcde:	f06f 0305 	mvn.w	r3, #5
 800fce2:	607b      	str	r3, [r7, #4]
 800fce4:	e010      	b.n	800fd08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fce6:	4b0b      	ldr	r3, [pc, #44]	; (800fd14 <osKernelStart+0x48>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d109      	bne.n	800fd02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fcee:	f7ff ffbf 	bl	800fc70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fcf2:	4b08      	ldr	r3, [pc, #32]	; (800fd14 <osKernelStart+0x48>)
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fcf8:	f001 f87c 	bl	8010df4 <vTaskStartScheduler>
      stat = osOK;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	607b      	str	r3, [r7, #4]
 800fd00:	e002      	b.n	800fd08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fd02:	f04f 33ff 	mov.w	r3, #4294967295
 800fd06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fd08:	687b      	ldr	r3, [r7, #4]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	20003ed4 	.word	0x20003ed4

0800fd18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08e      	sub	sp, #56	; 0x38
 800fd1c:	af04      	add	r7, sp, #16
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd28:	f3ef 8305 	mrs	r3, IPSR
 800fd2c:	617b      	str	r3, [r7, #20]
  return(result);
 800fd2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d17e      	bne.n	800fe32 <osThreadNew+0x11a>
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d07b      	beq.n	800fe32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fd3a:	2380      	movs	r3, #128	; 0x80
 800fd3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fd3e:	2318      	movs	r3, #24
 800fd40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fd46:	f04f 33ff 	mov.w	r3, #4294967295
 800fd4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d045      	beq.n	800fdde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d002      	beq.n	800fd60 <osThreadNew+0x48>
        name = attr->name;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	699b      	ldr	r3, [r3, #24]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	699b      	ldr	r3, [r3, #24]
 800fd6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d008      	beq.n	800fd86 <osThreadNew+0x6e>
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	2b38      	cmp	r3, #56	; 0x38
 800fd78:	d805      	bhi.n	800fd86 <osThreadNew+0x6e>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d001      	beq.n	800fd8a <osThreadNew+0x72>
        return (NULL);
 800fd86:	2300      	movs	r3, #0
 800fd88:	e054      	b.n	800fe34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	695b      	ldr	r3, [r3, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	695b      	ldr	r3, [r3, #20]
 800fd96:	089b      	lsrs	r3, r3, #2
 800fd98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00e      	beq.n	800fdc0 <osThreadNew+0xa8>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	2bbb      	cmp	r3, #187	; 0xbb
 800fda8:	d90a      	bls.n	800fdc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d006      	beq.n	800fdc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <osThreadNew+0xa8>
        mem = 1;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	61bb      	str	r3, [r7, #24]
 800fdbe:	e010      	b.n	800fde2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d10c      	bne.n	800fde2 <osThreadNew+0xca>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d108      	bne.n	800fde2 <osThreadNew+0xca>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d104      	bne.n	800fde2 <osThreadNew+0xca>
          mem = 0;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	61bb      	str	r3, [r7, #24]
 800fddc:	e001      	b.n	800fde2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d110      	bne.n	800fe0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fdf0:	9202      	str	r2, [sp, #8]
 800fdf2:	9301      	str	r3, [sp, #4]
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	6a3a      	ldr	r2, [r7, #32]
 800fdfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fdfe:	68f8      	ldr	r0, [r7, #12]
 800fe00:	f000 fe0c 	bl	8010a1c <xTaskCreateStatic>
 800fe04:	4603      	mov	r3, r0
 800fe06:	613b      	str	r3, [r7, #16]
 800fe08:	e013      	b.n	800fe32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d110      	bne.n	800fe32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fe10:	6a3b      	ldr	r3, [r7, #32]
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	f107 0310 	add.w	r3, r7, #16
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f000 fe57 	bl	8010ad6 <xTaskCreate>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d001      	beq.n	800fe32 <osThreadNew+0x11a>
            hTask = NULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fe32:	693b      	ldr	r3, [r7, #16]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3728      	adds	r7, #40	; 0x28
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe44:	f3ef 8305 	mrs	r3, IPSR
 800fe48:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d003      	beq.n	800fe58 <osDelay+0x1c>
    stat = osErrorISR;
 800fe50:	f06f 0305 	mvn.w	r3, #5
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	e007      	b.n	800fe68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d002      	beq.n	800fe68 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 ff92 	bl	8010d8c <vTaskDelay>
    }
  }

  return (stat);
 800fe68:	68fb      	ldr	r3, [r7, #12]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
	...

0800fe74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	4a07      	ldr	r2, [pc, #28]	; (800fea0 <vApplicationGetIdleTaskMemory+0x2c>)
 800fe84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	4a06      	ldr	r2, [pc, #24]	; (800fea4 <vApplicationGetIdleTaskMemory+0x30>)
 800fe8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2280      	movs	r2, #128	; 0x80
 800fe90:	601a      	str	r2, [r3, #0]
}
 800fe92:	bf00      	nop
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	20003ed8 	.word	0x20003ed8
 800fea4:	20003f94 	.word	0x20003f94

0800fea8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	4a07      	ldr	r2, [pc, #28]	; (800fed4 <vApplicationGetTimerTaskMemory+0x2c>)
 800feb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	4a06      	ldr	r2, [pc, #24]	; (800fed8 <vApplicationGetTimerTaskMemory+0x30>)
 800febe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fec6:	601a      	str	r2, [r3, #0]
}
 800fec8:	bf00      	nop
 800feca:	3714      	adds	r7, #20
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr
 800fed4:	20004194 	.word	0x20004194
 800fed8:	20004250 	.word	0x20004250

0800fedc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f103 0208 	add.w	r2, r3, #8
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f04f 32ff 	mov.w	r2, #4294967295
 800fef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f103 0208 	add.w	r2, r3, #8
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f103 0208 	add.w	r2, r3, #8
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff10:	bf00      	nop
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff2a:	bf00      	nop
 800ff2c:	370c      	adds	r7, #12
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr

0800ff36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff36:	b480      	push	{r7}
 800ff38:	b085      	sub	sp, #20
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	689a      	ldr	r2, [r3, #8]
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	601a      	str	r2, [r3, #0]
}
 800ff72:	bf00      	nop
 800ff74:	3714      	adds	r7, #20
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b085      	sub	sp, #20
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff94:	d103      	bne.n	800ff9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	60fb      	str	r3, [r7, #12]
 800ff9c:	e00c      	b.n	800ffb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	3308      	adds	r3, #8
 800ffa2:	60fb      	str	r3, [r7, #12]
 800ffa4:	e002      	b.n	800ffac <vListInsert+0x2e>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	60fb      	str	r3, [r7, #12]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d2f6      	bcs.n	800ffa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	683a      	ldr	r2, [r7, #0]
 800ffc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	1c5a      	adds	r2, r3, #1
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	601a      	str	r2, [r3, #0]
}
 800ffe4:	bf00      	nop
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	6892      	ldr	r2, [r2, #8]
 8010006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	6852      	ldr	r2, [r2, #4]
 8010010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	429a      	cmp	r2, r3
 801001a:	d103      	bne.n	8010024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	689a      	ldr	r2, [r3, #8]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	1e5a      	subs	r2, r3, #1
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3714      	adds	r7, #20
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10a      	bne.n	801006e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801006e:	f002 f879 	bl	8012164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801007a:	68f9      	ldr	r1, [r7, #12]
 801007c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801007e:	fb01 f303 	mul.w	r3, r1, r3
 8010082:	441a      	add	r2, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801009e:	3b01      	subs	r3, #1
 80100a0:	68f9      	ldr	r1, [r7, #12]
 80100a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100a4:	fb01 f303 	mul.w	r3, r1, r3
 80100a8:	441a      	add	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	22ff      	movs	r2, #255	; 0xff
 80100b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	22ff      	movs	r2, #255	; 0xff
 80100ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d114      	bne.n	80100ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d01a      	beq.n	8010102 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	3310      	adds	r3, #16
 80100d0:	4618      	mov	r0, r3
 80100d2:	f001 f929 	bl	8011328 <xTaskRemoveFromEventList>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d012      	beq.n	8010102 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80100dc:	4b0c      	ldr	r3, [pc, #48]	; (8010110 <xQueueGenericReset+0xcc>)
 80100de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e2:	601a      	str	r2, [r3, #0]
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	e009      	b.n	8010102 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	3310      	adds	r3, #16
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff fef2 	bl	800fedc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	3324      	adds	r3, #36	; 0x24
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7ff feed 	bl	800fedc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010102:	f002 f85f 	bl	80121c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010106:	2301      	movs	r3, #1
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	e000ed04 	.word	0xe000ed04

08010114 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010114:	b580      	push	{r7, lr}
 8010116:	b08e      	sub	sp, #56	; 0x38
 8010118:	af02      	add	r7, sp, #8
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
 8010120:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10a      	bne.n	801013e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012c:	f383 8811 	msr	BASEPRI, r3
 8010130:	f3bf 8f6f 	isb	sy
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801013a:	bf00      	nop
 801013c:	e7fe      	b.n	801013c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10a      	bne.n	801015a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010148:	f383 8811 	msr	BASEPRI, r3
 801014c:	f3bf 8f6f 	isb	sy
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010156:	bf00      	nop
 8010158:	e7fe      	b.n	8010158 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d002      	beq.n	8010166 <xQueueGenericCreateStatic+0x52>
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d001      	beq.n	801016a <xQueueGenericCreateStatic+0x56>
 8010166:	2301      	movs	r3, #1
 8010168:	e000      	b.n	801016c <xQueueGenericCreateStatic+0x58>
 801016a:	2300      	movs	r3, #0
 801016c:	2b00      	cmp	r3, #0
 801016e:	d10a      	bne.n	8010186 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	623b      	str	r3, [r7, #32]
}
 8010182:	bf00      	nop
 8010184:	e7fe      	b.n	8010184 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d102      	bne.n	8010192 <xQueueGenericCreateStatic+0x7e>
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <xQueueGenericCreateStatic+0x82>
 8010192:	2301      	movs	r3, #1
 8010194:	e000      	b.n	8010198 <xQueueGenericCreateStatic+0x84>
 8010196:	2300      	movs	r3, #0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10a      	bne.n	80101b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a0:	f383 8811 	msr	BASEPRI, r3
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	61fb      	str	r3, [r7, #28]
}
 80101ae:	bf00      	nop
 80101b0:	e7fe      	b.n	80101b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80101b2:	2350      	movs	r3, #80	; 0x50
 80101b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2b50      	cmp	r3, #80	; 0x50
 80101ba:	d00a      	beq.n	80101d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80101bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c0:	f383 8811 	msr	BASEPRI, r3
 80101c4:	f3bf 8f6f 	isb	sy
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	61bb      	str	r3, [r7, #24]
}
 80101ce:	bf00      	nop
 80101d0:	e7fe      	b.n	80101d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80101d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80101d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00d      	beq.n	80101fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80101de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80101ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ec:	9300      	str	r3, [sp, #0]
 80101ee:	4613      	mov	r3, r2
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	68b9      	ldr	r1, [r7, #8]
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f000 f805 	bl	8010204 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3730      	adds	r7, #48	; 0x30
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d103      	bne.n	8010220 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	69ba      	ldr	r2, [r7, #24]
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	e002      	b.n	8010226 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010232:	2101      	movs	r1, #1
 8010234:	69b8      	ldr	r0, [r7, #24]
 8010236:	f7ff ff05 	bl	8010044 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	78fa      	ldrb	r2, [r7, #3]
 801023e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010242:	bf00      	nop
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b08e      	sub	sp, #56	; 0x38
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
 8010258:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801025a:	2300      	movs	r3, #0
 801025c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010264:	2b00      	cmp	r3, #0
 8010266:	d10a      	bne.n	801027e <xQueueGenericSend+0x32>
	__asm volatile
 8010268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026c:	f383 8811 	msr	BASEPRI, r3
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801027a:	bf00      	nop
 801027c:	e7fe      	b.n	801027c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d103      	bne.n	801028c <xQueueGenericSend+0x40>
 8010284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010288:	2b00      	cmp	r3, #0
 801028a:	d101      	bne.n	8010290 <xQueueGenericSend+0x44>
 801028c:	2301      	movs	r3, #1
 801028e:	e000      	b.n	8010292 <xQueueGenericSend+0x46>
 8010290:	2300      	movs	r3, #0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d10a      	bne.n	80102ac <xQueueGenericSend+0x60>
	__asm volatile
 8010296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029a:	f383 8811 	msr	BASEPRI, r3
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80102a8:	bf00      	nop
 80102aa:	e7fe      	b.n	80102aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	2b02      	cmp	r3, #2
 80102b0:	d103      	bne.n	80102ba <xQueueGenericSend+0x6e>
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d101      	bne.n	80102be <xQueueGenericSend+0x72>
 80102ba:	2301      	movs	r3, #1
 80102bc:	e000      	b.n	80102c0 <xQueueGenericSend+0x74>
 80102be:	2300      	movs	r3, #0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10a      	bne.n	80102da <xQueueGenericSend+0x8e>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	623b      	str	r3, [r7, #32]
}
 80102d6:	bf00      	nop
 80102d8:	e7fe      	b.n	80102d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102da:	f001 f9e7 	bl	80116ac <xTaskGetSchedulerState>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d102      	bne.n	80102ea <xQueueGenericSend+0x9e>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d101      	bne.n	80102ee <xQueueGenericSend+0xa2>
 80102ea:	2301      	movs	r3, #1
 80102ec:	e000      	b.n	80102f0 <xQueueGenericSend+0xa4>
 80102ee:	2300      	movs	r3, #0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10a      	bne.n	801030a <xQueueGenericSend+0xbe>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	61fb      	str	r3, [r7, #28]
}
 8010306:	bf00      	nop
 8010308:	e7fe      	b.n	8010308 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801030a:	f001 ff2b 	bl	8012164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010316:	429a      	cmp	r2, r3
 8010318:	d302      	bcc.n	8010320 <xQueueGenericSend+0xd4>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	2b02      	cmp	r3, #2
 801031e:	d129      	bne.n	8010374 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010320:	683a      	ldr	r2, [r7, #0]
 8010322:	68b9      	ldr	r1, [r7, #8]
 8010324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010326:	f000 fa0b 	bl	8010740 <prvCopyDataToQueue>
 801032a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010330:	2b00      	cmp	r3, #0
 8010332:	d010      	beq.n	8010356 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010336:	3324      	adds	r3, #36	; 0x24
 8010338:	4618      	mov	r0, r3
 801033a:	f000 fff5 	bl	8011328 <xTaskRemoveFromEventList>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d013      	beq.n	801036c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010344:	4b3f      	ldr	r3, [pc, #252]	; (8010444 <xQueueGenericSend+0x1f8>)
 8010346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801034a:	601a      	str	r2, [r3, #0]
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	e00a      	b.n	801036c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010358:	2b00      	cmp	r3, #0
 801035a:	d007      	beq.n	801036c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801035c:	4b39      	ldr	r3, [pc, #228]	; (8010444 <xQueueGenericSend+0x1f8>)
 801035e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801036c:	f001 ff2a 	bl	80121c4 <vPortExitCritical>
				return pdPASS;
 8010370:	2301      	movs	r3, #1
 8010372:	e063      	b.n	801043c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d103      	bne.n	8010382 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801037a:	f001 ff23 	bl	80121c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801037e:	2300      	movs	r3, #0
 8010380:	e05c      	b.n	801043c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010384:	2b00      	cmp	r3, #0
 8010386:	d106      	bne.n	8010396 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010388:	f107 0314 	add.w	r3, r7, #20
 801038c:	4618      	mov	r0, r3
 801038e:	f001 f82f 	bl	80113f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010392:	2301      	movs	r3, #1
 8010394:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010396:	f001 ff15 	bl	80121c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801039a:	f000 fd9b 	bl	8010ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801039e:	f001 fee1 	bl	8012164 <vPortEnterCritical>
 80103a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103a8:	b25b      	sxtb	r3, r3
 80103aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ae:	d103      	bne.n	80103b8 <xQueueGenericSend+0x16c>
 80103b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b2:	2200      	movs	r2, #0
 80103b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103be:	b25b      	sxtb	r3, r3
 80103c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c4:	d103      	bne.n	80103ce <xQueueGenericSend+0x182>
 80103c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c8:	2200      	movs	r2, #0
 80103ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103ce:	f001 fef9 	bl	80121c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103d2:	1d3a      	adds	r2, r7, #4
 80103d4:	f107 0314 	add.w	r3, r7, #20
 80103d8:	4611      	mov	r1, r2
 80103da:	4618      	mov	r0, r3
 80103dc:	f001 f81e 	bl	801141c <xTaskCheckForTimeOut>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d124      	bne.n	8010430 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80103e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103e8:	f000 faa2 	bl	8010930 <prvIsQueueFull>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d018      	beq.n	8010424 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80103f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f4:	3310      	adds	r3, #16
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	4611      	mov	r1, r2
 80103fa:	4618      	mov	r0, r3
 80103fc:	f000 ff44 	bl	8011288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010402:	f000 fa2d 	bl	8010860 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010406:	f000 fd73 	bl	8010ef0 <xTaskResumeAll>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	f47f af7c 	bne.w	801030a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010412:	4b0c      	ldr	r3, [pc, #48]	; (8010444 <xQueueGenericSend+0x1f8>)
 8010414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010418:	601a      	str	r2, [r3, #0]
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	f3bf 8f6f 	isb	sy
 8010422:	e772      	b.n	801030a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010426:	f000 fa1b 	bl	8010860 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801042a:	f000 fd61 	bl	8010ef0 <xTaskResumeAll>
 801042e:	e76c      	b.n	801030a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010432:	f000 fa15 	bl	8010860 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010436:	f000 fd5b 	bl	8010ef0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801043a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801043c:	4618      	mov	r0, r3
 801043e:	3738      	adds	r7, #56	; 0x38
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	e000ed04 	.word	0xe000ed04

08010448 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b090      	sub	sp, #64	; 0x40
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10a      	bne.n	8010476 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010464:	f383 8811 	msr	BASEPRI, r3
 8010468:	f3bf 8f6f 	isb	sy
 801046c:	f3bf 8f4f 	dsb	sy
 8010470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010472:	bf00      	nop
 8010474:	e7fe      	b.n	8010474 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d103      	bne.n	8010484 <xQueueGenericSendFromISR+0x3c>
 801047c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <xQueueGenericSendFromISR+0x40>
 8010484:	2301      	movs	r3, #1
 8010486:	e000      	b.n	801048a <xQueueGenericSendFromISR+0x42>
 8010488:	2300      	movs	r3, #0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10a      	bne.n	80104a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010492:	f383 8811 	msr	BASEPRI, r3
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104a0:	bf00      	nop
 80104a2:	e7fe      	b.n	80104a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	d103      	bne.n	80104b2 <xQueueGenericSendFromISR+0x6a>
 80104aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d101      	bne.n	80104b6 <xQueueGenericSendFromISR+0x6e>
 80104b2:	2301      	movs	r3, #1
 80104b4:	e000      	b.n	80104b8 <xQueueGenericSendFromISR+0x70>
 80104b6:	2300      	movs	r3, #0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d10a      	bne.n	80104d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80104bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c0:	f383 8811 	msr	BASEPRI, r3
 80104c4:	f3bf 8f6f 	isb	sy
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	623b      	str	r3, [r7, #32]
}
 80104ce:	bf00      	nop
 80104d0:	e7fe      	b.n	80104d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104d2:	f001 ff29 	bl	8012328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80104d6:	f3ef 8211 	mrs	r2, BASEPRI
 80104da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	61fa      	str	r2, [r7, #28]
 80104ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80104ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80104f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80104f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d302      	bcc.n	8010504 <xQueueGenericSendFromISR+0xbc>
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d12f      	bne.n	8010564 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801050a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010512:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	68b9      	ldr	r1, [r7, #8]
 8010518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801051a:	f000 f911 	bl	8010740 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801051e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010526:	d112      	bne.n	801054e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052c:	2b00      	cmp	r3, #0
 801052e:	d016      	beq.n	801055e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010532:	3324      	adds	r3, #36	; 0x24
 8010534:	4618      	mov	r0, r3
 8010536:	f000 fef7 	bl	8011328 <xTaskRemoveFromEventList>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00e      	beq.n	801055e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00b      	beq.n	801055e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2201      	movs	r2, #1
 801054a:	601a      	str	r2, [r3, #0]
 801054c:	e007      	b.n	801055e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801054e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010552:	3301      	adds	r3, #1
 8010554:	b2db      	uxtb	r3, r3
 8010556:	b25a      	sxtb	r2, r3
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801055e:	2301      	movs	r3, #1
 8010560:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010562:	e001      	b.n	8010568 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010564:	2300      	movs	r3, #0
 8010566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010572:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010576:	4618      	mov	r0, r3
 8010578:	3740      	adds	r7, #64	; 0x40
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
	...

08010580 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b08c      	sub	sp, #48	; 0x30
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801058c:	2300      	movs	r3, #0
 801058e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010596:	2b00      	cmp	r3, #0
 8010598:	d10a      	bne.n	80105b0 <xQueueReceive+0x30>
	__asm volatile
 801059a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059e:	f383 8811 	msr	BASEPRI, r3
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	f3bf 8f4f 	dsb	sy
 80105aa:	623b      	str	r3, [r7, #32]
}
 80105ac:	bf00      	nop
 80105ae:	e7fe      	b.n	80105ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d103      	bne.n	80105be <xQueueReceive+0x3e>
 80105b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <xQueueReceive+0x42>
 80105be:	2301      	movs	r3, #1
 80105c0:	e000      	b.n	80105c4 <xQueueReceive+0x44>
 80105c2:	2300      	movs	r3, #0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d10a      	bne.n	80105de <xQueueReceive+0x5e>
	__asm volatile
 80105c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	61fb      	str	r3, [r7, #28]
}
 80105da:	bf00      	nop
 80105dc:	e7fe      	b.n	80105dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105de:	f001 f865 	bl	80116ac <xTaskGetSchedulerState>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d102      	bne.n	80105ee <xQueueReceive+0x6e>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d101      	bne.n	80105f2 <xQueueReceive+0x72>
 80105ee:	2301      	movs	r3, #1
 80105f0:	e000      	b.n	80105f4 <xQueueReceive+0x74>
 80105f2:	2300      	movs	r3, #0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10a      	bne.n	801060e <xQueueReceive+0x8e>
	__asm volatile
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	61bb      	str	r3, [r7, #24]
}
 801060a:	bf00      	nop
 801060c:	e7fe      	b.n	801060c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801060e:	f001 fda9 	bl	8012164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010616:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061a:	2b00      	cmp	r3, #0
 801061c:	d01f      	beq.n	801065e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801061e:	68b9      	ldr	r1, [r7, #8]
 8010620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010622:	f000 f8f7 	bl	8010814 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	1e5a      	subs	r2, r3, #1
 801062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00f      	beq.n	8010656 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010638:	3310      	adds	r3, #16
 801063a:	4618      	mov	r0, r3
 801063c:	f000 fe74 	bl	8011328 <xTaskRemoveFromEventList>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d007      	beq.n	8010656 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010646:	4b3d      	ldr	r3, [pc, #244]	; (801073c <xQueueReceive+0x1bc>)
 8010648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010656:	f001 fdb5 	bl	80121c4 <vPortExitCritical>
				return pdPASS;
 801065a:	2301      	movs	r3, #1
 801065c:	e069      	b.n	8010732 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d103      	bne.n	801066c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010664:	f001 fdae 	bl	80121c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010668:	2300      	movs	r3, #0
 801066a:	e062      	b.n	8010732 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	2b00      	cmp	r3, #0
 8010670:	d106      	bne.n	8010680 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010672:	f107 0310 	add.w	r3, r7, #16
 8010676:	4618      	mov	r0, r3
 8010678:	f000 feba 	bl	80113f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801067c:	2301      	movs	r3, #1
 801067e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010680:	f001 fda0 	bl	80121c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010684:	f000 fc26 	bl	8010ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010688:	f001 fd6c 	bl	8012164 <vPortEnterCritical>
 801068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010692:	b25b      	sxtb	r3, r3
 8010694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010698:	d103      	bne.n	80106a2 <xQueueReceive+0x122>
 801069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069c:	2200      	movs	r2, #0
 801069e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106a8:	b25b      	sxtb	r3, r3
 80106aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ae:	d103      	bne.n	80106b8 <xQueueReceive+0x138>
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	2200      	movs	r2, #0
 80106b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106b8:	f001 fd84 	bl	80121c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106bc:	1d3a      	adds	r2, r7, #4
 80106be:	f107 0310 	add.w	r3, r7, #16
 80106c2:	4611      	mov	r1, r2
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 fea9 	bl	801141c <xTaskCheckForTimeOut>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d123      	bne.n	8010718 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106d2:	f000 f917 	bl	8010904 <prvIsQueueEmpty>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d017      	beq.n	801070c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106de:	3324      	adds	r3, #36	; 0x24
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	4611      	mov	r1, r2
 80106e4:	4618      	mov	r0, r3
 80106e6:	f000 fdcf 	bl	8011288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106ec:	f000 f8b8 	bl	8010860 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106f0:	f000 fbfe 	bl	8010ef0 <xTaskResumeAll>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d189      	bne.n	801060e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80106fa:	4b10      	ldr	r3, [pc, #64]	; (801073c <xQueueReceive+0x1bc>)
 80106fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010700:	601a      	str	r2, [r3, #0]
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	e780      	b.n	801060e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801070c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801070e:	f000 f8a7 	bl	8010860 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010712:	f000 fbed 	bl	8010ef0 <xTaskResumeAll>
 8010716:	e77a      	b.n	801060e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801071a:	f000 f8a1 	bl	8010860 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801071e:	f000 fbe7 	bl	8010ef0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010724:	f000 f8ee 	bl	8010904 <prvIsQueueEmpty>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	f43f af6f 	beq.w	801060e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010730:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010732:	4618      	mov	r0, r3
 8010734:	3730      	adds	r7, #48	; 0x30
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	e000ed04 	.word	0xe000ed04

08010740 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801074c:	2300      	movs	r3, #0
 801074e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010754:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10d      	bne.n	801077a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d14d      	bne.n	8010802 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	689b      	ldr	r3, [r3, #8]
 801076a:	4618      	mov	r0, r3
 801076c:	f000 ffbc 	bl	80116e8 <xTaskPriorityDisinherit>
 8010770:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	609a      	str	r2, [r3, #8]
 8010778:	e043      	b.n	8010802 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d119      	bne.n	80107b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6858      	ldr	r0, [r3, #4]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010788:	461a      	mov	r2, r3
 801078a:	68b9      	ldr	r1, [r7, #8]
 801078c:	f003 f897 	bl	80138be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010798:	441a      	add	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d32b      	bcc.n	8010802 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	605a      	str	r2, [r3, #4]
 80107b2:	e026      	b.n	8010802 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68d8      	ldr	r0, [r3, #12]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107bc:	461a      	mov	r2, r3
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	f003 f87d 	bl	80138be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	68da      	ldr	r2, [r3, #12]
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107cc:	425b      	negs	r3, r3
 80107ce:	441a      	add	r2, r3
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	68da      	ldr	r2, [r3, #12]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d207      	bcs.n	80107f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	689a      	ldr	r2, [r3, #8]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107e8:	425b      	negs	r3, r3
 80107ea:	441a      	add	r2, r3
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d105      	bne.n	8010802 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d002      	beq.n	8010802 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	3b01      	subs	r3, #1
 8010800:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	1c5a      	adds	r2, r3, #1
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801080a:	697b      	ldr	r3, [r7, #20]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3718      	adds	r7, #24
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010822:	2b00      	cmp	r3, #0
 8010824:	d018      	beq.n	8010858 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68da      	ldr	r2, [r3, #12]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082e:	441a      	add	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	68da      	ldr	r2, [r3, #12]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	689b      	ldr	r3, [r3, #8]
 801083c:	429a      	cmp	r2, r3
 801083e:	d303      	bcc.n	8010848 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	68d9      	ldr	r1, [r3, #12]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010850:	461a      	mov	r2, r3
 8010852:	6838      	ldr	r0, [r7, #0]
 8010854:	f003 f833 	bl	80138be <memcpy>
	}
}
 8010858:	bf00      	nop
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010868:	f001 fc7c 	bl	8012164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010872:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010874:	e011      	b.n	801089a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087a:	2b00      	cmp	r3, #0
 801087c:	d012      	beq.n	80108a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	3324      	adds	r3, #36	; 0x24
 8010882:	4618      	mov	r0, r3
 8010884:	f000 fd50 	bl	8011328 <xTaskRemoveFromEventList>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d001      	beq.n	8010892 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801088e:	f000 fe27 	bl	80114e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010892:	7bfb      	ldrb	r3, [r7, #15]
 8010894:	3b01      	subs	r3, #1
 8010896:	b2db      	uxtb	r3, r3
 8010898:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	dce9      	bgt.n	8010876 <prvUnlockQueue+0x16>
 80108a2:	e000      	b.n	80108a6 <prvUnlockQueue+0x46>
					break;
 80108a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	22ff      	movs	r2, #255	; 0xff
 80108aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108ae:	f001 fc89 	bl	80121c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108b2:	f001 fc57 	bl	8012164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108be:	e011      	b.n	80108e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d012      	beq.n	80108ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	3310      	adds	r3, #16
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 fd2b 	bl	8011328 <xTaskRemoveFromEventList>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d001      	beq.n	80108dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80108d8:	f000 fe02 	bl	80114e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80108dc:	7bbb      	ldrb	r3, [r7, #14]
 80108de:	3b01      	subs	r3, #1
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	dce9      	bgt.n	80108c0 <prvUnlockQueue+0x60>
 80108ec:	e000      	b.n	80108f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80108ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	22ff      	movs	r2, #255	; 0xff
 80108f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80108f8:	f001 fc64 	bl	80121c4 <vPortExitCritical>
}
 80108fc:	bf00      	nop
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801090c:	f001 fc2a 	bl	8012164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010914:	2b00      	cmp	r3, #0
 8010916:	d102      	bne.n	801091e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010918:	2301      	movs	r3, #1
 801091a:	60fb      	str	r3, [r7, #12]
 801091c:	e001      	b.n	8010922 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801091e:	2300      	movs	r3, #0
 8010920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010922:	f001 fc4f 	bl	80121c4 <vPortExitCritical>

	return xReturn;
 8010926:	68fb      	ldr	r3, [r7, #12]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010938:	f001 fc14 	bl	8012164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010944:	429a      	cmp	r2, r3
 8010946:	d102      	bne.n	801094e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010948:	2301      	movs	r3, #1
 801094a:	60fb      	str	r3, [r7, #12]
 801094c:	e001      	b.n	8010952 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801094e:	2300      	movs	r3, #0
 8010950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010952:	f001 fc37 	bl	80121c4 <vPortExitCritical>

	return xReturn;
 8010956:	68fb      	ldr	r3, [r7, #12]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801096a:	2300      	movs	r3, #0
 801096c:	60fb      	str	r3, [r7, #12]
 801096e:	e014      	b.n	801099a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010970:	4a0f      	ldr	r2, [pc, #60]	; (80109b0 <vQueueAddToRegistry+0x50>)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d10b      	bne.n	8010994 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801097c:	490c      	ldr	r1, [pc, #48]	; (80109b0 <vQueueAddToRegistry+0x50>)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010986:	4a0a      	ldr	r2, [pc, #40]	; (80109b0 <vQueueAddToRegistry+0x50>)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	00db      	lsls	r3, r3, #3
 801098c:	4413      	add	r3, r2
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010992:	e006      	b.n	80109a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	3301      	adds	r3, #1
 8010998:	60fb      	str	r3, [r7, #12]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2b07      	cmp	r3, #7
 801099e:	d9e7      	bls.n	8010970 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80109a0:	bf00      	nop
 80109a2:	bf00      	nop
 80109a4:	3714      	adds	r7, #20
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	20004650 	.word	0x20004650

080109b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80109c4:	f001 fbce 	bl	8012164 <vPortEnterCritical>
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109ce:	b25b      	sxtb	r3, r3
 80109d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d4:	d103      	bne.n	80109de <vQueueWaitForMessageRestricted+0x2a>
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	2200      	movs	r2, #0
 80109da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109e4:	b25b      	sxtb	r3, r3
 80109e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ea:	d103      	bne.n	80109f4 <vQueueWaitForMessageRestricted+0x40>
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109f4:	f001 fbe6 	bl	80121c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d106      	bne.n	8010a0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	3324      	adds	r3, #36	; 0x24
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	68b9      	ldr	r1, [r7, #8]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 fc61 	bl	80112d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a0e:	6978      	ldr	r0, [r7, #20]
 8010a10:	f7ff ff26 	bl	8010860 <prvUnlockQueue>
	}
 8010a14:	bf00      	nop
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b08e      	sub	sp, #56	; 0x38
 8010a20:	af04      	add	r7, sp, #16
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10a      	bne.n	8010a46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a34:	f383 8811 	msr	BASEPRI, r3
 8010a38:	f3bf 8f6f 	isb	sy
 8010a3c:	f3bf 8f4f 	dsb	sy
 8010a40:	623b      	str	r3, [r7, #32]
}
 8010a42:	bf00      	nop
 8010a44:	e7fe      	b.n	8010a44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d10a      	bne.n	8010a62 <xTaskCreateStatic+0x46>
	__asm volatile
 8010a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	61fb      	str	r3, [r7, #28]
}
 8010a5e:	bf00      	nop
 8010a60:	e7fe      	b.n	8010a60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a62:	23bc      	movs	r3, #188	; 0xbc
 8010a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	2bbc      	cmp	r3, #188	; 0xbc
 8010a6a:	d00a      	beq.n	8010a82 <xTaskCreateStatic+0x66>
	__asm volatile
 8010a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a70:	f383 8811 	msr	BASEPRI, r3
 8010a74:	f3bf 8f6f 	isb	sy
 8010a78:	f3bf 8f4f 	dsb	sy
 8010a7c:	61bb      	str	r3, [r7, #24]
}
 8010a7e:	bf00      	nop
 8010a80:	e7fe      	b.n	8010a80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010a82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d01e      	beq.n	8010ac8 <xTaskCreateStatic+0xac>
 8010a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d01b      	beq.n	8010ac8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	9303      	str	r3, [sp, #12]
 8010aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa8:	9302      	str	r3, [sp, #8]
 8010aaa:	f107 0314 	add.w	r3, r7, #20
 8010aae:	9301      	str	r3, [sp, #4]
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab2:	9300      	str	r3, [sp, #0]
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	68b9      	ldr	r1, [r7, #8]
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f000 f850 	bl	8010b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ac2:	f000 f8f3 	bl	8010cac <prvAddNewTaskToReadyList>
 8010ac6:	e001      	b.n	8010acc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010acc:	697b      	ldr	r3, [r7, #20]
	}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3728      	adds	r7, #40	; 0x28
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b08c      	sub	sp, #48	; 0x30
 8010ada:	af04      	add	r7, sp, #16
 8010adc:	60f8      	str	r0, [r7, #12]
 8010ade:	60b9      	str	r1, [r7, #8]
 8010ae0:	603b      	str	r3, [r7, #0]
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ae6:	88fb      	ldrh	r3, [r7, #6]
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f001 fc5c 	bl	80123a8 <pvPortMalloc>
 8010af0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00e      	beq.n	8010b16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010af8:	20bc      	movs	r0, #188	; 0xbc
 8010afa:	f001 fc55 	bl	80123a8 <pvPortMalloc>
 8010afe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d003      	beq.n	8010b0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8010b0c:	e005      	b.n	8010b1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b0e:	6978      	ldr	r0, [r7, #20]
 8010b10:	f001 fd16 	bl	8012540 <vPortFree>
 8010b14:	e001      	b.n	8010b1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b16:	2300      	movs	r3, #0
 8010b18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d017      	beq.n	8010b50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b28:	88fa      	ldrh	r2, [r7, #6]
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	9303      	str	r3, [sp, #12]
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	9302      	str	r3, [sp, #8]
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	9301      	str	r3, [sp, #4]
 8010b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b38:	9300      	str	r3, [sp, #0]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	68b9      	ldr	r1, [r7, #8]
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f000 f80e 	bl	8010b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b44:	69f8      	ldr	r0, [r7, #28]
 8010b46:	f000 f8b1 	bl	8010cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	61bb      	str	r3, [r7, #24]
 8010b4e:	e002      	b.n	8010b56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b50:	f04f 33ff 	mov.w	r3, #4294967295
 8010b54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b56:	69bb      	ldr	r3, [r7, #24]
	}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3720      	adds	r7, #32
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b088      	sub	sp, #32
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	461a      	mov	r2, r3
 8010b78:	21a5      	movs	r1, #165	; 0xa5
 8010b7a:	f002 fec8 	bl	801390e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	f023 0307 	bic.w	r3, r3, #7
 8010b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	f003 0307 	and.w	r3, r3, #7
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00a      	beq.n	8010bb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba6:	f383 8811 	msr	BASEPRI, r3
 8010baa:	f3bf 8f6f 	isb	sy
 8010bae:	f3bf 8f4f 	dsb	sy
 8010bb2:	617b      	str	r3, [r7, #20]
}
 8010bb4:	bf00      	nop
 8010bb6:	e7fe      	b.n	8010bb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d01f      	beq.n	8010bfe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	61fb      	str	r3, [r7, #28]
 8010bc2:	e012      	b.n	8010bea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	4413      	add	r3, r2
 8010bca:	7819      	ldrb	r1, [r3, #0]
 8010bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	3334      	adds	r3, #52	; 0x34
 8010bd4:	460a      	mov	r2, r1
 8010bd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	4413      	add	r3, r2
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d006      	beq.n	8010bf2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	3301      	adds	r3, #1
 8010be8:	61fb      	str	r3, [r7, #28]
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	2b0f      	cmp	r3, #15
 8010bee:	d9e9      	bls.n	8010bc4 <prvInitialiseNewTask+0x64>
 8010bf0:	e000      	b.n	8010bf4 <prvInitialiseNewTask+0x94>
			{
				break;
 8010bf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010bfc:	e003      	b.n	8010c06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c00:	2200      	movs	r2, #0
 8010c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c08:	2b37      	cmp	r3, #55	; 0x37
 8010c0a:	d901      	bls.n	8010c10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c0c:	2337      	movs	r3, #55	; 0x37
 8010c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1e:	2200      	movs	r2, #0
 8010c20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c24:	3304      	adds	r3, #4
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7ff f978 	bl	800ff1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	3318      	adds	r3, #24
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff f973 	bl	800ff1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c56:	2200      	movs	r2, #0
 8010c58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	3354      	adds	r3, #84	; 0x54
 8010c60:	2260      	movs	r2, #96	; 0x60
 8010c62:	2100      	movs	r1, #0
 8010c64:	4618      	mov	r0, r3
 8010c66:	f002 fe52 	bl	801390e <memset>
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	4a0c      	ldr	r2, [pc, #48]	; (8010ca0 <prvInitialiseNewTask+0x140>)
 8010c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8010c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c72:	4a0c      	ldr	r2, [pc, #48]	; (8010ca4 <prvInitialiseNewTask+0x144>)
 8010c74:	65da      	str	r2, [r3, #92]	; 0x5c
 8010c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c78:	4a0b      	ldr	r2, [pc, #44]	; (8010ca8 <prvInitialiseNewTask+0x148>)
 8010c7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	68f9      	ldr	r1, [r7, #12]
 8010c80:	69b8      	ldr	r0, [r7, #24]
 8010c82:	f001 f941 	bl	8011f08 <pxPortInitialiseStack>
 8010c86:	4602      	mov	r2, r0
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d002      	beq.n	8010c98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c98:	bf00      	nop
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	08016b78 	.word	0x08016b78
 8010ca4:	08016b98 	.word	0x08016b98
 8010ca8:	08016b58 	.word	0x08016b58

08010cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cb4:	f001 fa56 	bl	8012164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cb8:	4b2d      	ldr	r3, [pc, #180]	; (8010d70 <prvAddNewTaskToReadyList+0xc4>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	4a2c      	ldr	r2, [pc, #176]	; (8010d70 <prvAddNewTaskToReadyList+0xc4>)
 8010cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010cc2:	4b2c      	ldr	r3, [pc, #176]	; (8010d74 <prvAddNewTaskToReadyList+0xc8>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d109      	bne.n	8010cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010cca:	4a2a      	ldr	r2, [pc, #168]	; (8010d74 <prvAddNewTaskToReadyList+0xc8>)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010cd0:	4b27      	ldr	r3, [pc, #156]	; (8010d70 <prvAddNewTaskToReadyList+0xc4>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d110      	bne.n	8010cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010cd8:	f000 fc26 	bl	8011528 <prvInitialiseTaskLists>
 8010cdc:	e00d      	b.n	8010cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010cde:	4b26      	ldr	r3, [pc, #152]	; (8010d78 <prvAddNewTaskToReadyList+0xcc>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d109      	bne.n	8010cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ce6:	4b23      	ldr	r3, [pc, #140]	; (8010d74 <prvAddNewTaskToReadyList+0xc8>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d802      	bhi.n	8010cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010cf4:	4a1f      	ldr	r2, [pc, #124]	; (8010d74 <prvAddNewTaskToReadyList+0xc8>)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010cfa:	4b20      	ldr	r3, [pc, #128]	; (8010d7c <prvAddNewTaskToReadyList+0xd0>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	4a1e      	ldr	r2, [pc, #120]	; (8010d7c <prvAddNewTaskToReadyList+0xd0>)
 8010d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d04:	4b1d      	ldr	r3, [pc, #116]	; (8010d7c <prvAddNewTaskToReadyList+0xd0>)
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d10:	4b1b      	ldr	r3, [pc, #108]	; (8010d80 <prvAddNewTaskToReadyList+0xd4>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d903      	bls.n	8010d20 <prvAddNewTaskToReadyList+0x74>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1c:	4a18      	ldr	r2, [pc, #96]	; (8010d80 <prvAddNewTaskToReadyList+0xd4>)
 8010d1e:	6013      	str	r3, [r2, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d24:	4613      	mov	r3, r2
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	4a15      	ldr	r2, [pc, #84]	; (8010d84 <prvAddNewTaskToReadyList+0xd8>)
 8010d2e:	441a      	add	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	3304      	adds	r3, #4
 8010d34:	4619      	mov	r1, r3
 8010d36:	4610      	mov	r0, r2
 8010d38:	f7ff f8fd 	bl	800ff36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d3c:	f001 fa42 	bl	80121c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d40:	4b0d      	ldr	r3, [pc, #52]	; (8010d78 <prvAddNewTaskToReadyList+0xcc>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00e      	beq.n	8010d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d48:	4b0a      	ldr	r3, [pc, #40]	; (8010d74 <prvAddNewTaskToReadyList+0xc8>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d207      	bcs.n	8010d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d56:	4b0c      	ldr	r3, [pc, #48]	; (8010d88 <prvAddNewTaskToReadyList+0xdc>)
 8010d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d66:	bf00      	nop
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	20004b64 	.word	0x20004b64
 8010d74:	20004690 	.word	0x20004690
 8010d78:	20004b70 	.word	0x20004b70
 8010d7c:	20004b80 	.word	0x20004b80
 8010d80:	20004b6c 	.word	0x20004b6c
 8010d84:	20004694 	.word	0x20004694
 8010d88:	e000ed04 	.word	0xe000ed04

08010d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d017      	beq.n	8010dce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010d9e:	4b13      	ldr	r3, [pc, #76]	; (8010dec <vTaskDelay+0x60>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00a      	beq.n	8010dbc <vTaskDelay+0x30>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	60bb      	str	r3, [r7, #8]
}
 8010db8:	bf00      	nop
 8010dba:	e7fe      	b.n	8010dba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010dbc:	f000 f88a 	bl	8010ed4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fcfe 	bl	80117c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010dc8:	f000 f892 	bl	8010ef0 <xTaskResumeAll>
 8010dcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d107      	bne.n	8010de4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010dd4:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <vTaskDelay+0x64>)
 8010dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dda:	601a      	str	r2, [r3, #0]
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010de4:	bf00      	nop
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20004b8c 	.word	0x20004b8c
 8010df0:	e000ed04 	.word	0xe000ed04

08010df4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b08a      	sub	sp, #40	; 0x28
 8010df8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e02:	463a      	mov	r2, r7
 8010e04:	1d39      	adds	r1, r7, #4
 8010e06:	f107 0308 	add.w	r3, r7, #8
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7ff f832 	bl	800fe74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e10:	6839      	ldr	r1, [r7, #0]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68ba      	ldr	r2, [r7, #8]
 8010e16:	9202      	str	r2, [sp, #8]
 8010e18:	9301      	str	r3, [sp, #4]
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	9300      	str	r3, [sp, #0]
 8010e1e:	2300      	movs	r3, #0
 8010e20:	460a      	mov	r2, r1
 8010e22:	4924      	ldr	r1, [pc, #144]	; (8010eb4 <vTaskStartScheduler+0xc0>)
 8010e24:	4824      	ldr	r0, [pc, #144]	; (8010eb8 <vTaskStartScheduler+0xc4>)
 8010e26:	f7ff fdf9 	bl	8010a1c <xTaskCreateStatic>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	4a23      	ldr	r2, [pc, #140]	; (8010ebc <vTaskStartScheduler+0xc8>)
 8010e2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e30:	4b22      	ldr	r3, [pc, #136]	; (8010ebc <vTaskStartScheduler+0xc8>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	617b      	str	r3, [r7, #20]
 8010e3c:	e001      	b.n	8010e42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d102      	bne.n	8010e4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e48:	f000 fd10 	bl	801186c <xTimerCreateTimerTask>
 8010e4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d11b      	bne.n	8010e8c <vTaskStartScheduler+0x98>
	__asm volatile
 8010e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e58:	f383 8811 	msr	BASEPRI, r3
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	f3bf 8f4f 	dsb	sy
 8010e64:	613b      	str	r3, [r7, #16]
}
 8010e66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010e68:	4b15      	ldr	r3, [pc, #84]	; (8010ec0 <vTaskStartScheduler+0xcc>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	3354      	adds	r3, #84	; 0x54
 8010e6e:	4a15      	ldr	r2, [pc, #84]	; (8010ec4 <vTaskStartScheduler+0xd0>)
 8010e70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010e72:	4b15      	ldr	r3, [pc, #84]	; (8010ec8 <vTaskStartScheduler+0xd4>)
 8010e74:	f04f 32ff 	mov.w	r2, #4294967295
 8010e78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e7a:	4b14      	ldr	r3, [pc, #80]	; (8010ecc <vTaskStartScheduler+0xd8>)
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010e80:	4b13      	ldr	r3, [pc, #76]	; (8010ed0 <vTaskStartScheduler+0xdc>)
 8010e82:	2200      	movs	r2, #0
 8010e84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010e86:	f001 f8cb 	bl	8012020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010e8a:	e00e      	b.n	8010eaa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e92:	d10a      	bne.n	8010eaa <vTaskStartScheduler+0xb6>
	__asm volatile
 8010e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e98:	f383 8811 	msr	BASEPRI, r3
 8010e9c:	f3bf 8f6f 	isb	sy
 8010ea0:	f3bf 8f4f 	dsb	sy
 8010ea4:	60fb      	str	r3, [r7, #12]
}
 8010ea6:	bf00      	nop
 8010ea8:	e7fe      	b.n	8010ea8 <vTaskStartScheduler+0xb4>
}
 8010eaa:	bf00      	nop
 8010eac:	3718      	adds	r7, #24
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	08016794 	.word	0x08016794
 8010eb8:	080114f9 	.word	0x080114f9
 8010ebc:	20004b88 	.word	0x20004b88
 8010ec0:	20004690 	.word	0x20004690
 8010ec4:	20000318 	.word	0x20000318
 8010ec8:	20004b84 	.word	0x20004b84
 8010ecc:	20004b70 	.word	0x20004b70
 8010ed0:	20004b68 	.word	0x20004b68

08010ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010ed8:	4b04      	ldr	r3, [pc, #16]	; (8010eec <vTaskSuspendAll+0x18>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3301      	adds	r3, #1
 8010ede:	4a03      	ldr	r2, [pc, #12]	; (8010eec <vTaskSuspendAll+0x18>)
 8010ee0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010ee2:	bf00      	nop
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	20004b8c 	.word	0x20004b8c

08010ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010efa:	2300      	movs	r3, #0
 8010efc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010efe:	4b42      	ldr	r3, [pc, #264]	; (8011008 <xTaskResumeAll+0x118>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d10a      	bne.n	8010f1c <xTaskResumeAll+0x2c>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	603b      	str	r3, [r7, #0]
}
 8010f18:	bf00      	nop
 8010f1a:	e7fe      	b.n	8010f1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f1c:	f001 f922 	bl	8012164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f20:	4b39      	ldr	r3, [pc, #228]	; (8011008 <xTaskResumeAll+0x118>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	3b01      	subs	r3, #1
 8010f26:	4a38      	ldr	r2, [pc, #224]	; (8011008 <xTaskResumeAll+0x118>)
 8010f28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f2a:	4b37      	ldr	r3, [pc, #220]	; (8011008 <xTaskResumeAll+0x118>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d162      	bne.n	8010ff8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f32:	4b36      	ldr	r3, [pc, #216]	; (801100c <xTaskResumeAll+0x11c>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d05e      	beq.n	8010ff8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f3a:	e02f      	b.n	8010f9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f3c:	4b34      	ldr	r3, [pc, #208]	; (8011010 <xTaskResumeAll+0x120>)
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	3318      	adds	r3, #24
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7ff f851 	bl	800fff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	3304      	adds	r3, #4
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ff f84c 	bl	800fff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f5c:	4b2d      	ldr	r3, [pc, #180]	; (8011014 <xTaskResumeAll+0x124>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d903      	bls.n	8010f6c <xTaskResumeAll+0x7c>
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f68:	4a2a      	ldr	r2, [pc, #168]	; (8011014 <xTaskResumeAll+0x124>)
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f70:	4613      	mov	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	4a27      	ldr	r2, [pc, #156]	; (8011018 <xTaskResumeAll+0x128>)
 8010f7a:	441a      	add	r2, r3
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	3304      	adds	r3, #4
 8010f80:	4619      	mov	r1, r3
 8010f82:	4610      	mov	r0, r2
 8010f84:	f7fe ffd7 	bl	800ff36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f8c:	4b23      	ldr	r3, [pc, #140]	; (801101c <xTaskResumeAll+0x12c>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d302      	bcc.n	8010f9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010f96:	4b22      	ldr	r3, [pc, #136]	; (8011020 <xTaskResumeAll+0x130>)
 8010f98:	2201      	movs	r2, #1
 8010f9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f9c:	4b1c      	ldr	r3, [pc, #112]	; (8011010 <xTaskResumeAll+0x120>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1cb      	bne.n	8010f3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d001      	beq.n	8010fae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010faa:	f000 fb5f 	bl	801166c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010fae:	4b1d      	ldr	r3, [pc, #116]	; (8011024 <xTaskResumeAll+0x134>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d010      	beq.n	8010fdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010fba:	f000 f847 	bl	801104c <xTaskIncrementTick>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010fc4:	4b16      	ldr	r3, [pc, #88]	; (8011020 <xTaskResumeAll+0x130>)
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d1f1      	bne.n	8010fba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010fd6:	4b13      	ldr	r3, [pc, #76]	; (8011024 <xTaskResumeAll+0x134>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010fdc:	4b10      	ldr	r3, [pc, #64]	; (8011020 <xTaskResumeAll+0x130>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d009      	beq.n	8010ff8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	; (8011028 <xTaskResumeAll+0x138>)
 8010fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fee:	601a      	str	r2, [r3, #0]
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ff8:	f001 f8e4 	bl	80121c4 <vPortExitCritical>

	return xAlreadyYielded;
 8010ffc:	68bb      	ldr	r3, [r7, #8]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	20004b8c 	.word	0x20004b8c
 801100c:	20004b64 	.word	0x20004b64
 8011010:	20004b24 	.word	0x20004b24
 8011014:	20004b6c 	.word	0x20004b6c
 8011018:	20004694 	.word	0x20004694
 801101c:	20004690 	.word	0x20004690
 8011020:	20004b78 	.word	0x20004b78
 8011024:	20004b74 	.word	0x20004b74
 8011028:	e000ed04 	.word	0xe000ed04

0801102c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011032:	4b05      	ldr	r3, [pc, #20]	; (8011048 <xTaskGetTickCount+0x1c>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011038:	687b      	ldr	r3, [r7, #4]
}
 801103a:	4618      	mov	r0, r3
 801103c:	370c      	adds	r7, #12
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	20004b68 	.word	0x20004b68

0801104c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b086      	sub	sp, #24
 8011050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011052:	2300      	movs	r3, #0
 8011054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011056:	4b4f      	ldr	r3, [pc, #316]	; (8011194 <xTaskIncrementTick+0x148>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	f040 808f 	bne.w	801117e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011060:	4b4d      	ldr	r3, [pc, #308]	; (8011198 <xTaskIncrementTick+0x14c>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	3301      	adds	r3, #1
 8011066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011068:	4a4b      	ldr	r2, [pc, #300]	; (8011198 <xTaskIncrementTick+0x14c>)
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d120      	bne.n	80110b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011074:	4b49      	ldr	r3, [pc, #292]	; (801119c <xTaskIncrementTick+0x150>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00a      	beq.n	8011094 <xTaskIncrementTick+0x48>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	603b      	str	r3, [r7, #0]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <xTaskIncrementTick+0x46>
 8011094:	4b41      	ldr	r3, [pc, #260]	; (801119c <xTaskIncrementTick+0x150>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	60fb      	str	r3, [r7, #12]
 801109a:	4b41      	ldr	r3, [pc, #260]	; (80111a0 <xTaskIncrementTick+0x154>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4a3f      	ldr	r2, [pc, #252]	; (801119c <xTaskIncrementTick+0x150>)
 80110a0:	6013      	str	r3, [r2, #0]
 80110a2:	4a3f      	ldr	r2, [pc, #252]	; (80111a0 <xTaskIncrementTick+0x154>)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	6013      	str	r3, [r2, #0]
 80110a8:	4b3e      	ldr	r3, [pc, #248]	; (80111a4 <xTaskIncrementTick+0x158>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	3301      	adds	r3, #1
 80110ae:	4a3d      	ldr	r2, [pc, #244]	; (80111a4 <xTaskIncrementTick+0x158>)
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	f000 fadb 	bl	801166c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80110b6:	4b3c      	ldr	r3, [pc, #240]	; (80111a8 <xTaskIncrementTick+0x15c>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	693a      	ldr	r2, [r7, #16]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d349      	bcc.n	8011154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110c0:	4b36      	ldr	r3, [pc, #216]	; (801119c <xTaskIncrementTick+0x150>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d104      	bne.n	80110d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110ca:	4b37      	ldr	r3, [pc, #220]	; (80111a8 <xTaskIncrementTick+0x15c>)
 80110cc:	f04f 32ff 	mov.w	r2, #4294967295
 80110d0:	601a      	str	r2, [r3, #0]
					break;
 80110d2:	e03f      	b.n	8011154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110d4:	4b31      	ldr	r3, [pc, #196]	; (801119c <xTaskIncrementTick+0x150>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80110e4:	693a      	ldr	r2, [r7, #16]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d203      	bcs.n	80110f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80110ec:	4a2e      	ldr	r2, [pc, #184]	; (80111a8 <xTaskIncrementTick+0x15c>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80110f2:	e02f      	b.n	8011154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	3304      	adds	r3, #4
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fe ff79 	bl	800fff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011102:	2b00      	cmp	r3, #0
 8011104:	d004      	beq.n	8011110 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	3318      	adds	r3, #24
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe ff70 	bl	800fff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011114:	4b25      	ldr	r3, [pc, #148]	; (80111ac <xTaskIncrementTick+0x160>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	429a      	cmp	r2, r3
 801111a:	d903      	bls.n	8011124 <xTaskIncrementTick+0xd8>
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011120:	4a22      	ldr	r2, [pc, #136]	; (80111ac <xTaskIncrementTick+0x160>)
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011128:	4613      	mov	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4413      	add	r3, r2
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	4a1f      	ldr	r2, [pc, #124]	; (80111b0 <xTaskIncrementTick+0x164>)
 8011132:	441a      	add	r2, r3
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	3304      	adds	r3, #4
 8011138:	4619      	mov	r1, r3
 801113a:	4610      	mov	r0, r2
 801113c:	f7fe fefb 	bl	800ff36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011144:	4b1b      	ldr	r3, [pc, #108]	; (80111b4 <xTaskIncrementTick+0x168>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801114a:	429a      	cmp	r2, r3
 801114c:	d3b8      	bcc.n	80110c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801114e:	2301      	movs	r3, #1
 8011150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011152:	e7b5      	b.n	80110c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011154:	4b17      	ldr	r3, [pc, #92]	; (80111b4 <xTaskIncrementTick+0x168>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801115a:	4915      	ldr	r1, [pc, #84]	; (80111b0 <xTaskIncrementTick+0x164>)
 801115c:	4613      	mov	r3, r2
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4413      	add	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	440b      	add	r3, r1
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b01      	cmp	r3, #1
 801116a:	d901      	bls.n	8011170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801116c:	2301      	movs	r3, #1
 801116e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011170:	4b11      	ldr	r3, [pc, #68]	; (80111b8 <xTaskIncrementTick+0x16c>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d007      	beq.n	8011188 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011178:	2301      	movs	r3, #1
 801117a:	617b      	str	r3, [r7, #20]
 801117c:	e004      	b.n	8011188 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801117e:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <xTaskIncrementTick+0x170>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3301      	adds	r3, #1
 8011184:	4a0d      	ldr	r2, [pc, #52]	; (80111bc <xTaskIncrementTick+0x170>)
 8011186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011188:	697b      	ldr	r3, [r7, #20]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3718      	adds	r7, #24
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	20004b8c 	.word	0x20004b8c
 8011198:	20004b68 	.word	0x20004b68
 801119c:	20004b1c 	.word	0x20004b1c
 80111a0:	20004b20 	.word	0x20004b20
 80111a4:	20004b7c 	.word	0x20004b7c
 80111a8:	20004b84 	.word	0x20004b84
 80111ac:	20004b6c 	.word	0x20004b6c
 80111b0:	20004694 	.word	0x20004694
 80111b4:	20004690 	.word	0x20004690
 80111b8:	20004b78 	.word	0x20004b78
 80111bc:	20004b74 	.word	0x20004b74

080111c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111c6:	4b2a      	ldr	r3, [pc, #168]	; (8011270 <vTaskSwitchContext+0xb0>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d003      	beq.n	80111d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80111ce:	4b29      	ldr	r3, [pc, #164]	; (8011274 <vTaskSwitchContext+0xb4>)
 80111d0:	2201      	movs	r2, #1
 80111d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80111d4:	e046      	b.n	8011264 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80111d6:	4b27      	ldr	r3, [pc, #156]	; (8011274 <vTaskSwitchContext+0xb4>)
 80111d8:	2200      	movs	r2, #0
 80111da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111dc:	4b26      	ldr	r3, [pc, #152]	; (8011278 <vTaskSwitchContext+0xb8>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60fb      	str	r3, [r7, #12]
 80111e2:	e010      	b.n	8011206 <vTaskSwitchContext+0x46>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10a      	bne.n	8011200 <vTaskSwitchContext+0x40>
	__asm volatile
 80111ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	607b      	str	r3, [r7, #4]
}
 80111fc:	bf00      	nop
 80111fe:	e7fe      	b.n	80111fe <vTaskSwitchContext+0x3e>
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	3b01      	subs	r3, #1
 8011204:	60fb      	str	r3, [r7, #12]
 8011206:	491d      	ldr	r1, [pc, #116]	; (801127c <vTaskSwitchContext+0xbc>)
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	4613      	mov	r3, r2
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	4413      	add	r3, r2
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	440b      	add	r3, r1
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d0e4      	beq.n	80111e4 <vTaskSwitchContext+0x24>
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	4613      	mov	r3, r2
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	4a15      	ldr	r2, [pc, #84]	; (801127c <vTaskSwitchContext+0xbc>)
 8011226:	4413      	add	r3, r2
 8011228:	60bb      	str	r3, [r7, #8]
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	685a      	ldr	r2, [r3, #4]
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	605a      	str	r2, [r3, #4]
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	685a      	ldr	r2, [r3, #4]
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	3308      	adds	r3, #8
 801123c:	429a      	cmp	r2, r3
 801123e:	d104      	bne.n	801124a <vTaskSwitchContext+0x8a>
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	605a      	str	r2, [r3, #4]
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	4a0b      	ldr	r2, [pc, #44]	; (8011280 <vTaskSwitchContext+0xc0>)
 8011252:	6013      	str	r3, [r2, #0]
 8011254:	4a08      	ldr	r2, [pc, #32]	; (8011278 <vTaskSwitchContext+0xb8>)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801125a:	4b09      	ldr	r3, [pc, #36]	; (8011280 <vTaskSwitchContext+0xc0>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	3354      	adds	r3, #84	; 0x54
 8011260:	4a08      	ldr	r2, [pc, #32]	; (8011284 <vTaskSwitchContext+0xc4>)
 8011262:	6013      	str	r3, [r2, #0]
}
 8011264:	bf00      	nop
 8011266:	3714      	adds	r7, #20
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr
 8011270:	20004b8c 	.word	0x20004b8c
 8011274:	20004b78 	.word	0x20004b78
 8011278:	20004b6c 	.word	0x20004b6c
 801127c:	20004694 	.word	0x20004694
 8011280:	20004690 	.word	0x20004690
 8011284:	20000318 	.word	0x20000318

08011288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10a      	bne.n	80112ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	60fb      	str	r3, [r7, #12]
}
 80112aa:	bf00      	nop
 80112ac:	e7fe      	b.n	80112ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112ae:	4b07      	ldr	r3, [pc, #28]	; (80112cc <vTaskPlaceOnEventList+0x44>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	3318      	adds	r3, #24
 80112b4:	4619      	mov	r1, r3
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f7fe fe61 	bl	800ff7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80112bc:	2101      	movs	r1, #1
 80112be:	6838      	ldr	r0, [r7, #0]
 80112c0:	f000 fa80 	bl	80117c4 <prvAddCurrentTaskToDelayedList>
}
 80112c4:	bf00      	nop
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	20004690 	.word	0x20004690

080112d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d10a      	bne.n	80112f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80112e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e6:	f383 8811 	msr	BASEPRI, r3
 80112ea:	f3bf 8f6f 	isb	sy
 80112ee:	f3bf 8f4f 	dsb	sy
 80112f2:	617b      	str	r3, [r7, #20]
}
 80112f4:	bf00      	nop
 80112f6:	e7fe      	b.n	80112f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112f8:	4b0a      	ldr	r3, [pc, #40]	; (8011324 <vTaskPlaceOnEventListRestricted+0x54>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	3318      	adds	r3, #24
 80112fe:	4619      	mov	r1, r3
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f7fe fe18 	bl	800ff36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d002      	beq.n	8011312 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801130c:	f04f 33ff 	mov.w	r3, #4294967295
 8011310:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011312:	6879      	ldr	r1, [r7, #4]
 8011314:	68b8      	ldr	r0, [r7, #8]
 8011316:	f000 fa55 	bl	80117c4 <prvAddCurrentTaskToDelayedList>
	}
 801131a:	bf00      	nop
 801131c:	3718      	adds	r7, #24
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	20004690 	.word	0x20004690

08011328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b086      	sub	sp, #24
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d10a      	bne.n	8011354 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	60fb      	str	r3, [r7, #12]
}
 8011350:	bf00      	nop
 8011352:	e7fe      	b.n	8011352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	3318      	adds	r3, #24
 8011358:	4618      	mov	r0, r3
 801135a:	f7fe fe49 	bl	800fff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801135e:	4b1e      	ldr	r3, [pc, #120]	; (80113d8 <xTaskRemoveFromEventList+0xb0>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d11d      	bne.n	80113a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	3304      	adds	r3, #4
 801136a:	4618      	mov	r0, r3
 801136c:	f7fe fe40 	bl	800fff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011374:	4b19      	ldr	r3, [pc, #100]	; (80113dc <xTaskRemoveFromEventList+0xb4>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	429a      	cmp	r2, r3
 801137a:	d903      	bls.n	8011384 <xTaskRemoveFromEventList+0x5c>
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011380:	4a16      	ldr	r2, [pc, #88]	; (80113dc <xTaskRemoveFromEventList+0xb4>)
 8011382:	6013      	str	r3, [r2, #0]
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011388:	4613      	mov	r3, r2
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	4413      	add	r3, r2
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	4a13      	ldr	r2, [pc, #76]	; (80113e0 <xTaskRemoveFromEventList+0xb8>)
 8011392:	441a      	add	r2, r3
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	3304      	adds	r3, #4
 8011398:	4619      	mov	r1, r3
 801139a:	4610      	mov	r0, r2
 801139c:	f7fe fdcb 	bl	800ff36 <vListInsertEnd>
 80113a0:	e005      	b.n	80113ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	3318      	adds	r3, #24
 80113a6:	4619      	mov	r1, r3
 80113a8:	480e      	ldr	r0, [pc, #56]	; (80113e4 <xTaskRemoveFromEventList+0xbc>)
 80113aa:	f7fe fdc4 	bl	800ff36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b2:	4b0d      	ldr	r3, [pc, #52]	; (80113e8 <xTaskRemoveFromEventList+0xc0>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d905      	bls.n	80113c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80113bc:	2301      	movs	r3, #1
 80113be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80113c0:	4b0a      	ldr	r3, [pc, #40]	; (80113ec <xTaskRemoveFromEventList+0xc4>)
 80113c2:	2201      	movs	r2, #1
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	e001      	b.n	80113cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80113c8:	2300      	movs	r3, #0
 80113ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80113cc:	697b      	ldr	r3, [r7, #20]
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3718      	adds	r7, #24
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	20004b8c 	.word	0x20004b8c
 80113dc:	20004b6c 	.word	0x20004b6c
 80113e0:	20004694 	.word	0x20004694
 80113e4:	20004b24 	.word	0x20004b24
 80113e8:	20004690 	.word	0x20004690
 80113ec:	20004b78 	.word	0x20004b78

080113f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80113f8:	4b06      	ldr	r3, [pc, #24]	; (8011414 <vTaskInternalSetTimeOutState+0x24>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011400:	4b05      	ldr	r3, [pc, #20]	; (8011418 <vTaskInternalSetTimeOutState+0x28>)
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	605a      	str	r2, [r3, #4]
}
 8011408:	bf00      	nop
 801140a:	370c      	adds	r7, #12
 801140c:	46bd      	mov	sp, r7
 801140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011412:	4770      	bx	lr
 8011414:	20004b7c 	.word	0x20004b7c
 8011418:	20004b68 	.word	0x20004b68

0801141c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b088      	sub	sp, #32
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10a      	bne.n	8011442 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	613b      	str	r3, [r7, #16]
}
 801143e:	bf00      	nop
 8011440:	e7fe      	b.n	8011440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d10a      	bne.n	801145e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	60fb      	str	r3, [r7, #12]
}
 801145a:	bf00      	nop
 801145c:	e7fe      	b.n	801145c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801145e:	f000 fe81 	bl	8012164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011462:	4b1d      	ldr	r3, [pc, #116]	; (80114d8 <xTaskCheckForTimeOut+0xbc>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	69ba      	ldr	r2, [r7, #24]
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801147a:	d102      	bne.n	8011482 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801147c:	2300      	movs	r3, #0
 801147e:	61fb      	str	r3, [r7, #28]
 8011480:	e023      	b.n	80114ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	4b15      	ldr	r3, [pc, #84]	; (80114dc <xTaskCheckForTimeOut+0xc0>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	429a      	cmp	r2, r3
 801148c:	d007      	beq.n	801149e <xTaskCheckForTimeOut+0x82>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	69ba      	ldr	r2, [r7, #24]
 8011494:	429a      	cmp	r2, r3
 8011496:	d302      	bcc.n	801149e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011498:	2301      	movs	r3, #1
 801149a:	61fb      	str	r3, [r7, #28]
 801149c:	e015      	b.n	80114ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	697a      	ldr	r2, [r7, #20]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d20b      	bcs.n	80114c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	1ad2      	subs	r2, r2, r3
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7ff ff9b 	bl	80113f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80114ba:	2300      	movs	r3, #0
 80114bc:	61fb      	str	r3, [r7, #28]
 80114be:	e004      	b.n	80114ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	2200      	movs	r2, #0
 80114c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80114c6:	2301      	movs	r3, #1
 80114c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80114ca:	f000 fe7b 	bl	80121c4 <vPortExitCritical>

	return xReturn;
 80114ce:	69fb      	ldr	r3, [r7, #28]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3720      	adds	r7, #32
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20004b68 	.word	0x20004b68
 80114dc:	20004b7c 	.word	0x20004b7c

080114e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80114e0:	b480      	push	{r7}
 80114e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80114e4:	4b03      	ldr	r3, [pc, #12]	; (80114f4 <vTaskMissedYield+0x14>)
 80114e6:	2201      	movs	r2, #1
 80114e8:	601a      	str	r2, [r3, #0]
}
 80114ea:	bf00      	nop
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr
 80114f4:	20004b78 	.word	0x20004b78

080114f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011500:	f000 f852 	bl	80115a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011504:	4b06      	ldr	r3, [pc, #24]	; (8011520 <prvIdleTask+0x28>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d9f9      	bls.n	8011500 <prvIdleTask+0x8>
			{
				taskYIELD();
 801150c:	4b05      	ldr	r3, [pc, #20]	; (8011524 <prvIdleTask+0x2c>)
 801150e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	f3bf 8f4f 	dsb	sy
 8011518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801151c:	e7f0      	b.n	8011500 <prvIdleTask+0x8>
 801151e:	bf00      	nop
 8011520:	20004694 	.word	0x20004694
 8011524:	e000ed04 	.word	0xe000ed04

08011528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801152e:	2300      	movs	r3, #0
 8011530:	607b      	str	r3, [r7, #4]
 8011532:	e00c      	b.n	801154e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	4613      	mov	r3, r2
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	4413      	add	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4a12      	ldr	r2, [pc, #72]	; (8011588 <prvInitialiseTaskLists+0x60>)
 8011540:	4413      	add	r3, r2
 8011542:	4618      	mov	r0, r3
 8011544:	f7fe fcca 	bl	800fedc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	3301      	adds	r3, #1
 801154c:	607b      	str	r3, [r7, #4]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2b37      	cmp	r3, #55	; 0x37
 8011552:	d9ef      	bls.n	8011534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011554:	480d      	ldr	r0, [pc, #52]	; (801158c <prvInitialiseTaskLists+0x64>)
 8011556:	f7fe fcc1 	bl	800fedc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801155a:	480d      	ldr	r0, [pc, #52]	; (8011590 <prvInitialiseTaskLists+0x68>)
 801155c:	f7fe fcbe 	bl	800fedc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011560:	480c      	ldr	r0, [pc, #48]	; (8011594 <prvInitialiseTaskLists+0x6c>)
 8011562:	f7fe fcbb 	bl	800fedc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011566:	480c      	ldr	r0, [pc, #48]	; (8011598 <prvInitialiseTaskLists+0x70>)
 8011568:	f7fe fcb8 	bl	800fedc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801156c:	480b      	ldr	r0, [pc, #44]	; (801159c <prvInitialiseTaskLists+0x74>)
 801156e:	f7fe fcb5 	bl	800fedc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011572:	4b0b      	ldr	r3, [pc, #44]	; (80115a0 <prvInitialiseTaskLists+0x78>)
 8011574:	4a05      	ldr	r2, [pc, #20]	; (801158c <prvInitialiseTaskLists+0x64>)
 8011576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011578:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <prvInitialiseTaskLists+0x7c>)
 801157a:	4a05      	ldr	r2, [pc, #20]	; (8011590 <prvInitialiseTaskLists+0x68>)
 801157c:	601a      	str	r2, [r3, #0]
}
 801157e:	bf00      	nop
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	20004694 	.word	0x20004694
 801158c:	20004af4 	.word	0x20004af4
 8011590:	20004b08 	.word	0x20004b08
 8011594:	20004b24 	.word	0x20004b24
 8011598:	20004b38 	.word	0x20004b38
 801159c:	20004b50 	.word	0x20004b50
 80115a0:	20004b1c 	.word	0x20004b1c
 80115a4:	20004b20 	.word	0x20004b20

080115a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80115ae:	e019      	b.n	80115e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80115b0:	f000 fdd8 	bl	8012164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115b4:	4b10      	ldr	r3, [pc, #64]	; (80115f8 <prvCheckTasksWaitingTermination+0x50>)
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	3304      	adds	r3, #4
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7fe fd15 	bl	800fff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80115c6:	4b0d      	ldr	r3, [pc, #52]	; (80115fc <prvCheckTasksWaitingTermination+0x54>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	3b01      	subs	r3, #1
 80115cc:	4a0b      	ldr	r2, [pc, #44]	; (80115fc <prvCheckTasksWaitingTermination+0x54>)
 80115ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80115d0:	4b0b      	ldr	r3, [pc, #44]	; (8011600 <prvCheckTasksWaitingTermination+0x58>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	3b01      	subs	r3, #1
 80115d6:	4a0a      	ldr	r2, [pc, #40]	; (8011600 <prvCheckTasksWaitingTermination+0x58>)
 80115d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80115da:	f000 fdf3 	bl	80121c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f810 	bl	8011604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80115e4:	4b06      	ldr	r3, [pc, #24]	; (8011600 <prvCheckTasksWaitingTermination+0x58>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1e1      	bne.n	80115b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80115ec:	bf00      	nop
 80115ee:	bf00      	nop
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	20004b38 	.word	0x20004b38
 80115fc:	20004b64 	.word	0x20004b64
 8011600:	20004b4c 	.word	0x20004b4c

08011604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	3354      	adds	r3, #84	; 0x54
 8011610:	4618      	mov	r0, r3
 8011612:	f002 fe91 	bl	8014338 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801161c:	2b00      	cmp	r3, #0
 801161e:	d108      	bne.n	8011632 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011624:	4618      	mov	r0, r3
 8011626:	f000 ff8b 	bl	8012540 <vPortFree>
				vPortFree( pxTCB );
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 ff88 	bl	8012540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011630:	e018      	b.n	8011664 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011638:	2b01      	cmp	r3, #1
 801163a:	d103      	bne.n	8011644 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 ff7f 	bl	8012540 <vPortFree>
	}
 8011642:	e00f      	b.n	8011664 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801164a:	2b02      	cmp	r3, #2
 801164c:	d00a      	beq.n	8011664 <prvDeleteTCB+0x60>
	__asm volatile
 801164e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011652:	f383 8811 	msr	BASEPRI, r3
 8011656:	f3bf 8f6f 	isb	sy
 801165a:	f3bf 8f4f 	dsb	sy
 801165e:	60fb      	str	r3, [r7, #12]
}
 8011660:	bf00      	nop
 8011662:	e7fe      	b.n	8011662 <prvDeleteTCB+0x5e>
	}
 8011664:	bf00      	nop
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011672:	4b0c      	ldr	r3, [pc, #48]	; (80116a4 <prvResetNextTaskUnblockTime+0x38>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d104      	bne.n	8011686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801167c:	4b0a      	ldr	r3, [pc, #40]	; (80116a8 <prvResetNextTaskUnblockTime+0x3c>)
 801167e:	f04f 32ff 	mov.w	r2, #4294967295
 8011682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011684:	e008      	b.n	8011698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011686:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <prvResetNextTaskUnblockTime+0x38>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	4a04      	ldr	r2, [pc, #16]	; (80116a8 <prvResetNextTaskUnblockTime+0x3c>)
 8011696:	6013      	str	r3, [r2, #0]
}
 8011698:	bf00      	nop
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	20004b1c 	.word	0x20004b1c
 80116a8:	20004b84 	.word	0x20004b84

080116ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80116b2:	4b0b      	ldr	r3, [pc, #44]	; (80116e0 <xTaskGetSchedulerState+0x34>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d102      	bne.n	80116c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80116ba:	2301      	movs	r3, #1
 80116bc:	607b      	str	r3, [r7, #4]
 80116be:	e008      	b.n	80116d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116c0:	4b08      	ldr	r3, [pc, #32]	; (80116e4 <xTaskGetSchedulerState+0x38>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d102      	bne.n	80116ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80116c8:	2302      	movs	r3, #2
 80116ca:	607b      	str	r3, [r7, #4]
 80116cc:	e001      	b.n	80116d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80116ce:	2300      	movs	r3, #0
 80116d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80116d2:	687b      	ldr	r3, [r7, #4]
	}
 80116d4:	4618      	mov	r0, r3
 80116d6:	370c      	adds	r7, #12
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr
 80116e0:	20004b70 	.word	0x20004b70
 80116e4:	20004b8c 	.word	0x20004b8c

080116e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b086      	sub	sp, #24
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80116f4:	2300      	movs	r3, #0
 80116f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d056      	beq.n	80117ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80116fe:	4b2e      	ldr	r3, [pc, #184]	; (80117b8 <xTaskPriorityDisinherit+0xd0>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	693a      	ldr	r2, [r7, #16]
 8011704:	429a      	cmp	r2, r3
 8011706:	d00a      	beq.n	801171e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170c:	f383 8811 	msr	BASEPRI, r3
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	f3bf 8f4f 	dsb	sy
 8011718:	60fb      	str	r3, [r7, #12]
}
 801171a:	bf00      	nop
 801171c:	e7fe      	b.n	801171c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10a      	bne.n	801173c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172a:	f383 8811 	msr	BASEPRI, r3
 801172e:	f3bf 8f6f 	isb	sy
 8011732:	f3bf 8f4f 	dsb	sy
 8011736:	60bb      	str	r3, [r7, #8]
}
 8011738:	bf00      	nop
 801173a:	e7fe      	b.n	801173a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011740:	1e5a      	subs	r2, r3, #1
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801174e:	429a      	cmp	r2, r3
 8011750:	d02c      	beq.n	80117ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011756:	2b00      	cmp	r3, #0
 8011758:	d128      	bne.n	80117ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	3304      	adds	r3, #4
 801175e:	4618      	mov	r0, r3
 8011760:	f7fe fc46 	bl	800fff0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011770:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801177c:	4b0f      	ldr	r3, [pc, #60]	; (80117bc <xTaskPriorityDisinherit+0xd4>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	429a      	cmp	r2, r3
 8011782:	d903      	bls.n	801178c <xTaskPriorityDisinherit+0xa4>
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011788:	4a0c      	ldr	r2, [pc, #48]	; (80117bc <xTaskPriorityDisinherit+0xd4>)
 801178a:	6013      	str	r3, [r2, #0]
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011790:	4613      	mov	r3, r2
 8011792:	009b      	lsls	r3, r3, #2
 8011794:	4413      	add	r3, r2
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	4a09      	ldr	r2, [pc, #36]	; (80117c0 <xTaskPriorityDisinherit+0xd8>)
 801179a:	441a      	add	r2, r3
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	3304      	adds	r3, #4
 80117a0:	4619      	mov	r1, r3
 80117a2:	4610      	mov	r0, r2
 80117a4:	f7fe fbc7 	bl	800ff36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80117a8:	2301      	movs	r3, #1
 80117aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80117ac:	697b      	ldr	r3, [r7, #20]
	}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3718      	adds	r7, #24
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	20004690 	.word	0x20004690
 80117bc:	20004b6c 	.word	0x20004b6c
 80117c0:	20004694 	.word	0x20004694

080117c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117ce:	4b21      	ldr	r3, [pc, #132]	; (8011854 <prvAddCurrentTaskToDelayedList+0x90>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117d4:	4b20      	ldr	r3, [pc, #128]	; (8011858 <prvAddCurrentTaskToDelayedList+0x94>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	3304      	adds	r3, #4
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fe fc08 	bl	800fff0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e6:	d10a      	bne.n	80117fe <prvAddCurrentTaskToDelayedList+0x3a>
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d007      	beq.n	80117fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117ee:	4b1a      	ldr	r3, [pc, #104]	; (8011858 <prvAddCurrentTaskToDelayedList+0x94>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	3304      	adds	r3, #4
 80117f4:	4619      	mov	r1, r3
 80117f6:	4819      	ldr	r0, [pc, #100]	; (801185c <prvAddCurrentTaskToDelayedList+0x98>)
 80117f8:	f7fe fb9d 	bl	800ff36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80117fc:	e026      	b.n	801184c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80117fe:	68fa      	ldr	r2, [r7, #12]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4413      	add	r3, r2
 8011804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011806:	4b14      	ldr	r3, [pc, #80]	; (8011858 <prvAddCurrentTaskToDelayedList+0x94>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	68ba      	ldr	r2, [r7, #8]
 801180c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	429a      	cmp	r2, r3
 8011814:	d209      	bcs.n	801182a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011816:	4b12      	ldr	r3, [pc, #72]	; (8011860 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	4b0f      	ldr	r3, [pc, #60]	; (8011858 <prvAddCurrentTaskToDelayedList+0x94>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	3304      	adds	r3, #4
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7fe fbab 	bl	800ff7e <vListInsert>
}
 8011828:	e010      	b.n	801184c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801182a:	4b0e      	ldr	r3, [pc, #56]	; (8011864 <prvAddCurrentTaskToDelayedList+0xa0>)
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <prvAddCurrentTaskToDelayedList+0x94>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3304      	adds	r3, #4
 8011834:	4619      	mov	r1, r3
 8011836:	4610      	mov	r0, r2
 8011838:	f7fe fba1 	bl	800ff7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801183c:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <prvAddCurrentTaskToDelayedList+0xa4>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68ba      	ldr	r2, [r7, #8]
 8011842:	429a      	cmp	r2, r3
 8011844:	d202      	bcs.n	801184c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011846:	4a08      	ldr	r2, [pc, #32]	; (8011868 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	6013      	str	r3, [r2, #0]
}
 801184c:	bf00      	nop
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	20004b68 	.word	0x20004b68
 8011858:	20004690 	.word	0x20004690
 801185c:	20004b50 	.word	0x20004b50
 8011860:	20004b20 	.word	0x20004b20
 8011864:	20004b1c 	.word	0x20004b1c
 8011868:	20004b84 	.word	0x20004b84

0801186c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b08a      	sub	sp, #40	; 0x28
 8011870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011872:	2300      	movs	r3, #0
 8011874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011876:	f000 fb07 	bl	8011e88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801187a:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <xTimerCreateTimerTask+0x80>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d021      	beq.n	80118c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011882:	2300      	movs	r3, #0
 8011884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011886:	2300      	movs	r3, #0
 8011888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801188a:	1d3a      	adds	r2, r7, #4
 801188c:	f107 0108 	add.w	r1, r7, #8
 8011890:	f107 030c 	add.w	r3, r7, #12
 8011894:	4618      	mov	r0, r3
 8011896:	f7fe fb07 	bl	800fea8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801189a:	6879      	ldr	r1, [r7, #4]
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	68fa      	ldr	r2, [r7, #12]
 80118a0:	9202      	str	r2, [sp, #8]
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	2302      	movs	r3, #2
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	2300      	movs	r3, #0
 80118aa:	460a      	mov	r2, r1
 80118ac:	4910      	ldr	r1, [pc, #64]	; (80118f0 <xTimerCreateTimerTask+0x84>)
 80118ae:	4811      	ldr	r0, [pc, #68]	; (80118f4 <xTimerCreateTimerTask+0x88>)
 80118b0:	f7ff f8b4 	bl	8010a1c <xTaskCreateStatic>
 80118b4:	4603      	mov	r3, r0
 80118b6:	4a10      	ldr	r2, [pc, #64]	; (80118f8 <xTimerCreateTimerTask+0x8c>)
 80118b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80118ba:	4b0f      	ldr	r3, [pc, #60]	; (80118f8 <xTimerCreateTimerTask+0x8c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80118c2:	2301      	movs	r3, #1
 80118c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10a      	bne.n	80118e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80118cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	613b      	str	r3, [r7, #16]
}
 80118de:	bf00      	nop
 80118e0:	e7fe      	b.n	80118e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80118e2:	697b      	ldr	r3, [r7, #20]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	20004bc0 	.word	0x20004bc0
 80118f0:	0801679c 	.word	0x0801679c
 80118f4:	08011a31 	.word	0x08011a31
 80118f8:	20004bc4 	.word	0x20004bc4

080118fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08a      	sub	sp, #40	; 0x28
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801190a:	2300      	movs	r3, #0
 801190c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10a      	bne.n	801192a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	623b      	str	r3, [r7, #32]
}
 8011926:	bf00      	nop
 8011928:	e7fe      	b.n	8011928 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801192a:	4b1a      	ldr	r3, [pc, #104]	; (8011994 <xTimerGenericCommand+0x98>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d02a      	beq.n	8011988 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	2b05      	cmp	r3, #5
 8011942:	dc18      	bgt.n	8011976 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011944:	f7ff feb2 	bl	80116ac <xTaskGetSchedulerState>
 8011948:	4603      	mov	r3, r0
 801194a:	2b02      	cmp	r3, #2
 801194c:	d109      	bne.n	8011962 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801194e:	4b11      	ldr	r3, [pc, #68]	; (8011994 <xTimerGenericCommand+0x98>)
 8011950:	6818      	ldr	r0, [r3, #0]
 8011952:	f107 0110 	add.w	r1, r7, #16
 8011956:	2300      	movs	r3, #0
 8011958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801195a:	f7fe fc77 	bl	801024c <xQueueGenericSend>
 801195e:	6278      	str	r0, [r7, #36]	; 0x24
 8011960:	e012      	b.n	8011988 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011962:	4b0c      	ldr	r3, [pc, #48]	; (8011994 <xTimerGenericCommand+0x98>)
 8011964:	6818      	ldr	r0, [r3, #0]
 8011966:	f107 0110 	add.w	r1, r7, #16
 801196a:	2300      	movs	r3, #0
 801196c:	2200      	movs	r2, #0
 801196e:	f7fe fc6d 	bl	801024c <xQueueGenericSend>
 8011972:	6278      	str	r0, [r7, #36]	; 0x24
 8011974:	e008      	b.n	8011988 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011976:	4b07      	ldr	r3, [pc, #28]	; (8011994 <xTimerGenericCommand+0x98>)
 8011978:	6818      	ldr	r0, [r3, #0]
 801197a:	f107 0110 	add.w	r1, r7, #16
 801197e:	2300      	movs	r3, #0
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	f7fe fd61 	bl	8010448 <xQueueGenericSendFromISR>
 8011986:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801198a:	4618      	mov	r0, r3
 801198c:	3728      	adds	r7, #40	; 0x28
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	20004bc0 	.word	0x20004bc0

08011998 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b088      	sub	sp, #32
 801199c:	af02      	add	r7, sp, #8
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119a2:	4b22      	ldr	r3, [pc, #136]	; (8011a2c <prvProcessExpiredTimer+0x94>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	3304      	adds	r3, #4
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fe fb1d 	bl	800fff0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119bc:	f003 0304 	and.w	r3, r3, #4
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d022      	beq.n	8011a0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	699a      	ldr	r2, [r3, #24]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	18d1      	adds	r1, r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	683a      	ldr	r2, [r7, #0]
 80119d0:	6978      	ldr	r0, [r7, #20]
 80119d2:	f000 f8d1 	bl	8011b78 <prvInsertTimerInActiveList>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d01f      	beq.n	8011a1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80119dc:	2300      	movs	r3, #0
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	2300      	movs	r3, #0
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	2100      	movs	r1, #0
 80119e6:	6978      	ldr	r0, [r7, #20]
 80119e8:	f7ff ff88 	bl	80118fc <xTimerGenericCommand>
 80119ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d113      	bne.n	8011a1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80119f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f8:	f383 8811 	msr	BASEPRI, r3
 80119fc:	f3bf 8f6f 	isb	sy
 8011a00:	f3bf 8f4f 	dsb	sy
 8011a04:	60fb      	str	r3, [r7, #12]
}
 8011a06:	bf00      	nop
 8011a08:	e7fe      	b.n	8011a08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a10:	f023 0301 	bic.w	r3, r3, #1
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	6a1b      	ldr	r3, [r3, #32]
 8011a20:	6978      	ldr	r0, [r7, #20]
 8011a22:	4798      	blx	r3
}
 8011a24:	bf00      	nop
 8011a26:	3718      	adds	r7, #24
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	20004bb8 	.word	0x20004bb8

08011a30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a38:	f107 0308 	add.w	r3, r7, #8
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 f857 	bl	8011af0 <prvGetNextExpireTime>
 8011a42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	4619      	mov	r1, r3
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f000 f803 	bl	8011a54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a4e:	f000 f8d5 	bl	8011bfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a52:	e7f1      	b.n	8011a38 <prvTimerTask+0x8>

08011a54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011a5e:	f7ff fa39 	bl	8010ed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a62:	f107 0308 	add.w	r3, r7, #8
 8011a66:	4618      	mov	r0, r3
 8011a68:	f000 f866 	bl	8011b38 <prvSampleTimeNow>
 8011a6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d130      	bne.n	8011ad6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10a      	bne.n	8011a90 <prvProcessTimerOrBlockTask+0x3c>
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d806      	bhi.n	8011a90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011a82:	f7ff fa35 	bl	8010ef0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011a86:	68f9      	ldr	r1, [r7, #12]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff ff85 	bl	8011998 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011a8e:	e024      	b.n	8011ada <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d008      	beq.n	8011aa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011a96:	4b13      	ldr	r3, [pc, #76]	; (8011ae4 <prvProcessTimerOrBlockTask+0x90>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d101      	bne.n	8011aa4 <prvProcessTimerOrBlockTask+0x50>
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	e000      	b.n	8011aa6 <prvProcessTimerOrBlockTask+0x52>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011aa8:	4b0f      	ldr	r3, [pc, #60]	; (8011ae8 <prvProcessTimerOrBlockTask+0x94>)
 8011aaa:	6818      	ldr	r0, [r3, #0]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	683a      	ldr	r2, [r7, #0]
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	f7fe ff7d 	bl	80109b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011aba:	f7ff fa19 	bl	8010ef0 <xTaskResumeAll>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d10a      	bne.n	8011ada <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011ac4:	4b09      	ldr	r3, [pc, #36]	; (8011aec <prvProcessTimerOrBlockTask+0x98>)
 8011ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aca:	601a      	str	r2, [r3, #0]
 8011acc:	f3bf 8f4f 	dsb	sy
 8011ad0:	f3bf 8f6f 	isb	sy
}
 8011ad4:	e001      	b.n	8011ada <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011ad6:	f7ff fa0b 	bl	8010ef0 <xTaskResumeAll>
}
 8011ada:	bf00      	nop
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20004bbc 	.word	0x20004bbc
 8011ae8:	20004bc0 	.word	0x20004bc0
 8011aec:	e000ed04 	.word	0xe000ed04

08011af0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011af0:	b480      	push	{r7}
 8011af2:	b085      	sub	sp, #20
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011af8:	4b0e      	ldr	r3, [pc, #56]	; (8011b34 <prvGetNextExpireTime+0x44>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d101      	bne.n	8011b06 <prvGetNextExpireTime+0x16>
 8011b02:	2201      	movs	r2, #1
 8011b04:	e000      	b.n	8011b08 <prvGetNextExpireTime+0x18>
 8011b06:	2200      	movs	r2, #0
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d105      	bne.n	8011b20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b14:	4b07      	ldr	r3, [pc, #28]	; (8011b34 <prvGetNextExpireTime+0x44>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	60fb      	str	r3, [r7, #12]
 8011b1e:	e001      	b.n	8011b24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b20:	2300      	movs	r3, #0
 8011b22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011b24:	68fb      	ldr	r3, [r7, #12]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3714      	adds	r7, #20
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	20004bb8 	.word	0x20004bb8

08011b38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011b40:	f7ff fa74 	bl	801102c <xTaskGetTickCount>
 8011b44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011b46:	4b0b      	ldr	r3, [pc, #44]	; (8011b74 <prvSampleTimeNow+0x3c>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d205      	bcs.n	8011b5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011b50:	f000 f936 	bl	8011dc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2201      	movs	r2, #1
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	e002      	b.n	8011b62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011b62:	4a04      	ldr	r2, [pc, #16]	; (8011b74 <prvSampleTimeNow+0x3c>)
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011b68:	68fb      	ldr	r3, [r7, #12]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	20004bc8 	.word	0x20004bc8

08011b78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011b86:	2300      	movs	r3, #0
 8011b88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	68fa      	ldr	r2, [r7, #12]
 8011b94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011b96:	68ba      	ldr	r2, [r7, #8]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d812      	bhi.n	8011bc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	1ad2      	subs	r2, r2, r3
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	699b      	ldr	r3, [r3, #24]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d302      	bcc.n	8011bb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011bac:	2301      	movs	r3, #1
 8011bae:	617b      	str	r3, [r7, #20]
 8011bb0:	e01b      	b.n	8011bea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011bb2:	4b10      	ldr	r3, [pc, #64]	; (8011bf4 <prvInsertTimerInActiveList+0x7c>)
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	3304      	adds	r3, #4
 8011bba:	4619      	mov	r1, r3
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	f7fe f9de 	bl	800ff7e <vListInsert>
 8011bc2:	e012      	b.n	8011bea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d206      	bcs.n	8011bda <prvInsertTimerInActiveList+0x62>
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d302      	bcc.n	8011bda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	617b      	str	r3, [r7, #20]
 8011bd8:	e007      	b.n	8011bea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011bda:	4b07      	ldr	r3, [pc, #28]	; (8011bf8 <prvInsertTimerInActiveList+0x80>)
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	3304      	adds	r3, #4
 8011be2:	4619      	mov	r1, r3
 8011be4:	4610      	mov	r0, r2
 8011be6:	f7fe f9ca 	bl	800ff7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011bea:	697b      	ldr	r3, [r7, #20]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3718      	adds	r7, #24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	20004bbc 	.word	0x20004bbc
 8011bf8:	20004bb8 	.word	0x20004bb8

08011bfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b08e      	sub	sp, #56	; 0x38
 8011c00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c02:	e0ca      	b.n	8011d9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	da18      	bge.n	8011c3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c0a:	1d3b      	adds	r3, r7, #4
 8011c0c:	3304      	adds	r3, #4
 8011c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10a      	bne.n	8011c2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1a:	f383 8811 	msr	BASEPRI, r3
 8011c1e:	f3bf 8f6f 	isb	sy
 8011c22:	f3bf 8f4f 	dsb	sy
 8011c26:	61fb      	str	r3, [r7, #28]
}
 8011c28:	bf00      	nop
 8011c2a:	e7fe      	b.n	8011c2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c32:	6850      	ldr	r0, [r2, #4]
 8011c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c36:	6892      	ldr	r2, [r2, #8]
 8011c38:	4611      	mov	r1, r2
 8011c3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f2c0 80aa 	blt.w	8011d98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4a:	695b      	ldr	r3, [r3, #20]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d004      	beq.n	8011c5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c52:	3304      	adds	r3, #4
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe f9cb 	bl	800fff0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c5a:	463b      	mov	r3, r7
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7ff ff6b 	bl	8011b38 <prvSampleTimeNow>
 8011c62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b09      	cmp	r3, #9
 8011c68:	f200 8097 	bhi.w	8011d9a <prvProcessReceivedCommands+0x19e>
 8011c6c:	a201      	add	r2, pc, #4	; (adr r2, 8011c74 <prvProcessReceivedCommands+0x78>)
 8011c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c72:	bf00      	nop
 8011c74:	08011c9d 	.word	0x08011c9d
 8011c78:	08011c9d 	.word	0x08011c9d
 8011c7c:	08011c9d 	.word	0x08011c9d
 8011c80:	08011d11 	.word	0x08011d11
 8011c84:	08011d25 	.word	0x08011d25
 8011c88:	08011d6f 	.word	0x08011d6f
 8011c8c:	08011c9d 	.word	0x08011c9d
 8011c90:	08011c9d 	.word	0x08011c9d
 8011c94:	08011d11 	.word	0x08011d11
 8011c98:	08011d25 	.word	0x08011d25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ca2:	f043 0301 	orr.w	r3, r3, #1
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	18d1      	adds	r1, r2, r3
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cbc:	f7ff ff5c 	bl	8011b78 <prvInsertTimerInActiveList>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d069      	beq.n	8011d9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc8:	6a1b      	ldr	r3, [r3, #32]
 8011cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ccc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cd4:	f003 0304 	and.w	r3, r3, #4
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d05e      	beq.n	8011d9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011cdc:	68ba      	ldr	r2, [r7, #8]
 8011cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce0:	699b      	ldr	r3, [r3, #24]
 8011ce2:	441a      	add	r2, r3
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	2100      	movs	r1, #0
 8011cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cee:	f7ff fe05 	bl	80118fc <xTimerGenericCommand>
 8011cf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d14f      	bne.n	8011d9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cfe:	f383 8811 	msr	BASEPRI, r3
 8011d02:	f3bf 8f6f 	isb	sy
 8011d06:	f3bf 8f4f 	dsb	sy
 8011d0a:	61bb      	str	r3, [r7, #24]
}
 8011d0c:	bf00      	nop
 8011d0e:	e7fe      	b.n	8011d0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d16:	f023 0301 	bic.w	r3, r3, #1
 8011d1a:	b2da      	uxtb	r2, r3
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011d22:	e03a      	b.n	8011d9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d2a:	f043 0301 	orr.w	r3, r3, #1
 8011d2e:	b2da      	uxtb	r2, r3
 8011d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011d36:	68ba      	ldr	r2, [r7, #8]
 8011d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	699b      	ldr	r3, [r3, #24]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d10a      	bne.n	8011d5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d48:	f383 8811 	msr	BASEPRI, r3
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	617b      	str	r3, [r7, #20]
}
 8011d56:	bf00      	nop
 8011d58:	e7fe      	b.n	8011d58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5c:	699a      	ldr	r2, [r3, #24]
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	18d1      	adds	r1, r2, r3
 8011d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d68:	f7ff ff06 	bl	8011b78 <prvInsertTimerInActiveList>
					break;
 8011d6c:	e015      	b.n	8011d9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d74:	f003 0302 	and.w	r3, r3, #2
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d103      	bne.n	8011d84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d7e:	f000 fbdf 	bl	8012540 <vPortFree>
 8011d82:	e00a      	b.n	8011d9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d8a:	f023 0301 	bic.w	r3, r3, #1
 8011d8e:	b2da      	uxtb	r2, r3
 8011d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011d96:	e000      	b.n	8011d9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011d98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d9a:	4b08      	ldr	r3, [pc, #32]	; (8011dbc <prvProcessReceivedCommands+0x1c0>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	1d39      	adds	r1, r7, #4
 8011da0:	2200      	movs	r2, #0
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe fbec 	bl	8010580 <xQueueReceive>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	f47f af2a 	bne.w	8011c04 <prvProcessReceivedCommands+0x8>
	}
}
 8011db0:	bf00      	nop
 8011db2:	bf00      	nop
 8011db4:	3730      	adds	r7, #48	; 0x30
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	20004bc0 	.word	0x20004bc0

08011dc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b088      	sub	sp, #32
 8011dc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011dc6:	e048      	b.n	8011e5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011dc8:	4b2d      	ldr	r3, [pc, #180]	; (8011e80 <prvSwitchTimerLists+0xc0>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dd2:	4b2b      	ldr	r3, [pc, #172]	; (8011e80 <prvSwitchTimerLists+0xc0>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	3304      	adds	r3, #4
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fe f905 	bl	800fff0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011df4:	f003 0304 	and.w	r3, r3, #4
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d02e      	beq.n	8011e5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	699b      	ldr	r3, [r3, #24]
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	4413      	add	r3, r2
 8011e04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e06:	68ba      	ldr	r2, [r7, #8]
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d90e      	bls.n	8011e2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e1a:	4b19      	ldr	r3, [pc, #100]	; (8011e80 <prvSwitchTimerLists+0xc0>)
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	3304      	adds	r3, #4
 8011e22:	4619      	mov	r1, r3
 8011e24:	4610      	mov	r0, r2
 8011e26:	f7fe f8aa 	bl	800ff7e <vListInsert>
 8011e2a:	e016      	b.n	8011e5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	2300      	movs	r3, #0
 8011e32:	693a      	ldr	r2, [r7, #16]
 8011e34:	2100      	movs	r1, #0
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f7ff fd60 	bl	80118fc <xTimerGenericCommand>
 8011e3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d10a      	bne.n	8011e5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	603b      	str	r3, [r7, #0]
}
 8011e56:	bf00      	nop
 8011e58:	e7fe      	b.n	8011e58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e5a:	4b09      	ldr	r3, [pc, #36]	; (8011e80 <prvSwitchTimerLists+0xc0>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1b1      	bne.n	8011dc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e64:	4b06      	ldr	r3, [pc, #24]	; (8011e80 <prvSwitchTimerLists+0xc0>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e6a:	4b06      	ldr	r3, [pc, #24]	; (8011e84 <prvSwitchTimerLists+0xc4>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <prvSwitchTimerLists+0xc0>)
 8011e70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e72:	4a04      	ldr	r2, [pc, #16]	; (8011e84 <prvSwitchTimerLists+0xc4>)
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	6013      	str	r3, [r2, #0]
}
 8011e78:	bf00      	nop
 8011e7a:	3718      	adds	r7, #24
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	20004bb8 	.word	0x20004bb8
 8011e84:	20004bbc 	.word	0x20004bbc

08011e88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011e8e:	f000 f969 	bl	8012164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011e92:	4b15      	ldr	r3, [pc, #84]	; (8011ee8 <prvCheckForValidListAndQueue+0x60>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d120      	bne.n	8011edc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011e9a:	4814      	ldr	r0, [pc, #80]	; (8011eec <prvCheckForValidListAndQueue+0x64>)
 8011e9c:	f7fe f81e 	bl	800fedc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011ea0:	4813      	ldr	r0, [pc, #76]	; (8011ef0 <prvCheckForValidListAndQueue+0x68>)
 8011ea2:	f7fe f81b 	bl	800fedc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011ea6:	4b13      	ldr	r3, [pc, #76]	; (8011ef4 <prvCheckForValidListAndQueue+0x6c>)
 8011ea8:	4a10      	ldr	r2, [pc, #64]	; (8011eec <prvCheckForValidListAndQueue+0x64>)
 8011eaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011eac:	4b12      	ldr	r3, [pc, #72]	; (8011ef8 <prvCheckForValidListAndQueue+0x70>)
 8011eae:	4a10      	ldr	r2, [pc, #64]	; (8011ef0 <prvCheckForValidListAndQueue+0x68>)
 8011eb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	9300      	str	r3, [sp, #0]
 8011eb6:	4b11      	ldr	r3, [pc, #68]	; (8011efc <prvCheckForValidListAndQueue+0x74>)
 8011eb8:	4a11      	ldr	r2, [pc, #68]	; (8011f00 <prvCheckForValidListAndQueue+0x78>)
 8011eba:	2110      	movs	r1, #16
 8011ebc:	200a      	movs	r0, #10
 8011ebe:	f7fe f929 	bl	8010114 <xQueueGenericCreateStatic>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	4a08      	ldr	r2, [pc, #32]	; (8011ee8 <prvCheckForValidListAndQueue+0x60>)
 8011ec6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011ec8:	4b07      	ldr	r3, [pc, #28]	; (8011ee8 <prvCheckForValidListAndQueue+0x60>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d005      	beq.n	8011edc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011ed0:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <prvCheckForValidListAndQueue+0x60>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	490b      	ldr	r1, [pc, #44]	; (8011f04 <prvCheckForValidListAndQueue+0x7c>)
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fe fd42 	bl	8010960 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011edc:	f000 f972 	bl	80121c4 <vPortExitCritical>
}
 8011ee0:	bf00      	nop
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20004bc0 	.word	0x20004bc0
 8011eec:	20004b90 	.word	0x20004b90
 8011ef0:	20004ba4 	.word	0x20004ba4
 8011ef4:	20004bb8 	.word	0x20004bb8
 8011ef8:	20004bbc 	.word	0x20004bbc
 8011efc:	20004c6c 	.word	0x20004c6c
 8011f00:	20004bcc 	.word	0x20004bcc
 8011f04:	080167a4 	.word	0x080167a4

08011f08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	3b04      	subs	r3, #4
 8011f18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	3b04      	subs	r3, #4
 8011f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	f023 0201 	bic.w	r2, r3, #1
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	3b04      	subs	r3, #4
 8011f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f38:	4a0c      	ldr	r2, [pc, #48]	; (8011f6c <pxPortInitialiseStack+0x64>)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	3b14      	subs	r3, #20
 8011f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	3b04      	subs	r3, #4
 8011f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f06f 0202 	mvn.w	r2, #2
 8011f56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	3b20      	subs	r3, #32
 8011f5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	08011f71 	.word	0x08011f71

08011f70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f70:	b480      	push	{r7}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f7a:	4b12      	ldr	r3, [pc, #72]	; (8011fc4 <prvTaskExitError+0x54>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f82:	d00a      	beq.n	8011f9a <prvTaskExitError+0x2a>
	__asm volatile
 8011f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f88:	f383 8811 	msr	BASEPRI, r3
 8011f8c:	f3bf 8f6f 	isb	sy
 8011f90:	f3bf 8f4f 	dsb	sy
 8011f94:	60fb      	str	r3, [r7, #12]
}
 8011f96:	bf00      	nop
 8011f98:	e7fe      	b.n	8011f98 <prvTaskExitError+0x28>
	__asm volatile
 8011f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	60bb      	str	r3, [r7, #8]
}
 8011fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011fae:	bf00      	nop
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d0fc      	beq.n	8011fb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fb6:	bf00      	nop
 8011fb8:	bf00      	nop
 8011fba:	3714      	adds	r7, #20
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	200002a0 	.word	0x200002a0
	...

08011fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011fd0:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <pxCurrentTCBConst2>)
 8011fd2:	6819      	ldr	r1, [r3, #0]
 8011fd4:	6808      	ldr	r0, [r1, #0]
 8011fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fda:	f380 8809 	msr	PSP, r0
 8011fde:	f3bf 8f6f 	isb	sy
 8011fe2:	f04f 0000 	mov.w	r0, #0
 8011fe6:	f380 8811 	msr	BASEPRI, r0
 8011fea:	4770      	bx	lr
 8011fec:	f3af 8000 	nop.w

08011ff0 <pxCurrentTCBConst2>:
 8011ff0:	20004690 	.word	0x20004690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ff4:	bf00      	nop
 8011ff6:	bf00      	nop

08011ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ff8:	4808      	ldr	r0, [pc, #32]	; (801201c <prvPortStartFirstTask+0x24>)
 8011ffa:	6800      	ldr	r0, [r0, #0]
 8011ffc:	6800      	ldr	r0, [r0, #0]
 8011ffe:	f380 8808 	msr	MSP, r0
 8012002:	f04f 0000 	mov.w	r0, #0
 8012006:	f380 8814 	msr	CONTROL, r0
 801200a:	b662      	cpsie	i
 801200c:	b661      	cpsie	f
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	df00      	svc	0
 8012018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801201a:	bf00      	nop
 801201c:	e000ed08 	.word	0xe000ed08

08012020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012026:	4b46      	ldr	r3, [pc, #280]	; (8012140 <xPortStartScheduler+0x120>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4a46      	ldr	r2, [pc, #280]	; (8012144 <xPortStartScheduler+0x124>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d10a      	bne.n	8012046 <xPortStartScheduler+0x26>
	__asm volatile
 8012030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012034:	f383 8811 	msr	BASEPRI, r3
 8012038:	f3bf 8f6f 	isb	sy
 801203c:	f3bf 8f4f 	dsb	sy
 8012040:	613b      	str	r3, [r7, #16]
}
 8012042:	bf00      	nop
 8012044:	e7fe      	b.n	8012044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012046:	4b3e      	ldr	r3, [pc, #248]	; (8012140 <xPortStartScheduler+0x120>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	4a3f      	ldr	r2, [pc, #252]	; (8012148 <xPortStartScheduler+0x128>)
 801204c:	4293      	cmp	r3, r2
 801204e:	d10a      	bne.n	8012066 <xPortStartScheduler+0x46>
	__asm volatile
 8012050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012054:	f383 8811 	msr	BASEPRI, r3
 8012058:	f3bf 8f6f 	isb	sy
 801205c:	f3bf 8f4f 	dsb	sy
 8012060:	60fb      	str	r3, [r7, #12]
}
 8012062:	bf00      	nop
 8012064:	e7fe      	b.n	8012064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012066:	4b39      	ldr	r3, [pc, #228]	; (801214c <xPortStartScheduler+0x12c>)
 8012068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	b2db      	uxtb	r3, r3
 8012070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	22ff      	movs	r2, #255	; 0xff
 8012076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	b2db      	uxtb	r3, r3
 801207e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012080:	78fb      	ldrb	r3, [r7, #3]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012088:	b2da      	uxtb	r2, r3
 801208a:	4b31      	ldr	r3, [pc, #196]	; (8012150 <xPortStartScheduler+0x130>)
 801208c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801208e:	4b31      	ldr	r3, [pc, #196]	; (8012154 <xPortStartScheduler+0x134>)
 8012090:	2207      	movs	r2, #7
 8012092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012094:	e009      	b.n	80120aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012096:	4b2f      	ldr	r3, [pc, #188]	; (8012154 <xPortStartScheduler+0x134>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	3b01      	subs	r3, #1
 801209c:	4a2d      	ldr	r2, [pc, #180]	; (8012154 <xPortStartScheduler+0x134>)
 801209e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	005b      	lsls	r3, r3, #1
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120aa:	78fb      	ldrb	r3, [r7, #3]
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120b2:	2b80      	cmp	r3, #128	; 0x80
 80120b4:	d0ef      	beq.n	8012096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80120b6:	4b27      	ldr	r3, [pc, #156]	; (8012154 <xPortStartScheduler+0x134>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	f1c3 0307 	rsb	r3, r3, #7
 80120be:	2b04      	cmp	r3, #4
 80120c0:	d00a      	beq.n	80120d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	60bb      	str	r3, [r7, #8]
}
 80120d4:	bf00      	nop
 80120d6:	e7fe      	b.n	80120d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120d8:	4b1e      	ldr	r3, [pc, #120]	; (8012154 <xPortStartScheduler+0x134>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	021b      	lsls	r3, r3, #8
 80120de:	4a1d      	ldr	r2, [pc, #116]	; (8012154 <xPortStartScheduler+0x134>)
 80120e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120e2:	4b1c      	ldr	r3, [pc, #112]	; (8012154 <xPortStartScheduler+0x134>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120ea:	4a1a      	ldr	r2, [pc, #104]	; (8012154 <xPortStartScheduler+0x134>)
 80120ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	b2da      	uxtb	r2, r3
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80120f6:	4b18      	ldr	r3, [pc, #96]	; (8012158 <xPortStartScheduler+0x138>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a17      	ldr	r2, [pc, #92]	; (8012158 <xPortStartScheduler+0x138>)
 80120fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012102:	4b15      	ldr	r3, [pc, #84]	; (8012158 <xPortStartScheduler+0x138>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a14      	ldr	r2, [pc, #80]	; (8012158 <xPortStartScheduler+0x138>)
 8012108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801210c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801210e:	f000 f8dd 	bl	80122cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012112:	4b12      	ldr	r3, [pc, #72]	; (801215c <xPortStartScheduler+0x13c>)
 8012114:	2200      	movs	r2, #0
 8012116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012118:	f000 f8fc 	bl	8012314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801211c:	4b10      	ldr	r3, [pc, #64]	; (8012160 <xPortStartScheduler+0x140>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4a0f      	ldr	r2, [pc, #60]	; (8012160 <xPortStartScheduler+0x140>)
 8012122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012128:	f7ff ff66 	bl	8011ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801212c:	f7ff f848 	bl	80111c0 <vTaskSwitchContext>
	prvTaskExitError();
 8012130:	f7ff ff1e 	bl	8011f70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012134:	2300      	movs	r3, #0
}
 8012136:	4618      	mov	r0, r3
 8012138:	3718      	adds	r7, #24
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	e000ed00 	.word	0xe000ed00
 8012144:	410fc271 	.word	0x410fc271
 8012148:	410fc270 	.word	0x410fc270
 801214c:	e000e400 	.word	0xe000e400
 8012150:	20004cbc 	.word	0x20004cbc
 8012154:	20004cc0 	.word	0x20004cc0
 8012158:	e000ed20 	.word	0xe000ed20
 801215c:	200002a0 	.word	0x200002a0
 8012160:	e000ef34 	.word	0xe000ef34

08012164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
	__asm volatile
 801216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216e:	f383 8811 	msr	BASEPRI, r3
 8012172:	f3bf 8f6f 	isb	sy
 8012176:	f3bf 8f4f 	dsb	sy
 801217a:	607b      	str	r3, [r7, #4]
}
 801217c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801217e:	4b0f      	ldr	r3, [pc, #60]	; (80121bc <vPortEnterCritical+0x58>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	3301      	adds	r3, #1
 8012184:	4a0d      	ldr	r2, [pc, #52]	; (80121bc <vPortEnterCritical+0x58>)
 8012186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012188:	4b0c      	ldr	r3, [pc, #48]	; (80121bc <vPortEnterCritical+0x58>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b01      	cmp	r3, #1
 801218e:	d10f      	bne.n	80121b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012190:	4b0b      	ldr	r3, [pc, #44]	; (80121c0 <vPortEnterCritical+0x5c>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00a      	beq.n	80121b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219e:	f383 8811 	msr	BASEPRI, r3
 80121a2:	f3bf 8f6f 	isb	sy
 80121a6:	f3bf 8f4f 	dsb	sy
 80121aa:	603b      	str	r3, [r7, #0]
}
 80121ac:	bf00      	nop
 80121ae:	e7fe      	b.n	80121ae <vPortEnterCritical+0x4a>
	}
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr
 80121bc:	200002a0 	.word	0x200002a0
 80121c0:	e000ed04 	.word	0xe000ed04

080121c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121ca:	4b12      	ldr	r3, [pc, #72]	; (8012214 <vPortExitCritical+0x50>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d10a      	bne.n	80121e8 <vPortExitCritical+0x24>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	607b      	str	r3, [r7, #4]
}
 80121e4:	bf00      	nop
 80121e6:	e7fe      	b.n	80121e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80121e8:	4b0a      	ldr	r3, [pc, #40]	; (8012214 <vPortExitCritical+0x50>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3b01      	subs	r3, #1
 80121ee:	4a09      	ldr	r2, [pc, #36]	; (8012214 <vPortExitCritical+0x50>)
 80121f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121f2:	4b08      	ldr	r3, [pc, #32]	; (8012214 <vPortExitCritical+0x50>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d105      	bne.n	8012206 <vPortExitCritical+0x42>
 80121fa:	2300      	movs	r3, #0
 80121fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	f383 8811 	msr	BASEPRI, r3
}
 8012204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012206:	bf00      	nop
 8012208:	370c      	adds	r7, #12
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
 8012214:	200002a0 	.word	0x200002a0
	...

08012220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012220:	f3ef 8009 	mrs	r0, PSP
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	4b15      	ldr	r3, [pc, #84]	; (8012280 <pxCurrentTCBConst>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	f01e 0f10 	tst.w	lr, #16
 8012230:	bf08      	it	eq
 8012232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223a:	6010      	str	r0, [r2, #0]
 801223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012244:	f380 8811 	msr	BASEPRI, r0
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f7fe ffb6 	bl	80111c0 <vTaskSwitchContext>
 8012254:	f04f 0000 	mov.w	r0, #0
 8012258:	f380 8811 	msr	BASEPRI, r0
 801225c:	bc09      	pop	{r0, r3}
 801225e:	6819      	ldr	r1, [r3, #0]
 8012260:	6808      	ldr	r0, [r1, #0]
 8012262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012266:	f01e 0f10 	tst.w	lr, #16
 801226a:	bf08      	it	eq
 801226c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012270:	f380 8809 	msr	PSP, r0
 8012274:	f3bf 8f6f 	isb	sy
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	f3af 8000 	nop.w

08012280 <pxCurrentTCBConst>:
 8012280:	20004690 	.word	0x20004690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012284:	bf00      	nop
 8012286:	bf00      	nop

08012288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	607b      	str	r3, [r7, #4]
}
 80122a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122a2:	f7fe fed3 	bl	801104c <xTaskIncrementTick>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d003      	beq.n	80122b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122ac:	4b06      	ldr	r3, [pc, #24]	; (80122c8 <xPortSysTickHandler+0x40>)
 80122ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b2:	601a      	str	r2, [r3, #0]
 80122b4:	2300      	movs	r3, #0
 80122b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	f383 8811 	msr	BASEPRI, r3
}
 80122be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80122c0:	bf00      	nop
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	e000ed04 	.word	0xe000ed04

080122cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122cc:	b480      	push	{r7}
 80122ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122d0:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <vPortSetupTimerInterrupt+0x34>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122d6:	4b0b      	ldr	r3, [pc, #44]	; (8012304 <vPortSetupTimerInterrupt+0x38>)
 80122d8:	2200      	movs	r2, #0
 80122da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122dc:	4b0a      	ldr	r3, [pc, #40]	; (8012308 <vPortSetupTimerInterrupt+0x3c>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4a0a      	ldr	r2, [pc, #40]	; (801230c <vPortSetupTimerInterrupt+0x40>)
 80122e2:	fba2 2303 	umull	r2, r3, r2, r3
 80122e6:	099b      	lsrs	r3, r3, #6
 80122e8:	4a09      	ldr	r2, [pc, #36]	; (8012310 <vPortSetupTimerInterrupt+0x44>)
 80122ea:	3b01      	subs	r3, #1
 80122ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122ee:	4b04      	ldr	r3, [pc, #16]	; (8012300 <vPortSetupTimerInterrupt+0x34>)
 80122f0:	2207      	movs	r2, #7
 80122f2:	601a      	str	r2, [r3, #0]
}
 80122f4:	bf00      	nop
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	e000e010 	.word	0xe000e010
 8012304:	e000e018 	.word	0xe000e018
 8012308:	20000184 	.word	0x20000184
 801230c:	10624dd3 	.word	0x10624dd3
 8012310:	e000e014 	.word	0xe000e014

08012314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012324 <vPortEnableVFP+0x10>
 8012318:	6801      	ldr	r1, [r0, #0]
 801231a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801231e:	6001      	str	r1, [r0, #0]
 8012320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012322:	bf00      	nop
 8012324:	e000ed88 	.word	0xe000ed88

08012328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801232e:	f3ef 8305 	mrs	r3, IPSR
 8012332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2b0f      	cmp	r3, #15
 8012338:	d914      	bls.n	8012364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801233a:	4a17      	ldr	r2, [pc, #92]	; (8012398 <vPortValidateInterruptPriority+0x70>)
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4413      	add	r3, r2
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012344:	4b15      	ldr	r3, [pc, #84]	; (801239c <vPortValidateInterruptPriority+0x74>)
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	7afa      	ldrb	r2, [r7, #11]
 801234a:	429a      	cmp	r2, r3
 801234c:	d20a      	bcs.n	8012364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	607b      	str	r3, [r7, #4]
}
 8012360:	bf00      	nop
 8012362:	e7fe      	b.n	8012362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012364:	4b0e      	ldr	r3, [pc, #56]	; (80123a0 <vPortValidateInterruptPriority+0x78>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801236c:	4b0d      	ldr	r3, [pc, #52]	; (80123a4 <vPortValidateInterruptPriority+0x7c>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	429a      	cmp	r2, r3
 8012372:	d90a      	bls.n	801238a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	603b      	str	r3, [r7, #0]
}
 8012386:	bf00      	nop
 8012388:	e7fe      	b.n	8012388 <vPortValidateInterruptPriority+0x60>
	}
 801238a:	bf00      	nop
 801238c:	3714      	adds	r7, #20
 801238e:	46bd      	mov	sp, r7
 8012390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012394:	4770      	bx	lr
 8012396:	bf00      	nop
 8012398:	e000e3f0 	.word	0xe000e3f0
 801239c:	20004cbc 	.word	0x20004cbc
 80123a0:	e000ed0c 	.word	0xe000ed0c
 80123a4:	20004cc0 	.word	0x20004cc0

080123a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b08a      	sub	sp, #40	; 0x28
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80123b0:	2300      	movs	r3, #0
 80123b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123b4:	f7fe fd8e 	bl	8010ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123b8:	4b5b      	ldr	r3, [pc, #364]	; (8012528 <pvPortMalloc+0x180>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d101      	bne.n	80123c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123c0:	f000 f920 	bl	8012604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123c4:	4b59      	ldr	r3, [pc, #356]	; (801252c <pvPortMalloc+0x184>)
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	4013      	ands	r3, r2
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f040 8093 	bne.w	80124f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d01d      	beq.n	8012414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80123d8:	2208      	movs	r2, #8
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4413      	add	r3, r2
 80123de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f003 0307 	and.w	r3, r3, #7
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d014      	beq.n	8012414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f023 0307 	bic.w	r3, r3, #7
 80123f0:	3308      	adds	r3, #8
 80123f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f003 0307 	and.w	r3, r3, #7
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00a      	beq.n	8012414 <pvPortMalloc+0x6c>
	__asm volatile
 80123fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012402:	f383 8811 	msr	BASEPRI, r3
 8012406:	f3bf 8f6f 	isb	sy
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	617b      	str	r3, [r7, #20]
}
 8012410:	bf00      	nop
 8012412:	e7fe      	b.n	8012412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d06e      	beq.n	80124f8 <pvPortMalloc+0x150>
 801241a:	4b45      	ldr	r3, [pc, #276]	; (8012530 <pvPortMalloc+0x188>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	429a      	cmp	r2, r3
 8012422:	d869      	bhi.n	80124f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012424:	4b43      	ldr	r3, [pc, #268]	; (8012534 <pvPortMalloc+0x18c>)
 8012426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012428:	4b42      	ldr	r3, [pc, #264]	; (8012534 <pvPortMalloc+0x18c>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801242e:	e004      	b.n	801243a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	429a      	cmp	r2, r3
 8012442:	d903      	bls.n	801244c <pvPortMalloc+0xa4>
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d1f1      	bne.n	8012430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801244c:	4b36      	ldr	r3, [pc, #216]	; (8012528 <pvPortMalloc+0x180>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012452:	429a      	cmp	r2, r3
 8012454:	d050      	beq.n	80124f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012456:	6a3b      	ldr	r3, [r7, #32]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2208      	movs	r2, #8
 801245c:	4413      	add	r3, r2
 801245e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	6a3b      	ldr	r3, [r7, #32]
 8012466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	1ad2      	subs	r2, r2, r3
 8012470:	2308      	movs	r3, #8
 8012472:	005b      	lsls	r3, r3, #1
 8012474:	429a      	cmp	r2, r3
 8012476:	d91f      	bls.n	80124b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4413      	add	r3, r2
 801247e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	f003 0307 	and.w	r3, r3, #7
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00a      	beq.n	80124a0 <pvPortMalloc+0xf8>
	__asm volatile
 801248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248e:	f383 8811 	msr	BASEPRI, r3
 8012492:	f3bf 8f6f 	isb	sy
 8012496:	f3bf 8f4f 	dsb	sy
 801249a:	613b      	str	r3, [r7, #16]
}
 801249c:	bf00      	nop
 801249e:	e7fe      	b.n	801249e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	685a      	ldr	r2, [r3, #4]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	1ad2      	subs	r2, r2, r3
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124b2:	69b8      	ldr	r0, [r7, #24]
 80124b4:	f000 f908 	bl	80126c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124b8:	4b1d      	ldr	r3, [pc, #116]	; (8012530 <pvPortMalloc+0x188>)
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	1ad3      	subs	r3, r2, r3
 80124c2:	4a1b      	ldr	r2, [pc, #108]	; (8012530 <pvPortMalloc+0x188>)
 80124c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124c6:	4b1a      	ldr	r3, [pc, #104]	; (8012530 <pvPortMalloc+0x188>)
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	4b1b      	ldr	r3, [pc, #108]	; (8012538 <pvPortMalloc+0x190>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d203      	bcs.n	80124da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124d2:	4b17      	ldr	r3, [pc, #92]	; (8012530 <pvPortMalloc+0x188>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4a18      	ldr	r2, [pc, #96]	; (8012538 <pvPortMalloc+0x190>)
 80124d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124dc:	685a      	ldr	r2, [r3, #4]
 80124de:	4b13      	ldr	r3, [pc, #76]	; (801252c <pvPortMalloc+0x184>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	431a      	orrs	r2, r3
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	2200      	movs	r2, #0
 80124ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124ee:	4b13      	ldr	r3, [pc, #76]	; (801253c <pvPortMalloc+0x194>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	3301      	adds	r3, #1
 80124f4:	4a11      	ldr	r2, [pc, #68]	; (801253c <pvPortMalloc+0x194>)
 80124f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124f8:	f7fe fcfa 	bl	8010ef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	f003 0307 	and.w	r3, r3, #7
 8012502:	2b00      	cmp	r3, #0
 8012504:	d00a      	beq.n	801251c <pvPortMalloc+0x174>
	__asm volatile
 8012506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250a:	f383 8811 	msr	BASEPRI, r3
 801250e:	f3bf 8f6f 	isb	sy
 8012512:	f3bf 8f4f 	dsb	sy
 8012516:	60fb      	str	r3, [r7, #12]
}
 8012518:	bf00      	nop
 801251a:	e7fe      	b.n	801251a <pvPortMalloc+0x172>
	return pvReturn;
 801251c:	69fb      	ldr	r3, [r7, #28]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3728      	adds	r7, #40	; 0x28
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20007bac 	.word	0x20007bac
 801252c:	20007bc0 	.word	0x20007bc0
 8012530:	20007bb0 	.word	0x20007bb0
 8012534:	20007ba4 	.word	0x20007ba4
 8012538:	20007bb4 	.word	0x20007bb4
 801253c:	20007bb8 	.word	0x20007bb8

08012540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d04d      	beq.n	80125ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012552:	2308      	movs	r3, #8
 8012554:	425b      	negs	r3, r3
 8012556:	697a      	ldr	r2, [r7, #20]
 8012558:	4413      	add	r3, r2
 801255a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	685a      	ldr	r2, [r3, #4]
 8012564:	4b24      	ldr	r3, [pc, #144]	; (80125f8 <vPortFree+0xb8>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	4013      	ands	r3, r2
 801256a:	2b00      	cmp	r3, #0
 801256c:	d10a      	bne.n	8012584 <vPortFree+0x44>
	__asm volatile
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	60fb      	str	r3, [r7, #12]
}
 8012580:	bf00      	nop
 8012582:	e7fe      	b.n	8012582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00a      	beq.n	80125a2 <vPortFree+0x62>
	__asm volatile
 801258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012590:	f383 8811 	msr	BASEPRI, r3
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	60bb      	str	r3, [r7, #8]
}
 801259e:	bf00      	nop
 80125a0:	e7fe      	b.n	80125a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	685a      	ldr	r2, [r3, #4]
 80125a6:	4b14      	ldr	r3, [pc, #80]	; (80125f8 <vPortFree+0xb8>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4013      	ands	r3, r2
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d01e      	beq.n	80125ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d11a      	bne.n	80125ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	685a      	ldr	r2, [r3, #4]
 80125bc:	4b0e      	ldr	r3, [pc, #56]	; (80125f8 <vPortFree+0xb8>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	43db      	mvns	r3, r3
 80125c2:	401a      	ands	r2, r3
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125c8:	f7fe fc84 	bl	8010ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	685a      	ldr	r2, [r3, #4]
 80125d0:	4b0a      	ldr	r3, [pc, #40]	; (80125fc <vPortFree+0xbc>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	4413      	add	r3, r2
 80125d6:	4a09      	ldr	r2, [pc, #36]	; (80125fc <vPortFree+0xbc>)
 80125d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125da:	6938      	ldr	r0, [r7, #16]
 80125dc:	f000 f874 	bl	80126c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80125e0:	4b07      	ldr	r3, [pc, #28]	; (8012600 <vPortFree+0xc0>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	3301      	adds	r3, #1
 80125e6:	4a06      	ldr	r2, [pc, #24]	; (8012600 <vPortFree+0xc0>)
 80125e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80125ea:	f7fe fc81 	bl	8010ef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125ee:	bf00      	nop
 80125f0:	3718      	adds	r7, #24
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	20007bc0 	.word	0x20007bc0
 80125fc:	20007bb0 	.word	0x20007bb0
 8012600:	20007bbc 	.word	0x20007bbc

08012604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801260a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801260e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012610:	4b27      	ldr	r3, [pc, #156]	; (80126b0 <prvHeapInit+0xac>)
 8012612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f003 0307 	and.w	r3, r3, #7
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00c      	beq.n	8012638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	3307      	adds	r3, #7
 8012622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f023 0307 	bic.w	r3, r3, #7
 801262a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801262c:	68ba      	ldr	r2, [r7, #8]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	4a1f      	ldr	r2, [pc, #124]	; (80126b0 <prvHeapInit+0xac>)
 8012634:	4413      	add	r3, r2
 8012636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801263c:	4a1d      	ldr	r2, [pc, #116]	; (80126b4 <prvHeapInit+0xb0>)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012642:	4b1c      	ldr	r3, [pc, #112]	; (80126b4 <prvHeapInit+0xb0>)
 8012644:	2200      	movs	r2, #0
 8012646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	4413      	add	r3, r2
 801264e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012650:	2208      	movs	r2, #8
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	1a9b      	subs	r3, r3, r2
 8012656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f023 0307 	bic.w	r3, r3, #7
 801265e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	4a15      	ldr	r2, [pc, #84]	; (80126b8 <prvHeapInit+0xb4>)
 8012664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012666:	4b14      	ldr	r3, [pc, #80]	; (80126b8 <prvHeapInit+0xb4>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	2200      	movs	r2, #0
 801266c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801266e:	4b12      	ldr	r3, [pc, #72]	; (80126b8 <prvHeapInit+0xb4>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2200      	movs	r2, #0
 8012674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	1ad2      	subs	r2, r2, r3
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012684:	4b0c      	ldr	r3, [pc, #48]	; (80126b8 <prvHeapInit+0xb4>)
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	4a0a      	ldr	r2, [pc, #40]	; (80126bc <prvHeapInit+0xb8>)
 8012692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	4a09      	ldr	r2, [pc, #36]	; (80126c0 <prvHeapInit+0xbc>)
 801269a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801269c:	4b09      	ldr	r3, [pc, #36]	; (80126c4 <prvHeapInit+0xc0>)
 801269e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80126a2:	601a      	str	r2, [r3, #0]
}
 80126a4:	bf00      	nop
 80126a6:	3714      	adds	r7, #20
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr
 80126b0:	20004cc4 	.word	0x20004cc4
 80126b4:	20007ba4 	.word	0x20007ba4
 80126b8:	20007bac 	.word	0x20007bac
 80126bc:	20007bb4 	.word	0x20007bb4
 80126c0:	20007bb0 	.word	0x20007bb0
 80126c4:	20007bc0 	.word	0x20007bc0

080126c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126c8:	b480      	push	{r7}
 80126ca:	b085      	sub	sp, #20
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126d0:	4b28      	ldr	r3, [pc, #160]	; (8012774 <prvInsertBlockIntoFreeList+0xac>)
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	e002      	b.n	80126dc <prvInsertBlockIntoFreeList+0x14>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	60fb      	str	r3, [r7, #12]
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	687a      	ldr	r2, [r7, #4]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d8f7      	bhi.n	80126d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	68ba      	ldr	r2, [r7, #8]
 80126f0:	4413      	add	r3, r2
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d108      	bne.n	801270a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	685a      	ldr	r2, [r3, #4]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	441a      	add	r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	68ba      	ldr	r2, [r7, #8]
 8012714:	441a      	add	r2, r3
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	429a      	cmp	r2, r3
 801271c:	d118      	bne.n	8012750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	4b15      	ldr	r3, [pc, #84]	; (8012778 <prvInsertBlockIntoFreeList+0xb0>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	d00d      	beq.n	8012746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	685a      	ldr	r2, [r3, #4]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	441a      	add	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	601a      	str	r2, [r3, #0]
 8012744:	e008      	b.n	8012758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012746:	4b0c      	ldr	r3, [pc, #48]	; (8012778 <prvInsertBlockIntoFreeList+0xb0>)
 8012748:	681a      	ldr	r2, [r3, #0]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	601a      	str	r2, [r3, #0]
 801274e:	e003      	b.n	8012758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	429a      	cmp	r2, r3
 801275e:	d002      	beq.n	8012766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	687a      	ldr	r2, [r7, #4]
 8012764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012766:	bf00      	nop
 8012768:	3714      	adds	r7, #20
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop
 8012774:	20007ba4 	.word	0x20007ba4
 8012778:	20007bac 	.word	0x20007bac

0801277c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012780:	2200      	movs	r2, #0
 8012782:	4912      	ldr	r1, [pc, #72]	; (80127cc <MX_USB_DEVICE_Init+0x50>)
 8012784:	4812      	ldr	r0, [pc, #72]	; (80127d0 <MX_USB_DEVICE_Init+0x54>)
 8012786:	f7fc f8a5 	bl	800e8d4 <USBD_Init>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012790:	f7f1 f992 	bl	8003ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012794:	490f      	ldr	r1, [pc, #60]	; (80127d4 <MX_USB_DEVICE_Init+0x58>)
 8012796:	480e      	ldr	r0, [pc, #56]	; (80127d0 <MX_USB_DEVICE_Init+0x54>)
 8012798:	f7fc f8cc 	bl	800e934 <USBD_RegisterClass>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d001      	beq.n	80127a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80127a2:	f7f1 f989 	bl	8003ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80127a6:	490c      	ldr	r1, [pc, #48]	; (80127d8 <MX_USB_DEVICE_Init+0x5c>)
 80127a8:	4809      	ldr	r0, [pc, #36]	; (80127d0 <MX_USB_DEVICE_Init+0x54>)
 80127aa:	f7fb ffed 	bl	800e788 <USBD_CDC_RegisterInterface>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d001      	beq.n	80127b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80127b4:	f7f1 f980 	bl	8003ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80127b8:	4805      	ldr	r0, [pc, #20]	; (80127d0 <MX_USB_DEVICE_Init+0x54>)
 80127ba:	f7fc f8e2 	bl	800e982 <USBD_Start>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d001      	beq.n	80127c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80127c4:	f7f1 f978 	bl	8003ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80127c8:	bf00      	nop
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	200002b8 	.word	0x200002b8
 80127d0:	20007bc4 	.word	0x20007bc4
 80127d4:	2000019c 	.word	0x2000019c
 80127d8:	200002a4 	.word	0x200002a4

080127dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80127e0:	2200      	movs	r2, #0
 80127e2:	4905      	ldr	r1, [pc, #20]	; (80127f8 <CDC_Init_FS+0x1c>)
 80127e4:	4805      	ldr	r0, [pc, #20]	; (80127fc <CDC_Init_FS+0x20>)
 80127e6:	f7fb ffe4 	bl	800e7b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80127ea:	4905      	ldr	r1, [pc, #20]	; (8012800 <CDC_Init_FS+0x24>)
 80127ec:	4803      	ldr	r0, [pc, #12]	; (80127fc <CDC_Init_FS+0x20>)
 80127ee:	f7fb fffe 	bl	800e7ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80127f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	20008694 	.word	0x20008694
 80127fc:	20007bc4 	.word	0x20007bc4
 8012800:	20007e94 	.word	0x20007e94

08012804 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012804:	b480      	push	{r7}
 8012806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012808:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801280a:	4618      	mov	r0, r3
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr

08012814 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	4603      	mov	r3, r0
 801281c:	6039      	str	r1, [r7, #0]
 801281e:	71fb      	strb	r3, [r7, #7]
 8012820:	4613      	mov	r3, r2
 8012822:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012824:	79fb      	ldrb	r3, [r7, #7]
 8012826:	2b23      	cmp	r3, #35	; 0x23
 8012828:	d84a      	bhi.n	80128c0 <CDC_Control_FS+0xac>
 801282a:	a201      	add	r2, pc, #4	; (adr r2, 8012830 <CDC_Control_FS+0x1c>)
 801282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012830:	080128c1 	.word	0x080128c1
 8012834:	080128c1 	.word	0x080128c1
 8012838:	080128c1 	.word	0x080128c1
 801283c:	080128c1 	.word	0x080128c1
 8012840:	080128c1 	.word	0x080128c1
 8012844:	080128c1 	.word	0x080128c1
 8012848:	080128c1 	.word	0x080128c1
 801284c:	080128c1 	.word	0x080128c1
 8012850:	080128c1 	.word	0x080128c1
 8012854:	080128c1 	.word	0x080128c1
 8012858:	080128c1 	.word	0x080128c1
 801285c:	080128c1 	.word	0x080128c1
 8012860:	080128c1 	.word	0x080128c1
 8012864:	080128c1 	.word	0x080128c1
 8012868:	080128c1 	.word	0x080128c1
 801286c:	080128c1 	.word	0x080128c1
 8012870:	080128c1 	.word	0x080128c1
 8012874:	080128c1 	.word	0x080128c1
 8012878:	080128c1 	.word	0x080128c1
 801287c:	080128c1 	.word	0x080128c1
 8012880:	080128c1 	.word	0x080128c1
 8012884:	080128c1 	.word	0x080128c1
 8012888:	080128c1 	.word	0x080128c1
 801288c:	080128c1 	.word	0x080128c1
 8012890:	080128c1 	.word	0x080128c1
 8012894:	080128c1 	.word	0x080128c1
 8012898:	080128c1 	.word	0x080128c1
 801289c:	080128c1 	.word	0x080128c1
 80128a0:	080128c1 	.word	0x080128c1
 80128a4:	080128c1 	.word	0x080128c1
 80128a8:	080128c1 	.word	0x080128c1
 80128ac:	080128c1 	.word	0x080128c1
 80128b0:	080128c1 	.word	0x080128c1
 80128b4:	080128c1 	.word	0x080128c1
 80128b8:	080128c1 	.word	0x080128c1
 80128bc:	080128c1 	.word	0x080128c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80128c0:	bf00      	nop
  }

  return (USBD_OK);
 80128c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	370c      	adds	r7, #12
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr

080128d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80128da:	6879      	ldr	r1, [r7, #4]
 80128dc:	4805      	ldr	r0, [pc, #20]	; (80128f4 <CDC_Receive_FS+0x24>)
 80128de:	f7fb ff86 	bl	800e7ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80128e2:	4804      	ldr	r0, [pc, #16]	; (80128f4 <CDC_Receive_FS+0x24>)
 80128e4:	f7fb ffcc 	bl	800e880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80128e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3708      	adds	r7, #8
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	20007bc4 	.word	0x20007bc4

080128f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	460b      	mov	r3, r1
 8012902:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012904:	2300      	movs	r3, #0
 8012906:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012908:	4b0d      	ldr	r3, [pc, #52]	; (8012940 <CDC_Transmit_FS+0x48>)
 801290a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801290e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012916:	2b00      	cmp	r3, #0
 8012918:	d001      	beq.n	801291e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801291a:	2301      	movs	r3, #1
 801291c:	e00b      	b.n	8012936 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801291e:	887b      	ldrh	r3, [r7, #2]
 8012920:	461a      	mov	r2, r3
 8012922:	6879      	ldr	r1, [r7, #4]
 8012924:	4806      	ldr	r0, [pc, #24]	; (8012940 <CDC_Transmit_FS+0x48>)
 8012926:	f7fb ff44 	bl	800e7b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801292a:	4805      	ldr	r0, [pc, #20]	; (8012940 <CDC_Transmit_FS+0x48>)
 801292c:	f7fb ff78 	bl	800e820 <USBD_CDC_TransmitPacket>
 8012930:	4603      	mov	r3, r0
 8012932:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012934:	7bfb      	ldrb	r3, [r7, #15]
}
 8012936:	4618      	mov	r0, r3
 8012938:	3710      	adds	r7, #16
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	20007bc4 	.word	0x20007bc4

08012944 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012944:	b480      	push	{r7}
 8012946:	b087      	sub	sp, #28
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	4613      	mov	r3, r2
 8012950:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801295a:	4618      	mov	r0, r3
 801295c:	371c      	adds	r7, #28
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr
	...

08012968 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	4603      	mov	r3, r0
 8012970:	6039      	str	r1, [r7, #0]
 8012972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	2212      	movs	r2, #18
 8012978:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801297a:	4b03      	ldr	r3, [pc, #12]	; (8012988 <USBD_FS_DeviceDescriptor+0x20>)
}
 801297c:	4618      	mov	r0, r3
 801297e:	370c      	adds	r7, #12
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr
 8012988:	200002d8 	.word	0x200002d8

0801298c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	4603      	mov	r3, r0
 8012994:	6039      	str	r1, [r7, #0]
 8012996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	2204      	movs	r2, #4
 801299c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801299e:	4b03      	ldr	r3, [pc, #12]	; (80129ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	200002f8 	.word	0x200002f8

080129b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	4603      	mov	r3, r0
 80129b8:	6039      	str	r1, [r7, #0]
 80129ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80129bc:	79fb      	ldrb	r3, [r7, #7]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d105      	bne.n	80129ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80129c2:	683a      	ldr	r2, [r7, #0]
 80129c4:	4907      	ldr	r1, [pc, #28]	; (80129e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80129c6:	4808      	ldr	r0, [pc, #32]	; (80129e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80129c8:	f7fd f837 	bl	800fa3a <USBD_GetString>
 80129cc:	e004      	b.n	80129d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80129ce:	683a      	ldr	r2, [r7, #0]
 80129d0:	4904      	ldr	r1, [pc, #16]	; (80129e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80129d2:	4805      	ldr	r0, [pc, #20]	; (80129e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80129d4:	f7fd f831 	bl	800fa3a <USBD_GetString>
  }
  return USBD_StrDesc;
 80129d8:	4b02      	ldr	r3, [pc, #8]	; (80129e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80129da:	4618      	mov	r0, r3
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	20008e94 	.word	0x20008e94
 80129e8:	080167ac 	.word	0x080167ac

080129ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	4603      	mov	r3, r0
 80129f4:	6039      	str	r1, [r7, #0]
 80129f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80129f8:	683a      	ldr	r2, [r7, #0]
 80129fa:	4904      	ldr	r1, [pc, #16]	; (8012a0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80129fc:	4804      	ldr	r0, [pc, #16]	; (8012a10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80129fe:	f7fd f81c 	bl	800fa3a <USBD_GetString>
  return USBD_StrDesc;
 8012a02:	4b02      	ldr	r3, [pc, #8]	; (8012a0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	20008e94 	.word	0x20008e94
 8012a10:	080167c4 	.word	0x080167c4

08012a14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	6039      	str	r1, [r7, #0]
 8012a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	221a      	movs	r2, #26
 8012a24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012a26:	f000 f855 	bl	8012ad4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012a2a:	4b02      	ldr	r3, [pc, #8]	; (8012a34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	200002fc 	.word	0x200002fc

08012a38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	6039      	str	r1, [r7, #0]
 8012a42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012a44:	79fb      	ldrb	r3, [r7, #7]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d105      	bne.n	8012a56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012a4a:	683a      	ldr	r2, [r7, #0]
 8012a4c:	4907      	ldr	r1, [pc, #28]	; (8012a6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012a4e:	4808      	ldr	r0, [pc, #32]	; (8012a70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012a50:	f7fc fff3 	bl	800fa3a <USBD_GetString>
 8012a54:	e004      	b.n	8012a60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012a56:	683a      	ldr	r2, [r7, #0]
 8012a58:	4904      	ldr	r1, [pc, #16]	; (8012a6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012a5a:	4805      	ldr	r0, [pc, #20]	; (8012a70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012a5c:	f7fc ffed 	bl	800fa3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a60:	4b02      	ldr	r3, [pc, #8]	; (8012a6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3708      	adds	r7, #8
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	20008e94 	.word	0x20008e94
 8012a70:	080167d8 	.word	0x080167d8

08012a74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	6039      	str	r1, [r7, #0]
 8012a7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a80:	79fb      	ldrb	r3, [r7, #7]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d105      	bne.n	8012a92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012a86:	683a      	ldr	r2, [r7, #0]
 8012a88:	4907      	ldr	r1, [pc, #28]	; (8012aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012a8a:	4808      	ldr	r0, [pc, #32]	; (8012aac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012a8c:	f7fc ffd5 	bl	800fa3a <USBD_GetString>
 8012a90:	e004      	b.n	8012a9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012a92:	683a      	ldr	r2, [r7, #0]
 8012a94:	4904      	ldr	r1, [pc, #16]	; (8012aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012a96:	4805      	ldr	r0, [pc, #20]	; (8012aac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012a98:	f7fc ffcf 	bl	800fa3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a9c:	4b02      	ldr	r3, [pc, #8]	; (8012aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20008e94 	.word	0x20008e94
 8012aac:	080167e4 	.word	0x080167e4

08012ab0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	6039      	str	r1, [r7, #0]
 8012aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	220c      	movs	r2, #12
 8012ac0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012ac2:	4b03      	ldr	r3, [pc, #12]	; (8012ad0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	370c      	adds	r7, #12
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr
 8012ad0:	200002ec 	.word	0x200002ec

08012ad4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012ada:	4b0f      	ldr	r3, [pc, #60]	; (8012b18 <Get_SerialNum+0x44>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012ae0:	4b0e      	ldr	r3, [pc, #56]	; (8012b1c <Get_SerialNum+0x48>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012ae6:	4b0e      	ldr	r3, [pc, #56]	; (8012b20 <Get_SerialNum+0x4c>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012aec:	68fa      	ldr	r2, [r7, #12]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4413      	add	r3, r2
 8012af2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d009      	beq.n	8012b0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012afa:	2208      	movs	r2, #8
 8012afc:	4909      	ldr	r1, [pc, #36]	; (8012b24 <Get_SerialNum+0x50>)
 8012afe:	68f8      	ldr	r0, [r7, #12]
 8012b00:	f000 f814 	bl	8012b2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012b04:	2204      	movs	r2, #4
 8012b06:	4908      	ldr	r1, [pc, #32]	; (8012b28 <Get_SerialNum+0x54>)
 8012b08:	68b8      	ldr	r0, [r7, #8]
 8012b0a:	f000 f80f 	bl	8012b2c <IntToUnicode>
  }
}
 8012b0e:	bf00      	nop
 8012b10:	3710      	adds	r7, #16
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	1fff7590 	.word	0x1fff7590
 8012b1c:	1fff7594 	.word	0x1fff7594
 8012b20:	1fff7598 	.word	0x1fff7598
 8012b24:	200002fe 	.word	0x200002fe
 8012b28:	2000030e 	.word	0x2000030e

08012b2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b087      	sub	sp, #28
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	4613      	mov	r3, r2
 8012b38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012b3e:	2300      	movs	r3, #0
 8012b40:	75fb      	strb	r3, [r7, #23]
 8012b42:	e027      	b.n	8012b94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	0f1b      	lsrs	r3, r3, #28
 8012b48:	2b09      	cmp	r3, #9
 8012b4a:	d80b      	bhi.n	8012b64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	0f1b      	lsrs	r3, r3, #28
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	7dfb      	ldrb	r3, [r7, #23]
 8012b54:	005b      	lsls	r3, r3, #1
 8012b56:	4619      	mov	r1, r3
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	440b      	add	r3, r1
 8012b5c:	3230      	adds	r2, #48	; 0x30
 8012b5e:	b2d2      	uxtb	r2, r2
 8012b60:	701a      	strb	r2, [r3, #0]
 8012b62:	e00a      	b.n	8012b7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	0f1b      	lsrs	r3, r3, #28
 8012b68:	b2da      	uxtb	r2, r3
 8012b6a:	7dfb      	ldrb	r3, [r7, #23]
 8012b6c:	005b      	lsls	r3, r3, #1
 8012b6e:	4619      	mov	r1, r3
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	440b      	add	r3, r1
 8012b74:	3237      	adds	r2, #55	; 0x37
 8012b76:	b2d2      	uxtb	r2, r2
 8012b78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	011b      	lsls	r3, r3, #4
 8012b7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012b80:	7dfb      	ldrb	r3, [r7, #23]
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	3301      	adds	r3, #1
 8012b86:	68ba      	ldr	r2, [r7, #8]
 8012b88:	4413      	add	r3, r2
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012b8e:	7dfb      	ldrb	r3, [r7, #23]
 8012b90:	3301      	adds	r3, #1
 8012b92:	75fb      	strb	r3, [r7, #23]
 8012b94:	7dfa      	ldrb	r2, [r7, #23]
 8012b96:	79fb      	ldrb	r3, [r7, #7]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d3d3      	bcc.n	8012b44 <IntToUnicode+0x18>
  }
}
 8012b9c:	bf00      	nop
 8012b9e:	bf00      	nop
 8012ba0:	371c      	adds	r7, #28
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba8:	4770      	bx	lr
	...

08012bac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b0b0      	sub	sp, #192	; 0xc0
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012bb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012bb8:	2200      	movs	r2, #0
 8012bba:	601a      	str	r2, [r3, #0]
 8012bbc:	605a      	str	r2, [r3, #4]
 8012bbe:	609a      	str	r2, [r3, #8]
 8012bc0:	60da      	str	r2, [r3, #12]
 8012bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012bc4:	f107 0314 	add.w	r3, r7, #20
 8012bc8:	2298      	movs	r2, #152	; 0x98
 8012bca:	2100      	movs	r1, #0
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f000 fe9e 	bl	801390e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012bda:	d163      	bne.n	8012ca4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012be0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012be2:	2300      	movs	r3, #0
 8012be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012be8:	f107 0314 	add.w	r3, r7, #20
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7f7 fcdd 	bl	800a5ac <HAL_RCCEx_PeriphCLKConfig>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012bf8:	f7f0 ff5e 	bl	8003ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012bfc:	4b2b      	ldr	r3, [pc, #172]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c00:	4a2a      	ldr	r2, [pc, #168]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c02:	f043 0301 	orr.w	r3, r3, #1
 8012c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012c08:	4b28      	ldr	r3, [pc, #160]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c0c:	f003 0301 	and.w	r3, r3, #1
 8012c10:	613b      	str	r3, [r7, #16]
 8012c12:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012c14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c22:	2300      	movs	r3, #0
 8012c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012c28:	2303      	movs	r3, #3
 8012c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012c2e:	230a      	movs	r3, #10
 8012c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012c38:	4619      	mov	r1, r3
 8012c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012c3e:	f7f5 f89f 	bl	8007d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012c42:	4b1a      	ldr	r3, [pc, #104]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c46:	4a19      	ldr	r2, [pc, #100]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012c4e:	4b17      	ldr	r3, [pc, #92]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012c56:	60fb      	str	r3, [r7, #12]
 8012c58:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012c5a:	4b14      	ldr	r3, [pc, #80]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d114      	bne.n	8012c90 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012c66:	4b11      	ldr	r3, [pc, #68]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c6a:	4a10      	ldr	r2, [pc, #64]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c70:	6593      	str	r3, [r2, #88]	; 0x58
 8012c72:	4b0e      	ldr	r3, [pc, #56]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c7a:	60bb      	str	r3, [r7, #8]
 8012c7c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012c7e:	f7f6 fcdd 	bl	800963c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012c82:	4b0a      	ldr	r3, [pc, #40]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c86:	4a09      	ldr	r2, [pc, #36]	; (8012cac <HAL_PCD_MspInit+0x100>)
 8012c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8012c8e:	e001      	b.n	8012c94 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012c90:	f7f6 fcd4 	bl	800963c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012c94:	2200      	movs	r2, #0
 8012c96:	2105      	movs	r1, #5
 8012c98:	2043      	movs	r0, #67	; 0x43
 8012c9a:	f7f4 fdd5 	bl	8007848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012c9e:	2043      	movs	r0, #67	; 0x43
 8012ca0:	f7f4 fdee 	bl	8007880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012ca4:	bf00      	nop
 8012ca6:	37c0      	adds	r7, #192	; 0xc0
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	40021000 	.word	0x40021000

08012cb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	4610      	mov	r0, r2
 8012cc8:	f7fb fea6 	bl	800ea18 <USBD_LL_SetupStage>
}
 8012ccc:	bf00      	nop
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	460b      	mov	r3, r1
 8012cde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012ce6:	78fa      	ldrb	r2, [r7, #3]
 8012ce8:	6879      	ldr	r1, [r7, #4]
 8012cea:	4613      	mov	r3, r2
 8012cec:	00db      	lsls	r3, r3, #3
 8012cee:	4413      	add	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	440b      	add	r3, r1
 8012cf4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	78fb      	ldrb	r3, [r7, #3]
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	f7fb fee0 	bl	800eac2 <USBD_LL_DataOutStage>
}
 8012d02:	bf00      	nop
 8012d04:	3708      	adds	r7, #8
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b082      	sub	sp, #8
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	460b      	mov	r3, r1
 8012d14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012d1c:	78fa      	ldrb	r2, [r7, #3]
 8012d1e:	6879      	ldr	r1, [r7, #4]
 8012d20:	4613      	mov	r3, r2
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	4413      	add	r3, r2
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	440b      	add	r3, r1
 8012d2a:	334c      	adds	r3, #76	; 0x4c
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	78fb      	ldrb	r3, [r7, #3]
 8012d30:	4619      	mov	r1, r3
 8012d32:	f7fb ff29 	bl	800eb88 <USBD_LL_DataInStage>
}
 8012d36:	bf00      	nop
 8012d38:	3708      	adds	r7, #8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b082      	sub	sp, #8
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fc f83d 	bl	800edcc <USBD_LL_SOF>
}
 8012d52:	bf00      	nop
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b084      	sub	sp, #16
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012d62:	2301      	movs	r3, #1
 8012d64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	2b02      	cmp	r3, #2
 8012d6c:	d001      	beq.n	8012d72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012d6e:	f7f0 fea3 	bl	8003ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d78:	7bfa      	ldrb	r2, [r7, #15]
 8012d7a:	4611      	mov	r1, r2
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7fb ffe7 	bl	800ed50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7fb ff93 	bl	800ecb4 <USBD_LL_Reset>
}
 8012d8e:	bf00      	nop
 8012d90:	3710      	adds	r7, #16
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
	...

08012d98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	6812      	ldr	r2, [r2, #0]
 8012dae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012db2:	f043 0301 	orr.w	r3, r3, #1
 8012db6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fb ffd6 	bl	800ed70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6a1b      	ldr	r3, [r3, #32]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d005      	beq.n	8012dd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012dcc:	4b04      	ldr	r3, [pc, #16]	; (8012de0 <HAL_PCD_SuspendCallback+0x48>)
 8012dce:	691b      	ldr	r3, [r3, #16]
 8012dd0:	4a03      	ldr	r2, [pc, #12]	; (8012de0 <HAL_PCD_SuspendCallback+0x48>)
 8012dd2:	f043 0306 	orr.w	r3, r3, #6
 8012dd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012dd8:	bf00      	nop
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	e000ed00 	.word	0xe000ed00

08012de4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	6812      	ldr	r2, [r2, #0]
 8012dfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012dfe:	f023 0301 	bic.w	r3, r3, #1
 8012e02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a1b      	ldr	r3, [r3, #32]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d007      	beq.n	8012e1c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e0c:	4b08      	ldr	r3, [pc, #32]	; (8012e30 <HAL_PCD_ResumeCallback+0x4c>)
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	4a07      	ldr	r2, [pc, #28]	; (8012e30 <HAL_PCD_ResumeCallback+0x4c>)
 8012e12:	f023 0306 	bic.w	r3, r3, #6
 8012e16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012e18:	f000 faf4 	bl	8013404 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fb ffba 	bl	800ed9c <USBD_LL_Resume>
}
 8012e28:	bf00      	nop
 8012e2a:	3708      	adds	r7, #8
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}
 8012e30:	e000ed00 	.word	0xe000ed00

08012e34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e46:	78fa      	ldrb	r2, [r7, #3]
 8012e48:	4611      	mov	r1, r2
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7fc f806 	bl	800ee5c <USBD_LL_IsoOUTIncomplete>
}
 8012e50:	bf00      	nop
 8012e52:	3708      	adds	r7, #8
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	460b      	mov	r3, r1
 8012e62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e6a:	78fa      	ldrb	r2, [r7, #3]
 8012e6c:	4611      	mov	r1, r2
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fb ffce 	bl	800ee10 <USBD_LL_IsoINIncomplete>
}
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fc f80c 	bl	800eea8 <USBD_LL_DevConnected>
}
 8012e90:	bf00      	nop
 8012e92:	3708      	adds	r7, #8
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fc f809 	bl	800eebe <USBD_LL_DevDisconnected>
}
 8012eac:	bf00      	nop
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d139      	bne.n	8012f38 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012ec4:	4a1f      	ldr	r2, [pc, #124]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	4a1d      	ldr	r2, [pc, #116]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ed0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012ed4:	4b1b      	ldr	r3, [pc, #108]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ed6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012eda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012edc:	4b19      	ldr	r3, [pc, #100]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ede:	2206      	movs	r2, #6
 8012ee0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012ee2:	4b18      	ldr	r3, [pc, #96]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ee4:	2202      	movs	r2, #2
 8012ee6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012ee8:	4b16      	ldr	r3, [pc, #88]	; (8012f44 <USBD_LL_Init+0x90>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012eee:	4b15      	ldr	r3, [pc, #84]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012ef4:	4b13      	ldr	r3, [pc, #76]	; (8012f44 <USBD_LL_Init+0x90>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012efa:	4b12      	ldr	r3, [pc, #72]	; (8012f44 <USBD_LL_Init+0x90>)
 8012efc:	2200      	movs	r2, #0
 8012efe:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012f00:	4b10      	ldr	r3, [pc, #64]	; (8012f44 <USBD_LL_Init+0x90>)
 8012f02:	2200      	movs	r2, #0
 8012f04:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012f06:	4b0f      	ldr	r3, [pc, #60]	; (8012f44 <USBD_LL_Init+0x90>)
 8012f08:	2200      	movs	r2, #0
 8012f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012f0c:	480d      	ldr	r0, [pc, #52]	; (8012f44 <USBD_LL_Init+0x90>)
 8012f0e:	f7f5 f8f9 	bl	8008104 <HAL_PCD_Init>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d001      	beq.n	8012f1c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8012f18:	f7f0 fdce 	bl	8003ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012f1c:	2180      	movs	r1, #128	; 0x80
 8012f1e:	4809      	ldr	r0, [pc, #36]	; (8012f44 <USBD_LL_Init+0x90>)
 8012f20:	f7f6 fa7b 	bl	800941a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012f24:	2240      	movs	r2, #64	; 0x40
 8012f26:	2100      	movs	r1, #0
 8012f28:	4806      	ldr	r0, [pc, #24]	; (8012f44 <USBD_LL_Init+0x90>)
 8012f2a:	f7f6 fa2f 	bl	800938c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012f2e:	2280      	movs	r2, #128	; 0x80
 8012f30:	2101      	movs	r1, #1
 8012f32:	4804      	ldr	r0, [pc, #16]	; (8012f44 <USBD_LL_Init+0x90>)
 8012f34:	f7f6 fa2a 	bl	800938c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012f38:	2300      	movs	r3, #0
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	20009094 	.word	0x20009094

08012f48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f50:	2300      	movs	r3, #0
 8012f52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f54:	2300      	movs	r3, #0
 8012f56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7f5 f9f4 	bl	800834c <HAL_PCD_Start>
 8012f64:	4603      	mov	r3, r0
 8012f66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012f68:	7bbb      	ldrb	r3, [r7, #14]
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d816      	bhi.n	8012f9c <USBD_LL_Start+0x54>
 8012f6e:	a201      	add	r2, pc, #4	; (adr r2, 8012f74 <USBD_LL_Start+0x2c>)
 8012f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f74:	08012f85 	.word	0x08012f85
 8012f78:	08012f8b 	.word	0x08012f8b
 8012f7c:	08012f91 	.word	0x08012f91
 8012f80:	08012f97 	.word	0x08012f97
    case HAL_OK :
      usb_status = USBD_OK;
 8012f84:	2300      	movs	r3, #0
 8012f86:	73fb      	strb	r3, [r7, #15]
    break;
 8012f88:	e00b      	b.n	8012fa2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f8a:	2303      	movs	r3, #3
 8012f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f8e:	e008      	b.n	8012fa2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f90:	2301      	movs	r3, #1
 8012f92:	73fb      	strb	r3, [r7, #15]
    break;
 8012f94:	e005      	b.n	8012fa2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f96:	2303      	movs	r3, #3
 8012f98:	73fb      	strb	r3, [r7, #15]
    break;
 8012f9a:	e002      	b.n	8012fa2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012f9c:	2303      	movs	r3, #3
 8012f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8012fa0:	bf00      	nop
  }
  return usb_status;
 8012fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	4608      	mov	r0, r1
 8012fb6:	4611      	mov	r1, r2
 8012fb8:	461a      	mov	r2, r3
 8012fba:	4603      	mov	r3, r0
 8012fbc:	70fb      	strb	r3, [r7, #3]
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	70bb      	strb	r3, [r7, #2]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012fd4:	78bb      	ldrb	r3, [r7, #2]
 8012fd6:	883a      	ldrh	r2, [r7, #0]
 8012fd8:	78f9      	ldrb	r1, [r7, #3]
 8012fda:	f7f5 fe9e 	bl	8008d1a <HAL_PCD_EP_Open>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012fe2:	7bbb      	ldrb	r3, [r7, #14]
 8012fe4:	2b03      	cmp	r3, #3
 8012fe6:	d817      	bhi.n	8013018 <USBD_LL_OpenEP+0x6c>
 8012fe8:	a201      	add	r2, pc, #4	; (adr r2, 8012ff0 <USBD_LL_OpenEP+0x44>)
 8012fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fee:	bf00      	nop
 8012ff0:	08013001 	.word	0x08013001
 8012ff4:	08013007 	.word	0x08013007
 8012ff8:	0801300d 	.word	0x0801300d
 8012ffc:	08013013 	.word	0x08013013
    case HAL_OK :
      usb_status = USBD_OK;
 8013000:	2300      	movs	r3, #0
 8013002:	73fb      	strb	r3, [r7, #15]
    break;
 8013004:	e00b      	b.n	801301e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013006:	2303      	movs	r3, #3
 8013008:	73fb      	strb	r3, [r7, #15]
    break;
 801300a:	e008      	b.n	801301e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801300c:	2301      	movs	r3, #1
 801300e:	73fb      	strb	r3, [r7, #15]
    break;
 8013010:	e005      	b.n	801301e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013012:	2303      	movs	r3, #3
 8013014:	73fb      	strb	r3, [r7, #15]
    break;
 8013016:	e002      	b.n	801301e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013018:	2303      	movs	r3, #3
 801301a:	73fb      	strb	r3, [r7, #15]
    break;
 801301c:	bf00      	nop
  }
  return usb_status;
 801301e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	460b      	mov	r3, r1
 8013032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013034:	2300      	movs	r3, #0
 8013036:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013038:	2300      	movs	r3, #0
 801303a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013042:	78fa      	ldrb	r2, [r7, #3]
 8013044:	4611      	mov	r1, r2
 8013046:	4618      	mov	r0, r3
 8013048:	f7f5 fecf 	bl	8008dea <HAL_PCD_EP_Close>
 801304c:	4603      	mov	r3, r0
 801304e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013050:	7bbb      	ldrb	r3, [r7, #14]
 8013052:	2b03      	cmp	r3, #3
 8013054:	d816      	bhi.n	8013084 <USBD_LL_CloseEP+0x5c>
 8013056:	a201      	add	r2, pc, #4	; (adr r2, 801305c <USBD_LL_CloseEP+0x34>)
 8013058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801305c:	0801306d 	.word	0x0801306d
 8013060:	08013073 	.word	0x08013073
 8013064:	08013079 	.word	0x08013079
 8013068:	0801307f 	.word	0x0801307f
    case HAL_OK :
      usb_status = USBD_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	73fb      	strb	r3, [r7, #15]
    break;
 8013070:	e00b      	b.n	801308a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013072:	2303      	movs	r3, #3
 8013074:	73fb      	strb	r3, [r7, #15]
    break;
 8013076:	e008      	b.n	801308a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013078:	2301      	movs	r3, #1
 801307a:	73fb      	strb	r3, [r7, #15]
    break;
 801307c:	e005      	b.n	801308a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801307e:	2303      	movs	r3, #3
 8013080:	73fb      	strb	r3, [r7, #15]
    break;
 8013082:	e002      	b.n	801308a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013084:	2303      	movs	r3, #3
 8013086:	73fb      	strb	r3, [r7, #15]
    break;
 8013088:	bf00      	nop
  }
  return usb_status;
 801308a:	7bfb      	ldrb	r3, [r7, #15]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	460b      	mov	r3, r1
 801309e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130a0:	2300      	movs	r3, #0
 80130a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80130ae:	78fa      	ldrb	r2, [r7, #3]
 80130b0:	4611      	mov	r1, r2
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f5 ff76 	bl	8008fa4 <HAL_PCD_EP_SetStall>
 80130b8:	4603      	mov	r3, r0
 80130ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80130bc:	7bbb      	ldrb	r3, [r7, #14]
 80130be:	2b03      	cmp	r3, #3
 80130c0:	d816      	bhi.n	80130f0 <USBD_LL_StallEP+0x5c>
 80130c2:	a201      	add	r2, pc, #4	; (adr r2, 80130c8 <USBD_LL_StallEP+0x34>)
 80130c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130c8:	080130d9 	.word	0x080130d9
 80130cc:	080130df 	.word	0x080130df
 80130d0:	080130e5 	.word	0x080130e5
 80130d4:	080130eb 	.word	0x080130eb
    case HAL_OK :
      usb_status = USBD_OK;
 80130d8:	2300      	movs	r3, #0
 80130da:	73fb      	strb	r3, [r7, #15]
    break;
 80130dc:	e00b      	b.n	80130f6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80130de:	2303      	movs	r3, #3
 80130e0:	73fb      	strb	r3, [r7, #15]
    break;
 80130e2:	e008      	b.n	80130f6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80130e4:	2301      	movs	r3, #1
 80130e6:	73fb      	strb	r3, [r7, #15]
    break;
 80130e8:	e005      	b.n	80130f6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130ea:	2303      	movs	r3, #3
 80130ec:	73fb      	strb	r3, [r7, #15]
    break;
 80130ee:	e002      	b.n	80130f6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80130f0:	2303      	movs	r3, #3
 80130f2:	73fb      	strb	r3, [r7, #15]
    break;
 80130f4:	bf00      	nop
  }
  return usb_status;
 80130f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3710      	adds	r7, #16
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b084      	sub	sp, #16
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	460b      	mov	r3, r1
 801310a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801310c:	2300      	movs	r3, #0
 801310e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013110:	2300      	movs	r3, #0
 8013112:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801311a:	78fa      	ldrb	r2, [r7, #3]
 801311c:	4611      	mov	r1, r2
 801311e:	4618      	mov	r0, r3
 8013120:	f7f5 ffa2 	bl	8009068 <HAL_PCD_EP_ClrStall>
 8013124:	4603      	mov	r3, r0
 8013126:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013128:	7bbb      	ldrb	r3, [r7, #14]
 801312a:	2b03      	cmp	r3, #3
 801312c:	d816      	bhi.n	801315c <USBD_LL_ClearStallEP+0x5c>
 801312e:	a201      	add	r2, pc, #4	; (adr r2, 8013134 <USBD_LL_ClearStallEP+0x34>)
 8013130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013134:	08013145 	.word	0x08013145
 8013138:	0801314b 	.word	0x0801314b
 801313c:	08013151 	.word	0x08013151
 8013140:	08013157 	.word	0x08013157
    case HAL_OK :
      usb_status = USBD_OK;
 8013144:	2300      	movs	r3, #0
 8013146:	73fb      	strb	r3, [r7, #15]
    break;
 8013148:	e00b      	b.n	8013162 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801314a:	2303      	movs	r3, #3
 801314c:	73fb      	strb	r3, [r7, #15]
    break;
 801314e:	e008      	b.n	8013162 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013150:	2301      	movs	r3, #1
 8013152:	73fb      	strb	r3, [r7, #15]
    break;
 8013154:	e005      	b.n	8013162 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013156:	2303      	movs	r3, #3
 8013158:	73fb      	strb	r3, [r7, #15]
    break;
 801315a:	e002      	b.n	8013162 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801315c:	2303      	movs	r3, #3
 801315e:	73fb      	strb	r3, [r7, #15]
    break;
 8013160:	bf00      	nop
  }
  return usb_status;
 8013162:	7bfb      	ldrb	r3, [r7, #15]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801316c:	b480      	push	{r7}
 801316e:	b085      	sub	sp, #20
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	460b      	mov	r3, r1
 8013176:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801317e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013184:	2b00      	cmp	r3, #0
 8013186:	da0b      	bge.n	80131a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013188:	78fb      	ldrb	r3, [r7, #3]
 801318a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801318e:	68f9      	ldr	r1, [r7, #12]
 8013190:	4613      	mov	r3, r2
 8013192:	00db      	lsls	r3, r3, #3
 8013194:	4413      	add	r3, r2
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	440b      	add	r3, r1
 801319a:	333e      	adds	r3, #62	; 0x3e
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	e00b      	b.n	80131b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80131a0:	78fb      	ldrb	r3, [r7, #3]
 80131a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80131a6:	68f9      	ldr	r1, [r7, #12]
 80131a8:	4613      	mov	r3, r2
 80131aa:	00db      	lsls	r3, r3, #3
 80131ac:	4413      	add	r3, r2
 80131ae:	009b      	lsls	r3, r3, #2
 80131b0:	440b      	add	r3, r1
 80131b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80131b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3714      	adds	r7, #20
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	460b      	mov	r3, r1
 80131ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131d0:	2300      	movs	r3, #0
 80131d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131d4:	2300      	movs	r3, #0
 80131d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80131de:	78fa      	ldrb	r2, [r7, #3]
 80131e0:	4611      	mov	r1, r2
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f5 fd74 	bl	8008cd0 <HAL_PCD_SetAddress>
 80131e8:	4603      	mov	r3, r0
 80131ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80131ec:	7bbb      	ldrb	r3, [r7, #14]
 80131ee:	2b03      	cmp	r3, #3
 80131f0:	d816      	bhi.n	8013220 <USBD_LL_SetUSBAddress+0x5c>
 80131f2:	a201      	add	r2, pc, #4	; (adr r2, 80131f8 <USBD_LL_SetUSBAddress+0x34>)
 80131f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131f8:	08013209 	.word	0x08013209
 80131fc:	0801320f 	.word	0x0801320f
 8013200:	08013215 	.word	0x08013215
 8013204:	0801321b 	.word	0x0801321b
    case HAL_OK :
      usb_status = USBD_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	73fb      	strb	r3, [r7, #15]
    break;
 801320c:	e00b      	b.n	8013226 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801320e:	2303      	movs	r3, #3
 8013210:	73fb      	strb	r3, [r7, #15]
    break;
 8013212:	e008      	b.n	8013226 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013214:	2301      	movs	r3, #1
 8013216:	73fb      	strb	r3, [r7, #15]
    break;
 8013218:	e005      	b.n	8013226 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801321a:	2303      	movs	r3, #3
 801321c:	73fb      	strb	r3, [r7, #15]
    break;
 801321e:	e002      	b.n	8013226 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013220:	2303      	movs	r3, #3
 8013222:	73fb      	strb	r3, [r7, #15]
    break;
 8013224:	bf00      	nop
  }
  return usb_status;
 8013226:	7bfb      	ldrb	r3, [r7, #15]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3710      	adds	r7, #16
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	607a      	str	r2, [r7, #4]
 801323a:	603b      	str	r3, [r7, #0]
 801323c:	460b      	mov	r3, r1
 801323e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013240:	2300      	movs	r3, #0
 8013242:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013244:	2300      	movs	r3, #0
 8013246:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801324e:	7af9      	ldrb	r1, [r7, #11]
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	f7f5 fe69 	bl	8008f2a <HAL_PCD_EP_Transmit>
 8013258:	4603      	mov	r3, r0
 801325a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801325c:	7dbb      	ldrb	r3, [r7, #22]
 801325e:	2b03      	cmp	r3, #3
 8013260:	d816      	bhi.n	8013290 <USBD_LL_Transmit+0x60>
 8013262:	a201      	add	r2, pc, #4	; (adr r2, 8013268 <USBD_LL_Transmit+0x38>)
 8013264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013268:	08013279 	.word	0x08013279
 801326c:	0801327f 	.word	0x0801327f
 8013270:	08013285 	.word	0x08013285
 8013274:	0801328b 	.word	0x0801328b
    case HAL_OK :
      usb_status = USBD_OK;
 8013278:	2300      	movs	r3, #0
 801327a:	75fb      	strb	r3, [r7, #23]
    break;
 801327c:	e00b      	b.n	8013296 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801327e:	2303      	movs	r3, #3
 8013280:	75fb      	strb	r3, [r7, #23]
    break;
 8013282:	e008      	b.n	8013296 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013284:	2301      	movs	r3, #1
 8013286:	75fb      	strb	r3, [r7, #23]
    break;
 8013288:	e005      	b.n	8013296 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801328a:	2303      	movs	r3, #3
 801328c:	75fb      	strb	r3, [r7, #23]
    break;
 801328e:	e002      	b.n	8013296 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013290:	2303      	movs	r3, #3
 8013292:	75fb      	strb	r3, [r7, #23]
    break;
 8013294:	bf00      	nop
  }
  return usb_status;
 8013296:	7dfb      	ldrb	r3, [r7, #23]
}
 8013298:	4618      	mov	r0, r3
 801329a:	3718      	adds	r7, #24
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	60f8      	str	r0, [r7, #12]
 80132a8:	607a      	str	r2, [r7, #4]
 80132aa:	603b      	str	r3, [r7, #0]
 80132ac:	460b      	mov	r3, r1
 80132ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132b0:	2300      	movs	r3, #0
 80132b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132b4:	2300      	movs	r3, #0
 80132b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80132be:	7af9      	ldrb	r1, [r7, #11]
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	f7f5 fddb 	bl	8008e7e <HAL_PCD_EP_Receive>
 80132c8:	4603      	mov	r3, r0
 80132ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80132cc:	7dbb      	ldrb	r3, [r7, #22]
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	d816      	bhi.n	8013300 <USBD_LL_PrepareReceive+0x60>
 80132d2:	a201      	add	r2, pc, #4	; (adr r2, 80132d8 <USBD_LL_PrepareReceive+0x38>)
 80132d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d8:	080132e9 	.word	0x080132e9
 80132dc:	080132ef 	.word	0x080132ef
 80132e0:	080132f5 	.word	0x080132f5
 80132e4:	080132fb 	.word	0x080132fb
    case HAL_OK :
      usb_status = USBD_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	75fb      	strb	r3, [r7, #23]
    break;
 80132ec:	e00b      	b.n	8013306 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132ee:	2303      	movs	r3, #3
 80132f0:	75fb      	strb	r3, [r7, #23]
    break;
 80132f2:	e008      	b.n	8013306 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132f4:	2301      	movs	r3, #1
 80132f6:	75fb      	strb	r3, [r7, #23]
    break;
 80132f8:	e005      	b.n	8013306 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132fa:	2303      	movs	r3, #3
 80132fc:	75fb      	strb	r3, [r7, #23]
    break;
 80132fe:	e002      	b.n	8013306 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013300:	2303      	movs	r3, #3
 8013302:	75fb      	strb	r3, [r7, #23]
    break;
 8013304:	bf00      	nop
  }
  return usb_status;
 8013306:	7dfb      	ldrb	r3, [r7, #23]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3718      	adds	r7, #24
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	460b      	mov	r3, r1
 801331a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013322:	78fa      	ldrb	r2, [r7, #3]
 8013324:	4611      	mov	r1, r2
 8013326:	4618      	mov	r0, r3
 8013328:	f7f5 fde7 	bl	8008efa <HAL_PCD_EP_GetRxCount>
 801332c:	4603      	mov	r3, r0
}
 801332e:	4618      	mov	r0, r3
 8013330:	3708      	adds	r7, #8
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
	...

08013338 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013344:	78fb      	ldrb	r3, [r7, #3]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d002      	beq.n	8013350 <HAL_PCDEx_LPM_Callback+0x18>
 801334a:	2b01      	cmp	r3, #1
 801334c:	d01f      	beq.n	801338e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801334e:	e03b      	b.n	80133c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6a1b      	ldr	r3, [r3, #32]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d007      	beq.n	8013368 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013358:	f000 f854 	bl	8013404 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801335c:	4b1c      	ldr	r3, [pc, #112]	; (80133d0 <HAL_PCDEx_LPM_Callback+0x98>)
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	4a1b      	ldr	r2, [pc, #108]	; (80133d0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013362:	f023 0306 	bic.w	r3, r3, #6
 8013366:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	6812      	ldr	r2, [r2, #0]
 8013376:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801337a:	f023 0301 	bic.w	r3, r3, #1
 801337e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013386:	4618      	mov	r0, r3
 8013388:	f7fb fd08 	bl	800ed9c <USBD_LL_Resume>
    break;
 801338c:	e01c      	b.n	80133c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	687a      	ldr	r2, [r7, #4]
 801339a:	6812      	ldr	r2, [r2, #0]
 801339c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80133a0:	f043 0301 	orr.w	r3, r3, #1
 80133a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fb fcdf 	bl	800ed70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6a1b      	ldr	r3, [r3, #32]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d005      	beq.n	80133c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133ba:	4b05      	ldr	r3, [pc, #20]	; (80133d0 <HAL_PCDEx_LPM_Callback+0x98>)
 80133bc:	691b      	ldr	r3, [r3, #16]
 80133be:	4a04      	ldr	r2, [pc, #16]	; (80133d0 <HAL_PCDEx_LPM_Callback+0x98>)
 80133c0:	f043 0306 	orr.w	r3, r3, #6
 80133c4:	6113      	str	r3, [r2, #16]
    break;
 80133c6:	bf00      	nop
}
 80133c8:	bf00      	nop
 80133ca:	3708      	adds	r7, #8
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	e000ed00 	.word	0xe000ed00

080133d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80133dc:	4b03      	ldr	r3, [pc, #12]	; (80133ec <USBD_static_malloc+0x18>)
}
 80133de:	4618      	mov	r0, r3
 80133e0:	370c      	adds	r7, #12
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr
 80133ea:	bf00      	nop
 80133ec:	200095a0 	.word	0x200095a0

080133f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]

}
 80133f8:	bf00      	nop
 80133fa:	370c      	adds	r7, #12
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr

08013404 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013408:	f7ef fe98 	bl	800313c <SystemClock_Config>
}
 801340c:	bf00      	nop
 801340e:	bd80      	pop	{r7, pc}

08013410 <expf>:
 8013410:	b508      	push	{r3, lr}
 8013412:	ed2d 8b02 	vpush	{d8}
 8013416:	eef0 8a40 	vmov.f32	s17, s0
 801341a:	f000 f82f 	bl	801347c <__ieee754_expf>
 801341e:	eeb0 8a40 	vmov.f32	s16, s0
 8013422:	eeb0 0a68 	vmov.f32	s0, s17
 8013426:	f000 f919 	bl	801365c <finitef>
 801342a:	b160      	cbz	r0, 8013446 <expf+0x36>
 801342c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801346c <expf+0x5c>
 8013430:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013438:	dd0a      	ble.n	8013450 <expf+0x40>
 801343a:	f000 f91d 	bl	8013678 <__errno>
 801343e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013470 <expf+0x60>
 8013442:	2322      	movs	r3, #34	; 0x22
 8013444:	6003      	str	r3, [r0, #0]
 8013446:	eeb0 0a48 	vmov.f32	s0, s16
 801344a:	ecbd 8b02 	vpop	{d8}
 801344e:	bd08      	pop	{r3, pc}
 8013450:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013474 <expf+0x64>
 8013454:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345c:	d5f3      	bpl.n	8013446 <expf+0x36>
 801345e:	f000 f90b 	bl	8013678 <__errno>
 8013462:	2322      	movs	r3, #34	; 0x22
 8013464:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013478 <expf+0x68>
 8013468:	6003      	str	r3, [r0, #0]
 801346a:	e7ec      	b.n	8013446 <expf+0x36>
 801346c:	42b17180 	.word	0x42b17180
 8013470:	7f800000 	.word	0x7f800000
 8013474:	c2cff1b5 	.word	0xc2cff1b5
 8013478:	00000000 	.word	0x00000000

0801347c <__ieee754_expf>:
 801347c:	ee10 2a10 	vmov	r2, s0
 8013480:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013484:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013488:	d902      	bls.n	8013490 <__ieee754_expf+0x14>
 801348a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801348e:	4770      	bx	lr
 8013490:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8013494:	d106      	bne.n	80134a4 <__ieee754_expf+0x28>
 8013496:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80135d0 <__ieee754_expf+0x154>
 801349a:	2b00      	cmp	r3, #0
 801349c:	bf18      	it	ne
 801349e:	eeb0 0a67 	vmovne.f32	s0, s15
 80134a2:	4770      	bx	lr
 80134a4:	484b      	ldr	r0, [pc, #300]	; (80135d4 <__ieee754_expf+0x158>)
 80134a6:	4282      	cmp	r2, r0
 80134a8:	dd02      	ble.n	80134b0 <__ieee754_expf+0x34>
 80134aa:	2000      	movs	r0, #0
 80134ac:	f000 b8d0 	b.w	8013650 <__math_oflowf>
 80134b0:	2a00      	cmp	r2, #0
 80134b2:	da05      	bge.n	80134c0 <__ieee754_expf+0x44>
 80134b4:	4a48      	ldr	r2, [pc, #288]	; (80135d8 <__ieee754_expf+0x15c>)
 80134b6:	4291      	cmp	r1, r2
 80134b8:	d902      	bls.n	80134c0 <__ieee754_expf+0x44>
 80134ba:	2000      	movs	r0, #0
 80134bc:	f000 b8c2 	b.w	8013644 <__math_uflowf>
 80134c0:	4a46      	ldr	r2, [pc, #280]	; (80135dc <__ieee754_expf+0x160>)
 80134c2:	4291      	cmp	r1, r2
 80134c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80134c8:	d952      	bls.n	8013570 <__ieee754_expf+0xf4>
 80134ca:	4a45      	ldr	r2, [pc, #276]	; (80135e0 <__ieee754_expf+0x164>)
 80134cc:	4291      	cmp	r1, r2
 80134ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80134d2:	d834      	bhi.n	801353e <__ieee754_expf+0xc2>
 80134d4:	4943      	ldr	r1, [pc, #268]	; (80135e4 <__ieee754_expf+0x168>)
 80134d6:	4411      	add	r1, r2
 80134d8:	ed91 7a00 	vldr	s14, [r1]
 80134dc:	4942      	ldr	r1, [pc, #264]	; (80135e8 <__ieee754_expf+0x16c>)
 80134de:	440a      	add	r2, r1
 80134e0:	edd2 7a00 	vldr	s15, [r2]
 80134e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80134e8:	f1c3 0201 	rsb	r2, r3, #1
 80134ec:	1ad2      	subs	r2, r2, r3
 80134ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80134f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80134f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80135ec <__ieee754_expf+0x170>
 80134fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80135f0 <__ieee754_expf+0x174>
 80134fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013502:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80135f4 <__ieee754_expf+0x178>
 8013506:	eea6 5a86 	vfma.f32	s10, s13, s12
 801350a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80135f8 <__ieee754_expf+0x17c>
 801350e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013512:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80135fc <__ieee754_expf+0x180>
 8013516:	eea6 5a86 	vfma.f32	s10, s13, s12
 801351a:	eef0 6a40 	vmov.f32	s13, s0
 801351e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013522:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013526:	ee20 5a26 	vmul.f32	s10, s0, s13
 801352a:	bb92      	cbnz	r2, 8013592 <__ieee754_expf+0x116>
 801352c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013530:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013534:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013538:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801353c:	4770      	bx	lr
 801353e:	4b30      	ldr	r3, [pc, #192]	; (8013600 <__ieee754_expf+0x184>)
 8013540:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013604 <__ieee754_expf+0x188>
 8013544:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013608 <__ieee754_expf+0x18c>
 8013548:	4413      	add	r3, r2
 801354a:	edd3 7a00 	vldr	s15, [r3]
 801354e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013552:	eeb0 7a40 	vmov.f32	s14, s0
 8013556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801355a:	ee17 2a90 	vmov	r2, s15
 801355e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013562:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013566:	eddf 6a29 	vldr	s13, [pc, #164]	; 801360c <__ieee754_expf+0x190>
 801356a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801356e:	e7be      	b.n	80134ee <__ieee754_expf+0x72>
 8013570:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8013574:	d20b      	bcs.n	801358e <__ieee754_expf+0x112>
 8013576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013610 <__ieee754_expf+0x194>
 801357a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801357e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013586:	dd02      	ble.n	801358e <__ieee754_expf+0x112>
 8013588:	ee30 0a25 	vadd.f32	s0, s0, s11
 801358c:	4770      	bx	lr
 801358e:	2200      	movs	r2, #0
 8013590:	e7af      	b.n	80134f2 <__ieee754_expf+0x76>
 8013592:	ee76 6a66 	vsub.f32	s13, s12, s13
 8013596:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801359a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801359e:	bfb8      	it	lt
 80135a0:	3264      	addlt	r2, #100	; 0x64
 80135a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80135a6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80135aa:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80135ae:	ee17 3a90 	vmov	r3, s15
 80135b2:	bfab      	itete	ge
 80135b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80135b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80135bc:	ee00 3a10 	vmovge	s0, r3
 80135c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013614 <__ieee754_expf+0x198>
 80135c4:	bfbc      	itt	lt
 80135c6:	ee00 3a10 	vmovlt	s0, r3
 80135ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80135ce:	4770      	bx	lr
 80135d0:	00000000 	.word	0x00000000
 80135d4:	42b17217 	.word	0x42b17217
 80135d8:	42cff1b5 	.word	0x42cff1b5
 80135dc:	3eb17218 	.word	0x3eb17218
 80135e0:	3f851591 	.word	0x3f851591
 80135e4:	08016b48 	.word	0x08016b48
 80135e8:	08016b50 	.word	0x08016b50
 80135ec:	3331bb4c 	.word	0x3331bb4c
 80135f0:	b5ddea0e 	.word	0xb5ddea0e
 80135f4:	388ab355 	.word	0x388ab355
 80135f8:	bb360b61 	.word	0xbb360b61
 80135fc:	3e2aaaab 	.word	0x3e2aaaab
 8013600:	08016b40 	.word	0x08016b40
 8013604:	3fb8aa3b 	.word	0x3fb8aa3b
 8013608:	3f317180 	.word	0x3f317180
 801360c:	3717f7d1 	.word	0x3717f7d1
 8013610:	7149f2ca 	.word	0x7149f2ca
 8013614:	0d800000 	.word	0x0d800000

08013618 <with_errnof>:
 8013618:	b513      	push	{r0, r1, r4, lr}
 801361a:	4604      	mov	r4, r0
 801361c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013620:	f000 f82a 	bl	8013678 <__errno>
 8013624:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013628:	6004      	str	r4, [r0, #0]
 801362a:	b002      	add	sp, #8
 801362c:	bd10      	pop	{r4, pc}

0801362e <xflowf>:
 801362e:	b130      	cbz	r0, 801363e <xflowf+0x10>
 8013630:	eef1 7a40 	vneg.f32	s15, s0
 8013634:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013638:	2022      	movs	r0, #34	; 0x22
 801363a:	f7ff bfed 	b.w	8013618 <with_errnof>
 801363e:	eef0 7a40 	vmov.f32	s15, s0
 8013642:	e7f7      	b.n	8013634 <xflowf+0x6>

08013644 <__math_uflowf>:
 8013644:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801364c <__math_uflowf+0x8>
 8013648:	f7ff bff1 	b.w	801362e <xflowf>
 801364c:	10000000 	.word	0x10000000

08013650 <__math_oflowf>:
 8013650:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013658 <__math_oflowf+0x8>
 8013654:	f7ff bfeb 	b.w	801362e <xflowf>
 8013658:	70000000 	.word	0x70000000

0801365c <finitef>:
 801365c:	b082      	sub	sp, #8
 801365e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013662:	9801      	ldr	r0, [sp, #4]
 8013664:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013668:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801366c:	bfac      	ite	ge
 801366e:	2000      	movge	r0, #0
 8013670:	2001      	movlt	r0, #1
 8013672:	b002      	add	sp, #8
 8013674:	4770      	bx	lr
	...

08013678 <__errno>:
 8013678:	4b01      	ldr	r3, [pc, #4]	; (8013680 <__errno+0x8>)
 801367a:	6818      	ldr	r0, [r3, #0]
 801367c:	4770      	bx	lr
 801367e:	bf00      	nop
 8013680:	20000318 	.word	0x20000318

08013684 <std>:
 8013684:	2300      	movs	r3, #0
 8013686:	b510      	push	{r4, lr}
 8013688:	4604      	mov	r4, r0
 801368a:	e9c0 3300 	strd	r3, r3, [r0]
 801368e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013692:	6083      	str	r3, [r0, #8]
 8013694:	8181      	strh	r1, [r0, #12]
 8013696:	6643      	str	r3, [r0, #100]	; 0x64
 8013698:	81c2      	strh	r2, [r0, #14]
 801369a:	6183      	str	r3, [r0, #24]
 801369c:	4619      	mov	r1, r3
 801369e:	2208      	movs	r2, #8
 80136a0:	305c      	adds	r0, #92	; 0x5c
 80136a2:	f000 f934 	bl	801390e <memset>
 80136a6:	4b05      	ldr	r3, [pc, #20]	; (80136bc <std+0x38>)
 80136a8:	6263      	str	r3, [r4, #36]	; 0x24
 80136aa:	4b05      	ldr	r3, [pc, #20]	; (80136c0 <std+0x3c>)
 80136ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80136ae:	4b05      	ldr	r3, [pc, #20]	; (80136c4 <std+0x40>)
 80136b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136b2:	4b05      	ldr	r3, [pc, #20]	; (80136c8 <std+0x44>)
 80136b4:	6224      	str	r4, [r4, #32]
 80136b6:	6323      	str	r3, [r4, #48]	; 0x30
 80136b8:	bd10      	pop	{r4, pc}
 80136ba:	bf00      	nop
 80136bc:	08014451 	.word	0x08014451
 80136c0:	08014473 	.word	0x08014473
 80136c4:	080144ab 	.word	0x080144ab
 80136c8:	080144cf 	.word	0x080144cf

080136cc <_cleanup_r>:
 80136cc:	4901      	ldr	r1, [pc, #4]	; (80136d4 <_cleanup_r+0x8>)
 80136ce:	f000 b8af 	b.w	8013830 <_fwalk_reent>
 80136d2:	bf00      	nop
 80136d4:	08015321 	.word	0x08015321

080136d8 <__sfmoreglue>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	2268      	movs	r2, #104	; 0x68
 80136dc:	1e4d      	subs	r5, r1, #1
 80136de:	4355      	muls	r5, r2
 80136e0:	460e      	mov	r6, r1
 80136e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80136e6:	f000 f93b 	bl	8013960 <_malloc_r>
 80136ea:	4604      	mov	r4, r0
 80136ec:	b140      	cbz	r0, 8013700 <__sfmoreglue+0x28>
 80136ee:	2100      	movs	r1, #0
 80136f0:	e9c0 1600 	strd	r1, r6, [r0]
 80136f4:	300c      	adds	r0, #12
 80136f6:	60a0      	str	r0, [r4, #8]
 80136f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80136fc:	f000 f907 	bl	801390e <memset>
 8013700:	4620      	mov	r0, r4
 8013702:	bd70      	pop	{r4, r5, r6, pc}

08013704 <__sfp_lock_acquire>:
 8013704:	4801      	ldr	r0, [pc, #4]	; (801370c <__sfp_lock_acquire+0x8>)
 8013706:	f000 b8d8 	b.w	80138ba <__retarget_lock_acquire_recursive>
 801370a:	bf00      	nop
 801370c:	200097c1 	.word	0x200097c1

08013710 <__sfp_lock_release>:
 8013710:	4801      	ldr	r0, [pc, #4]	; (8013718 <__sfp_lock_release+0x8>)
 8013712:	f000 b8d3 	b.w	80138bc <__retarget_lock_release_recursive>
 8013716:	bf00      	nop
 8013718:	200097c1 	.word	0x200097c1

0801371c <__sinit_lock_acquire>:
 801371c:	4801      	ldr	r0, [pc, #4]	; (8013724 <__sinit_lock_acquire+0x8>)
 801371e:	f000 b8cc 	b.w	80138ba <__retarget_lock_acquire_recursive>
 8013722:	bf00      	nop
 8013724:	200097c2 	.word	0x200097c2

08013728 <__sinit_lock_release>:
 8013728:	4801      	ldr	r0, [pc, #4]	; (8013730 <__sinit_lock_release+0x8>)
 801372a:	f000 b8c7 	b.w	80138bc <__retarget_lock_release_recursive>
 801372e:	bf00      	nop
 8013730:	200097c2 	.word	0x200097c2

08013734 <__sinit>:
 8013734:	b510      	push	{r4, lr}
 8013736:	4604      	mov	r4, r0
 8013738:	f7ff fff0 	bl	801371c <__sinit_lock_acquire>
 801373c:	69a3      	ldr	r3, [r4, #24]
 801373e:	b11b      	cbz	r3, 8013748 <__sinit+0x14>
 8013740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013744:	f7ff bff0 	b.w	8013728 <__sinit_lock_release>
 8013748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801374c:	6523      	str	r3, [r4, #80]	; 0x50
 801374e:	4b13      	ldr	r3, [pc, #76]	; (801379c <__sinit+0x68>)
 8013750:	4a13      	ldr	r2, [pc, #76]	; (80137a0 <__sinit+0x6c>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	62a2      	str	r2, [r4, #40]	; 0x28
 8013756:	42a3      	cmp	r3, r4
 8013758:	bf04      	itt	eq
 801375a:	2301      	moveq	r3, #1
 801375c:	61a3      	streq	r3, [r4, #24]
 801375e:	4620      	mov	r0, r4
 8013760:	f000 f820 	bl	80137a4 <__sfp>
 8013764:	6060      	str	r0, [r4, #4]
 8013766:	4620      	mov	r0, r4
 8013768:	f000 f81c 	bl	80137a4 <__sfp>
 801376c:	60a0      	str	r0, [r4, #8]
 801376e:	4620      	mov	r0, r4
 8013770:	f000 f818 	bl	80137a4 <__sfp>
 8013774:	2200      	movs	r2, #0
 8013776:	60e0      	str	r0, [r4, #12]
 8013778:	2104      	movs	r1, #4
 801377a:	6860      	ldr	r0, [r4, #4]
 801377c:	f7ff ff82 	bl	8013684 <std>
 8013780:	68a0      	ldr	r0, [r4, #8]
 8013782:	2201      	movs	r2, #1
 8013784:	2109      	movs	r1, #9
 8013786:	f7ff ff7d 	bl	8013684 <std>
 801378a:	68e0      	ldr	r0, [r4, #12]
 801378c:	2202      	movs	r2, #2
 801378e:	2112      	movs	r1, #18
 8013790:	f7ff ff78 	bl	8013684 <std>
 8013794:	2301      	movs	r3, #1
 8013796:	61a3      	str	r3, [r4, #24]
 8013798:	e7d2      	b.n	8013740 <__sinit+0xc>
 801379a:	bf00      	nop
 801379c:	08016bb8 	.word	0x08016bb8
 80137a0:	080136cd 	.word	0x080136cd

080137a4 <__sfp>:
 80137a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a6:	4607      	mov	r7, r0
 80137a8:	f7ff ffac 	bl	8013704 <__sfp_lock_acquire>
 80137ac:	4b1e      	ldr	r3, [pc, #120]	; (8013828 <__sfp+0x84>)
 80137ae:	681e      	ldr	r6, [r3, #0]
 80137b0:	69b3      	ldr	r3, [r6, #24]
 80137b2:	b913      	cbnz	r3, 80137ba <__sfp+0x16>
 80137b4:	4630      	mov	r0, r6
 80137b6:	f7ff ffbd 	bl	8013734 <__sinit>
 80137ba:	3648      	adds	r6, #72	; 0x48
 80137bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137c0:	3b01      	subs	r3, #1
 80137c2:	d503      	bpl.n	80137cc <__sfp+0x28>
 80137c4:	6833      	ldr	r3, [r6, #0]
 80137c6:	b30b      	cbz	r3, 801380c <__sfp+0x68>
 80137c8:	6836      	ldr	r6, [r6, #0]
 80137ca:	e7f7      	b.n	80137bc <__sfp+0x18>
 80137cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137d0:	b9d5      	cbnz	r5, 8013808 <__sfp+0x64>
 80137d2:	4b16      	ldr	r3, [pc, #88]	; (801382c <__sfp+0x88>)
 80137d4:	60e3      	str	r3, [r4, #12]
 80137d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80137da:	6665      	str	r5, [r4, #100]	; 0x64
 80137dc:	f000 f86c 	bl	80138b8 <__retarget_lock_init_recursive>
 80137e0:	f7ff ff96 	bl	8013710 <__sfp_lock_release>
 80137e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80137e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80137ec:	6025      	str	r5, [r4, #0]
 80137ee:	61a5      	str	r5, [r4, #24]
 80137f0:	2208      	movs	r2, #8
 80137f2:	4629      	mov	r1, r5
 80137f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80137f8:	f000 f889 	bl	801390e <memset>
 80137fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013804:	4620      	mov	r0, r4
 8013806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013808:	3468      	adds	r4, #104	; 0x68
 801380a:	e7d9      	b.n	80137c0 <__sfp+0x1c>
 801380c:	2104      	movs	r1, #4
 801380e:	4638      	mov	r0, r7
 8013810:	f7ff ff62 	bl	80136d8 <__sfmoreglue>
 8013814:	4604      	mov	r4, r0
 8013816:	6030      	str	r0, [r6, #0]
 8013818:	2800      	cmp	r0, #0
 801381a:	d1d5      	bne.n	80137c8 <__sfp+0x24>
 801381c:	f7ff ff78 	bl	8013710 <__sfp_lock_release>
 8013820:	230c      	movs	r3, #12
 8013822:	603b      	str	r3, [r7, #0]
 8013824:	e7ee      	b.n	8013804 <__sfp+0x60>
 8013826:	bf00      	nop
 8013828:	08016bb8 	.word	0x08016bb8
 801382c:	ffff0001 	.word	0xffff0001

08013830 <_fwalk_reent>:
 8013830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013834:	4606      	mov	r6, r0
 8013836:	4688      	mov	r8, r1
 8013838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801383c:	2700      	movs	r7, #0
 801383e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013842:	f1b9 0901 	subs.w	r9, r9, #1
 8013846:	d505      	bpl.n	8013854 <_fwalk_reent+0x24>
 8013848:	6824      	ldr	r4, [r4, #0]
 801384a:	2c00      	cmp	r4, #0
 801384c:	d1f7      	bne.n	801383e <_fwalk_reent+0xe>
 801384e:	4638      	mov	r0, r7
 8013850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013854:	89ab      	ldrh	r3, [r5, #12]
 8013856:	2b01      	cmp	r3, #1
 8013858:	d907      	bls.n	801386a <_fwalk_reent+0x3a>
 801385a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801385e:	3301      	adds	r3, #1
 8013860:	d003      	beq.n	801386a <_fwalk_reent+0x3a>
 8013862:	4629      	mov	r1, r5
 8013864:	4630      	mov	r0, r6
 8013866:	47c0      	blx	r8
 8013868:	4307      	orrs	r7, r0
 801386a:	3568      	adds	r5, #104	; 0x68
 801386c:	e7e9      	b.n	8013842 <_fwalk_reent+0x12>
	...

08013870 <__libc_init_array>:
 8013870:	b570      	push	{r4, r5, r6, lr}
 8013872:	4d0d      	ldr	r5, [pc, #52]	; (80138a8 <__libc_init_array+0x38>)
 8013874:	4c0d      	ldr	r4, [pc, #52]	; (80138ac <__libc_init_array+0x3c>)
 8013876:	1b64      	subs	r4, r4, r5
 8013878:	10a4      	asrs	r4, r4, #2
 801387a:	2600      	movs	r6, #0
 801387c:	42a6      	cmp	r6, r4
 801387e:	d109      	bne.n	8013894 <__libc_init_array+0x24>
 8013880:	4d0b      	ldr	r5, [pc, #44]	; (80138b0 <__libc_init_array+0x40>)
 8013882:	4c0c      	ldr	r4, [pc, #48]	; (80138b4 <__libc_init_array+0x44>)
 8013884:	f002 fe78 	bl	8016578 <_init>
 8013888:	1b64      	subs	r4, r4, r5
 801388a:	10a4      	asrs	r4, r4, #2
 801388c:	2600      	movs	r6, #0
 801388e:	42a6      	cmp	r6, r4
 8013890:	d105      	bne.n	801389e <__libc_init_array+0x2e>
 8013892:	bd70      	pop	{r4, r5, r6, pc}
 8013894:	f855 3b04 	ldr.w	r3, [r5], #4
 8013898:	4798      	blx	r3
 801389a:	3601      	adds	r6, #1
 801389c:	e7ee      	b.n	801387c <__libc_init_array+0xc>
 801389e:	f855 3b04 	ldr.w	r3, [r5], #4
 80138a2:	4798      	blx	r3
 80138a4:	3601      	adds	r6, #1
 80138a6:	e7f2      	b.n	801388e <__libc_init_array+0x1e>
 80138a8:	08016f34 	.word	0x08016f34
 80138ac:	08016f34 	.word	0x08016f34
 80138b0:	08016f34 	.word	0x08016f34
 80138b4:	08016f44 	.word	0x08016f44

080138b8 <__retarget_lock_init_recursive>:
 80138b8:	4770      	bx	lr

080138ba <__retarget_lock_acquire_recursive>:
 80138ba:	4770      	bx	lr

080138bc <__retarget_lock_release_recursive>:
 80138bc:	4770      	bx	lr

080138be <memcpy>:
 80138be:	440a      	add	r2, r1
 80138c0:	4291      	cmp	r1, r2
 80138c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80138c6:	d100      	bne.n	80138ca <memcpy+0xc>
 80138c8:	4770      	bx	lr
 80138ca:	b510      	push	{r4, lr}
 80138cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138d4:	4291      	cmp	r1, r2
 80138d6:	d1f9      	bne.n	80138cc <memcpy+0xe>
 80138d8:	bd10      	pop	{r4, pc}

080138da <memmove>:
 80138da:	4288      	cmp	r0, r1
 80138dc:	b510      	push	{r4, lr}
 80138de:	eb01 0402 	add.w	r4, r1, r2
 80138e2:	d902      	bls.n	80138ea <memmove+0x10>
 80138e4:	4284      	cmp	r4, r0
 80138e6:	4623      	mov	r3, r4
 80138e8:	d807      	bhi.n	80138fa <memmove+0x20>
 80138ea:	1e43      	subs	r3, r0, #1
 80138ec:	42a1      	cmp	r1, r4
 80138ee:	d008      	beq.n	8013902 <memmove+0x28>
 80138f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80138f8:	e7f8      	b.n	80138ec <memmove+0x12>
 80138fa:	4402      	add	r2, r0
 80138fc:	4601      	mov	r1, r0
 80138fe:	428a      	cmp	r2, r1
 8013900:	d100      	bne.n	8013904 <memmove+0x2a>
 8013902:	bd10      	pop	{r4, pc}
 8013904:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013908:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801390c:	e7f7      	b.n	80138fe <memmove+0x24>

0801390e <memset>:
 801390e:	4402      	add	r2, r0
 8013910:	4603      	mov	r3, r0
 8013912:	4293      	cmp	r3, r2
 8013914:	d100      	bne.n	8013918 <memset+0xa>
 8013916:	4770      	bx	lr
 8013918:	f803 1b01 	strb.w	r1, [r3], #1
 801391c:	e7f9      	b.n	8013912 <memset+0x4>
	...

08013920 <sbrk_aligned>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	4e0e      	ldr	r6, [pc, #56]	; (801395c <sbrk_aligned+0x3c>)
 8013924:	460c      	mov	r4, r1
 8013926:	6831      	ldr	r1, [r6, #0]
 8013928:	4605      	mov	r5, r0
 801392a:	b911      	cbnz	r1, 8013932 <sbrk_aligned+0x12>
 801392c:	f000 fd60 	bl	80143f0 <_sbrk_r>
 8013930:	6030      	str	r0, [r6, #0]
 8013932:	4621      	mov	r1, r4
 8013934:	4628      	mov	r0, r5
 8013936:	f000 fd5b 	bl	80143f0 <_sbrk_r>
 801393a:	1c43      	adds	r3, r0, #1
 801393c:	d00a      	beq.n	8013954 <sbrk_aligned+0x34>
 801393e:	1cc4      	adds	r4, r0, #3
 8013940:	f024 0403 	bic.w	r4, r4, #3
 8013944:	42a0      	cmp	r0, r4
 8013946:	d007      	beq.n	8013958 <sbrk_aligned+0x38>
 8013948:	1a21      	subs	r1, r4, r0
 801394a:	4628      	mov	r0, r5
 801394c:	f000 fd50 	bl	80143f0 <_sbrk_r>
 8013950:	3001      	adds	r0, #1
 8013952:	d101      	bne.n	8013958 <sbrk_aligned+0x38>
 8013954:	f04f 34ff 	mov.w	r4, #4294967295
 8013958:	4620      	mov	r0, r4
 801395a:	bd70      	pop	{r4, r5, r6, pc}
 801395c:	200097c8 	.word	0x200097c8

08013960 <_malloc_r>:
 8013960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013964:	1ccd      	adds	r5, r1, #3
 8013966:	f025 0503 	bic.w	r5, r5, #3
 801396a:	3508      	adds	r5, #8
 801396c:	2d0c      	cmp	r5, #12
 801396e:	bf38      	it	cc
 8013970:	250c      	movcc	r5, #12
 8013972:	2d00      	cmp	r5, #0
 8013974:	4607      	mov	r7, r0
 8013976:	db01      	blt.n	801397c <_malloc_r+0x1c>
 8013978:	42a9      	cmp	r1, r5
 801397a:	d905      	bls.n	8013988 <_malloc_r+0x28>
 801397c:	230c      	movs	r3, #12
 801397e:	603b      	str	r3, [r7, #0]
 8013980:	2600      	movs	r6, #0
 8013982:	4630      	mov	r0, r6
 8013984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013988:	4e2e      	ldr	r6, [pc, #184]	; (8013a44 <_malloc_r+0xe4>)
 801398a:	f001 fd23 	bl	80153d4 <__malloc_lock>
 801398e:	6833      	ldr	r3, [r6, #0]
 8013990:	461c      	mov	r4, r3
 8013992:	bb34      	cbnz	r4, 80139e2 <_malloc_r+0x82>
 8013994:	4629      	mov	r1, r5
 8013996:	4638      	mov	r0, r7
 8013998:	f7ff ffc2 	bl	8013920 <sbrk_aligned>
 801399c:	1c43      	adds	r3, r0, #1
 801399e:	4604      	mov	r4, r0
 80139a0:	d14d      	bne.n	8013a3e <_malloc_r+0xde>
 80139a2:	6834      	ldr	r4, [r6, #0]
 80139a4:	4626      	mov	r6, r4
 80139a6:	2e00      	cmp	r6, #0
 80139a8:	d140      	bne.n	8013a2c <_malloc_r+0xcc>
 80139aa:	6823      	ldr	r3, [r4, #0]
 80139ac:	4631      	mov	r1, r6
 80139ae:	4638      	mov	r0, r7
 80139b0:	eb04 0803 	add.w	r8, r4, r3
 80139b4:	f000 fd1c 	bl	80143f0 <_sbrk_r>
 80139b8:	4580      	cmp	r8, r0
 80139ba:	d13a      	bne.n	8013a32 <_malloc_r+0xd2>
 80139bc:	6821      	ldr	r1, [r4, #0]
 80139be:	3503      	adds	r5, #3
 80139c0:	1a6d      	subs	r5, r5, r1
 80139c2:	f025 0503 	bic.w	r5, r5, #3
 80139c6:	3508      	adds	r5, #8
 80139c8:	2d0c      	cmp	r5, #12
 80139ca:	bf38      	it	cc
 80139cc:	250c      	movcc	r5, #12
 80139ce:	4629      	mov	r1, r5
 80139d0:	4638      	mov	r0, r7
 80139d2:	f7ff ffa5 	bl	8013920 <sbrk_aligned>
 80139d6:	3001      	adds	r0, #1
 80139d8:	d02b      	beq.n	8013a32 <_malloc_r+0xd2>
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	442b      	add	r3, r5
 80139de:	6023      	str	r3, [r4, #0]
 80139e0:	e00e      	b.n	8013a00 <_malloc_r+0xa0>
 80139e2:	6822      	ldr	r2, [r4, #0]
 80139e4:	1b52      	subs	r2, r2, r5
 80139e6:	d41e      	bmi.n	8013a26 <_malloc_r+0xc6>
 80139e8:	2a0b      	cmp	r2, #11
 80139ea:	d916      	bls.n	8013a1a <_malloc_r+0xba>
 80139ec:	1961      	adds	r1, r4, r5
 80139ee:	42a3      	cmp	r3, r4
 80139f0:	6025      	str	r5, [r4, #0]
 80139f2:	bf18      	it	ne
 80139f4:	6059      	strne	r1, [r3, #4]
 80139f6:	6863      	ldr	r3, [r4, #4]
 80139f8:	bf08      	it	eq
 80139fa:	6031      	streq	r1, [r6, #0]
 80139fc:	5162      	str	r2, [r4, r5]
 80139fe:	604b      	str	r3, [r1, #4]
 8013a00:	4638      	mov	r0, r7
 8013a02:	f104 060b 	add.w	r6, r4, #11
 8013a06:	f001 fceb 	bl	80153e0 <__malloc_unlock>
 8013a0a:	f026 0607 	bic.w	r6, r6, #7
 8013a0e:	1d23      	adds	r3, r4, #4
 8013a10:	1af2      	subs	r2, r6, r3
 8013a12:	d0b6      	beq.n	8013982 <_malloc_r+0x22>
 8013a14:	1b9b      	subs	r3, r3, r6
 8013a16:	50a3      	str	r3, [r4, r2]
 8013a18:	e7b3      	b.n	8013982 <_malloc_r+0x22>
 8013a1a:	6862      	ldr	r2, [r4, #4]
 8013a1c:	42a3      	cmp	r3, r4
 8013a1e:	bf0c      	ite	eq
 8013a20:	6032      	streq	r2, [r6, #0]
 8013a22:	605a      	strne	r2, [r3, #4]
 8013a24:	e7ec      	b.n	8013a00 <_malloc_r+0xa0>
 8013a26:	4623      	mov	r3, r4
 8013a28:	6864      	ldr	r4, [r4, #4]
 8013a2a:	e7b2      	b.n	8013992 <_malloc_r+0x32>
 8013a2c:	4634      	mov	r4, r6
 8013a2e:	6876      	ldr	r6, [r6, #4]
 8013a30:	e7b9      	b.n	80139a6 <_malloc_r+0x46>
 8013a32:	230c      	movs	r3, #12
 8013a34:	603b      	str	r3, [r7, #0]
 8013a36:	4638      	mov	r0, r7
 8013a38:	f001 fcd2 	bl	80153e0 <__malloc_unlock>
 8013a3c:	e7a1      	b.n	8013982 <_malloc_r+0x22>
 8013a3e:	6025      	str	r5, [r4, #0]
 8013a40:	e7de      	b.n	8013a00 <_malloc_r+0xa0>
 8013a42:	bf00      	nop
 8013a44:	200097c4 	.word	0x200097c4

08013a48 <__cvt>:
 8013a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a4c:	ec55 4b10 	vmov	r4, r5, d0
 8013a50:	2d00      	cmp	r5, #0
 8013a52:	460e      	mov	r6, r1
 8013a54:	4619      	mov	r1, r3
 8013a56:	462b      	mov	r3, r5
 8013a58:	bfbb      	ittet	lt
 8013a5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013a5e:	461d      	movlt	r5, r3
 8013a60:	2300      	movge	r3, #0
 8013a62:	232d      	movlt	r3, #45	; 0x2d
 8013a64:	700b      	strb	r3, [r1, #0]
 8013a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013a6c:	4691      	mov	r9, r2
 8013a6e:	f023 0820 	bic.w	r8, r3, #32
 8013a72:	bfbc      	itt	lt
 8013a74:	4622      	movlt	r2, r4
 8013a76:	4614      	movlt	r4, r2
 8013a78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013a7c:	d005      	beq.n	8013a8a <__cvt+0x42>
 8013a7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013a82:	d100      	bne.n	8013a86 <__cvt+0x3e>
 8013a84:	3601      	adds	r6, #1
 8013a86:	2102      	movs	r1, #2
 8013a88:	e000      	b.n	8013a8c <__cvt+0x44>
 8013a8a:	2103      	movs	r1, #3
 8013a8c:	ab03      	add	r3, sp, #12
 8013a8e:	9301      	str	r3, [sp, #4]
 8013a90:	ab02      	add	r3, sp, #8
 8013a92:	9300      	str	r3, [sp, #0]
 8013a94:	ec45 4b10 	vmov	d0, r4, r5
 8013a98:	4653      	mov	r3, sl
 8013a9a:	4632      	mov	r2, r6
 8013a9c:	f000 fdcc 	bl	8014638 <_dtoa_r>
 8013aa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013aa4:	4607      	mov	r7, r0
 8013aa6:	d102      	bne.n	8013aae <__cvt+0x66>
 8013aa8:	f019 0f01 	tst.w	r9, #1
 8013aac:	d022      	beq.n	8013af4 <__cvt+0xac>
 8013aae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ab2:	eb07 0906 	add.w	r9, r7, r6
 8013ab6:	d110      	bne.n	8013ada <__cvt+0x92>
 8013ab8:	783b      	ldrb	r3, [r7, #0]
 8013aba:	2b30      	cmp	r3, #48	; 0x30
 8013abc:	d10a      	bne.n	8013ad4 <__cvt+0x8c>
 8013abe:	2200      	movs	r2, #0
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	f7ed f817 	bl	8000af8 <__aeabi_dcmpeq>
 8013aca:	b918      	cbnz	r0, 8013ad4 <__cvt+0x8c>
 8013acc:	f1c6 0601 	rsb	r6, r6, #1
 8013ad0:	f8ca 6000 	str.w	r6, [sl]
 8013ad4:	f8da 3000 	ldr.w	r3, [sl]
 8013ad8:	4499      	add	r9, r3
 8013ada:	2200      	movs	r2, #0
 8013adc:	2300      	movs	r3, #0
 8013ade:	4620      	mov	r0, r4
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	f7ed f809 	bl	8000af8 <__aeabi_dcmpeq>
 8013ae6:	b108      	cbz	r0, 8013aec <__cvt+0xa4>
 8013ae8:	f8cd 900c 	str.w	r9, [sp, #12]
 8013aec:	2230      	movs	r2, #48	; 0x30
 8013aee:	9b03      	ldr	r3, [sp, #12]
 8013af0:	454b      	cmp	r3, r9
 8013af2:	d307      	bcc.n	8013b04 <__cvt+0xbc>
 8013af4:	9b03      	ldr	r3, [sp, #12]
 8013af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013af8:	1bdb      	subs	r3, r3, r7
 8013afa:	4638      	mov	r0, r7
 8013afc:	6013      	str	r3, [r2, #0]
 8013afe:	b004      	add	sp, #16
 8013b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b04:	1c59      	adds	r1, r3, #1
 8013b06:	9103      	str	r1, [sp, #12]
 8013b08:	701a      	strb	r2, [r3, #0]
 8013b0a:	e7f0      	b.n	8013aee <__cvt+0xa6>

08013b0c <__exponent>:
 8013b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2900      	cmp	r1, #0
 8013b12:	bfb8      	it	lt
 8013b14:	4249      	neglt	r1, r1
 8013b16:	f803 2b02 	strb.w	r2, [r3], #2
 8013b1a:	bfb4      	ite	lt
 8013b1c:	222d      	movlt	r2, #45	; 0x2d
 8013b1e:	222b      	movge	r2, #43	; 0x2b
 8013b20:	2909      	cmp	r1, #9
 8013b22:	7042      	strb	r2, [r0, #1]
 8013b24:	dd2a      	ble.n	8013b7c <__exponent+0x70>
 8013b26:	f10d 0407 	add.w	r4, sp, #7
 8013b2a:	46a4      	mov	ip, r4
 8013b2c:	270a      	movs	r7, #10
 8013b2e:	46a6      	mov	lr, r4
 8013b30:	460a      	mov	r2, r1
 8013b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8013b36:	fb07 1516 	mls	r5, r7, r6, r1
 8013b3a:	3530      	adds	r5, #48	; 0x30
 8013b3c:	2a63      	cmp	r2, #99	; 0x63
 8013b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013b46:	4631      	mov	r1, r6
 8013b48:	dcf1      	bgt.n	8013b2e <__exponent+0x22>
 8013b4a:	3130      	adds	r1, #48	; 0x30
 8013b4c:	f1ae 0502 	sub.w	r5, lr, #2
 8013b50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013b54:	1c44      	adds	r4, r0, #1
 8013b56:	4629      	mov	r1, r5
 8013b58:	4561      	cmp	r1, ip
 8013b5a:	d30a      	bcc.n	8013b72 <__exponent+0x66>
 8013b5c:	f10d 0209 	add.w	r2, sp, #9
 8013b60:	eba2 020e 	sub.w	r2, r2, lr
 8013b64:	4565      	cmp	r5, ip
 8013b66:	bf88      	it	hi
 8013b68:	2200      	movhi	r2, #0
 8013b6a:	4413      	add	r3, r2
 8013b6c:	1a18      	subs	r0, r3, r0
 8013b6e:	b003      	add	sp, #12
 8013b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013b7a:	e7ed      	b.n	8013b58 <__exponent+0x4c>
 8013b7c:	2330      	movs	r3, #48	; 0x30
 8013b7e:	3130      	adds	r1, #48	; 0x30
 8013b80:	7083      	strb	r3, [r0, #2]
 8013b82:	70c1      	strb	r1, [r0, #3]
 8013b84:	1d03      	adds	r3, r0, #4
 8013b86:	e7f1      	b.n	8013b6c <__exponent+0x60>

08013b88 <_printf_float>:
 8013b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8c:	ed2d 8b02 	vpush	{d8}
 8013b90:	b08d      	sub	sp, #52	; 0x34
 8013b92:	460c      	mov	r4, r1
 8013b94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013b98:	4616      	mov	r6, r2
 8013b9a:	461f      	mov	r7, r3
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	f001 fbfb 	bl	8015398 <_localeconv_r>
 8013ba2:	f8d0 a000 	ldr.w	sl, [r0]
 8013ba6:	4650      	mov	r0, sl
 8013ba8:	f7ec fb2a 	bl	8000200 <strlen>
 8013bac:	2300      	movs	r3, #0
 8013bae:	930a      	str	r3, [sp, #40]	; 0x28
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	9305      	str	r3, [sp, #20]
 8013bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8013bb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013bbc:	3307      	adds	r3, #7
 8013bbe:	f023 0307 	bic.w	r3, r3, #7
 8013bc2:	f103 0208 	add.w	r2, r3, #8
 8013bc6:	f8c8 2000 	str.w	r2, [r8]
 8013bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013bd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013bda:	9307      	str	r3, [sp, #28]
 8013bdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8013be0:	ee08 0a10 	vmov	s16, r0
 8013be4:	4b9f      	ldr	r3, [pc, #636]	; (8013e64 <_printf_float+0x2dc>)
 8013be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013bea:	f04f 32ff 	mov.w	r2, #4294967295
 8013bee:	f7ec ffb5 	bl	8000b5c <__aeabi_dcmpun>
 8013bf2:	bb88      	cbnz	r0, 8013c58 <_printf_float+0xd0>
 8013bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013bf8:	4b9a      	ldr	r3, [pc, #616]	; (8013e64 <_printf_float+0x2dc>)
 8013bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013bfe:	f7ec ff8f 	bl	8000b20 <__aeabi_dcmple>
 8013c02:	bb48      	cbnz	r0, 8013c58 <_printf_float+0xd0>
 8013c04:	2200      	movs	r2, #0
 8013c06:	2300      	movs	r3, #0
 8013c08:	4640      	mov	r0, r8
 8013c0a:	4649      	mov	r1, r9
 8013c0c:	f7ec ff7e 	bl	8000b0c <__aeabi_dcmplt>
 8013c10:	b110      	cbz	r0, 8013c18 <_printf_float+0x90>
 8013c12:	232d      	movs	r3, #45	; 0x2d
 8013c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c18:	4b93      	ldr	r3, [pc, #588]	; (8013e68 <_printf_float+0x2e0>)
 8013c1a:	4894      	ldr	r0, [pc, #592]	; (8013e6c <_printf_float+0x2e4>)
 8013c1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013c20:	bf94      	ite	ls
 8013c22:	4698      	movls	r8, r3
 8013c24:	4680      	movhi	r8, r0
 8013c26:	2303      	movs	r3, #3
 8013c28:	6123      	str	r3, [r4, #16]
 8013c2a:	9b05      	ldr	r3, [sp, #20]
 8013c2c:	f023 0204 	bic.w	r2, r3, #4
 8013c30:	6022      	str	r2, [r4, #0]
 8013c32:	f04f 0900 	mov.w	r9, #0
 8013c36:	9700      	str	r7, [sp, #0]
 8013c38:	4633      	mov	r3, r6
 8013c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8013c3c:	4621      	mov	r1, r4
 8013c3e:	4628      	mov	r0, r5
 8013c40:	f000 f9d8 	bl	8013ff4 <_printf_common>
 8013c44:	3001      	adds	r0, #1
 8013c46:	f040 8090 	bne.w	8013d6a <_printf_float+0x1e2>
 8013c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4e:	b00d      	add	sp, #52	; 0x34
 8013c50:	ecbd 8b02 	vpop	{d8}
 8013c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c58:	4642      	mov	r2, r8
 8013c5a:	464b      	mov	r3, r9
 8013c5c:	4640      	mov	r0, r8
 8013c5e:	4649      	mov	r1, r9
 8013c60:	f7ec ff7c 	bl	8000b5c <__aeabi_dcmpun>
 8013c64:	b140      	cbz	r0, 8013c78 <_printf_float+0xf0>
 8013c66:	464b      	mov	r3, r9
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	bfbc      	itt	lt
 8013c6c:	232d      	movlt	r3, #45	; 0x2d
 8013c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013c72:	487f      	ldr	r0, [pc, #508]	; (8013e70 <_printf_float+0x2e8>)
 8013c74:	4b7f      	ldr	r3, [pc, #508]	; (8013e74 <_printf_float+0x2ec>)
 8013c76:	e7d1      	b.n	8013c1c <_printf_float+0x94>
 8013c78:	6863      	ldr	r3, [r4, #4]
 8013c7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013c7e:	9206      	str	r2, [sp, #24]
 8013c80:	1c5a      	adds	r2, r3, #1
 8013c82:	d13f      	bne.n	8013d04 <_printf_float+0x17c>
 8013c84:	2306      	movs	r3, #6
 8013c86:	6063      	str	r3, [r4, #4]
 8013c88:	9b05      	ldr	r3, [sp, #20]
 8013c8a:	6861      	ldr	r1, [r4, #4]
 8013c8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013c90:	2300      	movs	r3, #0
 8013c92:	9303      	str	r3, [sp, #12]
 8013c94:	ab0a      	add	r3, sp, #40	; 0x28
 8013c96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013c9a:	ab09      	add	r3, sp, #36	; 0x24
 8013c9c:	ec49 8b10 	vmov	d0, r8, r9
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	6022      	str	r2, [r4, #0]
 8013ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013ca8:	4628      	mov	r0, r5
 8013caa:	f7ff fecd 	bl	8013a48 <__cvt>
 8013cae:	9b06      	ldr	r3, [sp, #24]
 8013cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cb2:	2b47      	cmp	r3, #71	; 0x47
 8013cb4:	4680      	mov	r8, r0
 8013cb6:	d108      	bne.n	8013cca <_printf_float+0x142>
 8013cb8:	1cc8      	adds	r0, r1, #3
 8013cba:	db02      	blt.n	8013cc2 <_printf_float+0x13a>
 8013cbc:	6863      	ldr	r3, [r4, #4]
 8013cbe:	4299      	cmp	r1, r3
 8013cc0:	dd41      	ble.n	8013d46 <_printf_float+0x1be>
 8013cc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8013cc6:	fa5f fb8b 	uxtb.w	fp, fp
 8013cca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013cce:	d820      	bhi.n	8013d12 <_printf_float+0x18a>
 8013cd0:	3901      	subs	r1, #1
 8013cd2:	465a      	mov	r2, fp
 8013cd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8013cda:	f7ff ff17 	bl	8013b0c <__exponent>
 8013cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ce0:	1813      	adds	r3, r2, r0
 8013ce2:	2a01      	cmp	r2, #1
 8013ce4:	4681      	mov	r9, r0
 8013ce6:	6123      	str	r3, [r4, #16]
 8013ce8:	dc02      	bgt.n	8013cf0 <_printf_float+0x168>
 8013cea:	6822      	ldr	r2, [r4, #0]
 8013cec:	07d2      	lsls	r2, r2, #31
 8013cee:	d501      	bpl.n	8013cf4 <_printf_float+0x16c>
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	6123      	str	r3, [r4, #16]
 8013cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d09c      	beq.n	8013c36 <_printf_float+0xae>
 8013cfc:	232d      	movs	r3, #45	; 0x2d
 8013cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d02:	e798      	b.n	8013c36 <_printf_float+0xae>
 8013d04:	9a06      	ldr	r2, [sp, #24]
 8013d06:	2a47      	cmp	r2, #71	; 0x47
 8013d08:	d1be      	bne.n	8013c88 <_printf_float+0x100>
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d1bc      	bne.n	8013c88 <_printf_float+0x100>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e7b9      	b.n	8013c86 <_printf_float+0xfe>
 8013d12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013d16:	d118      	bne.n	8013d4a <_printf_float+0x1c2>
 8013d18:	2900      	cmp	r1, #0
 8013d1a:	6863      	ldr	r3, [r4, #4]
 8013d1c:	dd0b      	ble.n	8013d36 <_printf_float+0x1ae>
 8013d1e:	6121      	str	r1, [r4, #16]
 8013d20:	b913      	cbnz	r3, 8013d28 <_printf_float+0x1a0>
 8013d22:	6822      	ldr	r2, [r4, #0]
 8013d24:	07d0      	lsls	r0, r2, #31
 8013d26:	d502      	bpl.n	8013d2e <_printf_float+0x1a6>
 8013d28:	3301      	adds	r3, #1
 8013d2a:	440b      	add	r3, r1
 8013d2c:	6123      	str	r3, [r4, #16]
 8013d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013d30:	f04f 0900 	mov.w	r9, #0
 8013d34:	e7de      	b.n	8013cf4 <_printf_float+0x16c>
 8013d36:	b913      	cbnz	r3, 8013d3e <_printf_float+0x1b6>
 8013d38:	6822      	ldr	r2, [r4, #0]
 8013d3a:	07d2      	lsls	r2, r2, #31
 8013d3c:	d501      	bpl.n	8013d42 <_printf_float+0x1ba>
 8013d3e:	3302      	adds	r3, #2
 8013d40:	e7f4      	b.n	8013d2c <_printf_float+0x1a4>
 8013d42:	2301      	movs	r3, #1
 8013d44:	e7f2      	b.n	8013d2c <_printf_float+0x1a4>
 8013d46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d4c:	4299      	cmp	r1, r3
 8013d4e:	db05      	blt.n	8013d5c <_printf_float+0x1d4>
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	6121      	str	r1, [r4, #16]
 8013d54:	07d8      	lsls	r0, r3, #31
 8013d56:	d5ea      	bpl.n	8013d2e <_printf_float+0x1a6>
 8013d58:	1c4b      	adds	r3, r1, #1
 8013d5a:	e7e7      	b.n	8013d2c <_printf_float+0x1a4>
 8013d5c:	2900      	cmp	r1, #0
 8013d5e:	bfd4      	ite	le
 8013d60:	f1c1 0202 	rsble	r2, r1, #2
 8013d64:	2201      	movgt	r2, #1
 8013d66:	4413      	add	r3, r2
 8013d68:	e7e0      	b.n	8013d2c <_printf_float+0x1a4>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	055a      	lsls	r2, r3, #21
 8013d6e:	d407      	bmi.n	8013d80 <_printf_float+0x1f8>
 8013d70:	6923      	ldr	r3, [r4, #16]
 8013d72:	4642      	mov	r2, r8
 8013d74:	4631      	mov	r1, r6
 8013d76:	4628      	mov	r0, r5
 8013d78:	47b8      	blx	r7
 8013d7a:	3001      	adds	r0, #1
 8013d7c:	d12c      	bne.n	8013dd8 <_printf_float+0x250>
 8013d7e:	e764      	b.n	8013c4a <_printf_float+0xc2>
 8013d80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013d84:	f240 80e0 	bls.w	8013f48 <_printf_float+0x3c0>
 8013d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f7ec feb2 	bl	8000af8 <__aeabi_dcmpeq>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d034      	beq.n	8013e02 <_printf_float+0x27a>
 8013d98:	4a37      	ldr	r2, [pc, #220]	; (8013e78 <_printf_float+0x2f0>)
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	4631      	mov	r1, r6
 8013d9e:	4628      	mov	r0, r5
 8013da0:	47b8      	blx	r7
 8013da2:	3001      	adds	r0, #1
 8013da4:	f43f af51 	beq.w	8013c4a <_printf_float+0xc2>
 8013da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dac:	429a      	cmp	r2, r3
 8013dae:	db02      	blt.n	8013db6 <_printf_float+0x22e>
 8013db0:	6823      	ldr	r3, [r4, #0]
 8013db2:	07d8      	lsls	r0, r3, #31
 8013db4:	d510      	bpl.n	8013dd8 <_printf_float+0x250>
 8013db6:	ee18 3a10 	vmov	r3, s16
 8013dba:	4652      	mov	r2, sl
 8013dbc:	4631      	mov	r1, r6
 8013dbe:	4628      	mov	r0, r5
 8013dc0:	47b8      	blx	r7
 8013dc2:	3001      	adds	r0, #1
 8013dc4:	f43f af41 	beq.w	8013c4a <_printf_float+0xc2>
 8013dc8:	f04f 0800 	mov.w	r8, #0
 8013dcc:	f104 091a 	add.w	r9, r4, #26
 8013dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	4543      	cmp	r3, r8
 8013dd6:	dc09      	bgt.n	8013dec <_printf_float+0x264>
 8013dd8:	6823      	ldr	r3, [r4, #0]
 8013dda:	079b      	lsls	r3, r3, #30
 8013ddc:	f100 8105 	bmi.w	8013fea <_printf_float+0x462>
 8013de0:	68e0      	ldr	r0, [r4, #12]
 8013de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013de4:	4298      	cmp	r0, r3
 8013de6:	bfb8      	it	lt
 8013de8:	4618      	movlt	r0, r3
 8013dea:	e730      	b.n	8013c4e <_printf_float+0xc6>
 8013dec:	2301      	movs	r3, #1
 8013dee:	464a      	mov	r2, r9
 8013df0:	4631      	mov	r1, r6
 8013df2:	4628      	mov	r0, r5
 8013df4:	47b8      	blx	r7
 8013df6:	3001      	adds	r0, #1
 8013df8:	f43f af27 	beq.w	8013c4a <_printf_float+0xc2>
 8013dfc:	f108 0801 	add.w	r8, r8, #1
 8013e00:	e7e6      	b.n	8013dd0 <_printf_float+0x248>
 8013e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	dc39      	bgt.n	8013e7c <_printf_float+0x2f4>
 8013e08:	4a1b      	ldr	r2, [pc, #108]	; (8013e78 <_printf_float+0x2f0>)
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	4631      	mov	r1, r6
 8013e0e:	4628      	mov	r0, r5
 8013e10:	47b8      	blx	r7
 8013e12:	3001      	adds	r0, #1
 8013e14:	f43f af19 	beq.w	8013c4a <_printf_float+0xc2>
 8013e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	d102      	bne.n	8013e26 <_printf_float+0x29e>
 8013e20:	6823      	ldr	r3, [r4, #0]
 8013e22:	07d9      	lsls	r1, r3, #31
 8013e24:	d5d8      	bpl.n	8013dd8 <_printf_float+0x250>
 8013e26:	ee18 3a10 	vmov	r3, s16
 8013e2a:	4652      	mov	r2, sl
 8013e2c:	4631      	mov	r1, r6
 8013e2e:	4628      	mov	r0, r5
 8013e30:	47b8      	blx	r7
 8013e32:	3001      	adds	r0, #1
 8013e34:	f43f af09 	beq.w	8013c4a <_printf_float+0xc2>
 8013e38:	f04f 0900 	mov.w	r9, #0
 8013e3c:	f104 0a1a 	add.w	sl, r4, #26
 8013e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e42:	425b      	negs	r3, r3
 8013e44:	454b      	cmp	r3, r9
 8013e46:	dc01      	bgt.n	8013e4c <_printf_float+0x2c4>
 8013e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e4a:	e792      	b.n	8013d72 <_printf_float+0x1ea>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	4652      	mov	r2, sl
 8013e50:	4631      	mov	r1, r6
 8013e52:	4628      	mov	r0, r5
 8013e54:	47b8      	blx	r7
 8013e56:	3001      	adds	r0, #1
 8013e58:	f43f aef7 	beq.w	8013c4a <_printf_float+0xc2>
 8013e5c:	f109 0901 	add.w	r9, r9, #1
 8013e60:	e7ee      	b.n	8013e40 <_printf_float+0x2b8>
 8013e62:	bf00      	nop
 8013e64:	7fefffff 	.word	0x7fefffff
 8013e68:	08016bbc 	.word	0x08016bbc
 8013e6c:	08016bc0 	.word	0x08016bc0
 8013e70:	08016bc8 	.word	0x08016bc8
 8013e74:	08016bc4 	.word	0x08016bc4
 8013e78:	08016bcc 	.word	0x08016bcc
 8013e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013e80:	429a      	cmp	r2, r3
 8013e82:	bfa8      	it	ge
 8013e84:	461a      	movge	r2, r3
 8013e86:	2a00      	cmp	r2, #0
 8013e88:	4691      	mov	r9, r2
 8013e8a:	dc37      	bgt.n	8013efc <_printf_float+0x374>
 8013e8c:	f04f 0b00 	mov.w	fp, #0
 8013e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e94:	f104 021a 	add.w	r2, r4, #26
 8013e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013e9a:	9305      	str	r3, [sp, #20]
 8013e9c:	eba3 0309 	sub.w	r3, r3, r9
 8013ea0:	455b      	cmp	r3, fp
 8013ea2:	dc33      	bgt.n	8013f0c <_printf_float+0x384>
 8013ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	db3b      	blt.n	8013f24 <_printf_float+0x39c>
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	07da      	lsls	r2, r3, #31
 8013eb0:	d438      	bmi.n	8013f24 <_printf_float+0x39c>
 8013eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eb4:	9a05      	ldr	r2, [sp, #20]
 8013eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013eb8:	1a9a      	subs	r2, r3, r2
 8013eba:	eba3 0901 	sub.w	r9, r3, r1
 8013ebe:	4591      	cmp	r9, r2
 8013ec0:	bfa8      	it	ge
 8013ec2:	4691      	movge	r9, r2
 8013ec4:	f1b9 0f00 	cmp.w	r9, #0
 8013ec8:	dc35      	bgt.n	8013f36 <_printf_float+0x3ae>
 8013eca:	f04f 0800 	mov.w	r8, #0
 8013ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ed2:	f104 0a1a 	add.w	sl, r4, #26
 8013ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013eda:	1a9b      	subs	r3, r3, r2
 8013edc:	eba3 0309 	sub.w	r3, r3, r9
 8013ee0:	4543      	cmp	r3, r8
 8013ee2:	f77f af79 	ble.w	8013dd8 <_printf_float+0x250>
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	4652      	mov	r2, sl
 8013eea:	4631      	mov	r1, r6
 8013eec:	4628      	mov	r0, r5
 8013eee:	47b8      	blx	r7
 8013ef0:	3001      	adds	r0, #1
 8013ef2:	f43f aeaa 	beq.w	8013c4a <_printf_float+0xc2>
 8013ef6:	f108 0801 	add.w	r8, r8, #1
 8013efa:	e7ec      	b.n	8013ed6 <_printf_float+0x34e>
 8013efc:	4613      	mov	r3, r2
 8013efe:	4631      	mov	r1, r6
 8013f00:	4642      	mov	r2, r8
 8013f02:	4628      	mov	r0, r5
 8013f04:	47b8      	blx	r7
 8013f06:	3001      	adds	r0, #1
 8013f08:	d1c0      	bne.n	8013e8c <_printf_float+0x304>
 8013f0a:	e69e      	b.n	8013c4a <_printf_float+0xc2>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	4631      	mov	r1, r6
 8013f10:	4628      	mov	r0, r5
 8013f12:	9205      	str	r2, [sp, #20]
 8013f14:	47b8      	blx	r7
 8013f16:	3001      	adds	r0, #1
 8013f18:	f43f ae97 	beq.w	8013c4a <_printf_float+0xc2>
 8013f1c:	9a05      	ldr	r2, [sp, #20]
 8013f1e:	f10b 0b01 	add.w	fp, fp, #1
 8013f22:	e7b9      	b.n	8013e98 <_printf_float+0x310>
 8013f24:	ee18 3a10 	vmov	r3, s16
 8013f28:	4652      	mov	r2, sl
 8013f2a:	4631      	mov	r1, r6
 8013f2c:	4628      	mov	r0, r5
 8013f2e:	47b8      	blx	r7
 8013f30:	3001      	adds	r0, #1
 8013f32:	d1be      	bne.n	8013eb2 <_printf_float+0x32a>
 8013f34:	e689      	b.n	8013c4a <_printf_float+0xc2>
 8013f36:	9a05      	ldr	r2, [sp, #20]
 8013f38:	464b      	mov	r3, r9
 8013f3a:	4442      	add	r2, r8
 8013f3c:	4631      	mov	r1, r6
 8013f3e:	4628      	mov	r0, r5
 8013f40:	47b8      	blx	r7
 8013f42:	3001      	adds	r0, #1
 8013f44:	d1c1      	bne.n	8013eca <_printf_float+0x342>
 8013f46:	e680      	b.n	8013c4a <_printf_float+0xc2>
 8013f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f4a:	2a01      	cmp	r2, #1
 8013f4c:	dc01      	bgt.n	8013f52 <_printf_float+0x3ca>
 8013f4e:	07db      	lsls	r3, r3, #31
 8013f50:	d538      	bpl.n	8013fc4 <_printf_float+0x43c>
 8013f52:	2301      	movs	r3, #1
 8013f54:	4642      	mov	r2, r8
 8013f56:	4631      	mov	r1, r6
 8013f58:	4628      	mov	r0, r5
 8013f5a:	47b8      	blx	r7
 8013f5c:	3001      	adds	r0, #1
 8013f5e:	f43f ae74 	beq.w	8013c4a <_printf_float+0xc2>
 8013f62:	ee18 3a10 	vmov	r3, s16
 8013f66:	4652      	mov	r2, sl
 8013f68:	4631      	mov	r1, r6
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	47b8      	blx	r7
 8013f6e:	3001      	adds	r0, #1
 8013f70:	f43f ae6b 	beq.w	8013c4a <_printf_float+0xc2>
 8013f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f78:	2200      	movs	r2, #0
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	f7ec fdbc 	bl	8000af8 <__aeabi_dcmpeq>
 8013f80:	b9d8      	cbnz	r0, 8013fba <_printf_float+0x432>
 8013f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f84:	f108 0201 	add.w	r2, r8, #1
 8013f88:	3b01      	subs	r3, #1
 8013f8a:	4631      	mov	r1, r6
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	47b8      	blx	r7
 8013f90:	3001      	adds	r0, #1
 8013f92:	d10e      	bne.n	8013fb2 <_printf_float+0x42a>
 8013f94:	e659      	b.n	8013c4a <_printf_float+0xc2>
 8013f96:	2301      	movs	r3, #1
 8013f98:	4652      	mov	r2, sl
 8013f9a:	4631      	mov	r1, r6
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	47b8      	blx	r7
 8013fa0:	3001      	adds	r0, #1
 8013fa2:	f43f ae52 	beq.w	8013c4a <_printf_float+0xc2>
 8013fa6:	f108 0801 	add.w	r8, r8, #1
 8013faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fac:	3b01      	subs	r3, #1
 8013fae:	4543      	cmp	r3, r8
 8013fb0:	dcf1      	bgt.n	8013f96 <_printf_float+0x40e>
 8013fb2:	464b      	mov	r3, r9
 8013fb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013fb8:	e6dc      	b.n	8013d74 <_printf_float+0x1ec>
 8013fba:	f04f 0800 	mov.w	r8, #0
 8013fbe:	f104 0a1a 	add.w	sl, r4, #26
 8013fc2:	e7f2      	b.n	8013faa <_printf_float+0x422>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	4642      	mov	r2, r8
 8013fc8:	e7df      	b.n	8013f8a <_printf_float+0x402>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	464a      	mov	r2, r9
 8013fce:	4631      	mov	r1, r6
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	47b8      	blx	r7
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	f43f ae38 	beq.w	8013c4a <_printf_float+0xc2>
 8013fda:	f108 0801 	add.w	r8, r8, #1
 8013fde:	68e3      	ldr	r3, [r4, #12]
 8013fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fe2:	1a5b      	subs	r3, r3, r1
 8013fe4:	4543      	cmp	r3, r8
 8013fe6:	dcf0      	bgt.n	8013fca <_printf_float+0x442>
 8013fe8:	e6fa      	b.n	8013de0 <_printf_float+0x258>
 8013fea:	f04f 0800 	mov.w	r8, #0
 8013fee:	f104 0919 	add.w	r9, r4, #25
 8013ff2:	e7f4      	b.n	8013fde <_printf_float+0x456>

08013ff4 <_printf_common>:
 8013ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff8:	4616      	mov	r6, r2
 8013ffa:	4699      	mov	r9, r3
 8013ffc:	688a      	ldr	r2, [r1, #8]
 8013ffe:	690b      	ldr	r3, [r1, #16]
 8014000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014004:	4293      	cmp	r3, r2
 8014006:	bfb8      	it	lt
 8014008:	4613      	movlt	r3, r2
 801400a:	6033      	str	r3, [r6, #0]
 801400c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014010:	4607      	mov	r7, r0
 8014012:	460c      	mov	r4, r1
 8014014:	b10a      	cbz	r2, 801401a <_printf_common+0x26>
 8014016:	3301      	adds	r3, #1
 8014018:	6033      	str	r3, [r6, #0]
 801401a:	6823      	ldr	r3, [r4, #0]
 801401c:	0699      	lsls	r1, r3, #26
 801401e:	bf42      	ittt	mi
 8014020:	6833      	ldrmi	r3, [r6, #0]
 8014022:	3302      	addmi	r3, #2
 8014024:	6033      	strmi	r3, [r6, #0]
 8014026:	6825      	ldr	r5, [r4, #0]
 8014028:	f015 0506 	ands.w	r5, r5, #6
 801402c:	d106      	bne.n	801403c <_printf_common+0x48>
 801402e:	f104 0a19 	add.w	sl, r4, #25
 8014032:	68e3      	ldr	r3, [r4, #12]
 8014034:	6832      	ldr	r2, [r6, #0]
 8014036:	1a9b      	subs	r3, r3, r2
 8014038:	42ab      	cmp	r3, r5
 801403a:	dc26      	bgt.n	801408a <_printf_common+0x96>
 801403c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014040:	1e13      	subs	r3, r2, #0
 8014042:	6822      	ldr	r2, [r4, #0]
 8014044:	bf18      	it	ne
 8014046:	2301      	movne	r3, #1
 8014048:	0692      	lsls	r2, r2, #26
 801404a:	d42b      	bmi.n	80140a4 <_printf_common+0xb0>
 801404c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014050:	4649      	mov	r1, r9
 8014052:	4638      	mov	r0, r7
 8014054:	47c0      	blx	r8
 8014056:	3001      	adds	r0, #1
 8014058:	d01e      	beq.n	8014098 <_printf_common+0xa4>
 801405a:	6823      	ldr	r3, [r4, #0]
 801405c:	68e5      	ldr	r5, [r4, #12]
 801405e:	6832      	ldr	r2, [r6, #0]
 8014060:	f003 0306 	and.w	r3, r3, #6
 8014064:	2b04      	cmp	r3, #4
 8014066:	bf08      	it	eq
 8014068:	1aad      	subeq	r5, r5, r2
 801406a:	68a3      	ldr	r3, [r4, #8]
 801406c:	6922      	ldr	r2, [r4, #16]
 801406e:	bf0c      	ite	eq
 8014070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014074:	2500      	movne	r5, #0
 8014076:	4293      	cmp	r3, r2
 8014078:	bfc4      	itt	gt
 801407a:	1a9b      	subgt	r3, r3, r2
 801407c:	18ed      	addgt	r5, r5, r3
 801407e:	2600      	movs	r6, #0
 8014080:	341a      	adds	r4, #26
 8014082:	42b5      	cmp	r5, r6
 8014084:	d11a      	bne.n	80140bc <_printf_common+0xc8>
 8014086:	2000      	movs	r0, #0
 8014088:	e008      	b.n	801409c <_printf_common+0xa8>
 801408a:	2301      	movs	r3, #1
 801408c:	4652      	mov	r2, sl
 801408e:	4649      	mov	r1, r9
 8014090:	4638      	mov	r0, r7
 8014092:	47c0      	blx	r8
 8014094:	3001      	adds	r0, #1
 8014096:	d103      	bne.n	80140a0 <_printf_common+0xac>
 8014098:	f04f 30ff 	mov.w	r0, #4294967295
 801409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a0:	3501      	adds	r5, #1
 80140a2:	e7c6      	b.n	8014032 <_printf_common+0x3e>
 80140a4:	18e1      	adds	r1, r4, r3
 80140a6:	1c5a      	adds	r2, r3, #1
 80140a8:	2030      	movs	r0, #48	; 0x30
 80140aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80140ae:	4422      	add	r2, r4
 80140b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80140b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80140b8:	3302      	adds	r3, #2
 80140ba:	e7c7      	b.n	801404c <_printf_common+0x58>
 80140bc:	2301      	movs	r3, #1
 80140be:	4622      	mov	r2, r4
 80140c0:	4649      	mov	r1, r9
 80140c2:	4638      	mov	r0, r7
 80140c4:	47c0      	blx	r8
 80140c6:	3001      	adds	r0, #1
 80140c8:	d0e6      	beq.n	8014098 <_printf_common+0xa4>
 80140ca:	3601      	adds	r6, #1
 80140cc:	e7d9      	b.n	8014082 <_printf_common+0x8e>
	...

080140d0 <_printf_i>:
 80140d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140d4:	7e0f      	ldrb	r7, [r1, #24]
 80140d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80140d8:	2f78      	cmp	r7, #120	; 0x78
 80140da:	4691      	mov	r9, r2
 80140dc:	4680      	mov	r8, r0
 80140de:	460c      	mov	r4, r1
 80140e0:	469a      	mov	sl, r3
 80140e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80140e6:	d807      	bhi.n	80140f8 <_printf_i+0x28>
 80140e8:	2f62      	cmp	r7, #98	; 0x62
 80140ea:	d80a      	bhi.n	8014102 <_printf_i+0x32>
 80140ec:	2f00      	cmp	r7, #0
 80140ee:	f000 80d8 	beq.w	80142a2 <_printf_i+0x1d2>
 80140f2:	2f58      	cmp	r7, #88	; 0x58
 80140f4:	f000 80a3 	beq.w	801423e <_printf_i+0x16e>
 80140f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014100:	e03a      	b.n	8014178 <_printf_i+0xa8>
 8014102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014106:	2b15      	cmp	r3, #21
 8014108:	d8f6      	bhi.n	80140f8 <_printf_i+0x28>
 801410a:	a101      	add	r1, pc, #4	; (adr r1, 8014110 <_printf_i+0x40>)
 801410c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014110:	08014169 	.word	0x08014169
 8014114:	0801417d 	.word	0x0801417d
 8014118:	080140f9 	.word	0x080140f9
 801411c:	080140f9 	.word	0x080140f9
 8014120:	080140f9 	.word	0x080140f9
 8014124:	080140f9 	.word	0x080140f9
 8014128:	0801417d 	.word	0x0801417d
 801412c:	080140f9 	.word	0x080140f9
 8014130:	080140f9 	.word	0x080140f9
 8014134:	080140f9 	.word	0x080140f9
 8014138:	080140f9 	.word	0x080140f9
 801413c:	08014289 	.word	0x08014289
 8014140:	080141ad 	.word	0x080141ad
 8014144:	0801426b 	.word	0x0801426b
 8014148:	080140f9 	.word	0x080140f9
 801414c:	080140f9 	.word	0x080140f9
 8014150:	080142ab 	.word	0x080142ab
 8014154:	080140f9 	.word	0x080140f9
 8014158:	080141ad 	.word	0x080141ad
 801415c:	080140f9 	.word	0x080140f9
 8014160:	080140f9 	.word	0x080140f9
 8014164:	08014273 	.word	0x08014273
 8014168:	682b      	ldr	r3, [r5, #0]
 801416a:	1d1a      	adds	r2, r3, #4
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	602a      	str	r2, [r5, #0]
 8014170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014178:	2301      	movs	r3, #1
 801417a:	e0a3      	b.n	80142c4 <_printf_i+0x1f4>
 801417c:	6820      	ldr	r0, [r4, #0]
 801417e:	6829      	ldr	r1, [r5, #0]
 8014180:	0606      	lsls	r6, r0, #24
 8014182:	f101 0304 	add.w	r3, r1, #4
 8014186:	d50a      	bpl.n	801419e <_printf_i+0xce>
 8014188:	680e      	ldr	r6, [r1, #0]
 801418a:	602b      	str	r3, [r5, #0]
 801418c:	2e00      	cmp	r6, #0
 801418e:	da03      	bge.n	8014198 <_printf_i+0xc8>
 8014190:	232d      	movs	r3, #45	; 0x2d
 8014192:	4276      	negs	r6, r6
 8014194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014198:	485e      	ldr	r0, [pc, #376]	; (8014314 <_printf_i+0x244>)
 801419a:	230a      	movs	r3, #10
 801419c:	e019      	b.n	80141d2 <_printf_i+0x102>
 801419e:	680e      	ldr	r6, [r1, #0]
 80141a0:	602b      	str	r3, [r5, #0]
 80141a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80141a6:	bf18      	it	ne
 80141a8:	b236      	sxthne	r6, r6
 80141aa:	e7ef      	b.n	801418c <_printf_i+0xbc>
 80141ac:	682b      	ldr	r3, [r5, #0]
 80141ae:	6820      	ldr	r0, [r4, #0]
 80141b0:	1d19      	adds	r1, r3, #4
 80141b2:	6029      	str	r1, [r5, #0]
 80141b4:	0601      	lsls	r1, r0, #24
 80141b6:	d501      	bpl.n	80141bc <_printf_i+0xec>
 80141b8:	681e      	ldr	r6, [r3, #0]
 80141ba:	e002      	b.n	80141c2 <_printf_i+0xf2>
 80141bc:	0646      	lsls	r6, r0, #25
 80141be:	d5fb      	bpl.n	80141b8 <_printf_i+0xe8>
 80141c0:	881e      	ldrh	r6, [r3, #0]
 80141c2:	4854      	ldr	r0, [pc, #336]	; (8014314 <_printf_i+0x244>)
 80141c4:	2f6f      	cmp	r7, #111	; 0x6f
 80141c6:	bf0c      	ite	eq
 80141c8:	2308      	moveq	r3, #8
 80141ca:	230a      	movne	r3, #10
 80141cc:	2100      	movs	r1, #0
 80141ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80141d2:	6865      	ldr	r5, [r4, #4]
 80141d4:	60a5      	str	r5, [r4, #8]
 80141d6:	2d00      	cmp	r5, #0
 80141d8:	bfa2      	ittt	ge
 80141da:	6821      	ldrge	r1, [r4, #0]
 80141dc:	f021 0104 	bicge.w	r1, r1, #4
 80141e0:	6021      	strge	r1, [r4, #0]
 80141e2:	b90e      	cbnz	r6, 80141e8 <_printf_i+0x118>
 80141e4:	2d00      	cmp	r5, #0
 80141e6:	d04d      	beq.n	8014284 <_printf_i+0x1b4>
 80141e8:	4615      	mov	r5, r2
 80141ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80141ee:	fb03 6711 	mls	r7, r3, r1, r6
 80141f2:	5dc7      	ldrb	r7, [r0, r7]
 80141f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80141f8:	4637      	mov	r7, r6
 80141fa:	42bb      	cmp	r3, r7
 80141fc:	460e      	mov	r6, r1
 80141fe:	d9f4      	bls.n	80141ea <_printf_i+0x11a>
 8014200:	2b08      	cmp	r3, #8
 8014202:	d10b      	bne.n	801421c <_printf_i+0x14c>
 8014204:	6823      	ldr	r3, [r4, #0]
 8014206:	07de      	lsls	r6, r3, #31
 8014208:	d508      	bpl.n	801421c <_printf_i+0x14c>
 801420a:	6923      	ldr	r3, [r4, #16]
 801420c:	6861      	ldr	r1, [r4, #4]
 801420e:	4299      	cmp	r1, r3
 8014210:	bfde      	ittt	le
 8014212:	2330      	movle	r3, #48	; 0x30
 8014214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014218:	f105 35ff 	addle.w	r5, r5, #4294967295
 801421c:	1b52      	subs	r2, r2, r5
 801421e:	6122      	str	r2, [r4, #16]
 8014220:	f8cd a000 	str.w	sl, [sp]
 8014224:	464b      	mov	r3, r9
 8014226:	aa03      	add	r2, sp, #12
 8014228:	4621      	mov	r1, r4
 801422a:	4640      	mov	r0, r8
 801422c:	f7ff fee2 	bl	8013ff4 <_printf_common>
 8014230:	3001      	adds	r0, #1
 8014232:	d14c      	bne.n	80142ce <_printf_i+0x1fe>
 8014234:	f04f 30ff 	mov.w	r0, #4294967295
 8014238:	b004      	add	sp, #16
 801423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801423e:	4835      	ldr	r0, [pc, #212]	; (8014314 <_printf_i+0x244>)
 8014240:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014244:	6829      	ldr	r1, [r5, #0]
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	f851 6b04 	ldr.w	r6, [r1], #4
 801424c:	6029      	str	r1, [r5, #0]
 801424e:	061d      	lsls	r5, r3, #24
 8014250:	d514      	bpl.n	801427c <_printf_i+0x1ac>
 8014252:	07df      	lsls	r7, r3, #31
 8014254:	bf44      	itt	mi
 8014256:	f043 0320 	orrmi.w	r3, r3, #32
 801425a:	6023      	strmi	r3, [r4, #0]
 801425c:	b91e      	cbnz	r6, 8014266 <_printf_i+0x196>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	f023 0320 	bic.w	r3, r3, #32
 8014264:	6023      	str	r3, [r4, #0]
 8014266:	2310      	movs	r3, #16
 8014268:	e7b0      	b.n	80141cc <_printf_i+0xfc>
 801426a:	6823      	ldr	r3, [r4, #0]
 801426c:	f043 0320 	orr.w	r3, r3, #32
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	2378      	movs	r3, #120	; 0x78
 8014274:	4828      	ldr	r0, [pc, #160]	; (8014318 <_printf_i+0x248>)
 8014276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801427a:	e7e3      	b.n	8014244 <_printf_i+0x174>
 801427c:	0659      	lsls	r1, r3, #25
 801427e:	bf48      	it	mi
 8014280:	b2b6      	uxthmi	r6, r6
 8014282:	e7e6      	b.n	8014252 <_printf_i+0x182>
 8014284:	4615      	mov	r5, r2
 8014286:	e7bb      	b.n	8014200 <_printf_i+0x130>
 8014288:	682b      	ldr	r3, [r5, #0]
 801428a:	6826      	ldr	r6, [r4, #0]
 801428c:	6961      	ldr	r1, [r4, #20]
 801428e:	1d18      	adds	r0, r3, #4
 8014290:	6028      	str	r0, [r5, #0]
 8014292:	0635      	lsls	r5, r6, #24
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	d501      	bpl.n	801429c <_printf_i+0x1cc>
 8014298:	6019      	str	r1, [r3, #0]
 801429a:	e002      	b.n	80142a2 <_printf_i+0x1d2>
 801429c:	0670      	lsls	r0, r6, #25
 801429e:	d5fb      	bpl.n	8014298 <_printf_i+0x1c8>
 80142a0:	8019      	strh	r1, [r3, #0]
 80142a2:	2300      	movs	r3, #0
 80142a4:	6123      	str	r3, [r4, #16]
 80142a6:	4615      	mov	r5, r2
 80142a8:	e7ba      	b.n	8014220 <_printf_i+0x150>
 80142aa:	682b      	ldr	r3, [r5, #0]
 80142ac:	1d1a      	adds	r2, r3, #4
 80142ae:	602a      	str	r2, [r5, #0]
 80142b0:	681d      	ldr	r5, [r3, #0]
 80142b2:	6862      	ldr	r2, [r4, #4]
 80142b4:	2100      	movs	r1, #0
 80142b6:	4628      	mov	r0, r5
 80142b8:	f7eb ffaa 	bl	8000210 <memchr>
 80142bc:	b108      	cbz	r0, 80142c2 <_printf_i+0x1f2>
 80142be:	1b40      	subs	r0, r0, r5
 80142c0:	6060      	str	r0, [r4, #4]
 80142c2:	6863      	ldr	r3, [r4, #4]
 80142c4:	6123      	str	r3, [r4, #16]
 80142c6:	2300      	movs	r3, #0
 80142c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142cc:	e7a8      	b.n	8014220 <_printf_i+0x150>
 80142ce:	6923      	ldr	r3, [r4, #16]
 80142d0:	462a      	mov	r2, r5
 80142d2:	4649      	mov	r1, r9
 80142d4:	4640      	mov	r0, r8
 80142d6:	47d0      	blx	sl
 80142d8:	3001      	adds	r0, #1
 80142da:	d0ab      	beq.n	8014234 <_printf_i+0x164>
 80142dc:	6823      	ldr	r3, [r4, #0]
 80142de:	079b      	lsls	r3, r3, #30
 80142e0:	d413      	bmi.n	801430a <_printf_i+0x23a>
 80142e2:	68e0      	ldr	r0, [r4, #12]
 80142e4:	9b03      	ldr	r3, [sp, #12]
 80142e6:	4298      	cmp	r0, r3
 80142e8:	bfb8      	it	lt
 80142ea:	4618      	movlt	r0, r3
 80142ec:	e7a4      	b.n	8014238 <_printf_i+0x168>
 80142ee:	2301      	movs	r3, #1
 80142f0:	4632      	mov	r2, r6
 80142f2:	4649      	mov	r1, r9
 80142f4:	4640      	mov	r0, r8
 80142f6:	47d0      	blx	sl
 80142f8:	3001      	adds	r0, #1
 80142fa:	d09b      	beq.n	8014234 <_printf_i+0x164>
 80142fc:	3501      	adds	r5, #1
 80142fe:	68e3      	ldr	r3, [r4, #12]
 8014300:	9903      	ldr	r1, [sp, #12]
 8014302:	1a5b      	subs	r3, r3, r1
 8014304:	42ab      	cmp	r3, r5
 8014306:	dcf2      	bgt.n	80142ee <_printf_i+0x21e>
 8014308:	e7eb      	b.n	80142e2 <_printf_i+0x212>
 801430a:	2500      	movs	r5, #0
 801430c:	f104 0619 	add.w	r6, r4, #25
 8014310:	e7f5      	b.n	80142fe <_printf_i+0x22e>
 8014312:	bf00      	nop
 8014314:	08016bce 	.word	0x08016bce
 8014318:	08016bdf 	.word	0x08016bdf

0801431c <cleanup_glue>:
 801431c:	b538      	push	{r3, r4, r5, lr}
 801431e:	460c      	mov	r4, r1
 8014320:	6809      	ldr	r1, [r1, #0]
 8014322:	4605      	mov	r5, r0
 8014324:	b109      	cbz	r1, 801432a <cleanup_glue+0xe>
 8014326:	f7ff fff9 	bl	801431c <cleanup_glue>
 801432a:	4621      	mov	r1, r4
 801432c:	4628      	mov	r0, r5
 801432e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014332:	f001 bbf5 	b.w	8015b20 <_free_r>
	...

08014338 <_reclaim_reent>:
 8014338:	4b2c      	ldr	r3, [pc, #176]	; (80143ec <_reclaim_reent+0xb4>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4283      	cmp	r3, r0
 801433e:	b570      	push	{r4, r5, r6, lr}
 8014340:	4604      	mov	r4, r0
 8014342:	d051      	beq.n	80143e8 <_reclaim_reent+0xb0>
 8014344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014346:	b143      	cbz	r3, 801435a <_reclaim_reent+0x22>
 8014348:	68db      	ldr	r3, [r3, #12]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d14a      	bne.n	80143e4 <_reclaim_reent+0xac>
 801434e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014350:	6819      	ldr	r1, [r3, #0]
 8014352:	b111      	cbz	r1, 801435a <_reclaim_reent+0x22>
 8014354:	4620      	mov	r0, r4
 8014356:	f001 fbe3 	bl	8015b20 <_free_r>
 801435a:	6961      	ldr	r1, [r4, #20]
 801435c:	b111      	cbz	r1, 8014364 <_reclaim_reent+0x2c>
 801435e:	4620      	mov	r0, r4
 8014360:	f001 fbde 	bl	8015b20 <_free_r>
 8014364:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014366:	b111      	cbz	r1, 801436e <_reclaim_reent+0x36>
 8014368:	4620      	mov	r0, r4
 801436a:	f001 fbd9 	bl	8015b20 <_free_r>
 801436e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014370:	b111      	cbz	r1, 8014378 <_reclaim_reent+0x40>
 8014372:	4620      	mov	r0, r4
 8014374:	f001 fbd4 	bl	8015b20 <_free_r>
 8014378:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801437a:	b111      	cbz	r1, 8014382 <_reclaim_reent+0x4a>
 801437c:	4620      	mov	r0, r4
 801437e:	f001 fbcf 	bl	8015b20 <_free_r>
 8014382:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014384:	b111      	cbz	r1, 801438c <_reclaim_reent+0x54>
 8014386:	4620      	mov	r0, r4
 8014388:	f001 fbca 	bl	8015b20 <_free_r>
 801438c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801438e:	b111      	cbz	r1, 8014396 <_reclaim_reent+0x5e>
 8014390:	4620      	mov	r0, r4
 8014392:	f001 fbc5 	bl	8015b20 <_free_r>
 8014396:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014398:	b111      	cbz	r1, 80143a0 <_reclaim_reent+0x68>
 801439a:	4620      	mov	r0, r4
 801439c:	f001 fbc0 	bl	8015b20 <_free_r>
 80143a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143a2:	b111      	cbz	r1, 80143aa <_reclaim_reent+0x72>
 80143a4:	4620      	mov	r0, r4
 80143a6:	f001 fbbb 	bl	8015b20 <_free_r>
 80143aa:	69a3      	ldr	r3, [r4, #24]
 80143ac:	b1e3      	cbz	r3, 80143e8 <_reclaim_reent+0xb0>
 80143ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80143b0:	4620      	mov	r0, r4
 80143b2:	4798      	blx	r3
 80143b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80143b6:	b1b9      	cbz	r1, 80143e8 <_reclaim_reent+0xb0>
 80143b8:	4620      	mov	r0, r4
 80143ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143be:	f7ff bfad 	b.w	801431c <cleanup_glue>
 80143c2:	5949      	ldr	r1, [r1, r5]
 80143c4:	b941      	cbnz	r1, 80143d8 <_reclaim_reent+0xa0>
 80143c6:	3504      	adds	r5, #4
 80143c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143ca:	2d80      	cmp	r5, #128	; 0x80
 80143cc:	68d9      	ldr	r1, [r3, #12]
 80143ce:	d1f8      	bne.n	80143c2 <_reclaim_reent+0x8a>
 80143d0:	4620      	mov	r0, r4
 80143d2:	f001 fba5 	bl	8015b20 <_free_r>
 80143d6:	e7ba      	b.n	801434e <_reclaim_reent+0x16>
 80143d8:	680e      	ldr	r6, [r1, #0]
 80143da:	4620      	mov	r0, r4
 80143dc:	f001 fba0 	bl	8015b20 <_free_r>
 80143e0:	4631      	mov	r1, r6
 80143e2:	e7ef      	b.n	80143c4 <_reclaim_reent+0x8c>
 80143e4:	2500      	movs	r5, #0
 80143e6:	e7ef      	b.n	80143c8 <_reclaim_reent+0x90>
 80143e8:	bd70      	pop	{r4, r5, r6, pc}
 80143ea:	bf00      	nop
 80143ec:	20000318 	.word	0x20000318

080143f0 <_sbrk_r>:
 80143f0:	b538      	push	{r3, r4, r5, lr}
 80143f2:	4d06      	ldr	r5, [pc, #24]	; (801440c <_sbrk_r+0x1c>)
 80143f4:	2300      	movs	r3, #0
 80143f6:	4604      	mov	r4, r0
 80143f8:	4608      	mov	r0, r1
 80143fa:	602b      	str	r3, [r5, #0]
 80143fc:	f7f0 fce8 	bl	8004dd0 <_sbrk>
 8014400:	1c43      	adds	r3, r0, #1
 8014402:	d102      	bne.n	801440a <_sbrk_r+0x1a>
 8014404:	682b      	ldr	r3, [r5, #0]
 8014406:	b103      	cbz	r3, 801440a <_sbrk_r+0x1a>
 8014408:	6023      	str	r3, [r4, #0]
 801440a:	bd38      	pop	{r3, r4, r5, pc}
 801440c:	200097cc 	.word	0x200097cc

08014410 <siprintf>:
 8014410:	b40e      	push	{r1, r2, r3}
 8014412:	b500      	push	{lr}
 8014414:	b09c      	sub	sp, #112	; 0x70
 8014416:	ab1d      	add	r3, sp, #116	; 0x74
 8014418:	9002      	str	r0, [sp, #8]
 801441a:	9006      	str	r0, [sp, #24]
 801441c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014420:	4809      	ldr	r0, [pc, #36]	; (8014448 <siprintf+0x38>)
 8014422:	9107      	str	r1, [sp, #28]
 8014424:	9104      	str	r1, [sp, #16]
 8014426:	4909      	ldr	r1, [pc, #36]	; (801444c <siprintf+0x3c>)
 8014428:	f853 2b04 	ldr.w	r2, [r3], #4
 801442c:	9105      	str	r1, [sp, #20]
 801442e:	6800      	ldr	r0, [r0, #0]
 8014430:	9301      	str	r3, [sp, #4]
 8014432:	a902      	add	r1, sp, #8
 8014434:	f001 fc1c 	bl	8015c70 <_svfiprintf_r>
 8014438:	9b02      	ldr	r3, [sp, #8]
 801443a:	2200      	movs	r2, #0
 801443c:	701a      	strb	r2, [r3, #0]
 801443e:	b01c      	add	sp, #112	; 0x70
 8014440:	f85d eb04 	ldr.w	lr, [sp], #4
 8014444:	b003      	add	sp, #12
 8014446:	4770      	bx	lr
 8014448:	20000318 	.word	0x20000318
 801444c:	ffff0208 	.word	0xffff0208

08014450 <__sread>:
 8014450:	b510      	push	{r4, lr}
 8014452:	460c      	mov	r4, r1
 8014454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014458:	f001 fd0a 	bl	8015e70 <_read_r>
 801445c:	2800      	cmp	r0, #0
 801445e:	bfab      	itete	ge
 8014460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014462:	89a3      	ldrhlt	r3, [r4, #12]
 8014464:	181b      	addge	r3, r3, r0
 8014466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801446a:	bfac      	ite	ge
 801446c:	6563      	strge	r3, [r4, #84]	; 0x54
 801446e:	81a3      	strhlt	r3, [r4, #12]
 8014470:	bd10      	pop	{r4, pc}

08014472 <__swrite>:
 8014472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014476:	461f      	mov	r7, r3
 8014478:	898b      	ldrh	r3, [r1, #12]
 801447a:	05db      	lsls	r3, r3, #23
 801447c:	4605      	mov	r5, r0
 801447e:	460c      	mov	r4, r1
 8014480:	4616      	mov	r6, r2
 8014482:	d505      	bpl.n	8014490 <__swrite+0x1e>
 8014484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014488:	2302      	movs	r3, #2
 801448a:	2200      	movs	r2, #0
 801448c:	f000 ff88 	bl	80153a0 <_lseek_r>
 8014490:	89a3      	ldrh	r3, [r4, #12]
 8014492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801449a:	81a3      	strh	r3, [r4, #12]
 801449c:	4632      	mov	r2, r6
 801449e:	463b      	mov	r3, r7
 80144a0:	4628      	mov	r0, r5
 80144a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144a6:	f000 b817 	b.w	80144d8 <_write_r>

080144aa <__sseek>:
 80144aa:	b510      	push	{r4, lr}
 80144ac:	460c      	mov	r4, r1
 80144ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144b2:	f000 ff75 	bl	80153a0 <_lseek_r>
 80144b6:	1c43      	adds	r3, r0, #1
 80144b8:	89a3      	ldrh	r3, [r4, #12]
 80144ba:	bf15      	itete	ne
 80144bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80144be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80144c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80144c6:	81a3      	strheq	r3, [r4, #12]
 80144c8:	bf18      	it	ne
 80144ca:	81a3      	strhne	r3, [r4, #12]
 80144cc:	bd10      	pop	{r4, pc}

080144ce <__sclose>:
 80144ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144d2:	f000 b813 	b.w	80144fc <_close_r>
	...

080144d8 <_write_r>:
 80144d8:	b538      	push	{r3, r4, r5, lr}
 80144da:	4d07      	ldr	r5, [pc, #28]	; (80144f8 <_write_r+0x20>)
 80144dc:	4604      	mov	r4, r0
 80144de:	4608      	mov	r0, r1
 80144e0:	4611      	mov	r1, r2
 80144e2:	2200      	movs	r2, #0
 80144e4:	602a      	str	r2, [r5, #0]
 80144e6:	461a      	mov	r2, r3
 80144e8:	f7f0 fc21 	bl	8004d2e <_write>
 80144ec:	1c43      	adds	r3, r0, #1
 80144ee:	d102      	bne.n	80144f6 <_write_r+0x1e>
 80144f0:	682b      	ldr	r3, [r5, #0]
 80144f2:	b103      	cbz	r3, 80144f6 <_write_r+0x1e>
 80144f4:	6023      	str	r3, [r4, #0]
 80144f6:	bd38      	pop	{r3, r4, r5, pc}
 80144f8:	200097cc 	.word	0x200097cc

080144fc <_close_r>:
 80144fc:	b538      	push	{r3, r4, r5, lr}
 80144fe:	4d06      	ldr	r5, [pc, #24]	; (8014518 <_close_r+0x1c>)
 8014500:	2300      	movs	r3, #0
 8014502:	4604      	mov	r4, r0
 8014504:	4608      	mov	r0, r1
 8014506:	602b      	str	r3, [r5, #0]
 8014508:	f7f0 fc2d 	bl	8004d66 <_close>
 801450c:	1c43      	adds	r3, r0, #1
 801450e:	d102      	bne.n	8014516 <_close_r+0x1a>
 8014510:	682b      	ldr	r3, [r5, #0]
 8014512:	b103      	cbz	r3, 8014516 <_close_r+0x1a>
 8014514:	6023      	str	r3, [r4, #0]
 8014516:	bd38      	pop	{r3, r4, r5, pc}
 8014518:	200097cc 	.word	0x200097cc

0801451c <quorem>:
 801451c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014520:	6903      	ldr	r3, [r0, #16]
 8014522:	690c      	ldr	r4, [r1, #16]
 8014524:	42a3      	cmp	r3, r4
 8014526:	4607      	mov	r7, r0
 8014528:	f2c0 8081 	blt.w	801462e <quorem+0x112>
 801452c:	3c01      	subs	r4, #1
 801452e:	f101 0814 	add.w	r8, r1, #20
 8014532:	f100 0514 	add.w	r5, r0, #20
 8014536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801453a:	9301      	str	r3, [sp, #4]
 801453c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014544:	3301      	adds	r3, #1
 8014546:	429a      	cmp	r2, r3
 8014548:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801454c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014550:	fbb2 f6f3 	udiv	r6, r2, r3
 8014554:	d331      	bcc.n	80145ba <quorem+0x9e>
 8014556:	f04f 0e00 	mov.w	lr, #0
 801455a:	4640      	mov	r0, r8
 801455c:	46ac      	mov	ip, r5
 801455e:	46f2      	mov	sl, lr
 8014560:	f850 2b04 	ldr.w	r2, [r0], #4
 8014564:	b293      	uxth	r3, r2
 8014566:	fb06 e303 	mla	r3, r6, r3, lr
 801456a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801456e:	b29b      	uxth	r3, r3
 8014570:	ebaa 0303 	sub.w	r3, sl, r3
 8014574:	f8dc a000 	ldr.w	sl, [ip]
 8014578:	0c12      	lsrs	r2, r2, #16
 801457a:	fa13 f38a 	uxtah	r3, r3, sl
 801457e:	fb06 e202 	mla	r2, r6, r2, lr
 8014582:	9300      	str	r3, [sp, #0]
 8014584:	9b00      	ldr	r3, [sp, #0]
 8014586:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801458a:	b292      	uxth	r2, r2
 801458c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014594:	f8bd 3000 	ldrh.w	r3, [sp]
 8014598:	4581      	cmp	r9, r0
 801459a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801459e:	f84c 3b04 	str.w	r3, [ip], #4
 80145a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80145a6:	d2db      	bcs.n	8014560 <quorem+0x44>
 80145a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80145ac:	b92b      	cbnz	r3, 80145ba <quorem+0x9e>
 80145ae:	9b01      	ldr	r3, [sp, #4]
 80145b0:	3b04      	subs	r3, #4
 80145b2:	429d      	cmp	r5, r3
 80145b4:	461a      	mov	r2, r3
 80145b6:	d32e      	bcc.n	8014616 <quorem+0xfa>
 80145b8:	613c      	str	r4, [r7, #16]
 80145ba:	4638      	mov	r0, r7
 80145bc:	f001 f998 	bl	80158f0 <__mcmp>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	db24      	blt.n	801460e <quorem+0xf2>
 80145c4:	3601      	adds	r6, #1
 80145c6:	4628      	mov	r0, r5
 80145c8:	f04f 0c00 	mov.w	ip, #0
 80145cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80145d0:	f8d0 e000 	ldr.w	lr, [r0]
 80145d4:	b293      	uxth	r3, r2
 80145d6:	ebac 0303 	sub.w	r3, ip, r3
 80145da:	0c12      	lsrs	r2, r2, #16
 80145dc:	fa13 f38e 	uxtah	r3, r3, lr
 80145e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80145e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80145ee:	45c1      	cmp	r9, r8
 80145f0:	f840 3b04 	str.w	r3, [r0], #4
 80145f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80145f8:	d2e8      	bcs.n	80145cc <quorem+0xb0>
 80145fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80145fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014602:	b922      	cbnz	r2, 801460e <quorem+0xf2>
 8014604:	3b04      	subs	r3, #4
 8014606:	429d      	cmp	r5, r3
 8014608:	461a      	mov	r2, r3
 801460a:	d30a      	bcc.n	8014622 <quorem+0x106>
 801460c:	613c      	str	r4, [r7, #16]
 801460e:	4630      	mov	r0, r6
 8014610:	b003      	add	sp, #12
 8014612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014616:	6812      	ldr	r2, [r2, #0]
 8014618:	3b04      	subs	r3, #4
 801461a:	2a00      	cmp	r2, #0
 801461c:	d1cc      	bne.n	80145b8 <quorem+0x9c>
 801461e:	3c01      	subs	r4, #1
 8014620:	e7c7      	b.n	80145b2 <quorem+0x96>
 8014622:	6812      	ldr	r2, [r2, #0]
 8014624:	3b04      	subs	r3, #4
 8014626:	2a00      	cmp	r2, #0
 8014628:	d1f0      	bne.n	801460c <quorem+0xf0>
 801462a:	3c01      	subs	r4, #1
 801462c:	e7eb      	b.n	8014606 <quorem+0xea>
 801462e:	2000      	movs	r0, #0
 8014630:	e7ee      	b.n	8014610 <quorem+0xf4>
 8014632:	0000      	movs	r0, r0
 8014634:	0000      	movs	r0, r0
	...

08014638 <_dtoa_r>:
 8014638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463c:	ed2d 8b04 	vpush	{d8-d9}
 8014640:	ec57 6b10 	vmov	r6, r7, d0
 8014644:	b093      	sub	sp, #76	; 0x4c
 8014646:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014648:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801464c:	9106      	str	r1, [sp, #24]
 801464e:	ee10 aa10 	vmov	sl, s0
 8014652:	4604      	mov	r4, r0
 8014654:	9209      	str	r2, [sp, #36]	; 0x24
 8014656:	930c      	str	r3, [sp, #48]	; 0x30
 8014658:	46bb      	mov	fp, r7
 801465a:	b975      	cbnz	r5, 801467a <_dtoa_r+0x42>
 801465c:	2010      	movs	r0, #16
 801465e:	f000 feb1 	bl	80153c4 <malloc>
 8014662:	4602      	mov	r2, r0
 8014664:	6260      	str	r0, [r4, #36]	; 0x24
 8014666:	b920      	cbnz	r0, 8014672 <_dtoa_r+0x3a>
 8014668:	4ba7      	ldr	r3, [pc, #668]	; (8014908 <_dtoa_r+0x2d0>)
 801466a:	21ea      	movs	r1, #234	; 0xea
 801466c:	48a7      	ldr	r0, [pc, #668]	; (801490c <_dtoa_r+0x2d4>)
 801466e:	f001 fc11 	bl	8015e94 <__assert_func>
 8014672:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014676:	6005      	str	r5, [r0, #0]
 8014678:	60c5      	str	r5, [r0, #12]
 801467a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801467c:	6819      	ldr	r1, [r3, #0]
 801467e:	b151      	cbz	r1, 8014696 <_dtoa_r+0x5e>
 8014680:	685a      	ldr	r2, [r3, #4]
 8014682:	604a      	str	r2, [r1, #4]
 8014684:	2301      	movs	r3, #1
 8014686:	4093      	lsls	r3, r2
 8014688:	608b      	str	r3, [r1, #8]
 801468a:	4620      	mov	r0, r4
 801468c:	f000 feee 	bl	801546c <_Bfree>
 8014690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014692:	2200      	movs	r2, #0
 8014694:	601a      	str	r2, [r3, #0]
 8014696:	1e3b      	subs	r3, r7, #0
 8014698:	bfaa      	itet	ge
 801469a:	2300      	movge	r3, #0
 801469c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80146a0:	f8c8 3000 	strge.w	r3, [r8]
 80146a4:	4b9a      	ldr	r3, [pc, #616]	; (8014910 <_dtoa_r+0x2d8>)
 80146a6:	bfbc      	itt	lt
 80146a8:	2201      	movlt	r2, #1
 80146aa:	f8c8 2000 	strlt.w	r2, [r8]
 80146ae:	ea33 030b 	bics.w	r3, r3, fp
 80146b2:	d11b      	bne.n	80146ec <_dtoa_r+0xb4>
 80146b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80146ba:	6013      	str	r3, [r2, #0]
 80146bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146c0:	4333      	orrs	r3, r6
 80146c2:	f000 8592 	beq.w	80151ea <_dtoa_r+0xbb2>
 80146c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146c8:	b963      	cbnz	r3, 80146e4 <_dtoa_r+0xac>
 80146ca:	4b92      	ldr	r3, [pc, #584]	; (8014914 <_dtoa_r+0x2dc>)
 80146cc:	e022      	b.n	8014714 <_dtoa_r+0xdc>
 80146ce:	4b92      	ldr	r3, [pc, #584]	; (8014918 <_dtoa_r+0x2e0>)
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	3308      	adds	r3, #8
 80146d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146d6:	6013      	str	r3, [r2, #0]
 80146d8:	9801      	ldr	r0, [sp, #4]
 80146da:	b013      	add	sp, #76	; 0x4c
 80146dc:	ecbd 8b04 	vpop	{d8-d9}
 80146e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e4:	4b8b      	ldr	r3, [pc, #556]	; (8014914 <_dtoa_r+0x2dc>)
 80146e6:	9301      	str	r3, [sp, #4]
 80146e8:	3303      	adds	r3, #3
 80146ea:	e7f3      	b.n	80146d4 <_dtoa_r+0x9c>
 80146ec:	2200      	movs	r2, #0
 80146ee:	2300      	movs	r3, #0
 80146f0:	4650      	mov	r0, sl
 80146f2:	4659      	mov	r1, fp
 80146f4:	f7ec fa00 	bl	8000af8 <__aeabi_dcmpeq>
 80146f8:	ec4b ab19 	vmov	d9, sl, fp
 80146fc:	4680      	mov	r8, r0
 80146fe:	b158      	cbz	r0, 8014718 <_dtoa_r+0xe0>
 8014700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014702:	2301      	movs	r3, #1
 8014704:	6013      	str	r3, [r2, #0]
 8014706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014708:	2b00      	cmp	r3, #0
 801470a:	f000 856b 	beq.w	80151e4 <_dtoa_r+0xbac>
 801470e:	4883      	ldr	r0, [pc, #524]	; (801491c <_dtoa_r+0x2e4>)
 8014710:	6018      	str	r0, [r3, #0]
 8014712:	1e43      	subs	r3, r0, #1
 8014714:	9301      	str	r3, [sp, #4]
 8014716:	e7df      	b.n	80146d8 <_dtoa_r+0xa0>
 8014718:	ec4b ab10 	vmov	d0, sl, fp
 801471c:	aa10      	add	r2, sp, #64	; 0x40
 801471e:	a911      	add	r1, sp, #68	; 0x44
 8014720:	4620      	mov	r0, r4
 8014722:	f001 f98b 	bl	8015a3c <__d2b>
 8014726:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801472a:	ee08 0a10 	vmov	s16, r0
 801472e:	2d00      	cmp	r5, #0
 8014730:	f000 8084 	beq.w	801483c <_dtoa_r+0x204>
 8014734:	ee19 3a90 	vmov	r3, s19
 8014738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801473c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014740:	4656      	mov	r6, sl
 8014742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801474a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801474e:	4b74      	ldr	r3, [pc, #464]	; (8014920 <_dtoa_r+0x2e8>)
 8014750:	2200      	movs	r2, #0
 8014752:	4630      	mov	r0, r6
 8014754:	4639      	mov	r1, r7
 8014756:	f7eb fdaf 	bl	80002b8 <__aeabi_dsub>
 801475a:	a365      	add	r3, pc, #404	; (adr r3, 80148f0 <_dtoa_r+0x2b8>)
 801475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014760:	f7eb ff62 	bl	8000628 <__aeabi_dmul>
 8014764:	a364      	add	r3, pc, #400	; (adr r3, 80148f8 <_dtoa_r+0x2c0>)
 8014766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476a:	f7eb fda7 	bl	80002bc <__adddf3>
 801476e:	4606      	mov	r6, r0
 8014770:	4628      	mov	r0, r5
 8014772:	460f      	mov	r7, r1
 8014774:	f7eb feee 	bl	8000554 <__aeabi_i2d>
 8014778:	a361      	add	r3, pc, #388	; (adr r3, 8014900 <_dtoa_r+0x2c8>)
 801477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801477e:	f7eb ff53 	bl	8000628 <__aeabi_dmul>
 8014782:	4602      	mov	r2, r0
 8014784:	460b      	mov	r3, r1
 8014786:	4630      	mov	r0, r6
 8014788:	4639      	mov	r1, r7
 801478a:	f7eb fd97 	bl	80002bc <__adddf3>
 801478e:	4606      	mov	r6, r0
 8014790:	460f      	mov	r7, r1
 8014792:	f7ec f9f9 	bl	8000b88 <__aeabi_d2iz>
 8014796:	2200      	movs	r2, #0
 8014798:	9000      	str	r0, [sp, #0]
 801479a:	2300      	movs	r3, #0
 801479c:	4630      	mov	r0, r6
 801479e:	4639      	mov	r1, r7
 80147a0:	f7ec f9b4 	bl	8000b0c <__aeabi_dcmplt>
 80147a4:	b150      	cbz	r0, 80147bc <_dtoa_r+0x184>
 80147a6:	9800      	ldr	r0, [sp, #0]
 80147a8:	f7eb fed4 	bl	8000554 <__aeabi_i2d>
 80147ac:	4632      	mov	r2, r6
 80147ae:	463b      	mov	r3, r7
 80147b0:	f7ec f9a2 	bl	8000af8 <__aeabi_dcmpeq>
 80147b4:	b910      	cbnz	r0, 80147bc <_dtoa_r+0x184>
 80147b6:	9b00      	ldr	r3, [sp, #0]
 80147b8:	3b01      	subs	r3, #1
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	9b00      	ldr	r3, [sp, #0]
 80147be:	2b16      	cmp	r3, #22
 80147c0:	d85a      	bhi.n	8014878 <_dtoa_r+0x240>
 80147c2:	9a00      	ldr	r2, [sp, #0]
 80147c4:	4b57      	ldr	r3, [pc, #348]	; (8014924 <_dtoa_r+0x2ec>)
 80147c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ce:	ec51 0b19 	vmov	r0, r1, d9
 80147d2:	f7ec f99b 	bl	8000b0c <__aeabi_dcmplt>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d050      	beq.n	801487c <_dtoa_r+0x244>
 80147da:	9b00      	ldr	r3, [sp, #0]
 80147dc:	3b01      	subs	r3, #1
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	2300      	movs	r3, #0
 80147e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80147e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147e6:	1b5d      	subs	r5, r3, r5
 80147e8:	1e6b      	subs	r3, r5, #1
 80147ea:	9305      	str	r3, [sp, #20]
 80147ec:	bf45      	ittet	mi
 80147ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80147f2:	9304      	strmi	r3, [sp, #16]
 80147f4:	2300      	movpl	r3, #0
 80147f6:	2300      	movmi	r3, #0
 80147f8:	bf4c      	ite	mi
 80147fa:	9305      	strmi	r3, [sp, #20]
 80147fc:	9304      	strpl	r3, [sp, #16]
 80147fe:	9b00      	ldr	r3, [sp, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	db3d      	blt.n	8014880 <_dtoa_r+0x248>
 8014804:	9b05      	ldr	r3, [sp, #20]
 8014806:	9a00      	ldr	r2, [sp, #0]
 8014808:	920a      	str	r2, [sp, #40]	; 0x28
 801480a:	4413      	add	r3, r2
 801480c:	9305      	str	r3, [sp, #20]
 801480e:	2300      	movs	r3, #0
 8014810:	9307      	str	r3, [sp, #28]
 8014812:	9b06      	ldr	r3, [sp, #24]
 8014814:	2b09      	cmp	r3, #9
 8014816:	f200 8089 	bhi.w	801492c <_dtoa_r+0x2f4>
 801481a:	2b05      	cmp	r3, #5
 801481c:	bfc4      	itt	gt
 801481e:	3b04      	subgt	r3, #4
 8014820:	9306      	strgt	r3, [sp, #24]
 8014822:	9b06      	ldr	r3, [sp, #24]
 8014824:	f1a3 0302 	sub.w	r3, r3, #2
 8014828:	bfcc      	ite	gt
 801482a:	2500      	movgt	r5, #0
 801482c:	2501      	movle	r5, #1
 801482e:	2b03      	cmp	r3, #3
 8014830:	f200 8087 	bhi.w	8014942 <_dtoa_r+0x30a>
 8014834:	e8df f003 	tbb	[pc, r3]
 8014838:	59383a2d 	.word	0x59383a2d
 801483c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014840:	441d      	add	r5, r3
 8014842:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014846:	2b20      	cmp	r3, #32
 8014848:	bfc1      	itttt	gt
 801484a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801484e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014852:	fa0b f303 	lslgt.w	r3, fp, r3
 8014856:	fa26 f000 	lsrgt.w	r0, r6, r0
 801485a:	bfda      	itte	le
 801485c:	f1c3 0320 	rsble	r3, r3, #32
 8014860:	fa06 f003 	lslle.w	r0, r6, r3
 8014864:	4318      	orrgt	r0, r3
 8014866:	f7eb fe65 	bl	8000534 <__aeabi_ui2d>
 801486a:	2301      	movs	r3, #1
 801486c:	4606      	mov	r6, r0
 801486e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014872:	3d01      	subs	r5, #1
 8014874:	930e      	str	r3, [sp, #56]	; 0x38
 8014876:	e76a      	b.n	801474e <_dtoa_r+0x116>
 8014878:	2301      	movs	r3, #1
 801487a:	e7b2      	b.n	80147e2 <_dtoa_r+0x1aa>
 801487c:	900b      	str	r0, [sp, #44]	; 0x2c
 801487e:	e7b1      	b.n	80147e4 <_dtoa_r+0x1ac>
 8014880:	9b04      	ldr	r3, [sp, #16]
 8014882:	9a00      	ldr	r2, [sp, #0]
 8014884:	1a9b      	subs	r3, r3, r2
 8014886:	9304      	str	r3, [sp, #16]
 8014888:	4253      	negs	r3, r2
 801488a:	9307      	str	r3, [sp, #28]
 801488c:	2300      	movs	r3, #0
 801488e:	930a      	str	r3, [sp, #40]	; 0x28
 8014890:	e7bf      	b.n	8014812 <_dtoa_r+0x1da>
 8014892:	2300      	movs	r3, #0
 8014894:	9308      	str	r3, [sp, #32]
 8014896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014898:	2b00      	cmp	r3, #0
 801489a:	dc55      	bgt.n	8014948 <_dtoa_r+0x310>
 801489c:	2301      	movs	r3, #1
 801489e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80148a2:	461a      	mov	r2, r3
 80148a4:	9209      	str	r2, [sp, #36]	; 0x24
 80148a6:	e00c      	b.n	80148c2 <_dtoa_r+0x28a>
 80148a8:	2301      	movs	r3, #1
 80148aa:	e7f3      	b.n	8014894 <_dtoa_r+0x25c>
 80148ac:	2300      	movs	r3, #0
 80148ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148b0:	9308      	str	r3, [sp, #32]
 80148b2:	9b00      	ldr	r3, [sp, #0]
 80148b4:	4413      	add	r3, r2
 80148b6:	9302      	str	r3, [sp, #8]
 80148b8:	3301      	adds	r3, #1
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	9303      	str	r3, [sp, #12]
 80148be:	bfb8      	it	lt
 80148c0:	2301      	movlt	r3, #1
 80148c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80148c4:	2200      	movs	r2, #0
 80148c6:	6042      	str	r2, [r0, #4]
 80148c8:	2204      	movs	r2, #4
 80148ca:	f102 0614 	add.w	r6, r2, #20
 80148ce:	429e      	cmp	r6, r3
 80148d0:	6841      	ldr	r1, [r0, #4]
 80148d2:	d93d      	bls.n	8014950 <_dtoa_r+0x318>
 80148d4:	4620      	mov	r0, r4
 80148d6:	f000 fd89 	bl	80153ec <_Balloc>
 80148da:	9001      	str	r0, [sp, #4]
 80148dc:	2800      	cmp	r0, #0
 80148de:	d13b      	bne.n	8014958 <_dtoa_r+0x320>
 80148e0:	4b11      	ldr	r3, [pc, #68]	; (8014928 <_dtoa_r+0x2f0>)
 80148e2:	4602      	mov	r2, r0
 80148e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80148e8:	e6c0      	b.n	801466c <_dtoa_r+0x34>
 80148ea:	2301      	movs	r3, #1
 80148ec:	e7df      	b.n	80148ae <_dtoa_r+0x276>
 80148ee:	bf00      	nop
 80148f0:	636f4361 	.word	0x636f4361
 80148f4:	3fd287a7 	.word	0x3fd287a7
 80148f8:	8b60c8b3 	.word	0x8b60c8b3
 80148fc:	3fc68a28 	.word	0x3fc68a28
 8014900:	509f79fb 	.word	0x509f79fb
 8014904:	3fd34413 	.word	0x3fd34413
 8014908:	08016bfd 	.word	0x08016bfd
 801490c:	08016c14 	.word	0x08016c14
 8014910:	7ff00000 	.word	0x7ff00000
 8014914:	08016bf9 	.word	0x08016bf9
 8014918:	08016bf0 	.word	0x08016bf0
 801491c:	08016bcd 	.word	0x08016bcd
 8014920:	3ff80000 	.word	0x3ff80000
 8014924:	08016d08 	.word	0x08016d08
 8014928:	08016c6f 	.word	0x08016c6f
 801492c:	2501      	movs	r5, #1
 801492e:	2300      	movs	r3, #0
 8014930:	9306      	str	r3, [sp, #24]
 8014932:	9508      	str	r5, [sp, #32]
 8014934:	f04f 33ff 	mov.w	r3, #4294967295
 8014938:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801493c:	2200      	movs	r2, #0
 801493e:	2312      	movs	r3, #18
 8014940:	e7b0      	b.n	80148a4 <_dtoa_r+0x26c>
 8014942:	2301      	movs	r3, #1
 8014944:	9308      	str	r3, [sp, #32]
 8014946:	e7f5      	b.n	8014934 <_dtoa_r+0x2fc>
 8014948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801494a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801494e:	e7b8      	b.n	80148c2 <_dtoa_r+0x28a>
 8014950:	3101      	adds	r1, #1
 8014952:	6041      	str	r1, [r0, #4]
 8014954:	0052      	lsls	r2, r2, #1
 8014956:	e7b8      	b.n	80148ca <_dtoa_r+0x292>
 8014958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801495a:	9a01      	ldr	r2, [sp, #4]
 801495c:	601a      	str	r2, [r3, #0]
 801495e:	9b03      	ldr	r3, [sp, #12]
 8014960:	2b0e      	cmp	r3, #14
 8014962:	f200 809d 	bhi.w	8014aa0 <_dtoa_r+0x468>
 8014966:	2d00      	cmp	r5, #0
 8014968:	f000 809a 	beq.w	8014aa0 <_dtoa_r+0x468>
 801496c:	9b00      	ldr	r3, [sp, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	dd32      	ble.n	80149d8 <_dtoa_r+0x3a0>
 8014972:	4ab7      	ldr	r2, [pc, #732]	; (8014c50 <_dtoa_r+0x618>)
 8014974:	f003 030f 	and.w	r3, r3, #15
 8014978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801497c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014980:	9b00      	ldr	r3, [sp, #0]
 8014982:	05d8      	lsls	r0, r3, #23
 8014984:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014988:	d516      	bpl.n	80149b8 <_dtoa_r+0x380>
 801498a:	4bb2      	ldr	r3, [pc, #712]	; (8014c54 <_dtoa_r+0x61c>)
 801498c:	ec51 0b19 	vmov	r0, r1, d9
 8014990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014994:	f7eb ff72 	bl	800087c <__aeabi_ddiv>
 8014998:	f007 070f 	and.w	r7, r7, #15
 801499c:	4682      	mov	sl, r0
 801499e:	468b      	mov	fp, r1
 80149a0:	2503      	movs	r5, #3
 80149a2:	4eac      	ldr	r6, [pc, #688]	; (8014c54 <_dtoa_r+0x61c>)
 80149a4:	b957      	cbnz	r7, 80149bc <_dtoa_r+0x384>
 80149a6:	4642      	mov	r2, r8
 80149a8:	464b      	mov	r3, r9
 80149aa:	4650      	mov	r0, sl
 80149ac:	4659      	mov	r1, fp
 80149ae:	f7eb ff65 	bl	800087c <__aeabi_ddiv>
 80149b2:	4682      	mov	sl, r0
 80149b4:	468b      	mov	fp, r1
 80149b6:	e028      	b.n	8014a0a <_dtoa_r+0x3d2>
 80149b8:	2502      	movs	r5, #2
 80149ba:	e7f2      	b.n	80149a2 <_dtoa_r+0x36a>
 80149bc:	07f9      	lsls	r1, r7, #31
 80149be:	d508      	bpl.n	80149d2 <_dtoa_r+0x39a>
 80149c0:	4640      	mov	r0, r8
 80149c2:	4649      	mov	r1, r9
 80149c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80149c8:	f7eb fe2e 	bl	8000628 <__aeabi_dmul>
 80149cc:	3501      	adds	r5, #1
 80149ce:	4680      	mov	r8, r0
 80149d0:	4689      	mov	r9, r1
 80149d2:	107f      	asrs	r7, r7, #1
 80149d4:	3608      	adds	r6, #8
 80149d6:	e7e5      	b.n	80149a4 <_dtoa_r+0x36c>
 80149d8:	f000 809b 	beq.w	8014b12 <_dtoa_r+0x4da>
 80149dc:	9b00      	ldr	r3, [sp, #0]
 80149de:	4f9d      	ldr	r7, [pc, #628]	; (8014c54 <_dtoa_r+0x61c>)
 80149e0:	425e      	negs	r6, r3
 80149e2:	4b9b      	ldr	r3, [pc, #620]	; (8014c50 <_dtoa_r+0x618>)
 80149e4:	f006 020f 	and.w	r2, r6, #15
 80149e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f0:	ec51 0b19 	vmov	r0, r1, d9
 80149f4:	f7eb fe18 	bl	8000628 <__aeabi_dmul>
 80149f8:	1136      	asrs	r6, r6, #4
 80149fa:	4682      	mov	sl, r0
 80149fc:	468b      	mov	fp, r1
 80149fe:	2300      	movs	r3, #0
 8014a00:	2502      	movs	r5, #2
 8014a02:	2e00      	cmp	r6, #0
 8014a04:	d17a      	bne.n	8014afc <_dtoa_r+0x4c4>
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d1d3      	bne.n	80149b2 <_dtoa_r+0x37a>
 8014a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f000 8082 	beq.w	8014b16 <_dtoa_r+0x4de>
 8014a12:	4b91      	ldr	r3, [pc, #580]	; (8014c58 <_dtoa_r+0x620>)
 8014a14:	2200      	movs	r2, #0
 8014a16:	4650      	mov	r0, sl
 8014a18:	4659      	mov	r1, fp
 8014a1a:	f7ec f877 	bl	8000b0c <__aeabi_dcmplt>
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	d079      	beq.n	8014b16 <_dtoa_r+0x4de>
 8014a22:	9b03      	ldr	r3, [sp, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d076      	beq.n	8014b16 <_dtoa_r+0x4de>
 8014a28:	9b02      	ldr	r3, [sp, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	dd36      	ble.n	8014a9c <_dtoa_r+0x464>
 8014a2e:	9b00      	ldr	r3, [sp, #0]
 8014a30:	4650      	mov	r0, sl
 8014a32:	4659      	mov	r1, fp
 8014a34:	1e5f      	subs	r7, r3, #1
 8014a36:	2200      	movs	r2, #0
 8014a38:	4b88      	ldr	r3, [pc, #544]	; (8014c5c <_dtoa_r+0x624>)
 8014a3a:	f7eb fdf5 	bl	8000628 <__aeabi_dmul>
 8014a3e:	9e02      	ldr	r6, [sp, #8]
 8014a40:	4682      	mov	sl, r0
 8014a42:	468b      	mov	fp, r1
 8014a44:	3501      	adds	r5, #1
 8014a46:	4628      	mov	r0, r5
 8014a48:	f7eb fd84 	bl	8000554 <__aeabi_i2d>
 8014a4c:	4652      	mov	r2, sl
 8014a4e:	465b      	mov	r3, fp
 8014a50:	f7eb fdea 	bl	8000628 <__aeabi_dmul>
 8014a54:	4b82      	ldr	r3, [pc, #520]	; (8014c60 <_dtoa_r+0x628>)
 8014a56:	2200      	movs	r2, #0
 8014a58:	f7eb fc30 	bl	80002bc <__adddf3>
 8014a5c:	46d0      	mov	r8, sl
 8014a5e:	46d9      	mov	r9, fp
 8014a60:	4682      	mov	sl, r0
 8014a62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014a66:	2e00      	cmp	r6, #0
 8014a68:	d158      	bne.n	8014b1c <_dtoa_r+0x4e4>
 8014a6a:	4b7e      	ldr	r3, [pc, #504]	; (8014c64 <_dtoa_r+0x62c>)
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	4640      	mov	r0, r8
 8014a70:	4649      	mov	r1, r9
 8014a72:	f7eb fc21 	bl	80002b8 <__aeabi_dsub>
 8014a76:	4652      	mov	r2, sl
 8014a78:	465b      	mov	r3, fp
 8014a7a:	4680      	mov	r8, r0
 8014a7c:	4689      	mov	r9, r1
 8014a7e:	f7ec f863 	bl	8000b48 <__aeabi_dcmpgt>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	f040 8295 	bne.w	8014fb2 <_dtoa_r+0x97a>
 8014a88:	4652      	mov	r2, sl
 8014a8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014a8e:	4640      	mov	r0, r8
 8014a90:	4649      	mov	r1, r9
 8014a92:	f7ec f83b 	bl	8000b0c <__aeabi_dcmplt>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	f040 8289 	bne.w	8014fae <_dtoa_r+0x976>
 8014a9c:	ec5b ab19 	vmov	sl, fp, d9
 8014aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	f2c0 8148 	blt.w	8014d38 <_dtoa_r+0x700>
 8014aa8:	9a00      	ldr	r2, [sp, #0]
 8014aaa:	2a0e      	cmp	r2, #14
 8014aac:	f300 8144 	bgt.w	8014d38 <_dtoa_r+0x700>
 8014ab0:	4b67      	ldr	r3, [pc, #412]	; (8014c50 <_dtoa_r+0x618>)
 8014ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ab6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f280 80d5 	bge.w	8014c6c <_dtoa_r+0x634>
 8014ac2:	9b03      	ldr	r3, [sp, #12]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f300 80d1 	bgt.w	8014c6c <_dtoa_r+0x634>
 8014aca:	f040 826f 	bne.w	8014fac <_dtoa_r+0x974>
 8014ace:	4b65      	ldr	r3, [pc, #404]	; (8014c64 <_dtoa_r+0x62c>)
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	4649      	mov	r1, r9
 8014ad6:	f7eb fda7 	bl	8000628 <__aeabi_dmul>
 8014ada:	4652      	mov	r2, sl
 8014adc:	465b      	mov	r3, fp
 8014ade:	f7ec f829 	bl	8000b34 <__aeabi_dcmpge>
 8014ae2:	9e03      	ldr	r6, [sp, #12]
 8014ae4:	4637      	mov	r7, r6
 8014ae6:	2800      	cmp	r0, #0
 8014ae8:	f040 8245 	bne.w	8014f76 <_dtoa_r+0x93e>
 8014aec:	9d01      	ldr	r5, [sp, #4]
 8014aee:	2331      	movs	r3, #49	; 0x31
 8014af0:	f805 3b01 	strb.w	r3, [r5], #1
 8014af4:	9b00      	ldr	r3, [sp, #0]
 8014af6:	3301      	adds	r3, #1
 8014af8:	9300      	str	r3, [sp, #0]
 8014afa:	e240      	b.n	8014f7e <_dtoa_r+0x946>
 8014afc:	07f2      	lsls	r2, r6, #31
 8014afe:	d505      	bpl.n	8014b0c <_dtoa_r+0x4d4>
 8014b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b04:	f7eb fd90 	bl	8000628 <__aeabi_dmul>
 8014b08:	3501      	adds	r5, #1
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	1076      	asrs	r6, r6, #1
 8014b0e:	3708      	adds	r7, #8
 8014b10:	e777      	b.n	8014a02 <_dtoa_r+0x3ca>
 8014b12:	2502      	movs	r5, #2
 8014b14:	e779      	b.n	8014a0a <_dtoa_r+0x3d2>
 8014b16:	9f00      	ldr	r7, [sp, #0]
 8014b18:	9e03      	ldr	r6, [sp, #12]
 8014b1a:	e794      	b.n	8014a46 <_dtoa_r+0x40e>
 8014b1c:	9901      	ldr	r1, [sp, #4]
 8014b1e:	4b4c      	ldr	r3, [pc, #304]	; (8014c50 <_dtoa_r+0x618>)
 8014b20:	4431      	add	r1, r6
 8014b22:	910d      	str	r1, [sp, #52]	; 0x34
 8014b24:	9908      	ldr	r1, [sp, #32]
 8014b26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014b2e:	2900      	cmp	r1, #0
 8014b30:	d043      	beq.n	8014bba <_dtoa_r+0x582>
 8014b32:	494d      	ldr	r1, [pc, #308]	; (8014c68 <_dtoa_r+0x630>)
 8014b34:	2000      	movs	r0, #0
 8014b36:	f7eb fea1 	bl	800087c <__aeabi_ddiv>
 8014b3a:	4652      	mov	r2, sl
 8014b3c:	465b      	mov	r3, fp
 8014b3e:	f7eb fbbb 	bl	80002b8 <__aeabi_dsub>
 8014b42:	9d01      	ldr	r5, [sp, #4]
 8014b44:	4682      	mov	sl, r0
 8014b46:	468b      	mov	fp, r1
 8014b48:	4649      	mov	r1, r9
 8014b4a:	4640      	mov	r0, r8
 8014b4c:	f7ec f81c 	bl	8000b88 <__aeabi_d2iz>
 8014b50:	4606      	mov	r6, r0
 8014b52:	f7eb fcff 	bl	8000554 <__aeabi_i2d>
 8014b56:	4602      	mov	r2, r0
 8014b58:	460b      	mov	r3, r1
 8014b5a:	4640      	mov	r0, r8
 8014b5c:	4649      	mov	r1, r9
 8014b5e:	f7eb fbab 	bl	80002b8 <__aeabi_dsub>
 8014b62:	3630      	adds	r6, #48	; 0x30
 8014b64:	f805 6b01 	strb.w	r6, [r5], #1
 8014b68:	4652      	mov	r2, sl
 8014b6a:	465b      	mov	r3, fp
 8014b6c:	4680      	mov	r8, r0
 8014b6e:	4689      	mov	r9, r1
 8014b70:	f7eb ffcc 	bl	8000b0c <__aeabi_dcmplt>
 8014b74:	2800      	cmp	r0, #0
 8014b76:	d163      	bne.n	8014c40 <_dtoa_r+0x608>
 8014b78:	4642      	mov	r2, r8
 8014b7a:	464b      	mov	r3, r9
 8014b7c:	4936      	ldr	r1, [pc, #216]	; (8014c58 <_dtoa_r+0x620>)
 8014b7e:	2000      	movs	r0, #0
 8014b80:	f7eb fb9a 	bl	80002b8 <__aeabi_dsub>
 8014b84:	4652      	mov	r2, sl
 8014b86:	465b      	mov	r3, fp
 8014b88:	f7eb ffc0 	bl	8000b0c <__aeabi_dcmplt>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	f040 80b5 	bne.w	8014cfc <_dtoa_r+0x6c4>
 8014b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b94:	429d      	cmp	r5, r3
 8014b96:	d081      	beq.n	8014a9c <_dtoa_r+0x464>
 8014b98:	4b30      	ldr	r3, [pc, #192]	; (8014c5c <_dtoa_r+0x624>)
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	4650      	mov	r0, sl
 8014b9e:	4659      	mov	r1, fp
 8014ba0:	f7eb fd42 	bl	8000628 <__aeabi_dmul>
 8014ba4:	4b2d      	ldr	r3, [pc, #180]	; (8014c5c <_dtoa_r+0x624>)
 8014ba6:	4682      	mov	sl, r0
 8014ba8:	468b      	mov	fp, r1
 8014baa:	4640      	mov	r0, r8
 8014bac:	4649      	mov	r1, r9
 8014bae:	2200      	movs	r2, #0
 8014bb0:	f7eb fd3a 	bl	8000628 <__aeabi_dmul>
 8014bb4:	4680      	mov	r8, r0
 8014bb6:	4689      	mov	r9, r1
 8014bb8:	e7c6      	b.n	8014b48 <_dtoa_r+0x510>
 8014bba:	4650      	mov	r0, sl
 8014bbc:	4659      	mov	r1, fp
 8014bbe:	f7eb fd33 	bl	8000628 <__aeabi_dmul>
 8014bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bc4:	9d01      	ldr	r5, [sp, #4]
 8014bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bc8:	4682      	mov	sl, r0
 8014bca:	468b      	mov	fp, r1
 8014bcc:	4649      	mov	r1, r9
 8014bce:	4640      	mov	r0, r8
 8014bd0:	f7eb ffda 	bl	8000b88 <__aeabi_d2iz>
 8014bd4:	4606      	mov	r6, r0
 8014bd6:	f7eb fcbd 	bl	8000554 <__aeabi_i2d>
 8014bda:	3630      	adds	r6, #48	; 0x30
 8014bdc:	4602      	mov	r2, r0
 8014bde:	460b      	mov	r3, r1
 8014be0:	4640      	mov	r0, r8
 8014be2:	4649      	mov	r1, r9
 8014be4:	f7eb fb68 	bl	80002b8 <__aeabi_dsub>
 8014be8:	f805 6b01 	strb.w	r6, [r5], #1
 8014bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bee:	429d      	cmp	r5, r3
 8014bf0:	4680      	mov	r8, r0
 8014bf2:	4689      	mov	r9, r1
 8014bf4:	f04f 0200 	mov.w	r2, #0
 8014bf8:	d124      	bne.n	8014c44 <_dtoa_r+0x60c>
 8014bfa:	4b1b      	ldr	r3, [pc, #108]	; (8014c68 <_dtoa_r+0x630>)
 8014bfc:	4650      	mov	r0, sl
 8014bfe:	4659      	mov	r1, fp
 8014c00:	f7eb fb5c 	bl	80002bc <__adddf3>
 8014c04:	4602      	mov	r2, r0
 8014c06:	460b      	mov	r3, r1
 8014c08:	4640      	mov	r0, r8
 8014c0a:	4649      	mov	r1, r9
 8014c0c:	f7eb ff9c 	bl	8000b48 <__aeabi_dcmpgt>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	d173      	bne.n	8014cfc <_dtoa_r+0x6c4>
 8014c14:	4652      	mov	r2, sl
 8014c16:	465b      	mov	r3, fp
 8014c18:	4913      	ldr	r1, [pc, #76]	; (8014c68 <_dtoa_r+0x630>)
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	f7eb fb4c 	bl	80002b8 <__aeabi_dsub>
 8014c20:	4602      	mov	r2, r0
 8014c22:	460b      	mov	r3, r1
 8014c24:	4640      	mov	r0, r8
 8014c26:	4649      	mov	r1, r9
 8014c28:	f7eb ff70 	bl	8000b0c <__aeabi_dcmplt>
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	f43f af35 	beq.w	8014a9c <_dtoa_r+0x464>
 8014c32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014c34:	1e6b      	subs	r3, r5, #1
 8014c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014c3c:	2b30      	cmp	r3, #48	; 0x30
 8014c3e:	d0f8      	beq.n	8014c32 <_dtoa_r+0x5fa>
 8014c40:	9700      	str	r7, [sp, #0]
 8014c42:	e049      	b.n	8014cd8 <_dtoa_r+0x6a0>
 8014c44:	4b05      	ldr	r3, [pc, #20]	; (8014c5c <_dtoa_r+0x624>)
 8014c46:	f7eb fcef 	bl	8000628 <__aeabi_dmul>
 8014c4a:	4680      	mov	r8, r0
 8014c4c:	4689      	mov	r9, r1
 8014c4e:	e7bd      	b.n	8014bcc <_dtoa_r+0x594>
 8014c50:	08016d08 	.word	0x08016d08
 8014c54:	08016ce0 	.word	0x08016ce0
 8014c58:	3ff00000 	.word	0x3ff00000
 8014c5c:	40240000 	.word	0x40240000
 8014c60:	401c0000 	.word	0x401c0000
 8014c64:	40140000 	.word	0x40140000
 8014c68:	3fe00000 	.word	0x3fe00000
 8014c6c:	9d01      	ldr	r5, [sp, #4]
 8014c6e:	4656      	mov	r6, sl
 8014c70:	465f      	mov	r7, fp
 8014c72:	4642      	mov	r2, r8
 8014c74:	464b      	mov	r3, r9
 8014c76:	4630      	mov	r0, r6
 8014c78:	4639      	mov	r1, r7
 8014c7a:	f7eb fdff 	bl	800087c <__aeabi_ddiv>
 8014c7e:	f7eb ff83 	bl	8000b88 <__aeabi_d2iz>
 8014c82:	4682      	mov	sl, r0
 8014c84:	f7eb fc66 	bl	8000554 <__aeabi_i2d>
 8014c88:	4642      	mov	r2, r8
 8014c8a:	464b      	mov	r3, r9
 8014c8c:	f7eb fccc 	bl	8000628 <__aeabi_dmul>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	4630      	mov	r0, r6
 8014c96:	4639      	mov	r1, r7
 8014c98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014c9c:	f7eb fb0c 	bl	80002b8 <__aeabi_dsub>
 8014ca0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ca4:	9e01      	ldr	r6, [sp, #4]
 8014ca6:	9f03      	ldr	r7, [sp, #12]
 8014ca8:	1bae      	subs	r6, r5, r6
 8014caa:	42b7      	cmp	r7, r6
 8014cac:	4602      	mov	r2, r0
 8014cae:	460b      	mov	r3, r1
 8014cb0:	d135      	bne.n	8014d1e <_dtoa_r+0x6e6>
 8014cb2:	f7eb fb03 	bl	80002bc <__adddf3>
 8014cb6:	4642      	mov	r2, r8
 8014cb8:	464b      	mov	r3, r9
 8014cba:	4606      	mov	r6, r0
 8014cbc:	460f      	mov	r7, r1
 8014cbe:	f7eb ff43 	bl	8000b48 <__aeabi_dcmpgt>
 8014cc2:	b9d0      	cbnz	r0, 8014cfa <_dtoa_r+0x6c2>
 8014cc4:	4642      	mov	r2, r8
 8014cc6:	464b      	mov	r3, r9
 8014cc8:	4630      	mov	r0, r6
 8014cca:	4639      	mov	r1, r7
 8014ccc:	f7eb ff14 	bl	8000af8 <__aeabi_dcmpeq>
 8014cd0:	b110      	cbz	r0, 8014cd8 <_dtoa_r+0x6a0>
 8014cd2:	f01a 0f01 	tst.w	sl, #1
 8014cd6:	d110      	bne.n	8014cfa <_dtoa_r+0x6c2>
 8014cd8:	4620      	mov	r0, r4
 8014cda:	ee18 1a10 	vmov	r1, s16
 8014cde:	f000 fbc5 	bl	801546c <_Bfree>
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	9800      	ldr	r0, [sp, #0]
 8014ce6:	702b      	strb	r3, [r5, #0]
 8014ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cea:	3001      	adds	r0, #1
 8014cec:	6018      	str	r0, [r3, #0]
 8014cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	f43f acf1 	beq.w	80146d8 <_dtoa_r+0xa0>
 8014cf6:	601d      	str	r5, [r3, #0]
 8014cf8:	e4ee      	b.n	80146d8 <_dtoa_r+0xa0>
 8014cfa:	9f00      	ldr	r7, [sp, #0]
 8014cfc:	462b      	mov	r3, r5
 8014cfe:	461d      	mov	r5, r3
 8014d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014d04:	2a39      	cmp	r2, #57	; 0x39
 8014d06:	d106      	bne.n	8014d16 <_dtoa_r+0x6de>
 8014d08:	9a01      	ldr	r2, [sp, #4]
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d1f7      	bne.n	8014cfe <_dtoa_r+0x6c6>
 8014d0e:	9901      	ldr	r1, [sp, #4]
 8014d10:	2230      	movs	r2, #48	; 0x30
 8014d12:	3701      	adds	r7, #1
 8014d14:	700a      	strb	r2, [r1, #0]
 8014d16:	781a      	ldrb	r2, [r3, #0]
 8014d18:	3201      	adds	r2, #1
 8014d1a:	701a      	strb	r2, [r3, #0]
 8014d1c:	e790      	b.n	8014c40 <_dtoa_r+0x608>
 8014d1e:	4ba6      	ldr	r3, [pc, #664]	; (8014fb8 <_dtoa_r+0x980>)
 8014d20:	2200      	movs	r2, #0
 8014d22:	f7eb fc81 	bl	8000628 <__aeabi_dmul>
 8014d26:	2200      	movs	r2, #0
 8014d28:	2300      	movs	r3, #0
 8014d2a:	4606      	mov	r6, r0
 8014d2c:	460f      	mov	r7, r1
 8014d2e:	f7eb fee3 	bl	8000af8 <__aeabi_dcmpeq>
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d09d      	beq.n	8014c72 <_dtoa_r+0x63a>
 8014d36:	e7cf      	b.n	8014cd8 <_dtoa_r+0x6a0>
 8014d38:	9a08      	ldr	r2, [sp, #32]
 8014d3a:	2a00      	cmp	r2, #0
 8014d3c:	f000 80d7 	beq.w	8014eee <_dtoa_r+0x8b6>
 8014d40:	9a06      	ldr	r2, [sp, #24]
 8014d42:	2a01      	cmp	r2, #1
 8014d44:	f300 80ba 	bgt.w	8014ebc <_dtoa_r+0x884>
 8014d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d4a:	2a00      	cmp	r2, #0
 8014d4c:	f000 80b2 	beq.w	8014eb4 <_dtoa_r+0x87c>
 8014d50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014d54:	9e07      	ldr	r6, [sp, #28]
 8014d56:	9d04      	ldr	r5, [sp, #16]
 8014d58:	9a04      	ldr	r2, [sp, #16]
 8014d5a:	441a      	add	r2, r3
 8014d5c:	9204      	str	r2, [sp, #16]
 8014d5e:	9a05      	ldr	r2, [sp, #20]
 8014d60:	2101      	movs	r1, #1
 8014d62:	441a      	add	r2, r3
 8014d64:	4620      	mov	r0, r4
 8014d66:	9205      	str	r2, [sp, #20]
 8014d68:	f000 fc38 	bl	80155dc <__i2b>
 8014d6c:	4607      	mov	r7, r0
 8014d6e:	2d00      	cmp	r5, #0
 8014d70:	dd0c      	ble.n	8014d8c <_dtoa_r+0x754>
 8014d72:	9b05      	ldr	r3, [sp, #20]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	dd09      	ble.n	8014d8c <_dtoa_r+0x754>
 8014d78:	42ab      	cmp	r3, r5
 8014d7a:	9a04      	ldr	r2, [sp, #16]
 8014d7c:	bfa8      	it	ge
 8014d7e:	462b      	movge	r3, r5
 8014d80:	1ad2      	subs	r2, r2, r3
 8014d82:	9204      	str	r2, [sp, #16]
 8014d84:	9a05      	ldr	r2, [sp, #20]
 8014d86:	1aed      	subs	r5, r5, r3
 8014d88:	1ad3      	subs	r3, r2, r3
 8014d8a:	9305      	str	r3, [sp, #20]
 8014d8c:	9b07      	ldr	r3, [sp, #28]
 8014d8e:	b31b      	cbz	r3, 8014dd8 <_dtoa_r+0x7a0>
 8014d90:	9b08      	ldr	r3, [sp, #32]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	f000 80af 	beq.w	8014ef6 <_dtoa_r+0x8be>
 8014d98:	2e00      	cmp	r6, #0
 8014d9a:	dd13      	ble.n	8014dc4 <_dtoa_r+0x78c>
 8014d9c:	4639      	mov	r1, r7
 8014d9e:	4632      	mov	r2, r6
 8014da0:	4620      	mov	r0, r4
 8014da2:	f000 fcdb 	bl	801575c <__pow5mult>
 8014da6:	ee18 2a10 	vmov	r2, s16
 8014daa:	4601      	mov	r1, r0
 8014dac:	4607      	mov	r7, r0
 8014dae:	4620      	mov	r0, r4
 8014db0:	f000 fc2a 	bl	8015608 <__multiply>
 8014db4:	ee18 1a10 	vmov	r1, s16
 8014db8:	4680      	mov	r8, r0
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f000 fb56 	bl	801546c <_Bfree>
 8014dc0:	ee08 8a10 	vmov	s16, r8
 8014dc4:	9b07      	ldr	r3, [sp, #28]
 8014dc6:	1b9a      	subs	r2, r3, r6
 8014dc8:	d006      	beq.n	8014dd8 <_dtoa_r+0x7a0>
 8014dca:	ee18 1a10 	vmov	r1, s16
 8014dce:	4620      	mov	r0, r4
 8014dd0:	f000 fcc4 	bl	801575c <__pow5mult>
 8014dd4:	ee08 0a10 	vmov	s16, r0
 8014dd8:	2101      	movs	r1, #1
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f000 fbfe 	bl	80155dc <__i2b>
 8014de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	4606      	mov	r6, r0
 8014de6:	f340 8088 	ble.w	8014efa <_dtoa_r+0x8c2>
 8014dea:	461a      	mov	r2, r3
 8014dec:	4601      	mov	r1, r0
 8014dee:	4620      	mov	r0, r4
 8014df0:	f000 fcb4 	bl	801575c <__pow5mult>
 8014df4:	9b06      	ldr	r3, [sp, #24]
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	4606      	mov	r6, r0
 8014dfa:	f340 8081 	ble.w	8014f00 <_dtoa_r+0x8c8>
 8014dfe:	f04f 0800 	mov.w	r8, #0
 8014e02:	6933      	ldr	r3, [r6, #16]
 8014e04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014e08:	6918      	ldr	r0, [r3, #16]
 8014e0a:	f000 fb97 	bl	801553c <__hi0bits>
 8014e0e:	f1c0 0020 	rsb	r0, r0, #32
 8014e12:	9b05      	ldr	r3, [sp, #20]
 8014e14:	4418      	add	r0, r3
 8014e16:	f010 001f 	ands.w	r0, r0, #31
 8014e1a:	f000 8092 	beq.w	8014f42 <_dtoa_r+0x90a>
 8014e1e:	f1c0 0320 	rsb	r3, r0, #32
 8014e22:	2b04      	cmp	r3, #4
 8014e24:	f340 808a 	ble.w	8014f3c <_dtoa_r+0x904>
 8014e28:	f1c0 001c 	rsb	r0, r0, #28
 8014e2c:	9b04      	ldr	r3, [sp, #16]
 8014e2e:	4403      	add	r3, r0
 8014e30:	9304      	str	r3, [sp, #16]
 8014e32:	9b05      	ldr	r3, [sp, #20]
 8014e34:	4403      	add	r3, r0
 8014e36:	4405      	add	r5, r0
 8014e38:	9305      	str	r3, [sp, #20]
 8014e3a:	9b04      	ldr	r3, [sp, #16]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	dd07      	ble.n	8014e50 <_dtoa_r+0x818>
 8014e40:	ee18 1a10 	vmov	r1, s16
 8014e44:	461a      	mov	r2, r3
 8014e46:	4620      	mov	r0, r4
 8014e48:	f000 fce2 	bl	8015810 <__lshift>
 8014e4c:	ee08 0a10 	vmov	s16, r0
 8014e50:	9b05      	ldr	r3, [sp, #20]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	dd05      	ble.n	8014e62 <_dtoa_r+0x82a>
 8014e56:	4631      	mov	r1, r6
 8014e58:	461a      	mov	r2, r3
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f000 fcd8 	bl	8015810 <__lshift>
 8014e60:	4606      	mov	r6, r0
 8014e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d06e      	beq.n	8014f46 <_dtoa_r+0x90e>
 8014e68:	ee18 0a10 	vmov	r0, s16
 8014e6c:	4631      	mov	r1, r6
 8014e6e:	f000 fd3f 	bl	80158f0 <__mcmp>
 8014e72:	2800      	cmp	r0, #0
 8014e74:	da67      	bge.n	8014f46 <_dtoa_r+0x90e>
 8014e76:	9b00      	ldr	r3, [sp, #0]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	ee18 1a10 	vmov	r1, s16
 8014e7e:	9300      	str	r3, [sp, #0]
 8014e80:	220a      	movs	r2, #10
 8014e82:	2300      	movs	r3, #0
 8014e84:	4620      	mov	r0, r4
 8014e86:	f000 fb13 	bl	80154b0 <__multadd>
 8014e8a:	9b08      	ldr	r3, [sp, #32]
 8014e8c:	ee08 0a10 	vmov	s16, r0
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f000 81b1 	beq.w	80151f8 <_dtoa_r+0xbc0>
 8014e96:	2300      	movs	r3, #0
 8014e98:	4639      	mov	r1, r7
 8014e9a:	220a      	movs	r2, #10
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	f000 fb07 	bl	80154b0 <__multadd>
 8014ea2:	9b02      	ldr	r3, [sp, #8]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	4607      	mov	r7, r0
 8014ea8:	f300 808e 	bgt.w	8014fc8 <_dtoa_r+0x990>
 8014eac:	9b06      	ldr	r3, [sp, #24]
 8014eae:	2b02      	cmp	r3, #2
 8014eb0:	dc51      	bgt.n	8014f56 <_dtoa_r+0x91e>
 8014eb2:	e089      	b.n	8014fc8 <_dtoa_r+0x990>
 8014eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014eba:	e74b      	b.n	8014d54 <_dtoa_r+0x71c>
 8014ebc:	9b03      	ldr	r3, [sp, #12]
 8014ebe:	1e5e      	subs	r6, r3, #1
 8014ec0:	9b07      	ldr	r3, [sp, #28]
 8014ec2:	42b3      	cmp	r3, r6
 8014ec4:	bfbf      	itttt	lt
 8014ec6:	9b07      	ldrlt	r3, [sp, #28]
 8014ec8:	9607      	strlt	r6, [sp, #28]
 8014eca:	1af2      	sublt	r2, r6, r3
 8014ecc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014ece:	bfb6      	itet	lt
 8014ed0:	189b      	addlt	r3, r3, r2
 8014ed2:	1b9e      	subge	r6, r3, r6
 8014ed4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014ed6:	9b03      	ldr	r3, [sp, #12]
 8014ed8:	bfb8      	it	lt
 8014eda:	2600      	movlt	r6, #0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	bfb7      	itett	lt
 8014ee0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014ee4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014ee8:	1a9d      	sublt	r5, r3, r2
 8014eea:	2300      	movlt	r3, #0
 8014eec:	e734      	b.n	8014d58 <_dtoa_r+0x720>
 8014eee:	9e07      	ldr	r6, [sp, #28]
 8014ef0:	9d04      	ldr	r5, [sp, #16]
 8014ef2:	9f08      	ldr	r7, [sp, #32]
 8014ef4:	e73b      	b.n	8014d6e <_dtoa_r+0x736>
 8014ef6:	9a07      	ldr	r2, [sp, #28]
 8014ef8:	e767      	b.n	8014dca <_dtoa_r+0x792>
 8014efa:	9b06      	ldr	r3, [sp, #24]
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	dc18      	bgt.n	8014f32 <_dtoa_r+0x8fa>
 8014f00:	f1ba 0f00 	cmp.w	sl, #0
 8014f04:	d115      	bne.n	8014f32 <_dtoa_r+0x8fa>
 8014f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014f0a:	b993      	cbnz	r3, 8014f32 <_dtoa_r+0x8fa>
 8014f0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014f10:	0d1b      	lsrs	r3, r3, #20
 8014f12:	051b      	lsls	r3, r3, #20
 8014f14:	b183      	cbz	r3, 8014f38 <_dtoa_r+0x900>
 8014f16:	9b04      	ldr	r3, [sp, #16]
 8014f18:	3301      	adds	r3, #1
 8014f1a:	9304      	str	r3, [sp, #16]
 8014f1c:	9b05      	ldr	r3, [sp, #20]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	9305      	str	r3, [sp, #20]
 8014f22:	f04f 0801 	mov.w	r8, #1
 8014f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f47f af6a 	bne.w	8014e02 <_dtoa_r+0x7ca>
 8014f2e:	2001      	movs	r0, #1
 8014f30:	e76f      	b.n	8014e12 <_dtoa_r+0x7da>
 8014f32:	f04f 0800 	mov.w	r8, #0
 8014f36:	e7f6      	b.n	8014f26 <_dtoa_r+0x8ee>
 8014f38:	4698      	mov	r8, r3
 8014f3a:	e7f4      	b.n	8014f26 <_dtoa_r+0x8ee>
 8014f3c:	f43f af7d 	beq.w	8014e3a <_dtoa_r+0x802>
 8014f40:	4618      	mov	r0, r3
 8014f42:	301c      	adds	r0, #28
 8014f44:	e772      	b.n	8014e2c <_dtoa_r+0x7f4>
 8014f46:	9b03      	ldr	r3, [sp, #12]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	dc37      	bgt.n	8014fbc <_dtoa_r+0x984>
 8014f4c:	9b06      	ldr	r3, [sp, #24]
 8014f4e:	2b02      	cmp	r3, #2
 8014f50:	dd34      	ble.n	8014fbc <_dtoa_r+0x984>
 8014f52:	9b03      	ldr	r3, [sp, #12]
 8014f54:	9302      	str	r3, [sp, #8]
 8014f56:	9b02      	ldr	r3, [sp, #8]
 8014f58:	b96b      	cbnz	r3, 8014f76 <_dtoa_r+0x93e>
 8014f5a:	4631      	mov	r1, r6
 8014f5c:	2205      	movs	r2, #5
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f000 faa6 	bl	80154b0 <__multadd>
 8014f64:	4601      	mov	r1, r0
 8014f66:	4606      	mov	r6, r0
 8014f68:	ee18 0a10 	vmov	r0, s16
 8014f6c:	f000 fcc0 	bl	80158f0 <__mcmp>
 8014f70:	2800      	cmp	r0, #0
 8014f72:	f73f adbb 	bgt.w	8014aec <_dtoa_r+0x4b4>
 8014f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f78:	9d01      	ldr	r5, [sp, #4]
 8014f7a:	43db      	mvns	r3, r3
 8014f7c:	9300      	str	r3, [sp, #0]
 8014f7e:	f04f 0800 	mov.w	r8, #0
 8014f82:	4631      	mov	r1, r6
 8014f84:	4620      	mov	r0, r4
 8014f86:	f000 fa71 	bl	801546c <_Bfree>
 8014f8a:	2f00      	cmp	r7, #0
 8014f8c:	f43f aea4 	beq.w	8014cd8 <_dtoa_r+0x6a0>
 8014f90:	f1b8 0f00 	cmp.w	r8, #0
 8014f94:	d005      	beq.n	8014fa2 <_dtoa_r+0x96a>
 8014f96:	45b8      	cmp	r8, r7
 8014f98:	d003      	beq.n	8014fa2 <_dtoa_r+0x96a>
 8014f9a:	4641      	mov	r1, r8
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	f000 fa65 	bl	801546c <_Bfree>
 8014fa2:	4639      	mov	r1, r7
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f000 fa61 	bl	801546c <_Bfree>
 8014faa:	e695      	b.n	8014cd8 <_dtoa_r+0x6a0>
 8014fac:	2600      	movs	r6, #0
 8014fae:	4637      	mov	r7, r6
 8014fb0:	e7e1      	b.n	8014f76 <_dtoa_r+0x93e>
 8014fb2:	9700      	str	r7, [sp, #0]
 8014fb4:	4637      	mov	r7, r6
 8014fb6:	e599      	b.n	8014aec <_dtoa_r+0x4b4>
 8014fb8:	40240000 	.word	0x40240000
 8014fbc:	9b08      	ldr	r3, [sp, #32]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	f000 80ca 	beq.w	8015158 <_dtoa_r+0xb20>
 8014fc4:	9b03      	ldr	r3, [sp, #12]
 8014fc6:	9302      	str	r3, [sp, #8]
 8014fc8:	2d00      	cmp	r5, #0
 8014fca:	dd05      	ble.n	8014fd8 <_dtoa_r+0x9a0>
 8014fcc:	4639      	mov	r1, r7
 8014fce:	462a      	mov	r2, r5
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	f000 fc1d 	bl	8015810 <__lshift>
 8014fd6:	4607      	mov	r7, r0
 8014fd8:	f1b8 0f00 	cmp.w	r8, #0
 8014fdc:	d05b      	beq.n	8015096 <_dtoa_r+0xa5e>
 8014fde:	6879      	ldr	r1, [r7, #4]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f000 fa03 	bl	80153ec <_Balloc>
 8014fe6:	4605      	mov	r5, r0
 8014fe8:	b928      	cbnz	r0, 8014ff6 <_dtoa_r+0x9be>
 8014fea:	4b87      	ldr	r3, [pc, #540]	; (8015208 <_dtoa_r+0xbd0>)
 8014fec:	4602      	mov	r2, r0
 8014fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ff2:	f7ff bb3b 	b.w	801466c <_dtoa_r+0x34>
 8014ff6:	693a      	ldr	r2, [r7, #16]
 8014ff8:	3202      	adds	r2, #2
 8014ffa:	0092      	lsls	r2, r2, #2
 8014ffc:	f107 010c 	add.w	r1, r7, #12
 8015000:	300c      	adds	r0, #12
 8015002:	f7fe fc5c 	bl	80138be <memcpy>
 8015006:	2201      	movs	r2, #1
 8015008:	4629      	mov	r1, r5
 801500a:	4620      	mov	r0, r4
 801500c:	f000 fc00 	bl	8015810 <__lshift>
 8015010:	9b01      	ldr	r3, [sp, #4]
 8015012:	f103 0901 	add.w	r9, r3, #1
 8015016:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801501a:	4413      	add	r3, r2
 801501c:	9305      	str	r3, [sp, #20]
 801501e:	f00a 0301 	and.w	r3, sl, #1
 8015022:	46b8      	mov	r8, r7
 8015024:	9304      	str	r3, [sp, #16]
 8015026:	4607      	mov	r7, r0
 8015028:	4631      	mov	r1, r6
 801502a:	ee18 0a10 	vmov	r0, s16
 801502e:	f7ff fa75 	bl	801451c <quorem>
 8015032:	4641      	mov	r1, r8
 8015034:	9002      	str	r0, [sp, #8]
 8015036:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801503a:	ee18 0a10 	vmov	r0, s16
 801503e:	f000 fc57 	bl	80158f0 <__mcmp>
 8015042:	463a      	mov	r2, r7
 8015044:	9003      	str	r0, [sp, #12]
 8015046:	4631      	mov	r1, r6
 8015048:	4620      	mov	r0, r4
 801504a:	f000 fc6d 	bl	8015928 <__mdiff>
 801504e:	68c2      	ldr	r2, [r0, #12]
 8015050:	f109 3bff 	add.w	fp, r9, #4294967295
 8015054:	4605      	mov	r5, r0
 8015056:	bb02      	cbnz	r2, 801509a <_dtoa_r+0xa62>
 8015058:	4601      	mov	r1, r0
 801505a:	ee18 0a10 	vmov	r0, s16
 801505e:	f000 fc47 	bl	80158f0 <__mcmp>
 8015062:	4602      	mov	r2, r0
 8015064:	4629      	mov	r1, r5
 8015066:	4620      	mov	r0, r4
 8015068:	9207      	str	r2, [sp, #28]
 801506a:	f000 f9ff 	bl	801546c <_Bfree>
 801506e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015072:	ea43 0102 	orr.w	r1, r3, r2
 8015076:	9b04      	ldr	r3, [sp, #16]
 8015078:	430b      	orrs	r3, r1
 801507a:	464d      	mov	r5, r9
 801507c:	d10f      	bne.n	801509e <_dtoa_r+0xa66>
 801507e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015082:	d02a      	beq.n	80150da <_dtoa_r+0xaa2>
 8015084:	9b03      	ldr	r3, [sp, #12]
 8015086:	2b00      	cmp	r3, #0
 8015088:	dd02      	ble.n	8015090 <_dtoa_r+0xa58>
 801508a:	9b02      	ldr	r3, [sp, #8]
 801508c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015090:	f88b a000 	strb.w	sl, [fp]
 8015094:	e775      	b.n	8014f82 <_dtoa_r+0x94a>
 8015096:	4638      	mov	r0, r7
 8015098:	e7ba      	b.n	8015010 <_dtoa_r+0x9d8>
 801509a:	2201      	movs	r2, #1
 801509c:	e7e2      	b.n	8015064 <_dtoa_r+0xa2c>
 801509e:	9b03      	ldr	r3, [sp, #12]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	db04      	blt.n	80150ae <_dtoa_r+0xa76>
 80150a4:	9906      	ldr	r1, [sp, #24]
 80150a6:	430b      	orrs	r3, r1
 80150a8:	9904      	ldr	r1, [sp, #16]
 80150aa:	430b      	orrs	r3, r1
 80150ac:	d122      	bne.n	80150f4 <_dtoa_r+0xabc>
 80150ae:	2a00      	cmp	r2, #0
 80150b0:	ddee      	ble.n	8015090 <_dtoa_r+0xa58>
 80150b2:	ee18 1a10 	vmov	r1, s16
 80150b6:	2201      	movs	r2, #1
 80150b8:	4620      	mov	r0, r4
 80150ba:	f000 fba9 	bl	8015810 <__lshift>
 80150be:	4631      	mov	r1, r6
 80150c0:	ee08 0a10 	vmov	s16, r0
 80150c4:	f000 fc14 	bl	80158f0 <__mcmp>
 80150c8:	2800      	cmp	r0, #0
 80150ca:	dc03      	bgt.n	80150d4 <_dtoa_r+0xa9c>
 80150cc:	d1e0      	bne.n	8015090 <_dtoa_r+0xa58>
 80150ce:	f01a 0f01 	tst.w	sl, #1
 80150d2:	d0dd      	beq.n	8015090 <_dtoa_r+0xa58>
 80150d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80150d8:	d1d7      	bne.n	801508a <_dtoa_r+0xa52>
 80150da:	2339      	movs	r3, #57	; 0x39
 80150dc:	f88b 3000 	strb.w	r3, [fp]
 80150e0:	462b      	mov	r3, r5
 80150e2:	461d      	mov	r5, r3
 80150e4:	3b01      	subs	r3, #1
 80150e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80150ea:	2a39      	cmp	r2, #57	; 0x39
 80150ec:	d071      	beq.n	80151d2 <_dtoa_r+0xb9a>
 80150ee:	3201      	adds	r2, #1
 80150f0:	701a      	strb	r2, [r3, #0]
 80150f2:	e746      	b.n	8014f82 <_dtoa_r+0x94a>
 80150f4:	2a00      	cmp	r2, #0
 80150f6:	dd07      	ble.n	8015108 <_dtoa_r+0xad0>
 80150f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80150fc:	d0ed      	beq.n	80150da <_dtoa_r+0xaa2>
 80150fe:	f10a 0301 	add.w	r3, sl, #1
 8015102:	f88b 3000 	strb.w	r3, [fp]
 8015106:	e73c      	b.n	8014f82 <_dtoa_r+0x94a>
 8015108:	9b05      	ldr	r3, [sp, #20]
 801510a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801510e:	4599      	cmp	r9, r3
 8015110:	d047      	beq.n	80151a2 <_dtoa_r+0xb6a>
 8015112:	ee18 1a10 	vmov	r1, s16
 8015116:	2300      	movs	r3, #0
 8015118:	220a      	movs	r2, #10
 801511a:	4620      	mov	r0, r4
 801511c:	f000 f9c8 	bl	80154b0 <__multadd>
 8015120:	45b8      	cmp	r8, r7
 8015122:	ee08 0a10 	vmov	s16, r0
 8015126:	f04f 0300 	mov.w	r3, #0
 801512a:	f04f 020a 	mov.w	r2, #10
 801512e:	4641      	mov	r1, r8
 8015130:	4620      	mov	r0, r4
 8015132:	d106      	bne.n	8015142 <_dtoa_r+0xb0a>
 8015134:	f000 f9bc 	bl	80154b0 <__multadd>
 8015138:	4680      	mov	r8, r0
 801513a:	4607      	mov	r7, r0
 801513c:	f109 0901 	add.w	r9, r9, #1
 8015140:	e772      	b.n	8015028 <_dtoa_r+0x9f0>
 8015142:	f000 f9b5 	bl	80154b0 <__multadd>
 8015146:	4639      	mov	r1, r7
 8015148:	4680      	mov	r8, r0
 801514a:	2300      	movs	r3, #0
 801514c:	220a      	movs	r2, #10
 801514e:	4620      	mov	r0, r4
 8015150:	f000 f9ae 	bl	80154b0 <__multadd>
 8015154:	4607      	mov	r7, r0
 8015156:	e7f1      	b.n	801513c <_dtoa_r+0xb04>
 8015158:	9b03      	ldr	r3, [sp, #12]
 801515a:	9302      	str	r3, [sp, #8]
 801515c:	9d01      	ldr	r5, [sp, #4]
 801515e:	ee18 0a10 	vmov	r0, s16
 8015162:	4631      	mov	r1, r6
 8015164:	f7ff f9da 	bl	801451c <quorem>
 8015168:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801516c:	9b01      	ldr	r3, [sp, #4]
 801516e:	f805 ab01 	strb.w	sl, [r5], #1
 8015172:	1aea      	subs	r2, r5, r3
 8015174:	9b02      	ldr	r3, [sp, #8]
 8015176:	4293      	cmp	r3, r2
 8015178:	dd09      	ble.n	801518e <_dtoa_r+0xb56>
 801517a:	ee18 1a10 	vmov	r1, s16
 801517e:	2300      	movs	r3, #0
 8015180:	220a      	movs	r2, #10
 8015182:	4620      	mov	r0, r4
 8015184:	f000 f994 	bl	80154b0 <__multadd>
 8015188:	ee08 0a10 	vmov	s16, r0
 801518c:	e7e7      	b.n	801515e <_dtoa_r+0xb26>
 801518e:	9b02      	ldr	r3, [sp, #8]
 8015190:	2b00      	cmp	r3, #0
 8015192:	bfc8      	it	gt
 8015194:	461d      	movgt	r5, r3
 8015196:	9b01      	ldr	r3, [sp, #4]
 8015198:	bfd8      	it	le
 801519a:	2501      	movle	r5, #1
 801519c:	441d      	add	r5, r3
 801519e:	f04f 0800 	mov.w	r8, #0
 80151a2:	ee18 1a10 	vmov	r1, s16
 80151a6:	2201      	movs	r2, #1
 80151a8:	4620      	mov	r0, r4
 80151aa:	f000 fb31 	bl	8015810 <__lshift>
 80151ae:	4631      	mov	r1, r6
 80151b0:	ee08 0a10 	vmov	s16, r0
 80151b4:	f000 fb9c 	bl	80158f0 <__mcmp>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	dc91      	bgt.n	80150e0 <_dtoa_r+0xaa8>
 80151bc:	d102      	bne.n	80151c4 <_dtoa_r+0xb8c>
 80151be:	f01a 0f01 	tst.w	sl, #1
 80151c2:	d18d      	bne.n	80150e0 <_dtoa_r+0xaa8>
 80151c4:	462b      	mov	r3, r5
 80151c6:	461d      	mov	r5, r3
 80151c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80151cc:	2a30      	cmp	r2, #48	; 0x30
 80151ce:	d0fa      	beq.n	80151c6 <_dtoa_r+0xb8e>
 80151d0:	e6d7      	b.n	8014f82 <_dtoa_r+0x94a>
 80151d2:	9a01      	ldr	r2, [sp, #4]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d184      	bne.n	80150e2 <_dtoa_r+0xaaa>
 80151d8:	9b00      	ldr	r3, [sp, #0]
 80151da:	3301      	adds	r3, #1
 80151dc:	9300      	str	r3, [sp, #0]
 80151de:	2331      	movs	r3, #49	; 0x31
 80151e0:	7013      	strb	r3, [r2, #0]
 80151e2:	e6ce      	b.n	8014f82 <_dtoa_r+0x94a>
 80151e4:	4b09      	ldr	r3, [pc, #36]	; (801520c <_dtoa_r+0xbd4>)
 80151e6:	f7ff ba95 	b.w	8014714 <_dtoa_r+0xdc>
 80151ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	f47f aa6e 	bne.w	80146ce <_dtoa_r+0x96>
 80151f2:	4b07      	ldr	r3, [pc, #28]	; (8015210 <_dtoa_r+0xbd8>)
 80151f4:	f7ff ba8e 	b.w	8014714 <_dtoa_r+0xdc>
 80151f8:	9b02      	ldr	r3, [sp, #8]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	dcae      	bgt.n	801515c <_dtoa_r+0xb24>
 80151fe:	9b06      	ldr	r3, [sp, #24]
 8015200:	2b02      	cmp	r3, #2
 8015202:	f73f aea8 	bgt.w	8014f56 <_dtoa_r+0x91e>
 8015206:	e7a9      	b.n	801515c <_dtoa_r+0xb24>
 8015208:	08016c6f 	.word	0x08016c6f
 801520c:	08016bcc 	.word	0x08016bcc
 8015210:	08016bf0 	.word	0x08016bf0

08015214 <__sflush_r>:
 8015214:	898a      	ldrh	r2, [r1, #12]
 8015216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801521a:	4605      	mov	r5, r0
 801521c:	0710      	lsls	r0, r2, #28
 801521e:	460c      	mov	r4, r1
 8015220:	d458      	bmi.n	80152d4 <__sflush_r+0xc0>
 8015222:	684b      	ldr	r3, [r1, #4]
 8015224:	2b00      	cmp	r3, #0
 8015226:	dc05      	bgt.n	8015234 <__sflush_r+0x20>
 8015228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801522a:	2b00      	cmp	r3, #0
 801522c:	dc02      	bgt.n	8015234 <__sflush_r+0x20>
 801522e:	2000      	movs	r0, #0
 8015230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015236:	2e00      	cmp	r6, #0
 8015238:	d0f9      	beq.n	801522e <__sflush_r+0x1a>
 801523a:	2300      	movs	r3, #0
 801523c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015240:	682f      	ldr	r7, [r5, #0]
 8015242:	602b      	str	r3, [r5, #0]
 8015244:	d032      	beq.n	80152ac <__sflush_r+0x98>
 8015246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015248:	89a3      	ldrh	r3, [r4, #12]
 801524a:	075a      	lsls	r2, r3, #29
 801524c:	d505      	bpl.n	801525a <__sflush_r+0x46>
 801524e:	6863      	ldr	r3, [r4, #4]
 8015250:	1ac0      	subs	r0, r0, r3
 8015252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015254:	b10b      	cbz	r3, 801525a <__sflush_r+0x46>
 8015256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015258:	1ac0      	subs	r0, r0, r3
 801525a:	2300      	movs	r3, #0
 801525c:	4602      	mov	r2, r0
 801525e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015260:	6a21      	ldr	r1, [r4, #32]
 8015262:	4628      	mov	r0, r5
 8015264:	47b0      	blx	r6
 8015266:	1c43      	adds	r3, r0, #1
 8015268:	89a3      	ldrh	r3, [r4, #12]
 801526a:	d106      	bne.n	801527a <__sflush_r+0x66>
 801526c:	6829      	ldr	r1, [r5, #0]
 801526e:	291d      	cmp	r1, #29
 8015270:	d82c      	bhi.n	80152cc <__sflush_r+0xb8>
 8015272:	4a2a      	ldr	r2, [pc, #168]	; (801531c <__sflush_r+0x108>)
 8015274:	40ca      	lsrs	r2, r1
 8015276:	07d6      	lsls	r6, r2, #31
 8015278:	d528      	bpl.n	80152cc <__sflush_r+0xb8>
 801527a:	2200      	movs	r2, #0
 801527c:	6062      	str	r2, [r4, #4]
 801527e:	04d9      	lsls	r1, r3, #19
 8015280:	6922      	ldr	r2, [r4, #16]
 8015282:	6022      	str	r2, [r4, #0]
 8015284:	d504      	bpl.n	8015290 <__sflush_r+0x7c>
 8015286:	1c42      	adds	r2, r0, #1
 8015288:	d101      	bne.n	801528e <__sflush_r+0x7a>
 801528a:	682b      	ldr	r3, [r5, #0]
 801528c:	b903      	cbnz	r3, 8015290 <__sflush_r+0x7c>
 801528e:	6560      	str	r0, [r4, #84]	; 0x54
 8015290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015292:	602f      	str	r7, [r5, #0]
 8015294:	2900      	cmp	r1, #0
 8015296:	d0ca      	beq.n	801522e <__sflush_r+0x1a>
 8015298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801529c:	4299      	cmp	r1, r3
 801529e:	d002      	beq.n	80152a6 <__sflush_r+0x92>
 80152a0:	4628      	mov	r0, r5
 80152a2:	f000 fc3d 	bl	8015b20 <_free_r>
 80152a6:	2000      	movs	r0, #0
 80152a8:	6360      	str	r0, [r4, #52]	; 0x34
 80152aa:	e7c1      	b.n	8015230 <__sflush_r+0x1c>
 80152ac:	6a21      	ldr	r1, [r4, #32]
 80152ae:	2301      	movs	r3, #1
 80152b0:	4628      	mov	r0, r5
 80152b2:	47b0      	blx	r6
 80152b4:	1c41      	adds	r1, r0, #1
 80152b6:	d1c7      	bne.n	8015248 <__sflush_r+0x34>
 80152b8:	682b      	ldr	r3, [r5, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d0c4      	beq.n	8015248 <__sflush_r+0x34>
 80152be:	2b1d      	cmp	r3, #29
 80152c0:	d001      	beq.n	80152c6 <__sflush_r+0xb2>
 80152c2:	2b16      	cmp	r3, #22
 80152c4:	d101      	bne.n	80152ca <__sflush_r+0xb6>
 80152c6:	602f      	str	r7, [r5, #0]
 80152c8:	e7b1      	b.n	801522e <__sflush_r+0x1a>
 80152ca:	89a3      	ldrh	r3, [r4, #12]
 80152cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152d0:	81a3      	strh	r3, [r4, #12]
 80152d2:	e7ad      	b.n	8015230 <__sflush_r+0x1c>
 80152d4:	690f      	ldr	r7, [r1, #16]
 80152d6:	2f00      	cmp	r7, #0
 80152d8:	d0a9      	beq.n	801522e <__sflush_r+0x1a>
 80152da:	0793      	lsls	r3, r2, #30
 80152dc:	680e      	ldr	r6, [r1, #0]
 80152de:	bf08      	it	eq
 80152e0:	694b      	ldreq	r3, [r1, #20]
 80152e2:	600f      	str	r7, [r1, #0]
 80152e4:	bf18      	it	ne
 80152e6:	2300      	movne	r3, #0
 80152e8:	eba6 0807 	sub.w	r8, r6, r7
 80152ec:	608b      	str	r3, [r1, #8]
 80152ee:	f1b8 0f00 	cmp.w	r8, #0
 80152f2:	dd9c      	ble.n	801522e <__sflush_r+0x1a>
 80152f4:	6a21      	ldr	r1, [r4, #32]
 80152f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152f8:	4643      	mov	r3, r8
 80152fa:	463a      	mov	r2, r7
 80152fc:	4628      	mov	r0, r5
 80152fe:	47b0      	blx	r6
 8015300:	2800      	cmp	r0, #0
 8015302:	dc06      	bgt.n	8015312 <__sflush_r+0xfe>
 8015304:	89a3      	ldrh	r3, [r4, #12]
 8015306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801530a:	81a3      	strh	r3, [r4, #12]
 801530c:	f04f 30ff 	mov.w	r0, #4294967295
 8015310:	e78e      	b.n	8015230 <__sflush_r+0x1c>
 8015312:	4407      	add	r7, r0
 8015314:	eba8 0800 	sub.w	r8, r8, r0
 8015318:	e7e9      	b.n	80152ee <__sflush_r+0xda>
 801531a:	bf00      	nop
 801531c:	20400001 	.word	0x20400001

08015320 <_fflush_r>:
 8015320:	b538      	push	{r3, r4, r5, lr}
 8015322:	690b      	ldr	r3, [r1, #16]
 8015324:	4605      	mov	r5, r0
 8015326:	460c      	mov	r4, r1
 8015328:	b913      	cbnz	r3, 8015330 <_fflush_r+0x10>
 801532a:	2500      	movs	r5, #0
 801532c:	4628      	mov	r0, r5
 801532e:	bd38      	pop	{r3, r4, r5, pc}
 8015330:	b118      	cbz	r0, 801533a <_fflush_r+0x1a>
 8015332:	6983      	ldr	r3, [r0, #24]
 8015334:	b90b      	cbnz	r3, 801533a <_fflush_r+0x1a>
 8015336:	f7fe f9fd 	bl	8013734 <__sinit>
 801533a:	4b14      	ldr	r3, [pc, #80]	; (801538c <_fflush_r+0x6c>)
 801533c:	429c      	cmp	r4, r3
 801533e:	d11b      	bne.n	8015378 <_fflush_r+0x58>
 8015340:	686c      	ldr	r4, [r5, #4]
 8015342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d0ef      	beq.n	801532a <_fflush_r+0xa>
 801534a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801534c:	07d0      	lsls	r0, r2, #31
 801534e:	d404      	bmi.n	801535a <_fflush_r+0x3a>
 8015350:	0599      	lsls	r1, r3, #22
 8015352:	d402      	bmi.n	801535a <_fflush_r+0x3a>
 8015354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015356:	f7fe fab0 	bl	80138ba <__retarget_lock_acquire_recursive>
 801535a:	4628      	mov	r0, r5
 801535c:	4621      	mov	r1, r4
 801535e:	f7ff ff59 	bl	8015214 <__sflush_r>
 8015362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015364:	07da      	lsls	r2, r3, #31
 8015366:	4605      	mov	r5, r0
 8015368:	d4e0      	bmi.n	801532c <_fflush_r+0xc>
 801536a:	89a3      	ldrh	r3, [r4, #12]
 801536c:	059b      	lsls	r3, r3, #22
 801536e:	d4dd      	bmi.n	801532c <_fflush_r+0xc>
 8015370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015372:	f7fe faa3 	bl	80138bc <__retarget_lock_release_recursive>
 8015376:	e7d9      	b.n	801532c <_fflush_r+0xc>
 8015378:	4b05      	ldr	r3, [pc, #20]	; (8015390 <_fflush_r+0x70>)
 801537a:	429c      	cmp	r4, r3
 801537c:	d101      	bne.n	8015382 <_fflush_r+0x62>
 801537e:	68ac      	ldr	r4, [r5, #8]
 8015380:	e7df      	b.n	8015342 <_fflush_r+0x22>
 8015382:	4b04      	ldr	r3, [pc, #16]	; (8015394 <_fflush_r+0x74>)
 8015384:	429c      	cmp	r4, r3
 8015386:	bf08      	it	eq
 8015388:	68ec      	ldreq	r4, [r5, #12]
 801538a:	e7da      	b.n	8015342 <_fflush_r+0x22>
 801538c:	08016b78 	.word	0x08016b78
 8015390:	08016b98 	.word	0x08016b98
 8015394:	08016b58 	.word	0x08016b58

08015398 <_localeconv_r>:
 8015398:	4800      	ldr	r0, [pc, #0]	; (801539c <_localeconv_r+0x4>)
 801539a:	4770      	bx	lr
 801539c:	2000046c 	.word	0x2000046c

080153a0 <_lseek_r>:
 80153a0:	b538      	push	{r3, r4, r5, lr}
 80153a2:	4d07      	ldr	r5, [pc, #28]	; (80153c0 <_lseek_r+0x20>)
 80153a4:	4604      	mov	r4, r0
 80153a6:	4608      	mov	r0, r1
 80153a8:	4611      	mov	r1, r2
 80153aa:	2200      	movs	r2, #0
 80153ac:	602a      	str	r2, [r5, #0]
 80153ae:	461a      	mov	r2, r3
 80153b0:	f7ef fd00 	bl	8004db4 <_lseek>
 80153b4:	1c43      	adds	r3, r0, #1
 80153b6:	d102      	bne.n	80153be <_lseek_r+0x1e>
 80153b8:	682b      	ldr	r3, [r5, #0]
 80153ba:	b103      	cbz	r3, 80153be <_lseek_r+0x1e>
 80153bc:	6023      	str	r3, [r4, #0]
 80153be:	bd38      	pop	{r3, r4, r5, pc}
 80153c0:	200097cc 	.word	0x200097cc

080153c4 <malloc>:
 80153c4:	4b02      	ldr	r3, [pc, #8]	; (80153d0 <malloc+0xc>)
 80153c6:	4601      	mov	r1, r0
 80153c8:	6818      	ldr	r0, [r3, #0]
 80153ca:	f7fe bac9 	b.w	8013960 <_malloc_r>
 80153ce:	bf00      	nop
 80153d0:	20000318 	.word	0x20000318

080153d4 <__malloc_lock>:
 80153d4:	4801      	ldr	r0, [pc, #4]	; (80153dc <__malloc_lock+0x8>)
 80153d6:	f7fe ba70 	b.w	80138ba <__retarget_lock_acquire_recursive>
 80153da:	bf00      	nop
 80153dc:	200097c0 	.word	0x200097c0

080153e0 <__malloc_unlock>:
 80153e0:	4801      	ldr	r0, [pc, #4]	; (80153e8 <__malloc_unlock+0x8>)
 80153e2:	f7fe ba6b 	b.w	80138bc <__retarget_lock_release_recursive>
 80153e6:	bf00      	nop
 80153e8:	200097c0 	.word	0x200097c0

080153ec <_Balloc>:
 80153ec:	b570      	push	{r4, r5, r6, lr}
 80153ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80153f0:	4604      	mov	r4, r0
 80153f2:	460d      	mov	r5, r1
 80153f4:	b976      	cbnz	r6, 8015414 <_Balloc+0x28>
 80153f6:	2010      	movs	r0, #16
 80153f8:	f7ff ffe4 	bl	80153c4 <malloc>
 80153fc:	4602      	mov	r2, r0
 80153fe:	6260      	str	r0, [r4, #36]	; 0x24
 8015400:	b920      	cbnz	r0, 801540c <_Balloc+0x20>
 8015402:	4b18      	ldr	r3, [pc, #96]	; (8015464 <_Balloc+0x78>)
 8015404:	4818      	ldr	r0, [pc, #96]	; (8015468 <_Balloc+0x7c>)
 8015406:	2166      	movs	r1, #102	; 0x66
 8015408:	f000 fd44 	bl	8015e94 <__assert_func>
 801540c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015410:	6006      	str	r6, [r0, #0]
 8015412:	60c6      	str	r6, [r0, #12]
 8015414:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015416:	68f3      	ldr	r3, [r6, #12]
 8015418:	b183      	cbz	r3, 801543c <_Balloc+0x50>
 801541a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015422:	b9b8      	cbnz	r0, 8015454 <_Balloc+0x68>
 8015424:	2101      	movs	r1, #1
 8015426:	fa01 f605 	lsl.w	r6, r1, r5
 801542a:	1d72      	adds	r2, r6, #5
 801542c:	0092      	lsls	r2, r2, #2
 801542e:	4620      	mov	r0, r4
 8015430:	f000 fb60 	bl	8015af4 <_calloc_r>
 8015434:	b160      	cbz	r0, 8015450 <_Balloc+0x64>
 8015436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801543a:	e00e      	b.n	801545a <_Balloc+0x6e>
 801543c:	2221      	movs	r2, #33	; 0x21
 801543e:	2104      	movs	r1, #4
 8015440:	4620      	mov	r0, r4
 8015442:	f000 fb57 	bl	8015af4 <_calloc_r>
 8015446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015448:	60f0      	str	r0, [r6, #12]
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d1e4      	bne.n	801541a <_Balloc+0x2e>
 8015450:	2000      	movs	r0, #0
 8015452:	bd70      	pop	{r4, r5, r6, pc}
 8015454:	6802      	ldr	r2, [r0, #0]
 8015456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801545a:	2300      	movs	r3, #0
 801545c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015460:	e7f7      	b.n	8015452 <_Balloc+0x66>
 8015462:	bf00      	nop
 8015464:	08016bfd 	.word	0x08016bfd
 8015468:	08016c80 	.word	0x08016c80

0801546c <_Bfree>:
 801546c:	b570      	push	{r4, r5, r6, lr}
 801546e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015470:	4605      	mov	r5, r0
 8015472:	460c      	mov	r4, r1
 8015474:	b976      	cbnz	r6, 8015494 <_Bfree+0x28>
 8015476:	2010      	movs	r0, #16
 8015478:	f7ff ffa4 	bl	80153c4 <malloc>
 801547c:	4602      	mov	r2, r0
 801547e:	6268      	str	r0, [r5, #36]	; 0x24
 8015480:	b920      	cbnz	r0, 801548c <_Bfree+0x20>
 8015482:	4b09      	ldr	r3, [pc, #36]	; (80154a8 <_Bfree+0x3c>)
 8015484:	4809      	ldr	r0, [pc, #36]	; (80154ac <_Bfree+0x40>)
 8015486:	218a      	movs	r1, #138	; 0x8a
 8015488:	f000 fd04 	bl	8015e94 <__assert_func>
 801548c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015490:	6006      	str	r6, [r0, #0]
 8015492:	60c6      	str	r6, [r0, #12]
 8015494:	b13c      	cbz	r4, 80154a6 <_Bfree+0x3a>
 8015496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015498:	6862      	ldr	r2, [r4, #4]
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154a0:	6021      	str	r1, [r4, #0]
 80154a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	08016bfd 	.word	0x08016bfd
 80154ac:	08016c80 	.word	0x08016c80

080154b0 <__multadd>:
 80154b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b4:	690d      	ldr	r5, [r1, #16]
 80154b6:	4607      	mov	r7, r0
 80154b8:	460c      	mov	r4, r1
 80154ba:	461e      	mov	r6, r3
 80154bc:	f101 0c14 	add.w	ip, r1, #20
 80154c0:	2000      	movs	r0, #0
 80154c2:	f8dc 3000 	ldr.w	r3, [ip]
 80154c6:	b299      	uxth	r1, r3
 80154c8:	fb02 6101 	mla	r1, r2, r1, r6
 80154cc:	0c1e      	lsrs	r6, r3, #16
 80154ce:	0c0b      	lsrs	r3, r1, #16
 80154d0:	fb02 3306 	mla	r3, r2, r6, r3
 80154d4:	b289      	uxth	r1, r1
 80154d6:	3001      	adds	r0, #1
 80154d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80154dc:	4285      	cmp	r5, r0
 80154de:	f84c 1b04 	str.w	r1, [ip], #4
 80154e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80154e6:	dcec      	bgt.n	80154c2 <__multadd+0x12>
 80154e8:	b30e      	cbz	r6, 801552e <__multadd+0x7e>
 80154ea:	68a3      	ldr	r3, [r4, #8]
 80154ec:	42ab      	cmp	r3, r5
 80154ee:	dc19      	bgt.n	8015524 <__multadd+0x74>
 80154f0:	6861      	ldr	r1, [r4, #4]
 80154f2:	4638      	mov	r0, r7
 80154f4:	3101      	adds	r1, #1
 80154f6:	f7ff ff79 	bl	80153ec <_Balloc>
 80154fa:	4680      	mov	r8, r0
 80154fc:	b928      	cbnz	r0, 801550a <__multadd+0x5a>
 80154fe:	4602      	mov	r2, r0
 8015500:	4b0c      	ldr	r3, [pc, #48]	; (8015534 <__multadd+0x84>)
 8015502:	480d      	ldr	r0, [pc, #52]	; (8015538 <__multadd+0x88>)
 8015504:	21b5      	movs	r1, #181	; 0xb5
 8015506:	f000 fcc5 	bl	8015e94 <__assert_func>
 801550a:	6922      	ldr	r2, [r4, #16]
 801550c:	3202      	adds	r2, #2
 801550e:	f104 010c 	add.w	r1, r4, #12
 8015512:	0092      	lsls	r2, r2, #2
 8015514:	300c      	adds	r0, #12
 8015516:	f7fe f9d2 	bl	80138be <memcpy>
 801551a:	4621      	mov	r1, r4
 801551c:	4638      	mov	r0, r7
 801551e:	f7ff ffa5 	bl	801546c <_Bfree>
 8015522:	4644      	mov	r4, r8
 8015524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015528:	3501      	adds	r5, #1
 801552a:	615e      	str	r6, [r3, #20]
 801552c:	6125      	str	r5, [r4, #16]
 801552e:	4620      	mov	r0, r4
 8015530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015534:	08016c6f 	.word	0x08016c6f
 8015538:	08016c80 	.word	0x08016c80

0801553c <__hi0bits>:
 801553c:	0c03      	lsrs	r3, r0, #16
 801553e:	041b      	lsls	r3, r3, #16
 8015540:	b9d3      	cbnz	r3, 8015578 <__hi0bits+0x3c>
 8015542:	0400      	lsls	r0, r0, #16
 8015544:	2310      	movs	r3, #16
 8015546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801554a:	bf04      	itt	eq
 801554c:	0200      	lsleq	r0, r0, #8
 801554e:	3308      	addeq	r3, #8
 8015550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015554:	bf04      	itt	eq
 8015556:	0100      	lsleq	r0, r0, #4
 8015558:	3304      	addeq	r3, #4
 801555a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801555e:	bf04      	itt	eq
 8015560:	0080      	lsleq	r0, r0, #2
 8015562:	3302      	addeq	r3, #2
 8015564:	2800      	cmp	r0, #0
 8015566:	db05      	blt.n	8015574 <__hi0bits+0x38>
 8015568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801556c:	f103 0301 	add.w	r3, r3, #1
 8015570:	bf08      	it	eq
 8015572:	2320      	moveq	r3, #32
 8015574:	4618      	mov	r0, r3
 8015576:	4770      	bx	lr
 8015578:	2300      	movs	r3, #0
 801557a:	e7e4      	b.n	8015546 <__hi0bits+0xa>

0801557c <__lo0bits>:
 801557c:	6803      	ldr	r3, [r0, #0]
 801557e:	f013 0207 	ands.w	r2, r3, #7
 8015582:	4601      	mov	r1, r0
 8015584:	d00b      	beq.n	801559e <__lo0bits+0x22>
 8015586:	07da      	lsls	r2, r3, #31
 8015588:	d423      	bmi.n	80155d2 <__lo0bits+0x56>
 801558a:	0798      	lsls	r0, r3, #30
 801558c:	bf49      	itett	mi
 801558e:	085b      	lsrmi	r3, r3, #1
 8015590:	089b      	lsrpl	r3, r3, #2
 8015592:	2001      	movmi	r0, #1
 8015594:	600b      	strmi	r3, [r1, #0]
 8015596:	bf5c      	itt	pl
 8015598:	600b      	strpl	r3, [r1, #0]
 801559a:	2002      	movpl	r0, #2
 801559c:	4770      	bx	lr
 801559e:	b298      	uxth	r0, r3
 80155a0:	b9a8      	cbnz	r0, 80155ce <__lo0bits+0x52>
 80155a2:	0c1b      	lsrs	r3, r3, #16
 80155a4:	2010      	movs	r0, #16
 80155a6:	b2da      	uxtb	r2, r3
 80155a8:	b90a      	cbnz	r2, 80155ae <__lo0bits+0x32>
 80155aa:	3008      	adds	r0, #8
 80155ac:	0a1b      	lsrs	r3, r3, #8
 80155ae:	071a      	lsls	r2, r3, #28
 80155b0:	bf04      	itt	eq
 80155b2:	091b      	lsreq	r3, r3, #4
 80155b4:	3004      	addeq	r0, #4
 80155b6:	079a      	lsls	r2, r3, #30
 80155b8:	bf04      	itt	eq
 80155ba:	089b      	lsreq	r3, r3, #2
 80155bc:	3002      	addeq	r0, #2
 80155be:	07da      	lsls	r2, r3, #31
 80155c0:	d403      	bmi.n	80155ca <__lo0bits+0x4e>
 80155c2:	085b      	lsrs	r3, r3, #1
 80155c4:	f100 0001 	add.w	r0, r0, #1
 80155c8:	d005      	beq.n	80155d6 <__lo0bits+0x5a>
 80155ca:	600b      	str	r3, [r1, #0]
 80155cc:	4770      	bx	lr
 80155ce:	4610      	mov	r0, r2
 80155d0:	e7e9      	b.n	80155a6 <__lo0bits+0x2a>
 80155d2:	2000      	movs	r0, #0
 80155d4:	4770      	bx	lr
 80155d6:	2020      	movs	r0, #32
 80155d8:	4770      	bx	lr
	...

080155dc <__i2b>:
 80155dc:	b510      	push	{r4, lr}
 80155de:	460c      	mov	r4, r1
 80155e0:	2101      	movs	r1, #1
 80155e2:	f7ff ff03 	bl	80153ec <_Balloc>
 80155e6:	4602      	mov	r2, r0
 80155e8:	b928      	cbnz	r0, 80155f6 <__i2b+0x1a>
 80155ea:	4b05      	ldr	r3, [pc, #20]	; (8015600 <__i2b+0x24>)
 80155ec:	4805      	ldr	r0, [pc, #20]	; (8015604 <__i2b+0x28>)
 80155ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80155f2:	f000 fc4f 	bl	8015e94 <__assert_func>
 80155f6:	2301      	movs	r3, #1
 80155f8:	6144      	str	r4, [r0, #20]
 80155fa:	6103      	str	r3, [r0, #16]
 80155fc:	bd10      	pop	{r4, pc}
 80155fe:	bf00      	nop
 8015600:	08016c6f 	.word	0x08016c6f
 8015604:	08016c80 	.word	0x08016c80

08015608 <__multiply>:
 8015608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801560c:	4691      	mov	r9, r2
 801560e:	690a      	ldr	r2, [r1, #16]
 8015610:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015614:	429a      	cmp	r2, r3
 8015616:	bfb8      	it	lt
 8015618:	460b      	movlt	r3, r1
 801561a:	460c      	mov	r4, r1
 801561c:	bfbc      	itt	lt
 801561e:	464c      	movlt	r4, r9
 8015620:	4699      	movlt	r9, r3
 8015622:	6927      	ldr	r7, [r4, #16]
 8015624:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015628:	68a3      	ldr	r3, [r4, #8]
 801562a:	6861      	ldr	r1, [r4, #4]
 801562c:	eb07 060a 	add.w	r6, r7, sl
 8015630:	42b3      	cmp	r3, r6
 8015632:	b085      	sub	sp, #20
 8015634:	bfb8      	it	lt
 8015636:	3101      	addlt	r1, #1
 8015638:	f7ff fed8 	bl	80153ec <_Balloc>
 801563c:	b930      	cbnz	r0, 801564c <__multiply+0x44>
 801563e:	4602      	mov	r2, r0
 8015640:	4b44      	ldr	r3, [pc, #272]	; (8015754 <__multiply+0x14c>)
 8015642:	4845      	ldr	r0, [pc, #276]	; (8015758 <__multiply+0x150>)
 8015644:	f240 115d 	movw	r1, #349	; 0x15d
 8015648:	f000 fc24 	bl	8015e94 <__assert_func>
 801564c:	f100 0514 	add.w	r5, r0, #20
 8015650:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015654:	462b      	mov	r3, r5
 8015656:	2200      	movs	r2, #0
 8015658:	4543      	cmp	r3, r8
 801565a:	d321      	bcc.n	80156a0 <__multiply+0x98>
 801565c:	f104 0314 	add.w	r3, r4, #20
 8015660:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015664:	f109 0314 	add.w	r3, r9, #20
 8015668:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801566c:	9202      	str	r2, [sp, #8]
 801566e:	1b3a      	subs	r2, r7, r4
 8015670:	3a15      	subs	r2, #21
 8015672:	f022 0203 	bic.w	r2, r2, #3
 8015676:	3204      	adds	r2, #4
 8015678:	f104 0115 	add.w	r1, r4, #21
 801567c:	428f      	cmp	r7, r1
 801567e:	bf38      	it	cc
 8015680:	2204      	movcc	r2, #4
 8015682:	9201      	str	r2, [sp, #4]
 8015684:	9a02      	ldr	r2, [sp, #8]
 8015686:	9303      	str	r3, [sp, #12]
 8015688:	429a      	cmp	r2, r3
 801568a:	d80c      	bhi.n	80156a6 <__multiply+0x9e>
 801568c:	2e00      	cmp	r6, #0
 801568e:	dd03      	ble.n	8015698 <__multiply+0x90>
 8015690:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015694:	2b00      	cmp	r3, #0
 8015696:	d05a      	beq.n	801574e <__multiply+0x146>
 8015698:	6106      	str	r6, [r0, #16]
 801569a:	b005      	add	sp, #20
 801569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a0:	f843 2b04 	str.w	r2, [r3], #4
 80156a4:	e7d8      	b.n	8015658 <__multiply+0x50>
 80156a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80156aa:	f1ba 0f00 	cmp.w	sl, #0
 80156ae:	d024      	beq.n	80156fa <__multiply+0xf2>
 80156b0:	f104 0e14 	add.w	lr, r4, #20
 80156b4:	46a9      	mov	r9, r5
 80156b6:	f04f 0c00 	mov.w	ip, #0
 80156ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80156be:	f8d9 1000 	ldr.w	r1, [r9]
 80156c2:	fa1f fb82 	uxth.w	fp, r2
 80156c6:	b289      	uxth	r1, r1
 80156c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80156cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80156d0:	f8d9 2000 	ldr.w	r2, [r9]
 80156d4:	4461      	add	r1, ip
 80156d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80156da:	fb0a c20b 	mla	r2, sl, fp, ip
 80156de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80156e2:	b289      	uxth	r1, r1
 80156e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80156e8:	4577      	cmp	r7, lr
 80156ea:	f849 1b04 	str.w	r1, [r9], #4
 80156ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80156f2:	d8e2      	bhi.n	80156ba <__multiply+0xb2>
 80156f4:	9a01      	ldr	r2, [sp, #4]
 80156f6:	f845 c002 	str.w	ip, [r5, r2]
 80156fa:	9a03      	ldr	r2, [sp, #12]
 80156fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015700:	3304      	adds	r3, #4
 8015702:	f1b9 0f00 	cmp.w	r9, #0
 8015706:	d020      	beq.n	801574a <__multiply+0x142>
 8015708:	6829      	ldr	r1, [r5, #0]
 801570a:	f104 0c14 	add.w	ip, r4, #20
 801570e:	46ae      	mov	lr, r5
 8015710:	f04f 0a00 	mov.w	sl, #0
 8015714:	f8bc b000 	ldrh.w	fp, [ip]
 8015718:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801571c:	fb09 220b 	mla	r2, r9, fp, r2
 8015720:	4492      	add	sl, r2
 8015722:	b289      	uxth	r1, r1
 8015724:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015728:	f84e 1b04 	str.w	r1, [lr], #4
 801572c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015730:	f8be 1000 	ldrh.w	r1, [lr]
 8015734:	0c12      	lsrs	r2, r2, #16
 8015736:	fb09 1102 	mla	r1, r9, r2, r1
 801573a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801573e:	4567      	cmp	r7, ip
 8015740:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015744:	d8e6      	bhi.n	8015714 <__multiply+0x10c>
 8015746:	9a01      	ldr	r2, [sp, #4]
 8015748:	50a9      	str	r1, [r5, r2]
 801574a:	3504      	adds	r5, #4
 801574c:	e79a      	b.n	8015684 <__multiply+0x7c>
 801574e:	3e01      	subs	r6, #1
 8015750:	e79c      	b.n	801568c <__multiply+0x84>
 8015752:	bf00      	nop
 8015754:	08016c6f 	.word	0x08016c6f
 8015758:	08016c80 	.word	0x08016c80

0801575c <__pow5mult>:
 801575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015760:	4615      	mov	r5, r2
 8015762:	f012 0203 	ands.w	r2, r2, #3
 8015766:	4606      	mov	r6, r0
 8015768:	460f      	mov	r7, r1
 801576a:	d007      	beq.n	801577c <__pow5mult+0x20>
 801576c:	4c25      	ldr	r4, [pc, #148]	; (8015804 <__pow5mult+0xa8>)
 801576e:	3a01      	subs	r2, #1
 8015770:	2300      	movs	r3, #0
 8015772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015776:	f7ff fe9b 	bl	80154b0 <__multadd>
 801577a:	4607      	mov	r7, r0
 801577c:	10ad      	asrs	r5, r5, #2
 801577e:	d03d      	beq.n	80157fc <__pow5mult+0xa0>
 8015780:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015782:	b97c      	cbnz	r4, 80157a4 <__pow5mult+0x48>
 8015784:	2010      	movs	r0, #16
 8015786:	f7ff fe1d 	bl	80153c4 <malloc>
 801578a:	4602      	mov	r2, r0
 801578c:	6270      	str	r0, [r6, #36]	; 0x24
 801578e:	b928      	cbnz	r0, 801579c <__pow5mult+0x40>
 8015790:	4b1d      	ldr	r3, [pc, #116]	; (8015808 <__pow5mult+0xac>)
 8015792:	481e      	ldr	r0, [pc, #120]	; (801580c <__pow5mult+0xb0>)
 8015794:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015798:	f000 fb7c 	bl	8015e94 <__assert_func>
 801579c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80157a0:	6004      	str	r4, [r0, #0]
 80157a2:	60c4      	str	r4, [r0, #12]
 80157a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80157a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80157ac:	b94c      	cbnz	r4, 80157c2 <__pow5mult+0x66>
 80157ae:	f240 2171 	movw	r1, #625	; 0x271
 80157b2:	4630      	mov	r0, r6
 80157b4:	f7ff ff12 	bl	80155dc <__i2b>
 80157b8:	2300      	movs	r3, #0
 80157ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80157be:	4604      	mov	r4, r0
 80157c0:	6003      	str	r3, [r0, #0]
 80157c2:	f04f 0900 	mov.w	r9, #0
 80157c6:	07eb      	lsls	r3, r5, #31
 80157c8:	d50a      	bpl.n	80157e0 <__pow5mult+0x84>
 80157ca:	4639      	mov	r1, r7
 80157cc:	4622      	mov	r2, r4
 80157ce:	4630      	mov	r0, r6
 80157d0:	f7ff ff1a 	bl	8015608 <__multiply>
 80157d4:	4639      	mov	r1, r7
 80157d6:	4680      	mov	r8, r0
 80157d8:	4630      	mov	r0, r6
 80157da:	f7ff fe47 	bl	801546c <_Bfree>
 80157de:	4647      	mov	r7, r8
 80157e0:	106d      	asrs	r5, r5, #1
 80157e2:	d00b      	beq.n	80157fc <__pow5mult+0xa0>
 80157e4:	6820      	ldr	r0, [r4, #0]
 80157e6:	b938      	cbnz	r0, 80157f8 <__pow5mult+0x9c>
 80157e8:	4622      	mov	r2, r4
 80157ea:	4621      	mov	r1, r4
 80157ec:	4630      	mov	r0, r6
 80157ee:	f7ff ff0b 	bl	8015608 <__multiply>
 80157f2:	6020      	str	r0, [r4, #0]
 80157f4:	f8c0 9000 	str.w	r9, [r0]
 80157f8:	4604      	mov	r4, r0
 80157fa:	e7e4      	b.n	80157c6 <__pow5mult+0x6a>
 80157fc:	4638      	mov	r0, r7
 80157fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015802:	bf00      	nop
 8015804:	08016dd0 	.word	0x08016dd0
 8015808:	08016bfd 	.word	0x08016bfd
 801580c:	08016c80 	.word	0x08016c80

08015810 <__lshift>:
 8015810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015814:	460c      	mov	r4, r1
 8015816:	6849      	ldr	r1, [r1, #4]
 8015818:	6923      	ldr	r3, [r4, #16]
 801581a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801581e:	68a3      	ldr	r3, [r4, #8]
 8015820:	4607      	mov	r7, r0
 8015822:	4691      	mov	r9, r2
 8015824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015828:	f108 0601 	add.w	r6, r8, #1
 801582c:	42b3      	cmp	r3, r6
 801582e:	db0b      	blt.n	8015848 <__lshift+0x38>
 8015830:	4638      	mov	r0, r7
 8015832:	f7ff fddb 	bl	80153ec <_Balloc>
 8015836:	4605      	mov	r5, r0
 8015838:	b948      	cbnz	r0, 801584e <__lshift+0x3e>
 801583a:	4602      	mov	r2, r0
 801583c:	4b2a      	ldr	r3, [pc, #168]	; (80158e8 <__lshift+0xd8>)
 801583e:	482b      	ldr	r0, [pc, #172]	; (80158ec <__lshift+0xdc>)
 8015840:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015844:	f000 fb26 	bl	8015e94 <__assert_func>
 8015848:	3101      	adds	r1, #1
 801584a:	005b      	lsls	r3, r3, #1
 801584c:	e7ee      	b.n	801582c <__lshift+0x1c>
 801584e:	2300      	movs	r3, #0
 8015850:	f100 0114 	add.w	r1, r0, #20
 8015854:	f100 0210 	add.w	r2, r0, #16
 8015858:	4618      	mov	r0, r3
 801585a:	4553      	cmp	r3, sl
 801585c:	db37      	blt.n	80158ce <__lshift+0xbe>
 801585e:	6920      	ldr	r0, [r4, #16]
 8015860:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015864:	f104 0314 	add.w	r3, r4, #20
 8015868:	f019 091f 	ands.w	r9, r9, #31
 801586c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015874:	d02f      	beq.n	80158d6 <__lshift+0xc6>
 8015876:	f1c9 0e20 	rsb	lr, r9, #32
 801587a:	468a      	mov	sl, r1
 801587c:	f04f 0c00 	mov.w	ip, #0
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	fa02 f209 	lsl.w	r2, r2, r9
 8015886:	ea42 020c 	orr.w	r2, r2, ip
 801588a:	f84a 2b04 	str.w	r2, [sl], #4
 801588e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015892:	4298      	cmp	r0, r3
 8015894:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015898:	d8f2      	bhi.n	8015880 <__lshift+0x70>
 801589a:	1b03      	subs	r3, r0, r4
 801589c:	3b15      	subs	r3, #21
 801589e:	f023 0303 	bic.w	r3, r3, #3
 80158a2:	3304      	adds	r3, #4
 80158a4:	f104 0215 	add.w	r2, r4, #21
 80158a8:	4290      	cmp	r0, r2
 80158aa:	bf38      	it	cc
 80158ac:	2304      	movcc	r3, #4
 80158ae:	f841 c003 	str.w	ip, [r1, r3]
 80158b2:	f1bc 0f00 	cmp.w	ip, #0
 80158b6:	d001      	beq.n	80158bc <__lshift+0xac>
 80158b8:	f108 0602 	add.w	r6, r8, #2
 80158bc:	3e01      	subs	r6, #1
 80158be:	4638      	mov	r0, r7
 80158c0:	612e      	str	r6, [r5, #16]
 80158c2:	4621      	mov	r1, r4
 80158c4:	f7ff fdd2 	bl	801546c <_Bfree>
 80158c8:	4628      	mov	r0, r5
 80158ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80158d2:	3301      	adds	r3, #1
 80158d4:	e7c1      	b.n	801585a <__lshift+0x4a>
 80158d6:	3904      	subs	r1, #4
 80158d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80158dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80158e0:	4298      	cmp	r0, r3
 80158e2:	d8f9      	bhi.n	80158d8 <__lshift+0xc8>
 80158e4:	e7ea      	b.n	80158bc <__lshift+0xac>
 80158e6:	bf00      	nop
 80158e8:	08016c6f 	.word	0x08016c6f
 80158ec:	08016c80 	.word	0x08016c80

080158f0 <__mcmp>:
 80158f0:	b530      	push	{r4, r5, lr}
 80158f2:	6902      	ldr	r2, [r0, #16]
 80158f4:	690c      	ldr	r4, [r1, #16]
 80158f6:	1b12      	subs	r2, r2, r4
 80158f8:	d10e      	bne.n	8015918 <__mcmp+0x28>
 80158fa:	f100 0314 	add.w	r3, r0, #20
 80158fe:	3114      	adds	r1, #20
 8015900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801590c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015910:	42a5      	cmp	r5, r4
 8015912:	d003      	beq.n	801591c <__mcmp+0x2c>
 8015914:	d305      	bcc.n	8015922 <__mcmp+0x32>
 8015916:	2201      	movs	r2, #1
 8015918:	4610      	mov	r0, r2
 801591a:	bd30      	pop	{r4, r5, pc}
 801591c:	4283      	cmp	r3, r0
 801591e:	d3f3      	bcc.n	8015908 <__mcmp+0x18>
 8015920:	e7fa      	b.n	8015918 <__mcmp+0x28>
 8015922:	f04f 32ff 	mov.w	r2, #4294967295
 8015926:	e7f7      	b.n	8015918 <__mcmp+0x28>

08015928 <__mdiff>:
 8015928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801592c:	460c      	mov	r4, r1
 801592e:	4606      	mov	r6, r0
 8015930:	4611      	mov	r1, r2
 8015932:	4620      	mov	r0, r4
 8015934:	4690      	mov	r8, r2
 8015936:	f7ff ffdb 	bl	80158f0 <__mcmp>
 801593a:	1e05      	subs	r5, r0, #0
 801593c:	d110      	bne.n	8015960 <__mdiff+0x38>
 801593e:	4629      	mov	r1, r5
 8015940:	4630      	mov	r0, r6
 8015942:	f7ff fd53 	bl	80153ec <_Balloc>
 8015946:	b930      	cbnz	r0, 8015956 <__mdiff+0x2e>
 8015948:	4b3a      	ldr	r3, [pc, #232]	; (8015a34 <__mdiff+0x10c>)
 801594a:	4602      	mov	r2, r0
 801594c:	f240 2132 	movw	r1, #562	; 0x232
 8015950:	4839      	ldr	r0, [pc, #228]	; (8015a38 <__mdiff+0x110>)
 8015952:	f000 fa9f 	bl	8015e94 <__assert_func>
 8015956:	2301      	movs	r3, #1
 8015958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801595c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015960:	bfa4      	itt	ge
 8015962:	4643      	movge	r3, r8
 8015964:	46a0      	movge	r8, r4
 8015966:	4630      	mov	r0, r6
 8015968:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801596c:	bfa6      	itte	ge
 801596e:	461c      	movge	r4, r3
 8015970:	2500      	movge	r5, #0
 8015972:	2501      	movlt	r5, #1
 8015974:	f7ff fd3a 	bl	80153ec <_Balloc>
 8015978:	b920      	cbnz	r0, 8015984 <__mdiff+0x5c>
 801597a:	4b2e      	ldr	r3, [pc, #184]	; (8015a34 <__mdiff+0x10c>)
 801597c:	4602      	mov	r2, r0
 801597e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015982:	e7e5      	b.n	8015950 <__mdiff+0x28>
 8015984:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015988:	6926      	ldr	r6, [r4, #16]
 801598a:	60c5      	str	r5, [r0, #12]
 801598c:	f104 0914 	add.w	r9, r4, #20
 8015990:	f108 0514 	add.w	r5, r8, #20
 8015994:	f100 0e14 	add.w	lr, r0, #20
 8015998:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801599c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80159a0:	f108 0210 	add.w	r2, r8, #16
 80159a4:	46f2      	mov	sl, lr
 80159a6:	2100      	movs	r1, #0
 80159a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80159ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80159b0:	fa1f f883 	uxth.w	r8, r3
 80159b4:	fa11 f18b 	uxtah	r1, r1, fp
 80159b8:	0c1b      	lsrs	r3, r3, #16
 80159ba:	eba1 0808 	sub.w	r8, r1, r8
 80159be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80159c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80159c6:	fa1f f888 	uxth.w	r8, r8
 80159ca:	1419      	asrs	r1, r3, #16
 80159cc:	454e      	cmp	r6, r9
 80159ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80159d2:	f84a 3b04 	str.w	r3, [sl], #4
 80159d6:	d8e7      	bhi.n	80159a8 <__mdiff+0x80>
 80159d8:	1b33      	subs	r3, r6, r4
 80159da:	3b15      	subs	r3, #21
 80159dc:	f023 0303 	bic.w	r3, r3, #3
 80159e0:	3304      	adds	r3, #4
 80159e2:	3415      	adds	r4, #21
 80159e4:	42a6      	cmp	r6, r4
 80159e6:	bf38      	it	cc
 80159e8:	2304      	movcc	r3, #4
 80159ea:	441d      	add	r5, r3
 80159ec:	4473      	add	r3, lr
 80159ee:	469e      	mov	lr, r3
 80159f0:	462e      	mov	r6, r5
 80159f2:	4566      	cmp	r6, ip
 80159f4:	d30e      	bcc.n	8015a14 <__mdiff+0xec>
 80159f6:	f10c 0203 	add.w	r2, ip, #3
 80159fa:	1b52      	subs	r2, r2, r5
 80159fc:	f022 0203 	bic.w	r2, r2, #3
 8015a00:	3d03      	subs	r5, #3
 8015a02:	45ac      	cmp	ip, r5
 8015a04:	bf38      	it	cc
 8015a06:	2200      	movcc	r2, #0
 8015a08:	441a      	add	r2, r3
 8015a0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015a0e:	b17b      	cbz	r3, 8015a30 <__mdiff+0x108>
 8015a10:	6107      	str	r7, [r0, #16]
 8015a12:	e7a3      	b.n	801595c <__mdiff+0x34>
 8015a14:	f856 8b04 	ldr.w	r8, [r6], #4
 8015a18:	fa11 f288 	uxtah	r2, r1, r8
 8015a1c:	1414      	asrs	r4, r2, #16
 8015a1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015a22:	b292      	uxth	r2, r2
 8015a24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015a28:	f84e 2b04 	str.w	r2, [lr], #4
 8015a2c:	1421      	asrs	r1, r4, #16
 8015a2e:	e7e0      	b.n	80159f2 <__mdiff+0xca>
 8015a30:	3f01      	subs	r7, #1
 8015a32:	e7ea      	b.n	8015a0a <__mdiff+0xe2>
 8015a34:	08016c6f 	.word	0x08016c6f
 8015a38:	08016c80 	.word	0x08016c80

08015a3c <__d2b>:
 8015a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015a40:	4689      	mov	r9, r1
 8015a42:	2101      	movs	r1, #1
 8015a44:	ec57 6b10 	vmov	r6, r7, d0
 8015a48:	4690      	mov	r8, r2
 8015a4a:	f7ff fccf 	bl	80153ec <_Balloc>
 8015a4e:	4604      	mov	r4, r0
 8015a50:	b930      	cbnz	r0, 8015a60 <__d2b+0x24>
 8015a52:	4602      	mov	r2, r0
 8015a54:	4b25      	ldr	r3, [pc, #148]	; (8015aec <__d2b+0xb0>)
 8015a56:	4826      	ldr	r0, [pc, #152]	; (8015af0 <__d2b+0xb4>)
 8015a58:	f240 310a 	movw	r1, #778	; 0x30a
 8015a5c:	f000 fa1a 	bl	8015e94 <__assert_func>
 8015a60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015a64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015a68:	bb35      	cbnz	r5, 8015ab8 <__d2b+0x7c>
 8015a6a:	2e00      	cmp	r6, #0
 8015a6c:	9301      	str	r3, [sp, #4]
 8015a6e:	d028      	beq.n	8015ac2 <__d2b+0x86>
 8015a70:	4668      	mov	r0, sp
 8015a72:	9600      	str	r6, [sp, #0]
 8015a74:	f7ff fd82 	bl	801557c <__lo0bits>
 8015a78:	9900      	ldr	r1, [sp, #0]
 8015a7a:	b300      	cbz	r0, 8015abe <__d2b+0x82>
 8015a7c:	9a01      	ldr	r2, [sp, #4]
 8015a7e:	f1c0 0320 	rsb	r3, r0, #32
 8015a82:	fa02 f303 	lsl.w	r3, r2, r3
 8015a86:	430b      	orrs	r3, r1
 8015a88:	40c2      	lsrs	r2, r0
 8015a8a:	6163      	str	r3, [r4, #20]
 8015a8c:	9201      	str	r2, [sp, #4]
 8015a8e:	9b01      	ldr	r3, [sp, #4]
 8015a90:	61a3      	str	r3, [r4, #24]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	bf14      	ite	ne
 8015a96:	2202      	movne	r2, #2
 8015a98:	2201      	moveq	r2, #1
 8015a9a:	6122      	str	r2, [r4, #16]
 8015a9c:	b1d5      	cbz	r5, 8015ad4 <__d2b+0x98>
 8015a9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015aa2:	4405      	add	r5, r0
 8015aa4:	f8c9 5000 	str.w	r5, [r9]
 8015aa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015aac:	f8c8 0000 	str.w	r0, [r8]
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	b003      	add	sp, #12
 8015ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015abc:	e7d5      	b.n	8015a6a <__d2b+0x2e>
 8015abe:	6161      	str	r1, [r4, #20]
 8015ac0:	e7e5      	b.n	8015a8e <__d2b+0x52>
 8015ac2:	a801      	add	r0, sp, #4
 8015ac4:	f7ff fd5a 	bl	801557c <__lo0bits>
 8015ac8:	9b01      	ldr	r3, [sp, #4]
 8015aca:	6163      	str	r3, [r4, #20]
 8015acc:	2201      	movs	r2, #1
 8015ace:	6122      	str	r2, [r4, #16]
 8015ad0:	3020      	adds	r0, #32
 8015ad2:	e7e3      	b.n	8015a9c <__d2b+0x60>
 8015ad4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015adc:	f8c9 0000 	str.w	r0, [r9]
 8015ae0:	6918      	ldr	r0, [r3, #16]
 8015ae2:	f7ff fd2b 	bl	801553c <__hi0bits>
 8015ae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015aea:	e7df      	b.n	8015aac <__d2b+0x70>
 8015aec:	08016c6f 	.word	0x08016c6f
 8015af0:	08016c80 	.word	0x08016c80

08015af4 <_calloc_r>:
 8015af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015af6:	fba1 2402 	umull	r2, r4, r1, r2
 8015afa:	b94c      	cbnz	r4, 8015b10 <_calloc_r+0x1c>
 8015afc:	4611      	mov	r1, r2
 8015afe:	9201      	str	r2, [sp, #4]
 8015b00:	f7fd ff2e 	bl	8013960 <_malloc_r>
 8015b04:	9a01      	ldr	r2, [sp, #4]
 8015b06:	4605      	mov	r5, r0
 8015b08:	b930      	cbnz	r0, 8015b18 <_calloc_r+0x24>
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	b003      	add	sp, #12
 8015b0e:	bd30      	pop	{r4, r5, pc}
 8015b10:	220c      	movs	r2, #12
 8015b12:	6002      	str	r2, [r0, #0]
 8015b14:	2500      	movs	r5, #0
 8015b16:	e7f8      	b.n	8015b0a <_calloc_r+0x16>
 8015b18:	4621      	mov	r1, r4
 8015b1a:	f7fd fef8 	bl	801390e <memset>
 8015b1e:	e7f4      	b.n	8015b0a <_calloc_r+0x16>

08015b20 <_free_r>:
 8015b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b22:	2900      	cmp	r1, #0
 8015b24:	d044      	beq.n	8015bb0 <_free_r+0x90>
 8015b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b2a:	9001      	str	r0, [sp, #4]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8015b32:	bfb8      	it	lt
 8015b34:	18e4      	addlt	r4, r4, r3
 8015b36:	f7ff fc4d 	bl	80153d4 <__malloc_lock>
 8015b3a:	4a1e      	ldr	r2, [pc, #120]	; (8015bb4 <_free_r+0x94>)
 8015b3c:	9801      	ldr	r0, [sp, #4]
 8015b3e:	6813      	ldr	r3, [r2, #0]
 8015b40:	b933      	cbnz	r3, 8015b50 <_free_r+0x30>
 8015b42:	6063      	str	r3, [r4, #4]
 8015b44:	6014      	str	r4, [r2, #0]
 8015b46:	b003      	add	sp, #12
 8015b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b4c:	f7ff bc48 	b.w	80153e0 <__malloc_unlock>
 8015b50:	42a3      	cmp	r3, r4
 8015b52:	d908      	bls.n	8015b66 <_free_r+0x46>
 8015b54:	6825      	ldr	r5, [r4, #0]
 8015b56:	1961      	adds	r1, r4, r5
 8015b58:	428b      	cmp	r3, r1
 8015b5a:	bf01      	itttt	eq
 8015b5c:	6819      	ldreq	r1, [r3, #0]
 8015b5e:	685b      	ldreq	r3, [r3, #4]
 8015b60:	1949      	addeq	r1, r1, r5
 8015b62:	6021      	streq	r1, [r4, #0]
 8015b64:	e7ed      	b.n	8015b42 <_free_r+0x22>
 8015b66:	461a      	mov	r2, r3
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	b10b      	cbz	r3, 8015b70 <_free_r+0x50>
 8015b6c:	42a3      	cmp	r3, r4
 8015b6e:	d9fa      	bls.n	8015b66 <_free_r+0x46>
 8015b70:	6811      	ldr	r1, [r2, #0]
 8015b72:	1855      	adds	r5, r2, r1
 8015b74:	42a5      	cmp	r5, r4
 8015b76:	d10b      	bne.n	8015b90 <_free_r+0x70>
 8015b78:	6824      	ldr	r4, [r4, #0]
 8015b7a:	4421      	add	r1, r4
 8015b7c:	1854      	adds	r4, r2, r1
 8015b7e:	42a3      	cmp	r3, r4
 8015b80:	6011      	str	r1, [r2, #0]
 8015b82:	d1e0      	bne.n	8015b46 <_free_r+0x26>
 8015b84:	681c      	ldr	r4, [r3, #0]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	6053      	str	r3, [r2, #4]
 8015b8a:	4421      	add	r1, r4
 8015b8c:	6011      	str	r1, [r2, #0]
 8015b8e:	e7da      	b.n	8015b46 <_free_r+0x26>
 8015b90:	d902      	bls.n	8015b98 <_free_r+0x78>
 8015b92:	230c      	movs	r3, #12
 8015b94:	6003      	str	r3, [r0, #0]
 8015b96:	e7d6      	b.n	8015b46 <_free_r+0x26>
 8015b98:	6825      	ldr	r5, [r4, #0]
 8015b9a:	1961      	adds	r1, r4, r5
 8015b9c:	428b      	cmp	r3, r1
 8015b9e:	bf04      	itt	eq
 8015ba0:	6819      	ldreq	r1, [r3, #0]
 8015ba2:	685b      	ldreq	r3, [r3, #4]
 8015ba4:	6063      	str	r3, [r4, #4]
 8015ba6:	bf04      	itt	eq
 8015ba8:	1949      	addeq	r1, r1, r5
 8015baa:	6021      	streq	r1, [r4, #0]
 8015bac:	6054      	str	r4, [r2, #4]
 8015bae:	e7ca      	b.n	8015b46 <_free_r+0x26>
 8015bb0:	b003      	add	sp, #12
 8015bb2:	bd30      	pop	{r4, r5, pc}
 8015bb4:	200097c4 	.word	0x200097c4

08015bb8 <__ssputs_r>:
 8015bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bbc:	688e      	ldr	r6, [r1, #8]
 8015bbe:	429e      	cmp	r6, r3
 8015bc0:	4682      	mov	sl, r0
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	4690      	mov	r8, r2
 8015bc6:	461f      	mov	r7, r3
 8015bc8:	d838      	bhi.n	8015c3c <__ssputs_r+0x84>
 8015bca:	898a      	ldrh	r2, [r1, #12]
 8015bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015bd0:	d032      	beq.n	8015c38 <__ssputs_r+0x80>
 8015bd2:	6825      	ldr	r5, [r4, #0]
 8015bd4:	6909      	ldr	r1, [r1, #16]
 8015bd6:	eba5 0901 	sub.w	r9, r5, r1
 8015bda:	6965      	ldr	r5, [r4, #20]
 8015bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015be0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015be4:	3301      	adds	r3, #1
 8015be6:	444b      	add	r3, r9
 8015be8:	106d      	asrs	r5, r5, #1
 8015bea:	429d      	cmp	r5, r3
 8015bec:	bf38      	it	cc
 8015bee:	461d      	movcc	r5, r3
 8015bf0:	0553      	lsls	r3, r2, #21
 8015bf2:	d531      	bpl.n	8015c58 <__ssputs_r+0xa0>
 8015bf4:	4629      	mov	r1, r5
 8015bf6:	f7fd feb3 	bl	8013960 <_malloc_r>
 8015bfa:	4606      	mov	r6, r0
 8015bfc:	b950      	cbnz	r0, 8015c14 <__ssputs_r+0x5c>
 8015bfe:	230c      	movs	r3, #12
 8015c00:	f8ca 3000 	str.w	r3, [sl]
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c0a:	81a3      	strh	r3, [r4, #12]
 8015c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c14:	6921      	ldr	r1, [r4, #16]
 8015c16:	464a      	mov	r2, r9
 8015c18:	f7fd fe51 	bl	80138be <memcpy>
 8015c1c:	89a3      	ldrh	r3, [r4, #12]
 8015c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c26:	81a3      	strh	r3, [r4, #12]
 8015c28:	6126      	str	r6, [r4, #16]
 8015c2a:	6165      	str	r5, [r4, #20]
 8015c2c:	444e      	add	r6, r9
 8015c2e:	eba5 0509 	sub.w	r5, r5, r9
 8015c32:	6026      	str	r6, [r4, #0]
 8015c34:	60a5      	str	r5, [r4, #8]
 8015c36:	463e      	mov	r6, r7
 8015c38:	42be      	cmp	r6, r7
 8015c3a:	d900      	bls.n	8015c3e <__ssputs_r+0x86>
 8015c3c:	463e      	mov	r6, r7
 8015c3e:	6820      	ldr	r0, [r4, #0]
 8015c40:	4632      	mov	r2, r6
 8015c42:	4641      	mov	r1, r8
 8015c44:	f7fd fe49 	bl	80138da <memmove>
 8015c48:	68a3      	ldr	r3, [r4, #8]
 8015c4a:	1b9b      	subs	r3, r3, r6
 8015c4c:	60a3      	str	r3, [r4, #8]
 8015c4e:	6823      	ldr	r3, [r4, #0]
 8015c50:	4433      	add	r3, r6
 8015c52:	6023      	str	r3, [r4, #0]
 8015c54:	2000      	movs	r0, #0
 8015c56:	e7db      	b.n	8015c10 <__ssputs_r+0x58>
 8015c58:	462a      	mov	r2, r5
 8015c5a:	f000 f95d 	bl	8015f18 <_realloc_r>
 8015c5e:	4606      	mov	r6, r0
 8015c60:	2800      	cmp	r0, #0
 8015c62:	d1e1      	bne.n	8015c28 <__ssputs_r+0x70>
 8015c64:	6921      	ldr	r1, [r4, #16]
 8015c66:	4650      	mov	r0, sl
 8015c68:	f7ff ff5a 	bl	8015b20 <_free_r>
 8015c6c:	e7c7      	b.n	8015bfe <__ssputs_r+0x46>
	...

08015c70 <_svfiprintf_r>:
 8015c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	4698      	mov	r8, r3
 8015c76:	898b      	ldrh	r3, [r1, #12]
 8015c78:	061b      	lsls	r3, r3, #24
 8015c7a:	b09d      	sub	sp, #116	; 0x74
 8015c7c:	4607      	mov	r7, r0
 8015c7e:	460d      	mov	r5, r1
 8015c80:	4614      	mov	r4, r2
 8015c82:	d50e      	bpl.n	8015ca2 <_svfiprintf_r+0x32>
 8015c84:	690b      	ldr	r3, [r1, #16]
 8015c86:	b963      	cbnz	r3, 8015ca2 <_svfiprintf_r+0x32>
 8015c88:	2140      	movs	r1, #64	; 0x40
 8015c8a:	f7fd fe69 	bl	8013960 <_malloc_r>
 8015c8e:	6028      	str	r0, [r5, #0]
 8015c90:	6128      	str	r0, [r5, #16]
 8015c92:	b920      	cbnz	r0, 8015c9e <_svfiprintf_r+0x2e>
 8015c94:	230c      	movs	r3, #12
 8015c96:	603b      	str	r3, [r7, #0]
 8015c98:	f04f 30ff 	mov.w	r0, #4294967295
 8015c9c:	e0d1      	b.n	8015e42 <_svfiprintf_r+0x1d2>
 8015c9e:	2340      	movs	r3, #64	; 0x40
 8015ca0:	616b      	str	r3, [r5, #20]
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ca6:	2320      	movs	r3, #32
 8015ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cb0:	2330      	movs	r3, #48	; 0x30
 8015cb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015e5c <_svfiprintf_r+0x1ec>
 8015cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015cba:	f04f 0901 	mov.w	r9, #1
 8015cbe:	4623      	mov	r3, r4
 8015cc0:	469a      	mov	sl, r3
 8015cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cc6:	b10a      	cbz	r2, 8015ccc <_svfiprintf_r+0x5c>
 8015cc8:	2a25      	cmp	r2, #37	; 0x25
 8015cca:	d1f9      	bne.n	8015cc0 <_svfiprintf_r+0x50>
 8015ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8015cd0:	d00b      	beq.n	8015cea <_svfiprintf_r+0x7a>
 8015cd2:	465b      	mov	r3, fp
 8015cd4:	4622      	mov	r2, r4
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	4638      	mov	r0, r7
 8015cda:	f7ff ff6d 	bl	8015bb8 <__ssputs_r>
 8015cde:	3001      	adds	r0, #1
 8015ce0:	f000 80aa 	beq.w	8015e38 <_svfiprintf_r+0x1c8>
 8015ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ce6:	445a      	add	r2, fp
 8015ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8015cea:	f89a 3000 	ldrb.w	r3, [sl]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f000 80a2 	beq.w	8015e38 <_svfiprintf_r+0x1c8>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8015cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cfe:	f10a 0a01 	add.w	sl, sl, #1
 8015d02:	9304      	str	r3, [sp, #16]
 8015d04:	9307      	str	r3, [sp, #28]
 8015d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8015d0c:	4654      	mov	r4, sl
 8015d0e:	2205      	movs	r2, #5
 8015d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d14:	4851      	ldr	r0, [pc, #324]	; (8015e5c <_svfiprintf_r+0x1ec>)
 8015d16:	f7ea fa7b 	bl	8000210 <memchr>
 8015d1a:	9a04      	ldr	r2, [sp, #16]
 8015d1c:	b9d8      	cbnz	r0, 8015d56 <_svfiprintf_r+0xe6>
 8015d1e:	06d0      	lsls	r0, r2, #27
 8015d20:	bf44      	itt	mi
 8015d22:	2320      	movmi	r3, #32
 8015d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d28:	0711      	lsls	r1, r2, #28
 8015d2a:	bf44      	itt	mi
 8015d2c:	232b      	movmi	r3, #43	; 0x2b
 8015d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d32:	f89a 3000 	ldrb.w	r3, [sl]
 8015d36:	2b2a      	cmp	r3, #42	; 0x2a
 8015d38:	d015      	beq.n	8015d66 <_svfiprintf_r+0xf6>
 8015d3a:	9a07      	ldr	r2, [sp, #28]
 8015d3c:	4654      	mov	r4, sl
 8015d3e:	2000      	movs	r0, #0
 8015d40:	f04f 0c0a 	mov.w	ip, #10
 8015d44:	4621      	mov	r1, r4
 8015d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d4a:	3b30      	subs	r3, #48	; 0x30
 8015d4c:	2b09      	cmp	r3, #9
 8015d4e:	d94e      	bls.n	8015dee <_svfiprintf_r+0x17e>
 8015d50:	b1b0      	cbz	r0, 8015d80 <_svfiprintf_r+0x110>
 8015d52:	9207      	str	r2, [sp, #28]
 8015d54:	e014      	b.n	8015d80 <_svfiprintf_r+0x110>
 8015d56:	eba0 0308 	sub.w	r3, r0, r8
 8015d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8015d5e:	4313      	orrs	r3, r2
 8015d60:	9304      	str	r3, [sp, #16]
 8015d62:	46a2      	mov	sl, r4
 8015d64:	e7d2      	b.n	8015d0c <_svfiprintf_r+0x9c>
 8015d66:	9b03      	ldr	r3, [sp, #12]
 8015d68:	1d19      	adds	r1, r3, #4
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	9103      	str	r1, [sp, #12]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	bfbb      	ittet	lt
 8015d72:	425b      	neglt	r3, r3
 8015d74:	f042 0202 	orrlt.w	r2, r2, #2
 8015d78:	9307      	strge	r3, [sp, #28]
 8015d7a:	9307      	strlt	r3, [sp, #28]
 8015d7c:	bfb8      	it	lt
 8015d7e:	9204      	strlt	r2, [sp, #16]
 8015d80:	7823      	ldrb	r3, [r4, #0]
 8015d82:	2b2e      	cmp	r3, #46	; 0x2e
 8015d84:	d10c      	bne.n	8015da0 <_svfiprintf_r+0x130>
 8015d86:	7863      	ldrb	r3, [r4, #1]
 8015d88:	2b2a      	cmp	r3, #42	; 0x2a
 8015d8a:	d135      	bne.n	8015df8 <_svfiprintf_r+0x188>
 8015d8c:	9b03      	ldr	r3, [sp, #12]
 8015d8e:	1d1a      	adds	r2, r3, #4
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	9203      	str	r2, [sp, #12]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	bfb8      	it	lt
 8015d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d9c:	3402      	adds	r4, #2
 8015d9e:	9305      	str	r3, [sp, #20]
 8015da0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015e6c <_svfiprintf_r+0x1fc>
 8015da4:	7821      	ldrb	r1, [r4, #0]
 8015da6:	2203      	movs	r2, #3
 8015da8:	4650      	mov	r0, sl
 8015daa:	f7ea fa31 	bl	8000210 <memchr>
 8015dae:	b140      	cbz	r0, 8015dc2 <_svfiprintf_r+0x152>
 8015db0:	2340      	movs	r3, #64	; 0x40
 8015db2:	eba0 000a 	sub.w	r0, r0, sl
 8015db6:	fa03 f000 	lsl.w	r0, r3, r0
 8015dba:	9b04      	ldr	r3, [sp, #16]
 8015dbc:	4303      	orrs	r3, r0
 8015dbe:	3401      	adds	r4, #1
 8015dc0:	9304      	str	r3, [sp, #16]
 8015dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dc6:	4826      	ldr	r0, [pc, #152]	; (8015e60 <_svfiprintf_r+0x1f0>)
 8015dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015dcc:	2206      	movs	r2, #6
 8015dce:	f7ea fa1f 	bl	8000210 <memchr>
 8015dd2:	2800      	cmp	r0, #0
 8015dd4:	d038      	beq.n	8015e48 <_svfiprintf_r+0x1d8>
 8015dd6:	4b23      	ldr	r3, [pc, #140]	; (8015e64 <_svfiprintf_r+0x1f4>)
 8015dd8:	bb1b      	cbnz	r3, 8015e22 <_svfiprintf_r+0x1b2>
 8015dda:	9b03      	ldr	r3, [sp, #12]
 8015ddc:	3307      	adds	r3, #7
 8015dde:	f023 0307 	bic.w	r3, r3, #7
 8015de2:	3308      	adds	r3, #8
 8015de4:	9303      	str	r3, [sp, #12]
 8015de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de8:	4433      	add	r3, r6
 8015dea:	9309      	str	r3, [sp, #36]	; 0x24
 8015dec:	e767      	b.n	8015cbe <_svfiprintf_r+0x4e>
 8015dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8015df2:	460c      	mov	r4, r1
 8015df4:	2001      	movs	r0, #1
 8015df6:	e7a5      	b.n	8015d44 <_svfiprintf_r+0xd4>
 8015df8:	2300      	movs	r3, #0
 8015dfa:	3401      	adds	r4, #1
 8015dfc:	9305      	str	r3, [sp, #20]
 8015dfe:	4619      	mov	r1, r3
 8015e00:	f04f 0c0a 	mov.w	ip, #10
 8015e04:	4620      	mov	r0, r4
 8015e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e0a:	3a30      	subs	r2, #48	; 0x30
 8015e0c:	2a09      	cmp	r2, #9
 8015e0e:	d903      	bls.n	8015e18 <_svfiprintf_r+0x1a8>
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d0c5      	beq.n	8015da0 <_svfiprintf_r+0x130>
 8015e14:	9105      	str	r1, [sp, #20]
 8015e16:	e7c3      	b.n	8015da0 <_svfiprintf_r+0x130>
 8015e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	2301      	movs	r3, #1
 8015e20:	e7f0      	b.n	8015e04 <_svfiprintf_r+0x194>
 8015e22:	ab03      	add	r3, sp, #12
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	462a      	mov	r2, r5
 8015e28:	4b0f      	ldr	r3, [pc, #60]	; (8015e68 <_svfiprintf_r+0x1f8>)
 8015e2a:	a904      	add	r1, sp, #16
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	f7fd feab 	bl	8013b88 <_printf_float>
 8015e32:	1c42      	adds	r2, r0, #1
 8015e34:	4606      	mov	r6, r0
 8015e36:	d1d6      	bne.n	8015de6 <_svfiprintf_r+0x176>
 8015e38:	89ab      	ldrh	r3, [r5, #12]
 8015e3a:	065b      	lsls	r3, r3, #25
 8015e3c:	f53f af2c 	bmi.w	8015c98 <_svfiprintf_r+0x28>
 8015e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e42:	b01d      	add	sp, #116	; 0x74
 8015e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e48:	ab03      	add	r3, sp, #12
 8015e4a:	9300      	str	r3, [sp, #0]
 8015e4c:	462a      	mov	r2, r5
 8015e4e:	4b06      	ldr	r3, [pc, #24]	; (8015e68 <_svfiprintf_r+0x1f8>)
 8015e50:	a904      	add	r1, sp, #16
 8015e52:	4638      	mov	r0, r7
 8015e54:	f7fe f93c 	bl	80140d0 <_printf_i>
 8015e58:	e7eb      	b.n	8015e32 <_svfiprintf_r+0x1c2>
 8015e5a:	bf00      	nop
 8015e5c:	08016ddc 	.word	0x08016ddc
 8015e60:	08016de6 	.word	0x08016de6
 8015e64:	08013b89 	.word	0x08013b89
 8015e68:	08015bb9 	.word	0x08015bb9
 8015e6c:	08016de2 	.word	0x08016de2

08015e70 <_read_r>:
 8015e70:	b538      	push	{r3, r4, r5, lr}
 8015e72:	4d07      	ldr	r5, [pc, #28]	; (8015e90 <_read_r+0x20>)
 8015e74:	4604      	mov	r4, r0
 8015e76:	4608      	mov	r0, r1
 8015e78:	4611      	mov	r1, r2
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	602a      	str	r2, [r5, #0]
 8015e7e:	461a      	mov	r2, r3
 8015e80:	f7ee ff38 	bl	8004cf4 <_read>
 8015e84:	1c43      	adds	r3, r0, #1
 8015e86:	d102      	bne.n	8015e8e <_read_r+0x1e>
 8015e88:	682b      	ldr	r3, [r5, #0]
 8015e8a:	b103      	cbz	r3, 8015e8e <_read_r+0x1e>
 8015e8c:	6023      	str	r3, [r4, #0]
 8015e8e:	bd38      	pop	{r3, r4, r5, pc}
 8015e90:	200097cc 	.word	0x200097cc

08015e94 <__assert_func>:
 8015e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e96:	4614      	mov	r4, r2
 8015e98:	461a      	mov	r2, r3
 8015e9a:	4b09      	ldr	r3, [pc, #36]	; (8015ec0 <__assert_func+0x2c>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	4605      	mov	r5, r0
 8015ea0:	68d8      	ldr	r0, [r3, #12]
 8015ea2:	b14c      	cbz	r4, 8015eb8 <__assert_func+0x24>
 8015ea4:	4b07      	ldr	r3, [pc, #28]	; (8015ec4 <__assert_func+0x30>)
 8015ea6:	9100      	str	r1, [sp, #0]
 8015ea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015eac:	4906      	ldr	r1, [pc, #24]	; (8015ec8 <__assert_func+0x34>)
 8015eae:	462b      	mov	r3, r5
 8015eb0:	f000 f80e 	bl	8015ed0 <fiprintf>
 8015eb4:	f000 fa86 	bl	80163c4 <abort>
 8015eb8:	4b04      	ldr	r3, [pc, #16]	; (8015ecc <__assert_func+0x38>)
 8015eba:	461c      	mov	r4, r3
 8015ebc:	e7f3      	b.n	8015ea6 <__assert_func+0x12>
 8015ebe:	bf00      	nop
 8015ec0:	20000318 	.word	0x20000318
 8015ec4:	08016ded 	.word	0x08016ded
 8015ec8:	08016dfa 	.word	0x08016dfa
 8015ecc:	08016e28 	.word	0x08016e28

08015ed0 <fiprintf>:
 8015ed0:	b40e      	push	{r1, r2, r3}
 8015ed2:	b503      	push	{r0, r1, lr}
 8015ed4:	4601      	mov	r1, r0
 8015ed6:	ab03      	add	r3, sp, #12
 8015ed8:	4805      	ldr	r0, [pc, #20]	; (8015ef0 <fiprintf+0x20>)
 8015eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ede:	6800      	ldr	r0, [r0, #0]
 8015ee0:	9301      	str	r3, [sp, #4]
 8015ee2:	f000 f871 	bl	8015fc8 <_vfiprintf_r>
 8015ee6:	b002      	add	sp, #8
 8015ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015eec:	b003      	add	sp, #12
 8015eee:	4770      	bx	lr
 8015ef0:	20000318 	.word	0x20000318

08015ef4 <__ascii_mbtowc>:
 8015ef4:	b082      	sub	sp, #8
 8015ef6:	b901      	cbnz	r1, 8015efa <__ascii_mbtowc+0x6>
 8015ef8:	a901      	add	r1, sp, #4
 8015efa:	b142      	cbz	r2, 8015f0e <__ascii_mbtowc+0x1a>
 8015efc:	b14b      	cbz	r3, 8015f12 <__ascii_mbtowc+0x1e>
 8015efe:	7813      	ldrb	r3, [r2, #0]
 8015f00:	600b      	str	r3, [r1, #0]
 8015f02:	7812      	ldrb	r2, [r2, #0]
 8015f04:	1e10      	subs	r0, r2, #0
 8015f06:	bf18      	it	ne
 8015f08:	2001      	movne	r0, #1
 8015f0a:	b002      	add	sp, #8
 8015f0c:	4770      	bx	lr
 8015f0e:	4610      	mov	r0, r2
 8015f10:	e7fb      	b.n	8015f0a <__ascii_mbtowc+0x16>
 8015f12:	f06f 0001 	mvn.w	r0, #1
 8015f16:	e7f8      	b.n	8015f0a <__ascii_mbtowc+0x16>

08015f18 <_realloc_r>:
 8015f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1c:	4680      	mov	r8, r0
 8015f1e:	4614      	mov	r4, r2
 8015f20:	460e      	mov	r6, r1
 8015f22:	b921      	cbnz	r1, 8015f2e <_realloc_r+0x16>
 8015f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f28:	4611      	mov	r1, r2
 8015f2a:	f7fd bd19 	b.w	8013960 <_malloc_r>
 8015f2e:	b92a      	cbnz	r2, 8015f3c <_realloc_r+0x24>
 8015f30:	f7ff fdf6 	bl	8015b20 <_free_r>
 8015f34:	4625      	mov	r5, r4
 8015f36:	4628      	mov	r0, r5
 8015f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f3c:	f000 faae 	bl	801649c <_malloc_usable_size_r>
 8015f40:	4284      	cmp	r4, r0
 8015f42:	4607      	mov	r7, r0
 8015f44:	d802      	bhi.n	8015f4c <_realloc_r+0x34>
 8015f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015f4a:	d812      	bhi.n	8015f72 <_realloc_r+0x5a>
 8015f4c:	4621      	mov	r1, r4
 8015f4e:	4640      	mov	r0, r8
 8015f50:	f7fd fd06 	bl	8013960 <_malloc_r>
 8015f54:	4605      	mov	r5, r0
 8015f56:	2800      	cmp	r0, #0
 8015f58:	d0ed      	beq.n	8015f36 <_realloc_r+0x1e>
 8015f5a:	42bc      	cmp	r4, r7
 8015f5c:	4622      	mov	r2, r4
 8015f5e:	4631      	mov	r1, r6
 8015f60:	bf28      	it	cs
 8015f62:	463a      	movcs	r2, r7
 8015f64:	f7fd fcab 	bl	80138be <memcpy>
 8015f68:	4631      	mov	r1, r6
 8015f6a:	4640      	mov	r0, r8
 8015f6c:	f7ff fdd8 	bl	8015b20 <_free_r>
 8015f70:	e7e1      	b.n	8015f36 <_realloc_r+0x1e>
 8015f72:	4635      	mov	r5, r6
 8015f74:	e7df      	b.n	8015f36 <_realloc_r+0x1e>

08015f76 <__sfputc_r>:
 8015f76:	6893      	ldr	r3, [r2, #8]
 8015f78:	3b01      	subs	r3, #1
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	b410      	push	{r4}
 8015f7e:	6093      	str	r3, [r2, #8]
 8015f80:	da08      	bge.n	8015f94 <__sfputc_r+0x1e>
 8015f82:	6994      	ldr	r4, [r2, #24]
 8015f84:	42a3      	cmp	r3, r4
 8015f86:	db01      	blt.n	8015f8c <__sfputc_r+0x16>
 8015f88:	290a      	cmp	r1, #10
 8015f8a:	d103      	bne.n	8015f94 <__sfputc_r+0x1e>
 8015f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f90:	f000 b94a 	b.w	8016228 <__swbuf_r>
 8015f94:	6813      	ldr	r3, [r2, #0]
 8015f96:	1c58      	adds	r0, r3, #1
 8015f98:	6010      	str	r0, [r2, #0]
 8015f9a:	7019      	strb	r1, [r3, #0]
 8015f9c:	4608      	mov	r0, r1
 8015f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fa2:	4770      	bx	lr

08015fa4 <__sfputs_r>:
 8015fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa6:	4606      	mov	r6, r0
 8015fa8:	460f      	mov	r7, r1
 8015faa:	4614      	mov	r4, r2
 8015fac:	18d5      	adds	r5, r2, r3
 8015fae:	42ac      	cmp	r4, r5
 8015fb0:	d101      	bne.n	8015fb6 <__sfputs_r+0x12>
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	e007      	b.n	8015fc6 <__sfputs_r+0x22>
 8015fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fba:	463a      	mov	r2, r7
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	f7ff ffda 	bl	8015f76 <__sfputc_r>
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	d1f3      	bne.n	8015fae <__sfputs_r+0xa>
 8015fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015fc8 <_vfiprintf_r>:
 8015fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fcc:	460d      	mov	r5, r1
 8015fce:	b09d      	sub	sp, #116	; 0x74
 8015fd0:	4614      	mov	r4, r2
 8015fd2:	4698      	mov	r8, r3
 8015fd4:	4606      	mov	r6, r0
 8015fd6:	b118      	cbz	r0, 8015fe0 <_vfiprintf_r+0x18>
 8015fd8:	6983      	ldr	r3, [r0, #24]
 8015fda:	b90b      	cbnz	r3, 8015fe0 <_vfiprintf_r+0x18>
 8015fdc:	f7fd fbaa 	bl	8013734 <__sinit>
 8015fe0:	4b89      	ldr	r3, [pc, #548]	; (8016208 <_vfiprintf_r+0x240>)
 8015fe2:	429d      	cmp	r5, r3
 8015fe4:	d11b      	bne.n	801601e <_vfiprintf_r+0x56>
 8015fe6:	6875      	ldr	r5, [r6, #4]
 8015fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015fea:	07d9      	lsls	r1, r3, #31
 8015fec:	d405      	bmi.n	8015ffa <_vfiprintf_r+0x32>
 8015fee:	89ab      	ldrh	r3, [r5, #12]
 8015ff0:	059a      	lsls	r2, r3, #22
 8015ff2:	d402      	bmi.n	8015ffa <_vfiprintf_r+0x32>
 8015ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ff6:	f7fd fc60 	bl	80138ba <__retarget_lock_acquire_recursive>
 8015ffa:	89ab      	ldrh	r3, [r5, #12]
 8015ffc:	071b      	lsls	r3, r3, #28
 8015ffe:	d501      	bpl.n	8016004 <_vfiprintf_r+0x3c>
 8016000:	692b      	ldr	r3, [r5, #16]
 8016002:	b9eb      	cbnz	r3, 8016040 <_vfiprintf_r+0x78>
 8016004:	4629      	mov	r1, r5
 8016006:	4630      	mov	r0, r6
 8016008:	f000 f96e 	bl	80162e8 <__swsetup_r>
 801600c:	b1c0      	cbz	r0, 8016040 <_vfiprintf_r+0x78>
 801600e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016010:	07dc      	lsls	r4, r3, #31
 8016012:	d50e      	bpl.n	8016032 <_vfiprintf_r+0x6a>
 8016014:	f04f 30ff 	mov.w	r0, #4294967295
 8016018:	b01d      	add	sp, #116	; 0x74
 801601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601e:	4b7b      	ldr	r3, [pc, #492]	; (801620c <_vfiprintf_r+0x244>)
 8016020:	429d      	cmp	r5, r3
 8016022:	d101      	bne.n	8016028 <_vfiprintf_r+0x60>
 8016024:	68b5      	ldr	r5, [r6, #8]
 8016026:	e7df      	b.n	8015fe8 <_vfiprintf_r+0x20>
 8016028:	4b79      	ldr	r3, [pc, #484]	; (8016210 <_vfiprintf_r+0x248>)
 801602a:	429d      	cmp	r5, r3
 801602c:	bf08      	it	eq
 801602e:	68f5      	ldreq	r5, [r6, #12]
 8016030:	e7da      	b.n	8015fe8 <_vfiprintf_r+0x20>
 8016032:	89ab      	ldrh	r3, [r5, #12]
 8016034:	0598      	lsls	r0, r3, #22
 8016036:	d4ed      	bmi.n	8016014 <_vfiprintf_r+0x4c>
 8016038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801603a:	f7fd fc3f 	bl	80138bc <__retarget_lock_release_recursive>
 801603e:	e7e9      	b.n	8016014 <_vfiprintf_r+0x4c>
 8016040:	2300      	movs	r3, #0
 8016042:	9309      	str	r3, [sp, #36]	; 0x24
 8016044:	2320      	movs	r3, #32
 8016046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801604a:	f8cd 800c 	str.w	r8, [sp, #12]
 801604e:	2330      	movs	r3, #48	; 0x30
 8016050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016214 <_vfiprintf_r+0x24c>
 8016054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016058:	f04f 0901 	mov.w	r9, #1
 801605c:	4623      	mov	r3, r4
 801605e:	469a      	mov	sl, r3
 8016060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016064:	b10a      	cbz	r2, 801606a <_vfiprintf_r+0xa2>
 8016066:	2a25      	cmp	r2, #37	; 0x25
 8016068:	d1f9      	bne.n	801605e <_vfiprintf_r+0x96>
 801606a:	ebba 0b04 	subs.w	fp, sl, r4
 801606e:	d00b      	beq.n	8016088 <_vfiprintf_r+0xc0>
 8016070:	465b      	mov	r3, fp
 8016072:	4622      	mov	r2, r4
 8016074:	4629      	mov	r1, r5
 8016076:	4630      	mov	r0, r6
 8016078:	f7ff ff94 	bl	8015fa4 <__sfputs_r>
 801607c:	3001      	adds	r0, #1
 801607e:	f000 80aa 	beq.w	80161d6 <_vfiprintf_r+0x20e>
 8016082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016084:	445a      	add	r2, fp
 8016086:	9209      	str	r2, [sp, #36]	; 0x24
 8016088:	f89a 3000 	ldrb.w	r3, [sl]
 801608c:	2b00      	cmp	r3, #0
 801608e:	f000 80a2 	beq.w	80161d6 <_vfiprintf_r+0x20e>
 8016092:	2300      	movs	r3, #0
 8016094:	f04f 32ff 	mov.w	r2, #4294967295
 8016098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801609c:	f10a 0a01 	add.w	sl, sl, #1
 80160a0:	9304      	str	r3, [sp, #16]
 80160a2:	9307      	str	r3, [sp, #28]
 80160a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160a8:	931a      	str	r3, [sp, #104]	; 0x68
 80160aa:	4654      	mov	r4, sl
 80160ac:	2205      	movs	r2, #5
 80160ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160b2:	4858      	ldr	r0, [pc, #352]	; (8016214 <_vfiprintf_r+0x24c>)
 80160b4:	f7ea f8ac 	bl	8000210 <memchr>
 80160b8:	9a04      	ldr	r2, [sp, #16]
 80160ba:	b9d8      	cbnz	r0, 80160f4 <_vfiprintf_r+0x12c>
 80160bc:	06d1      	lsls	r1, r2, #27
 80160be:	bf44      	itt	mi
 80160c0:	2320      	movmi	r3, #32
 80160c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160c6:	0713      	lsls	r3, r2, #28
 80160c8:	bf44      	itt	mi
 80160ca:	232b      	movmi	r3, #43	; 0x2b
 80160cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160d0:	f89a 3000 	ldrb.w	r3, [sl]
 80160d4:	2b2a      	cmp	r3, #42	; 0x2a
 80160d6:	d015      	beq.n	8016104 <_vfiprintf_r+0x13c>
 80160d8:	9a07      	ldr	r2, [sp, #28]
 80160da:	4654      	mov	r4, sl
 80160dc:	2000      	movs	r0, #0
 80160de:	f04f 0c0a 	mov.w	ip, #10
 80160e2:	4621      	mov	r1, r4
 80160e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160e8:	3b30      	subs	r3, #48	; 0x30
 80160ea:	2b09      	cmp	r3, #9
 80160ec:	d94e      	bls.n	801618c <_vfiprintf_r+0x1c4>
 80160ee:	b1b0      	cbz	r0, 801611e <_vfiprintf_r+0x156>
 80160f0:	9207      	str	r2, [sp, #28]
 80160f2:	e014      	b.n	801611e <_vfiprintf_r+0x156>
 80160f4:	eba0 0308 	sub.w	r3, r0, r8
 80160f8:	fa09 f303 	lsl.w	r3, r9, r3
 80160fc:	4313      	orrs	r3, r2
 80160fe:	9304      	str	r3, [sp, #16]
 8016100:	46a2      	mov	sl, r4
 8016102:	e7d2      	b.n	80160aa <_vfiprintf_r+0xe2>
 8016104:	9b03      	ldr	r3, [sp, #12]
 8016106:	1d19      	adds	r1, r3, #4
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	9103      	str	r1, [sp, #12]
 801610c:	2b00      	cmp	r3, #0
 801610e:	bfbb      	ittet	lt
 8016110:	425b      	neglt	r3, r3
 8016112:	f042 0202 	orrlt.w	r2, r2, #2
 8016116:	9307      	strge	r3, [sp, #28]
 8016118:	9307      	strlt	r3, [sp, #28]
 801611a:	bfb8      	it	lt
 801611c:	9204      	strlt	r2, [sp, #16]
 801611e:	7823      	ldrb	r3, [r4, #0]
 8016120:	2b2e      	cmp	r3, #46	; 0x2e
 8016122:	d10c      	bne.n	801613e <_vfiprintf_r+0x176>
 8016124:	7863      	ldrb	r3, [r4, #1]
 8016126:	2b2a      	cmp	r3, #42	; 0x2a
 8016128:	d135      	bne.n	8016196 <_vfiprintf_r+0x1ce>
 801612a:	9b03      	ldr	r3, [sp, #12]
 801612c:	1d1a      	adds	r2, r3, #4
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	9203      	str	r2, [sp, #12]
 8016132:	2b00      	cmp	r3, #0
 8016134:	bfb8      	it	lt
 8016136:	f04f 33ff 	movlt.w	r3, #4294967295
 801613a:	3402      	adds	r4, #2
 801613c:	9305      	str	r3, [sp, #20]
 801613e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016224 <_vfiprintf_r+0x25c>
 8016142:	7821      	ldrb	r1, [r4, #0]
 8016144:	2203      	movs	r2, #3
 8016146:	4650      	mov	r0, sl
 8016148:	f7ea f862 	bl	8000210 <memchr>
 801614c:	b140      	cbz	r0, 8016160 <_vfiprintf_r+0x198>
 801614e:	2340      	movs	r3, #64	; 0x40
 8016150:	eba0 000a 	sub.w	r0, r0, sl
 8016154:	fa03 f000 	lsl.w	r0, r3, r0
 8016158:	9b04      	ldr	r3, [sp, #16]
 801615a:	4303      	orrs	r3, r0
 801615c:	3401      	adds	r4, #1
 801615e:	9304      	str	r3, [sp, #16]
 8016160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016164:	482c      	ldr	r0, [pc, #176]	; (8016218 <_vfiprintf_r+0x250>)
 8016166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801616a:	2206      	movs	r2, #6
 801616c:	f7ea f850 	bl	8000210 <memchr>
 8016170:	2800      	cmp	r0, #0
 8016172:	d03f      	beq.n	80161f4 <_vfiprintf_r+0x22c>
 8016174:	4b29      	ldr	r3, [pc, #164]	; (801621c <_vfiprintf_r+0x254>)
 8016176:	bb1b      	cbnz	r3, 80161c0 <_vfiprintf_r+0x1f8>
 8016178:	9b03      	ldr	r3, [sp, #12]
 801617a:	3307      	adds	r3, #7
 801617c:	f023 0307 	bic.w	r3, r3, #7
 8016180:	3308      	adds	r3, #8
 8016182:	9303      	str	r3, [sp, #12]
 8016184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016186:	443b      	add	r3, r7
 8016188:	9309      	str	r3, [sp, #36]	; 0x24
 801618a:	e767      	b.n	801605c <_vfiprintf_r+0x94>
 801618c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016190:	460c      	mov	r4, r1
 8016192:	2001      	movs	r0, #1
 8016194:	e7a5      	b.n	80160e2 <_vfiprintf_r+0x11a>
 8016196:	2300      	movs	r3, #0
 8016198:	3401      	adds	r4, #1
 801619a:	9305      	str	r3, [sp, #20]
 801619c:	4619      	mov	r1, r3
 801619e:	f04f 0c0a 	mov.w	ip, #10
 80161a2:	4620      	mov	r0, r4
 80161a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161a8:	3a30      	subs	r2, #48	; 0x30
 80161aa:	2a09      	cmp	r2, #9
 80161ac:	d903      	bls.n	80161b6 <_vfiprintf_r+0x1ee>
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d0c5      	beq.n	801613e <_vfiprintf_r+0x176>
 80161b2:	9105      	str	r1, [sp, #20]
 80161b4:	e7c3      	b.n	801613e <_vfiprintf_r+0x176>
 80161b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80161ba:	4604      	mov	r4, r0
 80161bc:	2301      	movs	r3, #1
 80161be:	e7f0      	b.n	80161a2 <_vfiprintf_r+0x1da>
 80161c0:	ab03      	add	r3, sp, #12
 80161c2:	9300      	str	r3, [sp, #0]
 80161c4:	462a      	mov	r2, r5
 80161c6:	4b16      	ldr	r3, [pc, #88]	; (8016220 <_vfiprintf_r+0x258>)
 80161c8:	a904      	add	r1, sp, #16
 80161ca:	4630      	mov	r0, r6
 80161cc:	f7fd fcdc 	bl	8013b88 <_printf_float>
 80161d0:	4607      	mov	r7, r0
 80161d2:	1c78      	adds	r0, r7, #1
 80161d4:	d1d6      	bne.n	8016184 <_vfiprintf_r+0x1bc>
 80161d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161d8:	07d9      	lsls	r1, r3, #31
 80161da:	d405      	bmi.n	80161e8 <_vfiprintf_r+0x220>
 80161dc:	89ab      	ldrh	r3, [r5, #12]
 80161de:	059a      	lsls	r2, r3, #22
 80161e0:	d402      	bmi.n	80161e8 <_vfiprintf_r+0x220>
 80161e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80161e4:	f7fd fb6a 	bl	80138bc <__retarget_lock_release_recursive>
 80161e8:	89ab      	ldrh	r3, [r5, #12]
 80161ea:	065b      	lsls	r3, r3, #25
 80161ec:	f53f af12 	bmi.w	8016014 <_vfiprintf_r+0x4c>
 80161f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161f2:	e711      	b.n	8016018 <_vfiprintf_r+0x50>
 80161f4:	ab03      	add	r3, sp, #12
 80161f6:	9300      	str	r3, [sp, #0]
 80161f8:	462a      	mov	r2, r5
 80161fa:	4b09      	ldr	r3, [pc, #36]	; (8016220 <_vfiprintf_r+0x258>)
 80161fc:	a904      	add	r1, sp, #16
 80161fe:	4630      	mov	r0, r6
 8016200:	f7fd ff66 	bl	80140d0 <_printf_i>
 8016204:	e7e4      	b.n	80161d0 <_vfiprintf_r+0x208>
 8016206:	bf00      	nop
 8016208:	08016b78 	.word	0x08016b78
 801620c:	08016b98 	.word	0x08016b98
 8016210:	08016b58 	.word	0x08016b58
 8016214:	08016ddc 	.word	0x08016ddc
 8016218:	08016de6 	.word	0x08016de6
 801621c:	08013b89 	.word	0x08013b89
 8016220:	08015fa5 	.word	0x08015fa5
 8016224:	08016de2 	.word	0x08016de2

08016228 <__swbuf_r>:
 8016228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801622a:	460e      	mov	r6, r1
 801622c:	4614      	mov	r4, r2
 801622e:	4605      	mov	r5, r0
 8016230:	b118      	cbz	r0, 801623a <__swbuf_r+0x12>
 8016232:	6983      	ldr	r3, [r0, #24]
 8016234:	b90b      	cbnz	r3, 801623a <__swbuf_r+0x12>
 8016236:	f7fd fa7d 	bl	8013734 <__sinit>
 801623a:	4b21      	ldr	r3, [pc, #132]	; (80162c0 <__swbuf_r+0x98>)
 801623c:	429c      	cmp	r4, r3
 801623e:	d12b      	bne.n	8016298 <__swbuf_r+0x70>
 8016240:	686c      	ldr	r4, [r5, #4]
 8016242:	69a3      	ldr	r3, [r4, #24]
 8016244:	60a3      	str	r3, [r4, #8]
 8016246:	89a3      	ldrh	r3, [r4, #12]
 8016248:	071a      	lsls	r2, r3, #28
 801624a:	d52f      	bpl.n	80162ac <__swbuf_r+0x84>
 801624c:	6923      	ldr	r3, [r4, #16]
 801624e:	b36b      	cbz	r3, 80162ac <__swbuf_r+0x84>
 8016250:	6923      	ldr	r3, [r4, #16]
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	1ac0      	subs	r0, r0, r3
 8016256:	6963      	ldr	r3, [r4, #20]
 8016258:	b2f6      	uxtb	r6, r6
 801625a:	4283      	cmp	r3, r0
 801625c:	4637      	mov	r7, r6
 801625e:	dc04      	bgt.n	801626a <__swbuf_r+0x42>
 8016260:	4621      	mov	r1, r4
 8016262:	4628      	mov	r0, r5
 8016264:	f7ff f85c 	bl	8015320 <_fflush_r>
 8016268:	bb30      	cbnz	r0, 80162b8 <__swbuf_r+0x90>
 801626a:	68a3      	ldr	r3, [r4, #8]
 801626c:	3b01      	subs	r3, #1
 801626e:	60a3      	str	r3, [r4, #8]
 8016270:	6823      	ldr	r3, [r4, #0]
 8016272:	1c5a      	adds	r2, r3, #1
 8016274:	6022      	str	r2, [r4, #0]
 8016276:	701e      	strb	r6, [r3, #0]
 8016278:	6963      	ldr	r3, [r4, #20]
 801627a:	3001      	adds	r0, #1
 801627c:	4283      	cmp	r3, r0
 801627e:	d004      	beq.n	801628a <__swbuf_r+0x62>
 8016280:	89a3      	ldrh	r3, [r4, #12]
 8016282:	07db      	lsls	r3, r3, #31
 8016284:	d506      	bpl.n	8016294 <__swbuf_r+0x6c>
 8016286:	2e0a      	cmp	r6, #10
 8016288:	d104      	bne.n	8016294 <__swbuf_r+0x6c>
 801628a:	4621      	mov	r1, r4
 801628c:	4628      	mov	r0, r5
 801628e:	f7ff f847 	bl	8015320 <_fflush_r>
 8016292:	b988      	cbnz	r0, 80162b8 <__swbuf_r+0x90>
 8016294:	4638      	mov	r0, r7
 8016296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016298:	4b0a      	ldr	r3, [pc, #40]	; (80162c4 <__swbuf_r+0x9c>)
 801629a:	429c      	cmp	r4, r3
 801629c:	d101      	bne.n	80162a2 <__swbuf_r+0x7a>
 801629e:	68ac      	ldr	r4, [r5, #8]
 80162a0:	e7cf      	b.n	8016242 <__swbuf_r+0x1a>
 80162a2:	4b09      	ldr	r3, [pc, #36]	; (80162c8 <__swbuf_r+0xa0>)
 80162a4:	429c      	cmp	r4, r3
 80162a6:	bf08      	it	eq
 80162a8:	68ec      	ldreq	r4, [r5, #12]
 80162aa:	e7ca      	b.n	8016242 <__swbuf_r+0x1a>
 80162ac:	4621      	mov	r1, r4
 80162ae:	4628      	mov	r0, r5
 80162b0:	f000 f81a 	bl	80162e8 <__swsetup_r>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	d0cb      	beq.n	8016250 <__swbuf_r+0x28>
 80162b8:	f04f 37ff 	mov.w	r7, #4294967295
 80162bc:	e7ea      	b.n	8016294 <__swbuf_r+0x6c>
 80162be:	bf00      	nop
 80162c0:	08016b78 	.word	0x08016b78
 80162c4:	08016b98 	.word	0x08016b98
 80162c8:	08016b58 	.word	0x08016b58

080162cc <__ascii_wctomb>:
 80162cc:	b149      	cbz	r1, 80162e2 <__ascii_wctomb+0x16>
 80162ce:	2aff      	cmp	r2, #255	; 0xff
 80162d0:	bf85      	ittet	hi
 80162d2:	238a      	movhi	r3, #138	; 0x8a
 80162d4:	6003      	strhi	r3, [r0, #0]
 80162d6:	700a      	strbls	r2, [r1, #0]
 80162d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80162dc:	bf98      	it	ls
 80162de:	2001      	movls	r0, #1
 80162e0:	4770      	bx	lr
 80162e2:	4608      	mov	r0, r1
 80162e4:	4770      	bx	lr
	...

080162e8 <__swsetup_r>:
 80162e8:	4b32      	ldr	r3, [pc, #200]	; (80163b4 <__swsetup_r+0xcc>)
 80162ea:	b570      	push	{r4, r5, r6, lr}
 80162ec:	681d      	ldr	r5, [r3, #0]
 80162ee:	4606      	mov	r6, r0
 80162f0:	460c      	mov	r4, r1
 80162f2:	b125      	cbz	r5, 80162fe <__swsetup_r+0x16>
 80162f4:	69ab      	ldr	r3, [r5, #24]
 80162f6:	b913      	cbnz	r3, 80162fe <__swsetup_r+0x16>
 80162f8:	4628      	mov	r0, r5
 80162fa:	f7fd fa1b 	bl	8013734 <__sinit>
 80162fe:	4b2e      	ldr	r3, [pc, #184]	; (80163b8 <__swsetup_r+0xd0>)
 8016300:	429c      	cmp	r4, r3
 8016302:	d10f      	bne.n	8016324 <__swsetup_r+0x3c>
 8016304:	686c      	ldr	r4, [r5, #4]
 8016306:	89a3      	ldrh	r3, [r4, #12]
 8016308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801630c:	0719      	lsls	r1, r3, #28
 801630e:	d42c      	bmi.n	801636a <__swsetup_r+0x82>
 8016310:	06dd      	lsls	r5, r3, #27
 8016312:	d411      	bmi.n	8016338 <__swsetup_r+0x50>
 8016314:	2309      	movs	r3, #9
 8016316:	6033      	str	r3, [r6, #0]
 8016318:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801631c:	81a3      	strh	r3, [r4, #12]
 801631e:	f04f 30ff 	mov.w	r0, #4294967295
 8016322:	e03e      	b.n	80163a2 <__swsetup_r+0xba>
 8016324:	4b25      	ldr	r3, [pc, #148]	; (80163bc <__swsetup_r+0xd4>)
 8016326:	429c      	cmp	r4, r3
 8016328:	d101      	bne.n	801632e <__swsetup_r+0x46>
 801632a:	68ac      	ldr	r4, [r5, #8]
 801632c:	e7eb      	b.n	8016306 <__swsetup_r+0x1e>
 801632e:	4b24      	ldr	r3, [pc, #144]	; (80163c0 <__swsetup_r+0xd8>)
 8016330:	429c      	cmp	r4, r3
 8016332:	bf08      	it	eq
 8016334:	68ec      	ldreq	r4, [r5, #12]
 8016336:	e7e6      	b.n	8016306 <__swsetup_r+0x1e>
 8016338:	0758      	lsls	r0, r3, #29
 801633a:	d512      	bpl.n	8016362 <__swsetup_r+0x7a>
 801633c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801633e:	b141      	cbz	r1, 8016352 <__swsetup_r+0x6a>
 8016340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016344:	4299      	cmp	r1, r3
 8016346:	d002      	beq.n	801634e <__swsetup_r+0x66>
 8016348:	4630      	mov	r0, r6
 801634a:	f7ff fbe9 	bl	8015b20 <_free_r>
 801634e:	2300      	movs	r3, #0
 8016350:	6363      	str	r3, [r4, #52]	; 0x34
 8016352:	89a3      	ldrh	r3, [r4, #12]
 8016354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016358:	81a3      	strh	r3, [r4, #12]
 801635a:	2300      	movs	r3, #0
 801635c:	6063      	str	r3, [r4, #4]
 801635e:	6923      	ldr	r3, [r4, #16]
 8016360:	6023      	str	r3, [r4, #0]
 8016362:	89a3      	ldrh	r3, [r4, #12]
 8016364:	f043 0308 	orr.w	r3, r3, #8
 8016368:	81a3      	strh	r3, [r4, #12]
 801636a:	6923      	ldr	r3, [r4, #16]
 801636c:	b94b      	cbnz	r3, 8016382 <__swsetup_r+0x9a>
 801636e:	89a3      	ldrh	r3, [r4, #12]
 8016370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016378:	d003      	beq.n	8016382 <__swsetup_r+0x9a>
 801637a:	4621      	mov	r1, r4
 801637c:	4630      	mov	r0, r6
 801637e:	f000 f84d 	bl	801641c <__smakebuf_r>
 8016382:	89a0      	ldrh	r0, [r4, #12]
 8016384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016388:	f010 0301 	ands.w	r3, r0, #1
 801638c:	d00a      	beq.n	80163a4 <__swsetup_r+0xbc>
 801638e:	2300      	movs	r3, #0
 8016390:	60a3      	str	r3, [r4, #8]
 8016392:	6963      	ldr	r3, [r4, #20]
 8016394:	425b      	negs	r3, r3
 8016396:	61a3      	str	r3, [r4, #24]
 8016398:	6923      	ldr	r3, [r4, #16]
 801639a:	b943      	cbnz	r3, 80163ae <__swsetup_r+0xc6>
 801639c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80163a0:	d1ba      	bne.n	8016318 <__swsetup_r+0x30>
 80163a2:	bd70      	pop	{r4, r5, r6, pc}
 80163a4:	0781      	lsls	r1, r0, #30
 80163a6:	bf58      	it	pl
 80163a8:	6963      	ldrpl	r3, [r4, #20]
 80163aa:	60a3      	str	r3, [r4, #8]
 80163ac:	e7f4      	b.n	8016398 <__swsetup_r+0xb0>
 80163ae:	2000      	movs	r0, #0
 80163b0:	e7f7      	b.n	80163a2 <__swsetup_r+0xba>
 80163b2:	bf00      	nop
 80163b4:	20000318 	.word	0x20000318
 80163b8:	08016b78 	.word	0x08016b78
 80163bc:	08016b98 	.word	0x08016b98
 80163c0:	08016b58 	.word	0x08016b58

080163c4 <abort>:
 80163c4:	b508      	push	{r3, lr}
 80163c6:	2006      	movs	r0, #6
 80163c8:	f000 f898 	bl	80164fc <raise>
 80163cc:	2001      	movs	r0, #1
 80163ce:	f7ee fc87 	bl	8004ce0 <_exit>

080163d2 <__swhatbuf_r>:
 80163d2:	b570      	push	{r4, r5, r6, lr}
 80163d4:	460e      	mov	r6, r1
 80163d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163da:	2900      	cmp	r1, #0
 80163dc:	b096      	sub	sp, #88	; 0x58
 80163de:	4614      	mov	r4, r2
 80163e0:	461d      	mov	r5, r3
 80163e2:	da08      	bge.n	80163f6 <__swhatbuf_r+0x24>
 80163e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80163e8:	2200      	movs	r2, #0
 80163ea:	602a      	str	r2, [r5, #0]
 80163ec:	061a      	lsls	r2, r3, #24
 80163ee:	d410      	bmi.n	8016412 <__swhatbuf_r+0x40>
 80163f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163f4:	e00e      	b.n	8016414 <__swhatbuf_r+0x42>
 80163f6:	466a      	mov	r2, sp
 80163f8:	f000 f89c 	bl	8016534 <_fstat_r>
 80163fc:	2800      	cmp	r0, #0
 80163fe:	dbf1      	blt.n	80163e4 <__swhatbuf_r+0x12>
 8016400:	9a01      	ldr	r2, [sp, #4]
 8016402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801640a:	425a      	negs	r2, r3
 801640c:	415a      	adcs	r2, r3
 801640e:	602a      	str	r2, [r5, #0]
 8016410:	e7ee      	b.n	80163f0 <__swhatbuf_r+0x1e>
 8016412:	2340      	movs	r3, #64	; 0x40
 8016414:	2000      	movs	r0, #0
 8016416:	6023      	str	r3, [r4, #0]
 8016418:	b016      	add	sp, #88	; 0x58
 801641a:	bd70      	pop	{r4, r5, r6, pc}

0801641c <__smakebuf_r>:
 801641c:	898b      	ldrh	r3, [r1, #12]
 801641e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016420:	079d      	lsls	r5, r3, #30
 8016422:	4606      	mov	r6, r0
 8016424:	460c      	mov	r4, r1
 8016426:	d507      	bpl.n	8016438 <__smakebuf_r+0x1c>
 8016428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801642c:	6023      	str	r3, [r4, #0]
 801642e:	6123      	str	r3, [r4, #16]
 8016430:	2301      	movs	r3, #1
 8016432:	6163      	str	r3, [r4, #20]
 8016434:	b002      	add	sp, #8
 8016436:	bd70      	pop	{r4, r5, r6, pc}
 8016438:	ab01      	add	r3, sp, #4
 801643a:	466a      	mov	r2, sp
 801643c:	f7ff ffc9 	bl	80163d2 <__swhatbuf_r>
 8016440:	9900      	ldr	r1, [sp, #0]
 8016442:	4605      	mov	r5, r0
 8016444:	4630      	mov	r0, r6
 8016446:	f7fd fa8b 	bl	8013960 <_malloc_r>
 801644a:	b948      	cbnz	r0, 8016460 <__smakebuf_r+0x44>
 801644c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016450:	059a      	lsls	r2, r3, #22
 8016452:	d4ef      	bmi.n	8016434 <__smakebuf_r+0x18>
 8016454:	f023 0303 	bic.w	r3, r3, #3
 8016458:	f043 0302 	orr.w	r3, r3, #2
 801645c:	81a3      	strh	r3, [r4, #12]
 801645e:	e7e3      	b.n	8016428 <__smakebuf_r+0xc>
 8016460:	4b0d      	ldr	r3, [pc, #52]	; (8016498 <__smakebuf_r+0x7c>)
 8016462:	62b3      	str	r3, [r6, #40]	; 0x28
 8016464:	89a3      	ldrh	r3, [r4, #12]
 8016466:	6020      	str	r0, [r4, #0]
 8016468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801646c:	81a3      	strh	r3, [r4, #12]
 801646e:	9b00      	ldr	r3, [sp, #0]
 8016470:	6163      	str	r3, [r4, #20]
 8016472:	9b01      	ldr	r3, [sp, #4]
 8016474:	6120      	str	r0, [r4, #16]
 8016476:	b15b      	cbz	r3, 8016490 <__smakebuf_r+0x74>
 8016478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801647c:	4630      	mov	r0, r6
 801647e:	f000 f86b 	bl	8016558 <_isatty_r>
 8016482:	b128      	cbz	r0, 8016490 <__smakebuf_r+0x74>
 8016484:	89a3      	ldrh	r3, [r4, #12]
 8016486:	f023 0303 	bic.w	r3, r3, #3
 801648a:	f043 0301 	orr.w	r3, r3, #1
 801648e:	81a3      	strh	r3, [r4, #12]
 8016490:	89a0      	ldrh	r0, [r4, #12]
 8016492:	4305      	orrs	r5, r0
 8016494:	81a5      	strh	r5, [r4, #12]
 8016496:	e7cd      	b.n	8016434 <__smakebuf_r+0x18>
 8016498:	080136cd 	.word	0x080136cd

0801649c <_malloc_usable_size_r>:
 801649c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164a0:	1f18      	subs	r0, r3, #4
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	bfbc      	itt	lt
 80164a6:	580b      	ldrlt	r3, [r1, r0]
 80164a8:	18c0      	addlt	r0, r0, r3
 80164aa:	4770      	bx	lr

080164ac <_raise_r>:
 80164ac:	291f      	cmp	r1, #31
 80164ae:	b538      	push	{r3, r4, r5, lr}
 80164b0:	4604      	mov	r4, r0
 80164b2:	460d      	mov	r5, r1
 80164b4:	d904      	bls.n	80164c0 <_raise_r+0x14>
 80164b6:	2316      	movs	r3, #22
 80164b8:	6003      	str	r3, [r0, #0]
 80164ba:	f04f 30ff 	mov.w	r0, #4294967295
 80164be:	bd38      	pop	{r3, r4, r5, pc}
 80164c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80164c2:	b112      	cbz	r2, 80164ca <_raise_r+0x1e>
 80164c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80164c8:	b94b      	cbnz	r3, 80164de <_raise_r+0x32>
 80164ca:	4620      	mov	r0, r4
 80164cc:	f000 f830 	bl	8016530 <_getpid_r>
 80164d0:	462a      	mov	r2, r5
 80164d2:	4601      	mov	r1, r0
 80164d4:	4620      	mov	r0, r4
 80164d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164da:	f000 b817 	b.w	801650c <_kill_r>
 80164de:	2b01      	cmp	r3, #1
 80164e0:	d00a      	beq.n	80164f8 <_raise_r+0x4c>
 80164e2:	1c59      	adds	r1, r3, #1
 80164e4:	d103      	bne.n	80164ee <_raise_r+0x42>
 80164e6:	2316      	movs	r3, #22
 80164e8:	6003      	str	r3, [r0, #0]
 80164ea:	2001      	movs	r0, #1
 80164ec:	e7e7      	b.n	80164be <_raise_r+0x12>
 80164ee:	2400      	movs	r4, #0
 80164f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80164f4:	4628      	mov	r0, r5
 80164f6:	4798      	blx	r3
 80164f8:	2000      	movs	r0, #0
 80164fa:	e7e0      	b.n	80164be <_raise_r+0x12>

080164fc <raise>:
 80164fc:	4b02      	ldr	r3, [pc, #8]	; (8016508 <raise+0xc>)
 80164fe:	4601      	mov	r1, r0
 8016500:	6818      	ldr	r0, [r3, #0]
 8016502:	f7ff bfd3 	b.w	80164ac <_raise_r>
 8016506:	bf00      	nop
 8016508:	20000318 	.word	0x20000318

0801650c <_kill_r>:
 801650c:	b538      	push	{r3, r4, r5, lr}
 801650e:	4d07      	ldr	r5, [pc, #28]	; (801652c <_kill_r+0x20>)
 8016510:	2300      	movs	r3, #0
 8016512:	4604      	mov	r4, r0
 8016514:	4608      	mov	r0, r1
 8016516:	4611      	mov	r1, r2
 8016518:	602b      	str	r3, [r5, #0]
 801651a:	f7ee fbd1 	bl	8004cc0 <_kill>
 801651e:	1c43      	adds	r3, r0, #1
 8016520:	d102      	bne.n	8016528 <_kill_r+0x1c>
 8016522:	682b      	ldr	r3, [r5, #0]
 8016524:	b103      	cbz	r3, 8016528 <_kill_r+0x1c>
 8016526:	6023      	str	r3, [r4, #0]
 8016528:	bd38      	pop	{r3, r4, r5, pc}
 801652a:	bf00      	nop
 801652c:	200097cc 	.word	0x200097cc

08016530 <_getpid_r>:
 8016530:	f7ee bbbe 	b.w	8004cb0 <_getpid>

08016534 <_fstat_r>:
 8016534:	b538      	push	{r3, r4, r5, lr}
 8016536:	4d07      	ldr	r5, [pc, #28]	; (8016554 <_fstat_r+0x20>)
 8016538:	2300      	movs	r3, #0
 801653a:	4604      	mov	r4, r0
 801653c:	4608      	mov	r0, r1
 801653e:	4611      	mov	r1, r2
 8016540:	602b      	str	r3, [r5, #0]
 8016542:	f7ee fc1c 	bl	8004d7e <_fstat>
 8016546:	1c43      	adds	r3, r0, #1
 8016548:	d102      	bne.n	8016550 <_fstat_r+0x1c>
 801654a:	682b      	ldr	r3, [r5, #0]
 801654c:	b103      	cbz	r3, 8016550 <_fstat_r+0x1c>
 801654e:	6023      	str	r3, [r4, #0]
 8016550:	bd38      	pop	{r3, r4, r5, pc}
 8016552:	bf00      	nop
 8016554:	200097cc 	.word	0x200097cc

08016558 <_isatty_r>:
 8016558:	b538      	push	{r3, r4, r5, lr}
 801655a:	4d06      	ldr	r5, [pc, #24]	; (8016574 <_isatty_r+0x1c>)
 801655c:	2300      	movs	r3, #0
 801655e:	4604      	mov	r4, r0
 8016560:	4608      	mov	r0, r1
 8016562:	602b      	str	r3, [r5, #0]
 8016564:	f7ee fc1b 	bl	8004d9e <_isatty>
 8016568:	1c43      	adds	r3, r0, #1
 801656a:	d102      	bne.n	8016572 <_isatty_r+0x1a>
 801656c:	682b      	ldr	r3, [r5, #0]
 801656e:	b103      	cbz	r3, 8016572 <_isatty_r+0x1a>
 8016570:	6023      	str	r3, [r4, #0]
 8016572:	bd38      	pop	{r3, r4, r5, pc}
 8016574:	200097cc 	.word	0x200097cc

08016578 <_init>:
 8016578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801657a:	bf00      	nop
 801657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801657e:	bc08      	pop	{r3}
 8016580:	469e      	mov	lr, r3
 8016582:	4770      	bx	lr

08016584 <_fini>:
 8016584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016586:	bf00      	nop
 8016588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801658a:	bc08      	pop	{r3}
 801658c:	469e      	mov	lr, r3
 801658e:	4770      	bx	lr
